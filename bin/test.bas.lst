------- FILE g:\My Drive\Atari\BrawdyBAS\test.bas.asm LEVEL 1 PASS 2
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  8400 ????				      include	"vcs.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????						; VCS.H
      4  8400 ????						; Version 1.05, 13/November/2003
      5  8400 ????
      6  8400 ????	       00 69	   VERSION_VCS =	105
      7  8400 ????
      8  8400 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  8400 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  8400 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  8400 ????						;
     12  8400 ????						; This file defines hardware registers and memory mapping for the
     13  8400 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  8400 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  8400 ????						; available at at http://www.atari2600.org/dasm
     16  8400 ????						;
     17  8400 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  8400 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  8400 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  8400 ????						; with your views.  Please contribute, if you think you can improve this
     21  8400 ????						; file!
     22  8400 ????						;
     23  8400 ????						; Latest Revisions...
     24  8400 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  8400 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  8400 ????						;			    This will allow conditional code to verify VCS.H being
     27  8400 ????						;			    used for code assembly.
     28  8400 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  8400 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  8400 ????						;			 mirrored reading/writing differences.	This is more a 
     31  8400 ????						;			 readability issue, and binary compatibility with disassembled
     32  8400 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  8400 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  8400 ????						;			 which was broken by the use of segments in this file, as
     35  8400 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  8400 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  8400 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  8400 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  8400 ????						;						   it is safe to leave it undefined, and the base address will
     40  8400 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  8400 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  8400 ????						;			  - register definitions are now generated through assignment
     43  8400 ????						;			    in uninitialised segments.	This allows a changeable base
     44  8400 ????						;			    address architecture.
     45  8400 ????						; 1.0	22/MAR/2003		Initial release
     46  8400 ????
     47  8400 ????
     48  8400 ????						;-------------------------------------------------------------------------------
     49  8400 ????
     50  8400 ????						; TIA_BASE_ADDRESS
     51  8400 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  8400 ????						; Normally 0, the base address should (externally, before including this file)
     53  8400 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  8400 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  8400 ????						; < $40 as a bankswitch.
     56  8400 ????
     57  8400 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  8400 ????			  -TIA_BASE_ADDRESS =	0
     59  8400 ????				      ENDIF
     60  8400 ????
     61  8400 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  8400 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  8400 ????						; *OR* by declaring the label before including this file, eg:
     64  8400 ????						; TIA_BASE_ADDRESS = $40
     65  8400 ????						;   include "vcs.h"
     66  8400 ????
     67  8400 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  8400 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  8400 ????						; for the mirrored ROM hardware registers.
     70  8400 ????
     71  8400 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  8400 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  8400 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  8400 ????
     75  8400 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  8400 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  8400 ????				      ENDIF
     78  8400 ????
     79  8400 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  8400 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  8400 ????				      ENDIF
     82  8400 ????
     83  8400 ????						;-------------------------------------------------------------------------------
     84  8400 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  8400 ????				      SEG
    201  8400 ????
    202  8400 ????						; EOF
------- FILE g:\My Drive\Atari\BrawdyBAS\test.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  8400 ????				      include	"macro.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????						; MACRO.H
      4  8400 ????						; Version 1.05, 13/NOVEMBER/2003
      5  8400 ????
      6  8400 ????	       00 69	   VERSION_MACRO =	105
      7  8400 ????
      8  8400 ????						;
      9  8400 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  8400 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  8400 ????						;
     12  8400 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  8400 ????						; It is distributed as a companion machine-specific support package
     14  8400 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  8400 ????						; available at at http://www.atari2600.org/dasm
     16  8400 ????						;
     17  8400 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  8400 ????						; contents, or would like to add something, please write to me
     19  8400 ????						; (atari2600@taswegian.com) with your contribution.
     20  8400 ????						;
     21  8400 ????						; Latest Revisions...
     22  8400 ????						;
     23  8400 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  8400 ????						;			    This will allow conditional code to verify MACRO.H being
     25  8400 ????						;			    used for code assembly.
     26  8400 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  8400 ????						;
     28  8400 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  8400 ????						;
     30  8400 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  8400 ????						;			   (standardised macro for vertical synch code)
     32  8400 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  8400 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  8400 ????						; 1.0	22/MAR/2003		Initial release
     35  8400 ????
     36  8400 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  8400 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  8400 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  8400 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  8400 ????						;   registers and require them to be defined first).
     41  8400 ????
     42  8400 ????						; Available macros...
     43  8400 ????						;   SLEEP n		 - sleep for n cycles
     44  8400 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  8400 ????						;   CLEAN_START	 - set machine to known state on startup
     46  8400 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  8400 ????
     48  8400 ????						;-------------------------------------------------------------------------------
     49  8400 ????						; SLEEP duration
     50  8400 ????						; Original author: Thomas Jentzsch
     51  8400 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  8400 ????						; useful for code where precise timing is required.
     53  8400 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  8400 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  8400 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  8400 ????
     57  8400 ????				      MAC	sleep
     58  8400 ????			   .CYCLES    SET	{1}
     59  8400 ????
     60  8400 ????				      IF	.CYCLES < 2
     61  8400 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  8400 ????				      ERR
     63  8400 ????				      ENDIF
     64  8400 ????
     65  8400 ????				      IF	.CYCLES & 1
     66  8400 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  8400 ????				      nop	0
     68  8400 ????				      ELSE
     69  8400 ????				      bit	VSYNC
     70  8400 ????				      ENDIF
     71  8400 ????			   .CYCLES    SET	.CYCLES - 3
     72  8400 ????				      ENDIF
     73  8400 ????
     74  8400 ????				      REPEAT	.CYCLES / 2
     75  8400 ????				      nop
     76  8400 ????				      REPEND
     77  8400 ????				      ENDM		;usage: SLEEP n (n>1)
     78  8400 ????
     79  8400 ????						;-------------------------------------------------------------------------------
     80  8400 ????						; VERTICAL_SYNC
     81  8400 ????						; Original author: Manuel Polik
     82  8400 ????						; Inserts the code required for a proper 3 scannline 
     83  8400 ????						; vertical sync sequence
     84  8400 ????						;
     85  8400 ????						; Note: Alters the accumulator
     86  8400 ????						;
     87  8400 ????						; IN:
     88  8400 ????						; OUT: A = 1
     89  8400 ????
     90  8400 ????				      MAC	vertical_sync
     91  8400 ????				      LDA	#$02	; A = VSYNC enable
     92  8400 ????				      STA	WSYNC	; Finish current line
     93  8400 ????				      STA	VSYNC	; Start vertical sync
     94  8400 ????				      STA	WSYNC	; 1st line vertical sync
     95  8400 ????				      STA	WSYNC	; 2nd line vertical sync
     96  8400 ????				      LSR		; A = VSYNC disable
     97  8400 ????				      STA	WSYNC	; 3rd line vertical sync
     98  8400 ????				      STA	VSYNC	; Stop vertical sync
     99  8400 ????				      ENDM
    100  8400 ????
    101  8400 ????						;-------------------------------------------------------------------------------
    102  8400 ????						; CLEAN_START
    103  8400 ????						; Original author: Andrew Davie
    104  8400 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  8400 ????						; Sets stack pointer to $FF, and all registers to 0
    106  8400 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  8400 ????						; Use as very first section of code on boot (ie: at reset)
    108  8400 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  8400 ????
    110  8400 ????				      MAC	clean_start
    111  8400 ????				      sei
    112  8400 ????				      cld
    113  8400 ????
    114  8400 ????				      ldx	#0
    115  8400 ????				      txa
    116  8400 ????				      tay
    117  8400 ????			   .CLEAR_STACK dex
    118  8400 ????				      txs
    119  8400 ????				      pha
    120  8400 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  8400 ????
    122  8400 ????				      ENDM
    123  8400 ????
    124  8400 ????						;-------------------------------------------------------
    125  8400 ????						; SET_POINTER
    126  8400 ????						; Original author: Manuel Rotschkar
    127  8400 ????						;
    128  8400 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  8400 ????						;
    130  8400 ????						; Usage: SET_POINTER pointer, address
    131  8400 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  8400 ????						;
    133  8400 ????						; Note: Alters the accumulator, NZ flags
    134  8400 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  8400 ????						; IN 2: absolute address
    136  8400 ????
    137  8400 ????				      MAC	set_pointer
    138  8400 ????			   .POINTER   SET	{1}
    139  8400 ????			   .ADDRESS   SET	{2}
    140  8400 ????
    141  8400 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  8400 ????				      STA	.POINTER	; Store in pointer
    143  8400 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  8400 ????				      STA	.POINTER+1	; Store in pointer+1
    145  8400 ????
    146  8400 ????				      ENDM
    147  8400 ????
    148  8400 ????						; EOF
------- FILE g:\My Drive\Atari\BrawdyBAS\test.bas.asm
------- FILE DPCplus.h LEVEL 2 PASS 2
      0  8400 ????				      include	"DPCplus.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????						; DPCplus.H - Display Processor Chip Plus Definitions
      4  8400 ????						; Chris Walton, Fred Quimby, Darrell Spice 2010
      5  8400 ????						; Version 0.00
      6  8400 ????
      7  8400 ????						; DPC Base Address
      8  8400 ????			  -	      IFNCONST	DPC_BASE_ADDRESS
      9  8400 ????			  -DPC_BASE_ADDRESS =	$1000
     10  8400 ????				      ENDIF
     11  8400 ????
     12  8400 ????						; DPC Read Base
     13  8400 ????			  -	      IFNCONST	DPC_BASE_READ_ADDRESS
     14  8400 ????			  -DPC_BASE_READ_ADDRESS =	DPC_BASE_ADDRESS
     15  8400 ????				      ENDIF
     16  8400 ????
     17  8400 ????						; DPC Write Base
     18  8400 ????			  -	      IFNCONST	DPC_BASE_WRITE_ADDRESS
     19  8400 ????			  -DPC_BASE_WRITE_ADDRESS =	DPC_BASE_ADDRESS+$28
     20  8400 ????				      ENDIF
     21  8400 ????
     22 U1028 ????				      SEG.U	DPC_REGISTERS_READ
     23 U1000					      ORG	DPC_BASE_READ_ADDRESS
     24 U1000
     25 U1000							;****************************************
     26 U1000							; DPC+ Read Registers
     27 U1000							;****************************************
     28 U1000							;
     29 U1000							;----------------------------------------
     30 U1000							; Random Numbers
     31 U1000							;----------------------------------------
     32 U1000							; DPC+ provides a 32 bit LFSR (Linear feedback shift register)
     33 U1000							; which is used as a random number generator.	Each individual byte of the
     34 U1000							; random number will return values from 0-255.  The random numbers will follow
     35 U1000							; an exact sequence, so it's best to clock them at least once per frame even if 
     36 U1000							; you don't need the value (this allows the amount of time it takes the user to
     37 U1000							; start the game to select a random starting point in the sequence)
     38 U1000							;----------------------------------------
     39 U1000		       00	   RANDOM0NEXT DS	1	; $00 clock next 32 bit number and returns byte 0
     40 U1001		       00	   RANDOM0PRIOR DS	1	; $01 clock prior 32 bit number and returns byte 0
     41 U1002		       00	   RANDOM1    DS	1	; $02 returns byte 1 of random number w/out clock
     42 U1003		       00	   RANDOM2    DS	1	; $03 returns byte 2 of random number w/out clock
     43 U1004		       00	   RANDOM3    DS	1	; $04 returns byte 3 of random number w/out clock
     44 U1005
     45 U1005							;----------------------------------------
     46 U1005							; Music Fetcher
     47 U1005							;----------------------------------------
     48 U1005							; When generating music, this value must be read every single scanline and
     49 U1005							; stored into AUDV0.
     50 U1005							;----------------------------------------
     51 U1005		       00	   AMPLITUDE  DS	1	; $05
     52 U1006
     53 U1006							;----------------------------------------
     54 U1006							; Reserved
     55 U1006							;----------------------------------------
     56 U1006		       00		      DS	1	; $06
     57 U1007		       00		      DS	1	; $07
     58 U1008
     59 U1008							;----------------------------------------
     60 U1008							; Data Fetcher
     61 U1008							;----------------------------------------
     62 U1008							; There are 8 Data Fetchers which are used to access data stored in the Display
     63 U1008							; Data bank.  Before using, you must point the Data Fetcher at the data to read
     64 U1008							; via DFxLOW and DFxHI.  After each read the Data Fetcher will update to point
     65 U1008							; to the next byte of data to return.
     66 U1008							;
     67 U1008							; psuedo code* to point Data Fetcher 1 to the color data
     68 U1008							;	lda #<(ColorDataPosition - HowFarDownScreen)
     69 U1008							;	sta DF1LOW
     70 U1008							;	lda #>(ColorDataPosition - HowFarDownScreen)
     71 U1008							;	sta DF1HI 
     72 U1008							;	....
     73 U1008							; then in the kernel read the Data Fetcher and update the color, takes 7 cycles
     74 U1008							;	LDA DF1DATA
     75 U1008							;	STA COLUP0
     76 U1008							;
     77 U1008							; * see DPCplus.asm for actual code
     78 U1008							;----------------------------------------
     79 U1008		       00	   DF0DATA    DS	1	; $08
     80 U1009		       00	   DF1DATA    DS	1	; $09
     81 U100a		       00	   DF2DATA    DS	1	; $0A
     82 U100b		       00	   DF3DATA    DS	1	; $0B
     83 U100c		       00	   DF4DATA    DS	1	; $0C
     84 U100d		       00	   DF5DATA    DS	1	; $0D
     85 U100e		       00	   DF6DATA    DS	1	; $0E
     86 U100f		       00	   DF7DATA    DS	1	; $0F
     87 U1010
     88 U1010							;----------------------------------------
     89 U1010							; Data Fetcher, Windowed
     90 U1010							;----------------------------------------
     91 U1010							; The 8 Data Fetchers can also be read in a "windowed" mode, which is most
     92 U1010							; commonly used to update sprites.  To use windowed mode, point the Data
     93 U1010							; Fetcher the same as above, but then also set the Top and Bottom of the
     94 U1010							; Window using DFxTOP and DFxBOT.  When reading via the DFxDATAW registers, a 0
     95 U1010							; value will be returned for anything that's outside of the window.
     96 U1010							;
     97 U1010							; psuedo code to point Data Fetcher0 to the sprite data
     98 U1010							;	lda #<(SpriteDataPosition - HowFarDownScreen)
     99 U1010							;	sta DF0LOW
    100 U1010							;	lda #>(SpriteDataPosition - HowFarDownScreen)
    101 U1010							;	sta DF0HI
    102 U1010							;	
    103 U1010							; set the window for Data Fetcher 0
    104 U1010							;	lda #<(SpriteDataPosition - 1)
    105 U1010							;	sta DF0TOP
    106 U1010							;	lda #<(SpriteDataPosition + ImageHeight)
    107 U1010							;	sta DF0BOT
    108 U1010							;	....
    109 U1010							; then in the kernel read the Data Fetcher and update the sprite, takes 7 cycles
    110 U1010							;	LDA DF0DATAW
    111 U1010							;	STA GRP0
    112 U1010							;----------------------------------------
    113 U1010		       00	   DF0DATAW   DS	1	; $10
    114 U1011		       00	   DF1DATAW   DS	1	; $11
    115 U1012		       00	   DF2DATAW   DS	1	; $12
    116 U1013		       00	   DF3DATAW   DS	1	; $13
    117 U1014		       00	   DF4DATAW   DS	1	; $14
    118 U1015		       00	   DF5DATAW   DS	1	; $15
    119 U1016		       00	   DF6DATAW   DS	1	; $16
    120 U1017		       00	   DF7DATAW   DS	1	; $17
    121 U1018
    122 U1018							;----------------------------------------
    123 U1018							; Fractional Data Fetcher
    124 U1018							;----------------------------------------
    125 U1018							; Another 8 Data Fetchers exist which work differently than the first 8.
    126 U1018							; These allow you to fractionally increment the Data Fetcher so a single
    127 U1018							; value can be read a set number of times before advancing to the next value.
    128 U1018							; This is commonly used to draw asymmetrical playfields without needing to 
    129 U1018							; use 1200 bytes of data (200 scanlines * 6 playfield updates).
    130 U1018							; Before using, you must point the Fractional Data Fetcher at the data to read
    131 U1018							; via DFxFRACLOW and DFxFRACHI.  You must also set the increment value via
    132 U1018							; DFxFRACINC.
    133 U1018							;
    134 U1018							; Set pointer
    135 U1018							;	LDA #<PlayfieldPF0l
    136 U1018							;	STA DF0FRACLOW
    137 U1018							;	... repeat for PF1l, PF2l, PF0r, PF1r and PF2r
    138 U1018							;	lda #>PlayFieldPF0l
    139 U1018							;	STA DF0FRACHI
    140 U1018							;	... repeat for PF1l, PF2l, PF0r, PF1r and PF2r
    141 U1018							; Set the increment to repeat the value for x reads
    142 U1018							;	LDA #(256/x)
    143 U1018							;	STA DF0FRACINC
    144 U1018							;	 STA DF1FRACINC
    145 U1018							;	... repeat for 2-5
    146 U1018							;
    147 U1018							; Special Condition - IF you want to increment the pointer after every read 
    148 U1018							; (just like the normal Data Fetcher), then use the following to set the
    149 U1018							; increment AND prime the Fractional Data Fetcher
    150 U1018							;	LDA #255
    151 U1018							;	STA DF0FRACINC
    152 U1018							;	 STA DF1FRACINC
    153 U1018							;	... repeat for 2-5
    154 U1018							;	LDA DF0FRACDATA - priming read (first value will be read twice)
    155 U1018							;	LDA DF1FRACDATA - priming read (first value will be read twice)
    156 U1018							;	... repeat for 2-5
    157 U1018							;
    158 U1018							; then in the kernel read the Fractional Data Fetchers and update the playfield
    159 U1018							;	LDA DF0FRACDATA
    160 U1018							;	STA PF0
    161 U1018							;	LDA PF1FRACDATA
    162 U1018							;	STA PF1
    163 U1018							;	... repeat for Data Fetchers 2-5, putting them in PF2, PF0, PF1 and PF2
    164 U1018							;----------------------------------------
    165 U1018		       00	   DF0FRACDATA DS	1	; $18
    166 U1019		       00	   DF1FRACDATA DS	1	; $19
    167 U101a		       00	   DF2FRACDATA DS	1	; $1A
    168 U101b		       00	   DF3FRACDATA DS	1	; $1B
    169 U101c		       00	   DF4FRACDATA DS	1	; $1C
    170 U101d		       00	   DF5FRACDATA DS	1	; $1D
    171 U101e		       00	   DF6FRACDATA DS	1	; $1E
    172 U101f		       00	   DF7FRACDATA DS	1	; $1F
    173 U1020
    174 U1020							;----------------------------------------
    175 U1020							; Data Fetcher Window Flag
    176 U1020							;----------------------------------------
    177 U1020							; The Data Fetcher Window Flag allows you to dual-purpose the first four
    178 U1020							; Data Fetchers.  The Window is not required when a Data Fetcher is used to
    179 U1020							; update a sprite's color.  The Flag will return $FF if it's within the window,
    180 U1020							; or 0 if it's not - this value can be used to control the display of the ball
    181 U1020							; and missiles. The Data Fetcher will NOT increment when reading the flag.
    182 U1020							;
    183 U1020							; psuedo code to point Data Fetcher 1 to the color data
    184 U1020							;	lda #<(ColorDataPosition - HowFarDownScreen)
    185 U1020							;	sta DF1LOW
    186 U1020							;	lda #>(ColorDataPosition - HowFarDownScreen)
    187 U1020							;	sta DF1HI
    188 U1020							;
    189 U1020							; set the window based on the missile's Y position and height (number of
    190 U1020							; scanlines to draw missile on)
    191 U1020							;	lda #<(ColorDataPosition + MissileYposition - 1)
    192 U1020							;	sta DF1TOP
    193 U1020							;	lda #<(ColorDataPosition + MissileYposition + MissileHeight)
    194 U1020							;	sta DF1BOT
    195 U1020							;
    196 U1020							; then in the kernel read the Data Fetcher and update the color, then read the
    197 U1020							; flag and update the missile
    198 U1020							;	LDA DF1DATA
    199 U1020							;	STA COLUP0
    200 U1020							;	LDA DF1FLAG
    201 U1020							;	STA ENAM0
    202 U1020							;----------------------------------------
    203 U1020		       00	   DF0FLAG    DS	1	; $20
    204 U1021		       00	   DF1FLAG    DS	1	; $21
    205 U1022		       00	   DF2FLAG    DS	1	; $22
    206 U1023		       00	   DF3FLAG    DS	1	; $23
    207 U1024
    208 U1024							;----------------------------------------
    209 U1024							; Reserved
    210 U1024							;----------------------------------------
    211 U1024		       00		      DS	1	; $24
    212 U1025		       00		      DS	1	; $25
    213 U1026		       00		      DS	1	; $26
    214 U1027		       00		      DS	1	; $27
    215 U1028
    216 U1028
    217 U1080 ????				      SEG.U	DPC_REGISTERS_WRITE
    218 U1028					      ORG	DPC_BASE_WRITE_ADDRESS
    219 U1028
    220 U1028							;****************************************
    221 U1028							; SECTION 2 - DPC+ Write Registers
    222 U1028							;****************************************
    223 U1028							;
    224 U1028							;----------------------------------------
    225 U1028							; Fractional Data Fetcher, Low Pointer
    226 U1028							;----------------------------------------
    227 U1028							; These are used in conjunction with DFxFRACHI to point a Fractional Data
    228 U1028							; Fetcher to the data to read.  For usage, see "Fractional Data Fetcher"
    229 U1028							; in SECTION 1.
    230 U1028							;----------------------------------------
    231 U1028		       00	   DF0FRACLOW DS	1	; $28
    232 U1029		       00	   DF1FRACLOW DS	1	; $29
    233 U102a		       00	   DF2FRACLOW DS	1	; $2A
    234 U102b		       00	   DF3FRACLOW DS	1	; $2B
    235 U102c		       00	   DF4FRACLOW DS	1	; $2C
    236 U102d		       00	   DF5FRACLOW DS	1	; $2D
    237 U102e		       00	   DF6FRACLOW DS	1	; $2E
    238 U102f		       00	   DF7FRACLOW DS	1	; $2F
    239 U1030
    240 U1030							;----------------------------------------
    241 U1030							; Fractional Data Fetcher, High Pointer
    242 U1030							;----------------------------------------
    243 U1030							; These are used in conjunction with DFxFRACLOW to point a Fractional Data
    244 U1030							; Fetcher to the data to read.  For usage, see "Fractional Data Fetcher"
    245 U1030							; in SECTION 1.
    246 U1030							;
    247 U1030							; NOTE: for only the lower 4 bits are used.
    248 U1030							;----------------------------------------
    249 U1030		       00	   DF0FRACHI  DS	1	; $30
    250 U1031		       00	   DF1FRACHI  DS	1	; $31
    251 U1032		       00	   DF2FRACHI  DS	1	; $32
    252 U1033		       00	   DF3FRACHI  DS	1	; $33
    253 U1034		       00	   DF4FRACHI  DS	1	; $34
    254 U1035		       00	   DF5FRACHI  DS	1	; $35 
    255 U1036		       00	   DF6FRACHI  DS	1	; $36 
    256 U1037		       00	   DF7FRACHI  DS	1	; $37 
    257 U1038
    258 U1038							;----------------------------------------
    259 U1038							; Fractional Data Fetcher, Increment
    260 U1038							;----------------------------------------
    261 U1038							; These are used to set the increment amount for the Fractional Data Fetcher.
    262 U1038							; To increment pointer after every Xth read use int(256/X)
    263 U1038							; For usage, see "Fractional Data Fetcher" in SECTION 1.
    264 U1038							;----------------------------------------
    265 U1038		       00	   DF0FRACINC DS	1	; $38
    266 U1039		       00	   DF1FRACINC DS	1	; $39
    267 U103a		       00	   DF2FRACINC DS	1	; $3A
    268 U103b		       00	   DF3FRACINC DS	1	; $3B
    269 U103c		       00	   DF4FRACINC DS	1	; $3C
    270 U103d		       00	   DF5FRACINC DS	1	; $3D
    271 U103e		       00	   DF6FRACINC DS	1	; $3E
    272 U103f		       00	   DF7FRACINC DS	1	; $3F
    273 U1040
    274 U1040							;----------------------------------------
    275 U1040							; Data Fetcher, Window Top
    276 U1040							;----------------------------------------
    277 U1040							; These are used with DFxBOT to define the Data Fetcher Window
    278 U1040							; For usage, see "Data Fetcher, Windowed" in SECTION 1.
    279 U1040							;----------------------------------------
    280 U1040		       00	   DF0TOP     DS	1	; $40
    281 U1041		       00	   DF1TOP     DS	1	; $41
    282 U1042		       00	   DF2TOP     DS	1	; $42
    283 U1043		       00	   DF3TOP     DS	1	; $43
    284 U1044		       00	   DF4TOP     DS	1	; $44
    285 U1045		       00	   DF5TOP     DS	1	; $45
    286 U1046		       00	   DF6TOP     DS	1	; $46
    287 U1047		       00	   DF7TOP     DS	1	; $47
    288 U1048
    289 U1048							;----------------------------------------
    290 U1048							; Data Fetcher, Window Bottom
    291 U1048							;----------------------------------------
    292 U1048							; These are used with DFxTOP to define the Data Fetcher Window
    293 U1048							; For usage, see "Data Fetcher, Windowed" in SECTION 1.
    294 U1048							;----------------------------------------
    295 U1048		       00	   DF0BOT     DS	1	; $48
    296 U1049		       00	   DF1BOT     DS	1	; $49
    297 U104a		       00	   DF2BOT     DS	1	; $4A
    298 U104b		       00	   DF3BOT     DS	1	; $4B
    299 U104c		       00	   DF4BOT     DS	1	; $4C
    300 U104d		       00	   DF5BOT     DS	1	; $4D
    301 U104e		       00	   DF6BOT     DS	1	; $4E
    302 U104f		       00	   DF7BOT     DS	1	; $4F
    303 U1050
    304 U1050							;----------------------------------------
    305 U1050							; Data Fetcher, Low Pointer
    306 U1050							;----------------------------------------
    307 U1050							; These are used in conjunction with DFxHI to point a Data Fetcher to the data
    308 U1050							; to read.  For usage, see "Data Fetcher" in SECTION 1.
    309 U1050							;----------------------------------------
    310 U1050		       00	   DF0LOW     DS	1	; $50
    311 U1051		       00	   DF1LOW     DS	1	; $51
    312 U1052		       00	   DF2LOW     DS	1	; $52
    313 U1053		       00	   DF3LOW     DS	1	; $53
    314 U1054		       00	   DF4LOW     DS	1	; $54
    315 U1055		       00	   DF5LOW     DS	1	; $55
    316 U1056		       00	   DF6LOW     DS	1	; $56
    317 U1057		       00	   DF7LOW     DS	1	; $57
    318 U1058
    319 U1058							;----------------------------------------
    320 U1058							; Fast Fetch Mode
    321 U1058							;----------------------------------------
    322 U1058							; Fast Fetch Mode enables the fastest way to read DPC+ registers.  Normal
    323 U1058							; reads use LDA Absolute addressing (LDA DF0DATA) which takes 4 cycles to
    324 U1058							; process.  Fast Fetch Mode intercepts LDA Immediate addressing (LDA #<DF0DATA)
    325 U1058							; which takes only 2 cycles!  Only immediate values < $28 are intercepted
    326 U1058							; 
    327 U1058							; set Fast Fetch Mode
    328 U1058							;	LDA #0
    329 U1058							;	STA FASTFETCH
    330 U1058							;
    331 U1058							; then use immediate mode to read the registers, takes just 5 cycles to update
    332 U1058							; any TIA register
    333 U1058							;
    334 U1058							;	LDA #<DF0DATA
    335 U1058							;	STA GRP0
    336 U1058							;
    337 U1058							; when done, turn off Fast Fetch Mode using any non-zero value
    338 U1058							;	LDA #$FF
    339 U1058							;	STA FASTFETCH
    340 U1058							;
    341 U1058							; NOTE: if you forget to turn off FASTFETCH mode, then code like this will not
    342 U1058							;	 work as you expect
    343 U1058							;	LDA #0	; returns a RANDOM NUMBER, not 0.
    344 U1058							;	STA COLUPF
    345 U1058							;----------------------------------------
    346 U1058		       00	   FASTFETCH  DS	1	; $58
    347 U1059
    348 U1059							;----------------------------------------
    349 U1059							; Function Support
    350 U1059							;----------------------------------------
    351 U1059							; Currently only Function 255 is defined, and it is used to call user
    352 U1059							; written ARM routines (or C code compiled for the ARM processor.)
    353 U1059							;
    354 U1059							; PARAMETER is not used by function 255, it may be used by future functions.
    355 U1059							; 
    356 U1059							; call custom ARM routine
    357 U1059							;	LDA #$FF
    358 U1059							;	STA CALLFUNCTION
    359 U1059							;
    360 U1059							; A custom ARM demo will be released in the near future
    361 U1059							;----------------------------------------
    362 U1059		       00	   PARAMETER  DS	1	; $59
    363 U105a		       00	   CALLFUNCTION DS	1	; $5A
    364 U105b
    365 U105b							;----------------------------------------
    366 U105b							; Reserved
    367 U105b							;----------------------------------------
    368 U105b		       00		      DS	1	; $5B	 ; reserved
    369 U105c		       00		      DS	1	; $5C	 ; reserved
    370 U105d
    371 U105d							;----------------------------------------
    372 U105d							; Waveforms
    373 U105d							;----------------------------------------
    374 U105d							; Waveforms are 32 byte tables that define a waveform.  Waveforms must be 32
    375 U105d							; byte aligned, and can only be stored in the 4K Display Data Bank. You MUST
    376 U105d							; define an "OFF" waveform,  comprised of all zeros.  The sum of all waveforms
    377 U105d							; being played should be <= 15, so typically you'll use a maximum of 5 for any
    378 U105d							; given value.
    379 U105d							;
    380 U105d							; Valid values are 0-127 and point to the 4K Display Data bank.  The formula
    381 U105d							; (* & $1fff)/32 as shown below will calculate the value for you
    382 U105d							;
    383 U105d							;
    384 U105d							; example waveforms
    385 U105d							;	align 32		; forces the waveform to a 32 byte boundary
    386 U105d							;SOUND_OFF = (* & $1fff)/32	; calculates waveform pointer
    387 U105d							;	.byte 0,0,0,0,0,0,0,0
    388 U105d							;	.byte 0,0,0,0,0,0,0,0
    389 U105d							;	.byte 0,0,0,0,0,0,0,0
    390 U105d							;	.byte 0,0,0,0,0,0,0,0 
    391 U105d							; 
    392 U105d							;	align 32
    393 U105d							;SINE_WAVE = (* & $1fff)/32
    394 U105d							;	.byte 3,3,3,4,4,5,5,5
    395 U105d							;	.byte 5,5,5,5,4,4,3,3
    396 U105d							;	.byte 3,2,2,1,1,0,0,0
    397 U105d							;	.byte 0,0,0,0,1,1,2,2 
    398 U105d							;
    399 U105d							; usage, set voice 0 to Sine Wave, set voice 1 & 2 off
    400 U105d							;	LDA #SINE_WAVE
    401 U105d							;	STA WAVEFORM0
    402 U105d							;	LDA #SOUND_OFF
    403 U105d							;	STA WAVEFORM1
    404 U105d							;	STA WAVEFORM2	
    405 U105d							;----------------------------------------
    406 U105d		       00	   WAVEFORM0  DS	1	; $5D
    407 U105e		       00	   WAVEFORM1  DS	1	; $5E
    408 U105f		       00	   WAVEFORM2  DS	1	; $5F
    409 U1060
    410 U1060							;----------------------------------------
    411 U1060							; Data Fetcher Push (stack)
    412 U1060							;----------------------------------------
    413 U1060							; The Data Fetchers can also be used to update the contents of the 4K
    414 U1060							; Display Data bank.  Point the Data Fetcher to the data to change,
    415 U1060							; then Push to it.  The Data Fetcher's pointer will be decremented BEFORE
    416 U1060							; the data is written.
    417 U1060							;
    418 U1060							; point Data Fetcher 1 to the sprite data
    419 U1060							;	lda #<DisplayData
    420 U1060							;	sta DF1LOW
    421 U1060							;	lda #>DisplayData
    422 U1060							;	sta DF1HI 
    423 U1060							;
    424 U1060							; then update it
    425 U1060							;	LDA #$FF
    426 U1060							;	STA DF1PUSH ; changes data at DisplayData - 1
    427 U1060							;	LDA #$81
    428 U1060							;	STA DF1OUSH ; changes data at DisplayData - 2
    429 U1060							;----------------------------------------
    430 U1060		       00	   DF0PUSH    DS	1	; $60
    431 U1061		       00	   DF1PUSH    DS	1	; $61
    432 U1062		       00	   DF2PUSH    DS	1	; $62
    433 U1063		       00	   DF3PUSH    DS	1	; $63
    434 U1064		       00	   DF4PUSH    DS	1	; $64
    435 U1065		       00	   DF5PUSH    DS	1	; $65
    436 U1066		       00	   DF6PUSH    DS	1	; $66
    437 U1067		       00	   DF7PUSH    DS	1	; $67
    438 U1068
    439 U1068							;----------------------------------------
    440 U1068							; Data Fetcher, High Pointer
    441 U1068							;----------------------------------------
    442 U1068							; These are used in conjunction with DFxLOW to point a Data Fetcher to the data
    443 U1068							; to read.  For usage, see "Data Fetcher" in SECTION 1.
    444 U1068							;----------------------------------------
    445 U1068		       00	   DF0HI      DS	1	; $68
    446 U1069		       00	   DF1HI      DS	1	; $69
    447 U106a		       00	   DF2HI      DS	1	; $6A
    448 U106b		       00	   DF3HI      DS	1	; $6B
    449 U106c		       00	   DF4HI      DS	1	; $6C
    450 U106d		       00	   DF5HI      DS	1	; $6D 
    451 U106e		       00	   DF6HI      DS	1	; $6E 
    452 U106f		       00	   DF7HI      DS	1	; $6F 
    453 U1070
    454 U1070							;----------------------------------------
    455 U1070							; Random Number Initialization
    456 U1070							;----------------------------------------
    457 U1070							; The random number generate defaults to a value that spells out DPC+.
    458 U1070							; Store any value to RRESET to set the random number back to DPC+, or you
    459 U1070							; can use RWRITE0-3 to change the 32 bit value to anything you desire.
    460 U1070							;
    461 U1070							; reset random number
    462 U1070							;	LDA #0
    463 U1070							;	STA RRESET
    464 U1070							;
    465 U1070							; set a specific random number (spells out 2600)
    466 U1070							;	LDA #$32
    467 U1070							;	STA RWRITE0
    468 U1070							;	LDA #$36
    469 U1070							;	STA RWRITE1
    470 U1070							;	LDA #$30
    471 U1070							;	STA RWRITE2
    472 U1070							;	STA RWRITE3
    473 U1070							;
    474 U1070							; NOTE: do not set all 4 bytes to 0, as that will disable the generator.
    475 U1070							;----------------------------------------
    476 U1070		       00	   RRESET     DS	1	; $70
    477 U1071		       00	   RWRITE0    DS	1	; $71
    478 U1072		       00	   RWRITE1    DS	1	; $72
    479 U1073		       00	   RWRITE2    DS	1	; $73
    480 U1074		       00	   RWRITE3    DS	1	; $74
    481 U1075
    482 U1075							;----------------------------------------
    483 U1075							; Notes
    484 U1075							;----------------------------------------
    485 U1075							; These are used to select a value from the frequency table to play.
    486 U1075							; The default table, store in DPC_frequencies.h, only defines frequencies
    487 U1075							; for 1-88, which cover the keys of a piano.  You are free to add additional
    488 U1075							; frequencies from 88-255.  Piano keys are defined at the end of this file
    489 U1075							;
    490 U1075							; set voice 0 to middle C
    491 U1075							;	LDA #C4
    492 U1075							;	STA NOTE0
    493 U1075							;
    494 U1075							; Note: if you are using ARM USER CODE then you can only use notes to 128.
    495 U1075							;----------------------------------------
    496 U1075		       00	   NOTE0      DS	1	; $75
    497 U1076		       00	   NOTE1      DS	1	; $76
    498 U1077		       00	   NOTE2      DS	1	; $77
    499 U1078
    500 U1078							;----------------------------------------
    501 U1078							; Data Fetcher Write (queue)
    502 U1078							;----------------------------------------
    503 U1078							; The Data Fetchers can also be used to update the contents of the 4K
    504 U1078							; Display Data bank.  Point the Data Fetcher to the data to change,
    505 U1078							; then Write to it  The Data Fetcher's pointer will be incremented AFTER
    506 U1078							; the data is written.
    507 U1078							;
    508 U1078							; point Data Fetcher 1 to the sprite data
    509 U1078							;	lda #<SpriteData
    510 U1078							;	sta DF1LOW
    511 U1078							;	lda #>SpriteData
    512 U1078							;	sta DF1HI 
    513 U1078							;
    514 U1078							; then update it
    515 U1078							;	LDA #$FF
    516 U1078							;	STA DF1WRITE ; changes data at SpriteData
    517 U1078							;	LDA #$81
    518 U1078							;	STA DF1WRITE ; changes data at SpriteData + 1
    519 U1078							;----------------------------------------
    520 U1078		       00	   DF0WRITE   DS	1	; $78
    521 U1079		       00	   DF1WRITE   DS	1	; $79
    522 U107a		       00	   DF2WRITE   DS	1	; $7A
    523 U107b		       00	   DF3WRITE   DS	1	; $7B
    524 U107c		       00	   DF4WRITE   DS	1	; $7C
    525 U107d		       00	   DF5WRITE   DS	1	; $7D
    526 U107e		       00	   DF6WRITE   DS	1	; $7E
    527 U107f		       00	   DF7WRITE   DS	1	; $7F
    528 U1080
    529 U1080							;-------------------------------------------------------------------------------
    530 U1080							; The following required for back-compatibility with code which does not use
    531 U1080							; segments.
    532 U1080
    533  8400 ????				      SEG
------- FILE g:\My Drive\Atari\BrawdyBAS\test.bas.asm
------- FILE DPCplusbB.h LEVEL 2 PASS 2
      0  8400 ????				      include	"DPCplusbB.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3 U00f5 ????				      SEG.U	vars
      4 U0080					      org	$80
      5 U0080		       00	   player0x   ds	1
      6 U0081		       00	   topP1x     ds	1
      7 U0082		       00	   missile0x  ds	1
      8 U0083		       00	   missile1x  ds	1
      9 U0084		       00	   ballx      ds	1
     10 U0085
     11 U0085		       00 00 00 00*SpriteGfxIndex ds	9
     12 U008e
     13 U008e		       00	   spritedisplay ds	1
     14 U008f
     15 U008f		       00	   player0xcoll ds	1	; to detect p0x colls
     16 U0090		       00	   NewSpriteX ds	1	;		X position
     17 U0090		       00 90	   player1x   =	NewSpriteX
     18 U0091		       00	   player2x   ds	1
     19 U0092		       00	   player3x   ds	1
     20 U0093		       00	   player4x   ds	1
     21 U0094		       00	   player5x   ds	1
     22 U0095		       00	   player6x   ds	1
     23 U0096		       00	   player7x   ds	1
     24 U0097		       00	   player8x   ds	1
     25 U0098		       00	   player9x   ds	1
     26 U0099
     27 U0099		       00	   player0y   ds	1
     28 U009a		       00	   NewSpriteY ds	1	;		Y position
     29 U009a		       00 9a	   player1y   =	NewSpriteY
     30 U009b		       00	   player2y   ds	1
     31 U009c		       00	   player3y   ds	1
     32 U009d		       00	   player4y   ds	1
     33 U009e		       00	   player5y   ds	1
     34 U009f		       00	   player6y   ds	1
     35 U00a0		       00	   player7y   ds	1
     36 U00a1		       00	   player8y   ds	1
     37 U00a2		       00	   player9y   ds	1
     38 U00a3
     39 U00a3		       00 00	   player0color ds	2
     40 U00a5
     41 U00a5		       00	   player0height ds	1
     42 U00a6		       00	   player1height ds	1
     43 U00a7		       00	   player2height ds	1
     44 U00a8		       00	   player3height ds	1
     45 U00a9		       00	   player4height ds	1
     46 U00aa		       00	   player5height ds	1
     47 U00ab		       00	   player6height ds	1
     48 U00ac		       00	   player7height ds	1
     49 U00ad		       00	   player8height ds	1
     50 U00ae		       00	   player9height ds	1
     51 U00af
     52 U00af		       00	   _NUSIZ1    ds	1
     53 U00b0		       00	   NUSIZ2     ds	1
     54 U00b1		       00	   NUSIZ3     ds	1
     55 U00b2		       00	   NUSIZ4     ds	1
     56 U00b3		       00	   NUSIZ5     ds	1
     57 U00b4		       00	   NUSIZ6     ds	1
     58 U00b5		       00	   NUSIZ7     ds	1
     59 U00b6		       00	   NUSIZ8     ds	1
     60 U00b7		       00	   NUSIZ9     ds	1
     61 U00b8
     62 U00b8		       00 00 00    score      ds	3
     63 U00bb		       00	   COLUM0     ds	1
     64 U00bc		       00	   COLUM1     ds	1
     65 U00bd		       00	   player0pointerlo ds	1
     66 U00be		       00	   player0pointerhi ds	1
     67 U00bf
     68 U00bf		       00 85	   RAMcopybegin =	SpriteGfxIndex
     69 U00bf		       00 3a	   RAMcopylength =	*-RAMcopybegin
     70 U00bf
     71 U00bf		       00	   missile0y  ds	1
     72 U00c0		       00	   missile1y  ds	1
     73 U00c1		       00	   bally      ds	1
     74 U00c2
     75 U00c2		       00	   missile0height ds	1
     76 U00c3		       00	   missile1height ds	1
     77 U00c4		       00	   ballheight ds	1
     78 U00c5
     79 U00c5		       00	   statusbarlength ds	1	; needed?
     80 U00c5		       00 c5	   aux3       =	statusbarlength
     81 U00c6
     82 U00c6		       00	   lifecolor  ds	1
     83 U00c6		       00 c6	   pfscorecolor =	lifecolor
     84 U00c7		       00	   aux4       ds	1
     85 U00c8
     86 U00c8		       00	   lifepointer ds	1
     87 U00c9		       00	   lives      ds	1
     88 U00c9		       00 c8	   pfscore1   =	lifepointer
     89 U00c9		       00 c9	   pfscore2   =	lives
     90 U00c9		       00 c8	   aux5       =	pfscore1
     91 U00c9		       00 c9	   aux6       =	pfscore2
     92 U00ca
     93 U00ca		       00	   playfieldpos ds	1
     94 U00cb
     95 U00cb		       00	   temp1      ds	1	; used in sprite flickering
     96 U00cc		       00	   temp2      ds	1	;are obliterated when drawscreen is called.
     97 U00cd		       00	   temp3      ds	1
     98 U00ce		       00	   temp4      ds	1
     99 U00cf		       00	   temp5      ds	1
    100 U00d0		       00	   temp6      ds	1
    101 U00d0		       00 81	   temp7      =	topP1x	; This is used to aid in bankswitching
    102 U00d1
    103 U00d1		       00	   A	      ds	1
    104 U00d1		       00 d1	   a	      =	A
    105 U00d2		       00	   B	      ds	1
    106 U00d2		       00 d2	   b	      =	B
    107 U00d3		       00	   C	      ds	1
    108 U00d3		       00 d3	   c	      =	C
    109 U00d4		       00	   D	      ds	1
    110 U00d4		       00 d4	   d	      =	D
    111 U00d5		       00	   E	      ds	1
    112 U00d5		       00 d5	   e	      =	E
    113 U00d6		       00	   F	      ds	1
    114 U00d6		       00 d6	   f	      =	F
    115 U00d7		       00	   G	      ds	1
    116 U00d7		       00 d7	   g	      =	G
    117 U00d8		       00	   H	      ds	1
    118 U00d8		       00 d8	   h	      =	H
    119 U00d9		       00	   I	      ds	1
    120 U00d9		       00 d9	   i	      =	I
    121 U00da		       00	   J	      ds	1
    122 U00da		       00 da	   j	      =	J
    123 U00db		       00	   K	      ds	1
    124 U00db		       00 db	   k	      =	K
    125 U00dc		       00	   L	      ds	1
    126 U00dc		       00 dc	   l	      =	L
    127 U00dd		       00	   M	      ds	1
    128 U00dd		       00 dd	   m	      =	M
    129 U00de		       00	   N	      ds	1
    130 U00de		       00 de	   n	      =	N
    131 U00df		       00	   O	      ds	1
    132 U00df		       00 df	   o	      =	O
    133 U00e0		       00	   P	      ds	1
    134 U00e0		       00 e0	   p	      =	P
    135 U00e1		       00	   Q	      ds	1
    136 U00e1		       00 e1	   q	      =	Q
    137 U00e2		       00	   R	      ds	1
    138 U00e2		       00 e2	   r	      =	R
    139 U00e3		       00	   S	      ds	1
    140 U00e3		       00 e3	   s	      =	S
    141 U00e4		       00	   T	      ds	1
    142 U00e4		       00 e4	   t	      =	T
    143 U00e5		       00	   U	      ds	1
    144 U00e5		       00 e5	   u	      =	U
    145 U00e6		       00	   V	      ds	1
    146 U00e6		       00 e6	   v	      =	V
    147 U00e7		       00	   W	      ds	1
    148 U00e7		       00 e7	   w	      =	W
    149 U00e8		       00	   X	      ds	1
    150 U00e8		       00 e8	   x	      =	X
    151 U00e9		       00	   Y	      ds	1
    152 U00e9		       00 e9	   y	      =	Y
    153 U00ea		       00	   Z	      ds	1
    154 U00ea		       00 ea	   z	      =	Z
    155 U00eb		       00	   scorecolor ds	1
    156 U00ec
    157 U00ec		       00	   var0       ds	1
    158 U00ed		       00	   var1       ds	1
    159 U00ee		       00	   var2       ds	1
    160 U00ef		       00	   var3       ds	1
    161 U00f0		       00	   var4       ds	1
    162 U00f1		       00	   var5       ds	1
    163 U00f2		       00	   var6       ds	1
    164 U00f3		       00	   var7       ds	1
    165 U00f4		       00	   var8       ds	1
    166 U00f5
 free ram: 0
    167 U00f5					      echo	"free ram:",($f5-*)d
    168 U00f5
    169 U00f5		       00 f6	   stack1     =	$f6
    170 U00f5		       00 f7	   stack2     =	$f7
    171 U00f5		       00 f8	   stack3     =	$f8
    172 U00f5		       00 f9	   stack4     =	$f9
    173 U00f5							; the stack bytes above may be used in the kernel
    174 U00f5							; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    175 U00f5
    176 U00f5					      MAC	return
    177 U00f5					      ifnconst	bankswitch
    178 U00f5					      rts
    179 U00f5					      else
    180 U00f5					      jmp	BS_return
    181 U00f5					      endif
    182 U00f5					      ENDM		; auto-return from either a regular or bankswitched module
    183  8400 ????				      seg
    184  8400 ????	       10 00	   rand       =	RANDOM0NEXT
    185  8400 ????	       00 d3	   KERNEL_LINES =	178*76/64	; warning: not all values will work
    186  8400 ????	       00 a7	   OVERSCAN_LINES =	128+33*76/64	; again, not all values work
    187  8400 ????	       d1 a4	   C_function =	FETCHER_BEGIN
    188  8400 ????	       d1 a8	   CcodeData  =	C_function + 4
    189  8400 ????	       d1 e2	   playerpointers =	CcodeData + RAMcopylength
    190  8400 ????	       d2 08	   P1GFX      =	playerpointers + 38
    191  8400 ????	       d3 08	   P1COLOR    =	P1GFX + 256
    192  8400 ????	       d4 08	   P0GFX      =	P1COLOR + 256
    193  8400 ????	       d5 08	   P0COLOR    =	P0GFX + 256
    194  8400 ????	       d6 08	   PF1L       =	P0COLOR + 256
    195  8400 ????	       d7 08	   PF2L       =	PF1L + 256
    196  8400 ????	       d8 08	   PF1R       =	PF2L + 256
    197  8400 ????	       d9 08	   PF2R       =	PF1R + 256
    198  8400 ????	       da 08	   PFCOLS     =	PF2R + 256
    199  8400 ????	       db 08	   JUMPTABLELO =	PFCOLS + 256
    200  8400 ????	       db 14	   JUMPTABLEHI =	JUMPTABLELO + 12
    201  8400 ????	       db 20	   P1HMP      =	JUMPTABLEHI + 12
    202  8400 ????	       db 2d	   P1SKIP     =	P1HMP + 13
    203  8400 ????	       db 39	   NUSIZREFP  =	P1SKIP + 12
    204  8400 ????	       db 45	   scoredata  =	NUSIZREFP + 12
    205  8400 ????	       db a5	   BKCOLS     =	scoredata + 96
    206  8400 ????	       dc a5	   STACKbegin =	BKCOLS + 256
    207  8400 ????	       dd a5	   USERSTACK  =	STACKbegin + 256	; stack starts here and goes down!!!!
 DPC free RAM= 603
    208  8400 ????				      echo	"DPC free RAM=",($1000-(USERSTACK&$0FFF))d
------- FILE g:\My Drive\Atari\BrawdyBAS\test.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  8400 ????				      include	"2600basic_variable_redefs.h"
      1  8400 ????						; This file contains variable mapping and other information for the current project.
      2  8400 ????
      3  8400 ????	       00 20	   bscode_length =	32
      4  8400 ????	       00 fe	   _FE	      =	$FE
      5  8400 ????
      6  8400 ????	       00 fc	   _FC	      =	$FC
      7  8400 ????
      8  8400 ????	       00 fa	   _FA	      =	$FA
      9  8400 ????
     10  8400 ????	       00 f8	   _F8	      =	$F8
     11  8400 ????
     12  8400 ????	       00 f6	   _F6	      =	$F6
     13  8400 ????
     14  8400 ????	       00 f4	   _F4	      =	$F4
     15  8400 ????
     16  8400 ????	       00 f2	   _F2	      =	$F2
     17  8400 ????
     18  8400 ????	       00 f0	   _F0	      =	$F0
     19  8400 ????
     20  8400 ????	       00 ee	   _EE	      =	$EE
     21  8400 ????
     22  8400 ????	       00 ec	   _EC	      =	$EC
     23  8400 ????
     24  8400 ????	       00 ea	   _EA	      =	$EA
     25  8400 ????
     26  8400 ????	       00 e8	   _E8	      =	$E8
     27  8400 ????
     28  8400 ????	       00 e6	   _E6	      =	$E6
     29  8400 ????
     30  8400 ????	       00 e4	   _E4	      =	$E4
     31  8400 ????
     32  8400 ????	       00 e2	   _E2	      =	$E2
     33  8400 ????
     34  8400 ????	       00 e0	   _E0	      =	$E0
     35  8400 ????
     36  8400 ????	       00 de	   _DE	      =	$DE
     37  8400 ????
     38  8400 ????	       00 dc	   _DC	      =	$DC
     39  8400 ????
     40  8400 ????	       00 da	   _DA	      =	$DA
     41  8400 ????
     42  8400 ????	       00 d8	   _D8	      =	$D8
     43  8400 ????
     44  8400 ????	       00 d6	   _D6	      =	$D6
     45  8400 ????
     46  8400 ????	       00 d4	   _D4	      =	$D4
     47  8400 ????
     48  8400 ????	       00 d2	   _D2	      =	$D2
     49  8400 ????
     50  8400 ????	       00 d0	   _D0	      =	$D0
     51  8400 ????
     52  8400 ????	       00 ce	   _CE	      =	$CE
     53  8400 ????
     54  8400 ????	       00 cc	   _CC	      =	$CC
     55  8400 ????
     56  8400 ????	       00 ca	   _CA	      =	$CA
     57  8400 ????
     58  8400 ????	       00 c8	   _C8	      =	$C8
     59  8400 ????
     60  8400 ????	       00 c6	   _C6	      =	$C6
     61  8400 ????
     62  8400 ????	       00 c4	   _C4	      =	$C4
     63  8400 ????
     64  8400 ????	       00 c2	   _C2	      =	$C2
     65  8400 ????
     66  8400 ????	       00 c0	   _C0	      =	$C0
     67  8400 ????
     68  8400 ????	       00 be	   _BE	      =	$BE
     69  8400 ????
     70  8400 ????	       00 bc	   _BC	      =	$BC
     71  8400 ????
     72  8400 ????	       00 ba	   _BA	      =	$BA
     73  8400 ????
     74  8400 ????	       00 b8	   _B8	      =	$B8
     75  8400 ????
     76  8400 ????	       00 b6	   _B6	      =	$B6
     77  8400 ????
     78  8400 ????	       00 b4	   _B4	      =	$B4
     79  8400 ????
     80  8400 ????	       00 b2	   _B2	      =	$B2
     81  8400 ????
     82  8400 ????	       00 b0	   _B0	      =	$B0
     83  8400 ????
     84  8400 ????	       00 ae	   _AE	      =	$AE
     85  8400 ????
     86  8400 ????	       00 ac	   _AC	      =	$AC
     87  8400 ????
     88  8400 ????	       00 aa	   _AA	      =	$AA
     89  8400 ????
     90  8400 ????	       00 a8	   _A8	      =	$A8
     91  8400 ????
     92  8400 ????	       00 a6	   _A6	      =	$A6
     93  8400 ????
     94  8400 ????	       00 a4	   _A4	      =	$A4
     95  8400 ????
     96  8400 ????	       00 a2	   _A2	      =	$A2
     97  8400 ????
     98  8400 ????	       00 a0	   _A0	      =	$A0
     99  8400 ????
    100  8400 ????	       00 9e	   _9E	      =	$9E
    101  8400 ????
    102  8400 ????	       00 9c	   _9C	      =	$9C
    103  8400 ????
    104  8400 ????	       00 9a	   _9A	      =	$9A
    105  8400 ????
    106  8400 ????	       00 98	   _98	      =	$98
    107  8400 ????
    108  8400 ????	       00 96	   _96	      =	$96
    109  8400 ????
    110  8400 ????	       00 94	   _94	      =	$94
    111  8400 ????
    112  8400 ????	       00 92	   _92	      =	$92
    113  8400 ????
    114  8400 ????	       00 90	   _90	      =	$90
    115  8400 ????
    116  8400 ????	       00 8e	   _8E	      =	$8E
    117  8400 ????
    118  8400 ????	       00 8c	   _8C	      =	$8C
    119  8400 ????
    120  8400 ????	       00 8a	   _8A	      =	$8A
    121  8400 ????
    122  8400 ????	       00 88	   _88	      =	$88
    123  8400 ????
    124  8400 ????	       00 86	   _86	      =	$86
    125  8400 ????
    126  8400 ????	       00 84	   _84	      =	$84
    127  8400 ????
    128  8400 ????	       00 82	   _82	      =	$82
    129  8400 ????
    130  8400 ????	       00 80	   _80	      =	$80
    131  8400 ????
    132  8400 ????	       00 7e	   _7E	      =	$7E
    133  8400 ????
    134  8400 ????	       00 7c	   _7C	      =	$7C
    135  8400 ????
    136  8400 ????	       00 7a	   _7A	      =	$7A
    137  8400 ????
    138  8400 ????	       00 78	   _78	      =	$78
    139  8400 ????
    140  8400 ????	       00 76	   _76	      =	$76
    141  8400 ????
    142  8400 ????	       00 74	   _74	      =	$74
    143  8400 ????
    144  8400 ????	       00 72	   _72	      =	$72
    145  8400 ????
    146  8400 ????	       00 70	   _70	      =	$70
    147  8400 ????
    148  8400 ????	       00 6e	   _6E	      =	$6E
    149  8400 ????
    150  8400 ????	       00 6c	   _6C	      =	$6C
    151  8400 ????
    152  8400 ????	       00 6a	   _6A	      =	$6A
    153  8400 ????
    154  8400 ????	       00 68	   _68	      =	$68
    155  8400 ????
    156  8400 ????	       00 66	   _66	      =	$66
    157  8400 ????
    158  8400 ????	       00 64	   _64	      =	$64
    159  8400 ????
    160  8400 ????	       00 62	   _62	      =	$62
    161  8400 ????
    162  8400 ????	       00 60	   _60	      =	$60
    163  8400 ????
    164  8400 ????	       00 5e	   _5E	      =	$5E
    165  8400 ????
    166  8400 ????	       00 5c	   _5C	      =	$5C
    167  8400 ????
    168  8400 ????	       00 5a	   _5A	      =	$5A
    169  8400 ????
    170  8400 ????	       00 58	   _58	      =	$58
    171  8400 ????
    172  8400 ????	       00 56	   _56	      =	$56
    173  8400 ????
    174  8400 ????	       00 54	   _54	      =	$54
    175  8400 ????
    176  8400 ????	       00 52	   _52	      =	$52
    177  8400 ????
    178  8400 ????	       00 50	   _50	      =	$50
    179  8400 ????
    180  8400 ????	       00 4e	   _4E	      =	$4E
    181  8400 ????
    182  8400 ????	       00 4c	   _4C	      =	$4C
    183  8400 ????
    184  8400 ????	       00 4a	   _4A	      =	$4A
    185  8400 ????
    186  8400 ????	       00 48	   _48	      =	$48
    187  8400 ????
    188  8400 ????	       00 46	   _46	      =	$46
    189  8400 ????
    190  8400 ????	       00 44	   _44	      =	$44
    191  8400 ????
    192  8400 ????	       00 42	   _42	      =	$42
    193  8400 ????
    194  8400 ????	       00 40	   _40	      =	$40
    195  8400 ????
    196  8400 ????	       00 3e	   _3E	      =	$3E
    197  8400 ????
    198  8400 ????	       00 3c	   _3C	      =	$3C
    199  8400 ????
    200  8400 ????	       00 3a	   _3A	      =	$3A
    201  8400 ????
    202  8400 ????	       00 38	   _38	      =	$38
    203  8400 ????
    204  8400 ????	       00 36	   _36	      =	$36
    205  8400 ????
    206  8400 ????	       00 34	   _34	      =	$34
    207  8400 ????
    208  8400 ????	       00 32	   _32	      =	$32
    209  8400 ????
    210  8400 ????	       00 30	   _30	      =	$30
    211  8400 ????
    212  8400 ????	       00 2e	   _2E	      =	$2E
    213  8400 ????
    214  8400 ????	       00 2c	   _2C	      =	$2C
    215  8400 ????
    216  8400 ????	       00 2a	   _2A	      =	$2A
    217  8400 ????
    218  8400 ????	       00 28	   _28	      =	$28
    219  8400 ????
    220  8400 ????	       00 26	   _26	      =	$26
    221  8400 ????
    222  8400 ????	       00 24	   _24	      =	$24
    223  8400 ????
    224  8400 ????	       00 22	   _22	      =	$22
    225  8400 ????
    226  8400 ????	       00 20	   _20	      =	$20
    227  8400 ????
    228  8400 ????	       00 1e	   _1E	      =	$1E
    229  8400 ????
    230  8400 ????	       00 1c	   _1C	      =	$1C
    231  8400 ????
    232  8400 ????	       00 1a	   _1A	      =	$1A
    233  8400 ????
    234  8400 ????	       00 18	   _18	      =	$18
    235  8400 ????
    236  8400 ????	       00 16	   _16	      =	$16
    237  8400 ????
    238  8400 ????	       00 14	   _14	      =	$14
    239  8400 ????
    240  8400 ????	       00 12	   _12	      =	$12
    241  8400 ????
    242  8400 ????	       00 10	   _10	      =	$10
    243  8400 ????
    244  8400 ????	       00 0e	   _0E	      =	$0E
    245  8400 ????
    246  8400 ????	       00 0c	   _0C	      =	$0C
    247  8400 ????
    248  8400 ????	       00 0a	   _0A	      =	$0A
    249  8400 ????
    250  8400 ????	       00 08	   _08	      =	$08
    251  8400 ????
    252  8400 ????	       00 06	   _06	      =	$06
    253  8400 ????
    254  8400 ????	       00 04	   _04	      =	$04
    255  8400 ????
    256  8400 ????	       00 02	   _02	      =	$02
    257  8400 ????
    258  8400 ????	       00 00	   _00	      =	$00
    259  8400 ????
    260  8400 ????	       00 2b	   vblank_time =	43
    261  8400 ????	       00 25	   overscan_time =	37
    262  8400 ????	       00 07	   bs_mask    =	7
    263  8400 ????	       00 1c	   bankswitch =	28
    264  8400 ????	       1f f6	   bankswitch_hotspot =	$1FF6
    265  8400 ????	       00 02	   multisprite =	2
------- FILE g:\My Drive\Atari\BrawdyBAS\test.bas.asm
      9  0400					      ORG	$400
     10  0400					      RORG	$0
     11  0400					      incbin	DPCplus.arm
     12  1000					      ORG	$1000
     13  1000					      RORG	$1000
     14  1000					      incbin	custom/bin/custom2.bin
     15  1894							; assume custom2.bin > 128 bytes
     16  1894							; repeat $80
     17  1894							; .byte 0
     18  1894							; repend
     19  1894							; Provided under the CC0 license. See the included LICENSE.txt for details.
     20  1894
     21  1894							; feel free to modify the score graphics - just keep each digit 8 high
     22  1894							; and keep the conditional compilation stuff intact
     23  1894				  -	      ifconst	ROM2k
     24  1894				  -	      ORG	$F7AC-8
     25  1894					      else
     26  1894					      ifconst	bankswitch
     27  1894				  -	      if	bankswitch == 8
     28  1894				  -	      ORG	$2F94-bscode_length
     29  1894				  -	      RORG	$FF94-bscode_length
     30  1894					      endif
     31  1894				  -	      if	bankswitch == 16
     32  1894				  -	      ORG	$4F94-bscode_length
     33  1894				  -	      RORG	$FF94-bscode_length
     34  1894					      endif
     35  1894				  -	      if	bankswitch == 32
     36  1894				  -	      ORG	$8F94-bscode_length
     37  1894				  -	      RORG	$FF94-bscode_length
     38  1894					      endif
     39  1894				  -	      if	bankswitch == 64
     40  1894				  -	      ORG	$10F80-bscode_length
     41  1894				  -	      RORG	$1FF80-bscode_length
     42  1894					      endif
     43  1894				  -	      else
     44  1894				  -	      ORG	$FF9C
     45  1894					      endif
     46  1894					      endif
     47  1894
     48  1894							; font equates
     49  1894		       00 01	   .21stcentury =	1
     50  1894		       00 02	   alarmclock =	2
     51  1894		       00 03	   handwritten =	3
     52  1894		       00 04	   interrupted =	4
     53  1894		       00 05	   retroputer =	5
     54  1894		       00 06	   whimsey    =	6
     55  1894		       00 07	   tiny       =	7
     56  1894		       00 08	   hex	      =	8
     57  1894
     58  1894				  -	      ifconst	font
     59  1894				  -	      if	font == hex
     60  1894				  -	      ORG	. - 48
     61  1894				  -	      endif
     62  1894					      endif
     63  1894
     64  1894				   scoretable
     65  1894
     66  1894				  -	      ifconst	font
     67  1894				  -	      if	font == .21stcentury
     68  1894				  -	      include	"score_graphics.asm.21stcentury"
     69  1894				  -	      endif
     70  1894				  -	      if	font == alarmclock
     71  1894				  -	      include	"score_graphics.asm.alarmclock"
     72  1894				  -	      endif
     73  1894				  -	      if	font == handwritten
     74  1894				  -	      include	"score_graphics.asm.handwritten"
     75  1894				  -	      endif
     76  1894				  -	      if	font == interrupted
     77  1894				  -	      include	"score_graphics.asm.interrupted"
     78  1894				  -	      endif
     79  1894				  -	      if	font == retroputer
     80  1894				  -	      include	"score_graphics.asm.retroputer"
     81  1894				  -	      endif
     82  1894				  -	      if	font == whimsey
     83  1894				  -	      include	"score_graphics.asm.whimsey"
     84  1894				  -	      endif
     85  1894				  -	      if	font == tiny
     86  1894				  -	      include	"score_graphics.asm.tiny"
     87  1894				  -	      endif
     88  1894				  -	      if	font == hex
     89  1894				  -	      include	"score_graphics.asm.hex"
     90  1894				  -	      endif
     91  1894					      else		; default font
     92  1894
     93  1894		       3c		      .byte.b	%00111100
     94  1895		       66		      .byte.b	%01100110
     95  1896		       66		      .byte.b	%01100110
     96  1897		       66		      .byte.b	%01100110
     97  1898		       66		      .byte.b	%01100110
     98  1899		       66		      .byte.b	%01100110
     99  189a		       66		      .byte.b	%01100110
    100  189b		       3c		      .byte.b	%00111100
    101  189c
    102  189c		       7e		      .byte.b	%01111110
    103  189d		       18		      .byte.b	%00011000
    104  189e		       18		      .byte.b	%00011000
    105  189f		       18		      .byte.b	%00011000
    106  18a0		       18		      .byte.b	%00011000
    107  18a1		       38		      .byte.b	%00111000
    108  18a2		       18		      .byte.b	%00011000
    109  18a3		       08		      .byte.b	%00001000
    110  18a4
    111  18a4		       7e		      .byte.b	%01111110
    112  18a5		       60		      .byte.b	%01100000
    113  18a6		       60		      .byte.b	%01100000
    114  18a7		       3c		      .byte.b	%00111100
    115  18a8		       06		      .byte.b	%00000110
    116  18a9		       06		      .byte.b	%00000110
    117  18aa		       46		      .byte.b	%01000110
    118  18ab		       3c		      .byte.b	%00111100
    119  18ac
    120  18ac		       3c		      .byte.b	%00111100
    121  18ad		       46		      .byte.b	%01000110
    122  18ae		       06		      .byte.b	%00000110
    123  18af		       06		      .byte.b	%00000110
    124  18b0		       1c		      .byte.b	%00011100
    125  18b1		       06		      .byte.b	%00000110
    126  18b2		       46		      .byte.b	%01000110
    127  18b3		       3c		      .byte.b	%00111100
    128  18b4
    129  18b4		       0c		      .byte.b	%00001100
    130  18b5		       0c		      .byte.b	%00001100
    131  18b6		       7e		      .byte.b	%01111110
    132  18b7		       4c		      .byte.b	%01001100
    133  18b8		       4c		      .byte.b	%01001100
    134  18b9		       2c		      .byte.b	%00101100
    135  18ba		       1c		      .byte.b	%00011100
    136  18bb		       0c		      .byte.b	%00001100
    137  18bc
    138  18bc		       3c		      .byte.b	%00111100
    139  18bd		       46		      .byte.b	%01000110
    140  18be		       06		      .byte.b	%00000110
    141  18bf		       06		      .byte.b	%00000110
    142  18c0		       3c		      .byte.b	%00111100
    143  18c1		       60		      .byte.b	%01100000
    144  18c2		       60		      .byte.b	%01100000
    145  18c3		       7e		      .byte.b	%01111110
    146  18c4
    147  18c4		       3c		      .byte.b	%00111100
    148  18c5		       66		      .byte.b	%01100110
    149  18c6		       66		      .byte.b	%01100110
    150  18c7		       66		      .byte.b	%01100110
    151  18c8		       7c		      .byte.b	%01111100
    152  18c9		       60		      .byte.b	%01100000
    153  18ca		       62		      .byte.b	%01100010
    154  18cb		       3c		      .byte.b	%00111100
    155  18cc
    156  18cc		       30		      .byte.b	%00110000
    157  18cd		       30		      .byte.b	%00110000
    158  18ce		       30		      .byte.b	%00110000
    159  18cf		       18		      .byte.b	%00011000
    160  18d0		       0c		      .byte.b	%00001100
    161  18d1		       06		      .byte.b	%00000110
    162  18d2		       42		      .byte.b	%01000010
    163  18d3		       3e		      .byte.b	%00111110
    164  18d4
    165  18d4		       3c		      .byte.b	%00111100
    166  18d5		       66		      .byte.b	%01100110
    167  18d6		       66		      .byte.b	%01100110
    168  18d7		       66		      .byte.b	%01100110
    169  18d8		       3c		      .byte.b	%00111100
    170  18d9		       66		      .byte.b	%01100110
    171  18da		       66		      .byte.b	%01100110
    172  18db		       3c		      .byte.b	%00111100
    173  18dc
    174  18dc		       3c		      .byte.b	%00111100
    175  18dd		       46		      .byte.b	%01000110
    176  18de		       06		      .byte.b	%00000110
    177  18df		       3e		      .byte.b	%00111110
    178  18e0		       66		      .byte.b	%01100110
    179  18e1		       66		      .byte.b	%01100110
    180  18e2		       66		      .byte.b	%01100110
    181  18e3		       3c		      .byte.b	%00111100
    182  18e4
    183  18e4					      ifnconst	DPC_kernel_options
    184  18e4
    185  18e4		       00		      .byte.b	%00000000
    186  18e5		       00		      .byte.b	%00000000
    187  18e6		       00		      .byte.b	%00000000
    188  18e7		       00		      .byte.b	%00000000
    189  18e8		       00		      .byte.b	%00000000
    190  18e9		       00		      .byte.b	%00000000
    191  18ea		       00		      .byte.b	%00000000
    192  18eb		       00		      .byte.b	%00000000
    193  18ec
    194  18ec					      endif
    195  18ec
    196  18ec					      endif
    197  18ec
    198  18ec				  -	      ifconst	ROM2k
    199  18ec				  -	      ORG	$F7FC
    200  18ec					      else
    201  18ec					      ifconst	bankswitch
    202  18ec				  -	      if	bankswitch == 8
    203  18ec				  -	      ORG	$2FF4-bscode_length
    204  18ec				  -	      RORG	$FFF4-bscode_length
    205  18ec					      endif
    206  18ec				  -	      if	bankswitch == 16
    207  18ec				  -	      ORG	$4FF4-bscode_length
    208  18ec				  -	      RORG	$FFF4-bscode_length
    209  18ec					      endif
    210  18ec				  -	      if	bankswitch == 32
    211  18ec				  -	      ORG	$8FF4-bscode_length
    212  18ec				  -	      RORG	$FFF4-bscode_length
    213  18ec					      endif
    214  18ec				  -	      if	bankswitch == 64
    215  18ec				  -	      ORG	$10FE0-bscode_length
    216  18ec				  -	      RORG	$1FFE0-bscode_length
    217  18ec					      endif
    218  18ec				  -	      else
    219  18ec				  -	      ORG	$FFFC
    220  18ec					      endif
    221  18ec					      endif
    222  18ec							; Provided under the CC0 license. See the included LICENSE.txt for details.
    223  18ec
    224  18ec				   start
    225  18ec		       78		      sei
    226  18ed		       d8		      cld
    227  18ee		       a0 00		      ldy	#0
    228  18f0		       a5 d0		      lda	$D0
    229  18f2		       c9 2c		      cmp	#$2C	;check RAM location #1
    230  18f4		       d0 07		      bne	MachineIs2600
    231  18f6		       a5 d1		      lda	$D1
    232  18f8		       c9 a9		      cmp	#$A9	;check RAM location #2
    233  18fa		       d0 01		      bne	MachineIs2600
    234  18fc		       88		      dey
    235  18fd				   MachineIs2600
    236  18fd		       a2 00		      ldx	#0
    237  18ff		       8a		      txa
    238  1900				   clearmem
    239  1900		       e8		      inx
    240  1901		       9a		      txs
    241  1902		       48		      pha
    242  1903		       d0 fb		      bne	clearmem
    243  1905		       84 cb		      sty	temp1
    244  1907		       a2 08		      ldx	#8
    245  1909		       86 ca		      stx	playfieldpos
    246  190b		       8e 58 10 	      stx	FASTFETCH
    247  190e		       a2 08		      ldx	#8
    248  1910		       a9 e0		      lda	#224
    249  1912				   inityloop
    250  1912		       95 9a		      sta	player1y,x
    251  1914		       ca		      dex
    252  1915		       10 fb		      bpl	inityloop
    253  1917
    254  1917		       a9 01		      lda	#1
    255  1919		       85 0a		      sta	CTRLPF
    256  191b		       ad 84 02 	      lda	INTIM
    257  191e		       8d 71 10 	      sta	RWRITE0
    258  1921		       a9 00		      lda	#0
    259  1923		       8d 38 10 	      STA	DF0FRACINC
    260  1926		       8d 39 10 	      STA	DF1FRACINC
    261  1929		       8d 3a 10 	      STA	DF2FRACINC
    262  192c		       8d 3b 10 	      STA	DF3FRACINC
    263  192f		       8d 3c 10 	      STA	DF4FRACINC
    264  1932		       8d 3e 10 	      STA	DF6FRACINC
    265  1935		       a9 a5		      lda	#<USERSTACK
    266  1937		       8d 57 10 	      STA	DF7LOW
    267  193a		       a9 0d		      lda	#(>USERSTACK) & $0F
    268  193c		       8d 6f 10 	      STA	DF7HI
    269  193f		       a9 ff		      lda	#255
    270  1941		       8d 5a 10 	      sta	CALLFUNCTION	; zero-fill fetcher
    271  1944
    272  1944		       a9 1f		      lda	#>(game-1)
    273  1946		       48		      pha
    274  1947		       a9 8f		      lda	#<(game-1)
    275  1949		       48		      pha
    276  194a		       48		      pha
    277  194b		       48		      pha
    278  194c		       a2 01		      ldx	#1
    279  194e		       4c ee df 	      jmp	BS_jsr
    280  1951				   drawscreen
    281  1951		       a9 01		      lda	#1
    282  1953		       85 2c		      sta	CXCLR
    283  1955		       85 09		      sta	COLUBK	; REVENG - don't start with the lastline color
    284  1957
    285  1957				   fufu
    286  1957		       ad 84 02 	      lda	INTIM
    287  195a		       30 fb		      bmi	fufu
    288  195c
      0  195c					      VERTICAL_SYNC
      1  195c		       a9 02		      LDA	#$02
      2  195e		       85 02		      STA	WSYNC
      3  1960		       85 00		      STA	VSYNC
      4  1962		       85 02		      STA	WSYNC
      5  1964		       85 02		      STA	WSYNC
      6  1966		       4a		      LSR
      7  1967		       85 02		      STA	WSYNC
      8  1969		       85 00		      STA	VSYNC
    290  196b
    291  196b		       a9 a9		      lda	#41+128	;was 37 - do more w/c code
    292  196d		       8d 96 02 	      sta	TIM64T
    293  1970
    294  1970							; adjust for pfpos?
    295  1970
    296  1970							; set zero to properly enter C code
    297  1970		       a9 a4		      lda	#<C_function
    298  1972		       8d 50 10 	      sta	DF0LOW
    299  1975		       a9 01		      lda	#(>C_function) & $0F
    300  1977		       8d 68 10 	      sta	DF0HI
    301  197a		       a9 00		      lda	#0
    302  197c		       8d 78 10 	      sta	DF0WRITE
    303  197f
    304  197f							; REVENG - pass the number of vsprites we want...
    305  197f					      ifnconst	dpcspritemax
    306  197f				  -	      ifconst	readpaddle
    307  197f				  -	      lda	#8
    308  197f					      else
    309  197f		       a9 09		      lda	#9
    310  1981					      endif
    311  1981				  -	      else
    312  1981				  -	      lda	#dpcspritemax
    313  1981					      endif
    314  1981		       8d 78 10 	      sta	DF0WRITE
    315  1984
    316  1984		       a5 80		      lda	player0x
    317  1986		       85 8f		      sta	player0xcoll	; detect p0x colls
    318  1988
    319  1988							; copy RAM to fetcher for C-code
    320  1988		       a9 e2		      lda	#<(CcodeData + RAMcopylength)
    321  198a		       8d 50 10 	      sta	DF0LOW
    322  198d		       a9 01		      lda	#(>(CcodeData + RAMcopylength)) & $0F
    323  198f		       8d 68 10 	      sta	DF0HI
    324  1992		       a2 39		      ldx	#RAMcopylength-1
    325  1994				   copy2fetcherloop
    326  1994		       b5 85		      lda	RAMcopybegin,x
    327  1996		       8d 60 10 	      sta	DF0PUSH
    328  1999		       ca		      dex
    329  199a		       10 f8		      bpl	copy2fetcherloop
    330  199c
    331  199c		       a9 ff		      lda	#255
    332  199e		       8d 5a 10 	      sta	CALLFUNCTION
    333  19a1
    334  19a1							; copy modified data back (just need first 6 bytes, which is sprite sort data)
    335  19a1		       a2 ed		      ldx	#256-19
    336  19a3				   copyfromfetcherloop
    337  19a3		       ad 08 10 	      lda	DF0DATA
    338  19a6		       95 98		      sta	RAMcopybegin+19,x
    339  19a8		       e8		      inx
    340  19a9		       30 f8		      bmi	copyfromfetcherloop
    341  19ab
    342  19ab		       20 39 1e 	      jsr	kernel_setup
    343  19ae		       85 02		      sta	WSYNC
    344  19b0		       a0 80		      ldy	#$80
    345  19b2		       84 20		      sty	HMP0
    346  19b4		       84 21		      sty	HMP1
    347  19b6		       84 22		      sty	HMM0
    348  19b8		       84 23		      sty	HMM1
    349  19ba		       84 24		      sty	HMBL
    350  19bc
    351  19bc							; run possible vblank bB code
    352  19bc				  -	      ifconst	vblank_bB_code
    353  19bc				  -	      jsr	vblank_bB_code
    354  19bc					      endif
    355  19bc
    356  19bc		       20 01 1d 	      jsr	set_fetchers
    357  19bf
    358  19bf		       a2 07		      ldx	#7
    359  19c1				   setloopfrac
    360  19c1		       bd 7c 1d 	      lda	dffraclow,x
    361  19c4		       9d 28 10 	      sta	DF0FRACLOW,x
    362  19c7		       bd 84 1d 	      lda	dffrachi,x
    363  19ca		       9d 30 10 	      sta	DF0FRACHI,x
    364  19cd		       ca		      dex
    365  19ce		       10 f1		      bpl	setloopfrac
    366  19d0							; lda #255
    367  19d0		       8e 3d 10 	      STx	DF5FRACINC	; x=255 right now
    368  19d3		       8e 3f 10 	      STx	DF7FRACINC
    369  19d6		       ad 1d 10 	      lda	DF5FRACDATA	; priming read
    370  19d9		       ad 1f 10 	      lda	DF7FRACDATA	; priming read
    371  19dc
    372  19dc		       a6 85		      ldx	SpriteGfxIndex
    373  19de		       b5 af		      lda	_NUSIZ1,x	; top NUSIZ/REFP
    374  19e0		       85 05		      sta	NUSIZ1
    375  19e2		       85 0c		      sta	REFP1
    376  19e4
    377  19e4							;REVENG - allow P0 to wrap at the top
    378  19e4				   startwrapfix
    379  19e4		       a9 ff		      lda	#255
    380  19e6		       85 cc		      sta	temp2
    381  19e8		       18		      clc
    382  19e9		       a5 99		      lda	player0y
    383  19eb		       65 a5		      adc	player0height
    384  19ed		       38		      sec
    385  19ee		       c5 a5		      cmp	player0height
    386  19f0		       90 04		      bcc	skipwrapfix
    387  19f2		       a9 00		      lda	#0
    388  19f4		       85 cc		      sta	temp2
    389  19f6				   skipwrapfix
    390  19f6
    391  19f6		       38		      sec
    392  19f7		       a9 08		      lda	#<P0GFX
    393  19f9		       e5 99		      sbc	player0y
    394  19fb		       8d 52 10 	      sta	DF2LOW
    395  19fe		       a9 d4		      lda	#>P0GFX
    396  1a00							;sbc #0
    397  1a00		       e5 cc		      sbc	temp2
    398  1a02		       8d 6a 10 	      sta	DF2HI
    399  1a05		       a9 07		      lda	#<(P0GFX-1)
    400  1a07		       8d 42 10 	      sta	DF2TOP
    401  1a0a		       38		      sec
    402  1a0b		       65 a5		      adc	player0height
    403  1a0d		       8d 4a 10 	      sta	DF2BOT
    404  1a10
    405  1a10							;REVENG - 1/2 of the COLUM0 fix. the rest is in main.c
    406  1a10		       a9 08		      lda	#<(P0COLOR)
    407  1a12		       8d 50 10 	      sta	DF0LOW
    408  1a15		       85 cc		      sta	temp2
    409  1a17		       a9 d5		      lda	#>(P0COLOR)
    410  1a19		       8d 68 10 	      sta	DF0HI
    411  1a1c
    412  1a1c							; ball
    413  1a1c		       a9 07		      lda	#<(P1GFX-1)
    414  1a1e		       18		      clc
    415  1a1f		       65 c1		      adc	bally
    416  1a21		       8d 43 10 	      sta	DF3TOP
    417  1a24		       38		      sec
    418  1a25		       65 c4		      adc	ballheight
    419  1a27		       8d 4b 10 	      sta	DF3BOT
    420  1a2a
    421  1a2a							; missile0
    422  1a2a		       a5 cc		      lda	temp2
    423  1a2c		       18		      clc
    424  1a2d		       65 bf		      adc	missile0y
    425  1a2f		       8d 40 10 	      sta	DF0TOP
    426  1a32		       38		      sec
    427  1a33		       65 c2		      adc	missile0height
    428  1a35		       8d 48 10 	      sta	DF0BOT
    429  1a38
    430  1a38
    431  1a38				   fuu
    432  1a38		       ad 84 02 	      lda	INTIM
    433  1a3b		       30 fb		      bmi	fuu
    434  1a3d		       85 02		      sta	WSYNC
    435  1a3f							;     ldy #$80
    436  1a3f							;     sty HMP0
    437  1a3f							;     sty HMP1
    438  1a3f							;     sty HMM0 
    439  1a3f							;     sty HMM1
    440  1a3f							;     sty HMBL
    441  1a3f							; relocated code above prior to vblank, to allow for Cosmic Ark starfield
    442  1a3f							; and/or skewed players
      0  1a3f					      sleep	17
      1  1a3f				   .CYCLES    SET	17
      2  1a3f
      3  1a3f				  -	      IF	.CYCLES < 2
      4  1a3f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1a3f				  -	      ERR
      6  1a3f					      ENDIF
      7  1a3f
      8  1a3f					      IF	.CYCLES & 1
      9  1a3f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1a3f		       04 00		      nop	0
     11  1a41				  -	      ELSE
     12  1a41				  -	      bit	VSYNC
     13  1a41					      ENDIF
     14  1a41				   .CYCLES    SET	.CYCLES - 3
     15  1a41					      ENDIF
     16  1a41
     17  1a41					      REPEAT	.CYCLES / 2
     18  1a41		       ea		      nop
     17  1a41					      REPEND
     18  1a42		       ea		      nop
     17  1a42					      REPEND
     18  1a43		       ea		      nop
     17  1a43					      REPEND
     18  1a44		       ea		      nop
     17  1a44					      REPEND
     18  1a45		       ea		      nop
     17  1a45					      REPEND
     18  1a46		       ea		      nop
     17  1a46					      REPEND
     18  1a47		       ea		      nop
     19  1a48					      REPEND
    444  1a48
    445  1a48		       a9 d3		      lda	#KERNEL_LINES
    446  1a4a		       8d 96 02 	      sta	TIM64T
    447  1a4d		       a9 01		      lda	#1
    448  1a4f		       85 27		      sta	VDELBL
    449  1a51		       85 25		      sta	VDELP0
    450  1a53
    451  1a53							; missile1
    452  1a53		       a9 07		      lda	#<(P1COLOR-1)
    453  1a55		       18		      clc
    454  1a56		       65 c0		      adc	missile1y
    455  1a58		       8d 41 10 	      sta	DF1TOP
    456  1a5b		       38		      sec
    457  1a5c		       65 c3		      adc	missile1height
    458  1a5e		       8d 49 10 	      sta	DF1BOT
    459  1a61
    460  1a61		       a9 00		      lda	#0
    461  1a63		       85 01		      sta	VBLANK
    462  1a65		       8d 58 10 	      sta	FASTFETCH
    463  1a68							;sleep 7
    464  1a68		       a9 12		      lda	#<DF2DATAW	; REVENG - added so GRP0 is at TOP
    465  1a6a		       85 1b		      STA	GRP0	; 36 (VDEL)   ; ""
      0  1a6c					      sleep	2	; ""
      1  1a6c				   .CYCLES    SET	2
      2  1a6c
      3  1a6c				  -	      IF	.CYCLES < 2
      4  1a6c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1a6c				  -	      ERR
      6  1a6c					      ENDIF
      7  1a6c
      8  1a6c				  -	      IF	.CYCLES & 1
      9  1a6c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1a6c				  -	      nop	0
     11  1a6c				  -	      ELSE
     12  1a6c				  -	      bit	VSYNC
     13  1a6c				  -	      ENDIF
     14  1a6c				  -.CYCLES    SET	.CYCLES - 3
     15  1a6c					      ENDIF
     16  1a6c
     17  1a6c					      REPEAT	.CYCLES / 2
     18  1a6c		       ea		      nop
     19  1a6d					      REPEND
    467  1a6d
    468  1a6d		       a9 18		      lda	#<DF0FRACDATA
    469  1a6f		       85 0e		      sta	PF1	; (PF1L)
    470  1a71
    471  1a71							; enter at cycle ??
    472  1a71				   loop
    473  1a71		       a9 08		      lda	#<DF0DATA	;74
    474  1a73		       85 06		      STA	COLUP0	; 1
    475  1a75		       a9 09		      lda	#<DF1DATA	;3
    476  1a77				   loop2
    477  1a77		       85 07		      STA	COLUP1	; 6
    478  1a79		       a9 0b		      lda	#<DF3DATA
    479  1a7b		       85 1c		      STA	GRP1	; 11
    480  1a7d		       a9 20		      lda	#<DF0FLAG
    481  1a7f		       85 1d		      STA	ENAM0	; 16
    482  1a81
    483  1a81		       a9 1e		      lda	#<DF6FRACDATA
    484  1a83		       85 09		      sta	COLUBK	; 21
    485  1a85		       a9 1c		      lda	#<DF4FRACDATA
    486  1a87		       85 08		      sta	COLUPF	; 26
    487  1a89		       a9 19		      lda	#<DF1FRACDATA
    488  1a8b		       85 0f		      sta	PF2	; 31 (PF2L)
    489  1a8d				   loop3
    490  1a8d		       a9 12		      lda	#<DF2DATAW
    491  1a8f		       85 1b		      STA	GRP0	; 36 (VDEL)
    492  1a91		       a9 23		      lda	#<DF3FLAG
    493  1a93		       85 1f		      STA	ENABL	; 41 (VDEL)
    494  1a95		       a2 70		      ldx	#$70	;in case we get kernel 6
    495  1a97		       a9 1a		      lda	#<DF2FRACDATA	;45
    496  1a99		       85 0f		      sta	PF2	; 48
    497  1a9b		       84 21		      sty	HMP1	; 51 ; from prev. cycle: $80=nomove
    498  1a9d		       a9 1b		      lda	#<DF3FRACDATA	;53
    499  1a9f		       85 0e		      sta	PF1	; 56
    500  1aa1		       a9 0c		      lda	#<DF4DATA	; 58 this is the repos info
    501  1aa3		       f0 44		      beq	repo	;60/61
    502  1aa5				   norepo		; 60
    503  1aa5		       a8		      tay		; 62
    504  1aa6		       a9 08		      lda	#<DF0DATA	; 64
    505  1aa8
    506  1aa8		       ae 84 02 	      ldx	INTIM	; 68 timed for 192 lines
    507  1aab		       f0 57		      beq	exitkernel	; 70/71
    508  1aad		       85 2a		      sta	HMOVE	; 73
    509  1aaf
    510  1aaf		       85 06		      STA	COLUP0	; 0
    511  1ab1		       a9 09		      lda	#<DF1DATA	;2
    512  1ab3		       85 07		      STA	COLUP1	;5
    513  1ab5		       a9 0b		      lda	#<DF3DATA
    514  1ab7		       85 1c		      STA	GRP1	; 10
    515  1ab9		       a9 21		      lda	#<DF1FLAG
    516  1abb		       85 1e		      STA	ENAM1	; 15
    517  1abd		       a9 18		      lda	#<DF0FRACDATA
    518  1abf		       85 0e		      sta	PF1	; 20 (PF1L)
    519  1ac1		       a9 19		      lda	#<DF1FRACDATA
    520  1ac3		       85 0f		      sta	PF2	; 25 (PF2L)
    521  1ac5		       a9 12		      lda	#<DF2DATAW
    522  1ac7		       85 1b		      STA	GRP0	; 30 (VDEL)
    523  1ac9		       a9 23		      lda	#<DF3FLAG
    524  1acb		       85 1f		      STA	ENABL	; 35 (VDEL)
    525  1acd		       88		      dey		; 37
    526  1ace		       8c 64 10 	      STY	DF4PUSH	; 41
    527  1ad1		       a0 80		      ldy	#$80	; 43 no movement next line
    528  1ad3		       a9 1a		      lda	#<DF2FRACDATA	;45
    529  1ad5		       85 0f		      sta	PF2	; 48
    530  1ad7		       84 21		      sty	HMP1	; 51 ; from prev. cycle: $80=nomove
    531  1ad9		       a9 1b		      lda	#<DF3FRACDATA	;53
    532  1adb		       85 0e		      sta	PF1	; 56
    533  1add					      ifnconst	DPC_kernel_options
    534  1add							;sleep 8 ; REVENG - timing is off - results in a garbled screen
      0  1add					      sleep	5	; this is better
      1  1add				   .CYCLES    SET	5
      2  1add
      3  1add				  -	      IF	.CYCLES < 2
      4  1add				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1add				  -	      ERR
      6  1add					      ENDIF
      7  1add
      8  1add					      IF	.CYCLES & 1
      9  1add					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1add		       04 00		      nop	0
     11  1adf				  -	      ELSE
     12  1adf				  -	      bit	VSYNC
     13  1adf					      ENDIF
     14  1adf				   .CYCLES    SET	.CYCLES - 3
     15  1adf					      ENDIF
     16  1adf
     17  1adf					      REPEAT	.CYCLES / 2
     18  1adf		       ea		      nop
     19  1ae0					      REPEND
    536  1ae0				  -	      else
    537  1ae0				  -	      bit	DPC_kernel_options
    538  1ae0				  -	      if	(DPC_kernel_options > $3F)
    539  1ae0				  -	      bmi	COLfound
    540  1ae0				  -	      else
    541  1ae0				  -	      bpl	COLfound
    542  1ae0				  -	      endif
    543  1ae0					      endif
    544  1ae0		       86 ce		      stx	temp4	; +3
    545  1ae2
    546  1ae2				   getbackearly
    547  1ae2		       a9 18		      lda	#<DF0FRACDATA	; +2
    548  1ae4		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    549  1ae6		       4c 71 5a 	      JMP	loop+$4000	; 72
    550  1ae9
    551  1ae9				  -	      ifconst	DPC_kernel_options
    552  1ae9				  -COLfound
    553  1ae9				  -	      lda	DF0FRACDATA
    554  1ae9				  -	      sta	PF1	; 69 (PF1L) too early?
    555  1ae9				  -	      JMP	loop+$4000	; 72
    556  1ae9					      endif
    557  1ae9
    558  1ae9				   repo
    559  1ae9		       ac 1f 10 	      ldy	DF7FRACDATA	; 65
    560  1aec		       a9 18		      lda	#<DF0FRACDATA	; 67 preload PF1L for next line
    561  1aee				  -	      if	((>repo) > (>norepo))
    562  1aee				  -	      STA	PF1
    563  1aee					      else
    564  1aee		       8d 0e 00 	      STA.w	PF1	; 71 ; sta.w if page doesn't wrap
    565  1af1					      endif
    566  1af1		       a9 08		      lda	#<DF0DATA	;73
    567  1af3		       85 06		      STA	COLUP0	; 0
    568  1af5		       a9 09		      lda	#<DF1DATA
    569  1af7		       85 07		      STA	COLUP1	;5
    570  1af9		       a9 0b		      lda	#<DF3DATA
    571  1afb		       85 1c		      STA	GRP1	; 10
    572  1afd		       a9 21		      lda	#<DF1FLAG
    573  1aff		       85 1e		      STA	ENAM1	; 15
    574  1b01							; repos info holds HMMx
    575  1b01		       6c 0d 10 	      jmp	(DF5DATA)	; 20 grabs df6/df7=lo/hi
    576  1b04
    577  1b04				   exitkernel		; exit the kernel
    578  1b04		       20 c8 5e 	      jsr	scorekernel+$4000	; 1
    579  1b07				   exit
    580  1b07		       a2 ff		      ldx	#255
    581  1b09		       8e 58 10 	      stx	FASTFETCH
    582  1b0c		       85 02		      sta	WSYNC
    583  1b0e				  -	      ifconst	qtcontroller
    584  1b0e				  -	      lda	qtcontroller
    585  1b0e				  -	      lsr		; bit 0 in carry
    586  1b0e				  -	      lda	#4
    587  1b0e				  -	      ror		; carry into top of A
    588  1b0e					      else
    589  1b0e		       a9 02		      lda	#2
    590  1b10					      endif		; qtcontroller
    591  1b10		       85 01		      STA	VBLANK
    592  1b12		       a9 a7		      lda	#OVERSCAN_LINES
    593  1b14		       8d 96 02 	      sta	TIM64T
    594  1b17		       38		      sec
    595  1b18		       a9 d3		      lda	#KERNEL_LINES
    596  1b1a		       e5 ce		      sbc	temp4
    597  1b1c		       aa		      tax
    598  1b1d		       4a		      lsr
    599  1b1e		       4a		      lsr
    600  1b1f		       85 cd		      sta	temp3	; div4
    601  1b21		       4a		      lsr
    602  1b22		       4a		      lsr
    603  1b23		       85 cc		      sta	temp2	; div16
    604  1b25		       4a		      lsr
    605  1b26		       85 cb		      sta	temp1	; div32
    606  1b28		       18		      clc
    607  1b29		       8a		      txa
    608  1b2a		       65 cc		      adc	temp2
    609  1b2c		       65 cb		      adc	temp1
    610  1b2e		       38		      sec
    611  1b2f		       e5 cd		      sbc	temp3
    612  1b31		       85 ce		      sta	temp4	; approx line of first pf coll
      0  1b33					      RETURN
      1  1b33				  -	      ifnconst	bankswitch
      2  1b33				  -	      rts
      3  1b33					      else
      4  1b33		       4c e0 df 	      jmp	BS_return
      5  1b36					      endif
    614  1b36
    615  1b36							; jmp exit
    616  1b36
    617  1b36							; kernels resp1 23/28/33/38/43/48/53/58/63/68/73
    618  1b36
    619  1b36				   kernel1
    620  1b36		       85 11		      sta	RESP1	; 23
    621  1b38		       a9 12		      lda	#<DF2DATAW
    622  1b3a		       85 1b		      STA	GRP0	; 28 (VDEL)
    623  1b3c		       a9 19		      lda	#<DF1FRACDATA
    624  1b3e		       85 0f		      STA	PF2	; 33
    625  1b40		       a9 23		      lda	#<DF3FLAG
    626  1b42		       85 1f		      STA	ENABL	; 38 (VDEL)
      0  1b44					      sleep	5
      1  1b44				   .CYCLES    SET	5
      2  1b44
      3  1b44				  -	      IF	.CYCLES < 2
      4  1b44				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b44				  -	      ERR
      6  1b44					      ENDIF
      7  1b44
      8  1b44					      IF	.CYCLES & 1
      9  1b44					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b44		       04 00		      nop	0
     11  1b46				  -	      ELSE
     12  1b46				  -	      bit	VSYNC
     13  1b46					      ENDIF
     14  1b46				   .CYCLES    SET	.CYCLES - 3
     15  1b46					      ENDIF
     16  1b46
     17  1b46					      REPEAT	.CYCLES / 2
     18  1b46		       ea		      nop
     19  1b47					      REPEND
    628  1b47		       a9 1a		      lda	#<DF2FRACDATA	;45
    629  1b49		       85 0f		      sta	PF2	; 48
    630  1b4b		       a9 1b		      lda	#<DF3FRACDATA	;50
    631  1b4d		       85 0e		      sta	PF1	; 53
    632  1b4f		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    633  1b51		       85 05		      STA	NUSIZ1	; 58
    634  1b53		       85 0c		      STA	REFP1	; 61
    635  1b55		       4c e2 1a 	      jmp	getbackearly	;64
    636  1b58
    637  1b58				   kernel2
    638  1b58		       a9 12		      lda	#<DF2DATAW
    639  1b5a		       85 1b		      STA	GRP0	; 25 (VDEL)
    640  1b5c		       85 11		      sta	RESP1	;28
    641  1b5e		       a9 19		      lda	#<DF1FRACDATA
    642  1b60		       85 0f		      STA	PF2	; 33
    643  1b62		       a9 23		      lda	#<DF3FLAG
    644  1b64		       85 1f		      STA	ENABL	; 38 (VDEL)
      0  1b66					      sleep	5
      1  1b66				   .CYCLES    SET	5
      2  1b66
      3  1b66				  -	      IF	.CYCLES < 2
      4  1b66				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b66				  -	      ERR
      6  1b66					      ENDIF
      7  1b66
      8  1b66					      IF	.CYCLES & 1
      9  1b66					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b66		       04 00		      nop	0
     11  1b68				  -	      ELSE
     12  1b68				  -	      bit	VSYNC
     13  1b68					      ENDIF
     14  1b68				   .CYCLES    SET	.CYCLES - 3
     15  1b68					      ENDIF
     16  1b68
     17  1b68					      REPEAT	.CYCLES / 2
     18  1b68		       ea		      nop
     19  1b69					      REPEND
    646  1b69		       a9 1a		      lda	#<DF2FRACDATA	;45
    647  1b6b		       85 0f		      sta	PF2	; 48
    648  1b6d		       a9 1b		      lda	#<DF3FRACDATA	;50
    649  1b6f		       85 0e		      sta	PF1	; 53
    650  1b71		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    651  1b73		       85 05		      STA	NUSIZ1
    652  1b75		       85 0c		      STA	REFP1
    653  1b77		       4c e2 1a 	      jmp	getbackearly	;64
    654  1b7a
    655  1b7a				   kernel3
    656  1b7a		       a9 12		      lda	#<DF2DATAW
    657  1b7c		       85 1b		      STA	GRP0	; 25 (VDEL)
    658  1b7e		       a9 19		      lda	#<DF1FRACDATA
    659  1b80		       85 0f		      STA	PF2	; 30
    660  1b82		       85 11		      sta	RESP1	;33
    661  1b84		       a9 23		      lda	#<DF3FLAG
    662  1b86		       85 1f		      STA	ENABL	; 38 (VDEL)
      0  1b88					      sleep	5
      1  1b88				   .CYCLES    SET	5
      2  1b88
      3  1b88				  -	      IF	.CYCLES < 2
      4  1b88				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b88				  -	      ERR
      6  1b88					      ENDIF
      7  1b88
      8  1b88					      IF	.CYCLES & 1
      9  1b88					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b88		       04 00		      nop	0
     11  1b8a				  -	      ELSE
     12  1b8a				  -	      bit	VSYNC
     13  1b8a					      ENDIF
     14  1b8a				   .CYCLES    SET	.CYCLES - 3
     15  1b8a					      ENDIF
     16  1b8a
     17  1b8a					      REPEAT	.CYCLES / 2
     18  1b8a		       ea		      nop
     19  1b8b					      REPEND
    664  1b8b		       a9 1a		      lda	#<DF2FRACDATA	;45
    665  1b8d		       85 0f		      sta	PF2	; 48
    666  1b8f		       a9 1b		      lda	#<DF3FRACDATA	;50
    667  1b91		       85 0e		      sta	PF1	; 53
    668  1b93		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    669  1b95		       85 05		      STA	NUSIZ1
    670  1b97		       85 0c		      STA	REFP1
    671  1b99		       4c e2 1a 	      JMP	getbackearly	; 64
    672  1b9c
    673  1b9c				   kernel4
    674  1b9c		       a9 12		      lda	#<DF2DATAW
    675  1b9e		       85 1b		      STA	GRP0	; 25 (VDEL)
    676  1ba0		       a9 23		      lda	#<DF3FLAG
    677  1ba2		       85 1f		      STA	ENABL	; 30(VDEL)
    678  1ba4		       a9 19		      lda	#<DF1FRACDATA
    679  1ba6		       85 0f		      STA	PF2	; 35
    680  1ba8		       85 11		      sta	RESP1	;38
      0  1baa					      sleep	5
      1  1baa				   .CYCLES    SET	5
      2  1baa
      3  1baa				  -	      IF	.CYCLES < 2
      4  1baa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1baa				  -	      ERR
      6  1baa					      ENDIF
      7  1baa
      8  1baa					      IF	.CYCLES & 1
      9  1baa					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1baa		       04 00		      nop	0
     11  1bac				  -	      ELSE
     12  1bac				  -	      bit	VSYNC
     13  1bac					      ENDIF
     14  1bac				   .CYCLES    SET	.CYCLES - 3
     15  1bac					      ENDIF
     16  1bac
     17  1bac					      REPEAT	.CYCLES / 2
     18  1bac		       ea		      nop
     19  1bad					      REPEND
    682  1bad		       a9 1a		      lda	#<DF2FRACDATA	;45
    683  1baf		       85 0f		      sta	PF2	; 48
    684  1bb1		       a9 1b		      lda	#<DF3FRACDATA	;50
    685  1bb3		       85 0e		      sta	PF1	; 53
    686  1bb5		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    687  1bb7		       85 05		      STA	NUSIZ1	; 58
    688  1bb9		       85 0c		      STA	REFP1	; 61
    689  1bbb		       4c e2 1a 	      JMP	getbackearly	; 64
    690  1bbe
    691  1bbe				   kernel5
    692  1bbe		       a9 12		      lda	#<DF2DATAW
    693  1bc0		       85 1b		      STA	GRP0	; (VDEL)
    694  1bc2		       a9 23		      lda	#<DF3FLAG
    695  1bc4		       85 1f		      STA	ENABL	; (VDEL)
    696  1bc6		       a9 19		      lda	#<DF1FRACDATA
    697  1bc8		       85 0f		      STA	PF2	; 35
      0  1bca					      sleep	5
      1  1bca				   .CYCLES    SET	5
      2  1bca
      3  1bca				  -	      IF	.CYCLES < 2
      4  1bca				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1bca				  -	      ERR
      6  1bca					      ENDIF
      7  1bca
      8  1bca					      IF	.CYCLES & 1
      9  1bca					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1bca		       04 00		      nop	0
     11  1bcc				  -	      ELSE
     12  1bcc				  -	      bit	VSYNC
     13  1bcc					      ENDIF
     14  1bcc				   .CYCLES    SET	.CYCLES - 3
     15  1bcc					      ENDIF
     16  1bcc
     17  1bcc					      REPEAT	.CYCLES / 2
     18  1bcc		       ea		      nop
     19  1bcd					      REPEND
    699  1bcd		       85 11		      sta	RESP1	;43
    700  1bcf		       a9 1a		      lda	#<DF2FRACDATA	;45
    701  1bd1		       85 0f		      sta	PF2	; 48
    702  1bd3		       a9 1b		      lda	#<DF3FRACDATA	;50
    703  1bd5		       85 0e		      sta	PF1	; 53
    704  1bd7		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    705  1bd9		       85 05		      STA	NUSIZ1
    706  1bdb		       85 0c		      STA	REFP1
    707  1bdd		       4c e2 1a 	      JMP	getbackearly	; 64
    708  1be0
    709  1be0				   kernel6
    710  1be0		       a9 12		      lda	#<DF2DATAW
    711  1be2		       85 1b		      STA	GRP0	; 25 (VDEL)
    712  1be4		       a9 23		      lda	#<DF3FLAG
    713  1be6		       85 1f		      STA	ENABL	; 30 (VDEL)
    714  1be8		       a9 19		      lda	#<DF1FRACDATA
    715  1bea		       85 0f		      STA	PF2	; 35
    716  1bec		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    717  1bee		       85 05		      STA	NUSIZ1	; 40
    718  1bf0		       85 0c		      STA	REFP1	; 43
    719  1bf2		       a9 1a		      lda	#<DF2FRACDATA	;45
    720  1bf4		       85 0f		      sta	PF2	; 48
    721  1bf6		       a9 1b		      lda	#<DF3FRACDATA	;50
    722  1bf8		       85 11		      sta	RESP1	;53
    723  1bfa							; do a move right by 15
    724  1bfa		       85 0e		      sta	PF1	; 56
    725  1bfc		       86 21		      stx	HMP1	; 59
    726  1bfe		       a9 19		      lda	#<DF1FRACDATA
    727  1c00		       85 0f		      sta	PF2	; 64 (PF2L)
    728  1c02		       a9 18		      lda	#<DF0FRACDATA
    729  1c04		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    730  1c06		       a9 08		      lda	#<DF0DATA	; 71
    731  1c08		       85 2a		      sta	HMOVE	; 74 adjust to +15 right
    732  1c0a
    733  1c0a		       85 06		      STA	COLUP0	; 1
    734  1c0c		       a9 09		      lda	#<DF1DATA
    735  1c0e		       85 07		      sta	COLUP1	; 6
    736  1c10		       a9 0b		      lda	#<DF3DATA
    737  1c12		       85 1c		      STA	GRP1	; 11
    738  1c14		       a9 20		      lda	#<DF0FLAG
    739  1c16		       85 1d		      STA	ENAM0	; 16
    740  1c18		       a9 1e		      lda	#<DF6FRACDATA
    741  1c1a		       85 09		      STA	COLUBK	; 21
    742  1c1c		       a9 1c		      lda	#<DF4FRACDATA
    743  1c1e		       85 08		      sta	COLUPF	; 26
      0  1c20					      sleep	2
      1  1c20				   .CYCLES    SET	2
      2  1c20
      3  1c20				  -	      IF	.CYCLES < 2
      4  1c20				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c20				  -	      ERR
      6  1c20					      ENDIF
      7  1c20
      8  1c20				  -	      IF	.CYCLES & 1
      9  1c20				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c20				  -	      nop	0
     11  1c20				  -	      ELSE
     12  1c20				  -	      bit	VSYNC
     13  1c20				  -	      ENDIF
     14  1c20				  -.CYCLES    SET	.CYCLES - 3
     15  1c20					      ENDIF
     16  1c20
     17  1c20					      REPEAT	.CYCLES / 2
     18  1c20		       ea		      nop
     19  1c21					      REPEND
    745  1c21		       4c 8d 1a 	      jmp	loop3	; 31
    746  1c24
    747  1c24				   kernel7
    748  1c24		       a9 12		      lda	#<DF2DATAW
    749  1c26		       85 1b		      STA	GRP0	; 25 (VDEL)
    750  1c28		       a9 23		      lda	#<DF3FLAG
    751  1c2a		       85 1f		      STA	ENABL	; 30 (VDEL)
    752  1c2c		       a9 19		      lda	#<DF1FRACDATA
    753  1c2e		       85 0f		      STA	PF2	; 35
    754  1c30		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    755  1c32		       85 05		      STA	NUSIZ1	; 40
    756  1c34		       85 0c		      STA	REFP1	; 43
    757  1c36		       a9 1a		      lda	#<DF2FRACDATA	;45
    758  1c38		       85 0f		      sta	PF2	; 48
      0  1c3a					      sleep	2
      1  1c3a				   .CYCLES    SET	2
      2  1c3a
      3  1c3a				  -	      IF	.CYCLES < 2
      4  1c3a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c3a				  -	      ERR
      6  1c3a					      ENDIF
      7  1c3a
      8  1c3a				  -	      IF	.CYCLES & 1
      9  1c3a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c3a				  -	      nop	0
     11  1c3a				  -	      ELSE
     12  1c3a				  -	      bit	VSYNC
     13  1c3a				  -	      ENDIF
     14  1c3a				  -.CYCLES    SET	.CYCLES - 3
     15  1c3a					      ENDIF
     16  1c3a
     17  1c3a					      REPEAT	.CYCLES / 2
     18  1c3a		       ea		      nop
     19  1c3b					      REPEND
    760  1c3b		       85 11		      sta	RESP1	;53
    761  1c3d		       a9 1b		      lda	#<DF3FRACDATA	;55
    762  1c3f		       85 0e		      sta	PF1	; 58
      0  1c41					      sleep	3
      1  1c41				   .CYCLES    SET	3
      2  1c41
      3  1c41				  -	      IF	.CYCLES < 2
      4  1c41				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c41				  -	      ERR
      6  1c41					      ENDIF
      7  1c41
      8  1c41					      IF	.CYCLES & 1
      9  1c41					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c41		       04 00		      nop	0
     11  1c43				  -	      ELSE
     12  1c43				  -	      bit	VSYNC
     13  1c43					      ENDIF
     14  1c43				   .CYCLES    SET	.CYCLES - 3
     15  1c43					      ENDIF
     16  1c43
     17  1c43				  -	      REPEAT	.CYCLES / 2
     18  1c43				  -	      nop
     19  1c43					      REPEND
    764  1c43		       4c e2 1a 	      JMP	getbackearly	; 64
    765  1c46
    766  1c46				   kernel8
    767  1c46		       a9 12		      lda	#<DF2DATAW
    768  1c48		       85 1b		      STA	GRP0	; (VDEL)
    769  1c4a		       a9 23		      lda	#<DF3FLAG
    770  1c4c		       85 1f		      STA	ENABL	; (VDEL)
    771  1c4e		       a9 19		      lda	#<DF1FRACDATA
    772  1c50		       85 0f		      STA	PF2	; 35
    773  1c52		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    774  1c54		       85 05		      STA	NUSIZ1	; 40
    775  1c56		       85 0c		      STA	REFP1	; 43
    776  1c58		       a9 1a		      lda	#<DF2FRACDATA	;45
    777  1c5a		       85 0f		      sta	PF2	; 48
    778  1c5c		       a9 1b		      lda	#<DF3FRACDATA	;50
    779  1c5e		       85 0e		      sta	PF1	; 53
      0  1c60					      sleep	2
      1  1c60				   .CYCLES    SET	2
      2  1c60
      3  1c60				  -	      IF	.CYCLES < 2
      4  1c60				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c60				  -	      ERR
      6  1c60					      ENDIF
      7  1c60
      8  1c60				  -	      IF	.CYCLES & 1
      9  1c60				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c60				  -	      nop	0
     11  1c60				  -	      ELSE
     12  1c60				  -	      bit	VSYNC
     13  1c60				  -	      ENDIF
     14  1c60				  -.CYCLES    SET	.CYCLES - 3
     15  1c60					      ENDIF
     16  1c60
     17  1c60					      REPEAT	.CYCLES / 2
     18  1c60		       ea		      nop
     19  1c61					      REPEND
    781  1c61		       85 11		      sta	RESP1	;58
      0  1c63					      sleep	3
      1  1c63				   .CYCLES    SET	3
      2  1c63
      3  1c63				  -	      IF	.CYCLES < 2
      4  1c63				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c63				  -	      ERR
      6  1c63					      ENDIF
      7  1c63
      8  1c63					      IF	.CYCLES & 1
      9  1c63					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c63		       04 00		      nop	0
     11  1c65				  -	      ELSE
     12  1c65				  -	      bit	VSYNC
     13  1c65					      ENDIF
     14  1c65				   .CYCLES    SET	.CYCLES - 3
     15  1c65					      ENDIF
     16  1c65
     17  1c65				  -	      REPEAT	.CYCLES / 2
     18  1c65				  -	      nop
     19  1c65					      REPEND
    783  1c65		       4c e2 1a 	      JMP	getbackearly	; 64
    784  1c68
    785  1c68				   kernel9
    786  1c68		       a9 12		      lda	#<DF2DATAW
    787  1c6a		       85 1b		      STA	GRP0	; (VDEL)
    788  1c6c		       a9 23		      lda	#<DF3FLAG
    789  1c6e		       85 1f		      STA	ENABL	; (VDEL)
    790  1c70		       a9 19		      lda	#<DF1FRACDATA
    791  1c72		       85 0f		      STA	PF2	; 35
    792  1c74		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    793  1c76		       85 05		      STA	NUSIZ1	; 40
    794  1c78		       85 0c		      STA	REFP1	; 43
    795  1c7a		       a9 1a		      lda	#<DF2FRACDATA	;45
    796  1c7c		       85 0f		      sta	PF2	; 48
    797  1c7e		       a9 1b		      lda	#<DF3FRACDATA	;50
    798  1c80		       85 0e		      sta	PF1	; 53
      0  1c82					      sleep	5
      1  1c82				   .CYCLES    SET	5
      2  1c82
      3  1c82				  -	      IF	.CYCLES < 2
      4  1c82				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c82				  -	      ERR
      6  1c82					      ENDIF
      7  1c82
      8  1c82					      IF	.CYCLES & 1
      9  1c82					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c82		       04 00		      nop	0
     11  1c84				  -	      ELSE
     12  1c84				  -	      bit	VSYNC
     13  1c84					      ENDIF
     14  1c84				   .CYCLES    SET	.CYCLES - 3
     15  1c84					      ENDIF
     16  1c84
     17  1c84					      REPEAT	.CYCLES / 2
     18  1c84		       ea		      nop
     19  1c85					      REPEND
    800  1c85		       a9 18		      lda	#<DF0FRACDATA
    801  1c87		       85 11		      sta	RESP1	;63
      0  1c89					      sleep	3
      1  1c89				   .CYCLES    SET	3
      2  1c89
      3  1c89				  -	      IF	.CYCLES < 2
      4  1c89				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c89				  -	      ERR
      6  1c89					      ENDIF
      7  1c89
      8  1c89					      IF	.CYCLES & 1
      9  1c89					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c89		       04 00		      nop	0
     11  1c8b				  -	      ELSE
     12  1c8b				  -	      bit	VSYNC
     13  1c8b					      ENDIF
     14  1c8b				   .CYCLES    SET	.CYCLES - 3
     15  1c8b					      ENDIF
     16  1c8b
     17  1c8b				  -	      REPEAT	.CYCLES / 2
     18  1c8b				  -	      nop
     19  1c8b					      REPEND
    803  1c8b		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    804  1c8d		       4c 71 1a 	      jmp	loop	;72
    805  1c90
    806  1c90				   kernel10
    807  1c90		       a9 12		      lda	#<DF2DATAW
    808  1c92		       85 1b		      STA	GRP0	; 25 (VDEL)
    809  1c94		       a9 23		      lda	#<DF3FLAG
    810  1c96		       85 1f		      STA	ENABL	; 30 (VDEL)
    811  1c98		       a9 19		      lda	#<DF1FRACDATA
    812  1c9a		       85 0f		      STA	PF2	; 35
    813  1c9c		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    814  1c9e		       85 05		      STA	NUSIZ1	; 40
    815  1ca0		       85 0c		      STA	REFP1	; 43
    816  1ca2		       a9 1a		      lda	#<DF2FRACDATA	;45
    817  1ca4		       85 0f		      sta	PF2	; 48
    818  1ca6		       a9 1b		      lda	#<DF3FRACDATA	;50
    819  1ca8		       85 0e		      sta	PF1	; 53
      0  1caa					      sleep	6
      1  1caa				   .CYCLES    SET	6
      2  1caa
      3  1caa				  -	      IF	.CYCLES < 2
      4  1caa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1caa				  -	      ERR
      6  1caa					      ENDIF
      7  1caa
      8  1caa				  -	      IF	.CYCLES & 1
      9  1caa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1caa				  -	      nop	0
     11  1caa				  -	      ELSE
     12  1caa				  -	      bit	VSYNC
     13  1caa				  -	      ENDIF
     14  1caa				  -.CYCLES    SET	.CYCLES - 3
     15  1caa					      ENDIF
     16  1caa
     17  1caa					      REPEAT	.CYCLES / 2
     18  1caa		       ea		      nop
     17  1caa					      REPEND
     18  1cab		       ea		      nop
     17  1cab					      REPEND
     18  1cac		       ea		      nop
     19  1cad					      REPEND
    821  1cad		       a9 18		      lda	#<DF0FRACDATA
    822  1caf		       ae 08 10 	      LDX	DF0DATA	; 65
    823  1cb2		       85 11		      sta	RESP1	; 68
    824  1cb4		       85 0e		      STA	PF1	; 71
    825  1cb6		       a9 09		      lda	#<DF1DATA	; 74
    826  1cb8		       86 06		      STX	COLUP0	; 0
    827  1cba		       4c 77 1a 	      jmp	loop2	; 3
    828  1cbd
    829  1cbd				   kernel11
    830  1cbd		       a9 12		      lda	#<DF2DATAW
    831  1cbf		       85 1b		      STA	GRP0	; (VDEL)
    832  1cc1		       a9 23		      lda	#<DF3FLAG
    833  1cc3		       85 1f		      STA	ENABL	; (VDEL)
    834  1cc5		       a9 19		      lda	#<DF1FRACDATA
    835  1cc7		       85 0f		      STA	PF2	; 35
    836  1cc9		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    837  1ccb		       85 05		      STA	NUSIZ1
    838  1ccd		       85 0c		      STA	REFP1
    839  1ccf		       a9 1a		      lda	#<DF2FRACDATA	;45
    840  1cd1		       85 0f		      sta	PF2	; 48
    841  1cd3		       a9 1b		      lda	#<DF3FRACDATA	;50
    842  1cd5		       85 0e		      sta	PF1	; 53
      0  1cd7					      sleep	3
      1  1cd7				   .CYCLES    SET	3
      2  1cd7
      3  1cd7				  -	      IF	.CYCLES < 2
      4  1cd7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1cd7				  -	      ERR
      6  1cd7					      ENDIF
      7  1cd7
      8  1cd7					      IF	.CYCLES & 1
      9  1cd7					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1cd7		       04 00		      nop	0
     11  1cd9				  -	      ELSE
     12  1cd9				  -	      bit	VSYNC
     13  1cd9					      ENDIF
     14  1cd9				   .CYCLES    SET	.CYCLES - 3
     15  1cd9					      ENDIF
     16  1cd9
     17  1cd9				  -	      REPEAT	.CYCLES / 2
     18  1cd9				  -	      nop
     19  1cd9					      REPEND
    844  1cd9		       a9 19		      lda	#<DF1FRACDATA	;45
    845  1cdb		       85 0f		      sta	PF2	; 61
    846  1cdd		       ae 08 10 	      LDX	DF0DATA	; 65
    847  1ce0
    848  1ce0		       a9 18		      lda	#<DF0FRACDATA	; 67
    849  1ce2		       85 0e		      sta	PF1	; 70
    850  1ce4		       85 11		      sta	RESP1	; 73
    851  1ce6		       86 06		      STX	COLUP0	; 0
    852  1ce8		       a9 09		      lda	#<DF1DATA	; 2
    853  1cea		       85 07		      sta	COLUP1	; 5
    854  1cec		       a9 0b		      lda	#<DF3DATA
    855  1cee		       85 1c		      STA	GRP1	; 10
    856  1cf0		       a9 20		      lda	#<DF0FLAG
    857  1cf2		       85 1d		      STA	ENAM0	; 25
    858  1cf4		       a9 1e		      lda	#<DF6FRACDATA
    859  1cf6		       85 09		      STA	COLUBK	; 20
    860  1cf8		       a9 1c		      lda	#<DF4FRACDATA
    861  1cfa		       85 08		      sta	COLUPF	; 25
      0  1cfc					      sleep	3
      1  1cfc				   .CYCLES    SET	3
      2  1cfc
      3  1cfc				  -	      IF	.CYCLES < 2
      4  1cfc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1cfc				  -	      ERR
      6  1cfc					      ENDIF
      7  1cfc
      8  1cfc					      IF	.CYCLES & 1
      9  1cfc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1cfc		       04 00		      nop	0
     11  1cfe				  -	      ELSE
     12  1cfe				  -	      bit	VSYNC
     13  1cfe					      ENDIF
     14  1cfe				   .CYCLES    SET	.CYCLES - 3
     15  1cfe					      ENDIF
     16  1cfe
     17  1cfe				  -	      REPEAT	.CYCLES / 2
     18  1cfe				  -	      nop
     19  1cfe					      REPEND
    863  1cfe		       4c 8d 1a 	      jmp	loop3	; 31
    864  1d01
    865  1d01				   set_fetchers
    866  1d01		       ad 6c 1d 	      lda	dflow
    867  1d04		       8d 50 10 	      sta	DF0LOW
    868  1d07		       ad 74 1d 	      lda	dfhigh
    869  1d0a		       8d 68 10 	      sta	DF0HI
    870  1d0d
    871  1d0d		       ad 6d 1d 	      lda	dflow+1
    872  1d10		       8d 51 10 	      sta	DF1LOW
    873  1d13		       ad 75 1d 	      lda	dfhigh+1
    874  1d16		       8d 69 10 	      sta	DF1HI
    875  1d19
    876  1d19		       ad 6e 1d 	      lda	dflow+2
    877  1d1c		       8d 52 10 	      sta	DF2LOW
    878  1d1f		       ad 76 1d 	      lda	dfhigh+2
    879  1d22		       8d 6a 10 	      sta	DF2HI
    880  1d25
    881  1d25				   set_fetchers36		; sets just 3-6
    882  1d25		       ad 6f 1d 	      lda	dflow+3
    883  1d28		       8d 53 10 	      sta	DF3LOW
    884  1d2b		       ad 77 1d 	      lda	dfhigh+3
    885  1d2e		       8d 6b 10 	      sta	DF3HI
    886  1d31
    887  1d31		       ad 70 1d 	      lda	dflow+4
    888  1d34		       8d 54 10 	      sta	DF4LOW
    889  1d37		       ad 78 1d 	      lda	dfhigh+4
    890  1d3a		       8d 6c 10 	      sta	DF4HI
    891  1d3d
    892  1d3d		       ad 71 1d 	      lda	dflow+5
    893  1d40		       8d 55 10 	      sta	DF5LOW
    894  1d43		       ad 79 1d 	      lda	dfhigh+5
    895  1d46		       8d 6d 10 	      sta	DF5HI
    896  1d49
    897  1d49		       ad 72 1d 	      lda	dflow+6
    898  1d4c		       8d 56 10 	      sta	DF6LOW
    899  1d4f		       ad 7a 1d 	      lda	dfhigh+6
    900  1d52		       8d 6e 10 	      sta	DF6HI
    901  1d55
    902  1d55		       60		      rts
    903  1d56
    904  1d56							;9d bad
    905  1d56							; the below isn't quite right
    906  1d56							;DF0DATA: COLUP0
    907  1d56							;DF1DATA: COLUP1
    908  1d56							;DF2DATAW: GRP0
    909  1d56							;DF3DATA: GRP1 
    910  1d56							;DF4DATA: 2lk lines until repos/HMP1
    911  1d56							;DF5DATA: low byte of repo kernels (xpos mod 15)
    912  1d56							;DF6DATA: High byte of repo kernels (x pos div 15)
    913  1d56							;DF7DATA: Programmer's stack
    914  1d56							;DF0FRACDATA: PF1L
    915  1d56							;DF1FRACDATA: PF2L
    916  1d56							;DF4FRACDATA: COLUPF
    917  1d56							;DF2FRACDATA: PF2R
    918  1d56							;DF3FRACDATA: PF2L
    919  1d56							;DF5FRACDATA: Sprite NUSIZ1/REFP1 (only during repos)
    920  1d56							;DF6FRACDATA: COLUBK
    921  1d56							;DF7FRACDATA: HMP1
    922  1d56							;DF3FLAG: kernel exit loop ?? (use flags instead?)
    923  1d56							;DF0FLAG: ENAM0
    924  1d56							;DF1FLAG: ENAM1 
    925  1d56							;DF3FLAG: ENABL 
    926  1d56
    927  1d56				   fetcher_address_table
    928  1d56				   kernello
    929  1d56		       36		      .byte.b	<kernel1
    930  1d57		       58		      .byte.b	<kernel2
    931  1d58		       7a		      .byte.b	<kernel3
    932  1d59		       9c		      .byte.b	<kernel4
    933  1d5a		       be		      .byte.b	<kernel5
    934  1d5b		       e0		      .byte.b	<kernel6
    935  1d5c		       24		      .byte.b	<kernel7
    936  1d5d		       46		      .byte.b	<kernel8
    937  1d5e		       68		      .byte.b	<kernel9
    938  1d5f		       90		      .byte.b	<kernel10
    939  1d60		       bd		      .byte.b	<kernel11
    940  1d61				   kernelhi
    941  1d61		       1b		      .byte.b	>kernel1
    942  1d62		       1b		      .byte.b	>kernel2
    943  1d63		       1b		      .byte.b	>kernel3
    944  1d64		       1b		      .byte.b	>kernel4
    945  1d65		       1b		      .byte.b	>kernel5
    946  1d66		       1b		      .byte.b	>kernel6
    947  1d67		       1c		      .byte.b	>kernel7
    948  1d68		       1c		      .byte.b	>kernel8
    949  1d69		       1c		      .byte.b	>kernel9
    950  1d6a		       1c		      .byte.b	>kernel10
    951  1d6b		       1c		      .byte.b	>kernel11
    952  1d6c				   dflow
    953  1d6c		       08		      .byte.b	<P0COLOR
    954  1d6d		       08		      .byte.b	<P1COLOR
    955  1d6e		       08		      .byte.b	<P0GFX
    956  1d6f		       08		      .byte.b	<P1GFX
    957  1d70		       2d		      .byte.b	<P1SKIP
    958  1d71		       08		      .byte.b	<JUMPTABLELO
    959  1d72		       14		      .byte.b	<JUMPTABLEHI
    960  1d73		       a5		      .byte.b	<USERSTACK
    961  1d74				   dfhigh
    962  1d74		       05		      .byte.b	(>P0COLOR) & $0F
    963  1d75		       03		      .byte.b	(>P1COLOR) & $0F
    964  1d76		       04		      .byte.b	(>P0GFX) & $0F
    965  1d77		       02		      .byte.b	(>P1GFX) & $0F
    966  1d78		       0b		      .byte.b	(>P1SKIP) & $0F
    967  1d79		       0b		      .byte.b	(>JUMPTABLELO) & $0F
    968  1d7a		       0b		      .byte.b	(>JUMPTABLEHI) & $0F
    969  1d7b		       0d		      .byte.b	(>USERSTACK) & $0F
    970  1d7c				   dffraclow
    971  1d7c		       08		      .byte.b	<PF1L
    972  1d7d		       08		      .byte.b	<PF2L
    973  1d7e		       08		      .byte.b	<PF1R
    974  1d7f		       08		      .byte.b	<PF2R
    975  1d80		       08		      .byte.b	<PFCOLS
    976  1d81		       39		      .byte.b	<NUSIZREFP
    977  1d82		       a5		      .byte.b	<BKCOLS
    978  1d83		       20		      .byte.b	<P1HMP
    979  1d84				   dffrachi
    980  1d84		       06		      .byte.b	(>PF1L) & $0F
    981  1d85		       07		      .byte.b	(>PF2L) & $0F
    982  1d86		       08		      .byte.b	(>PF1R) & $0F
    983  1d87		       09		      .byte.b	(>PF2R) & $0F
    984  1d88		       0a		      .byte.b	(>PFCOLS) & $0F
    985  1d89		       0b		      .byte.b	(>NUSIZREFP) & $0F
    986  1d8a		       0b		      .byte.b	(>BKCOLS) & $0F
    987  1d8b		       0b		      .byte.b	(>P1HMP) & $0F
    988  1d8c				   scorepointer
    989  1d8c		       94		      .byte.b	<scoretable
    990  1d8d		       08		      .byte.b	((>scoretable) & $0f) | (((>scoretable) / 2) & $70)
    991  1d8e				   scoresetup		; pointers to digit graphics
    992  1d8e		       45		      .byte.b	<scoredata
    993  1d8f		       0b		      .byte.b	(>scoredata) & $0F
    994  1d90				   Hmval		; 112 wuz first
    995  1d90		       60 50 40 30*	      .byte.b	96, 80, 64, 48, 32, 16, 1, 240
    996  1d98				   Hmval74
    997  1d98		       e0 d0 c0 b0*	      .byte.b	224, 208, 192, 176, 160, 144, 128
    998  1d9f		       60 50 40 30*	      .byte.b	96, 80, 64, 48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96
    999  1daf		       50 40 30 20*	      .byte.b	80, 64, 48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80
   1000  1dbf		       40 30 20 10*	      .byte.b	64, 48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64
   1001  1dcf		       30 20 10 01*	      .byte.b	48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48
   1002  1ddf		       20 10 01 f0*	      .byte.b	32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32
   1003  1def		       10 01 f0 e0*	      .byte.b	16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16
   1004  1dff		       01 f0 e0 d0*	      .byte.b	1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16, 1
   1005  1e0f		       f0 e0 d0 c0*	      .byte.b	240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16, 1, 240
   1006  1e1f		       e0 d0 c0 b0*	      .byte.b	224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16, 1, 240, 224, 208, 192
   1007  1e31		       b0 a0 90 80*	      .byte.b	176,160,144,128,16,1,240,224
   1008  1e39
   1009  1e39
   1010  1e39				   kernel_setup
   1011  1e39							;--position P0, top P1, M0, M1, BL
   1012  1e39		       a2 00		      ldx	#0	; first sprite displayed
   1013  1e3b		       b5 85		      lda	SpriteGfxIndex,x
   1014  1e3d		       aa		      tax
   1015  1e3e		       b5 90		      lda	player1x,x
   1016  1e40		       c9 a0		      cmp	#160
   1017  1e42		       90 0a		      bcc	nostorep1
   1018  1e44		       c9 d0		      cmp	#208
   1019  1e46		       b0 02		      bcs	ksadjustdown
   1020  1e48							; 160-208: minus 160
   1021  1e48							;add 160 is like minus 96
   1022  1e48							; so minus 64
   1023  1e48		       e9 3f		      sbc	#63	;cc
   1024  1e4a				   ksadjustdown
   1025  1e4a							; 209-255: add 160 
   1026  1e4a		       69 9f		      adc	#159	; cs
   1027  1e4c		       95 90		      sta	player1x,x
   1028  1e4e				   nostorep1
   1029  1e4e		       85 02		      sta	WSYNC
   1030  1e50		       a2 04		      ldx	#4
   1031  1e52		       85 81		      sta	topP1x	; cache top p1
   1032  1e54				   HorPosLoop
   1033  1e54		       b5 80		      lda	player0x,X
   1034  1e56		       38		      sec
   1035  1e57				   DivideLoop
   1036  1e57		       e9 0f		      sbc	#15
   1037  1e59		       b0 fc		      bcs	DivideLoop
      0  1e5b					      sleep	4
      1  1e5b				   .CYCLES    SET	4
      2  1e5b
      3  1e5b				  -	      IF	.CYCLES < 2
      4  1e5b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1e5b				  -	      ERR
      6  1e5b					      ENDIF
      7  1e5b
      8  1e5b				  -	      IF	.CYCLES & 1
      9  1e5b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1e5b				  -	      nop	0
     11  1e5b				  -	      ELSE
     12  1e5b				  -	      bit	VSYNC
     13  1e5b				  -	      ENDIF
     14  1e5b				  -.CYCLES    SET	.CYCLES - 3
     15  1e5b					      ENDIF
     16  1e5b
     17  1e5b					      REPEAT	.CYCLES / 2
     18  1e5b		       ea		      nop
     17  1e5b					      REPEND
     18  1e5c		       ea		      nop
     19  1e5d					      REPEND
   1039  1e5d		       95 10		      sta	RESP0,X
   1040  1e5f		       85 02		      sta	WSYNC
   1041  1e61		       ca		      dex		;2
   1042  1e62		       10 f0		      bpl	HorPosLoop	;4/5
   1043  1e64
   1044  1e64		       a4 80		      ldy	player0x	; 7
   1045  1e66		       b9 90 1d 	      lda	Hmval,y	; 11
   1046  1e69		       85 20		      sta	HMP0	; 14
   1047  1e6b
   1048  1e6b		       a4 81		      ldy	player0x+1
   1049  1e6d		       b9 90 1d 	      lda	Hmval,y
   1050  1e70		       85 21		      sta	HMP0+1	; 24
   1051  1e72
   1052  1e72		       a4 82		      ldy	player0x+2
   1053  1e74		       b9 90 1d 	      lda	Hmval,y
   1054  1e77		       85 22		      sta	HMP0+2	; 34
   1055  1e79
   1056  1e79		       a4 83		      ldy	player0x+3
   1057  1e7b		       b9 90 1d 	      lda	Hmval,y
   1058  1e7e		       85 23		      sta	HMP0+3	; 44
   1059  1e80
   1060  1e80		       a4 84		      ldy	player0x+4
   1061  1e82		       b9 90 1d 	      lda	Hmval,y
   1062  1e85		       85 24		      sta	HMP0+4	; 54
   1063  1e87
   1064  1e87		       85 02		      sta	WSYNC
   1065  1e89		       85 2a		      sta	HMOVE
   1066  1e8b
   1067  1e8b				   myrts
   1068  1e8b		       60		      rts
   1069  1e8c
   1070  1e8c
   1071  1e8c				   pfsetup
   1072  1e8c
   1073  1e8c		       84 cb		      sty	temp1
   1074  1e8e		       85 cc		      sta	temp2
   1075  1e90		       86 cd		      stx	temp3
   1076  1e92		       a2 03		      ldx	#3
   1077  1e94				   pfsetupp
   1078  1e94		       bd 7c 1d 	      lda	dffraclow,x
   1079  1e97		       9d 50 10 	      sta	DF0LOW,x
   1080  1e9a		       bd 84 1d 	      lda	dffrachi,x
   1081  1e9d		       9d 68 10 	      sta	DF0HI,x
   1082  1ea0		       a5 cc		      lda	temp2
   1083  1ea2		       8d 59 10 	      sta	PARAMETER
   1084  1ea5		       a5 cd		      lda	temp3
   1085  1ea7		       8d 59 10 	      sta	PARAMETER
   1086  1eaa		       8e 59 10 	      stx	PARAMETER
   1087  1ead		       8c 59 10 	      sty	PARAMETER
   1088  1eb0		       a9 01		      LDA	#1
   1089  1eb2		       8d 5a 10 	      sta	CALLFUNCTION
   1090  1eb5		       18		      clc
   1091  1eb6		       a5 cc		      lda	temp2
   1092  1eb8		       65 cb		      adc	temp1
   1093  1eba		       85 cc		      sta	temp2
   1094  1ebc		       a5 cd		      lda	temp3
   1095  1ebe		       69 00		      adc	#0
   1096  1ec0		       85 cd		      sta	temp3
   1097  1ec2		       ca		      dex
   1098  1ec3		       10 cf		      bpl	pfsetupp
      0  1ec5					      RETURN
      1  1ec5				  -	      ifnconst	bankswitch
      2  1ec5				  -	      rts
      3  1ec5					      else
      4  1ec5		       4c e0 df 	      jmp	BS_return
      5  1ec8					      endif
   1100  1ec8
   1101  1ec8
   1102  1ec8				   scorekernel
   1103  1ec8				  -	      ifconst	minikernel
   1104  1ec8				  -			;; disable fast fetch, call the minikernel, and re-enable fast fetch
   1105  1ec8				  -	      lda	#255
   1106  1ec8				  -	      sta	FASTFETCH
   1107  1ec8				  -	      jsr	minikernel
   1108  1ec8				  -	      lda	#0
   1109  1ec8				  -	      sta.w	FASTFETCH
   1110  1ec8					      endif
   1111  1ec8		       a6 eb		      ldx	scorecolor
   1112  1eca		       86 06		      stx	COLUP0
   1113  1ecc		       86 07		      stx	COLUP1
   1114  1ece		       a2 00		      ldx	#0
   1115  1ed0		       86 0e		      STx	PF1
   1116  1ed2		       86 0b		      stx	REFP0
   1117  1ed4		       86 0c		      stx	REFP1
   1118  1ed6		       86 1b		      STx	GRP0
   1119  1ed8		       86 1c		      STx	GRP1
   1120  1eda		       86 0f		      STx	PF2
   1121  1edc		       86 2b		      stx	HMCLR
   1122  1ede		       86 1d		      stx	ENAM0
   1123  1ee0		       86 1e		      stx	ENAM1
   1124  1ee2		       86 1f		      stx	ENABL
   1125  1ee4
   1126  1ee4
   1127  1ee4				  -	      ifconst	pfscore
   1128  1ee4				  -	      lda	pfscorecolor
   1129  1ee4				  -	      sta	COLUPF
   1130  1ee4					      endif
   1131  1ee4
   1132  1ee4				  -	      ifconst	noscore
   1133  1ee4				  -	      ldx	#10
   1134  1ee4				  -noscoreloop
   1135  1ee4				  -	      sta	WSYNC
   1136  1ee4				  -	      dex
   1137  1ee4				  -	      bpl	noscoreloop
   1138  1ee4				  -	      rts
   1139  1ee4					      else
   1140  1ee4
   1141  1ee4		       85 2b		      sta	HMCLR
   1142  1ee6		       a2 f0		      ldx	#$f0
   1143  1ee8		       86 20		      stx	HMP0
   1144  1eea
   1145  1eea							; set up fetchers 0-5 to handle score digits
   1146  1eea		       a2 45		      ldx	#<(scoredata)
   1147  1eec		       8e 56 10 	      stx	DF6LOW
   1148  1eef		       a2 0b		      ldx	#(>(scoredata)) & $0F
   1149  1ef1		       8e 6e 10 	      stx	DF6HI
   1150  1ef4		       a2 4d		      ldx	#<(scoredata+8)
   1151  1ef6		       8e 50 10 	      stx	DF0LOW
   1152  1ef9		       a2 0b		      ldx	#(>(scoredata+8)) & $0F
   1153  1efb		       8e 68 10 	      stx	DF0HI
   1154  1efe		       a2 55		      ldx	#<(scoredata+16)
   1155  1f00		       8e 51 10 	      stx	DF1LOW
   1156  1f03							; cycle 0??
   1157  1f03		       a2 0b		      ldx	#(>(scoredata+16)) & $0F
   1158  1f05		       8e 69 10 	      stx	DF1HI
   1159  1f08		       a2 5d		      ldx	#<(scoredata+24)
   1160  1f0a		       8e 52 10 	      stx	DF2LOW
   1161  1f0d		       a2 0b		      ldx	#(>(scoredata+24)) & $0F
   1162  1f0f		       8e 6a 10 	      stx	DF2HI
   1163  1f12
   1164  1f12		       85 02		      sta	WSYNC
   1165  1f14		       a2 00		      ldx	#0
   1166  1f16		       86 1b		      STx	GRP0
   1167  1f18		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   1168  1f1a
   1169  1f1a		       a2 65		      ldx	#<(scoredata+32)
   1170  1f1c		       8e 53 10 	      stx	DF3LOW
   1171  1f1f		       a2 0b		      ldx	#(>(scoredata+32)) & $0F
   1172  1f21		       8e 6b 10 	      stx	DF3HI
   1173  1f24		       a2 6d		      ldx	#<(scoredata+40)
   1174  1f26		       8e 54 10 	      stx	DF4LOW
   1175  1f29		       a2 0b		      ldx	#(>(scoredata+40)) & $0F
   1176  1f2b		       8e 6c 10 	      stx	DF4HI
   1177  1f2e
   1178  1f2e		       a0 07		      LDY	#7
   1179  1f30		       a2 03		      LDx	#$03
   1180  1f32		       84 25		      STY	VDELP0
   1181  1f34		       85 10		      STA	RESP0
   1182  1f36		       85 11		      STA	RESP1
   1183  1f38		       84 cb		      sty	temp1
   1184  1f3a
   1185  1f3a		       86 04		      STx	NUSIZ0
   1186  1f3c		       86 05		      STx	NUSIZ1
   1187  1f3e		       86 26		      STx	VDELP1
   1188  1f40		       a2 75		      ldx	#<(scoredata+48)
   1189  1f42		       8e 55 10 	      stx	DF5LOW
   1190  1f45		       a2 0b		      ldx	#(>(scoredata+48)) & $0F
   1191  1f47		       8e 6d 10 	      stx	DF5HI
   1192  1f4a		       8d 2a 00 	      STA.w	HMOVE	; cycle 73 ?
   1193  1f4d				   scoreloop
   1194  1f4d		       a9 0e		      lda	#<DF6DATA	;59
   1195  1f4f		       85 06		      sta	COLUP0	;62
   1196  1f51		       85 07		      sta	COLUP1	;65
   1197  1f53		       a9 09		      lda	#<DF1DATA	;75
   1198  1f55		       85 1b		      sta	GRP0	;2
   1199  1f57		       a9 08		      lda	#<DF0DATA	;4
   1200  1f59		       85 1c		      sta	GRP1	;7
   1201  1f5b		       a9 0b		      lda	#<DF3DATA	;9
   1202  1f5d		       85 1b		      sta	GRP0	;12
   1203  1f5f
   1204  1f5f							; REVENG - rearranged to correct pf write timing and A register overwrite
   1205  1f5f				  -	      ifconst	pfscore
   1206  1f5f				  -	      lda	pfscore1
   1207  1f5f				  -	      sta	PF1
   1208  1f5f					      else
      0  1f5f					      sleep	6
      1  1f5f				   .CYCLES    SET	6
      2  1f5f
      3  1f5f				  -	      IF	.CYCLES < 2
      4  1f5f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f5f				  -	      ERR
      6  1f5f					      ENDIF
      7  1f5f
      8  1f5f				  -	      IF	.CYCLES & 1
      9  1f5f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f5f				  -	      nop	0
     11  1f5f				  -	      ELSE
     12  1f5f				  -	      bit	VSYNC
     13  1f5f				  -	      ENDIF
     14  1f5f				  -.CYCLES    SET	.CYCLES - 3
     15  1f5f					      ENDIF
     16  1f5f
     17  1f5f					      REPEAT	.CYCLES / 2
     18  1f5f		       ea		      nop
     17  1f5f					      REPEND
     18  1f60		       ea		      nop
     17  1f60					      REPEND
     18  1f61		       ea		      nop
     19  1f62					      REPEND
   1210  1f62					      endif
      0  1f62					      sleep	5
      1  1f62				   .CYCLES    SET	5
      2  1f62
      3  1f62				  -	      IF	.CYCLES < 2
      4  1f62				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f62				  -	      ERR
      6  1f62					      ENDIF
      7  1f62
      8  1f62					      IF	.CYCLES & 1
      9  1f62					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f62		       04 00		      nop	0
     11  1f64				  -	      ELSE
     12  1f64				  -	      bit	VSYNC
     13  1f64					      ENDIF
     14  1f64				   .CYCLES    SET	.CYCLES - 3
     15  1f64					      ENDIF
     16  1f64
     17  1f64					      REPEAT	.CYCLES / 2
     18  1f64		       ea		      nop
     19  1f65					      REPEND
   1212  1f65		       ae 0a 10 	      ldx	DF2DATA	;16
   1213  1f68		       ac 0d 10 	      ldy	DF5DATA	;20
   1214  1f6b		       a9 0c		      lda	#<DF4DATA	;22 
   1215  1f6d
   1216  1f6d		       86 1c		      stx	GRP1	;40
   1217  1f6f		       84 1b		      sty	GRP0	;43
   1218  1f71		       85 1c		      sta	GRP1	;46
   1219  1f73		       85 1b		      sta	GRP0	;49
   1220  1f75				  -	      ifconst	pfscore
   1221  1f75				  -	      lda	pfscore2
   1222  1f75				  -	      sta	PF1
   1223  1f75					      else
      0  1f75					      sleep	6
      1  1f75				   .CYCLES    SET	6
      2  1f75
      3  1f75				  -	      IF	.CYCLES < 2
      4  1f75				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f75				  -	      ERR
      6  1f75					      ENDIF
      7  1f75
      8  1f75				  -	      IF	.CYCLES & 1
      9  1f75				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f75				  -	      nop	0
     11  1f75				  -	      ELSE
     12  1f75				  -	      bit	VSYNC
     13  1f75				  -	      ENDIF
     14  1f75				  -.CYCLES    SET	.CYCLES - 3
     15  1f75					      ENDIF
     16  1f75
     17  1f75					      REPEAT	.CYCLES / 2
     18  1f75		       ea		      nop
     17  1f75					      REPEND
     18  1f76		       ea		      nop
     17  1f76					      REPEND
     18  1f77		       ea		      nop
     19  1f78					      REPEND
   1225  1f78					      endif
   1226  1f78							; sleep 2 ;57
      0  1f78					      sleep	6
      1  1f78				   .CYCLES    SET	6
      2  1f78
      3  1f78				  -	      IF	.CYCLES < 2
      4  1f78				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f78				  -	      ERR
      6  1f78					      ENDIF
      7  1f78
      8  1f78				  -	      IF	.CYCLES & 1
      9  1f78				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f78				  -	      nop	0
     11  1f78				  -	      ELSE
     12  1f78				  -	      bit	VSYNC
     13  1f78				  -	      ENDIF
     14  1f78				  -.CYCLES    SET	.CYCLES - 3
     15  1f78					      ENDIF
     16  1f78
     17  1f78					      REPEAT	.CYCLES / 2
     18  1f78		       ea		      nop
     17  1f78					      REPEND
     18  1f79		       ea		      nop
     17  1f79					      REPEND
     18  1f7a		       ea		      nop
     19  1f7b					      REPEND
   1228  1f7b		       c6 cb		      dec	temp1	;70
   1229  1f7d		       10 ce		      bpl	scoreloop	;72/73
   1230  1f7f		       a2 00		      LDx	#0
   1231  1f81		       86 0e		      stx	PF1
   1232  1f83		       86 1b		      STx	GRP0
   1233  1f85		       86 1c		      STx	GRP1
   1234  1f87		       86 25		      STx	VDELP0
   1235  1f89		       86 26		      STx	VDELP1	;do we need these
   1236  1f8b		       86 04		      STx	NUSIZ0
   1237  1f8d		       86 05		      STx	NUSIZ1
   1238  1f8f
   1239  1f8f		       60		      rts
   1240  1f90
   1241  1f90
   1242  1f90					      endif		; noscore
   1243  1f90				   game
   1244  1f90				   .
   1245  1f90							; 
   1246  1f90
   1247  1f90				   .
   1248  1f90							; 
   1249  1f90
   1250  1f90				   .
   1251  1f90							; 
   1252  1f90
   1253  1f90				   .
   1254  1f90							; 
   1255  1f90
   1256  1f90				   .
   1257  1f90							; 
   1258  1f90
   1259  1f90				   .L00 		;  set kernel DPC + 
   1260  1f90
   1261  1f90				   .
   1262  1f90							; 
   1263  1f90
   1264  1f90				   .
   1265  1f90							; 
   1266  1f90
   1267  1f90				   .
   1268  1f90							; 
   1269  1f90
   1270  1f90				   .
   1271  1f90							; 
   1272  1f90
   1273  1f90				   .
   1274  1f90							; 
   1275  1f90
   1276  1f90				   .
   1277  1f90							; 
   1278  1f90
   1279  1f90				   .L01 		;  set tv ntsc
   1280  1f90
   1281  1f90				   .
   1282  1f90							; 
   1283  1f90
   1284  1f90				   .
   1285  1f90							; 
   1286  1f90
   1287  1f90				   .
   1288  1f90							; 
   1289  1f90
   1290  1f90				   .
   1291  1f90							; 
   1292  1f90
   1293  1f90				   .
   1294  1f90							; 
   1295  1f90
   1296  1f90				   .
   1297  1f90							; 
   1298  1f90
   1299  1f90				   .
   1300  1f90							; 
   1301  1f90
   1302  1f90				   .
   1303  1f90							; 
   1304  1f90
   1305  1f90				   .
   1306  1f90							; 
   1307  1f90
   1308  1f90				   .
   1309  1f90							; 
   1310  1f90
   1311  1f90				   .
   1312  1f90							; 
   1313  1f90
   1314  1f90				   .L02 		;  const _00  =  $00
   1315  1f90
   1316  1f90				   .L03 		;  const _02  =  $02
   1317  1f90
   1318  1f90				   .L04 		;  const _04  =  $04
   1319  1f90
   1320  1f90				   .L05 		;  const _06  =  $06
   1321  1f90
   1322  1f90				   .L06 		;  const _08  =  $08
   1323  1f90
   1324  1f90				   .L07 		;  const _0A  =  $0A
   1325  1f90
   1326  1f90				   .L08 		;  const _0C  =  $0C
   1327  1f90
   1328  1f90				   .L09 		;  const _0E  =  $0E
   1329  1f90
   1330  1f90				   .L010		;  const _10  =  $10
   1331  1f90
   1332  1f90				   .L011		;  const _12  =  $12
   1333  1f90
   1334  1f90				   .L012		;  const _14  =  $14
   1335  1f90
   1336  1f90				   .L013		;  const _16  =  $16
   1337  1f90
   1338  1f90				   .L014		;  const _18  =  $18
   1339  1f90
   1340  1f90				   .L015		;  const _1A  =  $1A
   1341  1f90
   1342  1f90				   .L016		;  const _1C  =  $1C
   1343  1f90
   1344  1f90				   .L017		;  const _1E  =  $1E
   1345  1f90
   1346  1f90				   .L018		;  const _20  =  $20
   1347  1f90
   1348  1f90				   .L019		;  const _22  =  $22
   1349  1f90
   1350  1f90				   .L020		;  const _24  =  $24
   1351  1f90
   1352  1f90				   .L021		;  const _26  =  $26
   1353  1f90
   1354  1f90				   .L022		;  const _28  =  $28
   1355  1f90
   1356  1f90				   .L023		;  const _2A  =  $2A
   1357  1f90
   1358  1f90				   .L024		;  const _2C  =  $2C
   1359  1f90
   1360  1f90				   .L025		;  const _2E  =  $2E
   1361  1f90
   1362  1f90				   .L026		;  const _30  =  $30
   1363  1f90
   1364  1f90				   .L027		;  const _32  =  $32
   1365  1f90
   1366  1f90				   .L028		;  const _34  =  $34
   1367  1f90
   1368  1f90				   .L029		;  const _36  =  $36
   1369  1f90
   1370  1f90				   .L030		;  const _38  =  $38
   1371  1f90
   1372  1f90				   .L031		;  const _3A  =  $3A
   1373  1f90
   1374  1f90				   .L032		;  const _3C  =  $3C
   1375  1f90
   1376  1f90				   .L033		;  const _3E  =  $3E
   1377  1f90
   1378  1f90				   .L034		;  const _40  =  $40
   1379  1f90
   1380  1f90				   .L035		;  const _42  =  $42
   1381  1f90
   1382  1f90				   .L036		;  const _44  =  $44
   1383  1f90
   1384  1f90				   .L037		;  const _46  =  $46
   1385  1f90
   1386  1f90				   .L038		;  const _48  =  $48
   1387  1f90
   1388  1f90				   .L039		;  const _4A  =  $4A
   1389  1f90
   1390  1f90				   .L040		;  const _4C  =  $4C
   1391  1f90
   1392  1f90				   .L041		;  const _4E  =  $4E
   1393  1f90
   1394  1f90				   .L042		;  const _50  =  $50
   1395  1f90
   1396  1f90				   .L043		;  const _52  =  $52
   1397  1f90
   1398  1f90				   .L044		;  const _54  =  $54
   1399  1f90
   1400  1f90				   .L045		;  const _56  =  $56
   1401  1f90
   1402  1f90				   .L046		;  const _58  =  $58
   1403  1f90
   1404  1f90				   .L047		;  const _5A  =  $5A
   1405  1f90
   1406  1f90				   .L048		;  const _5C  =  $5C
   1407  1f90
   1408  1f90				   .L049		;  const _5E  =  $5E
   1409  1f90
   1410  1f90				   .L050		;  const _60  =  $60
   1411  1f90
   1412  1f90				   .L051		;  const _62  =  $62
   1413  1f90
   1414  1f90				   .L052		;  const _64  =  $64
   1415  1f90
   1416  1f90				   .L053		;  const _66  =  $66
   1417  1f90
   1418  1f90				   .L054		;  const _68  =  $68
   1419  1f90
   1420  1f90				   .L055		;  const _6A  =  $6A
   1421  1f90
   1422  1f90				   .L056		;  const _6C  =  $6C
   1423  1f90
   1424  1f90				   .L057		;  const _6E  =  $6E
   1425  1f90
   1426  1f90				   .L058		;  const _70  =  $70
   1427  1f90
   1428  1f90				   .L059		;  const _72  =  $72
   1429  1f90
   1430  1f90				   .L060		;  const _74  =  $74
   1431  1f90
   1432  1f90				   .L061		;  const _76  =  $76
   1433  1f90
   1434  1f90				   .L062		;  const _78  =  $78
   1435  1f90
   1436  1f90				   .L063		;  const _7A  =  $7A
   1437  1f90
   1438  1f90				   .L064		;  const _7C  =  $7C
   1439  1f90
   1440  1f90				   .L065		;  const _7E  =  $7E
   1441  1f90
   1442  1f90				   .L066		;  const _80  =  $80
   1443  1f90
   1444  1f90				   .L067		;  const _82  =  $82
   1445  1f90
   1446  1f90				   .L068		;  const _84  =  $84
   1447  1f90
   1448  1f90				   .L069		;  const _86  =  $86
   1449  1f90
   1450  1f90				   .L070		;  const _88  =  $88
   1451  1f90
   1452  1f90				   .L071		;  const _8A  =  $8A
   1453  1f90
   1454  1f90				   .L072		;  const _8C  =  $8C
   1455  1f90
   1456  1f90				   .L073		;  const _8E  =  $8E
   1457  1f90
   1458  1f90				   .L074		;  const _90  =  $90
   1459  1f90
   1460  1f90				   .L075		;  const _92  =  $92
   1461  1f90
   1462  1f90				   .L076		;  const _94  =  $94
   1463  1f90
   1464  1f90				   .L077		;  const _96  =  $96
   1465  1f90
   1466  1f90				   .L078		;  const _98  =  $98
   1467  1f90
   1468  1f90				   .L079		;  const _9A  =  $9A
   1469  1f90
   1470  1f90				   .L080		;  const _9C  =  $9C
   1471  1f90
   1472  1f90				   .L081		;  const _9E  =  $9E
   1473  1f90
   1474  1f90				   .L082		;  const _A0  =  $A0
   1475  1f90
   1476  1f90				   .L083		;  const _A2  =  $A2
   1477  1f90
   1478  1f90				   .L084		;  const _A4  =  $A4
   1479  1f90
   1480  1f90				   .L085		;  const _A6  =  $A6
   1481  1f90
   1482  1f90				   .L086		;  const _A8  =  $A8
   1483  1f90
   1484  1f90				   .L087		;  const _AA  =  $AA
   1485  1f90
   1486  1f90				   .L088		;  const _AC  =  $AC
   1487  1f90
   1488  1f90				   .L089		;  const _AE  =  $AE
   1489  1f90
   1490  1f90				   .L090		;  const _B0  =  $B0
   1491  1f90
   1492  1f90				   .L091		;  const _B2  =  $B2
   1493  1f90
   1494  1f90				   .L092		;  const _B4  =  $B4
   1495  1f90
   1496  1f90				   .L093		;  const _B6  =  $B6
   1497  1f90
   1498  1f90				   .L094		;  const _B8  =  $B8
   1499  1f90
   1500  1f90				   .L095		;  const _BA  =  $BA
   1501  1f90
   1502  1f90				   .L096		;  const _BC  =  $BC
   1503  1f90
   1504  1f90				   .L097		;  const _BE  =  $BE
   1505  1f90
   1506  1f90				   .L098		;  const _C0  =  $C0
   1507  1f90
   1508  1f90				   .L099		;  const _C2  =  $C2
   1509  1f90
   1510  1f90				   .L0100		;  const _C4  =  $C4
   1511  1f90
   1512  1f90				   .L0101		;  const _C6  =  $C6
   1513  1f90
   1514  1f90				   .L0102		;  const _C8  =  $C8
   1515  1f90
   1516  1f90				   .L0103		;  const _CA  =  $CA
   1517  1f90
   1518  1f90				   .L0104		;  const _CC  =  $CC
   1519  1f90
   1520  1f90				   .L0105		;  const _CE  =  $CE
   1521  1f90
   1522  1f90				   .L0106		;  const _D0  =  $D0
   1523  1f90
   1524  1f90				   .L0107		;  const _D2  =  $D2
   1525  1f90
   1526  1f90				   .L0108		;  const _D4  =  $D4
   1527  1f90
   1528  1f90				   .L0109		;  const _D6  =  $D6
   1529  1f90
   1530  1f90				   .L0110		;  const _D8  =  $D8
   1531  1f90
   1532  1f90				   .L0111		;  const _DA  =  $DA
   1533  1f90
   1534  1f90				   .L0112		;  const _DC  =  $DC
   1535  1f90
   1536  1f90				   .L0113		;  const _DE  =  $DE
   1537  1f90
   1538  1f90				   .L0114		;  const _E0  =  $E0
   1539  1f90
   1540  1f90				   .L0115		;  const _E2  =  $E2
   1541  1f90
   1542  1f90				   .L0116		;  const _E4  =  $E4
   1543  1f90
   1544  1f90				   .L0117		;  const _E6  =  $E6
   1545  1f90
   1546  1f90				   .L0118		;  const _E8  =  $E8
   1547  1f90
   1548  1f90				   .L0119		;  const _EA  =  $EA
   1549  1f90
   1550  1f90				   .L0120		;  const _EC  =  $EC
   1551  1f90
   1552  1f90				   .L0121		;  const _EE  =  $EE
   1553  1f90
   1554  1f90				   .L0122		;  const _F0  =  $F0
   1555  1f90
   1556  1f90				   .L0123		;  const _F2  =  $F2
   1557  1f90
   1558  1f90				   .L0124		;  const _F4  =  $F4
   1559  1f90
   1560  1f90				   .L0125		;  const _F6  =  $F6
   1561  1f90
   1562  1f90				   .L0126		;  const _F8  =  $F8
   1563  1f90
   1564  1f90				   .L0127		;  const _FA  =  $FA
   1565  1f90
   1566  1f90				   .L0128		;  const _FC  =  $FC
   1567  1f90
   1568  1f90				   .L0129		;  const _FE  =  $FE
   1569  1f90
   1570  1f90				   .
   1571  1f90							; 
   1572  1f90
   1573  1f90				   .
   1574  1f90							; 
   1575  1f90
   1576  1f90				   .L0130		;  goto __Bank_2 bank2
   1577  1f90
   1578  1f90		       85 81		      sta	temp7
   1579  1f92		       a9 30		      lda	#>(.__Bank_2-1)
   1580  1f94		       48		      pha
   1581  1f95		       a9 a3		      lda	#<(.__Bank_2-1)
   1582  1f97		       48		      pha
   1583  1f98		       a5 81		      lda	temp7
   1584  1f9a		       48		      pha
   1585  1f9b		       8a		      txa
   1586  1f9c		       48		      pha
   1587  1f9d		       a2 02		      ldx	#2
   1588  1f9f		       4c ee df 	      jmp	BS_jsr
   1589  1fa2				   .
   1590  1fa2							; 
   1591  1fa2
   1592  1fa2				   .
   1593  1fa2							; 
   1594  1fa2
   1595  1fa2				   .L0131		;  bank 2
   1596  1fa2
   1597  1fa2					      if	ECHO1
      50 bytes of ROM space left in bank 1
   1598  1fa2					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   1599  1fa2					      endif
   1600  1fa2		       00 01	   ECHO1      =	1
   1601  1fd4					      ORG	$1FF4-bscode_length
   1602  1fd4					      RORG	$1FF4-bscode_length
   1603  1fd4		       a2 ff	   start_bank1 ldx	#$ff
   1604  1fd6					      ifconst	FASTFETCH	; using DPC+
   1605  1fd6		       8e 58 10 	      stx	FASTFETCH
   1606  1fd9					      endif
   1607  1fd9		       9a		      txs
   1608  1fda				  -	      if	bankswitch == 64
   1609  1fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   1610  1fda					      else
   1611  1fda		       a9 18		      lda	#>(start-1)
   1612  1fdc					      endif
   1613  1fdc		       48		      pha
   1614  1fdd		       a9 eb		      lda	#<(start-1)
   1615  1fdf		       48		      pha
   1616  1fe0		       48		      pha
   1617  1fe1		       8a		      txa
   1618  1fe2		       48		      pha
   1619  1fe3		       ba		      tsx
   1620  1fe4					      if	bankswitch != 64
   1621  1fe4		       b5 04		      lda	4,x	; get high byte of return address
   1622  1fe6		       2a		      rol
   1623  1fe7		       2a		      rol
   1624  1fe8		       2a		      rol
   1625  1fe9		       2a		      rol
   1626  1fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   1627  1fec		       aa		      tax
   1628  1fed		       e8		      inx
   1629  1fee				  -	      else
   1630  1fee				  -	      lda	4,x	; get high byte of return address
   1631  1fee				  -	      tay
   1632  1fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   1633  1fee				  -	      sta	4,x
   1634  1fee				  -	      tya
   1635  1fee				  -	      lsr
   1636  1fee				  -	      lsr
   1637  1fee				  -	      lsr
   1638  1fee				  -	      lsr
   1639  1fee				  -	      tax
   1640  1fee				  -	      inx
   1641  1fee					      endif
   1642  1fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   1643  1ff1		       68		      pla
   1644  1ff2		       aa		      tax
   1645  1ff3		       68		      pla
   1646  1ff4		       60		      rts
   1647  1ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   1648  1ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   1649  1ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   1650  1ff5					      endif
   1651  1ffc					      ORG	$1FFC
   1652  1ffc					      RORG	$1FFC
   1653  1ffc		       d4 1f		      .word.w	(start_bank1 & $ffff)
   1654  1ffe		       d4 1f		      .word.w	(start_bank1 & $ffff)
   1655  2000					      ORG	$2000
   1656  2000					      RORG	$3000
   1657  2000				   HMdiv
   1658  2000		       00 00 00 00*	      .byte.b	0, 0, 0, 0, 0, 0, 0
   1659  2007		       01 01 01 01*	      .byte.b	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
   1660  2017		       02 02 02 02*	      .byte.b	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3
   1661  2027		       03 03 03 03*	      .byte.b	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4
   1662  2037		       04 04 04 04*	      .byte.b	4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5
   1663  2047		       05 05 05 05*	      .byte.b	5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6
   1664  2057		       06 06 06 06*	      .byte.b	6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7
   1665  2067		       07 07 07 07*	      .byte.b	7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8
   1666  2077		       08 08 08 08*	      .byte.b	8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9
   1667  2087		       09 09 09 09*	      .byte.b	9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10
   1668  2097		       0a 0a 0a 0a*	      .byte.b	10,10,10,10,10,10,0,0,0
   1669  20a0				   .L0132		;  temp1 = temp1
   1670  20a0
   1671  20a0		       a5 cb		      LDA	temp1
   1672  20a2		       85 cb		      STA	temp1
   1673  20a4				   .
   1674  20a4							; 
   1675  20a4
   1676  20a4				   .
   1677  20a4							; 
   1678  20a4
   1679  20a4				   .__Bank_2
   1680  20a4							; __Bank_2
   1681  20a4
   1682  20a4				   .
   1683  20a4							; 
   1684  20a4
   1685  20a4				   .
   1686  20a4							; 
   1687  20a4
   1688  20a4				   .L0133		;  playfield:
   1689  20a4
   1690  20a4		       a0 b0		      ldy	#176
   1691  20a6		       a9 a8		      LDA	#<PF_data1
   1692  20a8		       a2 61		      LDX	#((>PF_data1) & $0f) | (((>PF_data1) / 2) & $70)
   1693  20aa		       85 81		      sta	temp7
   1694  20ac		       a9 30		      lda	#>(ret_point1-1)
   1695  20ae		       48		      pha
   1696  20af		       a9 c1		      lda	#<(ret_point1-1)
   1697  20b1		       48		      pha
   1698  20b2		       a9 1e		      lda	#>(pfsetup-1)
   1699  20b4		       48		      pha
   1700  20b5		       a9 8b		      lda	#<(pfsetup-1)
   1701  20b7		       48		      pha
   1702  20b8		       a5 81		      lda	temp7
   1703  20ba		       48		      pha
   1704  20bb		       8a		      txa
   1705  20bc		       48		      pha
   1706  20bd		       a2 01		      ldx	#1
   1707  20bf		       4c ee df 	      jmp	BS_jsr
   1708  20c2				   ret_point1
   1709  20c2				   .
   1710  20c2							; 
   1711  20c2
   1712  20c2				   .
   1713  20c2							; 
   1714  20c2
   1715  20c2				   .L0134		;  pfcolors:
   1716  20c2
   1717  20c2		       a9 08		      LDA	#<PFCOLS
   1718  20c4		       8d 50 10 	      STA	DF0LOW
   1719  20c7		       a9 0a		      LDA	#(>PFCOLS) & $0F
   1720  20c9		       8d 68 10 	      STA	DF0HI
   1721  20cc		       a9 68		      LDA	#<playfieldcolorL0134
   1722  20ce		       8d 59 10 	      STA	PARAMETER
   1723  20d1		       a9 64		      LDA	#((>playfieldcolorL0134) & $0f) | (((>playfieldcolorL0134) / 2) & $70)
   1724  20d3		       8d 59 10 	      STA	PARAMETER
   1725  20d6		       a9 00		      LDA	#0
   1726  20d8		       8d 59 10 	      STA	PARAMETER
   1727  20db		       a9 58		      LDA	#88
   1728  20dd		       8d 59 10 	      STA	PARAMETER
   1729  20e0		       a9 01		      LDA	#1
   1730  20e2		       8d 5a 10 	      STA	CALLFUNCTION
   1731  20e5				   .
   1732  20e5							; 
   1733  20e5
   1734  20e5				   .
   1735  20e5							; 
   1736  20e5
   1737  20e5				   .L0135		;  bkcolors:
   1738  20e5
   1739  20e5		       a9 a5		      LDA	#<BKCOLS
   1740  20e7		       8d 50 10 	      STA	DF0LOW
   1741  20ea		       a9 0b		      LDA	#(>BKCOLS) & $0F
   1742  20ec		       8d 68 10 	      STA	DF0HI
   1743  20ef		       a9 c0		      LDA	#<backgroundcolorL0135
   1744  20f1		       8d 59 10 	      STA	PARAMETER
   1745  20f4		       a9 64		      LDA	#((>backgroundcolorL0135) & $0f) | (((>backgroundcolorL0135) / 2) & $70)
   1746  20f6		       8d 59 10 	      STA	PARAMETER
   1747  20f9		       a9 00		      LDA	#0
   1748  20fb		       8d 59 10 	      STA	PARAMETER
   1749  20fe		       a9 58		      LDA	#88
   1750  2100		       8d 59 10 	      STA	PARAMETER
   1751  2103		       a9 01		      LDA	#1
   1752  2105		       8d 5a 10 	      STA	CALLFUNCTION
   1753  2108				   .
   1754  2108							; 
   1755  2108
   1756  2108				   .
   1757  2108							; 
   1758  2108
   1759  2108				   .__Main_Loop
   1760  2108							; __Main_Loop
   1761  2108
   1762  2108				   .
   1763  2108							; 
   1764  2108
   1765  2108				   .
   1766  2108							; 
   1767  2108
   1768  2108				   .
   1769  2108							; 
   1770  2108
   1771  2108				   .
   1772  2108							; 
   1773  2108
   1774  2108				   .
   1775  2108							; 
   1776  2108
   1777  2108				   .
   1778  2108							; 
   1779  2108
   1780  2108				   .L0136		;  DF6FRACINC	=  255
   1781  2108
   1782  2108		       a9 ff		      LDA	#255
   1783  210a		       8d 3e 10 	      STA	DF6FRACINC
   1784  210d				   .L0137		;  DF4FRACINC	=  255
   1785  210d
   1786  210d		       a9 ff		      LDA	#255
   1787  210f		       8d 3c 10 	      STA	DF4FRACINC
   1788  2112				   .
   1789  2112							; 
   1790  2112
   1791  2112				   .L0138		;  DF0FRACINC	=  255
   1792  2112
   1793  2112		       a9 ff		      LDA	#255
   1794  2114		       8d 38 10 	      STA	DF0FRACINC
   1795  2117				   .L0139		;  DF1FRACINC	=  255
   1796  2117
   1797  2117		       a9 ff		      LDA	#255
   1798  2119		       8d 39 10 	      STA	DF1FRACINC
   1799  211c				   .L0140		;  DF2FRACINC	=  255
   1800  211c
   1801  211c		       a9 ff		      LDA	#255
   1802  211e		       8d 3a 10 	      STA	DF2FRACINC
   1803  2121				   .L0141		;  DF3FRACINC	=  255
   1804  2121
   1805  2121		       a9 ff		      LDA	#255
   1806  2123		       8d 3b 10 	      STA	DF3FRACINC
   1807  2126				   .
   1808  2126							; 
   1809  2126
   1810  2126				   .
   1811  2126							; 
   1812  2126
   1813  2126				   .
   1814  2126							; 
   1815  2126
   1816  2126				   .
   1817  2126							; 
   1818  2126
   1819  2126				   .
   1820  2126							; 
   1821  2126
   1822  2126				   .
   1823  2126							; 
   1824  2126
   1825  2126				   .
   1826  2126							; 
   1827  2126
   1828  2126				   .L0142		;  asm
   1829  2126
   1830  2126		       ad 1e 10 	      lda	DF6FRACDATA
   1831  2129
   1832  2129		       ad 1c 10 	      lda	DF4FRACDATA
   1833  212c
   1834  212c		       ad 18 10 	      lda	DF0FRACDATA
   1835  212f
   1836  212f		       ad 19 10 	      lda	DF1FRACDATA
   1837  2132
   1838  2132		       ad 1a 10 	      lda	DF2FRACDATA
   1839  2135
   1840  2135		       ad 1b 10 	      lda	DF3FRACDATA
   1841  2138
   1842  2138				   .
   1843  2138							; 
   1844  2138
   1845  2138				   .
   1846  2138							; 
   1847  2138
   1848  2138				   .
   1849  2138							; 
   1850  2138
   1851  2138				   .
   1852  2138							; 
   1853  2138
   1854  2138				   .
   1855  2138							; 
   1856  2138
   1857  2138				   .
   1858  2138							; 
   1859  2138
   1860  2138				   .
   1861  2138							; 
   1862  2138
   1863  2138				   .L0143		;  drawscreen
   1864  2138
   1865  2138		       85 81		      sta	temp7
   1866  213a		       a9 31		      lda	#>(ret_point2-1)
   1867  213c		       48		      pha
   1868  213d		       a9 4f		      lda	#<(ret_point2-1)
   1869  213f		       48		      pha
   1870  2140		       a9 19		      lda	#>(drawscreen-1)
   1871  2142		       48		      pha
   1872  2143		       a9 50		      lda	#<(drawscreen-1)
   1873  2145		       48		      pha
   1874  2146		       a5 81		      lda	temp7
   1875  2148		       48		      pha
   1876  2149		       8a		      txa
   1877  214a		       48		      pha
   1878  214b		       a2 01		      ldx	#1
   1879  214d		       4c ee df 	      jmp	BS_jsr
   1880  2150				   ret_point2
   1881  2150				   .
   1882  2150							; 
   1883  2150
   1884  2150				   .
   1885  2150							; 
   1886  2150
   1887  2150				   .
   1888  2150							; 
   1889  2150
   1890  2150				   .L0144		;  goto __Main_Loop
   1891  2150
   1892  2150		       4c 08 31 	      jmp	.__Main_Loop
   1893  2153
   1894  2153				   .
   1895  2153							; 
   1896  2153
   1897  2153				   .
   1898  2153							; 
   1899  2153
   1900  2153				   .
   1901  2153							; 
   1902  2153
   1903  2153				   .L0145		;  bank 3
   1904  2153
   1905  2153					      if	ECHO2
      3713 bytes of ROM space left in bank 2
   1906  2153					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
   1907  2153					      endif
   1908  2153		       00 01	   ECHO2      =	1
   1909  2fd4					      ORG	$2FF4-bscode_length
   1910  2fd4					      RORG	$3FF4-bscode_length
   1911  2fd4		       a2 ff	   start_bank2 ldx	#$ff
   1912  2fd6					      ifconst	FASTFETCH	; using DPC+
   1913  2fd6		       8e 58 10 	      stx	FASTFETCH
   1914  2fd9					      endif
   1915  2fd9		       9a		      txs
   1916  2fda				  -	      if	bankswitch == 64
   1917  2fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   1918  2fda					      else
   1919  2fda		       a9 18		      lda	#>(start-1)
   1920  2fdc					      endif
   1921  2fdc		       48		      pha
   1922  2fdd		       a9 eb		      lda	#<(start-1)
   1923  2fdf		       48		      pha
   1924  2fe0		       48		      pha
   1925  2fe1		       8a		      txa
   1926  2fe2		       48		      pha
   1927  2fe3		       ba		      tsx
   1928  2fe4					      if	bankswitch != 64
   1929  2fe4		       b5 04		      lda	4,x	; get high byte of return address
   1930  2fe6		       2a		      rol
   1931  2fe7		       2a		      rol
   1932  2fe8		       2a		      rol
   1933  2fe9		       2a		      rol
   1934  2fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   1935  2fec		       aa		      tax
   1936  2fed		       e8		      inx
   1937  2fee				  -	      else
   1938  2fee				  -	      lda	4,x	; get high byte of return address
   1939  2fee				  -	      tay
   1940  2fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   1941  2fee				  -	      sta	4,x
   1942  2fee				  -	      tya
   1943  2fee				  -	      lsr
   1944  2fee				  -	      lsr
   1945  2fee				  -	      lsr
   1946  2fee				  -	      lsr
   1947  2fee				  -	      tax
   1948  2fee				  -	      inx
   1949  2fee					      endif
   1950  2fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   1951  2ff1		       68		      pla
   1952  2ff2		       aa		      tax
   1953  2ff3		       68		      pla
   1954  2ff4		       60		      rts
   1955  2ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   1956  2ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   1957  2ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   1958  2ff5					      endif
   1959  2ffc					      ORG	$2FFC
   1960  2ffc					      RORG	$3FFC
   1961  2ffc		       d4 3f		      .word.w	(start_bank2 & $ffff)
   1962  2ffe		       d4 3f		      .word.w	(start_bank2 & $ffff)
   1963  3000					      ORG	$3000
   1964  3000					      RORG	$5000
   1965  3000					      repeat	129
   1966  3000		       00		      .byte.b	0
   1965  3000					      repend
   1966  3001		       00		      .byte.b	0
   1965  3001					      repend
   1966  3002		       00		      .byte.b	0
   1965  3002					      repend
   1966  3003		       00		      .byte.b	0
   1965  3003					      repend
   1966  3004		       00		      .byte.b	0
   1965  3004					      repend
   1966  3005		       00		      .byte.b	0
   1965  3005					      repend
   1966  3006		       00		      .byte.b	0
   1965  3006					      repend
   1966  3007		       00		      .byte.b	0
   1965  3007					      repend
   1966  3008		       00		      .byte.b	0
   1965  3008					      repend
   1966  3009		       00		      .byte.b	0
   1965  3009					      repend
   1966  300a		       00		      .byte.b	0
   1965  300a					      repend
   1966  300b		       00		      .byte.b	0
   1965  300b					      repend
   1966  300c		       00		      .byte.b	0
   1965  300c					      repend
   1966  300d		       00		      .byte.b	0
   1965  300d					      repend
   1966  300e		       00		      .byte.b	0
   1965  300e					      repend
   1966  300f		       00		      .byte.b	0
   1965  300f					      repend
   1966  3010		       00		      .byte.b	0
   1965  3010					      repend
   1966  3011		       00		      .byte.b	0
   1965  3011					      repend
   1966  3012		       00		      .byte.b	0
   1965  3012					      repend
   1966  3013		       00		      .byte.b	0
   1965  3013					      repend
   1966  3014		       00		      .byte.b	0
   1965  3014					      repend
   1966  3015		       00		      .byte.b	0
   1965  3015					      repend
   1966  3016		       00		      .byte.b	0
   1965  3016					      repend
   1966  3017		       00		      .byte.b	0
   1965  3017					      repend
   1966  3018		       00		      .byte.b	0
   1965  3018					      repend
   1966  3019		       00		      .byte.b	0
   1965  3019					      repend
   1966  301a		       00		      .byte.b	0
   1965  301a					      repend
   1966  301b		       00		      .byte.b	0
   1965  301b					      repend
   1966  301c		       00		      .byte.b	0
   1965  301c					      repend
   1966  301d		       00		      .byte.b	0
   1965  301d					      repend
   1966  301e		       00		      .byte.b	0
   1965  301e					      repend
   1966  301f		       00		      .byte.b	0
   1965  301f					      repend
   1966  3020		       00		      .byte.b	0
   1965  3020					      repend
   1966  3021		       00		      .byte.b	0
   1965  3021					      repend
   1966  3022		       00		      .byte.b	0
   1965  3022					      repend
   1966  3023		       00		      .byte.b	0
   1965  3023					      repend
   1966  3024		       00		      .byte.b	0
   1965  3024					      repend
   1966  3025		       00		      .byte.b	0
   1965  3025					      repend
   1966  3026		       00		      .byte.b	0
   1965  3026					      repend
   1966  3027		       00		      .byte.b	0
   1965  3027					      repend
   1966  3028		       00		      .byte.b	0
   1965  3028					      repend
   1966  3029		       00		      .byte.b	0
   1965  3029					      repend
   1966  302a		       00		      .byte.b	0
   1965  302a					      repend
   1966  302b		       00		      .byte.b	0
   1965  302b					      repend
   1966  302c		       00		      .byte.b	0
   1965  302c					      repend
   1966  302d		       00		      .byte.b	0
   1965  302d					      repend
   1966  302e		       00		      .byte.b	0
   1965  302e					      repend
   1966  302f		       00		      .byte.b	0
   1965  302f					      repend
   1966  3030		       00		      .byte.b	0
   1965  3030					      repend
   1966  3031		       00		      .byte.b	0
   1965  3031					      repend
   1966  3032		       00		      .byte.b	0
   1965  3032					      repend
   1966  3033		       00		      .byte.b	0
   1965  3033					      repend
   1966  3034		       00		      .byte.b	0
   1965  3034					      repend
   1966  3035		       00		      .byte.b	0
   1965  3035					      repend
   1966  3036		       00		      .byte.b	0
   1965  3036					      repend
   1966  3037		       00		      .byte.b	0
   1965  3037					      repend
   1966  3038		       00		      .byte.b	0
   1965  3038					      repend
   1966  3039		       00		      .byte.b	0
   1965  3039					      repend
   1966  303a		       00		      .byte.b	0
   1965  303a					      repend
   1966  303b		       00		      .byte.b	0
   1965  303b					      repend
   1966  303c		       00		      .byte.b	0
   1965  303c					      repend
   1966  303d		       00		      .byte.b	0
   1965  303d					      repend
   1966  303e		       00		      .byte.b	0
   1965  303e					      repend
   1966  303f		       00		      .byte.b	0
   1965  303f					      repend
   1966  3040		       00		      .byte.b	0
   1965  3040					      repend
   1966  3041		       00		      .byte.b	0
   1965  3041					      repend
   1966  3042		       00		      .byte.b	0
   1965  3042					      repend
   1966  3043		       00		      .byte.b	0
   1965  3043					      repend
   1966  3044		       00		      .byte.b	0
   1965  3044					      repend
   1966  3045		       00		      .byte.b	0
   1965  3045					      repend
   1966  3046		       00		      .byte.b	0
   1965  3046					      repend
   1966  3047		       00		      .byte.b	0
   1965  3047					      repend
   1966  3048		       00		      .byte.b	0
   1965  3048					      repend
   1966  3049		       00		      .byte.b	0
   1965  3049					      repend
   1966  304a		       00		      .byte.b	0
   1965  304a					      repend
   1966  304b		       00		      .byte.b	0
   1965  304b					      repend
   1966  304c		       00		      .byte.b	0
   1965  304c					      repend
   1966  304d		       00		      .byte.b	0
   1965  304d					      repend
   1966  304e		       00		      .byte.b	0
   1965  304e					      repend
   1966  304f		       00		      .byte.b	0
   1965  304f					      repend
   1966  3050		       00		      .byte.b	0
   1965  3050					      repend
   1966  3051		       00		      .byte.b	0
   1965  3051					      repend
   1966  3052		       00		      .byte.b	0
   1965  3052					      repend
   1966  3053		       00		      .byte.b	0
   1965  3053					      repend
   1966  3054		       00		      .byte.b	0
   1965  3054					      repend
   1966  3055		       00		      .byte.b	0
   1965  3055					      repend
   1966  3056		       00		      .byte.b	0
   1965  3056					      repend
   1966  3057		       00		      .byte.b	0
   1965  3057					      repend
   1966  3058		       00		      .byte.b	0
   1965  3058					      repend
   1966  3059		       00		      .byte.b	0
   1965  3059					      repend
   1966  305a		       00		      .byte.b	0
   1965  305a					      repend
   1966  305b		       00		      .byte.b	0
   1965  305b					      repend
   1966  305c		       00		      .byte.b	0
   1965  305c					      repend
   1966  305d		       00		      .byte.b	0
   1965  305d					      repend
   1966  305e		       00		      .byte.b	0
   1965  305e					      repend
   1966  305f		       00		      .byte.b	0
   1965  305f					      repend
   1966  3060		       00		      .byte.b	0
   1965  3060					      repend
   1966  3061		       00		      .byte.b	0
   1965  3061					      repend
   1966  3062		       00		      .byte.b	0
   1965  3062					      repend
   1966  3063		       00		      .byte.b	0
   1965  3063					      repend
   1966  3064		       00		      .byte.b	0
   1965  3064					      repend
   1966  3065		       00		      .byte.b	0
   1965  3065					      repend
   1966  3066		       00		      .byte.b	0
   1965  3066					      repend
   1966  3067		       00		      .byte.b	0
   1965  3067					      repend
   1966  3068		       00		      .byte.b	0
   1965  3068					      repend
   1966  3069		       00		      .byte.b	0
   1965  3069					      repend
   1966  306a		       00		      .byte.b	0
   1965  306a					      repend
   1966  306b		       00		      .byte.b	0
   1965  306b					      repend
   1966  306c		       00		      .byte.b	0
   1965  306c					      repend
   1966  306d		       00		      .byte.b	0
   1965  306d					      repend
   1966  306e		       00		      .byte.b	0
   1965  306e					      repend
   1966  306f		       00		      .byte.b	0
   1965  306f					      repend
   1966  3070		       00		      .byte.b	0
   1965  3070					      repend
   1966  3071		       00		      .byte.b	0
   1965  3071					      repend
   1966  3072		       00		      .byte.b	0
   1965  3072					      repend
   1966  3073		       00		      .byte.b	0
   1965  3073					      repend
   1966  3074		       00		      .byte.b	0
   1965  3074					      repend
   1966  3075		       00		      .byte.b	0
   1965  3075					      repend
   1966  3076		       00		      .byte.b	0
   1965  3076					      repend
   1966  3077		       00		      .byte.b	0
   1965  3077					      repend
   1966  3078		       00		      .byte.b	0
   1965  3078					      repend
   1966  3079		       00		      .byte.b	0
   1965  3079					      repend
   1966  307a		       00		      .byte.b	0
   1965  307a					      repend
   1966  307b		       00		      .byte.b	0
   1965  307b					      repend
   1966  307c		       00		      .byte.b	0
   1965  307c					      repend
   1966  307d		       00		      .byte.b	0
   1965  307d					      repend
   1966  307e		       00		      .byte.b	0
   1965  307e					      repend
   1966  307f		       00		      .byte.b	0
   1965  307f					      repend
   1966  3080		       00		      .byte.b	0
   1967  3081					      repend
   1968  3081				   .L0146		;  temp1 = temp1
   1969  3081
   1970  3081		       a5 cb		      LDA	temp1
   1971  3083		       85 cb		      STA	temp1
   1972  3085				   .
   1973  3085							; 
   1974  3085
   1975  3085				   .L0147		;  bank 4
   1976  3085
   1977  3085					      if	ECHO3
      3919 bytes of ROM space left in bank 3
   1978  3085					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
   1979  3085					      endif
   1980  3085		       00 01	   ECHO3      =	1
   1981  3fd4					      ORG	$3FF4-bscode_length
   1982  3fd4					      RORG	$5FF4-bscode_length
   1983  3fd4		       a2 ff	   start_bank3 ldx	#$ff
   1984  3fd6					      ifconst	FASTFETCH	; using DPC+
   1985  3fd6		       8e 58 10 	      stx	FASTFETCH
   1986  3fd9					      endif
   1987  3fd9		       9a		      txs
   1988  3fda				  -	      if	bankswitch == 64
   1989  3fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   1990  3fda					      else
   1991  3fda		       a9 18		      lda	#>(start-1)
   1992  3fdc					      endif
   1993  3fdc		       48		      pha
   1994  3fdd		       a9 eb		      lda	#<(start-1)
   1995  3fdf		       48		      pha
   1996  3fe0		       48		      pha
   1997  3fe1		       8a		      txa
   1998  3fe2		       48		      pha
   1999  3fe3		       ba		      tsx
   2000  3fe4					      if	bankswitch != 64
   2001  3fe4		       b5 04		      lda	4,x	; get high byte of return address
   2002  3fe6		       2a		      rol
   2003  3fe7		       2a		      rol
   2004  3fe8		       2a		      rol
   2005  3fe9		       2a		      rol
   2006  3fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   2007  3fec		       aa		      tax
   2008  3fed		       e8		      inx
   2009  3fee				  -	      else
   2010  3fee				  -	      lda	4,x	; get high byte of return address
   2011  3fee				  -	      tay
   2012  3fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   2013  3fee				  -	      sta	4,x
   2014  3fee				  -	      tya
   2015  3fee				  -	      lsr
   2016  3fee				  -	      lsr
   2017  3fee				  -	      lsr
   2018  3fee				  -	      lsr
   2019  3fee				  -	      tax
   2020  3fee				  -	      inx
   2021  3fee					      endif
   2022  3fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   2023  3ff1		       68		      pla
   2024  3ff2		       aa		      tax
   2025  3ff3		       68		      pla
   2026  3ff4		       60		      rts
   2027  3ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   2028  3ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   2029  3ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   2030  3ff5					      endif
   2031  3ffc					      ORG	$3FFC
   2032  3ffc					      RORG	$5FFC
   2033  3ffc		       d4 5f		      .word.w	(start_bank3 & $ffff)
   2034  3ffe		       d4 5f		      .word.w	(start_bank3 & $ffff)
   2035  4000					      ORG	$4000
   2036  4000					      RORG	$7000
   2037  4000					      repeat	129
   2038  4000		       00		      .byte.b	0
   2037  4000					      repend
   2038  4001		       00		      .byte.b	0
   2037  4001					      repend
   2038  4002		       00		      .byte.b	0
   2037  4002					      repend
   2038  4003		       00		      .byte.b	0
   2037  4003					      repend
   2038  4004		       00		      .byte.b	0
   2037  4004					      repend
   2038  4005		       00		      .byte.b	0
   2037  4005					      repend
   2038  4006		       00		      .byte.b	0
   2037  4006					      repend
   2038  4007		       00		      .byte.b	0
   2037  4007					      repend
   2038  4008		       00		      .byte.b	0
   2037  4008					      repend
   2038  4009		       00		      .byte.b	0
   2037  4009					      repend
   2038  400a		       00		      .byte.b	0
   2037  400a					      repend
   2038  400b		       00		      .byte.b	0
   2037  400b					      repend
   2038  400c		       00		      .byte.b	0
   2037  400c					      repend
   2038  400d		       00		      .byte.b	0
   2037  400d					      repend
   2038  400e		       00		      .byte.b	0
   2037  400e					      repend
   2038  400f		       00		      .byte.b	0
   2037  400f					      repend
   2038  4010		       00		      .byte.b	0
   2037  4010					      repend
   2038  4011		       00		      .byte.b	0
   2037  4011					      repend
   2038  4012		       00		      .byte.b	0
   2037  4012					      repend
   2038  4013		       00		      .byte.b	0
   2037  4013					      repend
   2038  4014		       00		      .byte.b	0
   2037  4014					      repend
   2038  4015		       00		      .byte.b	0
   2037  4015					      repend
   2038  4016		       00		      .byte.b	0
   2037  4016					      repend
   2038  4017		       00		      .byte.b	0
   2037  4017					      repend
   2038  4018		       00		      .byte.b	0
   2037  4018					      repend
   2038  4019		       00		      .byte.b	0
   2037  4019					      repend
   2038  401a		       00		      .byte.b	0
   2037  401a					      repend
   2038  401b		       00		      .byte.b	0
   2037  401b					      repend
   2038  401c		       00		      .byte.b	0
   2037  401c					      repend
   2038  401d		       00		      .byte.b	0
   2037  401d					      repend
   2038  401e		       00		      .byte.b	0
   2037  401e					      repend
   2038  401f		       00		      .byte.b	0
   2037  401f					      repend
   2038  4020		       00		      .byte.b	0
   2037  4020					      repend
   2038  4021		       00		      .byte.b	0
   2037  4021					      repend
   2038  4022		       00		      .byte.b	0
   2037  4022					      repend
   2038  4023		       00		      .byte.b	0
   2037  4023					      repend
   2038  4024		       00		      .byte.b	0
   2037  4024					      repend
   2038  4025		       00		      .byte.b	0
   2037  4025					      repend
   2038  4026		       00		      .byte.b	0
   2037  4026					      repend
   2038  4027		       00		      .byte.b	0
   2037  4027					      repend
   2038  4028		       00		      .byte.b	0
   2037  4028					      repend
   2038  4029		       00		      .byte.b	0
   2037  4029					      repend
   2038  402a		       00		      .byte.b	0
   2037  402a					      repend
   2038  402b		       00		      .byte.b	0
   2037  402b					      repend
   2038  402c		       00		      .byte.b	0
   2037  402c					      repend
   2038  402d		       00		      .byte.b	0
   2037  402d					      repend
   2038  402e		       00		      .byte.b	0
   2037  402e					      repend
   2038  402f		       00		      .byte.b	0
   2037  402f					      repend
   2038  4030		       00		      .byte.b	0
   2037  4030					      repend
   2038  4031		       00		      .byte.b	0
   2037  4031					      repend
   2038  4032		       00		      .byte.b	0
   2037  4032					      repend
   2038  4033		       00		      .byte.b	0
   2037  4033					      repend
   2038  4034		       00		      .byte.b	0
   2037  4034					      repend
   2038  4035		       00		      .byte.b	0
   2037  4035					      repend
   2038  4036		       00		      .byte.b	0
   2037  4036					      repend
   2038  4037		       00		      .byte.b	0
   2037  4037					      repend
   2038  4038		       00		      .byte.b	0
   2037  4038					      repend
   2038  4039		       00		      .byte.b	0
   2037  4039					      repend
   2038  403a		       00		      .byte.b	0
   2037  403a					      repend
   2038  403b		       00		      .byte.b	0
   2037  403b					      repend
   2038  403c		       00		      .byte.b	0
   2037  403c					      repend
   2038  403d		       00		      .byte.b	0
   2037  403d					      repend
   2038  403e		       00		      .byte.b	0
   2037  403e					      repend
   2038  403f		       00		      .byte.b	0
   2037  403f					      repend
   2038  4040		       00		      .byte.b	0
   2037  4040					      repend
   2038  4041		       00		      .byte.b	0
   2037  4041					      repend
   2038  4042		       00		      .byte.b	0
   2037  4042					      repend
   2038  4043		       00		      .byte.b	0
   2037  4043					      repend
   2038  4044		       00		      .byte.b	0
   2037  4044					      repend
   2038  4045		       00		      .byte.b	0
   2037  4045					      repend
   2038  4046		       00		      .byte.b	0
   2037  4046					      repend
   2038  4047		       00		      .byte.b	0
   2037  4047					      repend
   2038  4048		       00		      .byte.b	0
   2037  4048					      repend
   2038  4049		       00		      .byte.b	0
   2037  4049					      repend
   2038  404a		       00		      .byte.b	0
   2037  404a					      repend
   2038  404b		       00		      .byte.b	0
   2037  404b					      repend
   2038  404c		       00		      .byte.b	0
   2037  404c					      repend
   2038  404d		       00		      .byte.b	0
   2037  404d					      repend
   2038  404e		       00		      .byte.b	0
   2037  404e					      repend
   2038  404f		       00		      .byte.b	0
   2037  404f					      repend
   2038  4050		       00		      .byte.b	0
   2037  4050					      repend
   2038  4051		       00		      .byte.b	0
   2037  4051					      repend
   2038  4052		       00		      .byte.b	0
   2037  4052					      repend
   2038  4053		       00		      .byte.b	0
   2037  4053					      repend
   2038  4054		       00		      .byte.b	0
   2037  4054					      repend
   2038  4055		       00		      .byte.b	0
   2037  4055					      repend
   2038  4056		       00		      .byte.b	0
   2037  4056					      repend
   2038  4057		       00		      .byte.b	0
   2037  4057					      repend
   2038  4058		       00		      .byte.b	0
   2037  4058					      repend
   2038  4059		       00		      .byte.b	0
   2037  4059					      repend
   2038  405a		       00		      .byte.b	0
   2037  405a					      repend
   2038  405b		       00		      .byte.b	0
   2037  405b					      repend
   2038  405c		       00		      .byte.b	0
   2037  405c					      repend
   2038  405d		       00		      .byte.b	0
   2037  405d					      repend
   2038  405e		       00		      .byte.b	0
   2037  405e					      repend
   2038  405f		       00		      .byte.b	0
   2037  405f					      repend
   2038  4060		       00		      .byte.b	0
   2037  4060					      repend
   2038  4061		       00		      .byte.b	0
   2037  4061					      repend
   2038  4062		       00		      .byte.b	0
   2037  4062					      repend
   2038  4063		       00		      .byte.b	0
   2037  4063					      repend
   2038  4064		       00		      .byte.b	0
   2037  4064					      repend
   2038  4065		       00		      .byte.b	0
   2037  4065					      repend
   2038  4066		       00		      .byte.b	0
   2037  4066					      repend
   2038  4067		       00		      .byte.b	0
   2037  4067					      repend
   2038  4068		       00		      .byte.b	0
   2037  4068					      repend
   2038  4069		       00		      .byte.b	0
   2037  4069					      repend
   2038  406a		       00		      .byte.b	0
   2037  406a					      repend
   2038  406b		       00		      .byte.b	0
   2037  406b					      repend
   2038  406c		       00		      .byte.b	0
   2037  406c					      repend
   2038  406d		       00		      .byte.b	0
   2037  406d					      repend
   2038  406e		       00		      .byte.b	0
   2037  406e					      repend
   2038  406f		       00		      .byte.b	0
   2037  406f					      repend
   2038  4070		       00		      .byte.b	0
   2037  4070					      repend
   2038  4071		       00		      .byte.b	0
   2037  4071					      repend
   2038  4072		       00		      .byte.b	0
   2037  4072					      repend
   2038  4073		       00		      .byte.b	0
   2037  4073					      repend
   2038  4074		       00		      .byte.b	0
   2037  4074					      repend
   2038  4075		       00		      .byte.b	0
   2037  4075					      repend
   2038  4076		       00		      .byte.b	0
   2037  4076					      repend
   2038  4077		       00		      .byte.b	0
   2037  4077					      repend
   2038  4078		       00		      .byte.b	0
   2037  4078					      repend
   2038  4079		       00		      .byte.b	0
   2037  4079					      repend
   2038  407a		       00		      .byte.b	0
   2037  407a					      repend
   2038  407b		       00		      .byte.b	0
   2037  407b					      repend
   2038  407c		       00		      .byte.b	0
   2037  407c					      repend
   2038  407d		       00		      .byte.b	0
   2037  407d					      repend
   2038  407e		       00		      .byte.b	0
   2037  407e					      repend
   2038  407f		       00		      .byte.b	0
   2037  407f					      repend
   2038  4080		       00		      .byte.b	0
   2039  4081					      repend
   2040  4081				   .L0148		;  temp1 = temp1
   2041  4081
   2042  4081		       a5 cb		      LDA	temp1
   2043  4083		       85 cb		      STA	temp1
   2044  4085				   .
   2045  4085							; 
   2046  4085
   2047  4085				   .L0149		;  bank 5
   2048  4085
   2049  4085					      if	ECHO4
      3919 bytes of ROM space left in bank 4
   2050  4085					      echo	"    ",[(start_bank4 - *)]d , "bytes of ROM space left in bank 4")
   2051  4085					      endif
   2052  4085		       00 01	   ECHO4      =	1
   2053  4fd4					      ORG	$4FF4-bscode_length
   2054  4fd4					      RORG	$7FF4-bscode_length
   2055  4fd4		       a2 ff	   start_bank4 ldx	#$ff
   2056  4fd6					      ifconst	FASTFETCH	; using DPC+
   2057  4fd6		       8e 58 10 	      stx	FASTFETCH
   2058  4fd9					      endif
   2059  4fd9		       9a		      txs
   2060  4fda				  -	      if	bankswitch == 64
   2061  4fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   2062  4fda					      else
   2063  4fda		       a9 18		      lda	#>(start-1)
   2064  4fdc					      endif
   2065  4fdc		       48		      pha
   2066  4fdd		       a9 eb		      lda	#<(start-1)
   2067  4fdf		       48		      pha
   2068  4fe0		       48		      pha
   2069  4fe1		       8a		      txa
   2070  4fe2		       48		      pha
   2071  4fe3		       ba		      tsx
   2072  4fe4					      if	bankswitch != 64
   2073  4fe4		       b5 04		      lda	4,x	; get high byte of return address
   2074  4fe6		       2a		      rol
   2075  4fe7		       2a		      rol
   2076  4fe8		       2a		      rol
   2077  4fe9		       2a		      rol
   2078  4fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   2079  4fec		       aa		      tax
   2080  4fed		       e8		      inx
   2081  4fee				  -	      else
   2082  4fee				  -	      lda	4,x	; get high byte of return address
   2083  4fee				  -	      tay
   2084  4fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   2085  4fee				  -	      sta	4,x
   2086  4fee				  -	      tya
   2087  4fee				  -	      lsr
   2088  4fee				  -	      lsr
   2089  4fee				  -	      lsr
   2090  4fee				  -	      lsr
   2091  4fee				  -	      tax
   2092  4fee				  -	      inx
   2093  4fee					      endif
   2094  4fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   2095  4ff1		       68		      pla
   2096  4ff2		       aa		      tax
   2097  4ff3		       68		      pla
   2098  4ff4		       60		      rts
   2099  4ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   2100  4ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   2101  4ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   2102  4ff5					      endif
   2103  4ffc					      ORG	$4FFC
   2104  4ffc					      RORG	$7FFC
   2105  4ffc		       d4 7f		      .word.w	(start_bank4 & $ffff)
   2106  4ffe		       d4 7f		      .word.w	(start_bank4 & $ffff)
   2107  5000					      ORG	$5000
   2108  5000					      RORG	$9000
   2109  5000					      repeat	129
   2110  5000		       00		      .byte.b	0
   2109  5000					      repend
   2110  5001		       00		      .byte.b	0
   2109  5001					      repend
   2110  5002		       00		      .byte.b	0
   2109  5002					      repend
   2110  5003		       00		      .byte.b	0
   2109  5003					      repend
   2110  5004		       00		      .byte.b	0
   2109  5004					      repend
   2110  5005		       00		      .byte.b	0
   2109  5005					      repend
   2110  5006		       00		      .byte.b	0
   2109  5006					      repend
   2110  5007		       00		      .byte.b	0
   2109  5007					      repend
   2110  5008		       00		      .byte.b	0
   2109  5008					      repend
   2110  5009		       00		      .byte.b	0
   2109  5009					      repend
   2110  500a		       00		      .byte.b	0
   2109  500a					      repend
   2110  500b		       00		      .byte.b	0
   2109  500b					      repend
   2110  500c		       00		      .byte.b	0
   2109  500c					      repend
   2110  500d		       00		      .byte.b	0
   2109  500d					      repend
   2110  500e		       00		      .byte.b	0
   2109  500e					      repend
   2110  500f		       00		      .byte.b	0
   2109  500f					      repend
   2110  5010		       00		      .byte.b	0
   2109  5010					      repend
   2110  5011		       00		      .byte.b	0
   2109  5011					      repend
   2110  5012		       00		      .byte.b	0
   2109  5012					      repend
   2110  5013		       00		      .byte.b	0
   2109  5013					      repend
   2110  5014		       00		      .byte.b	0
   2109  5014					      repend
   2110  5015		       00		      .byte.b	0
   2109  5015					      repend
   2110  5016		       00		      .byte.b	0
   2109  5016					      repend
   2110  5017		       00		      .byte.b	0
   2109  5017					      repend
   2110  5018		       00		      .byte.b	0
   2109  5018					      repend
   2110  5019		       00		      .byte.b	0
   2109  5019					      repend
   2110  501a		       00		      .byte.b	0
   2109  501a					      repend
   2110  501b		       00		      .byte.b	0
   2109  501b					      repend
   2110  501c		       00		      .byte.b	0
   2109  501c					      repend
   2110  501d		       00		      .byte.b	0
   2109  501d					      repend
   2110  501e		       00		      .byte.b	0
   2109  501e					      repend
   2110  501f		       00		      .byte.b	0
   2109  501f					      repend
   2110  5020		       00		      .byte.b	0
   2109  5020					      repend
   2110  5021		       00		      .byte.b	0
   2109  5021					      repend
   2110  5022		       00		      .byte.b	0
   2109  5022					      repend
   2110  5023		       00		      .byte.b	0
   2109  5023					      repend
   2110  5024		       00		      .byte.b	0
   2109  5024					      repend
   2110  5025		       00		      .byte.b	0
   2109  5025					      repend
   2110  5026		       00		      .byte.b	0
   2109  5026					      repend
   2110  5027		       00		      .byte.b	0
   2109  5027					      repend
   2110  5028		       00		      .byte.b	0
   2109  5028					      repend
   2110  5029		       00		      .byte.b	0
   2109  5029					      repend
   2110  502a		       00		      .byte.b	0
   2109  502a					      repend
   2110  502b		       00		      .byte.b	0
   2109  502b					      repend
   2110  502c		       00		      .byte.b	0
   2109  502c					      repend
   2110  502d		       00		      .byte.b	0
   2109  502d					      repend
   2110  502e		       00		      .byte.b	0
   2109  502e					      repend
   2110  502f		       00		      .byte.b	0
   2109  502f					      repend
   2110  5030		       00		      .byte.b	0
   2109  5030					      repend
   2110  5031		       00		      .byte.b	0
   2109  5031					      repend
   2110  5032		       00		      .byte.b	0
   2109  5032					      repend
   2110  5033		       00		      .byte.b	0
   2109  5033					      repend
   2110  5034		       00		      .byte.b	0
   2109  5034					      repend
   2110  5035		       00		      .byte.b	0
   2109  5035					      repend
   2110  5036		       00		      .byte.b	0
   2109  5036					      repend
   2110  5037		       00		      .byte.b	0
   2109  5037					      repend
   2110  5038		       00		      .byte.b	0
   2109  5038					      repend
   2110  5039		       00		      .byte.b	0
   2109  5039					      repend
   2110  503a		       00		      .byte.b	0
   2109  503a					      repend
   2110  503b		       00		      .byte.b	0
   2109  503b					      repend
   2110  503c		       00		      .byte.b	0
   2109  503c					      repend
   2110  503d		       00		      .byte.b	0
   2109  503d					      repend
   2110  503e		       00		      .byte.b	0
   2109  503e					      repend
   2110  503f		       00		      .byte.b	0
   2109  503f					      repend
   2110  5040		       00		      .byte.b	0
   2109  5040					      repend
   2110  5041		       00		      .byte.b	0
   2109  5041					      repend
   2110  5042		       00		      .byte.b	0
   2109  5042					      repend
   2110  5043		       00		      .byte.b	0
   2109  5043					      repend
   2110  5044		       00		      .byte.b	0
   2109  5044					      repend
   2110  5045		       00		      .byte.b	0
   2109  5045					      repend
   2110  5046		       00		      .byte.b	0
   2109  5046					      repend
   2110  5047		       00		      .byte.b	0
   2109  5047					      repend
   2110  5048		       00		      .byte.b	0
   2109  5048					      repend
   2110  5049		       00		      .byte.b	0
   2109  5049					      repend
   2110  504a		       00		      .byte.b	0
   2109  504a					      repend
   2110  504b		       00		      .byte.b	0
   2109  504b					      repend
   2110  504c		       00		      .byte.b	0
   2109  504c					      repend
   2110  504d		       00		      .byte.b	0
   2109  504d					      repend
   2110  504e		       00		      .byte.b	0
   2109  504e					      repend
   2110  504f		       00		      .byte.b	0
   2109  504f					      repend
   2110  5050		       00		      .byte.b	0
   2109  5050					      repend
   2110  5051		       00		      .byte.b	0
   2109  5051					      repend
   2110  5052		       00		      .byte.b	0
   2109  5052					      repend
   2110  5053		       00		      .byte.b	0
   2109  5053					      repend
   2110  5054		       00		      .byte.b	0
   2109  5054					      repend
   2110  5055		       00		      .byte.b	0
   2109  5055					      repend
   2110  5056		       00		      .byte.b	0
   2109  5056					      repend
   2110  5057		       00		      .byte.b	0
   2109  5057					      repend
   2110  5058		       00		      .byte.b	0
   2109  5058					      repend
   2110  5059		       00		      .byte.b	0
   2109  5059					      repend
   2110  505a		       00		      .byte.b	0
   2109  505a					      repend
   2110  505b		       00		      .byte.b	0
   2109  505b					      repend
   2110  505c		       00		      .byte.b	0
   2109  505c					      repend
   2110  505d		       00		      .byte.b	0
   2109  505d					      repend
   2110  505e		       00		      .byte.b	0
   2109  505e					      repend
   2110  505f		       00		      .byte.b	0
   2109  505f					      repend
   2110  5060		       00		      .byte.b	0
   2109  5060					      repend
   2110  5061		       00		      .byte.b	0
   2109  5061					      repend
   2110  5062		       00		      .byte.b	0
   2109  5062					      repend
   2110  5063		       00		      .byte.b	0
   2109  5063					      repend
   2110  5064		       00		      .byte.b	0
   2109  5064					      repend
   2110  5065		       00		      .byte.b	0
   2109  5065					      repend
   2110  5066		       00		      .byte.b	0
   2109  5066					      repend
   2110  5067		       00		      .byte.b	0
   2109  5067					      repend
   2110  5068		       00		      .byte.b	0
   2109  5068					      repend
   2110  5069		       00		      .byte.b	0
   2109  5069					      repend
   2110  506a		       00		      .byte.b	0
   2109  506a					      repend
   2110  506b		       00		      .byte.b	0
   2109  506b					      repend
   2110  506c		       00		      .byte.b	0
   2109  506c					      repend
   2110  506d		       00		      .byte.b	0
   2109  506d					      repend
   2110  506e		       00		      .byte.b	0
   2109  506e					      repend
   2110  506f		       00		      .byte.b	0
   2109  506f					      repend
   2110  5070		       00		      .byte.b	0
   2109  5070					      repend
   2110  5071		       00		      .byte.b	0
   2109  5071					      repend
   2110  5072		       00		      .byte.b	0
   2109  5072					      repend
   2110  5073		       00		      .byte.b	0
   2109  5073					      repend
   2110  5074		       00		      .byte.b	0
   2109  5074					      repend
   2110  5075		       00		      .byte.b	0
   2109  5075					      repend
   2110  5076		       00		      .byte.b	0
   2109  5076					      repend
   2110  5077		       00		      .byte.b	0
   2109  5077					      repend
   2110  5078		       00		      .byte.b	0
   2109  5078					      repend
   2110  5079		       00		      .byte.b	0
   2109  5079					      repend
   2110  507a		       00		      .byte.b	0
   2109  507a					      repend
   2110  507b		       00		      .byte.b	0
   2109  507b					      repend
   2110  507c		       00		      .byte.b	0
   2109  507c					      repend
   2110  507d		       00		      .byte.b	0
   2109  507d					      repend
   2110  507e		       00		      .byte.b	0
   2109  507e					      repend
   2110  507f		       00		      .byte.b	0
   2109  507f					      repend
   2110  5080		       00		      .byte.b	0
   2111  5081					      repend
   2112  5081				   .L0150		;  temp1 = temp1
   2113  5081
   2114  5081		       a5 cb		      LDA	temp1
   2115  5083		       85 cb		      STA	temp1
   2116  5085				   .
   2117  5085							; 
   2118  5085
   2119  5085				   .L0151		;  bank 6
   2120  5085
   2121  5085					      if	ECHO5
      3919 bytes of ROM space left in bank 5
   2122  5085					      echo	"    ",[(start_bank5 - *)]d , "bytes of ROM space left in bank 5")
   2123  5085					      endif
   2124  5085		       00 01	   ECHO5      =	1
   2125  5fd4					      ORG	$5FF4-bscode_length
   2126  5fd4					      RORG	$9FF4-bscode_length
   2127  5fd4		       a2 ff	   start_bank5 ldx	#$ff
   2128  5fd6					      ifconst	FASTFETCH	; using DPC+
   2129  5fd6		       8e 58 10 	      stx	FASTFETCH
   2130  5fd9					      endif
   2131  5fd9		       9a		      txs
   2132  5fda				  -	      if	bankswitch == 64
   2133  5fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   2134  5fda					      else
   2135  5fda		       a9 18		      lda	#>(start-1)
   2136  5fdc					      endif
   2137  5fdc		       48		      pha
   2138  5fdd		       a9 eb		      lda	#<(start-1)
   2139  5fdf		       48		      pha
   2140  5fe0		       48		      pha
   2141  5fe1		       8a		      txa
   2142  5fe2		       48		      pha
   2143  5fe3		       ba		      tsx
   2144  5fe4					      if	bankswitch != 64
   2145  5fe4		       b5 04		      lda	4,x	; get high byte of return address
   2146  5fe6		       2a		      rol
   2147  5fe7		       2a		      rol
   2148  5fe8		       2a		      rol
   2149  5fe9		       2a		      rol
   2150  5fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   2151  5fec		       aa		      tax
   2152  5fed		       e8		      inx
   2153  5fee				  -	      else
   2154  5fee				  -	      lda	4,x	; get high byte of return address
   2155  5fee				  -	      tay
   2156  5fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   2157  5fee				  -	      sta	4,x
   2158  5fee				  -	      tya
   2159  5fee				  -	      lsr
   2160  5fee				  -	      lsr
   2161  5fee				  -	      lsr
   2162  5fee				  -	      lsr
   2163  5fee				  -	      tax
   2164  5fee				  -	      inx
   2165  5fee					      endif
   2166  5fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   2167  5ff1		       68		      pla
   2168  5ff2		       aa		      tax
   2169  5ff3		       68		      pla
   2170  5ff4		       60		      rts
   2171  5ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   2172  5ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   2173  5ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   2174  5ff5					      endif
   2175  5ffc					      ORG	$5FFC
   2176  5ffc					      RORG	$9FFC
   2177  5ffc		       d4 9f		      .word.w	(start_bank5 & $ffff)
   2178  5ffe		       d4 9f		      .word.w	(start_bank5 & $ffff)
   2179  6000					      ORG	$6000
   2180  6000					      RORG	$B000
   2181  6000					      repeat	129
   2182  6000		       00		      .byte.b	0
   2181  6000					      repend
   2182  6001		       00		      .byte.b	0
   2181  6001					      repend
   2182  6002		       00		      .byte.b	0
   2181  6002					      repend
   2182  6003		       00		      .byte.b	0
   2181  6003					      repend
   2182  6004		       00		      .byte.b	0
   2181  6004					      repend
   2182  6005		       00		      .byte.b	0
   2181  6005					      repend
   2182  6006		       00		      .byte.b	0
   2181  6006					      repend
   2182  6007		       00		      .byte.b	0
   2181  6007					      repend
   2182  6008		       00		      .byte.b	0
   2181  6008					      repend
   2182  6009		       00		      .byte.b	0
   2181  6009					      repend
   2182  600a		       00		      .byte.b	0
   2181  600a					      repend
   2182  600b		       00		      .byte.b	0
   2181  600b					      repend
   2182  600c		       00		      .byte.b	0
   2181  600c					      repend
   2182  600d		       00		      .byte.b	0
   2181  600d					      repend
   2182  600e		       00		      .byte.b	0
   2181  600e					      repend
   2182  600f		       00		      .byte.b	0
   2181  600f					      repend
   2182  6010		       00		      .byte.b	0
   2181  6010					      repend
   2182  6011		       00		      .byte.b	0
   2181  6011					      repend
   2182  6012		       00		      .byte.b	0
   2181  6012					      repend
   2182  6013		       00		      .byte.b	0
   2181  6013					      repend
   2182  6014		       00		      .byte.b	0
   2181  6014					      repend
   2182  6015		       00		      .byte.b	0
   2181  6015					      repend
   2182  6016		       00		      .byte.b	0
   2181  6016					      repend
   2182  6017		       00		      .byte.b	0
   2181  6017					      repend
   2182  6018		       00		      .byte.b	0
   2181  6018					      repend
   2182  6019		       00		      .byte.b	0
   2181  6019					      repend
   2182  601a		       00		      .byte.b	0
   2181  601a					      repend
   2182  601b		       00		      .byte.b	0
   2181  601b					      repend
   2182  601c		       00		      .byte.b	0
   2181  601c					      repend
   2182  601d		       00		      .byte.b	0
   2181  601d					      repend
   2182  601e		       00		      .byte.b	0
   2181  601e					      repend
   2182  601f		       00		      .byte.b	0
   2181  601f					      repend
   2182  6020		       00		      .byte.b	0
   2181  6020					      repend
   2182  6021		       00		      .byte.b	0
   2181  6021					      repend
   2182  6022		       00		      .byte.b	0
   2181  6022					      repend
   2182  6023		       00		      .byte.b	0
   2181  6023					      repend
   2182  6024		       00		      .byte.b	0
   2181  6024					      repend
   2182  6025		       00		      .byte.b	0
   2181  6025					      repend
   2182  6026		       00		      .byte.b	0
   2181  6026					      repend
   2182  6027		       00		      .byte.b	0
   2181  6027					      repend
   2182  6028		       00		      .byte.b	0
   2181  6028					      repend
   2182  6029		       00		      .byte.b	0
   2181  6029					      repend
   2182  602a		       00		      .byte.b	0
   2181  602a					      repend
   2182  602b		       00		      .byte.b	0
   2181  602b					      repend
   2182  602c		       00		      .byte.b	0
   2181  602c					      repend
   2182  602d		       00		      .byte.b	0
   2181  602d					      repend
   2182  602e		       00		      .byte.b	0
   2181  602e					      repend
   2182  602f		       00		      .byte.b	0
   2181  602f					      repend
   2182  6030		       00		      .byte.b	0
   2181  6030					      repend
   2182  6031		       00		      .byte.b	0
   2181  6031					      repend
   2182  6032		       00		      .byte.b	0
   2181  6032					      repend
   2182  6033		       00		      .byte.b	0
   2181  6033					      repend
   2182  6034		       00		      .byte.b	0
   2181  6034					      repend
   2182  6035		       00		      .byte.b	0
   2181  6035					      repend
   2182  6036		       00		      .byte.b	0
   2181  6036					      repend
   2182  6037		       00		      .byte.b	0
   2181  6037					      repend
   2182  6038		       00		      .byte.b	0
   2181  6038					      repend
   2182  6039		       00		      .byte.b	0
   2181  6039					      repend
   2182  603a		       00		      .byte.b	0
   2181  603a					      repend
   2182  603b		       00		      .byte.b	0
   2181  603b					      repend
   2182  603c		       00		      .byte.b	0
   2181  603c					      repend
   2182  603d		       00		      .byte.b	0
   2181  603d					      repend
   2182  603e		       00		      .byte.b	0
   2181  603e					      repend
   2182  603f		       00		      .byte.b	0
   2181  603f					      repend
   2182  6040		       00		      .byte.b	0
   2181  6040					      repend
   2182  6041		       00		      .byte.b	0
   2181  6041					      repend
   2182  6042		       00		      .byte.b	0
   2181  6042					      repend
   2182  6043		       00		      .byte.b	0
   2181  6043					      repend
   2182  6044		       00		      .byte.b	0
   2181  6044					      repend
   2182  6045		       00		      .byte.b	0
   2181  6045					      repend
   2182  6046		       00		      .byte.b	0
   2181  6046					      repend
   2182  6047		       00		      .byte.b	0
   2181  6047					      repend
   2182  6048		       00		      .byte.b	0
   2181  6048					      repend
   2182  6049		       00		      .byte.b	0
   2181  6049					      repend
   2182  604a		       00		      .byte.b	0
   2181  604a					      repend
   2182  604b		       00		      .byte.b	0
   2181  604b					      repend
   2182  604c		       00		      .byte.b	0
   2181  604c					      repend
   2182  604d		       00		      .byte.b	0
   2181  604d					      repend
   2182  604e		       00		      .byte.b	0
   2181  604e					      repend
   2182  604f		       00		      .byte.b	0
   2181  604f					      repend
   2182  6050		       00		      .byte.b	0
   2181  6050					      repend
   2182  6051		       00		      .byte.b	0
   2181  6051					      repend
   2182  6052		       00		      .byte.b	0
   2181  6052					      repend
   2182  6053		       00		      .byte.b	0
   2181  6053					      repend
   2182  6054		       00		      .byte.b	0
   2181  6054					      repend
   2182  6055		       00		      .byte.b	0
   2181  6055					      repend
   2182  6056		       00		      .byte.b	0
   2181  6056					      repend
   2182  6057		       00		      .byte.b	0
   2181  6057					      repend
   2182  6058		       00		      .byte.b	0
   2181  6058					      repend
   2182  6059		       00		      .byte.b	0
   2181  6059					      repend
   2182  605a		       00		      .byte.b	0
   2181  605a					      repend
   2182  605b		       00		      .byte.b	0
   2181  605b					      repend
   2182  605c		       00		      .byte.b	0
   2181  605c					      repend
   2182  605d		       00		      .byte.b	0
   2181  605d					      repend
   2182  605e		       00		      .byte.b	0
   2181  605e					      repend
   2182  605f		       00		      .byte.b	0
   2181  605f					      repend
   2182  6060		       00		      .byte.b	0
   2181  6060					      repend
   2182  6061		       00		      .byte.b	0
   2181  6061					      repend
   2182  6062		       00		      .byte.b	0
   2181  6062					      repend
   2182  6063		       00		      .byte.b	0
   2181  6063					      repend
   2182  6064		       00		      .byte.b	0
   2181  6064					      repend
   2182  6065		       00		      .byte.b	0
   2181  6065					      repend
   2182  6066		       00		      .byte.b	0
   2181  6066					      repend
   2182  6067		       00		      .byte.b	0
   2181  6067					      repend
   2182  6068		       00		      .byte.b	0
   2181  6068					      repend
   2182  6069		       00		      .byte.b	0
   2181  6069					      repend
   2182  606a		       00		      .byte.b	0
   2181  606a					      repend
   2182  606b		       00		      .byte.b	0
   2181  606b					      repend
   2182  606c		       00		      .byte.b	0
   2181  606c					      repend
   2182  606d		       00		      .byte.b	0
   2181  606d					      repend
   2182  606e		       00		      .byte.b	0
   2181  606e					      repend
   2182  606f		       00		      .byte.b	0
   2181  606f					      repend
   2182  6070		       00		      .byte.b	0
   2181  6070					      repend
   2182  6071		       00		      .byte.b	0
   2181  6071					      repend
   2182  6072		       00		      .byte.b	0
   2181  6072					      repend
   2182  6073		       00		      .byte.b	0
   2181  6073					      repend
   2182  6074		       00		      .byte.b	0
   2181  6074					      repend
   2182  6075		       00		      .byte.b	0
   2181  6075					      repend
   2182  6076		       00		      .byte.b	0
   2181  6076					      repend
   2182  6077		       00		      .byte.b	0
   2181  6077					      repend
   2182  6078		       00		      .byte.b	0
   2181  6078					      repend
   2182  6079		       00		      .byte.b	0
   2181  6079					      repend
   2182  607a		       00		      .byte.b	0
   2181  607a					      repend
   2182  607b		       00		      .byte.b	0
   2181  607b					      repend
   2182  607c		       00		      .byte.b	0
   2181  607c					      repend
   2182  607d		       00		      .byte.b	0
   2181  607d					      repend
   2182  607e		       00		      .byte.b	0
   2181  607e					      repend
   2182  607f		       00		      .byte.b	0
   2181  607f					      repend
   2182  6080		       00		      .byte.b	0
   2183  6081					      repend
   2184  6081				   .L0152		;  temp1 = temp1
   2185  6081		       a5 cb		      LDA	temp1
   2186  6083		       85 cb		      STA	temp1
   2187  6085					      if	ECHO6
      3919 bytes of ROM space left in bank 6
   2188  6085					      echo	"    ",[(start_bank6 - *)]d , "bytes of ROM space left in bank 6")
   2189  6085					      endif
   2190  6085		       00 01	   ECHO6      =	1
   2191  6fd4					      ORG	$6FF4-bscode_length
   2192  6fd4					      RORG	$BFF4-bscode_length
   2193  6fd4		       a2 ff	   start_bank6 ldx	#$ff
   2194  6fd6					      ifconst	FASTFETCH	; using DPC+
   2195  6fd6		       8e 58 10 	      stx	FASTFETCH
   2196  6fd9					      endif
   2197  6fd9		       9a		      txs
   2198  6fda				  -	      if	bankswitch == 64
   2199  6fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   2200  6fda					      else
   2201  6fda		       a9 18		      lda	#>(start-1)
   2202  6fdc					      endif
   2203  6fdc		       48		      pha
   2204  6fdd		       a9 eb		      lda	#<(start-1)
   2205  6fdf		       48		      pha
   2206  6fe0		       48		      pha
   2207  6fe1		       8a		      txa
   2208  6fe2		       48		      pha
   2209  6fe3		       ba		      tsx
   2210  6fe4					      if	bankswitch != 64
   2211  6fe4		       b5 04		      lda	4,x	; get high byte of return address
   2212  6fe6		       2a		      rol
   2213  6fe7		       2a		      rol
   2214  6fe8		       2a		      rol
   2215  6fe9		       2a		      rol
   2216  6fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   2217  6fec		       aa		      tax
   2218  6fed		       e8		      inx
   2219  6fee				  -	      else
   2220  6fee				  -	      lda	4,x	; get high byte of return address
   2221  6fee				  -	      tay
   2222  6fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   2223  6fee				  -	      sta	4,x
   2224  6fee				  -	      tya
   2225  6fee				  -	      lsr
   2226  6fee				  -	      lsr
   2227  6fee				  -	      lsr
   2228  6fee				  -	      lsr
   2229  6fee				  -	      tax
   2230  6fee				  -	      inx
   2231  6fee					      endif
   2232  6fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   2233  6ff1		       68		      pla
   2234  6ff2		       aa		      tax
   2235  6ff3		       68		      pla
   2236  6ff4		       60		      rts
   2237  6ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   2238  6ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   2239  6ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   2240  6ff5					      endif
   2241  6ffc					      ORG	$6FFC
   2242  6ffc					      RORG	$BFFC
   2243  6ffc		       d4 bf		      .word.w	(start_bank6 & $ffff)
   2244  6ffe		       d4 bf		      .word.w	(start_bank6 & $ffff)
   2245  7000					      ORG	$7000
   2246  7000					      RORG	$D000
   2247  7000					      repeat	129
   2248  7000		       00		      .byte.b	0
   2247  7000					      repend
   2248  7001		       00		      .byte.b	0
   2247  7001					      repend
   2248  7002		       00		      .byte.b	0
   2247  7002					      repend
   2248  7003		       00		      .byte.b	0
   2247  7003					      repend
   2248  7004		       00		      .byte.b	0
   2247  7004					      repend
   2248  7005		       00		      .byte.b	0
   2247  7005					      repend
   2248  7006		       00		      .byte.b	0
   2247  7006					      repend
   2248  7007		       00		      .byte.b	0
   2247  7007					      repend
   2248  7008		       00		      .byte.b	0
   2247  7008					      repend
   2248  7009		       00		      .byte.b	0
   2247  7009					      repend
   2248  700a		       00		      .byte.b	0
   2247  700a					      repend
   2248  700b		       00		      .byte.b	0
   2247  700b					      repend
   2248  700c		       00		      .byte.b	0
   2247  700c					      repend
   2248  700d		       00		      .byte.b	0
   2247  700d					      repend
   2248  700e		       00		      .byte.b	0
   2247  700e					      repend
   2248  700f		       00		      .byte.b	0
   2247  700f					      repend
   2248  7010		       00		      .byte.b	0
   2247  7010					      repend
   2248  7011		       00		      .byte.b	0
   2247  7011					      repend
   2248  7012		       00		      .byte.b	0
   2247  7012					      repend
   2248  7013		       00		      .byte.b	0
   2247  7013					      repend
   2248  7014		       00		      .byte.b	0
   2247  7014					      repend
   2248  7015		       00		      .byte.b	0
   2247  7015					      repend
   2248  7016		       00		      .byte.b	0
   2247  7016					      repend
   2248  7017		       00		      .byte.b	0
   2247  7017					      repend
   2248  7018		       00		      .byte.b	0
   2247  7018					      repend
   2248  7019		       00		      .byte.b	0
   2247  7019					      repend
   2248  701a		       00		      .byte.b	0
   2247  701a					      repend
   2248  701b		       00		      .byte.b	0
   2247  701b					      repend
   2248  701c		       00		      .byte.b	0
   2247  701c					      repend
   2248  701d		       00		      .byte.b	0
   2247  701d					      repend
   2248  701e		       00		      .byte.b	0
   2247  701e					      repend
   2248  701f		       00		      .byte.b	0
   2247  701f					      repend
   2248  7020		       00		      .byte.b	0
   2247  7020					      repend
   2248  7021		       00		      .byte.b	0
   2247  7021					      repend
   2248  7022		       00		      .byte.b	0
   2247  7022					      repend
   2248  7023		       00		      .byte.b	0
   2247  7023					      repend
   2248  7024		       00		      .byte.b	0
   2247  7024					      repend
   2248  7025		       00		      .byte.b	0
   2247  7025					      repend
   2248  7026		       00		      .byte.b	0
   2247  7026					      repend
   2248  7027		       00		      .byte.b	0
   2247  7027					      repend
   2248  7028		       00		      .byte.b	0
   2247  7028					      repend
   2248  7029		       00		      .byte.b	0
   2247  7029					      repend
   2248  702a		       00		      .byte.b	0
   2247  702a					      repend
   2248  702b		       00		      .byte.b	0
   2247  702b					      repend
   2248  702c		       00		      .byte.b	0
   2247  702c					      repend
   2248  702d		       00		      .byte.b	0
   2247  702d					      repend
   2248  702e		       00		      .byte.b	0
   2247  702e					      repend
   2248  702f		       00		      .byte.b	0
   2247  702f					      repend
   2248  7030		       00		      .byte.b	0
   2247  7030					      repend
   2248  7031		       00		      .byte.b	0
   2247  7031					      repend
   2248  7032		       00		      .byte.b	0
   2247  7032					      repend
   2248  7033		       00		      .byte.b	0
   2247  7033					      repend
   2248  7034		       00		      .byte.b	0
   2247  7034					      repend
   2248  7035		       00		      .byte.b	0
   2247  7035					      repend
   2248  7036		       00		      .byte.b	0
   2247  7036					      repend
   2248  7037		       00		      .byte.b	0
   2247  7037					      repend
   2248  7038		       00		      .byte.b	0
   2247  7038					      repend
   2248  7039		       00		      .byte.b	0
   2247  7039					      repend
   2248  703a		       00		      .byte.b	0
   2247  703a					      repend
   2248  703b		       00		      .byte.b	0
   2247  703b					      repend
   2248  703c		       00		      .byte.b	0
   2247  703c					      repend
   2248  703d		       00		      .byte.b	0
   2247  703d					      repend
   2248  703e		       00		      .byte.b	0
   2247  703e					      repend
   2248  703f		       00		      .byte.b	0
   2247  703f					      repend
   2248  7040		       00		      .byte.b	0
   2247  7040					      repend
   2248  7041		       00		      .byte.b	0
   2247  7041					      repend
   2248  7042		       00		      .byte.b	0
   2247  7042					      repend
   2248  7043		       00		      .byte.b	0
   2247  7043					      repend
   2248  7044		       00		      .byte.b	0
   2247  7044					      repend
   2248  7045		       00		      .byte.b	0
   2247  7045					      repend
   2248  7046		       00		      .byte.b	0
   2247  7046					      repend
   2248  7047		       00		      .byte.b	0
   2247  7047					      repend
   2248  7048		       00		      .byte.b	0
   2247  7048					      repend
   2248  7049		       00		      .byte.b	0
   2247  7049					      repend
   2248  704a		       00		      .byte.b	0
   2247  704a					      repend
   2248  704b		       00		      .byte.b	0
   2247  704b					      repend
   2248  704c		       00		      .byte.b	0
   2247  704c					      repend
   2248  704d		       00		      .byte.b	0
   2247  704d					      repend
   2248  704e		       00		      .byte.b	0
   2247  704e					      repend
   2248  704f		       00		      .byte.b	0
   2247  704f					      repend
   2248  7050		       00		      .byte.b	0
   2247  7050					      repend
   2248  7051		       00		      .byte.b	0
   2247  7051					      repend
   2248  7052		       00		      .byte.b	0
   2247  7052					      repend
   2248  7053		       00		      .byte.b	0
   2247  7053					      repend
   2248  7054		       00		      .byte.b	0
   2247  7054					      repend
   2248  7055		       00		      .byte.b	0
   2247  7055					      repend
   2248  7056		       00		      .byte.b	0
   2247  7056					      repend
   2248  7057		       00		      .byte.b	0
   2247  7057					      repend
   2248  7058		       00		      .byte.b	0
   2247  7058					      repend
   2248  7059		       00		      .byte.b	0
   2247  7059					      repend
   2248  705a		       00		      .byte.b	0
   2247  705a					      repend
   2248  705b		       00		      .byte.b	0
   2247  705b					      repend
   2248  705c		       00		      .byte.b	0
   2247  705c					      repend
   2248  705d		       00		      .byte.b	0
   2247  705d					      repend
   2248  705e		       00		      .byte.b	0
   2247  705e					      repend
   2248  705f		       00		      .byte.b	0
   2247  705f					      repend
   2248  7060		       00		      .byte.b	0
   2247  7060					      repend
   2248  7061		       00		      .byte.b	0
   2247  7061					      repend
   2248  7062		       00		      .byte.b	0
   2247  7062					      repend
   2248  7063		       00		      .byte.b	0
   2247  7063					      repend
   2248  7064		       00		      .byte.b	0
   2247  7064					      repend
   2248  7065		       00		      .byte.b	0
   2247  7065					      repend
   2248  7066		       00		      .byte.b	0
   2247  7066					      repend
   2248  7067		       00		      .byte.b	0
   2247  7067					      repend
   2248  7068		       00		      .byte.b	0
   2247  7068					      repend
   2248  7069		       00		      .byte.b	0
   2247  7069					      repend
   2248  706a		       00		      .byte.b	0
   2247  706a					      repend
   2248  706b		       00		      .byte.b	0
   2247  706b					      repend
   2248  706c		       00		      .byte.b	0
   2247  706c					      repend
   2248  706d		       00		      .byte.b	0
   2247  706d					      repend
   2248  706e		       00		      .byte.b	0
   2247  706e					      repend
   2248  706f		       00		      .byte.b	0
   2247  706f					      repend
   2248  7070		       00		      .byte.b	0
   2247  7070					      repend
   2248  7071		       00		      .byte.b	0
   2247  7071					      repend
   2248  7072		       00		      .byte.b	0
   2247  7072					      repend
   2248  7073		       00		      .byte.b	0
   2247  7073					      repend
   2248  7074		       00		      .byte.b	0
   2247  7074					      repend
   2248  7075		       00		      .byte.b	0
   2247  7075					      repend
   2248  7076		       00		      .byte.b	0
   2247  7076					      repend
   2248  7077		       00		      .byte.b	0
   2247  7077					      repend
   2248  7078		       00		      .byte.b	0
   2247  7078					      repend
   2248  7079		       00		      .byte.b	0
   2247  7079					      repend
   2248  707a		       00		      .byte.b	0
   2247  707a					      repend
   2248  707b		       00		      .byte.b	0
   2247  707b					      repend
   2248  707c		       00		      .byte.b	0
   2247  707c					      repend
   2248  707d		       00		      .byte.b	0
   2247  707d					      repend
   2248  707e		       00		      .byte.b	0
   2247  707e					      repend
   2248  707f		       00		      .byte.b	0
   2247  707f					      repend
   2248  7080		       00		      .byte.b	0
   2249  7081					      repend
   2250  7081							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2251  7081
   2252  7081							;----------------------------------------
   2253  7081							; Display Data
   2254  7081							;----------------------------------------
   2255  7081							; The Display Data bank is copied into RAM when DPC+ initializes the cartridge.
   2256  7081							; This allows us to manipulate the data during run-time, but have a known
   2257  7081							; starting state when the Atari is first turned on.
   2258  7081							;
   2259  7081							; Unlike normal Atari VCS/2600 sprite definitions, the sprite data in the
   2260  7081							; Display Data bank is stored right-side-up.
   2261  7081							;
   2262  7081							;----------------------------------------
   2263  7081
   2264  7081				   Zeros32
   2265  7081		       00 84	   SOUND_OFF  =	(* & $1fff)/32
   2266  7081				   DisplayDataDigitBlank
   2267  7081		       00		      .byte.b	0	;--
   2268  7082		       00		      .byte.b	0	;--
   2269  7083		       00		      .byte.b	0	;--
   2270  7084		       00		      .byte.b	0	;--
   2271  7085		       00		      .byte.b	0	;--
   2272  7086		       00		      .byte.b	0	;--
   2273  7087		       00		      .byte.b	0	;--
   2274  7088		       00		      .byte.b	0	;--
   2275  7089
   2276  7089							;	align 32
   2277  7089							;Zeros32:
   2278  7089							;SOUND_OFF = (* & $1fff)/32
   2279  7089							;	.byte 0,0,0,0,0,0,0,0
   2280  7089		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   2281  7091		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   2282  7099		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   2283  70a1
   2284  70a1		       00 85	   SINE_WAVE  =	(* & $1fff)/32
   2285  70a1		       03 03 03 04*	      .byte.b	3,3,3,4,4,5,5,5
   2286  70a9		       05 05 05 05*	      .byte.b	5,5,5,5,4,4,3,3
   2287  70b1		       03 02 02 01*	      .byte.b	3,2,2,1,1,0,0,0
   2288  70b9		       00 00 00 00*	      .byte.b	0,0,0,0,1,1,2,2
   2289  70c1
   2290  70e0		       00 00 00 00*	      align	32
   2291  70e0		       00 87	   TRIANGLE_WAVE =	(* & $1fff)/32
   2292  70e0		       00 00 01 01*	      .byte.b	0,0,1,1,1,2,2,2
   2293  70e8		       03 03 03 04*	      .byte.b	3,3,3,4,4,4,5,5
   2294  70f0		       05 05 04 04*	      .byte.b	5,5,4,4,4,3,3,3
   2295  70f8		       02 02 02 01*	      .byte.b	2,2,2,1,1,1,0,0
   2296  7100
   2297  7100					      align	32
   2298  7100		       00 88	   SAWTOOTH_WAVE =	(* & $1fff)/32
   2299  7100		       00 00 00 00*	      .byte.b	0,0,0,0,1,1,1,1
   2300  7108		       01 01 02 02*	      .byte.b	1,1,2,2,2,2,2,2
   2301  7110		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,4,4
   2302  7118		       04 04 04 04*	      .byte.b	4,4,4,4,5,5,5,5
   2303  7120
   2304  7120					      align	32
   2305  7120		       00 89	   SQUARE_WAVE_VOL5 =	(* & $1fff)/32
   2306  7120		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   2307  7128		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   2308  7130		       05 05 05 05*	      .byte.b	5,5,5,5,5,5,5,5
   2309  7138		       05 05 05 05*	      .byte.b	5,5,5,5,5,5,5,5
   2310  7140
   2311  7140					      align	32
   2312  7140		       00 8a	   SQUARE_WAVE_VOL4 =	(* & $1fff)/32
   2313  7140		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   2314  7148		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   2315  7150		       04 04 04 04*	      .byte.b	4,4,4,4,4,4,4,4
   2316  7158		       04 04 04 04*	      .byte.b	4,4,4,4,4,4,4,4
   2317  7160
   2318  7160					      align	32
   2319  7160		       00 8b	   SQUARE_WAVE_VOL3 =	(* & $1fff)/32
   2320  7160		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   2321  7168		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   2322  7170		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,3,3
   2323  7178		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,3,3
   2324  7180
   2325  7180					      align	32
   2326  7180		       00 8c	   NOISE_WAVE =	(* & $1fff)/32
   2327  7180		       07 01 09 0a*	      .byte.b	7, 1, 9,10, 2, 8, 8,14
   2328  7188		       03 0d 08 05*	      .byte.b	3,13, 8, 5,12, 2, 3, 7
   2329  7190		       07 01 08 04*	      .byte.b	7, 1, 8, 4,15, 1,13, 5
   2330  7198		       08 05 0b 06*	      .byte.b	8, 5,11, 6, 8, 7, 9, 2
   2331  71a0
   2332  71a0							; low and high byte of address table (for ROMdata array in C)
   2333  71a0		       56		      .byte.b	<fetcher_address_table
   2334  71a1		       0d		      .byte.b	((>fetcher_address_table) & $0f) | (((>fetcher_address_table) / 2) & $70)
   2335  71a2		       00		      .byte.b	0
   2336  71a3		       00		      .byte.b	0
   2337  71a4				   FETCHER_BEGIN
   2338  71a4		       10		      .byte.b	16
   2339  71a5		       10		      .byte.b	16
   2340  71a6		       10		      .byte.b	16
   2341  71a7		       10		      .byte.b	16	; to zero-fill on boot
   2342  71a8							;bB.asm
   2343  71a8							; bB.asm file is split here
   2344  71a8				   PF_data1
   2345  71a8		       00		      .byte.b	%00000000
   2346  71a9		       00		      .byte.b	%00000000
   2347  71aa		       00		      .byte.b	%00000000
   2348  71ab		       00		      .byte.b	%00000000
   2349  71ac		       00		      .byte.b	%00000000
   2350  71ad		       00		      .byte.b	%00000000
   2351  71ae		       00		      .byte.b	%00000000
   2352  71af		       00		      .byte.b	%00000000
   2353  71b0		       00		      .byte.b	%00000000
   2354  71b1		       00		      .byte.b	%00000000
   2355  71b2		       00		      .byte.b	%00000000
   2356  71b3		       00		      .byte.b	%00000000
   2357  71b4		       00		      .byte.b	%00000000
   2358  71b5		       00		      .byte.b	%00000000
   2359  71b6		       00		      .byte.b	%00000000
   2360  71b7		       00		      .byte.b	%00000000
   2361  71b8		       00		      .byte.b	%00000000
   2362  71b9		       00		      .byte.b	%00000000
   2363  71ba		       00		      .byte.b	%00000000
   2364  71bb		       00		      .byte.b	%00000000
   2365  71bc		       00		      .byte.b	%00000000
   2366  71bd		       00		      .byte.b	%00000000
   2367  71be		       00		      .byte.b	%00000000
   2368  71bf		       00		      .byte.b	%00000000
   2369  71c0		       00		      .byte.b	%00000000
   2370  71c1		       00		      .byte.b	%00000000
   2371  71c2		       00		      .byte.b	%00000000
   2372  71c3		       00		      .byte.b	%00000000
   2373  71c4		       00		      .byte.b	%00000000
   2374  71c5		       00		      .byte.b	%00000000
   2375  71c6		       00		      .byte.b	%00000000
   2376  71c7		       00		      .byte.b	%00000000
   2377  71c8		       00		      .byte.b	%00000000
   2378  71c9		       00		      .byte.b	%00000000
   2379  71ca		       00		      .byte.b	%00000000
   2380  71cb		       00		      .byte.b	%00000000
   2381  71cc		       00		      .byte.b	%00000000
   2382  71cd		       00		      .byte.b	%00000000
   2383  71ce		       00		      .byte.b	%00000000
   2384  71cf		       00		      .byte.b	%00000000
   2385  71d0		       00		      .byte.b	%00000000
   2386  71d1		       00		      .byte.b	%00000000
   2387  71d2		       00		      .byte.b	%00000000
   2388  71d3		       00		      .byte.b	%00000000
   2389  71d4		       00		      .byte.b	%00000000
   2390  71d5		       00		      .byte.b	%00000000
   2391  71d6		       00		      .byte.b	%00000000
   2392  71d7		       00		      .byte.b	%00000000
   2393  71d8		       00		      .byte.b	%00000000
   2394  71d9		       00		      .byte.b	%00000000
   2395  71da		       00		      .byte.b	%00000000
   2396  71db		       00		      .byte.b	%00000000
   2397  71dc		       00		      .byte.b	%00000000
   2398  71dd		       00		      .byte.b	%00000000
   2399  71de		       00		      .byte.b	%00000000
   2400  71df		       00		      .byte.b	%00000000
   2401  71e0		       00		      .byte.b	%00000000
   2402  71e1		       00		      .byte.b	%00000000
   2403  71e2		       00		      .byte.b	%00000000
   2404  71e3		       00		      .byte.b	%00000000
   2405  71e4		       00		      .byte.b	%00000000
   2406  71e5		       00		      .byte.b	%00000000
   2407  71e6		       00		      .byte.b	%00000000
   2408  71e7		       00		      .byte.b	%00000000
   2409  71e8		       00		      .byte.b	%00000000
   2410  71e9		       00		      .byte.b	%00000000
   2411  71ea		       00		      .byte.b	%00000000
   2412  71eb		       00		      .byte.b	%00000000
   2413  71ec		       00		      .byte.b	%00000000
   2414  71ed		       00		      .byte.b	%00000000
   2415  71ee		       00		      .byte.b	%00000000
   2416  71ef		       00		      .byte.b	%00000000
   2417  71f0		       00		      .byte.b	%00000000
   2418  71f1		       00		      .byte.b	%00000000
   2419  71f2		       00		      .byte.b	%00000000
   2420  71f3		       00		      .byte.b	%00000000
   2421  71f4		       00		      .byte.b	%00000000
   2422  71f5		       00		      .byte.b	%00000000
   2423  71f6		       00		      .byte.b	%00000000
   2424  71f7		       00		      .byte.b	%00000000
   2425  71f8		       00		      .byte.b	%00000000
   2426  71f9		       00		      .byte.b	%00000000
   2427  71fa		       00		      .byte.b	%00000000
   2428  71fb		       00		      .byte.b	%00000000
   2429  71fc		       00		      .byte.b	%00000000
   2430  71fd		       00		      .byte.b	%00000000
   2431  71fe		       00		      .byte.b	%00000000
   2432  71ff		       00		      .byte.b	%00000000
   2433  7200		       00		      .byte.b	%00000000
   2434  7201		       00		      .byte.b	%00000000
   2435  7202		       00		      .byte.b	%00000000
   2436  7203		       00		      .byte.b	%00000000
   2437  7204		       00		      .byte.b	%00000000
   2438  7205		       00		      .byte.b	%00000000
   2439  7206		       00		      .byte.b	%00000000
   2440  7207		       00		      .byte.b	%00000000
   2441  7208		       00		      .byte.b	%00000000
   2442  7209		       00		      .byte.b	%00000000
   2443  720a		       00		      .byte.b	%00000000
   2444  720b		       00		      .byte.b	%00000000
   2445  720c		       00		      .byte.b	%00000000
   2446  720d		       00		      .byte.b	%00000000
   2447  720e		       00		      .byte.b	%00000000
   2448  720f		       00		      .byte.b	%00000000
   2449  7210		       00		      .byte.b	%00000000
   2450  7211		       00		      .byte.b	%00000000
   2451  7212		       00		      .byte.b	%00000000
   2452  7213		       00		      .byte.b	%00000000
   2453  7214		       00		      .byte.b	%00000000
   2454  7215		       00		      .byte.b	%00000000
   2455  7216		       00		      .byte.b	%00000000
   2456  7217		       00		      .byte.b	%00000000
   2457  7218		       00		      .byte.b	%00000000
   2458  7219		       00		      .byte.b	%00000000
   2459  721a		       00		      .byte.b	%00000000
   2460  721b		       00		      .byte.b	%00000000
   2461  721c		       00		      .byte.b	%00000000
   2462  721d		       00		      .byte.b	%00000000
   2463  721e		       00		      .byte.b	%00000000
   2464  721f		       00		      .byte.b	%00000000
   2465  7220		       00		      .byte.b	%00000000
   2466  7221		       00		      .byte.b	%00000000
   2467  7222		       00		      .byte.b	%00000000
   2468  7223		       00		      .byte.b	%00000000
   2469  7224		       00		      .byte.b	%00000000
   2470  7225		       00		      .byte.b	%00000000
   2471  7226		       00		      .byte.b	%00000000
   2472  7227		       00		      .byte.b	%00000000
   2473  7228		       00		      .byte.b	%00000000
   2474  7229		       00		      .byte.b	%00000000
   2475  722a		       00		      .byte.b	%00000000
   2476  722b		       00		      .byte.b	%00000000
   2477  722c		       00		      .byte.b	%00000000
   2478  722d		       00		      .byte.b	%00000000
   2479  722e		       00		      .byte.b	%00000000
   2480  722f		       00		      .byte.b	%00000000
   2481  7230		       00		      .byte.b	%00000000
   2482  7231		       00		      .byte.b	%00000000
   2483  7232		       00		      .byte.b	%00000000
   2484  7233		       00		      .byte.b	%00000000
   2485  7234		       00		      .byte.b	%00000000
   2486  7235		       00		      .byte.b	%00000000
   2487  7236		       00		      .byte.b	%00000000
   2488  7237		       00		      .byte.b	%00000000
   2489  7238		       00		      .byte.b	%00000000
   2490  7239		       00		      .byte.b	%00000000
   2491  723a		       00		      .byte.b	%00000000
   2492  723b		       00		      .byte.b	%00000000
   2493  723c		       00		      .byte.b	%00000000
   2494  723d		       00		      .byte.b	%00000000
   2495  723e		       00		      .byte.b	%00000000
   2496  723f		       00		      .byte.b	%00000000
   2497  7240		       00		      .byte.b	%00000000
   2498  7241		       00		      .byte.b	%00000000
   2499  7242		       00		      .byte.b	%00000000
   2500  7243		       00		      .byte.b	%00000000
   2501  7244		       00		      .byte.b	%00000000
   2502  7245		       00		      .byte.b	%00000000
   2503  7246		       00		      .byte.b	%00000000
   2504  7247		       00		      .byte.b	%00000000
   2505  7248		       00		      .byte.b	%00000000
   2506  7249		       00		      .byte.b	%00000000
   2507  724a		       00		      .byte.b	%00000000
   2508  724b		       00		      .byte.b	%00000000
   2509  724c		       00		      .byte.b	%00000000
   2510  724d		       00		      .byte.b	%00000000
   2511  724e		       00		      .byte.b	%00000000
   2512  724f		       00		      .byte.b	%00000000
   2513  7250		       00		      .byte.b	%00000000
   2514  7251		       00		      .byte.b	%00000000
   2515  7252		       00		      .byte.b	%00000000
   2516  7253		       00		      .byte.b	%00000000
   2517  7254		       00		      .byte.b	%00000000
   2518  7255		       00		      .byte.b	%00000000
   2519  7256		       00		      .byte.b	%00000000
   2520  7257		       00		      .byte.b	%00000000
   2521  7258		       00		      .byte.b	%00000000
   2522  7259		       00		      .byte.b	%00000000
   2523  725a		       00		      .byte.b	%00000000
   2524  725b		       00		      .byte.b	%00000000
   2525  725c		       00		      .byte.b	%00000000
   2526  725d		       00		      .byte.b	%00000000
   2527  725e		       00		      .byte.b	%00000000
   2528  725f		       00		      .byte.b	%00000000
   2529  7260		       00		      .byte.b	%00000000
   2530  7261		       00		      .byte.b	%00000000
   2531  7262		       00		      .byte.b	%00000000
   2532  7263		       00		      .byte.b	%00000000
   2533  7264		       00		      .byte.b	%00000000
   2534  7265		       00		      .byte.b	%00000000
   2535  7266		       00		      .byte.b	%00000000
   2536  7267		       00		      .byte.b	%00000000
   2537  7268		       00		      .byte.b	%00000000
   2538  7269		       00		      .byte.b	%00000000
   2539  726a		       00		      .byte.b	%00000000
   2540  726b		       00		      .byte.b	%00000000
   2541  726c		       00		      .byte.b	%00000000
   2542  726d		       00		      .byte.b	%00000000
   2543  726e		       00		      .byte.b	%00000000
   2544  726f		       00		      .byte.b	%00000000
   2545  7270		       00		      .byte.b	%00000000
   2546  7271		       00		      .byte.b	%00000000
   2547  7272		       00		      .byte.b	%00000000
   2548  7273		       00		      .byte.b	%00000000
   2549  7274		       00		      .byte.b	%00000000
   2550  7275		       00		      .byte.b	%00000000
   2551  7276		       00		      .byte.b	%00000000
   2552  7277		       00		      .byte.b	%00000000
   2553  7278		       00		      .byte.b	%00000000
   2554  7279		       00		      .byte.b	%00000000
   2555  727a		       00		      .byte.b	%00000000
   2556  727b		       00		      .byte.b	%00000000
   2557  727c		       00		      .byte.b	%00000000
   2558  727d		       00		      .byte.b	%00000000
   2559  727e		       00		      .byte.b	%00000000
   2560  727f		       00		      .byte.b	%00000000
   2561  7280		       00		      .byte.b	%00000000
   2562  7281		       00		      .byte.b	%00000000
   2563  7282		       00		      .byte.b	%00000000
   2564  7283		       00		      .byte.b	%00000000
   2565  7284		       00		      .byte.b	%00000000
   2566  7285		       00		      .byte.b	%00000000
   2567  7286		       00		      .byte.b	%00000000
   2568  7287		       00		      .byte.b	%00000000
   2569  7288		       00		      .byte.b	%00000000
   2570  7289		       00		      .byte.b	%00000000
   2571  728a		       00		      .byte.b	%00000000
   2572  728b		       00		      .byte.b	%00000000
   2573  728c		       00		      .byte.b	%00000000
   2574  728d		       00		      .byte.b	%00000000
   2575  728e		       00		      .byte.b	%00000000
   2576  728f		       00		      .byte.b	%00000000
   2577  7290		       00		      .byte.b	%00000000
   2578  7291		       00		      .byte.b	%00000000
   2579  7292		       00		      .byte.b	%00000000
   2580  7293		       00		      .byte.b	%00000000
   2581  7294		       00		      .byte.b	%00000000
   2582  7295		       00		      .byte.b	%00000000
   2583  7296		       00		      .byte.b	%00000000
   2584  7297		       00		      .byte.b	%00000000
   2585  7298		       00		      .byte.b	%00000000
   2586  7299		       00		      .byte.b	%00000000
   2587  729a		       00		      .byte.b	%00000000
   2588  729b		       00		      .byte.b	%00000000
   2589  729c		       00		      .byte.b	%00000000
   2590  729d		       00		      .byte.b	%00000000
   2591  729e		       00		      .byte.b	%00000000
   2592  729f		       00		      .byte.b	%00000000
   2593  72a0		       00		      .byte.b	%00000000
   2594  72a1		       00		      .byte.b	%00000000
   2595  72a2		       00		      .byte.b	%00000000
   2596  72a3		       00		      .byte.b	%00000000
   2597  72a4		       00		      .byte.b	%00000000
   2598  72a5		       00		      .byte.b	%00000000
   2599  72a6		       00		      .byte.b	%00000000
   2600  72a7		       00		      .byte.b	%00000000
   2601  72a8		       00		      .byte.b	%00000000
   2602  72a9		       00		      .byte.b	%00000000
   2603  72aa		       00		      .byte.b	%00000000
   2604  72ab		       00		      .byte.b	%00000000
   2605  72ac		       00		      .byte.b	%00000000
   2606  72ad		       00		      .byte.b	%00000000
   2607  72ae		       00		      .byte.b	%00000000
   2608  72af		       00		      .byte.b	%00000000
   2609  72b0		       00		      .byte.b	%00000000
   2610  72b1		       00		      .byte.b	%00000000
   2611  72b2		       00		      .byte.b	%00000000
   2612  72b3		       00		      .byte.b	%00000000
   2613  72b4		       00		      .byte.b	%00000000
   2614  72b5		       00		      .byte.b	%00000000
   2615  72b6		       00		      .byte.b	%00000000
   2616  72b7		       00		      .byte.b	%00000000
   2617  72b8		       00		      .byte.b	%00000000
   2618  72b9		       00		      .byte.b	%00000000
   2619  72ba		       00		      .byte.b	%00000000
   2620  72bb		       00		      .byte.b	%00000000
   2621  72bc		       00		      .byte.b	%00000000
   2622  72bd		       00		      .byte.b	%00000000
   2623  72be		       00		      .byte.b	%00000000
   2624  72bf		       00		      .byte.b	%00000000
   2625  72c0		       00		      .byte.b	%00000000
   2626  72c1		       00		      .byte.b	%00000000
   2627  72c2		       00		      .byte.b	%00000000
   2628  72c3		       00		      .byte.b	%00000000
   2629  72c4		       00		      .byte.b	%00000000
   2630  72c5		       00		      .byte.b	%00000000
   2631  72c6		       00		      .byte.b	%00000000
   2632  72c7		       00		      .byte.b	%00000000
   2633  72c8		       00		      .byte.b	%00000000
   2634  72c9		       00		      .byte.b	%00000000
   2635  72ca		       00		      .byte.b	%00000000
   2636  72cb		       00		      .byte.b	%00000000
   2637  72cc		       00		      .byte.b	%00000000
   2638  72cd		       00		      .byte.b	%00000000
   2639  72ce		       00		      .byte.b	%00000000
   2640  72cf		       00		      .byte.b	%00000000
   2641  72d0		       00		      .byte.b	%00000000
   2642  72d1		       00		      .byte.b	%00000000
   2643  72d2		       00		      .byte.b	%00000000
   2644  72d3		       00		      .byte.b	%00000000
   2645  72d4		       00		      .byte.b	%00000000
   2646  72d5		       00		      .byte.b	%00000000
   2647  72d6		       00		      .byte.b	%00000000
   2648  72d7		       00		      .byte.b	%00000000
   2649  72d8		       00		      .byte.b	%00000000
   2650  72d9		       00		      .byte.b	%00000000
   2651  72da		       00		      .byte.b	%00000000
   2652  72db		       00		      .byte.b	%00000000
   2653  72dc		       00		      .byte.b	%00000000
   2654  72dd		       00		      .byte.b	%00000000
   2655  72de		       00		      .byte.b	%00000000
   2656  72df		       00		      .byte.b	%00000000
   2657  72e0		       00		      .byte.b	%00000000
   2658  72e1		       00		      .byte.b	%00000000
   2659  72e2		       00		      .byte.b	%00000000
   2660  72e3		       00		      .byte.b	%00000000
   2661  72e4		       00		      .byte.b	%00000000
   2662  72e5		       00		      .byte.b	%00000000
   2663  72e6		       00		      .byte.b	%00000000
   2664  72e7		       00		      .byte.b	%00000000
   2665  72e8		       00		      .byte.b	%00000000
   2666  72e9		       00		      .byte.b	%00000000
   2667  72ea		       00		      .byte.b	%00000000
   2668  72eb		       00		      .byte.b	%00000000
   2669  72ec		       00		      .byte.b	%00000000
   2670  72ed		       00		      .byte.b	%00000000
   2671  72ee		       00		      .byte.b	%00000000
   2672  72ef		       00		      .byte.b	%00000000
   2673  72f0		       00		      .byte.b	%00000000
   2674  72f1		       00		      .byte.b	%00000000
   2675  72f2		       00		      .byte.b	%00000000
   2676  72f3		       00		      .byte.b	%00000000
   2677  72f4		       00		      .byte.b	%00000000
   2678  72f5		       00		      .byte.b	%00000000
   2679  72f6		       00		      .byte.b	%00000000
   2680  72f7		       00		      .byte.b	%00000000
   2681  72f8		       00		      .byte.b	%00000000
   2682  72f9		       00		      .byte.b	%00000000
   2683  72fa		       00		      .byte.b	%00000000
   2684  72fb		       00		      .byte.b	%00000000
   2685  72fc		       00		      .byte.b	%00000000
   2686  72fd		       00		      .byte.b	%00000000
   2687  72fe		       00		      .byte.b	%00000000
   2688  72ff		       00		      .byte.b	%00000000
   2689  7300		       00		      .byte.b	%00000000
   2690  7301		       00		      .byte.b	%00000000
   2691  7302		       00		      .byte.b	%00000000
   2692  7303		       00		      .byte.b	%00000000
   2693  7304		       00		      .byte.b	%00000000
   2694  7305		       00		      .byte.b	%00000000
   2695  7306		       00		      .byte.b	%00000000
   2696  7307		       00		      .byte.b	%00000000
   2697  7308		       00		      .byte.b	%00000000
   2698  7309		       00		      .byte.b	%00000000
   2699  730a		       00		      .byte.b	%00000000
   2700  730b		       00		      .byte.b	%00000000
   2701  730c		       00		      .byte.b	%00000000
   2702  730d		       00		      .byte.b	%00000000
   2703  730e		       00		      .byte.b	%00000000
   2704  730f		       00		      .byte.b	%00000000
   2705  7310		       00		      .byte.b	%00000000
   2706  7311		       00		      .byte.b	%00000000
   2707  7312		       00		      .byte.b	%00000000
   2708  7313		       00		      .byte.b	%00000000
   2709  7314		       00		      .byte.b	%00000000
   2710  7315		       00		      .byte.b	%00000000
   2711  7316		       00		      .byte.b	%00000000
   2712  7317		       00		      .byte.b	%00000000
   2713  7318		       00		      .byte.b	%00000000
   2714  7319		       00		      .byte.b	%00000000
   2715  731a		       00		      .byte.b	%00000000
   2716  731b		       00		      .byte.b	%00000000
   2717  731c		       00		      .byte.b	%00000000
   2718  731d		       00		      .byte.b	%00000000
   2719  731e		       00		      .byte.b	%00000000
   2720  731f		       00		      .byte.b	%00000000
   2721  7320		       00		      .byte.b	%00000000
   2722  7321		       00		      .byte.b	%00000000
   2723  7322		       00		      .byte.b	%00000000
   2724  7323		       00		      .byte.b	%00000000
   2725  7324		       00		      .byte.b	%00000000
   2726  7325		       00		      .byte.b	%00000000
   2727  7326		       00		      .byte.b	%00000000
   2728  7327		       00		      .byte.b	%00000000
   2729  7328		       00		      .byte.b	%00000000
   2730  7329		       00		      .byte.b	%00000000
   2731  732a		       00		      .byte.b	%00000000
   2732  732b		       00		      .byte.b	%00000000
   2733  732c		       00		      .byte.b	%00000000
   2734  732d		       00		      .byte.b	%00000000
   2735  732e		       00		      .byte.b	%00000000
   2736  732f		       00		      .byte.b	%00000000
   2737  7330		       00		      .byte.b	%00000000
   2738  7331		       00		      .byte.b	%00000000
   2739  7332		       00		      .byte.b	%00000000
   2740  7333		       00		      .byte.b	%00000000
   2741  7334		       00		      .byte.b	%00000000
   2742  7335		       00		      .byte.b	%00000000
   2743  7336		       00		      .byte.b	%00000000
   2744  7337		       00		      .byte.b	%00000000
   2745  7338		       00		      .byte.b	%00000000
   2746  7339		       00		      .byte.b	%00000000
   2747  733a		       00		      .byte.b	%00000000
   2748  733b		       00		      .byte.b	%00000000
   2749  733c		       00		      .byte.b	%00000000
   2750  733d		       00		      .byte.b	%00000000
   2751  733e		       00		      .byte.b	%00000000
   2752  733f		       00		      .byte.b	%00000000
   2753  7340		       00		      .byte.b	%00000000
   2754  7341		       00		      .byte.b	%00000000
   2755  7342		       00		      .byte.b	%00000000
   2756  7343		       00		      .byte.b	%00000000
   2757  7344		       00		      .byte.b	%00000000
   2758  7345		       00		      .byte.b	%00000000
   2759  7346		       00		      .byte.b	%00000000
   2760  7347		       00		      .byte.b	%00000000
   2761  7348		       00		      .byte.b	%00000000
   2762  7349		       00		      .byte.b	%00000000
   2763  734a		       00		      .byte.b	%00000000
   2764  734b		       00		      .byte.b	%00000000
   2765  734c		       00		      .byte.b	%00000000
   2766  734d		       00		      .byte.b	%00000000
   2767  734e		       40		      .byte.b	%01000000
   2768  734f		       40		      .byte.b	%01000000
   2769  7350		       40		      .byte.b	%01000000
   2770  7351		       40		      .byte.b	%01000000
   2771  7352		       40		      .byte.b	%01000000
   2772  7353		       40		      .byte.b	%01000000
   2773  7354		       40		      .byte.b	%01000000
   2774  7355		       40		      .byte.b	%01000000
   2775  7356		       40		      .byte.b	%01000000
   2776  7357		       00		      .byte.b	%00000000
   2777  7358		       40		      .byte.b	%01000000
   2778  7359		       40		      .byte.b	%01000000
   2779  735a		       00		      .byte.b	%00000000
   2780  735b		       40		      .byte.b	%01000000
   2781  735c		       40		      .byte.b	%01000000
   2782  735d		       40		      .byte.b	%01000000
   2783  735e		       26		      .byte.b	%00100110
   2784  735f		       46		      .byte.b	%01000110
   2785  7360		       06		      .byte.b	%00000110
   2786  7361		       06		      .byte.b	%00000110
   2787  7362		       22		      .byte.b	%00100010
   2788  7363		       02		      .byte.b	%00000010
   2789  7364		       22		      .byte.b	%00100010
   2790  7365		       26		      .byte.b	%00100110
   2791  7366		       22		      .byte.b	%00100010
   2792  7367		       22		      .byte.b	%00100010
   2793  7368		       02		      .byte.b	%00000010
   2794  7369		       06		      .byte.b	%00000110
   2795  736a		       22		      .byte.b	%00100010
   2796  736b		       02		      .byte.b	%00000010
   2797  736c		       02		      .byte.b	%00000010
   2798  736d		       22		      .byte.b	%00100010
   2799  736e		       26		      .byte.b	%00100110
   2800  736f		       00		      .byte.b	%00000000
   2801  7370		       22		      .byte.b	%00100010
   2802  7371		       22		      .byte.b	%00100010
   2803  7372		       0a		      .byte.b	%00001010
   2804  7373		       22		      .byte.b	%00100010
   2805  7374		       02		      .byte.b	%00000010
   2806  7375		       0a		      .byte.b	%00001010
   2807  7376		       22		      .byte.b	%00100010
   2808  7377		       0a		      .byte.b	%00001010
   2809  7378		       02		      .byte.b	%00000010
   2810  7379		       0a		      .byte.b	%00001010
   2811  737a		       2a		      .byte.b	%00101010
   2812  737b		       0a		      .byte.b	%00001010
   2813  737c		       01		      .byte.b	%00000001
   2814  737d		       09		      .byte.b	%00001001
   2815  737e		       29		      .byte.b	%00101001
   2816  737f		       01		      .byte.b	%00000001
   2817  7380		       29		      .byte.b	%00101001
   2818  7381		       28		      .byte.b	%00101000
   2819  7382		       01		      .byte.b	%00000001
   2820  7383		       09		      .byte.b	%00001001
   2821  7384		       01		      .byte.b	%00000001
   2822  7385		       21		      .byte.b	%00100001
   2823  7386		       09		      .byte.b	%00001001
   2824  7387		       01		      .byte.b	%00000001
   2825  7388		       01		      .byte.b	%00000001
   2826  7389		       29		      .byte.b	%00101001
   2827  738a		       21		      .byte.b	%00100001
   2828  738b		       08		      .byte.b	%00001000
   2829  738c		       01		      .byte.b	%00000001
   2830  738d		       01		      .byte.b	%00000001
   2831  738e		       00		      .byte.b	%00000000
   2832  738f		       28		      .byte.b	%00101000
   2833  7390		       21		      .byte.b	%00100001
   2834  7391		       00		      .byte.b	%00000000
   2835  7392		       00		      .byte.b	%00000000
   2836  7393		       01		      .byte.b	%00000001
   2837  7394		       09		      .byte.b	%00001001
   2838  7395		       00		      .byte.b	%00000000
   2839  7396		       31		      .byte.b	%00110001
   2840  7397		       00		      .byte.b	%00000000
   2841  7398		       01		      .byte.b	%00000001
   2842  7399		       08		      .byte.b	%00001000
   2843  739a		       01		      .byte.b	%00000001
   2844  739b		       01		      .byte.b	%00000001
   2845  739c		       08		      .byte.b	%00001000
   2846  739d		       01		      .byte.b	%00000001
   2847  739e		       00		      .byte.b	%00000000
   2848  739f		       31		      .byte.b	%00110001
   2849  73a0		       01		      .byte.b	%00000001
   2850  73a1		       08		      .byte.b	%00001000
   2851  73a2		       01		      .byte.b	%00000001
   2852  73a3		       00		      .byte.b	%00000000
   2853  73a4		       08		      .byte.b	%00001000
   2854  73a5		       00		      .byte.b	%00000000
   2855  73a6		       08		      .byte.b	%00001000
   2856  73a7		       10		      .byte.b	%00010000
   2857  73a8		       08		      .byte.b	%00001000
   2858  73a9		       20		      .byte.b	%00100000
   2859  73aa		       00		      .byte.b	%00000000
   2860  73ab		       08		      .byte.b	%00001000
   2861  73ac		       00		      .byte.b	%00000000
   2862  73ad		       18		      .byte.b	%00011000
   2863  73ae		       20		      .byte.b	%00100000
   2864  73af		       08		      .byte.b	%00001000
   2865  73b0		       00		      .byte.b	%00000000
   2866  73b1		       08		      .byte.b	%00001000
   2867  73b2		       10		      .byte.b	%00010000
   2868  73b3		       28		      .byte.b	%00101000
   2869  73b4		       00		      .byte.b	%00000000
   2870  73b5		       08		      .byte.b	%00001000
   2871  73b6		       08		      .byte.b	%00001000
   2872  73b7		       18		      .byte.b	%00011000
   2873  73b8		       00		      .byte.b	%00000000
   2874  73b9		       00		      .byte.b	%00000000
   2875  73ba		       00		      .byte.b	%00000000
   2876  73bb		       00		      .byte.b	%00000000
   2877  73bc		       00		      .byte.b	%00000000
   2878  73bd		       00		      .byte.b	%00000000
   2879  73be		       00		      .byte.b	%00000000
   2880  73bf		       00		      .byte.b	%00000000
   2881  73c0		       00		      .byte.b	%00000000
   2882  73c1		       00		      .byte.b	%00000000
   2883  73c2		       00		      .byte.b	%00000000
   2884  73c3		       00		      .byte.b	%00000000
   2885  73c4		       00		      .byte.b	%00000000
   2886  73c5		       00		      .byte.b	%00000000
   2887  73c6		       00		      .byte.b	%00000000
   2888  73c7		       00		      .byte.b	%00000000
   2889  73c8		       00		      .byte.b	%00000000
   2890  73c9		       00		      .byte.b	%00000000
   2891  73ca		       00		      .byte.b	%00000000
   2892  73cb		       00		      .byte.b	%00000000
   2893  73cc		       00		      .byte.b	%00000000
   2894  73cd		       00		      .byte.b	%00000000
   2895  73ce		       00		      .byte.b	%00000000
   2896  73cf		       00		      .byte.b	%00000000
   2897  73d0		       00		      .byte.b	%00000000
   2898  73d1		       00		      .byte.b	%00000000
   2899  73d2		       00		      .byte.b	%00000000
   2900  73d3		       00		      .byte.b	%00000000
   2901  73d4		       00		      .byte.b	%00000000
   2902  73d5		       00		      .byte.b	%00000000
   2903  73d6		       00		      .byte.b	%00000000
   2904  73d7		       00		      .byte.b	%00000000
   2905  73d8		       00		      .byte.b	%00000000
   2906  73d9		       00		      .byte.b	%00000000
   2907  73da		       00		      .byte.b	%00000000
   2908  73db		       00		      .byte.b	%00000000
   2909  73dc		       00		      .byte.b	%00000000
   2910  73dd		       00		      .byte.b	%00000000
   2911  73de		       00		      .byte.b	%00000000
   2912  73df		       00		      .byte.b	%00000000
   2913  73e0		       00		      .byte.b	%00000000
   2914  73e1		       00		      .byte.b	%00000000
   2915  73e2		       00		      .byte.b	%00000000
   2916  73e3		       00		      .byte.b	%00000000
   2917  73e4		       00		      .byte.b	%00000000
   2918  73e5		       00		      .byte.b	%00000000
   2919  73e6		       00		      .byte.b	%00000000
   2920  73e7		       00		      .byte.b	%00000000
   2921  73e8		       00		      .byte.b	%00000000
   2922  73e9		       00		      .byte.b	%00000000
   2923  73ea		       00		      .byte.b	%00000000
   2924  73eb		       00		      .byte.b	%00000000
   2925  73ec		       00		      .byte.b	%00000000
   2926  73ed		       00		      .byte.b	%00000000
   2927  73ee		       00		      .byte.b	%00000000
   2928  73ef		       00		      .byte.b	%00000000
   2929  73f0		       00		      .byte.b	%00000000
   2930  73f1		       00		      .byte.b	%00000000
   2931  73f2		       00		      .byte.b	%00000000
   2932  73f3		       00		      .byte.b	%00000000
   2933  73f4		       00		      .byte.b	%00000000
   2934  73f5		       00		      .byte.b	%00000000
   2935  73f6		       00		      .byte.b	%00000000
   2936  73f7		       00		      .byte.b	%00000000
   2937  73f8		       00		      .byte.b	%00000000
   2938  73f9		       00		      .byte.b	%00000000
   2939  73fa		       00		      .byte.b	%00000000
   2940  73fb		       00		      .byte.b	%00000000
   2941  73fc		       00		      .byte.b	%00000000
   2942  73fd		       00		      .byte.b	%00000000
   2943  73fe		       00		      .byte.b	%00000000
   2944  73ff		       00		      .byte.b	%00000000
   2945  7400		       00		      .byte.b	%00000000
   2946  7401		       00		      .byte.b	%00000000
   2947  7402		       00		      .byte.b	%00000000
   2948  7403		       00		      .byte.b	%00000000
   2949  7404		       00		      .byte.b	%00000000
   2950  7405		       00		      .byte.b	%00000000
   2951  7406		       00		      .byte.b	%00000000
   2952  7407		       00		      .byte.b	%00000000
   2953  7408		       00		      .byte.b	%00000000
   2954  7409		       00		      .byte.b	%00000000
   2955  740a		       00		      .byte.b	%00000000
   2956  740b		       00		      .byte.b	%00000000
   2957  740c		       00		      .byte.b	%00000000
   2958  740d		       00		      .byte.b	%00000000
   2959  740e		       00		      .byte.b	%00000000
   2960  740f		       00		      .byte.b	%00000000
   2961  7410		       00		      .byte.b	%00000000
   2962  7411		       00		      .byte.b	%00000000
   2963  7412		       00		      .byte.b	%00000000
   2964  7413		       00		      .byte.b	%00000000
   2965  7414		       00		      .byte.b	%00000000
   2966  7415		       00		      .byte.b	%00000000
   2967  7416		       00		      .byte.b	%00000000
   2968  7417		       00		      .byte.b	%00000000
   2969  7418		       00		      .byte.b	%00000000
   2970  7419		       00		      .byte.b	%00000000
   2971  741a		       00		      .byte.b	%00000000
   2972  741b		       00		      .byte.b	%00000000
   2973  741c		       00		      .byte.b	%00000000
   2974  741d		       00		      .byte.b	%00000000
   2975  741e		       00		      .byte.b	%00000000
   2976  741f		       00		      .byte.b	%00000000
   2977  7420		       00		      .byte.b	%00000000
   2978  7421		       00		      .byte.b	%00000000
   2979  7422		       00		      .byte.b	%00000000
   2980  7423		       00		      .byte.b	%00000000
   2981  7424		       00		      .byte.b	%00000000
   2982  7425		       00		      .byte.b	%00000000
   2983  7426		       00		      .byte.b	%00000000
   2984  7427		       00		      .byte.b	%00000000
   2985  7428		       00		      .byte.b	%00000000
   2986  7429		       00		      .byte.b	%00000000
   2987  742a		       00		      .byte.b	%00000000
   2988  742b		       00		      .byte.b	%00000000
   2989  742c		       00		      .byte.b	%00000000
   2990  742d		       00		      .byte.b	%00000000
   2991  742e		       00		      .byte.b	%00000000
   2992  742f		       00		      .byte.b	%00000000
   2993  7430		       00		      .byte.b	%00000000
   2994  7431		       00		      .byte.b	%00000000
   2995  7432		       00		      .byte.b	%00000000
   2996  7433		       00		      .byte.b	%00000000
   2997  7434		       00		      .byte.b	%00000000
   2998  7435		       00		      .byte.b	%00000000
   2999  7436		       00		      .byte.b	%00000000
   3000  7437		       00		      .byte.b	%00000000
   3001  7438		       00		      .byte.b	%00000000
   3002  7439		       00		      .byte.b	%00000000
   3003  743a		       00		      .byte.b	%00000000
   3004  743b		       00		      .byte.b	%00000000
   3005  743c		       00		      .byte.b	%00000000
   3006  743d		       00		      .byte.b	%00000000
   3007  743e		       00		      .byte.b	%00000000
   3008  743f		       00		      .byte.b	%00000000
   3009  7440		       00		      .byte.b	%00000000
   3010  7441		       00		      .byte.b	%00000000
   3011  7442		       00		      .byte.b	%00000000
   3012  7443		       00		      .byte.b	%00000000
   3013  7444		       00		      .byte.b	%00000000
   3014  7445		       00		      .byte.b	%00000000
   3015  7446		       00		      .byte.b	%00000000
   3016  7447		       00		      .byte.b	%00000000
   3017  7448		       00		      .byte.b	%00000000
   3018  7449		       00		      .byte.b	%00000000
   3019  744a		       00		      .byte.b	%00000000
   3020  744b		       00		      .byte.b	%00000000
   3021  744c		       00		      .byte.b	%00000000
   3022  744d		       00		      .byte.b	%00000000
   3023  744e		       00		      .byte.b	%00000000
   3024  744f		       00		      .byte.b	%00000000
   3025  7450		       00		      .byte.b	%00000000
   3026  7451		       00		      .byte.b	%00000000
   3027  7452		       00		      .byte.b	%00000000
   3028  7453		       00		      .byte.b	%00000000
   3029  7454		       00		      .byte.b	%00000000
   3030  7455		       01		      .byte.b	%00000001
   3031  7456		       00		      .byte.b	%00000000
   3032  7457		       00		      .byte.b	%00000000
   3033  7458		       01		      .byte.b	%00000001
   3034  7459		       00		      .byte.b	%00000000
   3035  745a		       01		      .byte.b	%00000001
   3036  745b		       00		      .byte.b	%00000000
   3037  745c		       00		      .byte.b	%00000000
   3038  745d		       01		      .byte.b	%00000001
   3039  745e		       00		      .byte.b	%00000000
   3040  745f		       00		      .byte.b	%00000000
   3041  7460		       01		      .byte.b	%00000001
   3042  7461		       00		      .byte.b	%00000000
   3043  7462		       31		      .byte.b	%00110001
   3044  7463		       51		      .byte.b	%01010001
   3045  7464		       50		      .byte.b	%01010000
   3046  7465		       52		      .byte.b	%01010010
   3047  7466		       98		      .byte.b	%10011000
   3048  7467		       0a		      .byte.b	%00001010
   3049  7468				   playfieldcolorL0134
   3050  7468		       00		      .byte.b	_00
   3051  7469		       00		      .byte.b	_00
   3052  746a		       00		      .byte.b	_00
   3053  746b		       00		      .byte.b	_00
   3054  746c		       00		      .byte.b	_00
   3055  746d		       00		      .byte.b	_00
   3056  746e		       00		      .byte.b	_00
   3057  746f		       00		      .byte.b	_00
   3058  7470		       00		      .byte.b	_00
   3059  7471		       00		      .byte.b	_00
   3060  7472		       00		      .byte.b	_00
   3061  7473		       00		      .byte.b	_00
   3062  7474		       00		      .byte.b	_00
   3063  7475		       00		      .byte.b	_00
   3064  7476		       00		      .byte.b	_00
   3065  7477		       00		      .byte.b	_00
   3066  7478		       00		      .byte.b	_00
   3067  7479		       00		      .byte.b	_00
   3068  747a		       00		      .byte.b	_00
   3069  747b		       00		      .byte.b	_00
   3070  747c		       00		      .byte.b	_00
   3071  747d		       00		      .byte.b	_00
   3072  747e		       00		      .byte.b	_00
   3073  747f		       00		      .byte.b	_00
   3074  7480		       00		      .byte.b	_00
   3075  7481		       00		      .byte.b	_00
   3076  7482		       00		      .byte.b	_00
   3077  7483		       00		      .byte.b	_00
   3078  7484		       00		      .byte.b	_00
   3079  7485		       00		      .byte.b	_00
   3080  7486		       00		      .byte.b	_00
   3081  7487		       00		      .byte.b	_00
   3082  7488		       00		      .byte.b	_00
   3083  7489		       00		      .byte.b	_00
   3084  748a		       00		      .byte.b	_00
   3085  748b		       00		      .byte.b	_00
   3086  748c		       00		      .byte.b	_00
   3087  748d		       00		      .byte.b	_00
   3088  748e		       00		      .byte.b	_00
   3089  748f		       00		      .byte.b	_00
   3090  7490		       00		      .byte.b	_00
   3091  7491		       00		      .byte.b	_00
   3092  7492		       00		      .byte.b	_00
   3093  7493		       00		      .byte.b	_00
   3094  7494		       00		      .byte.b	_00
   3095  7495		       00		      .byte.b	_00
   3096  7496		       00		      .byte.b	_00
   3097  7497		       00		      .byte.b	_00
   3098  7498		       00		      .byte.b	_00
   3099  7499		       00		      .byte.b	_00
   3100  749a		       00		      .byte.b	_00
   3101  749b		       00		      .byte.b	_00
   3102  749c		       00		      .byte.b	_00
   3103  749d		       00		      .byte.b	_00
   3104  749e		       00		      .byte.b	_00
   3105  749f		       00		      .byte.b	_00
   3106  74a0		       00		      .byte.b	_00
   3107  74a1		       00		      .byte.b	_00
   3108  74a2		       00		      .byte.b	_00
   3109  74a3		       00		      .byte.b	_00
   3110  74a4		       00		      .byte.b	_00
   3111  74a5		       00		      .byte.b	_00
   3112  74a6		       00		      .byte.b	_00
   3113  74a7		       00		      .byte.b	_00
   3114  74a8		       00		      .byte.b	_00
   3115  74a9		       00		      .byte.b	_00
   3116  74aa		       00		      .byte.b	_00
   3117  74ab		       00		      .byte.b	_00
   3118  74ac		       00		      .byte.b	_00
   3119  74ad		       00		      .byte.b	_00
   3120  74ae		       00		      .byte.b	_00
   3121  74af		       00		      .byte.b	_00
   3122  74b0		       00		      .byte.b	_00
   3123  74b1		       00		      .byte.b	_00
   3124  74b2		       00		      .byte.b	_00
   3125  74b3		       00		      .byte.b	_00
   3126  74b4		       00		      .byte.b	_00
   3127  74b5		       00		      .byte.b	_00
   3128  74b6		       00		      .byte.b	_00
   3129  74b7		       00		      .byte.b	_00
   3130  74b8		       00		      .byte.b	_00
   3131  74b9		       00		      .byte.b	_00
   3132  74ba		       00		      .byte.b	_00
   3133  74bb		       00		      .byte.b	_00
   3134  74bc		       00		      .byte.b	_00
   3135  74bd		       00		      .byte.b	_00
   3136  74be		       00		      .byte.b	_00
   3137  74bf		       00		      .byte.b	_00
   3138  74c0				   backgroundcolorL0135
   3139  74c0		       0e		      .byte.b	_0E
   3140  74c1		       0e		      .byte.b	_0E
   3141  74c2		       0e		      .byte.b	_0E
   3142  74c3		       0e		      .byte.b	_0E
   3143  74c4		       0e		      .byte.b	_0E
   3144  74c5		       0e		      .byte.b	_0E
   3145  74c6		       0e		      .byte.b	_0E
   3146  74c7		       0e		      .byte.b	_0E
   3147  74c8		       0e		      .byte.b	_0E
   3148  74c9		       0e		      .byte.b	_0E
   3149  74ca		       0e		      .byte.b	_0E
   3150  74cb		       0e		      .byte.b	_0E
   3151  74cc		       0e		      .byte.b	_0E
   3152  74cd		       0e		      .byte.b	_0E
   3153  74ce		       0e		      .byte.b	_0E
   3154  74cf		       0e		      .byte.b	_0E
   3155  74d0		       0e		      .byte.b	_0E
   3156  74d1		       0e		      .byte.b	_0E
   3157  74d2		       0e		      .byte.b	_0E
   3158  74d3		       0e		      .byte.b	_0E
   3159  74d4		       0e		      .byte.b	_0E
   3160  74d5		       0e		      .byte.b	_0E
   3161  74d6		       0e		      .byte.b	_0E
   3162  74d7		       0e		      .byte.b	_0E
   3163  74d8		       0e		      .byte.b	_0E
   3164  74d9		       0e		      .byte.b	_0E
   3165  74da		       0e		      .byte.b	_0E
   3166  74db		       0e		      .byte.b	_0E
   3167  74dc		       0e		      .byte.b	_0E
   3168  74dd		       0e		      .byte.b	_0E
   3169  74de		       0e		      .byte.b	_0E
   3170  74df		       0e		      .byte.b	_0E
   3171  74e0		       0e		      .byte.b	_0E
   3172  74e1		       0e		      .byte.b	_0E
   3173  74e2		       0e		      .byte.b	_0E
   3174  74e3		       0e		      .byte.b	_0E
   3175  74e4		       0e		      .byte.b	_0E
   3176  74e5		       0e		      .byte.b	_0E
   3177  74e6		       0e		      .byte.b	_0E
   3178  74e7		       0e		      .byte.b	_0E
   3179  74e8		       0e		      .byte.b	_0E
   3180  74e9		       0e		      .byte.b	_0E
   3181  74ea		       0e		      .byte.b	_0E
   3182  74eb		       0e		      .byte.b	_0E
   3183  74ec		       0e		      .byte.b	_0E
   3184  74ed		       0e		      .byte.b	_0E
   3185  74ee		       0e		      .byte.b	_0E
   3186  74ef		       0e		      .byte.b	_0E
   3187  74f0		       0e		      .byte.b	_0E
   3188  74f1		       0e		      .byte.b	_0E
   3189  74f2		       0e		      .byte.b	_0E
   3190  74f3		       0e		      .byte.b	_0E
   3191  74f4		       0e		      .byte.b	_0E
   3192  74f5		       0e		      .byte.b	_0E
   3193  74f6		       0e		      .byte.b	_0E
   3194  74f7		       0e		      .byte.b	_0E
   3195  74f8		       0e		      .byte.b	_0E
   3196  74f9		       0e		      .byte.b	_0E
   3197  74fa		       0e		      .byte.b	_0E
   3198  74fb		       0e		      .byte.b	_0E
   3199  74fc		       0e		      .byte.b	_0E
   3200  74fd		       0e		      .byte.b	_0E
   3201  74fe		       0e		      .byte.b	_0E
   3202  74ff		       0e		      .byte.b	_0E
   3203  7500		       0e		      .byte.b	_0E
   3204  7501		       0e		      .byte.b	_0E
   3205  7502		       0e		      .byte.b	_0E
   3206  7503		       0e		      .byte.b	_0E
   3207  7504		       0e		      .byte.b	_0E
   3208  7505		       0e		      .byte.b	_0E
   3209  7506		       0e		      .byte.b	_0E
   3210  7507		       0e		      .byte.b	_0E
   3211  7508		       0e		      .byte.b	_0E
   3212  7509		       0e		      .byte.b	_0E
   3213  750a		       0e		      .byte.b	_0E
   3214  750b		       0e		      .byte.b	_0E
   3215  750c		       0e		      .byte.b	_0E
   3216  750d		       0e		      .byte.b	_0E
   3217  750e		       0e		      .byte.b	_0E
   3218  750f		       0e		      .byte.b	_0E
   3219  7510		       0e		      .byte.b	_0E
   3220  7511		       0e		      .byte.b	_0E
   3221  7512		       0e		      .byte.b	_0E
   3222  7513		       0e		      .byte.b	_0E
   3223  7514		       0e		      .byte.b	_0E
   3224  7515		       0e		      .byte.b	_0E
   3225  7516		       0e		      .byte.b	_0E
   3226  7517		       0e		      .byte.b	_0E
   3227  7518					      if	ECHOFIRST
      2748 bytes of ROM space left in graphics bank
   3228  7518					      echo	"    ",[(DPC_graphics_end - *)]d , "bytes of ROM space left in graphics bank")
   3229  7518					      endif
   3230  7518		       00 01	   ECHOFIRST  =	1
   3231  7518
   3232  7518
   3233  7518							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3234  7518
   3235  7fd4					      ORG	$7FF4-bscode_length
   3236  7fd4					      RORG	$DFF4-bscode_length
   3237  7fd4				   DPC_graphics_end
   3238  7fd4
   3239  7fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3240  7fd4
   3241  7fd4							; every bank has this stuff at the same place
   3242  7fd4							; this code can switch to/from any bank at any entry point
   3243  7fd4							; and can preserve register values
   3244  7fd4							; note: lines not starting with a space are not placed in all banks
   3245  7fd4							;
   3246  7fd4							; line below tells the compiler how long this is - do not remove
   3247  7fd4							;size=32
   3248  7fd4
   3249  7fd4				   begin_bscode
   3250  7fd4		       a2 ff		      ldx	#$ff
   3251  7fd6					      ifconst	FASTFETCH	; using DPC+
   3252  7fd6		       8e 58 10 	      stx	FASTFETCH
   3253  7fd9					      endif
   3254  7fd9		       9a		      txs
   3255  7fda				  -	      if	bankswitch == 64
   3256  7fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   3257  7fda					      else
   3258  7fda		       a9 18		      lda	#>(start-1)
   3259  7fdc					      endif
   3260  7fdc		       48		      pha
   3261  7fdd		       a9 eb		      lda	#<(start-1)
   3262  7fdf		       48		      pha
   3263  7fe0
   3264  7fe0				   BS_return
   3265  7fe0		       48		      pha
   3266  7fe1		       8a		      txa
   3267  7fe2		       48		      pha
   3268  7fe3		       ba		      tsx
   3269  7fe4
   3270  7fe4					      if	bankswitch != 64
   3271  7fe4		       b5 04		      lda	4,x	; get high byte of return address
   3272  7fe6
   3273  7fe6		       2a		      rol
   3274  7fe7		       2a		      rol
   3275  7fe8		       2a		      rol
   3276  7fe9		       2a		      rol
   3277  7fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   3278  7fec		       aa		      tax
   3279  7fed		       e8		      inx
   3280  7fee				  -	      else
   3281  7fee				  -	      lda	4,x	; get high byte of return address
   3282  7fee				  -	      tay
   3283  7fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   3284  7fee				  -	      sta	4,x
   3285  7fee				  -	      tya
   3286  7fee				  -	      lsr
   3287  7fee				  -	      lsr
   3288  7fee				  -	      lsr
   3289  7fee				  -	      lsr
   3290  7fee				  -	      tax
   3291  7fee				  -	      inx
   3292  7fee					      endif
   3293  7fee
   3294  7fee				   BS_jsr
   3295  7fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   3296  7ff1		       68		      pla
   3297  7ff2		       aa		      tax
   3298  7ff3		       68		      pla
   3299  7ff4		       60		      rts
   3300  7ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   3301  7ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   3302  7ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   3303  7ff5					      endif
   3304  7ff5							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3305  7ff5
   3306  8000					      org	$8000
   3307  8000					      rorg	$1000
   3308  8000							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3309  8000
   3310  8000							; 1K Frequency Table.
   3311  8000							; Fred Quimby, Darrell Spice Jr, Chris Walton 2010
   3312  8000							;
   3313  8000							; The 1K Frequency Table can contain up to 256 frequency values
   3314  8000							;
   3315  8000							; Table entries are defined as 2^32*freq/20000
   3316  8000							;
   3317  8000							; If User ARM code is being used, then the last 512 bytes of the frequency
   3318  8000							; table will no longer be available, reducing the number of frequencies you can
   3319  8000							; use to 128.
   3320  8000
   3321  8000							; piano key frequencies (s = sharp)
   3322  8000
   3323  8000				   .freq_table_start
   3324  8000
   3325  8000		       00 00 00 00	      DC.L	0
   3326  8000		       00 01	   A0	      =	(* & $3ff)/4
   3327  8004		       ac 1c 5a 00	      DC.L	5905580
   3328  8008
   3329  8008		       00 02	   A0s	      =	(* & $3ff)/4
   3330  8008		       68 78 5f 00	      DC.L	6256744
   3331  800c
   3332  800c		       00 03	   B0	      =	(* & $3ff)/4
   3333  800c		       b5 25 65 00	      DC.L	6628789
   3334  8010
   3335  8010		       00 04	   C1	      =	(* & $3ff)/4
   3336  8010		       6e 29 6b 00	      DC.L	7022958
   3337  8014
   3338  8014		       00 05	   C1s	      =	(* & $3ff)/4
   3339  8014		       b5 88 71 00	      DC.L	7440565
   3340  8018
   3341  8018		       00 06	   D1	      =	(* & $3ff)/4
   3342  8018		       fc 48 78 00	      DC.L	7883004
   3343  801c
   3344  801c		       00 07	   D1s	      =	(* & $3ff)/4
   3345  801c		       07 70 7f 00	      DC.L	8351751
   3346  8020
   3347  8020		       00 08	   E1	      =	(* & $3ff)/4
   3348  8020		       f4 03 87 00	      DC.L	8848372
   3349  8024
   3350  8024		       00 09	   F1	      =	(* & $3ff)/4
   3351  8024		       3c 0b 8f 00	      DC.L	9374524
   3352  8028
   3353  8028		       00 0a	   F1s	      =	(* & $3ff)/4
   3354  8028		       ba 8c 97 00	      DC.L	9931962
   3355  802c
   3356  802c		       00 0b	   G1	      =	(* & $3ff)/4
   3357  802c		       b3 8f a0 00	      DC.L	10522547
   3358  8030
   3359  8030		       00 0c	   G1s	      =	(* & $3ff)/4
   3360  8030		       db 1b aa 00	      DC.L	11148251
   3361  8034
   3362  8034		       00 0d	   A1	      =	(* & $3ff)/4
   3363  8034		       58 39 b4 00	      DC.L	11811160
   3364  8038
   3365  8038		       00 0e	   A1s	      =	(* & $3ff)/4
   3366  8038		       d0 f0 be 00	      DC.L	12513488
   3367  803c
   3368  803c		       00 0f	   B1	      =	(* & $3ff)/4
   3369  803c		       6b 4b ca 00	      DC.L	13257579
   3370  8040
   3371  8040		       00 10	   C2	      =	(* & $3ff)/4
   3372  8040		       dc 52 d6 00	      DC.L	14045916
   3373  8044
   3374  8044		       00 11	   C2s	      =	(* & $3ff)/4
   3375  8044		       69 11 e3 00	      DC.L	14881129
   3376  8048
   3377  8048		       00 12	   D2	      =	(* & $3ff)/4
   3378  8048		       f7 91 f0 00	      DC.L	15766007
   3379  804c
   3380  804c		       00 13	   D2s	      =	(* & $3ff)/4
   3381  804c		       0f e0 fe 00	      DC.L	16703503
   3382  8050
   3383  8050		       00 14	   E2	      =	(* & $3ff)/4
   3384  8050		       e9 07 0e 01	      DC.L	17696745
   3385  8054
   3386  8054		       00 15	   F2	      =	(* & $3ff)/4
   3387  8054		       78 16 1e 01	      DC.L	18749048
   3388  8058
   3389  8058		       00 16	   F2s	      =	(* & $3ff)/4
   3390  8058		       74 19 2f 01	      DC.L	19863924
   3391  805c
   3392  805c		       00 17	   G2	      =	(* & $3ff)/4
   3393  805c		       67 1f 41 01	      DC.L	21045095
   3394  8060
   3395  8060		       00 18	   G2s	      =	(* & $3ff)/4
   3396  8060		       b5 37 54 01	      DC.L	22296501
   3397  8064
   3398  8064		       00 19	   A2	      =	(* & $3ff)/4
   3399  8064		       b0 72 68 01	      DC.L	23622320
   3400  8068
   3401  8068		       00 1a	   A2s	      =	(* & $3ff)/4
   3402  8068		       a0 e1 7d 01	      DC.L	25026976
   3403  806c
   3404  806c		       00 1b	   B2	      =	(* & $3ff)/4
   3405  806c		       d6 96 94 01	      DC.L	26515158
   3406  8070
   3407  8070		       00 1c	   C3	      =	(* & $3ff)/4
   3408  8070		       b7 a5 ac 01	      DC.L	28091831
   3409  8074
   3410  8074		       00 1d	   C3s	      =	(* & $3ff)/4
   3411  8074		       d2 22 c6 01	      DC.L	29762258
   3412  8078
   3413  8078		       00 1e	   D3	      =	(* & $3ff)/4
   3414  8078		       ee 23 e1 01	      DC.L	31532014
   3415  807c
   3416  807c		       00 1f	   D3s	      =	(* & $3ff)/4
   3417  807c		       1d c0 fd 01	      DC.L	33407005
   3418  8080
   3419  8080		       00 20	   E3	      =	(* & $3ff)/4
   3420  8080		       d1 0f 1c 02	      DC.L	35393489
   3421  8084
   3422  8084		       00 21	   F3	      =	(* & $3ff)/4
   3423  8084		       f0 2c 3c 02	      DC.L	37498096
   3424  8088
   3425  8088		       00 22	   F3s	      =	(* & $3ff)/4
   3426  8088		       e9 32 5e 02	      DC.L	39727849
   3427  808c
   3428  808c		       00 23	   G3	      =	(* & $3ff)/4
   3429  808c		       cd 3e 82 02	      DC.L	42090189
   3430  8090
   3431  8090		       00 24	   G3s	      =	(* & $3ff)/4
   3432  8090		       6a 6f a8 02	      DC.L	44593002
   3433  8094
   3434  8094		       00 25	   A3	      =	(* & $3ff)/4
   3435  8094		       60 e5 d0 02	      DC.L	47244640
   3436  8098
   3437  8098		       00 26	   A3s	      =	(* & $3ff)/4
   3438  8098		       41 c3 fb 02	      DC.L	50053953
   3439  809c
   3440  809c		       00 27	   B3	      =	(* & $3ff)/4
   3441  809c		       ac 2d 29 03	      DC.L	53030316
   3442  80a0
   3443  80a0		       00 28	   C4	      =	(* & $3ff)/4
   3444  80a0		       6e 4b 59 03	      DC.L	56183662
   3445  80a4
   3446  80a4		       00 29	   C4s	      =	(* & $3ff)/4
   3447  80a4		       a5 45 8c 03	      DC.L	59524517
   3448  80a8
   3449  80a8		       00 2a	   D4	      =	(* & $3ff)/4
   3450  80a8		       dd 47 c2 03	      DC.L	63064029
   3451  80ac
   3452  80ac		       00 2b	   D4s	      =	(* & $3ff)/4
   3453  80ac		       3b 80 fb 03	      DC.L	66814011
   3454  80b0
   3455  80b0		       00 2c	   E4	      =	(* & $3ff)/4
   3456  80b0		       a3 1f 38 04	      DC.L	70786979
   3457  80b4
   3458  80b4		       00 2d	   F4	      =	(* & $3ff)/4
   3459  80b4		       e0 59 78 04	      DC.L	74996192
   3460  80b8
   3461  80b8		       00 2e	   F4s	      =	(* & $3ff)/4
   3462  80b8		       d1 65 bc 04	      DC.L	79455697
   3463  80bc
   3464  80bc		       00 2f	   G4	      =	(* & $3ff)/4
   3465  80bc		       9b 7d 04 05	      DC.L	84180379
   3466  80c0
   3467  80c0		       00 30	   G4s	      =	(* & $3ff)/4
   3468  80c0		       d5 de 50 05	      DC.L	89186005
   3469  80c4
   3470  80c4		       00 31	   A4	      =	(* & $3ff)/4
   3471  80c4		       c1 ca a1 05	      DC.L	94489281
   3472  80c8
   3473  80c8		       00 32	   A4s	      =	(* & $3ff)/4
   3474  80c8		       82 86 f7 05	      DC.L	100107906
   3475  80cc
   3476  80cc		       00 33	   B4	      =	(* & $3ff)/4
   3477  80cc		       57 5b 52 06	      DC.L	106060631
   3478  80d0
   3479  80d0		       00 34	   C5	      =	(* & $3ff)/4
   3480  80d0		       dd 96 b2 06	      DC.L	112367325
   3481  80d4
   3482  80d4		       00 35	   C5s	      =	(* & $3ff)/4
   3483  80d4		       4a 8b 18 07	      DC.L	119049034
   3484  80d8
   3485  80d8		       00 36	   D5	      =	(* & $3ff)/4
   3486  80d8		       b9 8f 84 07	      DC.L	126128057
   3487  80dc
   3488  80dc		       00 37	   D5s	      =	(* & $3ff)/4
   3489  80dc		       76 00 f7 07	      DC.L	133628022
   3490  80e0
   3491  80e0		       00 38	   E5	      =	(* & $3ff)/4
   3492  80e0		       46 3f 70 08	      DC.L	141573958
   3493  80e4
   3494  80e4		       00 39	   F5	      =	(* & $3ff)/4
   3495  80e4		       bf b3 f0 08	      DC.L	149992383
   3496  80e8
   3497  80e8		       00 3a	   F5s	      =	(* & $3ff)/4
   3498  80e8		       a3 cb 78 09	      DC.L	158911395
   3499  80ec
   3500  80ec		       00 3b	   G5	      =	(* & $3ff)/4
   3501  80ec		       36 fb 08 0a	      DC.L	168360758
   3502  80f0
   3503  80f0		       00 3c	   G5s	      =	(* & $3ff)/4
   3504  80f0		       a9 bd a1 0a	      DC.L	178372009
   3505  80f4
   3506  80f4		       00 3d	   A5	      =	(* & $3ff)/4
   3507  80f4		       81 95 43 0b	      DC.L	188978561
   3508  80f8
   3509  80f8		       00 3e	   A5s	      =	(* & $3ff)/4
   3510  80f8		       03 0d ef 0b	      DC.L	200215811
   3511  80fc
   3512  80fc		       00 3f	   B5	      =	(* & $3ff)/4
   3513  80fc		       af b6 a4 0c	      DC.L	212121263
   3514  8100
   3515  8100		       00 40	   C6	      =	(* & $3ff)/4
   3516  8100		       b9 2d 65 0d	      DC.L	224734649
   3517  8104
   3518  8104		       00 41	   C6s	      =	(* & $3ff)/4
   3519  8104		       93 16 31 0e	      DC.L	238098067
   3520  8108
   3521  8108		       00 42	   D6	      =	(* & $3ff)/4
   3522  8108		       73 1f 09 0f	      DC.L	252256115
   3523  810c
   3524  810c		       00 43	   D6s	      =	(* & $3ff)/4
   3525  810c		       ec 00 ee 0f	      DC.L	267256044
   3526  8110
   3527  8110		       00 44	   E6	      =	(* & $3ff)/4
   3528  8110		       8b 7e e0 10	      DC.L	283147915
   3529  8114
   3530  8114		       00 45	   F6	      =	(* & $3ff)/4
   3531  8114		       7f 67 e1 11	      DC.L	299984767
   3532  8118
   3533  8118		       00 46	   F6s	      =	(* & $3ff)/4
   3534  8118		       45 97 f1 12	      DC.L	317822789
   3535  811c
   3536  811c		       00 47	   G6	      =	(* & $3ff)/4
   3537  811c		       6c f6 11 14	      DC.L	336721516
   3538  8120
   3539  8120		       00 48	   G6s	      =	(* & $3ff)/4
   3540  8120		       53 7b 43 15	      DC.L	356744019
   3541  8124
   3542  8124		       00 49	   A6	      =	(* & $3ff)/4
   3543  8124		       02 2b 87 16	      DC.L	377957122
   3544  8128
   3545  8128		       00 4a	   A6s	      =	(* & $3ff)/4
   3546  8128		       06 1a de 17	      DC.L	400431622
   3547  812c
   3548  812c		       00 4b	   B6	      =	(* & $3ff)/4
   3549  812c		       5d 6d 49 19	      DC.L	424242525
   3550  8130
   3551  8130		       00 4c	   C7	      =	(* & $3ff)/4
   3552  8130		       73 5b ca 1a	      DC.L	449469299
   3553  8134
   3554  8134		       00 4d	   C7s	      =	(* & $3ff)/4
   3555  8134		       26 2d 62 1c	      DC.L	476196134
   3556  8138
   3557  8138		       00 4e	   D7	      =	(* & $3ff)/4
   3558  8138		       e6 3e 12 1e	      DC.L	504512230
   3559  813c
   3560  813c		       00 4f	   D7s	      =	(* & $3ff)/4
   3561  813c		       d8 01 dc 1f	      DC.L	534512088
   3562  8140
   3563  8140		       00 50	   E7	      =	(* & $3ff)/4
   3564  8140		       17 fd c0 21	      DC.L	566295831
   3565  8144
   3566  8144		       00 51	   F7	      =	(* & $3ff)/4
   3567  8144		       fd ce c2 23	      DC.L	599969533
   3568  8148
   3569  8148		       00 52	   F7s	      =	(* & $3ff)/4
   3570  8148		       8a 2e e3 25	      DC.L	635645578
   3571  814c
   3572  814c		       00 53	   G7	      =	(* & $3ff)/4
   3573  814c		       d7 ec 23 28	      DC.L	673443031
   3574  8150
   3575  8150		       00 54	   G7s	      =	(* & $3ff)/4
   3576  8150		       a6 f6 86 2a	      DC.L	713488038
   3577  8154
   3578  8154		       00 55	   A7	      =	(* & $3ff)/4
   3579  8154		       04 56 0e 2d	      DC.L	755914244
   3580  8158
   3581  8158		       00 56	   A7s	      =	(* & $3ff)/4
   3582  8158		       0c 34 bc 2f	      DC.L	800863244
   3583  815c
   3584  815c		       00 57	   B7	      =	(* & $3ff)/4
   3585  815c		       bb da 92 32	      DC.L	848485051
   3586  8160
   3587  8160		       00 58	   C8	      =	(* & $3ff)/4
   3588  8160		       e5 b6 94 35	      DC.L	898938597
   3589  8164
   3590  8164							;values for 89-255 may go here 
   3591  8164
   3592  8164					      if	(* <= $1400)
   3593  8164		       00 00 00 00*	      ds	($1400-*)	; pad out remaining space in frequency table
   3594  8400				  -	      else
   3595  8400				  -	      echo	"FATAL ERROR - Frequency table exceeds 1K"
   3596  8400				  -	      err
   3597  8400					      endif
