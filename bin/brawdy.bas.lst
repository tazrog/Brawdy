------- FILE c:\Users\tazrog\BrawdyBAS\brawdy.bas.asm LEVEL 1 PASS 3
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  8400 ????				      include	"vcs.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????						; VCS.H
      4  8400 ????						; Version 1.05, 13/November/2003
      5  8400 ????
      6  8400 ????	       00 69	   VERSION_VCS =	105
      7  8400 ????
      8  8400 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  8400 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  8400 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  8400 ????						;
     12  8400 ????						; This file defines hardware registers and memory mapping for the
     13  8400 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  8400 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  8400 ????						; available at at http://www.atari2600.org/dasm
     16  8400 ????						;
     17  8400 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  8400 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  8400 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  8400 ????						; with your views.  Please contribute, if you think you can improve this
     21  8400 ????						; file!
     22  8400 ????						;
     23  8400 ????						; Latest Revisions...
     24  8400 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  8400 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  8400 ????						;			    This will allow conditional code to verify VCS.H being
     27  8400 ????						;			    used for code assembly.
     28  8400 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  8400 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  8400 ????						;			 mirrored reading/writing differences.	This is more a 
     31  8400 ????						;			 readability issue, and binary compatibility with disassembled
     32  8400 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  8400 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  8400 ????						;			 which was broken by the use of segments in this file, as
     35  8400 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  8400 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  8400 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  8400 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  8400 ????						;						   it is safe to leave it undefined, and the base address will
     40  8400 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  8400 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  8400 ????						;			  - register definitions are now generated through assignment
     43  8400 ????						;			    in uninitialised segments.	This allows a changeable base
     44  8400 ????						;			    address architecture.
     45  8400 ????						; 1.0	22/MAR/2003		Initial release
     46  8400 ????
     47  8400 ????
     48  8400 ????						;-------------------------------------------------------------------------------
     49  8400 ????
     50  8400 ????						; TIA_BASE_ADDRESS
     51  8400 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  8400 ????						; Normally 0, the base address should (externally, before including this file)
     53  8400 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  8400 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  8400 ????						; < $40 as a bankswitch.
     56  8400 ????
     57  8400 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  8400 ????			  -TIA_BASE_ADDRESS =	0
     59  8400 ????				      ENDIF
     60  8400 ????
     61  8400 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  8400 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  8400 ????						; *OR* by declaring the label before including this file, eg:
     64  8400 ????						; TIA_BASE_ADDRESS = $40
     65  8400 ????						;   include "vcs.h"
     66  8400 ????
     67  8400 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  8400 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  8400 ????						; for the mirrored ROM hardware registers.
     70  8400 ????
     71  8400 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  8400 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  8400 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  8400 ????
     75  8400 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  8400 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  8400 ????				      ENDIF
     78  8400 ????
     79  8400 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  8400 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  8400 ????				      ENDIF
     82  8400 ????
     83  8400 ????						;-------------------------------------------------------------------------------
     84  8400 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  8400 ????				      SEG
    201  8400 ????
    202  8400 ????						; EOF
------- FILE c:\Users\tazrog\BrawdyBAS\brawdy.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  8400 ????				      include	"macro.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????						; MACRO.H
      4  8400 ????						; Version 1.05, 13/NOVEMBER/2003
      5  8400 ????
      6  8400 ????	       00 69	   VERSION_MACRO =	105
      7  8400 ????
      8  8400 ????						;
      9  8400 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  8400 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  8400 ????						;
     12  8400 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  8400 ????						; It is distributed as a companion machine-specific support package
     14  8400 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  8400 ????						; available at at http://www.atari2600.org/dasm
     16  8400 ????						;
     17  8400 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  8400 ????						; contents, or would like to add something, please write to me
     19  8400 ????						; (atari2600@taswegian.com) with your contribution.
     20  8400 ????						;
     21  8400 ????						; Latest Revisions...
     22  8400 ????						;
     23  8400 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  8400 ????						;			    This will allow conditional code to verify MACRO.H being
     25  8400 ????						;			    used for code assembly.
     26  8400 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  8400 ????						;
     28  8400 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  8400 ????						;
     30  8400 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  8400 ????						;			   (standardised macro for vertical synch code)
     32  8400 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  8400 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  8400 ????						; 1.0	22/MAR/2003		Initial release
     35  8400 ????
     36  8400 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  8400 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  8400 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  8400 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  8400 ????						;   registers and require them to be defined first).
     41  8400 ????
     42  8400 ????						; Available macros...
     43  8400 ????						;   SLEEP n		 - sleep for n cycles
     44  8400 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  8400 ????						;   CLEAN_START	 - set machine to known state on startup
     46  8400 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  8400 ????
     48  8400 ????						;-------------------------------------------------------------------------------
     49  8400 ????						; SLEEP duration
     50  8400 ????						; Original author: Thomas Jentzsch
     51  8400 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  8400 ????						; useful for code where precise timing is required.
     53  8400 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  8400 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  8400 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  8400 ????
     57  8400 ????				      MAC	sleep
     58  8400 ????			   .CYCLES    SET	{1}
     59  8400 ????
     60  8400 ????				      IF	.CYCLES < 2
     61  8400 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  8400 ????				      ERR
     63  8400 ????				      ENDIF
     64  8400 ????
     65  8400 ????				      IF	.CYCLES & 1
     66  8400 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  8400 ????				      nop	0
     68  8400 ????				      ELSE
     69  8400 ????				      bit	VSYNC
     70  8400 ????				      ENDIF
     71  8400 ????			   .CYCLES    SET	.CYCLES - 3
     72  8400 ????				      ENDIF
     73  8400 ????
     74  8400 ????				      REPEAT	.CYCLES / 2
     75  8400 ????				      nop
     76  8400 ????				      REPEND
     77  8400 ????				      ENDM		;usage: SLEEP n (n>1)
     78  8400 ????
     79  8400 ????						;-------------------------------------------------------------------------------
     80  8400 ????						; VERTICAL_SYNC
     81  8400 ????						; Original author: Manuel Polik
     82  8400 ????						; Inserts the code required for a proper 3 scannline 
     83  8400 ????						; vertical sync sequence
     84  8400 ????						;
     85  8400 ????						; Note: Alters the accumulator
     86  8400 ????						;
     87  8400 ????						; IN:
     88  8400 ????						; OUT: A = 1
     89  8400 ????
     90  8400 ????				      MAC	vertical_sync
     91  8400 ????				      LDA	#$02	; A = VSYNC enable
     92  8400 ????				      STA	WSYNC	; Finish current line
     93  8400 ????				      STA	VSYNC	; Start vertical sync
     94  8400 ????				      STA	WSYNC	; 1st line vertical sync
     95  8400 ????				      STA	WSYNC	; 2nd line vertical sync
     96  8400 ????				      LSR		; A = VSYNC disable
     97  8400 ????				      STA	WSYNC	; 3rd line vertical sync
     98  8400 ????				      STA	VSYNC	; Stop vertical sync
     99  8400 ????				      ENDM
    100  8400 ????
    101  8400 ????						;-------------------------------------------------------------------------------
    102  8400 ????						; CLEAN_START
    103  8400 ????						; Original author: Andrew Davie
    104  8400 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  8400 ????						; Sets stack pointer to $FF, and all registers to 0
    106  8400 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  8400 ????						; Use as very first section of code on boot (ie: at reset)
    108  8400 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  8400 ????
    110  8400 ????				      MAC	clean_start
    111  8400 ????				      sei
    112  8400 ????				      cld
    113  8400 ????
    114  8400 ????				      ldx	#0
    115  8400 ????				      txa
    116  8400 ????				      tay
    117  8400 ????			   .CLEAR_STACK dex
    118  8400 ????				      txs
    119  8400 ????				      pha
    120  8400 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  8400 ????
    122  8400 ????				      ENDM
    123  8400 ????
    124  8400 ????						;-------------------------------------------------------
    125  8400 ????						; SET_POINTER
    126  8400 ????						; Original author: Manuel Rotschkar
    127  8400 ????						;
    128  8400 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  8400 ????						;
    130  8400 ????						; Usage: SET_POINTER pointer, address
    131  8400 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  8400 ????						;
    133  8400 ????						; Note: Alters the accumulator, NZ flags
    134  8400 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  8400 ????						; IN 2: absolute address
    136  8400 ????
    137  8400 ????				      MAC	set_pointer
    138  8400 ????			   .POINTER   SET	{1}
    139  8400 ????			   .ADDRESS   SET	{2}
    140  8400 ????
    141  8400 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  8400 ????				      STA	.POINTER	; Store in pointer
    143  8400 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  8400 ????				      STA	.POINTER+1	; Store in pointer+1
    145  8400 ????
    146  8400 ????				      ENDM
    147  8400 ????
    148  8400 ????						; EOF
------- FILE c:\Users\tazrog\BrawdyBAS\brawdy.bas.asm
------- FILE DPCplus.h LEVEL 2 PASS 3
      0  8400 ????				      include	"DPCplus.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????						; DPCplus.H - Display Processor Chip Plus Definitions
      4  8400 ????						; Chris Walton, Fred Quimby, Darrell Spice 2010
      5  8400 ????						; Version 0.00
      6  8400 ????
      7  8400 ????						; DPC Base Address
      8  8400 ????			  -	      IFNCONST	DPC_BASE_ADDRESS
      9  8400 ????			  -DPC_BASE_ADDRESS =	$1000
     10  8400 ????				      ENDIF
     11  8400 ????
     12  8400 ????						; DPC Read Base
     13  8400 ????			  -	      IFNCONST	DPC_BASE_READ_ADDRESS
     14  8400 ????			  -DPC_BASE_READ_ADDRESS =	DPC_BASE_ADDRESS
     15  8400 ????				      ENDIF
     16  8400 ????
     17  8400 ????						; DPC Write Base
     18  8400 ????			  -	      IFNCONST	DPC_BASE_WRITE_ADDRESS
     19  8400 ????			  -DPC_BASE_WRITE_ADDRESS =	DPC_BASE_ADDRESS+$28
     20  8400 ????				      ENDIF
     21  8400 ????
     22 U1028 ????				      SEG.U	DPC_REGISTERS_READ
     23 U1000					      ORG	DPC_BASE_READ_ADDRESS
     24 U1000
     25 U1000							;****************************************
     26 U1000							; DPC+ Read Registers
     27 U1000							;****************************************
     28 U1000							;
     29 U1000							;----------------------------------------
     30 U1000							; Random Numbers
     31 U1000							;----------------------------------------
     32 U1000							; DPC+ provides a 32 bit LFSR (Linear feedback shift register)
     33 U1000							; which is used as a random number generator.	Each individual byte of the
     34 U1000							; random number will return values from 0-255.  The random numbers will follow
     35 U1000							; an exact sequence, so it's best to clock them at least once per frame even if 
     36 U1000							; you don't need the value (this allows the amount of time it takes the user to
     37 U1000							; start the game to select a random starting point in the sequence)
     38 U1000							;----------------------------------------
     39 U1000		       00	   RANDOM0NEXT DS	1	; $00 clock next 32 bit number and returns byte 0
     40 U1001		       00	   RANDOM0PRIOR DS	1	; $01 clock prior 32 bit number and returns byte 0
     41 U1002		       00	   RANDOM1    DS	1	; $02 returns byte 1 of random number w/out clock
     42 U1003		       00	   RANDOM2    DS	1	; $03 returns byte 2 of random number w/out clock
     43 U1004		       00	   RANDOM3    DS	1	; $04 returns byte 3 of random number w/out clock
     44 U1005
     45 U1005							;----------------------------------------
     46 U1005							; Music Fetcher
     47 U1005							;----------------------------------------
     48 U1005							; When generating music, this value must be read every single scanline and
     49 U1005							; stored into AUDV0.
     50 U1005							;----------------------------------------
     51 U1005		       00	   AMPLITUDE  DS	1	; $05
     52 U1006
     53 U1006							;----------------------------------------
     54 U1006							; Reserved
     55 U1006							;----------------------------------------
     56 U1006		       00		      DS	1	; $06
     57 U1007		       00		      DS	1	; $07
     58 U1008
     59 U1008							;----------------------------------------
     60 U1008							; Data Fetcher
     61 U1008							;----------------------------------------
     62 U1008							; There are 8 Data Fetchers which are used to access data stored in the Display
     63 U1008							; Data bank.  Before using, you must point the Data Fetcher at the data to read
     64 U1008							; via DFxLOW and DFxHI.  After each read the Data Fetcher will update to point
     65 U1008							; to the next byte of data to return.
     66 U1008							;
     67 U1008							; psuedo code* to point Data Fetcher 1 to the color data
     68 U1008							;	lda #<(ColorDataPosition - HowFarDownScreen)
     69 U1008							;	sta DF1LOW
     70 U1008							;	lda #>(ColorDataPosition - HowFarDownScreen)
     71 U1008							;	sta DF1HI 
     72 U1008							;	....
     73 U1008							; then in the kernel read the Data Fetcher and update the color, takes 7 cycles
     74 U1008							;	LDA DF1DATA
     75 U1008							;	STA COLUP0
     76 U1008							;
     77 U1008							; * see DPCplus.asm for actual code
     78 U1008							;----------------------------------------
     79 U1008		       00	   DF0DATA    DS	1	; $08
     80 U1009		       00	   DF1DATA    DS	1	; $09
     81 U100a		       00	   DF2DATA    DS	1	; $0A
     82 U100b		       00	   DF3DATA    DS	1	; $0B
     83 U100c		       00	   DF4DATA    DS	1	; $0C
     84 U100d		       00	   DF5DATA    DS	1	; $0D
     85 U100e		       00	   DF6DATA    DS	1	; $0E
     86 U100f		       00	   DF7DATA    DS	1	; $0F
     87 U1010
     88 U1010							;----------------------------------------
     89 U1010							; Data Fetcher, Windowed
     90 U1010							;----------------------------------------
     91 U1010							; The 8 Data Fetchers can also be read in a "windowed" mode, which is most
     92 U1010							; commonly used to update sprites.  To use windowed mode, point the Data
     93 U1010							; Fetcher the same as above, but then also set the Top and Bottom of the
     94 U1010							; Window using DFxTOP and DFxBOT.  When reading via the DFxDATAW registers, a 0
     95 U1010							; value will be returned for anything that's outside of the window.
     96 U1010							;
     97 U1010							; psuedo code to point Data Fetcher0 to the sprite data
     98 U1010							;	lda #<(SpriteDataPosition - HowFarDownScreen)
     99 U1010							;	sta DF0LOW
    100 U1010							;	lda #>(SpriteDataPosition - HowFarDownScreen)
    101 U1010							;	sta DF0HI
    102 U1010							;	
    103 U1010							; set the window for Data Fetcher 0
    104 U1010							;	lda #<(SpriteDataPosition - 1)
    105 U1010							;	sta DF0TOP
    106 U1010							;	lda #<(SpriteDataPosition + ImageHeight)
    107 U1010							;	sta DF0BOT
    108 U1010							;	....
    109 U1010							; then in the kernel read the Data Fetcher and update the sprite, takes 7 cycles
    110 U1010							;	LDA DF0DATAW
    111 U1010							;	STA GRP0
    112 U1010							;----------------------------------------
    113 U1010		       00	   DF0DATAW   DS	1	; $10
    114 U1011		       00	   DF1DATAW   DS	1	; $11
    115 U1012		       00	   DF2DATAW   DS	1	; $12
    116 U1013		       00	   DF3DATAW   DS	1	; $13
    117 U1014		       00	   DF4DATAW   DS	1	; $14
    118 U1015		       00	   DF5DATAW   DS	1	; $15
    119 U1016		       00	   DF6DATAW   DS	1	; $16
    120 U1017		       00	   DF7DATAW   DS	1	; $17
    121 U1018
    122 U1018							;----------------------------------------
    123 U1018							; Fractional Data Fetcher
    124 U1018							;----------------------------------------
    125 U1018							; Another 8 Data Fetchers exist which work differently than the first 8.
    126 U1018							; These allow you to fractionally increment the Data Fetcher so a single
    127 U1018							; value can be read a set number of times before advancing to the next value.
    128 U1018							; This is commonly used to draw asymmetrical playfields without needing to 
    129 U1018							; use 1200 bytes of data (200 scanlines * 6 playfield updates).
    130 U1018							; Before using, you must point the Fractional Data Fetcher at the data to read
    131 U1018							; via DFxFRACLOW and DFxFRACHI.  You must also set the increment value via
    132 U1018							; DFxFRACINC.
    133 U1018							;
    134 U1018							; Set pointer
    135 U1018							;	LDA #<PlayfieldPF0l
    136 U1018							;	STA DF0FRACLOW
    137 U1018							;	... repeat for PF1l, PF2l, PF0r, PF1r and PF2r
    138 U1018							;	lda #>PlayFieldPF0l
    139 U1018							;	STA DF0FRACHI
    140 U1018							;	... repeat for PF1l, PF2l, PF0r, PF1r and PF2r
    141 U1018							; Set the increment to repeat the value for x reads
    142 U1018							;	LDA #(256/x)
    143 U1018							;	STA DF0FRACINC
    144 U1018							;	 STA DF1FRACINC
    145 U1018							;	... repeat for 2-5
    146 U1018							;
    147 U1018							; Special Condition - IF you want to increment the pointer after every read 
    148 U1018							; (just like the normal Data Fetcher), then use the following to set the
    149 U1018							; increment AND prime the Fractional Data Fetcher
    150 U1018							;	LDA #255
    151 U1018							;	STA DF0FRACINC
    152 U1018							;	 STA DF1FRACINC
    153 U1018							;	... repeat for 2-5
    154 U1018							;	LDA DF0FRACDATA - priming read (first value will be read twice)
    155 U1018							;	LDA DF1FRACDATA - priming read (first value will be read twice)
    156 U1018							;	... repeat for 2-5
    157 U1018							;
    158 U1018							; then in the kernel read the Fractional Data Fetchers and update the playfield
    159 U1018							;	LDA DF0FRACDATA
    160 U1018							;	STA PF0
    161 U1018							;	LDA PF1FRACDATA
    162 U1018							;	STA PF1
    163 U1018							;	... repeat for Data Fetchers 2-5, putting them in PF2, PF0, PF1 and PF2
    164 U1018							;----------------------------------------
    165 U1018		       00	   DF0FRACDATA DS	1	; $18
    166 U1019		       00	   DF1FRACDATA DS	1	; $19
    167 U101a		       00	   DF2FRACDATA DS	1	; $1A
    168 U101b		       00	   DF3FRACDATA DS	1	; $1B
    169 U101c		       00	   DF4FRACDATA DS	1	; $1C
    170 U101d		       00	   DF5FRACDATA DS	1	; $1D
    171 U101e		       00	   DF6FRACDATA DS	1	; $1E
    172 U101f		       00	   DF7FRACDATA DS	1	; $1F
    173 U1020
    174 U1020							;----------------------------------------
    175 U1020							; Data Fetcher Window Flag
    176 U1020							;----------------------------------------
    177 U1020							; The Data Fetcher Window Flag allows you to dual-purpose the first four
    178 U1020							; Data Fetchers.  The Window is not required when a Data Fetcher is used to
    179 U1020							; update a sprite's color.  The Flag will return $FF if it's within the window,
    180 U1020							; or 0 if it's not - this value can be used to control the display of the ball
    181 U1020							; and missiles. The Data Fetcher will NOT increment when reading the flag.
    182 U1020							;
    183 U1020							; psuedo code to point Data Fetcher 1 to the color data
    184 U1020							;	lda #<(ColorDataPosition - HowFarDownScreen)
    185 U1020							;	sta DF1LOW
    186 U1020							;	lda #>(ColorDataPosition - HowFarDownScreen)
    187 U1020							;	sta DF1HI
    188 U1020							;
    189 U1020							; set the window based on the missile's Y position and height (number of
    190 U1020							; scanlines to draw missile on)
    191 U1020							;	lda #<(ColorDataPosition + MissileYposition - 1)
    192 U1020							;	sta DF1TOP
    193 U1020							;	lda #<(ColorDataPosition + MissileYposition + MissileHeight)
    194 U1020							;	sta DF1BOT
    195 U1020							;
    196 U1020							; then in the kernel read the Data Fetcher and update the color, then read the
    197 U1020							; flag and update the missile
    198 U1020							;	LDA DF1DATA
    199 U1020							;	STA COLUP0
    200 U1020							;	LDA DF1FLAG
    201 U1020							;	STA ENAM0
    202 U1020							;----------------------------------------
    203 U1020		       00	   DF0FLAG    DS	1	; $20
    204 U1021		       00	   DF1FLAG    DS	1	; $21
    205 U1022		       00	   DF2FLAG    DS	1	; $22
    206 U1023		       00	   DF3FLAG    DS	1	; $23
    207 U1024
    208 U1024							;----------------------------------------
    209 U1024							; Reserved
    210 U1024							;----------------------------------------
    211 U1024		       00		      DS	1	; $24
    212 U1025		       00		      DS	1	; $25
    213 U1026		       00		      DS	1	; $26
    214 U1027		       00		      DS	1	; $27
    215 U1028
    216 U1028
    217 U1080 ????				      SEG.U	DPC_REGISTERS_WRITE
    218 U1028					      ORG	DPC_BASE_WRITE_ADDRESS
    219 U1028
    220 U1028							;****************************************
    221 U1028							; SECTION 2 - DPC+ Write Registers
    222 U1028							;****************************************
    223 U1028							;
    224 U1028							;----------------------------------------
    225 U1028							; Fractional Data Fetcher, Low Pointer
    226 U1028							;----------------------------------------
    227 U1028							; These are used in conjunction with DFxFRACHI to point a Fractional Data
    228 U1028							; Fetcher to the data to read.  For usage, see "Fractional Data Fetcher"
    229 U1028							; in SECTION 1.
    230 U1028							;----------------------------------------
    231 U1028		       00	   DF0FRACLOW DS	1	; $28
    232 U1029		       00	   DF1FRACLOW DS	1	; $29
    233 U102a		       00	   DF2FRACLOW DS	1	; $2A
    234 U102b		       00	   DF3FRACLOW DS	1	; $2B
    235 U102c		       00	   DF4FRACLOW DS	1	; $2C
    236 U102d		       00	   DF5FRACLOW DS	1	; $2D
    237 U102e		       00	   DF6FRACLOW DS	1	; $2E
    238 U102f		       00	   DF7FRACLOW DS	1	; $2F
    239 U1030
    240 U1030							;----------------------------------------
    241 U1030							; Fractional Data Fetcher, High Pointer
    242 U1030							;----------------------------------------
    243 U1030							; These are used in conjunction with DFxFRACLOW to point a Fractional Data
    244 U1030							; Fetcher to the data to read.  For usage, see "Fractional Data Fetcher"
    245 U1030							; in SECTION 1.
    246 U1030							;
    247 U1030							; NOTE: for only the lower 4 bits are used.
    248 U1030							;----------------------------------------
    249 U1030		       00	   DF0FRACHI  DS	1	; $30
    250 U1031		       00	   DF1FRACHI  DS	1	; $31
    251 U1032		       00	   DF2FRACHI  DS	1	; $32
    252 U1033		       00	   DF3FRACHI  DS	1	; $33
    253 U1034		       00	   DF4FRACHI  DS	1	; $34
    254 U1035		       00	   DF5FRACHI  DS	1	; $35 
    255 U1036		       00	   DF6FRACHI  DS	1	; $36 
    256 U1037		       00	   DF7FRACHI  DS	1	; $37 
    257 U1038
    258 U1038							;----------------------------------------
    259 U1038							; Fractional Data Fetcher, Increment
    260 U1038							;----------------------------------------
    261 U1038							; These are used to set the increment amount for the Fractional Data Fetcher.
    262 U1038							; To increment pointer after every Xth read use int(256/X)
    263 U1038							; For usage, see "Fractional Data Fetcher" in SECTION 1.
    264 U1038							;----------------------------------------
    265 U1038		       00	   DF0FRACINC DS	1	; $38
    266 U1039		       00	   DF1FRACINC DS	1	; $39
    267 U103a		       00	   DF2FRACINC DS	1	; $3A
    268 U103b		       00	   DF3FRACINC DS	1	; $3B
    269 U103c		       00	   DF4FRACINC DS	1	; $3C
    270 U103d		       00	   DF5FRACINC DS	1	; $3D
    271 U103e		       00	   DF6FRACINC DS	1	; $3E
    272 U103f		       00	   DF7FRACINC DS	1	; $3F
    273 U1040
    274 U1040							;----------------------------------------
    275 U1040							; Data Fetcher, Window Top
    276 U1040							;----------------------------------------
    277 U1040							; These are used with DFxBOT to define the Data Fetcher Window
    278 U1040							; For usage, see "Data Fetcher, Windowed" in SECTION 1.
    279 U1040							;----------------------------------------
    280 U1040		       00	   DF0TOP     DS	1	; $40
    281 U1041		       00	   DF1TOP     DS	1	; $41
    282 U1042		       00	   DF2TOP     DS	1	; $42
    283 U1043		       00	   DF3TOP     DS	1	; $43
    284 U1044		       00	   DF4TOP     DS	1	; $44
    285 U1045		       00	   DF5TOP     DS	1	; $45
    286 U1046		       00	   DF6TOP     DS	1	; $46
    287 U1047		       00	   DF7TOP     DS	1	; $47
    288 U1048
    289 U1048							;----------------------------------------
    290 U1048							; Data Fetcher, Window Bottom
    291 U1048							;----------------------------------------
    292 U1048							; These are used with DFxTOP to define the Data Fetcher Window
    293 U1048							; For usage, see "Data Fetcher, Windowed" in SECTION 1.
    294 U1048							;----------------------------------------
    295 U1048		       00	   DF0BOT     DS	1	; $48
    296 U1049		       00	   DF1BOT     DS	1	; $49
    297 U104a		       00	   DF2BOT     DS	1	; $4A
    298 U104b		       00	   DF3BOT     DS	1	; $4B
    299 U104c		       00	   DF4BOT     DS	1	; $4C
    300 U104d		       00	   DF5BOT     DS	1	; $4D
    301 U104e		       00	   DF6BOT     DS	1	; $4E
    302 U104f		       00	   DF7BOT     DS	1	; $4F
    303 U1050
    304 U1050							;----------------------------------------
    305 U1050							; Data Fetcher, Low Pointer
    306 U1050							;----------------------------------------
    307 U1050							; These are used in conjunction with DFxHI to point a Data Fetcher to the data
    308 U1050							; to read.  For usage, see "Data Fetcher" in SECTION 1.
    309 U1050							;----------------------------------------
    310 U1050		       00	   DF0LOW     DS	1	; $50
    311 U1051		       00	   DF1LOW     DS	1	; $51
    312 U1052		       00	   DF2LOW     DS	1	; $52
    313 U1053		       00	   DF3LOW     DS	1	; $53
    314 U1054		       00	   DF4LOW     DS	1	; $54
    315 U1055		       00	   DF5LOW     DS	1	; $55
    316 U1056		       00	   DF6LOW     DS	1	; $56
    317 U1057		       00	   DF7LOW     DS	1	; $57
    318 U1058
    319 U1058							;----------------------------------------
    320 U1058							; Fast Fetch Mode
    321 U1058							;----------------------------------------
    322 U1058							; Fast Fetch Mode enables the fastest way to read DPC+ registers.  Normal
    323 U1058							; reads use LDA Absolute addressing (LDA DF0DATA) which takes 4 cycles to
    324 U1058							; process.  Fast Fetch Mode intercepts LDA Immediate addressing (LDA #<DF0DATA)
    325 U1058							; which takes only 2 cycles!  Only immediate values < $28 are intercepted
    326 U1058							; 
    327 U1058							; set Fast Fetch Mode
    328 U1058							;	LDA #0
    329 U1058							;	STA FASTFETCH
    330 U1058							;
    331 U1058							; then use immediate mode to read the registers, takes just 5 cycles to update
    332 U1058							; any TIA register
    333 U1058							;
    334 U1058							;	LDA #<DF0DATA
    335 U1058							;	STA GRP0
    336 U1058							;
    337 U1058							; when done, turn off Fast Fetch Mode using any non-zero value
    338 U1058							;	LDA #$FF
    339 U1058							;	STA FASTFETCH
    340 U1058							;
    341 U1058							; NOTE: if you forget to turn off FASTFETCH mode, then code like this will not
    342 U1058							;	 work as you expect
    343 U1058							;	LDA #0	; returns a RANDOM NUMBER, not 0.
    344 U1058							;	STA COLUPF
    345 U1058							;----------------------------------------
    346 U1058		       00	   FASTFETCH  DS	1	; $58
    347 U1059
    348 U1059							;----------------------------------------
    349 U1059							; Function Support
    350 U1059							;----------------------------------------
    351 U1059							; Currently only Function 255 is defined, and it is used to call user
    352 U1059							; written ARM routines (or C code compiled for the ARM processor.)
    353 U1059							;
    354 U1059							; PARAMETER is not used by function 255, it may be used by future functions.
    355 U1059							; 
    356 U1059							; call custom ARM routine
    357 U1059							;	LDA #$FF
    358 U1059							;	STA CALLFUNCTION
    359 U1059							;
    360 U1059							; A custom ARM demo will be released in the near future
    361 U1059							;----------------------------------------
    362 U1059		       00	   PARAMETER  DS	1	; $59
    363 U105a		       00	   CALLFUNCTION DS	1	; $5A
    364 U105b
    365 U105b							;----------------------------------------
    366 U105b							; Reserved
    367 U105b							;----------------------------------------
    368 U105b		       00		      DS	1	; $5B	 ; reserved
    369 U105c		       00		      DS	1	; $5C	 ; reserved
    370 U105d
    371 U105d							;----------------------------------------
    372 U105d							; Waveforms
    373 U105d							;----------------------------------------
    374 U105d							; Waveforms are 32 byte tables that define a waveform.  Waveforms must be 32
    375 U105d							; byte aligned, and can only be stored in the 4K Display Data Bank. You MUST
    376 U105d							; define an "OFF" waveform,  comprised of all zeros.  The sum of all waveforms
    377 U105d							; being played should be <= 15, so typically you'll use a maximum of 5 for any
    378 U105d							; given value.
    379 U105d							;
    380 U105d							; Valid values are 0-127 and point to the 4K Display Data bank.  The formula
    381 U105d							; (* & $1fff)/32 as shown below will calculate the value for you
    382 U105d							;
    383 U105d							;
    384 U105d							; example waveforms
    385 U105d							;	align 32		; forces the waveform to a 32 byte boundary
    386 U105d							;SOUND_OFF = (* & $1fff)/32	; calculates waveform pointer
    387 U105d							;	.byte 0,0,0,0,0,0,0,0
    388 U105d							;	.byte 0,0,0,0,0,0,0,0
    389 U105d							;	.byte 0,0,0,0,0,0,0,0
    390 U105d							;	.byte 0,0,0,0,0,0,0,0 
    391 U105d							; 
    392 U105d							;	align 32
    393 U105d							;SINE_WAVE = (* & $1fff)/32
    394 U105d							;	.byte 3,3,3,4,4,5,5,5
    395 U105d							;	.byte 5,5,5,5,4,4,3,3
    396 U105d							;	.byte 3,2,2,1,1,0,0,0
    397 U105d							;	.byte 0,0,0,0,1,1,2,2 
    398 U105d							;
    399 U105d							; usage, set voice 0 to Sine Wave, set voice 1 & 2 off
    400 U105d							;	LDA #SINE_WAVE
    401 U105d							;	STA WAVEFORM0
    402 U105d							;	LDA #SOUND_OFF
    403 U105d							;	STA WAVEFORM1
    404 U105d							;	STA WAVEFORM2	
    405 U105d							;----------------------------------------
    406 U105d		       00	   WAVEFORM0  DS	1	; $5D
    407 U105e		       00	   WAVEFORM1  DS	1	; $5E
    408 U105f		       00	   WAVEFORM2  DS	1	; $5F
    409 U1060
    410 U1060							;----------------------------------------
    411 U1060							; Data Fetcher Push (stack)
    412 U1060							;----------------------------------------
    413 U1060							; The Data Fetchers can also be used to update the contents of the 4K
    414 U1060							; Display Data bank.  Point the Data Fetcher to the data to change,
    415 U1060							; then Push to it.  The Data Fetcher's pointer will be decremented BEFORE
    416 U1060							; the data is written.
    417 U1060							;
    418 U1060							; point Data Fetcher 1 to the sprite data
    419 U1060							;	lda #<DisplayData
    420 U1060							;	sta DF1LOW
    421 U1060							;	lda #>DisplayData
    422 U1060							;	sta DF1HI 
    423 U1060							;
    424 U1060							; then update it
    425 U1060							;	LDA #$FF
    426 U1060							;	STA DF1PUSH ; changes data at DisplayData - 1
    427 U1060							;	LDA #$81
    428 U1060							;	STA DF1OUSH ; changes data at DisplayData - 2
    429 U1060							;----------------------------------------
    430 U1060		       00	   DF0PUSH    DS	1	; $60
    431 U1061		       00	   DF1PUSH    DS	1	; $61
    432 U1062		       00	   DF2PUSH    DS	1	; $62
    433 U1063		       00	   DF3PUSH    DS	1	; $63
    434 U1064		       00	   DF4PUSH    DS	1	; $64
    435 U1065		       00	   DF5PUSH    DS	1	; $65
    436 U1066		       00	   DF6PUSH    DS	1	; $66
    437 U1067		       00	   DF7PUSH    DS	1	; $67
    438 U1068
    439 U1068							;----------------------------------------
    440 U1068							; Data Fetcher, High Pointer
    441 U1068							;----------------------------------------
    442 U1068							; These are used in conjunction with DFxLOW to point a Data Fetcher to the data
    443 U1068							; to read.  For usage, see "Data Fetcher" in SECTION 1.
    444 U1068							;----------------------------------------
    445 U1068		       00	   DF0HI      DS	1	; $68
    446 U1069		       00	   DF1HI      DS	1	; $69
    447 U106a		       00	   DF2HI      DS	1	; $6A
    448 U106b		       00	   DF3HI      DS	1	; $6B
    449 U106c		       00	   DF4HI      DS	1	; $6C
    450 U106d		       00	   DF5HI      DS	1	; $6D 
    451 U106e		       00	   DF6HI      DS	1	; $6E 
    452 U106f		       00	   DF7HI      DS	1	; $6F 
    453 U1070
    454 U1070							;----------------------------------------
    455 U1070							; Random Number Initialization
    456 U1070							;----------------------------------------
    457 U1070							; The random number generate defaults to a value that spells out DPC+.
    458 U1070							; Store any value to RRESET to set the random number back to DPC+, or you
    459 U1070							; can use RWRITE0-3 to change the 32 bit value to anything you desire.
    460 U1070							;
    461 U1070							; reset random number
    462 U1070							;	LDA #0
    463 U1070							;	STA RRESET
    464 U1070							;
    465 U1070							; set a specific random number (spells out 2600)
    466 U1070							;	LDA #$32
    467 U1070							;	STA RWRITE0
    468 U1070							;	LDA #$36
    469 U1070							;	STA RWRITE1
    470 U1070							;	LDA #$30
    471 U1070							;	STA RWRITE2
    472 U1070							;	STA RWRITE3
    473 U1070							;
    474 U1070							; NOTE: do not set all 4 bytes to 0, as that will disable the generator.
    475 U1070							;----------------------------------------
    476 U1070		       00	   RRESET     DS	1	; $70
    477 U1071		       00	   RWRITE0    DS	1	; $71
    478 U1072		       00	   RWRITE1    DS	1	; $72
    479 U1073		       00	   RWRITE2    DS	1	; $73
    480 U1074		       00	   RWRITE3    DS	1	; $74
    481 U1075
    482 U1075							;----------------------------------------
    483 U1075							; Notes
    484 U1075							;----------------------------------------
    485 U1075							; These are used to select a value from the frequency table to play.
    486 U1075							; The default table, store in DPC_frequencies.h, only defines frequencies
    487 U1075							; for 1-88, which cover the keys of a piano.  You are free to add additional
    488 U1075							; frequencies from 88-255.  Piano keys are defined at the end of this file
    489 U1075							;
    490 U1075							; set voice 0 to middle C
    491 U1075							;	LDA #C4
    492 U1075							;	STA NOTE0
    493 U1075							;
    494 U1075							; Note: if you are using ARM USER CODE then you can only use notes to 128.
    495 U1075							;----------------------------------------
    496 U1075		       00	   NOTE0      DS	1	; $75
    497 U1076		       00	   NOTE1      DS	1	; $76
    498 U1077		       00	   NOTE2      DS	1	; $77
    499 U1078
    500 U1078							;----------------------------------------
    501 U1078							; Data Fetcher Write (queue)
    502 U1078							;----------------------------------------
    503 U1078							; The Data Fetchers can also be used to update the contents of the 4K
    504 U1078							; Display Data bank.  Point the Data Fetcher to the data to change,
    505 U1078							; then Write to it  The Data Fetcher's pointer will be incremented AFTER
    506 U1078							; the data is written.
    507 U1078							;
    508 U1078							; point Data Fetcher 1 to the sprite data
    509 U1078							;	lda #<SpriteData
    510 U1078							;	sta DF1LOW
    511 U1078							;	lda #>SpriteData
    512 U1078							;	sta DF1HI 
    513 U1078							;
    514 U1078							; then update it
    515 U1078							;	LDA #$FF
    516 U1078							;	STA DF1WRITE ; changes data at SpriteData
    517 U1078							;	LDA #$81
    518 U1078							;	STA DF1WRITE ; changes data at SpriteData + 1
    519 U1078							;----------------------------------------
    520 U1078		       00	   DF0WRITE   DS	1	; $78
    521 U1079		       00	   DF1WRITE   DS	1	; $79
    522 U107a		       00	   DF2WRITE   DS	1	; $7A
    523 U107b		       00	   DF3WRITE   DS	1	; $7B
    524 U107c		       00	   DF4WRITE   DS	1	; $7C
    525 U107d		       00	   DF5WRITE   DS	1	; $7D
    526 U107e		       00	   DF6WRITE   DS	1	; $7E
    527 U107f		       00	   DF7WRITE   DS	1	; $7F
    528 U1080
    529 U1080							;-------------------------------------------------------------------------------
    530 U1080							; The following required for back-compatibility with code which does not use
    531 U1080							; segments.
    532 U1080
    533  8400 ????				      SEG
------- FILE c:\Users\tazrog\BrawdyBAS\brawdy.bas.asm
------- FILE DPCplusbB.h LEVEL 2 PASS 3
      0  8400 ????				      include	"DPCplusbB.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3 U00f5 ????				      SEG.U	vars
      4 U0080					      org	$80
      5 U0080		       00	   player0x   ds	1
      6 U0081		       00	   topP1x     ds	1
      7 U0082		       00	   missile0x  ds	1
      8 U0083		       00	   missile1x  ds	1
      9 U0084		       00	   ballx      ds	1
     10 U0085
     11 U0085		       00 00 00 00*SpriteGfxIndex ds	9
     12 U008e
     13 U008e		       00	   spritedisplay ds	1
     14 U008f
     15 U008f		       00	   player0xcoll ds	1	; to detect p0x colls
     16 U0090		       00	   NewSpriteX ds	1	;		X position
     17 U0090		       00 90	   player1x   =	NewSpriteX
     18 U0091		       00	   player2x   ds	1
     19 U0092		       00	   player3x   ds	1
     20 U0093		       00	   player4x   ds	1
     21 U0094		       00	   player5x   ds	1
     22 U0095		       00	   player6x   ds	1
     23 U0096		       00	   player7x   ds	1
     24 U0097		       00	   player8x   ds	1
     25 U0098		       00	   player9x   ds	1
     26 U0099
     27 U0099		       00	   player0y   ds	1
     28 U009a		       00	   NewSpriteY ds	1	;		Y position
     29 U009a		       00 9a	   player1y   =	NewSpriteY
     30 U009b		       00	   player2y   ds	1
     31 U009c		       00	   player3y   ds	1
     32 U009d		       00	   player4y   ds	1
     33 U009e		       00	   player5y   ds	1
     34 U009f		       00	   player6y   ds	1
     35 U00a0		       00	   player7y   ds	1
     36 U00a1		       00	   player8y   ds	1
     37 U00a2		       00	   player9y   ds	1
     38 U00a3
     39 U00a3		       00 00	   player0color ds	2
     40 U00a5
     41 U00a5		       00	   player0height ds	1
     42 U00a6		       00	   player1height ds	1
     43 U00a7		       00	   player2height ds	1
     44 U00a8		       00	   player3height ds	1
     45 U00a9		       00	   player4height ds	1
     46 U00aa		       00	   player5height ds	1
     47 U00ab		       00	   player6height ds	1
     48 U00ac		       00	   player7height ds	1
     49 U00ad		       00	   player8height ds	1
     50 U00ae		       00	   player9height ds	1
     51 U00af
     52 U00af		       00	   _NUSIZ1    ds	1
     53 U00b0		       00	   NUSIZ2     ds	1
     54 U00b1		       00	   NUSIZ3     ds	1
     55 U00b2		       00	   NUSIZ4     ds	1
     56 U00b3		       00	   NUSIZ5     ds	1
     57 U00b4		       00	   NUSIZ6     ds	1
     58 U00b5		       00	   NUSIZ7     ds	1
     59 U00b6		       00	   NUSIZ8     ds	1
     60 U00b7		       00	   NUSIZ9     ds	1
     61 U00b8
     62 U00b8		       00 00 00    score      ds	3
     63 U00bb		       00	   COLUM0     ds	1
     64 U00bc		       00	   COLUM1     ds	1
     65 U00bd		       00	   player0pointerlo ds	1
     66 U00be		       00	   player0pointerhi ds	1
     67 U00bf
     68 U00bf		       00 85	   RAMcopybegin =	SpriteGfxIndex
     69 U00bf		       00 3a	   RAMcopylength =	*-RAMcopybegin
     70 U00bf
     71 U00bf		       00	   missile0y  ds	1
     72 U00c0		       00	   missile1y  ds	1
     73 U00c1		       00	   bally      ds	1
     74 U00c2
     75 U00c2		       00	   missile0height ds	1
     76 U00c3		       00	   missile1height ds	1
     77 U00c4		       00	   ballheight ds	1
     78 U00c5
     79 U00c5		       00	   statusbarlength ds	1	; needed?
     80 U00c5		       00 c5	   aux3       =	statusbarlength
     81 U00c6
     82 U00c6		       00	   lifecolor  ds	1
     83 U00c6		       00 c6	   pfscorecolor =	lifecolor
     84 U00c7		       00	   aux4       ds	1
     85 U00c8
     86 U00c8		       00	   lifepointer ds	1
     87 U00c9		       00	   lives      ds	1
     88 U00c9		       00 c8	   pfscore1   =	lifepointer
     89 U00c9		       00 c9	   pfscore2   =	lives
     90 U00c9		       00 c8	   aux5       =	pfscore1
     91 U00c9		       00 c9	   aux6       =	pfscore2
     92 U00ca
     93 U00ca		       00	   playfieldpos ds	1
     94 U00cb
     95 U00cb		       00	   temp1      ds	1	; used in sprite flickering
     96 U00cc		       00	   temp2      ds	1	;are obliterated when drawscreen is called.
     97 U00cd		       00	   temp3      ds	1
     98 U00ce		       00	   temp4      ds	1
     99 U00cf		       00	   temp5      ds	1
    100 U00d0		       00	   temp6      ds	1
    101 U00d0		       00 81	   temp7      =	topP1x	; This is used to aid in bankswitching
    102 U00d1
    103 U00d1		       00	   A	      ds	1
    104 U00d1		       00 d1	   a	      =	A
    105 U00d2		       00	   B	      ds	1
    106 U00d2		       00 d2	   b	      =	B
    107 U00d3		       00	   C	      ds	1
    108 U00d3		       00 d3	   c	      =	C
    109 U00d4		       00	   D	      ds	1
    110 U00d4		       00 d4	   d	      =	D
    111 U00d5		       00	   E	      ds	1
    112 U00d5		       00 d5	   e	      =	E
    113 U00d6		       00	   F	      ds	1
    114 U00d6		       00 d6	   f	      =	F
    115 U00d7		       00	   G	      ds	1
    116 U00d7		       00 d7	   g	      =	G
    117 U00d8		       00	   H	      ds	1
    118 U00d8		       00 d8	   h	      =	H
    119 U00d9		       00	   I	      ds	1
    120 U00d9		       00 d9	   i	      =	I
    121 U00da		       00	   J	      ds	1
    122 U00da		       00 da	   j	      =	J
    123 U00db		       00	   K	      ds	1
    124 U00db		       00 db	   k	      =	K
    125 U00dc		       00	   L	      ds	1
    126 U00dc		       00 dc	   l	      =	L
    127 U00dd		       00	   M	      ds	1
    128 U00dd		       00 dd	   m	      =	M
    129 U00de		       00	   N	      ds	1
    130 U00de		       00 de	   n	      =	N
    131 U00df		       00	   O	      ds	1
    132 U00df		       00 df	   o	      =	O
    133 U00e0		       00	   P	      ds	1
    134 U00e0		       00 e0	   p	      =	P
    135 U00e1		       00	   Q	      ds	1
    136 U00e1		       00 e1	   q	      =	Q
    137 U00e2		       00	   R	      ds	1
    138 U00e2		       00 e2	   r	      =	R
    139 U00e3		       00	   S	      ds	1
    140 U00e3		       00 e3	   s	      =	S
    141 U00e4		       00	   T	      ds	1
    142 U00e4		       00 e4	   t	      =	T
    143 U00e5		       00	   U	      ds	1
    144 U00e5		       00 e5	   u	      =	U
    145 U00e6		       00	   V	      ds	1
    146 U00e6		       00 e6	   v	      =	V
    147 U00e7		       00	   W	      ds	1
    148 U00e7		       00 e7	   w	      =	W
    149 U00e8		       00	   X	      ds	1
    150 U00e8		       00 e8	   x	      =	X
    151 U00e9		       00	   Y	      ds	1
    152 U00e9		       00 e9	   y	      =	Y
    153 U00ea		       00	   Z	      ds	1
    154 U00ea		       00 ea	   z	      =	Z
    155 U00eb		       00	   scorecolor ds	1
    156 U00ec
    157 U00ec		       00	   var0       ds	1
    158 U00ed		       00	   var1       ds	1
    159 U00ee		       00	   var2       ds	1
    160 U00ef		       00	   var3       ds	1
    161 U00f0		       00	   var4       ds	1
    162 U00f1		       00	   var5       ds	1
    163 U00f2		       00	   var6       ds	1
    164 U00f3		       00	   var7       ds	1
    165 U00f4		       00	   var8       ds	1
    166 U00f5
 free ram: 0
    167 U00f5					      echo	"free ram:",($f5-*)d
    168 U00f5
    169 U00f5		       00 f6	   stack1     =	$f6
    170 U00f5		       00 f7	   stack2     =	$f7
    171 U00f5		       00 f8	   stack3     =	$f8
    172 U00f5		       00 f9	   stack4     =	$f9
    173 U00f5							; the stack bytes above may be used in the kernel
    174 U00f5							; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    175 U00f5
    176 U00f5					      MAC	return
    177 U00f5					      ifnconst	bankswitch
    178 U00f5					      rts
    179 U00f5					      else
    180 U00f5					      jmp	BS_return
    181 U00f5					      endif
    182 U00f5					      ENDM		; auto-return from either a regular or bankswitched module
    183  8400 ????				      seg
    184  8400 ????	       10 00	   rand       =	RANDOM0NEXT
    185  8400 ????	       00 d3	   KERNEL_LINES =	178*76/64	; warning: not all values will work
    186  8400 ????	       00 a7	   OVERSCAN_LINES =	128+33*76/64	; again, not all values work
    187  8400 ????	       d1 a4	   C_function =	FETCHER_BEGIN
    188  8400 ????	       d1 a8	   CcodeData  =	C_function + 4
    189  8400 ????	       d1 e2	   playerpointers =	CcodeData + RAMcopylength
    190  8400 ????	       d2 08	   P1GFX      =	playerpointers + 38
    191  8400 ????	       d3 08	   P1COLOR    =	P1GFX + 256
    192  8400 ????	       d4 08	   P0GFX      =	P1COLOR + 256
    193  8400 ????	       d5 08	   P0COLOR    =	P0GFX + 256
    194  8400 ????	       d6 08	   PF1L       =	P0COLOR + 256
    195  8400 ????	       d7 08	   PF2L       =	PF1L + 256
    196  8400 ????	       d8 08	   PF1R       =	PF2L + 256
    197  8400 ????	       d9 08	   PF2R       =	PF1R + 256
    198  8400 ????	       da 08	   PFCOLS     =	PF2R + 256
    199  8400 ????	       db 08	   JUMPTABLELO =	PFCOLS + 256
    200  8400 ????	       db 14	   JUMPTABLEHI =	JUMPTABLELO + 12
    201  8400 ????	       db 20	   P1HMP      =	JUMPTABLEHI + 12
    202  8400 ????	       db 2d	   P1SKIP     =	P1HMP + 13
    203  8400 ????	       db 39	   NUSIZREFP  =	P1SKIP + 12
    204  8400 ????	       db 45	   scoredata  =	NUSIZREFP + 12
    205  8400 ????	       db a5	   BKCOLS     =	scoredata + 96
    206  8400 ????	       dc a5	   STACKbegin =	BKCOLS + 256
    207  8400 ????	       dd a5	   USERSTACK  =	STACKbegin + 256	; stack starts here and goes down!!!!
 DPC free RAM= 603
    208  8400 ????				      echo	"DPC free RAM=",($1000-(USERSTACK&$0FFF))d
------- FILE c:\Users\tazrog\BrawdyBAS\brawdy.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  8400 ????				      include	"2600basic_variable_redefs.h"
      1  8400 ????						; This file contains variable mapping and other information for the current project.
      2  8400 ????
      3  8400 ????	       00 f1	   Bit2_HealthHitSound =	var5
      4  8400 ????
      5  8400 ????	       00 f1	   Bit1_EnemyShootSound =	var5
      6  8400 ????
      7  8400 ????	       00 f1	   Bit0_HitPlayer =	var5
      8  8400 ????
      9  8400 ????	       00 f0	   PlayerMissileRate =	var4
     10  8400 ????
     11  8400 ????	       00 ef	   EnemyMissilerate =	var3
     12  8400 ????
     13  8400 ????	       00 ee	   Powerup    =	var2
     14  8400 ????
     15  8400 ????	       00 ed	   Damage     =	var1
     16  8400 ????
     17  8400 ????	       00 d5	   PlayerHealth =	e
     18  8400 ????
     19  8400 ????	       00 e6	   swdebounce =	v
     20  8400 ????
     21  8400 ????	       00 e5	   gamenumber =	u
     22  8400 ????
     23  8400 ????	       00 dd	   PlayerDamage =	m
     24  8400 ????
     25  8400 ????	       00 ea	   Bit0_NewLevel =	z
     26  8400 ????
     27  8400 ????	       00 ea	   Bit5_hit   =	z
     28  8400 ????
     29  8400 ????	       00 e9	   Ch0_Counter =	y
     30  8400 ????
     31  8400 ????	       00 e8	   Ch0_Duration =	x
     32  8400 ????
     33  8400 ????	       00 e7	   Ch0_Sound  =	w
     34  8400 ????
     35  8400 ????	       00 e6	   V0	      =	v
     36  8400 ????
     37  8400 ????	       00 e0	   Ch1_Counter =	p
     38  8400 ????
     39  8400 ????	       00 db	   Ch1_Duration =	k
     40  8400 ????
     41  8400 ????	       00 da	   Ch1_Sound  =	j
     42  8400 ????
     43  8400 ????	       00 d8	   V1	      =	h
     44  8400 ????
     45  8400 ????	       00 ea	   Bit7_PLayer3Moving =	z
     46  8400 ????
     47  8400 ????	       00 ea	   Bit6_PLayer3Direction =	z
     48  8400 ????
     49  8400 ????	       00 ea	   Bit4_gameover =	z
     50  8400 ????
     51  8400 ????	       00 e4	   Timer      =	t
     52  8400 ????
     53  8400 ????	       00 e1	   Househit   =	q
     54  8400 ????
     55  8400 ????	       00 ea	   Bit3_ShootorNot =	z
     56  8400 ????
     57  8400 ????	       00 df	   delay      =	o
     58  8400 ????
     59  8400 ????	       00 de	   HealthDrop =	n
     60  8400 ????
     61  8400 ????	       00 ea	   Bit1_missleOn =	z
     62  8400 ????
     63  8400 ????	       00 dc	   level      =	l
     64  8400 ????
     65  8400 ????	       00 ea	   Bit2_EnemyMove =	z
     66  8400 ????
     67  8400 ????	       00 d6	   frame      =	f
     68  8400 ????
     69  8400 ????	       00 d4	   Points     =	d
     70  8400 ????
     71  8400 ????	       00 d3	   EnemySpeed =	c
     72  8400 ????
     73  8400 ????	       00 d2	   Moverate   =	b
     74  8400 ????
     75  8400 ????	       00 d1	   drop       =	a
     76  8400 ????
     77  8400 ????	       00 d9	   EnemyHit   =	i
     78  8400 ????
     79  8400 ????	       00 01	   pfscore    =	1
     80  8400 ????
     81  8400 ????	       00 47	   LEdge      =	71
     82  8400 ????
     83  8400 ????	       00 4f	   REdge      =	79
     84  8400 ????
     85  8400 ????	       00 96	   _P_Edge_Right =	150
     86  8400 ????
     87  8400 ????	       00 00	   _P_Edge_Left =	0
     88  8400 ????
     89  8400 ????	       00 a0	   _P_Edge_Bottom =	160
     90  8400 ????
     91  8400 ????	       00 09	   _P_Edge_Top =	9
     92  8400 ????
     93  8400 ????	       00 20	   bscode_length =	32
     94  8400 ????	       00 fe	   _FE	      =	$FE
     95  8400 ????
     96  8400 ????	       00 fc	   _FC	      =	$FC
     97  8400 ????
     98  8400 ????	       00 fa	   _FA	      =	$FA
     99  8400 ????
    100  8400 ????	       00 f8	   _F8	      =	$F8
    101  8400 ????
    102  8400 ????	       00 f6	   _F6	      =	$F6
    103  8400 ????
    104  8400 ????	       00 f4	   _F4	      =	$F4
    105  8400 ????
    106  8400 ????	       00 f2	   _F2	      =	$F2
    107  8400 ????
    108  8400 ????	       00 f0	   _F0	      =	$F0
    109  8400 ????
    110  8400 ????	       00 ee	   _EE	      =	$EE
    111  8400 ????
    112  8400 ????	       00 ec	   _EC	      =	$EC
    113  8400 ????
    114  8400 ????	       00 ea	   _EA	      =	$EA
    115  8400 ????
    116  8400 ????	       00 e8	   _E8	      =	$E8
    117  8400 ????
    118  8400 ????	       00 e6	   _E6	      =	$E6
    119  8400 ????
    120  8400 ????	       00 e4	   _E4	      =	$E4
    121  8400 ????
    122  8400 ????	       00 e2	   _E2	      =	$E2
    123  8400 ????
    124  8400 ????	       00 e0	   _E0	      =	$E0
    125  8400 ????
    126  8400 ????	       00 de	   _DE	      =	$DE
    127  8400 ????
    128  8400 ????	       00 dc	   _DC	      =	$DC
    129  8400 ????
    130  8400 ????	       00 da	   _DA	      =	$DA
    131  8400 ????
    132  8400 ????	       00 d8	   _D8	      =	$D8
    133  8400 ????
    134  8400 ????	       00 d6	   _D6	      =	$D6
    135  8400 ????
    136  8400 ????	       00 d4	   _D4	      =	$D4
    137  8400 ????
    138  8400 ????	       00 d2	   _D2	      =	$D2
    139  8400 ????
    140  8400 ????	       00 d0	   _D0	      =	$D0
    141  8400 ????
    142  8400 ????	       00 ce	   _CE	      =	$CE
    143  8400 ????
    144  8400 ????	       00 cc	   _CC	      =	$CC
    145  8400 ????
    146  8400 ????	       00 ca	   _CA	      =	$CA
    147  8400 ????
    148  8400 ????	       00 c8	   _C8	      =	$C8
    149  8400 ????
    150  8400 ????	       00 c6	   _C6	      =	$C6
    151  8400 ????
    152  8400 ????	       00 c4	   _C4	      =	$C4
    153  8400 ????
    154  8400 ????	       00 c2	   _C2	      =	$C2
    155  8400 ????
    156  8400 ????	       00 c0	   _C0	      =	$C0
    157  8400 ????
    158  8400 ????	       00 be	   _BE	      =	$BE
    159  8400 ????
    160  8400 ????	       00 bc	   _BC	      =	$BC
    161  8400 ????
    162  8400 ????	       00 ba	   _BA	      =	$BA
    163  8400 ????
    164  8400 ????	       00 b8	   _B8	      =	$B8
    165  8400 ????
    166  8400 ????	       00 b6	   _B6	      =	$B6
    167  8400 ????
    168  8400 ????	       00 b4	   _B4	      =	$B4
    169  8400 ????
    170  8400 ????	       00 b2	   _B2	      =	$B2
    171  8400 ????
    172  8400 ????	       00 b0	   _B0	      =	$B0
    173  8400 ????
    174  8400 ????	       00 ae	   _AE	      =	$AE
    175  8400 ????
    176  8400 ????	       00 ac	   _AC	      =	$AC
    177  8400 ????
    178  8400 ????	       00 aa	   _AA	      =	$AA
    179  8400 ????
    180  8400 ????	       00 a8	   _A8	      =	$A8
    181  8400 ????
    182  8400 ????	       00 a6	   _A6	      =	$A6
    183  8400 ????
    184  8400 ????	       00 a4	   _A4	      =	$A4
    185  8400 ????
    186  8400 ????	       00 a2	   _A2	      =	$A2
    187  8400 ????
    188  8400 ????	       00 a0	   _A0	      =	$A0
    189  8400 ????
    190  8400 ????	       00 9e	   _9E	      =	$9E
    191  8400 ????
    192  8400 ????	       00 9c	   _9C	      =	$9C
    193  8400 ????
    194  8400 ????	       00 9a	   _9A	      =	$9A
    195  8400 ????
    196  8400 ????	       00 98	   _98	      =	$98
    197  8400 ????
    198  8400 ????	       00 96	   _96	      =	$96
    199  8400 ????
    200  8400 ????	       00 94	   _94	      =	$94
    201  8400 ????
    202  8400 ????	       00 92	   _92	      =	$92
    203  8400 ????
    204  8400 ????	       00 90	   _90	      =	$90
    205  8400 ????
    206  8400 ????	       00 8e	   _8E	      =	$8E
    207  8400 ????
    208  8400 ????	       00 8c	   _8C	      =	$8C
    209  8400 ????
    210  8400 ????	       00 8a	   _8A	      =	$8A
    211  8400 ????
    212  8400 ????	       00 88	   _88	      =	$88
    213  8400 ????
    214  8400 ????	       00 86	   _86	      =	$86
    215  8400 ????
    216  8400 ????	       00 84	   _84	      =	$84
    217  8400 ????
    218  8400 ????	       00 82	   _82	      =	$82
    219  8400 ????
    220  8400 ????	       00 80	   _80	      =	$80
    221  8400 ????
    222  8400 ????	       00 7e	   _7E	      =	$7E
    223  8400 ????
    224  8400 ????	       00 7c	   _7C	      =	$7C
    225  8400 ????
    226  8400 ????	       00 7a	   _7A	      =	$7A
    227  8400 ????
    228  8400 ????	       00 78	   _78	      =	$78
    229  8400 ????
    230  8400 ????	       00 76	   _76	      =	$76
    231  8400 ????
    232  8400 ????	       00 74	   _74	      =	$74
    233  8400 ????
    234  8400 ????	       00 72	   _72	      =	$72
    235  8400 ????
    236  8400 ????	       00 70	   _70	      =	$70
    237  8400 ????
    238  8400 ????	       00 6e	   _6E	      =	$6E
    239  8400 ????
    240  8400 ????	       00 6c	   _6C	      =	$6C
    241  8400 ????
    242  8400 ????	       00 6a	   _6A	      =	$6A
    243  8400 ????
    244  8400 ????	       00 68	   _68	      =	$68
    245  8400 ????
    246  8400 ????	       00 66	   _66	      =	$66
    247  8400 ????
    248  8400 ????	       00 64	   _64	      =	$64
    249  8400 ????
    250  8400 ????	       00 62	   _62	      =	$62
    251  8400 ????
    252  8400 ????	       00 60	   _60	      =	$60
    253  8400 ????
    254  8400 ????	       00 5e	   _5E	      =	$5E
    255  8400 ????
    256  8400 ????	       00 5c	   _5C	      =	$5C
    257  8400 ????
    258  8400 ????	       00 5a	   _5A	      =	$5A
    259  8400 ????
    260  8400 ????	       00 58	   _58	      =	$58
    261  8400 ????
    262  8400 ????	       00 56	   _56	      =	$56
    263  8400 ????
    264  8400 ????	       00 54	   _54	      =	$54
    265  8400 ????
    266  8400 ????	       00 52	   _52	      =	$52
    267  8400 ????
    268  8400 ????	       00 50	   _50	      =	$50
    269  8400 ????
    270  8400 ????	       00 4e	   _4E	      =	$4E
    271  8400 ????
    272  8400 ????	       00 4c	   _4C	      =	$4C
    273  8400 ????
    274  8400 ????	       00 4a	   _4A	      =	$4A
    275  8400 ????
    276  8400 ????	       00 48	   _48	      =	$48
    277  8400 ????
    278  8400 ????	       00 46	   _46	      =	$46
    279  8400 ????
    280  8400 ????	       00 44	   _44	      =	$44
    281  8400 ????
    282  8400 ????	       00 42	   _42	      =	$42
    283  8400 ????
    284  8400 ????	       00 40	   _40	      =	$40
    285  8400 ????
    286  8400 ????	       00 3e	   _3E	      =	$3E
    287  8400 ????
    288  8400 ????	       00 3c	   _3C	      =	$3C
    289  8400 ????
    290  8400 ????	       00 3a	   _3A	      =	$3A
    291  8400 ????
    292  8400 ????	       00 38	   _38	      =	$38
    293  8400 ????
    294  8400 ????	       00 36	   _36	      =	$36
    295  8400 ????
    296  8400 ????	       00 34	   _34	      =	$34
    297  8400 ????
    298  8400 ????	       00 32	   _32	      =	$32
    299  8400 ????
    300  8400 ????	       00 30	   _30	      =	$30
    301  8400 ????
    302  8400 ????	       00 2e	   _2E	      =	$2E
    303  8400 ????
    304  8400 ????	       00 2c	   _2C	      =	$2C
    305  8400 ????
    306  8400 ????	       00 2a	   _2A	      =	$2A
    307  8400 ????
    308  8400 ????	       00 28	   _28	      =	$28
    309  8400 ????
    310  8400 ????	       00 26	   _26	      =	$26
    311  8400 ????
    312  8400 ????	       00 24	   _24	      =	$24
    313  8400 ????
    314  8400 ????	       00 22	   _22	      =	$22
    315  8400 ????
    316  8400 ????	       00 20	   _20	      =	$20
    317  8400 ????
    318  8400 ????	       00 1e	   _1E	      =	$1E
    319  8400 ????
    320  8400 ????	       00 1c	   _1C	      =	$1C
    321  8400 ????
    322  8400 ????	       00 1a	   _1A	      =	$1A
    323  8400 ????
    324  8400 ????	       00 18	   _18	      =	$18
    325  8400 ????
    326  8400 ????	       00 16	   _16	      =	$16
    327  8400 ????
    328  8400 ????	       00 14	   _14	      =	$14
    329  8400 ????
    330  8400 ????	       00 12	   _12	      =	$12
    331  8400 ????
    332  8400 ????	       00 10	   _10	      =	$10
    333  8400 ????
    334  8400 ????	       00 0e	   _0E	      =	$0E
    335  8400 ????
    336  8400 ????	       00 0c	   _0C	      =	$0C
    337  8400 ????
    338  8400 ????	       00 0a	   _0A	      =	$0A
    339  8400 ????
    340  8400 ????	       00 08	   _08	      =	$08
    341  8400 ????
    342  8400 ????	       00 06	   _06	      =	$06
    343  8400 ????
    344  8400 ????	       00 04	   _04	      =	$04
    345  8400 ????
    346  8400 ????	       00 02	   _02	      =	$02
    347  8400 ????
    348  8400 ????	       00 00	   _00	      =	$00
    349  8400 ????
    350  8400 ????	       00 05	   font       =	retroputer
    351  8400 ????
    352  8400 ????	       00 2b	   vblank_time =	43
    353  8400 ????	       00 25	   overscan_time =	37
    354  8400 ????	       00 07	   bs_mask    =	7
    355  8400 ????	       00 1c	   bankswitch =	28
    356  8400 ????	       1f f6	   bankswitch_hotspot =	$1FF6
    357  8400 ????	       00 02	   multisprite =	2
------- FILE c:\Users\tazrog\BrawdyBAS\brawdy.bas.asm
      9  0400					      ORG	$400
     10  0400					      RORG	$0
     11  0400					      incbin	DPCplus.arm
     12  1000					      ORG	$1000
     13  1000					      RORG	$1000
     14  1000					      incbin	custom/bin/custom2.bin
     15  1894							; assume custom2.bin > 128 bytes
     16  1894							; repeat $80
     17  1894							; .byte 0
     18  1894							; repend
     19  1894							; Provided under the CC0 license. See the included LICENSE.txt for details.
     20  1894
     21  1894							; feel free to modify the score graphics - just keep each digit 8 high
     22  1894							; and keep the conditional compilation stuff intact
     23  1894				  -	      ifconst	ROM2k
     24  1894				  -	      ORG	$F7AC-8
     25  1894					      else
     26  1894					      ifconst	bankswitch
     27  1894				  -	      if	bankswitch == 8
     28  1894				  -	      ORG	$2F94-bscode_length
     29  1894				  -	      RORG	$FF94-bscode_length
     30  1894					      endif
     31  1894				  -	      if	bankswitch == 16
     32  1894				  -	      ORG	$4F94-bscode_length
     33  1894				  -	      RORG	$FF94-bscode_length
     34  1894					      endif
     35  1894				  -	      if	bankswitch == 32
     36  1894				  -	      ORG	$8F94-bscode_length
     37  1894				  -	      RORG	$FF94-bscode_length
     38  1894					      endif
     39  1894				  -	      if	bankswitch == 64
     40  1894				  -	      ORG	$10F80-bscode_length
     41  1894				  -	      RORG	$1FF80-bscode_length
     42  1894					      endif
     43  1894				  -	      else
     44  1894				  -	      ORG	$FF9C
     45  1894					      endif
     46  1894					      endif
     47  1894
     48  1894							; font equates
     49  1894		       00 01	   .21stcentury =	1
     50  1894		       00 02	   alarmclock =	2
     51  1894		       00 03	   handwritten =	3
     52  1894		       00 04	   interrupted =	4
     53  1894		       00 05	   retroputer =	5
     54  1894		       00 06	   whimsey    =	6
     55  1894		       00 07	   tiny       =	7
     56  1894		       00 08	   hex	      =	8
     57  1894
     58  1894					      ifconst	font
     59  1894				  -	      if	font == hex
     60  1894				  -	      ORG	. - 48
     61  1894					      endif
     62  1894					      endif
     63  1894
     64  1894				   scoretable
     65  1894
     66  1894					      ifconst	font
     67  1894				  -	      if	font == .21stcentury
     68  1894				  -	      include	"score_graphics.asm.21stcentury"
     69  1894					      endif
     70  1894				  -	      if	font == alarmclock
     71  1894				  -	      include	"score_graphics.asm.alarmclock"
     72  1894					      endif
     73  1894				  -	      if	font == handwritten
     74  1894				  -	      include	"score_graphics.asm.handwritten"
     75  1894					      endif
     76  1894				  -	      if	font == interrupted
     77  1894				  -	      include	"score_graphics.asm.interrupted"
     78  1894					      endif
     79  1894					      if	font == retroputer
------- FILE score_graphics.asm.retroputer LEVEL 2 PASS 3
      0  1894					      include	"score_graphics.asm.retroputer"
      1  1894							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  1894
      3  1894		       7e		      .byte.b	%01111110
      4  1895		       46		      .byte.b	%01000110
      5  1896		       46		      .byte.b	%01000110
      6  1897		       46		      .byte.b	%01000110
      7  1898		       62		      .byte.b	%01100010
      8  1899		       62		      .byte.b	%01100010
      9  189a		       62		      .byte.b	%01100010
     10  189b		       7e		      .byte.b	%01111110
     11  189c
     12  189c		       38		      .byte.b	%00111000
     13  189d		       38		      .byte.b	%00111000
     14  189e		       38		      .byte.b	%00111000
     15  189f		       38		      .byte.b	%00111000
     16  18a0		       18		      .byte.b	%00011000
     17  18a1		       18		      .byte.b	%00011000
     18  18a2		       18		      .byte.b	%00011000
     19  18a3		       18		      .byte.b	%00011000
     20  18a4
     21  18a4		       7e		      .byte.b	%01111110
     22  18a5		       60		      .byte.b	%01100000
     23  18a6		       60		      .byte.b	%01100000
     24  18a7		       60		      .byte.b	%01100000
     25  18a8		       3e		      .byte.b	%00111110
     26  18a9		       02		      .byte.b	%00000010
     27  18aa		       42		      .byte.b	%01000010
     28  18ab		       7e		      .byte.b	%01111110
     29  18ac
     30  18ac		       7e		      .byte.b	%01111110
     31  18ad		       46		      .byte.b	%01000110
     32  18ae		       06		      .byte.b	%00000110
     33  18af		       06		      .byte.b	%00000110
     34  18b0		       3e		      .byte.b	%00111110
     35  18b1		       02		      .byte.b	%00000010
     36  18b2		       42		      .byte.b	%01000010
     37  18b3		       7e		      .byte.b	%01111110
     38  18b4
     39  18b4		       0c		      .byte.b	%00001100
     40  18b5		       0c		      .byte.b	%00001100
     41  18b6		       0c		      .byte.b	%00001100
     42  18b7		       7e		      .byte.b	%01111110
     43  18b8		       44		      .byte.b	%01000100
     44  18b9		       44		      .byte.b	%01000100
     45  18ba		       44		      .byte.b	%01000100
     46  18bb		       04		      .byte.b	%00000100
     47  18bc
     48  18bc		       7e		      .byte.b	%01111110
     49  18bd		       46		      .byte.b	%01000110
     50  18be		       06		      .byte.b	%00000110
     51  18bf		       06		      .byte.b	%00000110
     52  18c0		       7c		      .byte.b	%01111100
     53  18c1		       40		      .byte.b	%01000000
     54  18c2		       40		      .byte.b	%01000000
     55  18c3		       7e		      .byte.b	%01111110
     56  18c4
     57  18c4		       7e		      .byte.b	%01111110
     58  18c5		       46		      .byte.b	%01000110
     59  18c6		       46		      .byte.b	%01000110
     60  18c7		       46		      .byte.b	%01000110
     61  18c8		       7c		      .byte.b	%01111100
     62  18c9		       40		      .byte.b	%01000000
     63  18ca		       42		      .byte.b	%01000010
     64  18cb		       7e		      .byte.b	%01111110
     65  18cc
     66  18cc		       0c		      .byte.b	%00001100
     67  18cd		       0c		      .byte.b	%00001100
     68  18ce		       0c		      .byte.b	%00001100
     69  18cf		       0c		      .byte.b	%00001100
     70  18d0		       04		      .byte.b	%00000100
     71  18d1		       02		      .byte.b	%00000010
     72  18d2		       42		      .byte.b	%01000010
     73  18d3		       7e		      .byte.b	%01111110
     74  18d4
     75  18d4		       7e		      .byte.b	%01111110
     76  18d5		       46		      .byte.b	%01000110
     77  18d6		       46		      .byte.b	%01000110
     78  18d7		       46		      .byte.b	%01000110
     79  18d8		       7e		      .byte.b	%01111110
     80  18d9		       42		      .byte.b	%01000010
     81  18da		       42		      .byte.b	%01000010
     82  18db		       7e		      .byte.b	%01111110
     83  18dc
     84  18dc		       06		      .byte.b	%00000110
     85  18dd		       06		      .byte.b	%00000110
     86  18de		       06		      .byte.b	%00000110
     87  18df		       02		      .byte.b	%00000010
     88  18e0		       7e		      .byte.b	%01111110
     89  18e1		       42		      .byte.b	%01000010
     90  18e2		       42		      .byte.b	%01000010
     91  18e3		       7e		      .byte.b	%01111110
     92  18e4
     93  18e4				  -	      ifnconst	DPC_kernel_options
     94  18e4				  -
     95  18e4				  -	      .byte	%00000000
     96  18e4				  -	      .byte	%00000000
     97  18e4				  -	      .byte	%00000000
     98  18e4				  -	      .byte	%00000000
     99  18e4				  -	      .byte	%00000000
    100  18e4				  -	      .byte	%00000000
    101  18e4				  -	      .byte	%00000000
    102  18e4				  -	      .byte	%00000000
    103  18e4				  -
    104  18e4					      endif
------- FILE c:\Users\tazrog\BrawdyBAS\brawdy.bas.asm
     81  18e4					      endif
     82  18e4				  -	      if	font == whimsey
     83  18e4				  -	      include	"score_graphics.asm.whimsey"
     84  18e4					      endif
     85  18e4				  -	      if	font == tiny
     86  18e4				  -	      include	"score_graphics.asm.tiny"
     87  18e4					      endif
     88  18e4				  -	      if	font == hex
     89  18e4				  -	      include	"score_graphics.asm.hex"
     90  18e4					      endif
     91  18e4				  -	      else		; default font
     92  18e4				  -
     93  18e4				  -	      .byte	%00111100
     94  18e4				  -	      .byte	%01100110
     95  18e4				  -	      .byte	%01100110
     96  18e4				  -	      .byte	%01100110
     97  18e4				  -	      .byte	%01100110
     98  18e4				  -	      .byte	%01100110
     99  18e4				  -	      .byte	%01100110
    100  18e4				  -	      .byte	%00111100
    101  18e4				  -
    102  18e4				  -	      .byte	%01111110
    103  18e4				  -	      .byte	%00011000
    104  18e4				  -	      .byte	%00011000
    105  18e4				  -	      .byte	%00011000
    106  18e4				  -	      .byte	%00011000
    107  18e4				  -	      .byte	%00111000
    108  18e4				  -	      .byte	%00011000
    109  18e4				  -	      .byte	%00001000
    110  18e4				  -
    111  18e4				  -	      .byte	%01111110
    112  18e4				  -	      .byte	%01100000
    113  18e4				  -	      .byte	%01100000
    114  18e4				  -	      .byte	%00111100
    115  18e4				  -	      .byte	%00000110
    116  18e4				  -	      .byte	%00000110
    117  18e4				  -	      .byte	%01000110
    118  18e4				  -	      .byte	%00111100
    119  18e4				  -
    120  18e4				  -	      .byte	%00111100
    121  18e4				  -	      .byte	%01000110
    122  18e4				  -	      .byte	%00000110
    123  18e4				  -	      .byte	%00000110
    124  18e4				  -	      .byte	%00011100
    125  18e4				  -	      .byte	%00000110
    126  18e4				  -	      .byte	%01000110
    127  18e4				  -	      .byte	%00111100
    128  18e4				  -
    129  18e4				  -	      .byte	%00001100
    130  18e4				  -	      .byte	%00001100
    131  18e4				  -	      .byte	%01111110
    132  18e4				  -	      .byte	%01001100
    133  18e4				  -	      .byte	%01001100
    134  18e4				  -	      .byte	%00101100
    135  18e4				  -	      .byte	%00011100
    136  18e4				  -	      .byte	%00001100
    137  18e4				  -
    138  18e4				  -	      .byte	%00111100
    139  18e4				  -	      .byte	%01000110
    140  18e4				  -	      .byte	%00000110
    141  18e4				  -	      .byte	%00000110
    142  18e4				  -	      .byte	%00111100
    143  18e4				  -	      .byte	%01100000
    144  18e4				  -	      .byte	%01100000
    145  18e4				  -	      .byte	%01111110
    146  18e4				  -
    147  18e4				  -	      .byte	%00111100
    148  18e4				  -	      .byte	%01100110
    149  18e4				  -	      .byte	%01100110
    150  18e4				  -	      .byte	%01100110
    151  18e4				  -	      .byte	%01111100
    152  18e4				  -	      .byte	%01100000
    153  18e4				  -	      .byte	%01100010
    154  18e4				  -	      .byte	%00111100
    155  18e4				  -
    156  18e4				  -	      .byte	%00110000
    157  18e4				  -	      .byte	%00110000
    158  18e4				  -	      .byte	%00110000
    159  18e4				  -	      .byte	%00011000
    160  18e4				  -	      .byte	%00001100
    161  18e4				  -	      .byte	%00000110
    162  18e4				  -	      .byte	%01000010
    163  18e4				  -	      .byte	%00111110
    164  18e4				  -
    165  18e4				  -	      .byte	%00111100
    166  18e4				  -	      .byte	%01100110
    167  18e4				  -	      .byte	%01100110
    168  18e4				  -	      .byte	%01100110
    169  18e4				  -	      .byte	%00111100
    170  18e4				  -	      .byte	%01100110
    171  18e4				  -	      .byte	%01100110
    172  18e4				  -	      .byte	%00111100
    173  18e4				  -
    174  18e4				  -	      .byte	%00111100
    175  18e4				  -	      .byte	%01000110
    176  18e4				  -	      .byte	%00000110
    177  18e4				  -	      .byte	%00111110
    178  18e4				  -	      .byte	%01100110
    179  18e4				  -	      .byte	%01100110
    180  18e4				  -	      .byte	%01100110
    181  18e4				  -	      .byte	%00111100
    182  18e4				  -
    183  18e4				  -	      ifnconst	DPC_kernel_options
    184  18e4				  -
    185  18e4				  -	      .byte	%00000000
    186  18e4				  -	      .byte	%00000000
    187  18e4				  -	      .byte	%00000000
    188  18e4				  -	      .byte	%00000000
    189  18e4				  -	      .byte	%00000000
    190  18e4				  -	      .byte	%00000000
    191  18e4				  -	      .byte	%00000000
    192  18e4				  -	      .byte	%00000000
    193  18e4				  -
    194  18e4				  -	      endif
    195  18e4				  -
    196  18e4					      endif
    197  18e4
    198  18e4				  -	      ifconst	ROM2k
    199  18e4				  -	      ORG	$F7FC
    200  18e4					      else
    201  18e4					      ifconst	bankswitch
    202  18e4				  -	      if	bankswitch == 8
    203  18e4				  -	      ORG	$2FF4-bscode_length
    204  18e4				  -	      RORG	$FFF4-bscode_length
    205  18e4					      endif
    206  18e4				  -	      if	bankswitch == 16
    207  18e4				  -	      ORG	$4FF4-bscode_length
    208  18e4				  -	      RORG	$FFF4-bscode_length
    209  18e4					      endif
    210  18e4				  -	      if	bankswitch == 32
    211  18e4				  -	      ORG	$8FF4-bscode_length
    212  18e4				  -	      RORG	$FFF4-bscode_length
    213  18e4					      endif
    214  18e4				  -	      if	bankswitch == 64
    215  18e4				  -	      ORG	$10FE0-bscode_length
    216  18e4				  -	      RORG	$1FFE0-bscode_length
    217  18e4					      endif
    218  18e4				  -	      else
    219  18e4				  -	      ORG	$FFFC
    220  18e4					      endif
    221  18e4					      endif
    222  18e4							; Provided under the CC0 license. See the included LICENSE.txt for details.
    223  18e4
    224  18e4				   start
    225  18e4		       78		      sei
    226  18e5		       d8		      cld
    227  18e6		       a0 00		      ldy	#0
    228  18e8		       a5 d0		      lda	$D0
    229  18ea		       c9 2c		      cmp	#$2C	;check RAM location #1
    230  18ec		       d0 07		      bne	MachineIs2600
    231  18ee		       a5 d1		      lda	$D1
    232  18f0		       c9 a9		      cmp	#$A9	;check RAM location #2
    233  18f2		       d0 01		      bne	MachineIs2600
    234  18f4		       88		      dey
    235  18f5				   MachineIs2600
    236  18f5		       a2 00		      ldx	#0
    237  18f7		       8a		      txa
    238  18f8				   clearmem
    239  18f8		       e8		      inx
    240  18f9		       9a		      txs
    241  18fa		       48		      pha
    242  18fb		       d0 fb		      bne	clearmem
    243  18fd		       84 cb		      sty	temp1
    244  18ff		       a2 08		      ldx	#8
    245  1901		       86 ca		      stx	playfieldpos
    246  1903		       8e 58 10 	      stx	FASTFETCH
    247  1906		       a2 08		      ldx	#8
    248  1908		       a9 e0		      lda	#224
    249  190a				   inityloop
    250  190a		       95 9a		      sta	player1y,x
    251  190c		       ca		      dex
    252  190d		       10 fb		      bpl	inityloop
    253  190f
    254  190f		       a9 01		      lda	#1
    255  1911		       85 0a		      sta	CTRLPF
    256  1913		       ad 84 02 	      lda	INTIM
    257  1916		       8d 71 10 	      sta	RWRITE0
    258  1919		       a9 00		      lda	#0
    259  191b		       8d 38 10 	      STA	DF0FRACINC
    260  191e		       8d 39 10 	      STA	DF1FRACINC
    261  1921		       8d 3a 10 	      STA	DF2FRACINC
    262  1924		       8d 3b 10 	      STA	DF3FRACINC
    263  1927		       8d 3c 10 	      STA	DF4FRACINC
    264  192a		       8d 3e 10 	      STA	DF6FRACINC
    265  192d		       a9 a5		      lda	#<USERSTACK
    266  192f		       8d 57 10 	      STA	DF7LOW
    267  1932		       a9 0d		      lda	#(>USERSTACK) & $0F
    268  1934		       8d 6f 10 	      STA	DF7HI
    269  1937		       a9 ff		      lda	#255
    270  1939		       8d 5a 10 	      sta	CALLFUNCTION	; zero-fill fetcher
    271  193c
    272  193c		       a9 1f		      lda	#>(game-1)
    273  193e		       48		      pha
    274  193f		       a9 96		      lda	#<(game-1)
    275  1941		       48		      pha
    276  1942		       48		      pha
    277  1943		       48		      pha
    278  1944		       a2 01		      ldx	#1
    279  1946		       4c ee df 	      jmp	BS_jsr
    280  1949				   drawscreen
    281  1949		       a9 01		      lda	#1
    282  194b		       85 2c		      sta	CXCLR
    283  194d		       85 09		      sta	COLUBK	; REVENG - don't start with the lastline color
    284  194f
    285  194f				   fufu
    286  194f		       ad 84 02 	      lda	INTIM
    287  1952		       30 fb		      bmi	fufu
    288  1954
      0  1954					      VERTICAL_SYNC
      1  1954		       a9 02		      LDA	#$02
      2  1956		       85 02		      STA	WSYNC
      3  1958		       85 00		      STA	VSYNC
      4  195a		       85 02		      STA	WSYNC
      5  195c		       85 02		      STA	WSYNC
      6  195e		       4a		      LSR
      7  195f		       85 02		      STA	WSYNC
      8  1961		       85 00		      STA	VSYNC
    290  1963
    291  1963		       a9 a9		      lda	#41+128	;was 37 - do more w/c code
    292  1965		       8d 96 02 	      sta	TIM64T
    293  1968
    294  1968							; adjust for pfpos?
    295  1968
    296  1968							; set zero to properly enter C code
    297  1968		       a9 a4		      lda	#<C_function
    298  196a		       8d 50 10 	      sta	DF0LOW
    299  196d		       a9 01		      lda	#(>C_function) & $0F
    300  196f		       8d 68 10 	      sta	DF0HI
    301  1972		       a9 00		      lda	#0
    302  1974		       8d 78 10 	      sta	DF0WRITE
    303  1977
    304  1977							; REVENG - pass the number of vsprites we want...
    305  1977					      ifnconst	dpcspritemax
    306  1977				  -	      ifconst	readpaddle
    307  1977				  -	      lda	#8
    308  1977					      else
    309  1977		       a9 09		      lda	#9
    310  1979					      endif
    311  1979				  -	      else
    312  1979				  -	      lda	#dpcspritemax
    313  1979					      endif
    314  1979		       8d 78 10 	      sta	DF0WRITE
    315  197c
    316  197c		       a5 80		      lda	player0x
    317  197e		       85 8f		      sta	player0xcoll	; detect p0x colls
    318  1980
    319  1980							; copy RAM to fetcher for C-code
    320  1980		       a9 e2		      lda	#<(CcodeData + RAMcopylength)
    321  1982		       8d 50 10 	      sta	DF0LOW
    322  1985		       a9 01		      lda	#(>(CcodeData + RAMcopylength)) & $0F
    323  1987		       8d 68 10 	      sta	DF0HI
    324  198a		       a2 39		      ldx	#RAMcopylength-1
    325  198c				   copy2fetcherloop
    326  198c		       b5 85		      lda	RAMcopybegin,x
    327  198e		       8d 60 10 	      sta	DF0PUSH
    328  1991		       ca		      dex
    329  1992		       10 f8		      bpl	copy2fetcherloop
    330  1994
    331  1994		       a9 ff		      lda	#255
    332  1996		       8d 5a 10 	      sta	CALLFUNCTION
    333  1999
    334  1999							; copy modified data back (just need first 6 bytes, which is sprite sort data)
    335  1999		       a2 ed		      ldx	#256-19
    336  199b				   copyfromfetcherloop
    337  199b		       ad 08 10 	      lda	DF0DATA
    338  199e		       95 98		      sta	RAMcopybegin+19,x
    339  19a0		       e8		      inx
    340  19a1		       30 f8		      bmi	copyfromfetcherloop
    341  19a3
    342  19a3		       20 3a 1e 	      jsr	kernel_setup
    343  19a6		       85 02		      sta	WSYNC
    344  19a8		       a0 80		      ldy	#$80
    345  19aa		       84 20		      sty	HMP0
    346  19ac		       84 21		      sty	HMP1
    347  19ae		       84 22		      sty	HMM0
    348  19b0		       84 23		      sty	HMM1
    349  19b2		       84 24		      sty	HMBL
    350  19b4
    351  19b4							; run possible vblank bB code
    352  19b4				  -	      ifconst	vblank_bB_code
    353  19b4				  -	      jsr	vblank_bB_code
    354  19b4					      endif
    355  19b4
    356  19b4		       20 02 1d 	      jsr	set_fetchers
    357  19b7
    358  19b7		       a2 07		      ldx	#7
    359  19b9				   setloopfrac
    360  19b9		       bd 7d 1d 	      lda	dffraclow,x
    361  19bc		       9d 28 10 	      sta	DF0FRACLOW,x
    362  19bf		       bd 85 1d 	      lda	dffrachi,x
    363  19c2		       9d 30 10 	      sta	DF0FRACHI,x
    364  19c5		       ca		      dex
    365  19c6		       10 f1		      bpl	setloopfrac
    366  19c8							; lda #255
    367  19c8		       8e 3d 10 	      STx	DF5FRACINC	; x=255 right now
    368  19cb		       8e 3f 10 	      STx	DF7FRACINC
    369  19ce		       ad 1d 10 	      lda	DF5FRACDATA	; priming read
    370  19d1		       ad 1f 10 	      lda	DF7FRACDATA	; priming read
    371  19d4
    372  19d4		       a6 85		      ldx	SpriteGfxIndex
    373  19d6		       b5 af		      lda	_NUSIZ1,x	; top NUSIZ/REFP
    374  19d8		       85 05		      sta	NUSIZ1
    375  19da		       85 0c		      sta	REFP1
    376  19dc
    377  19dc							;REVENG - allow P0 to wrap at the top
    378  19dc				   startwrapfix
    379  19dc		       a9 ff		      lda	#255
    380  19de		       85 cc		      sta	temp2
    381  19e0		       18		      clc
    382  19e1		       a5 99		      lda	player0y
    383  19e3		       65 a5		      adc	player0height
    384  19e5		       38		      sec
    385  19e6		       c5 a5		      cmp	player0height
    386  19e8		       90 04		      bcc	skipwrapfix
    387  19ea		       a9 00		      lda	#0
    388  19ec		       85 cc		      sta	temp2
    389  19ee				   skipwrapfix
    390  19ee
    391  19ee		       38		      sec
    392  19ef		       a9 08		      lda	#<P0GFX
    393  19f1		       e5 99		      sbc	player0y
    394  19f3		       8d 52 10 	      sta	DF2LOW
    395  19f6		       a9 d4		      lda	#>P0GFX
    396  19f8							;sbc #0
    397  19f8		       e5 cc		      sbc	temp2
    398  19fa		       8d 6a 10 	      sta	DF2HI
    399  19fd		       a9 07		      lda	#<(P0GFX-1)
    400  19ff		       8d 42 10 	      sta	DF2TOP
    401  1a02		       38		      sec
    402  1a03		       65 a5		      adc	player0height
    403  1a05		       8d 4a 10 	      sta	DF2BOT
    404  1a08
    405  1a08							;REVENG - 1/2 of the COLUM0 fix. the rest is in main.c
    406  1a08		       a9 08		      lda	#<(P0COLOR)
    407  1a0a		       8d 50 10 	      sta	DF0LOW
    408  1a0d		       85 cc		      sta	temp2
    409  1a0f		       a9 d5		      lda	#>(P0COLOR)
    410  1a11		       8d 68 10 	      sta	DF0HI
    411  1a14
    412  1a14							; ball
    413  1a14		       a9 07		      lda	#<(P1GFX-1)
    414  1a16		       18		      clc
    415  1a17		       65 c1		      adc	bally
    416  1a19		       8d 43 10 	      sta	DF3TOP
    417  1a1c		       38		      sec
    418  1a1d		       65 c4		      adc	ballheight
    419  1a1f		       8d 4b 10 	      sta	DF3BOT
    420  1a22
    421  1a22							; missile0
    422  1a22		       a5 cc		      lda	temp2
    423  1a24		       18		      clc
    424  1a25		       65 bf		      adc	missile0y
    425  1a27		       8d 40 10 	      sta	DF0TOP
    426  1a2a		       38		      sec
    427  1a2b		       65 c2		      adc	missile0height
    428  1a2d		       8d 48 10 	      sta	DF0BOT
    429  1a30
    430  1a30
    431  1a30				   fuu
    432  1a30		       ad 84 02 	      lda	INTIM
    433  1a33		       30 fb		      bmi	fuu
    434  1a35		       85 02		      sta	WSYNC
    435  1a37							;     ldy #$80
    436  1a37							;     sty HMP0
    437  1a37							;     sty HMP1
    438  1a37							;     sty HMM0 
    439  1a37							;     sty HMM1
    440  1a37							;     sty HMBL
    441  1a37							; relocated code above prior to vblank, to allow for Cosmic Ark starfield
    442  1a37							; and/or skewed players
      0  1a37					      sleep	17
      1  1a37				   .CYCLES    SET	17
      2  1a37
      3  1a37				  -	      IF	.CYCLES < 2
      4  1a37				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1a37				  -	      ERR
      6  1a37					      ENDIF
      7  1a37
      8  1a37					      IF	.CYCLES & 1
      9  1a37					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1a37		       04 00		      nop	0
     11  1a39				  -	      ELSE
     12  1a39				  -	      bit	VSYNC
     13  1a39					      ENDIF
     14  1a39				   .CYCLES    SET	.CYCLES - 3
     15  1a39					      ENDIF
     16  1a39
     17  1a39					      REPEAT	.CYCLES / 2
     18  1a39		       ea		      nop
     17  1a39					      REPEND
     18  1a3a		       ea		      nop
     17  1a3a					      REPEND
     18  1a3b		       ea		      nop
     17  1a3b					      REPEND
     18  1a3c		       ea		      nop
     17  1a3c					      REPEND
     18  1a3d		       ea		      nop
     17  1a3d					      REPEND
     18  1a3e		       ea		      nop
     17  1a3e					      REPEND
     18  1a3f		       ea		      nop
     19  1a40					      REPEND
    444  1a40
    445  1a40		       a9 d3		      lda	#KERNEL_LINES
    446  1a42		       8d 96 02 	      sta	TIM64T
    447  1a45		       a9 01		      lda	#1
    448  1a47		       85 27		      sta	VDELBL
    449  1a49		       85 25		      sta	VDELP0
    450  1a4b
    451  1a4b							; missile1
    452  1a4b		       a9 07		      lda	#<(P1COLOR-1)
    453  1a4d		       18		      clc
    454  1a4e		       65 c0		      adc	missile1y
    455  1a50		       8d 41 10 	      sta	DF1TOP
    456  1a53		       38		      sec
    457  1a54		       65 c3		      adc	missile1height
    458  1a56		       8d 49 10 	      sta	DF1BOT
    459  1a59
    460  1a59		       a9 00		      lda	#0
    461  1a5b		       85 01		      sta	VBLANK
    462  1a5d		       8d 58 10 	      sta	FASTFETCH
    463  1a60							;sleep 7
    464  1a60		       a9 12		      lda	#<DF2DATAW	; REVENG - added so GRP0 is at TOP
    465  1a62		       85 1b		      STA	GRP0	; 36 (VDEL)   ; ""
      0  1a64					      sleep	2	; ""
      1  1a64				   .CYCLES    SET	2
      2  1a64
      3  1a64				  -	      IF	.CYCLES < 2
      4  1a64				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1a64				  -	      ERR
      6  1a64					      ENDIF
      7  1a64
      8  1a64				  -	      IF	.CYCLES & 1
      9  1a64				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1a64				  -	      nop	0
     11  1a64				  -	      ELSE
     12  1a64				  -	      bit	VSYNC
     13  1a64				  -	      ENDIF
     14  1a64				  -.CYCLES    SET	.CYCLES - 3
     15  1a64					      ENDIF
     16  1a64
     17  1a64					      REPEAT	.CYCLES / 2
     18  1a64		       ea		      nop
     19  1a65					      REPEND
    467  1a65
    468  1a65		       a9 18		      lda	#<DF0FRACDATA
    469  1a67		       85 0e		      sta	PF1	; (PF1L)
    470  1a69
    471  1a69							; enter at cycle ??
    472  1a69				   loop
    473  1a69		       a9 08		      lda	#<DF0DATA	;74
    474  1a6b		       85 06		      STA	COLUP0	; 1
    475  1a6d		       a9 09		      lda	#<DF1DATA	;3
    476  1a6f				   loop2
    477  1a6f		       85 07		      STA	COLUP1	; 6
    478  1a71		       a9 0b		      lda	#<DF3DATA
    479  1a73		       85 1c		      STA	GRP1	; 11
    480  1a75		       a9 20		      lda	#<DF0FLAG
    481  1a77		       85 1d		      STA	ENAM0	; 16
    482  1a79
    483  1a79		       a9 1e		      lda	#<DF6FRACDATA
    484  1a7b		       85 09		      sta	COLUBK	; 21
    485  1a7d		       a9 1c		      lda	#<DF4FRACDATA
    486  1a7f		       85 08		      sta	COLUPF	; 26
    487  1a81		       a9 19		      lda	#<DF1FRACDATA
    488  1a83		       85 0f		      sta	PF2	; 31 (PF2L)
    489  1a85				   loop3
    490  1a85		       a9 12		      lda	#<DF2DATAW
    491  1a87		       85 1b		      STA	GRP0	; 36 (VDEL)
    492  1a89		       a9 23		      lda	#<DF3FLAG
    493  1a8b		       85 1f		      STA	ENABL	; 41 (VDEL)
    494  1a8d		       a2 70		      ldx	#$70	;in case we get kernel 6
    495  1a8f		       a9 1a		      lda	#<DF2FRACDATA	;45
    496  1a91		       85 0f		      sta	PF2	; 48
    497  1a93		       84 21		      sty	HMP1	; 51 ; from prev. cycle: $80=nomove
    498  1a95		       a9 1b		      lda	#<DF3FRACDATA	;53
    499  1a97		       85 0e		      sta	PF1	; 56
    500  1a99		       a9 0c		      lda	#<DF4DATA	; 58 this is the repos info
    501  1a9b		       f0 4d		      beq	repo	;60/61
    502  1a9d				   norepo		; 60
    503  1a9d		       a8		      tay		; 62
    504  1a9e		       a9 08		      lda	#<DF0DATA	; 64
    505  1aa0
    506  1aa0		       ae 84 02 	      ldx	INTIM	; 68 timed for 192 lines
    507  1aa3		       f0 60		      beq	exitkernel	; 70/71
    508  1aa5		       85 2a		      sta	HMOVE	; 73
    509  1aa7
    510  1aa7		       85 06		      STA	COLUP0	; 0
    511  1aa9		       a9 09		      lda	#<DF1DATA	;2
    512  1aab		       85 07		      STA	COLUP1	;5
    513  1aad		       a9 0b		      lda	#<DF3DATA
    514  1aaf		       85 1c		      STA	GRP1	; 10
    515  1ab1		       a9 21		      lda	#<DF1FLAG
    516  1ab3		       85 1e		      STA	ENAM1	; 15
    517  1ab5		       a9 18		      lda	#<DF0FRACDATA
    518  1ab7		       85 0e		      sta	PF1	; 20 (PF1L)
    519  1ab9		       a9 19		      lda	#<DF1FRACDATA
    520  1abb		       85 0f		      sta	PF2	; 25 (PF2L)
    521  1abd		       a9 12		      lda	#<DF2DATAW
    522  1abf		       85 1b		      STA	GRP0	; 30 (VDEL)
    523  1ac1		       a9 23		      lda	#<DF3FLAG
    524  1ac3		       85 1f		      STA	ENABL	; 35 (VDEL)
    525  1ac5		       88		      dey		; 37
    526  1ac6		       8c 64 10 	      STY	DF4PUSH	; 41
    527  1ac9		       a0 80		      ldy	#$80	; 43 no movement next line
    528  1acb		       a9 1a		      lda	#<DF2FRACDATA	;45
    529  1acd		       85 0f		      sta	PF2	; 48
    530  1acf		       84 21		      sty	HMP1	; 51 ; from prev. cycle: $80=nomove
    531  1ad1		       a9 1b		      lda	#<DF3FRACDATA	;53
    532  1ad3		       85 0e		      sta	PF1	; 56
    533  1ad5				  -	      ifnconst	DPC_kernel_options
    534  1ad5				  -			;sleep 8 ; REVENG - timing is off - results in a garbled screen
    535  1ad5				  -	      sleep	5	; this is better
    536  1ad5					      else
    537  1ad5		       24 43		      bit	DPC_kernel_options
    538  1ad7					      if	(DPC_kernel_options > $3F)
    539  1ad7		       30 09		      bmi	COLfound
    540  1ad9				  -	      else
    541  1ad9				  -	      bpl	COLfound
    542  1ad9					      endif
    543  1ad9					      endif
    544  1ad9		       86 ce		      stx	temp4	; +3
    545  1adb
    546  1adb				   getbackearly
    547  1adb		       a9 18		      lda	#<DF0FRACDATA	; +2
    548  1add		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    549  1adf		       4c 69 5a 	      JMP	loop+$4000	; 72
    550  1ae2
    551  1ae2					      ifconst	DPC_kernel_options
    552  1ae2				   COLfound
    553  1ae2		       ad 18 10 	      lda	DF0FRACDATA
    554  1ae5		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    555  1ae7		       4c 69 5a 	      JMP	loop+$4000	; 72
    556  1aea					      endif
    557  1aea
    558  1aea				   repo
    559  1aea		       ac 1f 10 	      ldy	DF7FRACDATA	; 65
    560  1aed		       a9 18		      lda	#<DF0FRACDATA	; 67 preload PF1L for next line
    561  1aef				  -	      if	((>repo) > (>norepo))
    562  1aef				  -	      STA	PF1
    563  1aef					      else
    564  1aef		       8d 0e 00 	      STA.w	PF1	; 71 ; sta.w if page doesn't wrap
    565  1af2					      endif
    566  1af2		       a9 08		      lda	#<DF0DATA	;73
    567  1af4		       85 06		      STA	COLUP0	; 0
    568  1af6		       a9 09		      lda	#<DF1DATA
    569  1af8		       85 07		      STA	COLUP1	;5
    570  1afa		       a9 0b		      lda	#<DF3DATA
    571  1afc		       85 1c		      STA	GRP1	; 10
    572  1afe		       a9 21		      lda	#<DF1FLAG
    573  1b00		       85 1e		      STA	ENAM1	; 15
    574  1b02							; repos info holds HMMx
    575  1b02		       6c 0d 10 	      jmp	(DF5DATA)	; 20 grabs df6/df7=lo/hi
    576  1b05
    577  1b05				   exitkernel		; exit the kernel
    578  1b05		       20 c9 5e 	      jsr	scorekernel+$4000	; 1
    579  1b08				   exit
    580  1b08		       a2 ff		      ldx	#255
    581  1b0a		       8e 58 10 	      stx	FASTFETCH
    582  1b0d		       85 02		      sta	WSYNC
    583  1b0f				  -	      ifconst	qtcontroller
    584  1b0f				  -	      lda	qtcontroller
    585  1b0f				  -	      lsr		; bit 0 in carry
    586  1b0f				  -	      lda	#4
    587  1b0f				  -	      ror		; carry into top of A
    588  1b0f					      else
    589  1b0f		       a9 02		      lda	#2
    590  1b11					      endif		; qtcontroller
    591  1b11		       85 01		      STA	VBLANK
    592  1b13		       a9 a7		      lda	#OVERSCAN_LINES
    593  1b15		       8d 96 02 	      sta	TIM64T
    594  1b18		       38		      sec
    595  1b19		       a9 d3		      lda	#KERNEL_LINES
    596  1b1b		       e5 ce		      sbc	temp4
    597  1b1d		       aa		      tax
    598  1b1e		       4a		      lsr
    599  1b1f		       4a		      lsr
    600  1b20		       85 cd		      sta	temp3	; div4
    601  1b22		       4a		      lsr
    602  1b23		       4a		      lsr
    603  1b24		       85 cc		      sta	temp2	; div16
    604  1b26		       4a		      lsr
    605  1b27		       85 cb		      sta	temp1	; div32
    606  1b29		       18		      clc
    607  1b2a		       8a		      txa
    608  1b2b		       65 cc		      adc	temp2
    609  1b2d		       65 cb		      adc	temp1
    610  1b2f		       38		      sec
    611  1b30		       e5 cd		      sbc	temp3
    612  1b32		       85 ce		      sta	temp4	; approx line of first pf coll
      0  1b34					      RETURN
      1  1b34				  -	      ifnconst	bankswitch
      2  1b34				  -	      rts
      3  1b34					      else
      4  1b34		       4c e0 df 	      jmp	BS_return
      5  1b37					      endif
    614  1b37
    615  1b37							; jmp exit
    616  1b37
    617  1b37							; kernels resp1 23/28/33/38/43/48/53/58/63/68/73
    618  1b37
    619  1b37				   kernel1
    620  1b37		       85 11		      sta	RESP1	; 23
    621  1b39		       a9 12		      lda	#<DF2DATAW
    622  1b3b		       85 1b		      STA	GRP0	; 28 (VDEL)
    623  1b3d		       a9 19		      lda	#<DF1FRACDATA
    624  1b3f		       85 0f		      STA	PF2	; 33
    625  1b41		       a9 23		      lda	#<DF3FLAG
    626  1b43		       85 1f		      STA	ENABL	; 38 (VDEL)
      0  1b45					      sleep	5
      1  1b45				   .CYCLES    SET	5
      2  1b45
      3  1b45				  -	      IF	.CYCLES < 2
      4  1b45				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b45				  -	      ERR
      6  1b45					      ENDIF
      7  1b45
      8  1b45					      IF	.CYCLES & 1
      9  1b45					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b45		       04 00		      nop	0
     11  1b47				  -	      ELSE
     12  1b47				  -	      bit	VSYNC
     13  1b47					      ENDIF
     14  1b47				   .CYCLES    SET	.CYCLES - 3
     15  1b47					      ENDIF
     16  1b47
     17  1b47					      REPEAT	.CYCLES / 2
     18  1b47		       ea		      nop
     19  1b48					      REPEND
    628  1b48		       a9 1a		      lda	#<DF2FRACDATA	;45
    629  1b4a		       85 0f		      sta	PF2	; 48
    630  1b4c		       a9 1b		      lda	#<DF3FRACDATA	;50
    631  1b4e		       85 0e		      sta	PF1	; 53
    632  1b50		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    633  1b52		       85 05		      STA	NUSIZ1	; 58
    634  1b54		       85 0c		      STA	REFP1	; 61
    635  1b56		       4c db 1a 	      jmp	getbackearly	;64
    636  1b59
    637  1b59				   kernel2
    638  1b59		       a9 12		      lda	#<DF2DATAW
    639  1b5b		       85 1b		      STA	GRP0	; 25 (VDEL)
    640  1b5d		       85 11		      sta	RESP1	;28
    641  1b5f		       a9 19		      lda	#<DF1FRACDATA
    642  1b61		       85 0f		      STA	PF2	; 33
    643  1b63		       a9 23		      lda	#<DF3FLAG
    644  1b65		       85 1f		      STA	ENABL	; 38 (VDEL)
      0  1b67					      sleep	5
      1  1b67				   .CYCLES    SET	5
      2  1b67
      3  1b67				  -	      IF	.CYCLES < 2
      4  1b67				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b67				  -	      ERR
      6  1b67					      ENDIF
      7  1b67
      8  1b67					      IF	.CYCLES & 1
      9  1b67					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b67		       04 00		      nop	0
     11  1b69				  -	      ELSE
     12  1b69				  -	      bit	VSYNC
     13  1b69					      ENDIF
     14  1b69				   .CYCLES    SET	.CYCLES - 3
     15  1b69					      ENDIF
     16  1b69
     17  1b69					      REPEAT	.CYCLES / 2
     18  1b69		       ea		      nop
     19  1b6a					      REPEND
    646  1b6a		       a9 1a		      lda	#<DF2FRACDATA	;45
    647  1b6c		       85 0f		      sta	PF2	; 48
    648  1b6e		       a9 1b		      lda	#<DF3FRACDATA	;50
    649  1b70		       85 0e		      sta	PF1	; 53
    650  1b72		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    651  1b74		       85 05		      STA	NUSIZ1
    652  1b76		       85 0c		      STA	REFP1
    653  1b78		       4c db 1a 	      jmp	getbackearly	;64
    654  1b7b
    655  1b7b				   kernel3
    656  1b7b		       a9 12		      lda	#<DF2DATAW
    657  1b7d		       85 1b		      STA	GRP0	; 25 (VDEL)
    658  1b7f		       a9 19		      lda	#<DF1FRACDATA
    659  1b81		       85 0f		      STA	PF2	; 30
    660  1b83		       85 11		      sta	RESP1	;33
    661  1b85		       a9 23		      lda	#<DF3FLAG
    662  1b87		       85 1f		      STA	ENABL	; 38 (VDEL)
      0  1b89					      sleep	5
      1  1b89				   .CYCLES    SET	5
      2  1b89
      3  1b89				  -	      IF	.CYCLES < 2
      4  1b89				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b89				  -	      ERR
      6  1b89					      ENDIF
      7  1b89
      8  1b89					      IF	.CYCLES & 1
      9  1b89					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b89		       04 00		      nop	0
     11  1b8b				  -	      ELSE
     12  1b8b				  -	      bit	VSYNC
     13  1b8b					      ENDIF
     14  1b8b				   .CYCLES    SET	.CYCLES - 3
     15  1b8b					      ENDIF
     16  1b8b
     17  1b8b					      REPEAT	.CYCLES / 2
     18  1b8b		       ea		      nop
     19  1b8c					      REPEND
    664  1b8c		       a9 1a		      lda	#<DF2FRACDATA	;45
    665  1b8e		       85 0f		      sta	PF2	; 48
    666  1b90		       a9 1b		      lda	#<DF3FRACDATA	;50
    667  1b92		       85 0e		      sta	PF1	; 53
    668  1b94		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    669  1b96		       85 05		      STA	NUSIZ1
    670  1b98		       85 0c		      STA	REFP1
    671  1b9a		       4c db 1a 	      JMP	getbackearly	; 64
    672  1b9d
    673  1b9d				   kernel4
    674  1b9d		       a9 12		      lda	#<DF2DATAW
    675  1b9f		       85 1b		      STA	GRP0	; 25 (VDEL)
    676  1ba1		       a9 23		      lda	#<DF3FLAG
    677  1ba3		       85 1f		      STA	ENABL	; 30(VDEL)
    678  1ba5		       a9 19		      lda	#<DF1FRACDATA
    679  1ba7		       85 0f		      STA	PF2	; 35
    680  1ba9		       85 11		      sta	RESP1	;38
      0  1bab					      sleep	5
      1  1bab				   .CYCLES    SET	5
      2  1bab
      3  1bab				  -	      IF	.CYCLES < 2
      4  1bab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1bab				  -	      ERR
      6  1bab					      ENDIF
      7  1bab
      8  1bab					      IF	.CYCLES & 1
      9  1bab					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1bab		       04 00		      nop	0
     11  1bad				  -	      ELSE
     12  1bad				  -	      bit	VSYNC
     13  1bad					      ENDIF
     14  1bad				   .CYCLES    SET	.CYCLES - 3
     15  1bad					      ENDIF
     16  1bad
     17  1bad					      REPEAT	.CYCLES / 2
     18  1bad		       ea		      nop
     19  1bae					      REPEND
    682  1bae		       a9 1a		      lda	#<DF2FRACDATA	;45
    683  1bb0		       85 0f		      sta	PF2	; 48
    684  1bb2		       a9 1b		      lda	#<DF3FRACDATA	;50
    685  1bb4		       85 0e		      sta	PF1	; 53
    686  1bb6		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    687  1bb8		       85 05		      STA	NUSIZ1	; 58
    688  1bba		       85 0c		      STA	REFP1	; 61
    689  1bbc		       4c db 1a 	      JMP	getbackearly	; 64
    690  1bbf
    691  1bbf				   kernel5
    692  1bbf		       a9 12		      lda	#<DF2DATAW
    693  1bc1		       85 1b		      STA	GRP0	; (VDEL)
    694  1bc3		       a9 23		      lda	#<DF3FLAG
    695  1bc5		       85 1f		      STA	ENABL	; (VDEL)
    696  1bc7		       a9 19		      lda	#<DF1FRACDATA
    697  1bc9		       85 0f		      STA	PF2	; 35
      0  1bcb					      sleep	5
      1  1bcb				   .CYCLES    SET	5
      2  1bcb
      3  1bcb				  -	      IF	.CYCLES < 2
      4  1bcb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1bcb				  -	      ERR
      6  1bcb					      ENDIF
      7  1bcb
      8  1bcb					      IF	.CYCLES & 1
      9  1bcb					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1bcb		       04 00		      nop	0
     11  1bcd				  -	      ELSE
     12  1bcd				  -	      bit	VSYNC
     13  1bcd					      ENDIF
     14  1bcd				   .CYCLES    SET	.CYCLES - 3
     15  1bcd					      ENDIF
     16  1bcd
     17  1bcd					      REPEAT	.CYCLES / 2
     18  1bcd		       ea		      nop
     19  1bce					      REPEND
    699  1bce		       85 11		      sta	RESP1	;43
    700  1bd0		       a9 1a		      lda	#<DF2FRACDATA	;45
    701  1bd2		       85 0f		      sta	PF2	; 48
    702  1bd4		       a9 1b		      lda	#<DF3FRACDATA	;50
    703  1bd6		       85 0e		      sta	PF1	; 53
    704  1bd8		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    705  1bda		       85 05		      STA	NUSIZ1
    706  1bdc		       85 0c		      STA	REFP1
    707  1bde		       4c db 1a 	      JMP	getbackearly	; 64
    708  1be1
    709  1be1				   kernel6
    710  1be1		       a9 12		      lda	#<DF2DATAW
    711  1be3		       85 1b		      STA	GRP0	; 25 (VDEL)
    712  1be5		       a9 23		      lda	#<DF3FLAG
    713  1be7		       85 1f		      STA	ENABL	; 30 (VDEL)
    714  1be9		       a9 19		      lda	#<DF1FRACDATA
    715  1beb		       85 0f		      STA	PF2	; 35
    716  1bed		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    717  1bef		       85 05		      STA	NUSIZ1	; 40
    718  1bf1		       85 0c		      STA	REFP1	; 43
    719  1bf3		       a9 1a		      lda	#<DF2FRACDATA	;45
    720  1bf5		       85 0f		      sta	PF2	; 48
    721  1bf7		       a9 1b		      lda	#<DF3FRACDATA	;50
    722  1bf9		       85 11		      sta	RESP1	;53
    723  1bfb							; do a move right by 15
    724  1bfb		       85 0e		      sta	PF1	; 56
    725  1bfd		       86 21		      stx	HMP1	; 59
    726  1bff		       a9 19		      lda	#<DF1FRACDATA
    727  1c01		       85 0f		      sta	PF2	; 64 (PF2L)
    728  1c03		       a9 18		      lda	#<DF0FRACDATA
    729  1c05		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    730  1c07		       a9 08		      lda	#<DF0DATA	; 71
    731  1c09		       85 2a		      sta	HMOVE	; 74 adjust to +15 right
    732  1c0b
    733  1c0b		       85 06		      STA	COLUP0	; 1
    734  1c0d		       a9 09		      lda	#<DF1DATA
    735  1c0f		       85 07		      sta	COLUP1	; 6
    736  1c11		       a9 0b		      lda	#<DF3DATA
    737  1c13		       85 1c		      STA	GRP1	; 11
    738  1c15		       a9 20		      lda	#<DF0FLAG
    739  1c17		       85 1d		      STA	ENAM0	; 16
    740  1c19		       a9 1e		      lda	#<DF6FRACDATA
    741  1c1b		       85 09		      STA	COLUBK	; 21
    742  1c1d		       a9 1c		      lda	#<DF4FRACDATA
    743  1c1f		       85 08		      sta	COLUPF	; 26
      0  1c21					      sleep	2
      1  1c21				   .CYCLES    SET	2
      2  1c21
      3  1c21				  -	      IF	.CYCLES < 2
      4  1c21				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c21				  -	      ERR
      6  1c21					      ENDIF
      7  1c21
      8  1c21				  -	      IF	.CYCLES & 1
      9  1c21				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c21				  -	      nop	0
     11  1c21				  -	      ELSE
     12  1c21				  -	      bit	VSYNC
     13  1c21				  -	      ENDIF
     14  1c21				  -.CYCLES    SET	.CYCLES - 3
     15  1c21					      ENDIF
     16  1c21
     17  1c21					      REPEAT	.CYCLES / 2
     18  1c21		       ea		      nop
     19  1c22					      REPEND
    745  1c22		       4c 85 1a 	      jmp	loop3	; 31
    746  1c25
    747  1c25				   kernel7
    748  1c25		       a9 12		      lda	#<DF2DATAW
    749  1c27		       85 1b		      STA	GRP0	; 25 (VDEL)
    750  1c29		       a9 23		      lda	#<DF3FLAG
    751  1c2b		       85 1f		      STA	ENABL	; 30 (VDEL)
    752  1c2d		       a9 19		      lda	#<DF1FRACDATA
    753  1c2f		       85 0f		      STA	PF2	; 35
    754  1c31		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    755  1c33		       85 05		      STA	NUSIZ1	; 40
    756  1c35		       85 0c		      STA	REFP1	; 43
    757  1c37		       a9 1a		      lda	#<DF2FRACDATA	;45
    758  1c39		       85 0f		      sta	PF2	; 48
      0  1c3b					      sleep	2
      1  1c3b				   .CYCLES    SET	2
      2  1c3b
      3  1c3b				  -	      IF	.CYCLES < 2
      4  1c3b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c3b				  -	      ERR
      6  1c3b					      ENDIF
      7  1c3b
      8  1c3b				  -	      IF	.CYCLES & 1
      9  1c3b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c3b				  -	      nop	0
     11  1c3b				  -	      ELSE
     12  1c3b				  -	      bit	VSYNC
     13  1c3b				  -	      ENDIF
     14  1c3b				  -.CYCLES    SET	.CYCLES - 3
     15  1c3b					      ENDIF
     16  1c3b
     17  1c3b					      REPEAT	.CYCLES / 2
     18  1c3b		       ea		      nop
     19  1c3c					      REPEND
    760  1c3c		       85 11		      sta	RESP1	;53
    761  1c3e		       a9 1b		      lda	#<DF3FRACDATA	;55
    762  1c40		       85 0e		      sta	PF1	; 58
      0  1c42					      sleep	3
      1  1c42				   .CYCLES    SET	3
      2  1c42
      3  1c42				  -	      IF	.CYCLES < 2
      4  1c42				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c42				  -	      ERR
      6  1c42					      ENDIF
      7  1c42
      8  1c42					      IF	.CYCLES & 1
      9  1c42					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c42		       04 00		      nop	0
     11  1c44				  -	      ELSE
     12  1c44				  -	      bit	VSYNC
     13  1c44					      ENDIF
     14  1c44				   .CYCLES    SET	.CYCLES - 3
     15  1c44					      ENDIF
     16  1c44
     17  1c44				  -	      REPEAT	.CYCLES / 2
     18  1c44				  -	      nop
     19  1c44					      REPEND
    764  1c44		       4c db 1a 	      JMP	getbackearly	; 64
    765  1c47
    766  1c47				   kernel8
    767  1c47		       a9 12		      lda	#<DF2DATAW
    768  1c49		       85 1b		      STA	GRP0	; (VDEL)
    769  1c4b		       a9 23		      lda	#<DF3FLAG
    770  1c4d		       85 1f		      STA	ENABL	; (VDEL)
    771  1c4f		       a9 19		      lda	#<DF1FRACDATA
    772  1c51		       85 0f		      STA	PF2	; 35
    773  1c53		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    774  1c55		       85 05		      STA	NUSIZ1	; 40
    775  1c57		       85 0c		      STA	REFP1	; 43
    776  1c59		       a9 1a		      lda	#<DF2FRACDATA	;45
    777  1c5b		       85 0f		      sta	PF2	; 48
    778  1c5d		       a9 1b		      lda	#<DF3FRACDATA	;50
    779  1c5f		       85 0e		      sta	PF1	; 53
      0  1c61					      sleep	2
      1  1c61				   .CYCLES    SET	2
      2  1c61
      3  1c61				  -	      IF	.CYCLES < 2
      4  1c61				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c61				  -	      ERR
      6  1c61					      ENDIF
      7  1c61
      8  1c61				  -	      IF	.CYCLES & 1
      9  1c61				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c61				  -	      nop	0
     11  1c61				  -	      ELSE
     12  1c61				  -	      bit	VSYNC
     13  1c61				  -	      ENDIF
     14  1c61				  -.CYCLES    SET	.CYCLES - 3
     15  1c61					      ENDIF
     16  1c61
     17  1c61					      REPEAT	.CYCLES / 2
     18  1c61		       ea		      nop
     19  1c62					      REPEND
    781  1c62		       85 11		      sta	RESP1	;58
      0  1c64					      sleep	3
      1  1c64				   .CYCLES    SET	3
      2  1c64
      3  1c64				  -	      IF	.CYCLES < 2
      4  1c64				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c64				  -	      ERR
      6  1c64					      ENDIF
      7  1c64
      8  1c64					      IF	.CYCLES & 1
      9  1c64					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c64		       04 00		      nop	0
     11  1c66				  -	      ELSE
     12  1c66				  -	      bit	VSYNC
     13  1c66					      ENDIF
     14  1c66				   .CYCLES    SET	.CYCLES - 3
     15  1c66					      ENDIF
     16  1c66
     17  1c66				  -	      REPEAT	.CYCLES / 2
     18  1c66				  -	      nop
     19  1c66					      REPEND
    783  1c66		       4c db 1a 	      JMP	getbackearly	; 64
    784  1c69
    785  1c69				   kernel9
    786  1c69		       a9 12		      lda	#<DF2DATAW
    787  1c6b		       85 1b		      STA	GRP0	; (VDEL)
    788  1c6d		       a9 23		      lda	#<DF3FLAG
    789  1c6f		       85 1f		      STA	ENABL	; (VDEL)
    790  1c71		       a9 19		      lda	#<DF1FRACDATA
    791  1c73		       85 0f		      STA	PF2	; 35
    792  1c75		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    793  1c77		       85 05		      STA	NUSIZ1	; 40
    794  1c79		       85 0c		      STA	REFP1	; 43
    795  1c7b		       a9 1a		      lda	#<DF2FRACDATA	;45
    796  1c7d		       85 0f		      sta	PF2	; 48
    797  1c7f		       a9 1b		      lda	#<DF3FRACDATA	;50
    798  1c81		       85 0e		      sta	PF1	; 53
      0  1c83					      sleep	5
      1  1c83				   .CYCLES    SET	5
      2  1c83
      3  1c83				  -	      IF	.CYCLES < 2
      4  1c83				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c83				  -	      ERR
      6  1c83					      ENDIF
      7  1c83
      8  1c83					      IF	.CYCLES & 1
      9  1c83					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c83		       04 00		      nop	0
     11  1c85				  -	      ELSE
     12  1c85				  -	      bit	VSYNC
     13  1c85					      ENDIF
     14  1c85				   .CYCLES    SET	.CYCLES - 3
     15  1c85					      ENDIF
     16  1c85
     17  1c85					      REPEAT	.CYCLES / 2
     18  1c85		       ea		      nop
     19  1c86					      REPEND
    800  1c86		       a9 18		      lda	#<DF0FRACDATA
    801  1c88		       85 11		      sta	RESP1	;63
      0  1c8a					      sleep	3
      1  1c8a				   .CYCLES    SET	3
      2  1c8a
      3  1c8a				  -	      IF	.CYCLES < 2
      4  1c8a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c8a				  -	      ERR
      6  1c8a					      ENDIF
      7  1c8a
      8  1c8a					      IF	.CYCLES & 1
      9  1c8a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c8a		       04 00		      nop	0
     11  1c8c				  -	      ELSE
     12  1c8c				  -	      bit	VSYNC
     13  1c8c					      ENDIF
     14  1c8c				   .CYCLES    SET	.CYCLES - 3
     15  1c8c					      ENDIF
     16  1c8c
     17  1c8c				  -	      REPEAT	.CYCLES / 2
     18  1c8c				  -	      nop
     19  1c8c					      REPEND
    803  1c8c		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    804  1c8e		       4c 69 1a 	      jmp	loop	;72
    805  1c91
    806  1c91				   kernel10
    807  1c91		       a9 12		      lda	#<DF2DATAW
    808  1c93		       85 1b		      STA	GRP0	; 25 (VDEL)
    809  1c95		       a9 23		      lda	#<DF3FLAG
    810  1c97		       85 1f		      STA	ENABL	; 30 (VDEL)
    811  1c99		       a9 19		      lda	#<DF1FRACDATA
    812  1c9b		       85 0f		      STA	PF2	; 35
    813  1c9d		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    814  1c9f		       85 05		      STA	NUSIZ1	; 40
    815  1ca1		       85 0c		      STA	REFP1	; 43
    816  1ca3		       a9 1a		      lda	#<DF2FRACDATA	;45
    817  1ca5		       85 0f		      sta	PF2	; 48
    818  1ca7		       a9 1b		      lda	#<DF3FRACDATA	;50
    819  1ca9		       85 0e		      sta	PF1	; 53
      0  1cab					      sleep	6
      1  1cab				   .CYCLES    SET	6
      2  1cab
      3  1cab				  -	      IF	.CYCLES < 2
      4  1cab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1cab				  -	      ERR
      6  1cab					      ENDIF
      7  1cab
      8  1cab				  -	      IF	.CYCLES & 1
      9  1cab				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1cab				  -	      nop	0
     11  1cab				  -	      ELSE
     12  1cab				  -	      bit	VSYNC
     13  1cab				  -	      ENDIF
     14  1cab				  -.CYCLES    SET	.CYCLES - 3
     15  1cab					      ENDIF
     16  1cab
     17  1cab					      REPEAT	.CYCLES / 2
     18  1cab		       ea		      nop
     17  1cab					      REPEND
     18  1cac		       ea		      nop
     17  1cac					      REPEND
     18  1cad		       ea		      nop
     19  1cae					      REPEND
    821  1cae		       a9 18		      lda	#<DF0FRACDATA
    822  1cb0		       ae 08 10 	      LDX	DF0DATA	; 65
    823  1cb3		       85 11		      sta	RESP1	; 68
    824  1cb5		       85 0e		      STA	PF1	; 71
    825  1cb7		       a9 09		      lda	#<DF1DATA	; 74
    826  1cb9		       86 06		      STX	COLUP0	; 0
    827  1cbb		       4c 6f 1a 	      jmp	loop2	; 3
    828  1cbe
    829  1cbe				   kernel11
    830  1cbe		       a9 12		      lda	#<DF2DATAW
    831  1cc0		       85 1b		      STA	GRP0	; (VDEL)
    832  1cc2		       a9 23		      lda	#<DF3FLAG
    833  1cc4		       85 1f		      STA	ENABL	; (VDEL)
    834  1cc6		       a9 19		      lda	#<DF1FRACDATA
    835  1cc8		       85 0f		      STA	PF2	; 35
    836  1cca		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    837  1ccc		       85 05		      STA	NUSIZ1
    838  1cce		       85 0c		      STA	REFP1
    839  1cd0		       a9 1a		      lda	#<DF2FRACDATA	;45
    840  1cd2		       85 0f		      sta	PF2	; 48
    841  1cd4		       a9 1b		      lda	#<DF3FRACDATA	;50
    842  1cd6		       85 0e		      sta	PF1	; 53
      0  1cd8					      sleep	3
      1  1cd8				   .CYCLES    SET	3
      2  1cd8
      3  1cd8				  -	      IF	.CYCLES < 2
      4  1cd8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1cd8				  -	      ERR
      6  1cd8					      ENDIF
      7  1cd8
      8  1cd8					      IF	.CYCLES & 1
      9  1cd8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1cd8		       04 00		      nop	0
     11  1cda				  -	      ELSE
     12  1cda				  -	      bit	VSYNC
     13  1cda					      ENDIF
     14  1cda				   .CYCLES    SET	.CYCLES - 3
     15  1cda					      ENDIF
     16  1cda
     17  1cda				  -	      REPEAT	.CYCLES / 2
     18  1cda				  -	      nop
     19  1cda					      REPEND
    844  1cda		       a9 19		      lda	#<DF1FRACDATA	;45
    845  1cdc		       85 0f		      sta	PF2	; 61
    846  1cde		       ae 08 10 	      LDX	DF0DATA	; 65
    847  1ce1
    848  1ce1		       a9 18		      lda	#<DF0FRACDATA	; 67
    849  1ce3		       85 0e		      sta	PF1	; 70
    850  1ce5		       85 11		      sta	RESP1	; 73
    851  1ce7		       86 06		      STX	COLUP0	; 0
    852  1ce9		       a9 09		      lda	#<DF1DATA	; 2
    853  1ceb		       85 07		      sta	COLUP1	; 5
    854  1ced		       a9 0b		      lda	#<DF3DATA
    855  1cef		       85 1c		      STA	GRP1	; 10
    856  1cf1		       a9 20		      lda	#<DF0FLAG
    857  1cf3		       85 1d		      STA	ENAM0	; 25
    858  1cf5		       a9 1e		      lda	#<DF6FRACDATA
    859  1cf7		       85 09		      STA	COLUBK	; 20
    860  1cf9		       a9 1c		      lda	#<DF4FRACDATA
    861  1cfb		       85 08		      sta	COLUPF	; 25
      0  1cfd					      sleep	3
      1  1cfd				   .CYCLES    SET	3
      2  1cfd
      3  1cfd				  -	      IF	.CYCLES < 2
      4  1cfd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1cfd				  -	      ERR
      6  1cfd					      ENDIF
      7  1cfd
      8  1cfd					      IF	.CYCLES & 1
      9  1cfd					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1cfd		       04 00		      nop	0
     11  1cff				  -	      ELSE
     12  1cff				  -	      bit	VSYNC
     13  1cff					      ENDIF
     14  1cff				   .CYCLES    SET	.CYCLES - 3
     15  1cff					      ENDIF
     16  1cff
     17  1cff				  -	      REPEAT	.CYCLES / 2
     18  1cff				  -	      nop
     19  1cff					      REPEND
    863  1cff		       4c 85 1a 	      jmp	loop3	; 31
    864  1d02
    865  1d02				   set_fetchers
    866  1d02		       ad 6d 1d 	      lda	dflow
    867  1d05		       8d 50 10 	      sta	DF0LOW
    868  1d08		       ad 75 1d 	      lda	dfhigh
    869  1d0b		       8d 68 10 	      sta	DF0HI
    870  1d0e
    871  1d0e		       ad 6e 1d 	      lda	dflow+1
    872  1d11		       8d 51 10 	      sta	DF1LOW
    873  1d14		       ad 76 1d 	      lda	dfhigh+1
    874  1d17		       8d 69 10 	      sta	DF1HI
    875  1d1a
    876  1d1a		       ad 6f 1d 	      lda	dflow+2
    877  1d1d		       8d 52 10 	      sta	DF2LOW
    878  1d20		       ad 77 1d 	      lda	dfhigh+2
    879  1d23		       8d 6a 10 	      sta	DF2HI
    880  1d26
    881  1d26				   set_fetchers36		; sets just 3-6
    882  1d26		       ad 70 1d 	      lda	dflow+3
    883  1d29		       8d 53 10 	      sta	DF3LOW
    884  1d2c		       ad 78 1d 	      lda	dfhigh+3
    885  1d2f		       8d 6b 10 	      sta	DF3HI
    886  1d32
    887  1d32		       ad 71 1d 	      lda	dflow+4
    888  1d35		       8d 54 10 	      sta	DF4LOW
    889  1d38		       ad 79 1d 	      lda	dfhigh+4
    890  1d3b		       8d 6c 10 	      sta	DF4HI
    891  1d3e
    892  1d3e		       ad 72 1d 	      lda	dflow+5
    893  1d41		       8d 55 10 	      sta	DF5LOW
    894  1d44		       ad 7a 1d 	      lda	dfhigh+5
    895  1d47		       8d 6d 10 	      sta	DF5HI
    896  1d4a
    897  1d4a		       ad 73 1d 	      lda	dflow+6
    898  1d4d		       8d 56 10 	      sta	DF6LOW
    899  1d50		       ad 7b 1d 	      lda	dfhigh+6
    900  1d53		       8d 6e 10 	      sta	DF6HI
    901  1d56
    902  1d56		       60		      rts
    903  1d57
    904  1d57							;9d bad
    905  1d57							; the below isn't quite right
    906  1d57							;DF0DATA: COLUP0
    907  1d57							;DF1DATA: COLUP1
    908  1d57							;DF2DATAW: GRP0
    909  1d57							;DF3DATA: GRP1 
    910  1d57							;DF4DATA: 2lk lines until repos/HMP1
    911  1d57							;DF5DATA: low byte of repo kernels (xpos mod 15)
    912  1d57							;DF6DATA: High byte of repo kernels (x pos div 15)
    913  1d57							;DF7DATA: Programmer's stack
    914  1d57							;DF0FRACDATA: PF1L
    915  1d57							;DF1FRACDATA: PF2L
    916  1d57							;DF4FRACDATA: COLUPF
    917  1d57							;DF2FRACDATA: PF2R
    918  1d57							;DF3FRACDATA: PF2L
    919  1d57							;DF5FRACDATA: Sprite NUSIZ1/REFP1 (only during repos)
    920  1d57							;DF6FRACDATA: COLUBK
    921  1d57							;DF7FRACDATA: HMP1
    922  1d57							;DF3FLAG: kernel exit loop ?? (use flags instead?)
    923  1d57							;DF0FLAG: ENAM0
    924  1d57							;DF1FLAG: ENAM1 
    925  1d57							;DF3FLAG: ENABL 
    926  1d57
    927  1d57				   fetcher_address_table
    928  1d57				   kernello
    929  1d57		       37		      .byte.b	<kernel1
    930  1d58		       59		      .byte.b	<kernel2
    931  1d59		       7b		      .byte.b	<kernel3
    932  1d5a		       9d		      .byte.b	<kernel4
    933  1d5b		       bf		      .byte.b	<kernel5
    934  1d5c		       e1		      .byte.b	<kernel6
    935  1d5d		       25		      .byte.b	<kernel7
    936  1d5e		       47		      .byte.b	<kernel8
    937  1d5f		       69		      .byte.b	<kernel9
    938  1d60		       91		      .byte.b	<kernel10
    939  1d61		       be		      .byte.b	<kernel11
    940  1d62				   kernelhi
    941  1d62		       1b		      .byte.b	>kernel1
    942  1d63		       1b		      .byte.b	>kernel2
    943  1d64		       1b		      .byte.b	>kernel3
    944  1d65		       1b		      .byte.b	>kernel4
    945  1d66		       1b		      .byte.b	>kernel5
    946  1d67		       1b		      .byte.b	>kernel6
    947  1d68		       1c		      .byte.b	>kernel7
    948  1d69		       1c		      .byte.b	>kernel8
    949  1d6a		       1c		      .byte.b	>kernel9
    950  1d6b		       1c		      .byte.b	>kernel10
    951  1d6c		       1c		      .byte.b	>kernel11
    952  1d6d				   dflow
    953  1d6d		       08		      .byte.b	<P0COLOR
    954  1d6e		       08		      .byte.b	<P1COLOR
    955  1d6f		       08		      .byte.b	<P0GFX
    956  1d70		       08		      .byte.b	<P1GFX
    957  1d71		       2d		      .byte.b	<P1SKIP
    958  1d72		       08		      .byte.b	<JUMPTABLELO
    959  1d73		       14		      .byte.b	<JUMPTABLEHI
    960  1d74		       a5		      .byte.b	<USERSTACK
    961  1d75				   dfhigh
    962  1d75		       05		      .byte.b	(>P0COLOR) & $0F
    963  1d76		       03		      .byte.b	(>P1COLOR) & $0F
    964  1d77		       04		      .byte.b	(>P0GFX) & $0F
    965  1d78		       02		      .byte.b	(>P1GFX) & $0F
    966  1d79		       0b		      .byte.b	(>P1SKIP) & $0F
    967  1d7a		       0b		      .byte.b	(>JUMPTABLELO) & $0F
    968  1d7b		       0b		      .byte.b	(>JUMPTABLEHI) & $0F
    969  1d7c		       0d		      .byte.b	(>USERSTACK) & $0F
    970  1d7d				   dffraclow
    971  1d7d		       08		      .byte.b	<PF1L
    972  1d7e		       08		      .byte.b	<PF2L
    973  1d7f		       08		      .byte.b	<PF1R
    974  1d80		       08		      .byte.b	<PF2R
    975  1d81		       08		      .byte.b	<PFCOLS
    976  1d82		       39		      .byte.b	<NUSIZREFP
    977  1d83		       a5		      .byte.b	<BKCOLS
    978  1d84		       20		      .byte.b	<P1HMP
    979  1d85				   dffrachi
    980  1d85		       06		      .byte.b	(>PF1L) & $0F
    981  1d86		       07		      .byte.b	(>PF2L) & $0F
    982  1d87		       08		      .byte.b	(>PF1R) & $0F
    983  1d88		       09		      .byte.b	(>PF2R) & $0F
    984  1d89		       0a		      .byte.b	(>PFCOLS) & $0F
    985  1d8a		       0b		      .byte.b	(>NUSIZREFP) & $0F
    986  1d8b		       0b		      .byte.b	(>BKCOLS) & $0F
    987  1d8c		       0b		      .byte.b	(>P1HMP) & $0F
    988  1d8d				   scorepointer
    989  1d8d		       94		      .byte.b	<scoretable
    990  1d8e		       08		      .byte.b	((>scoretable) & $0f) | (((>scoretable) / 2) & $70)
    991  1d8f				   scoresetup		; pointers to digit graphics
    992  1d8f		       45		      .byte.b	<scoredata
    993  1d90		       0b		      .byte.b	(>scoredata) & $0F
    994  1d91				   Hmval		; 112 wuz first
    995  1d91		       60 50 40 30*	      .byte.b	96, 80, 64, 48, 32, 16, 1, 240
    996  1d99				   Hmval74
    997  1d99		       e0 d0 c0 b0*	      .byte.b	224, 208, 192, 176, 160, 144, 128
    998  1da0		       60 50 40 30*	      .byte.b	96, 80, 64, 48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96
    999  1db0		       50 40 30 20*	      .byte.b	80, 64, 48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80
   1000  1dc0		       40 30 20 10*	      .byte.b	64, 48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64
   1001  1dd0		       30 20 10 01*	      .byte.b	48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48
   1002  1de0		       20 10 01 f0*	      .byte.b	32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32
   1003  1df0		       10 01 f0 e0*	      .byte.b	16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16
   1004  1e00		       01 f0 e0 d0*	      .byte.b	1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16, 1
   1005  1e10		       f0 e0 d0 c0*	      .byte.b	240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16, 1, 240
   1006  1e20		       e0 d0 c0 b0*	      .byte.b	224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16, 1, 240, 224, 208, 192
   1007  1e32		       b0 a0 90 80*	      .byte.b	176,160,144,128,16,1,240,224
   1008  1e3a
   1009  1e3a
   1010  1e3a				   kernel_setup
   1011  1e3a							;--position P0, top P1, M0, M1, BL
   1012  1e3a		       a2 00		      ldx	#0	; first sprite displayed
   1013  1e3c		       b5 85		      lda	SpriteGfxIndex,x
   1014  1e3e		       aa		      tax
   1015  1e3f		       b5 90		      lda	player1x,x
   1016  1e41		       c9 a0		      cmp	#160
   1017  1e43		       90 0a		      bcc	nostorep1
   1018  1e45		       c9 d0		      cmp	#208
   1019  1e47		       b0 02		      bcs	ksadjustdown
   1020  1e49							; 160-208: minus 160
   1021  1e49							;add 160 is like minus 96
   1022  1e49							; so minus 64
   1023  1e49		       e9 3f		      sbc	#63	;cc
   1024  1e4b				   ksadjustdown
   1025  1e4b							; 209-255: add 160 
   1026  1e4b		       69 9f		      adc	#159	; cs
   1027  1e4d		       95 90		      sta	player1x,x
   1028  1e4f				   nostorep1
   1029  1e4f		       85 02		      sta	WSYNC
   1030  1e51		       a2 04		      ldx	#4
   1031  1e53		       85 81		      sta	topP1x	; cache top p1
   1032  1e55				   HorPosLoop
   1033  1e55		       b5 80		      lda	player0x,X
   1034  1e57		       38		      sec
   1035  1e58				   DivideLoop
   1036  1e58		       e9 0f		      sbc	#15
   1037  1e5a		       b0 fc		      bcs	DivideLoop
      0  1e5c					      sleep	4
      1  1e5c				   .CYCLES    SET	4
      2  1e5c
      3  1e5c				  -	      IF	.CYCLES < 2
      4  1e5c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1e5c				  -	      ERR
      6  1e5c					      ENDIF
      7  1e5c
      8  1e5c				  -	      IF	.CYCLES & 1
      9  1e5c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1e5c				  -	      nop	0
     11  1e5c				  -	      ELSE
     12  1e5c				  -	      bit	VSYNC
     13  1e5c				  -	      ENDIF
     14  1e5c				  -.CYCLES    SET	.CYCLES - 3
     15  1e5c					      ENDIF
     16  1e5c
     17  1e5c					      REPEAT	.CYCLES / 2
     18  1e5c		       ea		      nop
     17  1e5c					      REPEND
     18  1e5d		       ea		      nop
     19  1e5e					      REPEND
   1039  1e5e		       95 10		      sta	RESP0,X
   1040  1e60		       85 02		      sta	WSYNC
   1041  1e62		       ca		      dex		;2
   1042  1e63		       10 f0		      bpl	HorPosLoop	;4/5
   1043  1e65
   1044  1e65		       a4 80		      ldy	player0x	; 7
   1045  1e67		       b9 91 1d 	      lda	Hmval,y	; 11
   1046  1e6a		       85 20		      sta	HMP0	; 14
   1047  1e6c
   1048  1e6c		       a4 81		      ldy	player0x+1
   1049  1e6e		       b9 91 1d 	      lda	Hmval,y
   1050  1e71		       85 21		      sta	HMP0+1	; 24
   1051  1e73
   1052  1e73		       a4 82		      ldy	player0x+2
   1053  1e75		       b9 91 1d 	      lda	Hmval,y
   1054  1e78		       85 22		      sta	HMP0+2	; 34
   1055  1e7a
   1056  1e7a		       a4 83		      ldy	player0x+3
   1057  1e7c		       b9 91 1d 	      lda	Hmval,y
   1058  1e7f		       85 23		      sta	HMP0+3	; 44
   1059  1e81
   1060  1e81		       a4 84		      ldy	player0x+4
   1061  1e83		       b9 91 1d 	      lda	Hmval,y
   1062  1e86		       85 24		      sta	HMP0+4	; 54
   1063  1e88
   1064  1e88		       85 02		      sta	WSYNC
   1065  1e8a		       85 2a		      sta	HMOVE
   1066  1e8c
   1067  1e8c				   myrts
   1068  1e8c		       60		      rts
   1069  1e8d
   1070  1e8d
   1071  1e8d				   pfsetup
   1072  1e8d
   1073  1e8d		       84 cb		      sty	temp1
   1074  1e8f		       85 cc		      sta	temp2
   1075  1e91		       86 cd		      stx	temp3
   1076  1e93		       a2 03		      ldx	#3
   1077  1e95				   pfsetupp
   1078  1e95		       bd 7d 1d 	      lda	dffraclow,x
   1079  1e98		       9d 50 10 	      sta	DF0LOW,x
   1080  1e9b		       bd 85 1d 	      lda	dffrachi,x
   1081  1e9e		       9d 68 10 	      sta	DF0HI,x
   1082  1ea1		       a5 cc		      lda	temp2
   1083  1ea3		       8d 59 10 	      sta	PARAMETER
   1084  1ea6		       a5 cd		      lda	temp3
   1085  1ea8		       8d 59 10 	      sta	PARAMETER
   1086  1eab		       8e 59 10 	      stx	PARAMETER
   1087  1eae		       8c 59 10 	      sty	PARAMETER
   1088  1eb1		       a9 01		      LDA	#1
   1089  1eb3		       8d 5a 10 	      sta	CALLFUNCTION
   1090  1eb6		       18		      clc
   1091  1eb7		       a5 cc		      lda	temp2
   1092  1eb9		       65 cb		      adc	temp1
   1093  1ebb		       85 cc		      sta	temp2
   1094  1ebd		       a5 cd		      lda	temp3
   1095  1ebf		       69 00		      adc	#0
   1096  1ec1		       85 cd		      sta	temp3
   1097  1ec3		       ca		      dex
   1098  1ec4		       10 cf		      bpl	pfsetupp
      0  1ec6					      RETURN
      1  1ec6				  -	      ifnconst	bankswitch
      2  1ec6				  -	      rts
      3  1ec6					      else
      4  1ec6		       4c e0 df 	      jmp	BS_return
      5  1ec9					      endif
   1100  1ec9
   1101  1ec9
   1102  1ec9				   scorekernel
   1103  1ec9				  -	      ifconst	minikernel
   1104  1ec9				  -			;; disable fast fetch, call the minikernel, and re-enable fast fetch
   1105  1ec9				  -	      lda	#255
   1106  1ec9				  -	      sta	FASTFETCH
   1107  1ec9				  -	      jsr	minikernel
   1108  1ec9				  -	      lda	#0
   1109  1ec9				  -	      sta.w	FASTFETCH
   1110  1ec9					      endif
   1111  1ec9		       a6 eb		      ldx	scorecolor
   1112  1ecb		       86 06		      stx	COLUP0
   1113  1ecd		       86 07		      stx	COLUP1
   1114  1ecf		       a2 00		      ldx	#0
   1115  1ed1		       86 0e		      STx	PF1
   1116  1ed3		       86 0b		      stx	REFP0
   1117  1ed5		       86 0c		      stx	REFP1
   1118  1ed7		       86 1b		      STx	GRP0
   1119  1ed9		       86 1c		      STx	GRP1
   1120  1edb		       86 0f		      STx	PF2
   1121  1edd		       86 2b		      stx	HMCLR
   1122  1edf		       86 1d		      stx	ENAM0
   1123  1ee1		       86 1e		      stx	ENAM1
   1124  1ee3		       86 1f		      stx	ENABL
   1125  1ee5
   1126  1ee5
   1127  1ee5					      ifconst	pfscore
   1128  1ee5		       a5 c6		      lda	pfscorecolor
   1129  1ee7		       85 08		      sta	COLUPF
   1130  1ee9					      endif
   1131  1ee9
   1132  1ee9				  -	      ifconst	noscore
   1133  1ee9				  -	      ldx	#10
   1134  1ee9				  -noscoreloop
   1135  1ee9				  -	      sta	WSYNC
   1136  1ee9				  -	      dex
   1137  1ee9				  -	      bpl	noscoreloop
   1138  1ee9				  -	      rts
   1139  1ee9					      else
   1140  1ee9
   1141  1ee9		       85 2b		      sta	HMCLR
   1142  1eeb		       a2 f0		      ldx	#$f0
   1143  1eed		       86 20		      stx	HMP0
   1144  1eef
   1145  1eef							; set up fetchers 0-5 to handle score digits
   1146  1eef		       a2 45		      ldx	#<(scoredata)
   1147  1ef1		       8e 56 10 	      stx	DF6LOW
   1148  1ef4		       a2 0b		      ldx	#(>(scoredata)) & $0F
   1149  1ef6		       8e 6e 10 	      stx	DF6HI
   1150  1ef9		       a2 4d		      ldx	#<(scoredata+8)
   1151  1efb		       8e 50 10 	      stx	DF0LOW
   1152  1efe		       a2 0b		      ldx	#(>(scoredata+8)) & $0F
   1153  1f00		       8e 68 10 	      stx	DF0HI
   1154  1f03		       a2 55		      ldx	#<(scoredata+16)
   1155  1f05		       8e 51 10 	      stx	DF1LOW
   1156  1f08							; cycle 0??
   1157  1f08		       a2 0b		      ldx	#(>(scoredata+16)) & $0F
   1158  1f0a		       8e 69 10 	      stx	DF1HI
   1159  1f0d		       a2 5d		      ldx	#<(scoredata+24)
   1160  1f0f		       8e 52 10 	      stx	DF2LOW
   1161  1f12		       a2 0b		      ldx	#(>(scoredata+24)) & $0F
   1162  1f14		       8e 6a 10 	      stx	DF2HI
   1163  1f17
   1164  1f17		       85 02		      sta	WSYNC
   1165  1f19		       a2 00		      ldx	#0
   1166  1f1b		       86 1b		      STx	GRP0
   1167  1f1d		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   1168  1f1f
   1169  1f1f		       a2 65		      ldx	#<(scoredata+32)
   1170  1f21		       8e 53 10 	      stx	DF3LOW
   1171  1f24		       a2 0b		      ldx	#(>(scoredata+32)) & $0F
   1172  1f26		       8e 6b 10 	      stx	DF3HI
   1173  1f29		       a2 6d		      ldx	#<(scoredata+40)
   1174  1f2b		       8e 54 10 	      stx	DF4LOW
   1175  1f2e		       a2 0b		      ldx	#(>(scoredata+40)) & $0F
   1176  1f30		       8e 6c 10 	      stx	DF4HI
   1177  1f33
   1178  1f33		       a0 07		      LDY	#7
   1179  1f35		       a2 03		      LDx	#$03
   1180  1f37		       84 25		      STY	VDELP0
   1181  1f39		       85 10		      STA	RESP0
   1182  1f3b		       85 11		      STA	RESP1
   1183  1f3d		       84 cb		      sty	temp1
   1184  1f3f
   1185  1f3f		       86 04		      STx	NUSIZ0
   1186  1f41		       86 05		      STx	NUSIZ1
   1187  1f43		       86 26		      STx	VDELP1
   1188  1f45		       a2 75		      ldx	#<(scoredata+48)
   1189  1f47		       8e 55 10 	      stx	DF5LOW
   1190  1f4a		       a2 0b		      ldx	#(>(scoredata+48)) & $0F
   1191  1f4c		       8e 6d 10 	      stx	DF5HI
   1192  1f4f		       8d 2a 00 	      STA.w	HMOVE	; cycle 73 ?
   1193  1f52				   scoreloop
   1194  1f52		       a9 0e		      lda	#<DF6DATA	;59
   1195  1f54		       85 06		      sta	COLUP0	;62
   1196  1f56		       85 07		      sta	COLUP1	;65
   1197  1f58		       a9 09		      lda	#<DF1DATA	;75
   1198  1f5a		       85 1b		      sta	GRP0	;2
   1199  1f5c		       a9 08		      lda	#<DF0DATA	;4
   1200  1f5e		       85 1c		      sta	GRP1	;7
   1201  1f60		       a9 0b		      lda	#<DF3DATA	;9
   1202  1f62		       85 1b		      sta	GRP0	;12
   1203  1f64
   1204  1f64							; REVENG - rearranged to correct pf write timing and A register overwrite
   1205  1f64					      ifconst	pfscore
   1206  1f64		       a5 c8		      lda	pfscore1
   1207  1f66		       85 0e		      sta	PF1
   1208  1f68				  -	      else
   1209  1f68				  -	      sleep	6
   1210  1f68					      endif
      0  1f68					      sleep	5
      1  1f68				   .CYCLES    SET	5
      2  1f68
      3  1f68				  -	      IF	.CYCLES < 2
      4  1f68				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f68				  -	      ERR
      6  1f68					      ENDIF
      7  1f68
      8  1f68					      IF	.CYCLES & 1
      9  1f68					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f68		       04 00		      nop	0
     11  1f6a				  -	      ELSE
     12  1f6a				  -	      bit	VSYNC
     13  1f6a					      ENDIF
     14  1f6a				   .CYCLES    SET	.CYCLES - 3
     15  1f6a					      ENDIF
     16  1f6a
     17  1f6a					      REPEAT	.CYCLES / 2
     18  1f6a		       ea		      nop
     19  1f6b					      REPEND
   1212  1f6b		       ae 0a 10 	      ldx	DF2DATA	;16
   1213  1f6e		       ac 0d 10 	      ldy	DF5DATA	;20
   1214  1f71		       a9 0c		      lda	#<DF4DATA	;22 
   1215  1f73
   1216  1f73		       86 1c		      stx	GRP1	;40
   1217  1f75		       84 1b		      sty	GRP0	;43
   1218  1f77		       85 1c		      sta	GRP1	;46
   1219  1f79		       85 1b		      sta	GRP0	;49
   1220  1f7b					      ifconst	pfscore
   1221  1f7b		       a5 c9		      lda	pfscore2
   1222  1f7d		       85 0e		      sta	PF1
   1223  1f7f				  -	      else
   1224  1f7f				  -	      sleep	6
   1225  1f7f					      endif
   1226  1f7f							; sleep 2 ;57
      0  1f7f					      sleep	6
      1  1f7f				   .CYCLES    SET	6
      2  1f7f
      3  1f7f				  -	      IF	.CYCLES < 2
      4  1f7f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f7f				  -	      ERR
      6  1f7f					      ENDIF
      7  1f7f
      8  1f7f				  -	      IF	.CYCLES & 1
      9  1f7f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f7f				  -	      nop	0
     11  1f7f				  -	      ELSE
     12  1f7f				  -	      bit	VSYNC
     13  1f7f				  -	      ENDIF
     14  1f7f				  -.CYCLES    SET	.CYCLES - 3
     15  1f7f					      ENDIF
     16  1f7f
     17  1f7f					      REPEAT	.CYCLES / 2
     18  1f7f		       ea		      nop
     17  1f7f					      REPEND
     18  1f80		       ea		      nop
     17  1f80					      REPEND
     18  1f81		       ea		      nop
     19  1f82					      REPEND
   1228  1f82		       c6 cb		      dec	temp1	;70
   1229  1f84		       10 cc		      bpl	scoreloop	;72/73
   1230  1f86		       a2 00		      LDx	#0
   1231  1f88		       86 0e		      stx	PF1
   1232  1f8a		       86 1b		      STx	GRP0
   1233  1f8c		       86 1c		      STx	GRP1
   1234  1f8e		       86 25		      STx	VDELP0
   1235  1f90		       86 26		      STx	VDELP1	;do we need these
   1236  1f92		       86 04		      STx	NUSIZ0
   1237  1f94		       86 05		      STx	NUSIZ1
   1238  1f96
   1239  1f96		       60		      rts
   1240  1f97
   1241  1f97
   1242  1f97					      endif		; noscore
   1243  1f97				   game
   1244  1f97				   .
   1245  1f97							; 
   1246  1f97
   1247  1f97				   .
   1248  1f97							; 
   1249  1f97
   1250  1f97				   .
   1251  1f97							; 
   1252  1f97
   1253  1f97				   .L00 		;  set kernel DPC + 
   1254  1f97
   1255  1f97				   .L01 		;  set optimization inlinerand
   1256  1f97
   1257  1f97				   .L02 		;  set kernel_options collision(player1,playfield)
   1258  1f97
   1259  1f97		       00 43	   DPC_kernel_options =	CXP1FB+$40
   1260  1f97				   .L03 		;  set smartbranching on
   1261  1f97
   1262  1f97				   .L04 		;  set tv ntsc
   1263  1f97
   1264  1f97				   .
   1265  1f97							; 
   1266  1f97
   1267  1f97				   .
   1268  1f97							; 
   1269  1f97
   1270  1f97				   .L05 		;  const font	=  retroputer
   1271  1f97
   1272  1f97				   .L06 		;  const _00  =  $00
   1273  1f97
   1274  1f97				   .L07 		;  const _02  =  $02
   1275  1f97
   1276  1f97				   .L08 		;  const _04  =  $04
   1277  1f97
   1278  1f97				   .L09 		;  const _06  =  $06
   1279  1f97
   1280  1f97				   .L010		;  const _08  =  $08
   1281  1f97
   1282  1f97				   .L011		;  const _0A  =  $0A
   1283  1f97
   1284  1f97				   .L012		;  const _0C  =  $0C
   1285  1f97
   1286  1f97				   .L013		;  const _0E  =  $0E
   1287  1f97
   1288  1f97				   .L014		;  const _10  =  $10
   1289  1f97
   1290  1f97				   .L015		;  const _12  =  $12
   1291  1f97
   1292  1f97				   .L016		;  const _14  =  $14
   1293  1f97
   1294  1f97				   .L017		;  const _16  =  $16
   1295  1f97
   1296  1f97				   .L018		;  const _18  =  $18
   1297  1f97
   1298  1f97				   .L019		;  const _1A  =  $1A
   1299  1f97
   1300  1f97				   .L020		;  const _1C  =  $1C
   1301  1f97
   1302  1f97				   .L021		;  const _1E  =  $1E
   1303  1f97
   1304  1f97				   .L022		;  const _20  =  $20
   1305  1f97
   1306  1f97				   .L023		;  const _22  =  $22
   1307  1f97
   1308  1f97				   .L024		;  const _24  =  $24
   1309  1f97
   1310  1f97				   .L025		;  const _26  =  $26
   1311  1f97
   1312  1f97				   .L026		;  const _28  =  $28
   1313  1f97
   1314  1f97				   .L027		;  const _2A  =  $2A
   1315  1f97
   1316  1f97				   .L028		;  const _2C  =  $2C
   1317  1f97
   1318  1f97				   .L029		;  const _2E  =  $2E
   1319  1f97
   1320  1f97				   .L030		;  const _30  =  $30
   1321  1f97
   1322  1f97				   .L031		;  const _32  =  $32
   1323  1f97
   1324  1f97				   .L032		;  const _34  =  $34
   1325  1f97
   1326  1f97				   .L033		;  const _36  =  $36
   1327  1f97
   1328  1f97				   .L034		;  const _38  =  $38
   1329  1f97
   1330  1f97				   .L035		;  const _3A  =  $3A
   1331  1f97
   1332  1f97				   .L036		;  const _3C  =  $3C
   1333  1f97
   1334  1f97				   .L037		;  const _3E  =  $3E
   1335  1f97
   1336  1f97				   .L038		;  const _40  =  $40
   1337  1f97
   1338  1f97				   .L039		;  const _42  =  $42
   1339  1f97
   1340  1f97				   .L040		;  const _44  =  $44
   1341  1f97
   1342  1f97				   .L041		;  const _46  =  $46
   1343  1f97
   1344  1f97				   .L042		;  const _48  =  $48
   1345  1f97
   1346  1f97				   .L043		;  const _4A  =  $4A
   1347  1f97
   1348  1f97				   .L044		;  const _4C  =  $4C
   1349  1f97
   1350  1f97				   .L045		;  const _4E  =  $4E
   1351  1f97
   1352  1f97				   .L046		;  const _50  =  $50
   1353  1f97
   1354  1f97				   .L047		;  const _52  =  $52
   1355  1f97
   1356  1f97				   .L048		;  const _54  =  $54
   1357  1f97
   1358  1f97				   .L049		;  const _56  =  $56
   1359  1f97
   1360  1f97				   .L050		;  const _58  =  $58
   1361  1f97
   1362  1f97				   .L051		;  const _5A  =  $5A
   1363  1f97
   1364  1f97				   .L052		;  const _5C  =  $5C
   1365  1f97
   1366  1f97				   .L053		;  const _5E  =  $5E
   1367  1f97
   1368  1f97				   .L054		;  const _60  =  $60
   1369  1f97
   1370  1f97				   .L055		;  const _62  =  $62
   1371  1f97
   1372  1f97				   .L056		;  const _64  =  $64
   1373  1f97
   1374  1f97				   .L057		;  const _66  =  $66
   1375  1f97
   1376  1f97				   .L058		;  const _68  =  $68
   1377  1f97
   1378  1f97				   .L059		;  const _6A  =  $6A
   1379  1f97
   1380  1f97				   .L060		;  const _6C  =  $6C
   1381  1f97
   1382  1f97				   .L061		;  const _6E  =  $6E
   1383  1f97
   1384  1f97				   .L062		;  const _70  =  $70
   1385  1f97
   1386  1f97				   .L063		;  const _72  =  $72
   1387  1f97
   1388  1f97				   .L064		;  const _74  =  $74
   1389  1f97
   1390  1f97				   .L065		;  const _76  =  $76
   1391  1f97
   1392  1f97				   .L066		;  const _78  =  $78
   1393  1f97
   1394  1f97				   .L067		;  const _7A  =  $7A
   1395  1f97
   1396  1f97				   .L068		;  const _7C  =  $7C
   1397  1f97
   1398  1f97				   .L069		;  const _7E  =  $7E
   1399  1f97
   1400  1f97				   .L070		;  const _80  =  $80
   1401  1f97
   1402  1f97				   .L071		;  const _82  =  $82
   1403  1f97
   1404  1f97				   .L072		;  const _84  =  $84
   1405  1f97
   1406  1f97				   .L073		;  const _86  =  $86
   1407  1f97
   1408  1f97				   .L074		;  const _88  =  $88
   1409  1f97
   1410  1f97				   .L075		;  const _8A  =  $8A
   1411  1f97
   1412  1f97				   .L076		;  const _8C  =  $8C
   1413  1f97
   1414  1f97				   .L077		;  const _8E  =  $8E
   1415  1f97
   1416  1f97				   .L078		;  const _90  =  $90
   1417  1f97
   1418  1f97				   .L079		;  const _92  =  $92
   1419  1f97
   1420  1f97				   .L080		;  const _94  =  $94
   1421  1f97
   1422  1f97				   .L081		;  const _96  =  $96
   1423  1f97
   1424  1f97				   .L082		;  const _98  =  $98
   1425  1f97
   1426  1f97				   .L083		;  const _9A  =  $9A
   1427  1f97
   1428  1f97				   .L084		;  const _9C  =  $9C
   1429  1f97
   1430  1f97				   .L085		;  const _9E  =  $9E
   1431  1f97
   1432  1f97				   .L086		;  const _A0  =  $A0
   1433  1f97
   1434  1f97				   .L087		;  const _A2  =  $A2
   1435  1f97
   1436  1f97				   .L088		;  const _A4  =  $A4
   1437  1f97
   1438  1f97				   .L089		;  const _A6  =  $A6
   1439  1f97
   1440  1f97				   .L090		;  const _A8  =  $A8
   1441  1f97
   1442  1f97				   .L091		;  const _AA  =  $AA
   1443  1f97
   1444  1f97				   .L092		;  const _AC  =  $AC
   1445  1f97
   1446  1f97				   .L093		;  const _AE  =  $AE
   1447  1f97
   1448  1f97				   .L094		;  const _B0  =  $B0
   1449  1f97
   1450  1f97				   .L095		;  const _B2  =  $B2
   1451  1f97
   1452  1f97				   .L096		;  const _B4  =  $B4
   1453  1f97
   1454  1f97				   .L097		;  const _B6  =  $B6
   1455  1f97
   1456  1f97				   .L098		;  const _B8  =  $B8
   1457  1f97
   1458  1f97				   .L099		;  const _BA  =  $BA
   1459  1f97
   1460  1f97				   .L0100		;  const _BC  =  $BC
   1461  1f97
   1462  1f97				   .L0101		;  const _BE  =  $BE
   1463  1f97
   1464  1f97				   .L0102		;  const _C0  =  $C0
   1465  1f97
   1466  1f97				   .L0103		;  const _C2  =  $C2
   1467  1f97
   1468  1f97				   .L0104		;  const _C4  =  $C4
   1469  1f97
   1470  1f97				   .L0105		;  const _C6  =  $C6
   1471  1f97
   1472  1f97				   .L0106		;  const _C8  =  $C8
   1473  1f97
   1474  1f97				   .L0107		;  const _CA  =  $CA
   1475  1f97
   1476  1f97				   .L0108		;  const _CC  =  $CC
   1477  1f97
   1478  1f97				   .L0109		;  const _CE  =  $CE
   1479  1f97
   1480  1f97				   .L0110		;  const _D0  =  $D0
   1481  1f97
   1482  1f97				   .L0111		;  const _D2  =  $D2
   1483  1f97
   1484  1f97				   .L0112		;  const _D4  =  $D4
   1485  1f97
   1486  1f97				   .L0113		;  const _D6  =  $D6
   1487  1f97
   1488  1f97				   .L0114		;  const _D8  =  $D8
   1489  1f97
   1490  1f97				   .L0115		;  const _DA  =  $DA
   1491  1f97
   1492  1f97				   .L0116		;  const _DC  =  $DC
   1493  1f97
   1494  1f97				   .L0117		;  const _DE  =  $DE
   1495  1f97
   1496  1f97				   .L0118		;  const _E0  =  $E0
   1497  1f97
   1498  1f97				   .L0119		;  const _E2  =  $E2
   1499  1f97
   1500  1f97				   .L0120		;  const _E4  =  $E4
   1501  1f97
   1502  1f97				   .L0121		;  const _E6  =  $E6
   1503  1f97
   1504  1f97				   .L0122		;  const _E8  =  $E8
   1505  1f97
   1506  1f97				   .L0123		;  const _EA  =  $EA
   1507  1f97
   1508  1f97				   .L0124		;  const _EC  =  $EC
   1509  1f97
   1510  1f97				   .L0125		;  const _EE  =  $EE
   1511  1f97
   1512  1f97				   .L0126		;  const _F0  =  $F0
   1513  1f97
   1514  1f97				   .L0127		;  const _F2  =  $F2
   1515  1f97
   1516  1f97				   .L0128		;  const _F4  =  $F4
   1517  1f97
   1518  1f97				   .L0129		;  const _F6  =  $F6
   1519  1f97
   1520  1f97				   .L0130		;  const _F8  =  $F8
   1521  1f97
   1522  1f97				   .L0131		;  const _FA  =  $FA
   1523  1f97
   1524  1f97				   .L0132		;  const _FC  =  $FC
   1525  1f97
   1526  1f97				   .L0133		;  const _FE  =  $FE
   1527  1f97
   1528  1f97				   .
   1529  1f97							; 
   1530  1f97
   1531  1f97				   .L0134		;  goto __Bank_2 bank2
   1532  1f97
   1533  1f97		       85 81		      sta	temp7
   1534  1f99		       a9 30		      lda	#>(.__Bank_2-1)
   1535  1f9b		       48		      pha
   1536  1f9c		       a9 ed		      lda	#<(.__Bank_2-1)
   1537  1f9e		       48		      pha
   1538  1f9f		       a5 81		      lda	temp7
   1539  1fa1		       48		      pha
   1540  1fa2		       8a		      txa
   1541  1fa3		       48		      pha
   1542  1fa4		       a2 02		      ldx	#2
   1543  1fa6		       4c ee df 	      jmp	BS_jsr
   1544  1fa9				   .
   1545  1fa9							; 
   1546  1fa9
   1547  1fa9				   .L0135		;  bank 2
   1548  1fa9
   1549  1fa9					      if	ECHO1
      43 bytes of ROM space left in bank 1
   1550  1fa9					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   1551  1fa9					      endif
   1552  1fa9		       00 01	   ECHO1      =	1
   1553  1fd4					      ORG	$1FF4-bscode_length
   1554  1fd4					      RORG	$1FF4-bscode_length
   1555  1fd4		       a2 ff	   start_bank1 ldx	#$ff
   1556  1fd6					      ifconst	FASTFETCH	; using DPC+
   1557  1fd6		       8e 58 10 	      stx	FASTFETCH
   1558  1fd9					      endif
   1559  1fd9		       9a		      txs
   1560  1fda				  -	      if	bankswitch == 64
   1561  1fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   1562  1fda					      else
   1563  1fda		       a9 18		      lda	#>(start-1)
   1564  1fdc					      endif
   1565  1fdc		       48		      pha
   1566  1fdd		       a9 e3		      lda	#<(start-1)
   1567  1fdf		       48		      pha
   1568  1fe0		       48		      pha
   1569  1fe1		       8a		      txa
   1570  1fe2		       48		      pha
   1571  1fe3		       ba		      tsx
   1572  1fe4					      if	bankswitch != 64
   1573  1fe4		       b5 04		      lda	4,x	; get high byte of return address
   1574  1fe6		       2a		      rol
   1575  1fe7		       2a		      rol
   1576  1fe8		       2a		      rol
   1577  1fe9		       2a		      rol
   1578  1fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   1579  1fec		       aa		      tax
   1580  1fed		       e8		      inx
   1581  1fee				  -	      else
   1582  1fee				  -	      lda	4,x	; get high byte of return address
   1583  1fee				  -	      tay
   1584  1fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   1585  1fee				  -	      sta	4,x
   1586  1fee				  -	      tya
   1587  1fee				  -	      lsr
   1588  1fee				  -	      lsr
   1589  1fee				  -	      lsr
   1590  1fee				  -	      lsr
   1591  1fee				  -	      tax
   1592  1fee				  -	      inx
   1593  1fee					      endif
   1594  1fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   1595  1ff1		       68		      pla
   1596  1ff2		       aa		      tax
   1597  1ff3		       68		      pla
   1598  1ff4		       60		      rts
   1599  1ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   1600  1ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   1601  1ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   1602  1ff5					      endif
   1603  1ffc					      ORG	$1FFC
   1604  1ffc					      RORG	$1FFC
   1605  1ffc		       d4 1f		      .word.w	(start_bank1 & $ffff)
   1606  1ffe		       d4 1f		      .word.w	(start_bank1 & $ffff)
   1607  2000					      ORG	$2000
   1608  2000					      RORG	$3000
   1609  2000				   HMdiv
   1610  2000		       00 00 00 00*	      .byte.b	0, 0, 0, 0, 0, 0, 0
   1611  2007		       01 01 01 01*	      .byte.b	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
   1612  2017		       02 02 02 02*	      .byte.b	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3
   1613  2027		       03 03 03 03*	      .byte.b	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4
   1614  2037		       04 04 04 04*	      .byte.b	4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5
   1615  2047		       05 05 05 05*	      .byte.b	5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6
   1616  2057		       06 06 06 06*	      .byte.b	6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7
   1617  2067		       07 07 07 07*	      .byte.b	7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8
   1618  2077		       08 08 08 08*	      .byte.b	8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9
   1619  2087		       09 09 09 09*	      .byte.b	9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10
   1620  2097		       0a 0a 0a 0a*	      .byte.b	10,10,10,10,10,10,0,0,0
   1621  20a0				   .L0136		;  temp1 = temp1
   1622  20a0
   1623  20a0		       a5 cb		      LDA	temp1
   1624  20a2		       85 cb		      STA	temp1
   1625  20a4				   .__Reset
   1626  20a4							; __Reset
   1627  20a4
   1628  20a4				   .
   1629  20a4							; 
   1630  20a4
   1631  20a4				   .
   1632  20a4							; 
   1633  20a4
   1634  20a4				   .L0137		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   1635  20a4
   1636  20a4		       a9 00		      LDA	#0
   1637  20a6		       85 d1		      STA	a
   1638  20a8		       85 d2		      STA	b
   1639  20aa		       85 d3		      STA	c
   1640  20ac		       85 d4		      STA	d
   1641  20ae		       85 d5		      STA	e
   1642  20b0		       85 d6		      STA	f
   1643  20b2		       85 d7		      STA	g
   1644  20b4		       85 d8		      STA	h
   1645  20b6		       85 d9		      STA	i
   1646  20b8				   .L0138		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   1647  20b8
   1648  20b8		       a9 00		      LDA	#0
   1649  20ba		       85 da		      STA	j
   1650  20bc		       85 db		      STA	k
   1651  20be		       85 dc		      STA	l
   1652  20c0		       85 dd		      STA	m
   1653  20c2		       85 de		      STA	n
   1654  20c4		       85 df		      STA	o
   1655  20c6		       85 e0		      STA	p
   1656  20c8		       85 e1		      STA	q
   1657  20ca		       85 e2		      STA	r
   1658  20cc				   .L0139		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  y  =  0  :	z  =  0  :  var0  =  0
   1659  20cc
   1660  20cc		       a9 00		      LDA	#0
   1661  20ce		       85 e3		      STA	s
   1662  20d0		       85 e4		      STA	t
   1663  20d2		       85 e5		      STA	u
   1664  20d4		       85 e6		      STA	v
   1665  20d6		       85 e7		      STA	w
   1666  20d8		       85 e8		      STA	x
   1667  20da		       85 e9		      STA	y
   1668  20dc		       85 ea		      STA	z
   1669  20de		       85 ec		      STA	var0
   1670  20e0				   .L0140		;  var1  =  0	:  var2  =  0  :  var3	=  0  :  var4  =  0  :	var5  =  0  :  var6  =	0
   1671  20e0
   1672  20e0		       a9 00		      LDA	#0
   1673  20e2		       85 ed		      STA	var1
   1674  20e4		       85 ee		      STA	var2
   1675  20e6		       85 ef		      STA	var3
   1676  20e8		       85 f0		      STA	var4
   1677  20ea		       85 f1		      STA	var5
   1678  20ec		       85 f2		      STA	var6
   1679  20ee				   .
   1680  20ee							; 
   1681  20ee
   1682  20ee				   .__Bank_2
   1683  20ee							; __Bank_2
   1684  20ee
   1685  20ee				   .
   1686  20ee							; 
   1687  20ee
   1688  20ee				   .__Variables
   1689  20ee							; __Variables
   1690  20ee
   1691  20ee				   .
   1692  20ee							; 
   1693  20ee
   1694  20ee				   .L0141		;  const _P_Edge_Top  =  9
   1695  20ee
   1696  20ee				   .L0142		;  const _P_Edge_Bottom  =  160
   1697  20ee
   1698  20ee				   .L0143		;  const _P_Edge_Left	=  0
   1699  20ee
   1700  20ee				   .L0144		;  const _P_Edge_Right  =  150
   1701  20ee
   1702  20ee				   .L0145		;  const REdge  = 79
   1703  20ee
   1704  20ee				   .L0146		;  const LEdge  =  71
   1705  20ee
   1706  20ee				   .L0147		;  const pfscore  =  1
   1707  20ee
   1708  20ee				   .L0148		;  dim EnemyHit  =  i
   1709  20ee
   1710  20ee				   .L0149		;  dim drop  =  a
   1711  20ee
   1712  20ee				   .L0150		;  dim Moverate  = b
   1713  20ee
   1714  20ee				   .L0151		;  dim EnemySpeed  =  c
   1715  20ee
   1716  20ee				   .L0152		;  dim Points	=  d
   1717  20ee
   1718  20ee				   .L0153		;  dim frame  = f
   1719  20ee
   1720  20ee				   .L0154		;  dim Bit2_EnemyMove	= z
   1721  20ee
   1722  20ee				   .L0155		;  dim level  =  l
   1723  20ee
   1724  20ee				   .L0156		;  dim Bit1_missleOn  = z
   1725  20ee
   1726  20ee				   .L0157		;  dim HealthDrop  =  n
   1727  20ee
   1728  20ee				   .L0158		;  dim delay  =  o
   1729  20ee
   1730  20ee				   .L0159		;  dim Bit3_ShootorNot  = z
   1731  20ee
   1732  20ee				   .L0160		;  dim Househit  =  q
   1733  20ee
   1734  20ee				   .L0161		;  dim Timer  = t
   1735  20ee
   1736  20ee				   .L0162		;  dim Bit4_gameover  =  z
   1737  20ee
   1738  20ee				   .L0163		;  dim Bit6_PLayer3Direction  = z
   1739  20ee
   1740  20ee				   .L0164		;  dim Bit7_PLayer3Moving  = z
   1741  20ee
   1742  20ee				   .L0165		;  dim V1  =  h
   1743  20ee
   1744  20ee				   .L0166		;  dim Ch1_Sound  =  j
   1745  20ee
   1746  20ee				   .L0167		;  dim Ch1_Duration  =  k
   1747  20ee
   1748  20ee				   .L0168		;  dim Ch1_Counter  =	p
   1749  20ee
   1750  20ee				   .L0169		;  dim V0  =  v
   1751  20ee
   1752  20ee				   .L0170		;  dim Ch0_Sound  =  w
   1753  20ee
   1754  20ee				   .L0171		;  dim Ch0_Duration  =  x
   1755  20ee
   1756  20ee				   .L0172		;  dim Ch0_Counter  =	y
   1757  20ee
   1758  20ee				   .L0173		;  dim Bit5_hit  =  z
   1759  20ee
   1760  20ee				   .L0174		;  dim Bit0_NewLevel  =  z
   1761  20ee
   1762  20ee				   .L0175		;  dim PlayerDamage  =  m
   1763  20ee
   1764  20ee				   .L0176		;  dim gamenumber = u
   1765  20ee
   1766  20ee				   .L0177		;  dim swdebounce = v
   1767  20ee
   1768  20ee				   .L0178		;  dim PlayerHealth  =  e
   1769  20ee
   1770  20ee				   .L0179		;  dim Damage	=  var1
   1771  20ee
   1772  20ee				   .L0180		;  dim Powerup  =  var2
   1773  20ee
   1774  20ee				   .L0181		;  dim EnemyMissilerate  =  var3
   1775  20ee
   1776  20ee				   .L0182		;  dim PlayerMissileRate  =  var4
   1777  20ee
   1778  20ee				   .L0183		;  dim Bit0_HitPlayer	=  var5
   1779  20ee
   1780  20ee				   .L0184		;  dim Bit1_EnemyShootSound  =  var5
   1781  20ee
   1782  20ee				   .L0185		;  dim Bit2_HealthHitSound  =	var5
   1783  20ee
   1784  20ee				   .L0186		;  swdebounce = 0
   1785  20ee
   1786  20ee		       a9 00		      LDA	#0
   1787  20f0		       85 e6		      STA	swdebounce
   1788  20f2				   .L0187		;  gamenumber = 1
   1789  20f2
   1790  20f2		       a9 01		      LDA	#1
   1791  20f4		       85 e5		      STA	gamenumber
   1792  20f6				   .L0188		;  level  = 1
   1793  20f6
   1794  20f6		       a9 01		      LDA	#1
   1795  20f8		       85 dc		      STA	level
   1796  20fa				   .
   1797  20fa							; 
   1798  20fa
   1799  20fa				   .__titlepage
   1800  20fa							; __titlepage
   1801  20fa
   1802  20fa				   .L0189		;  delay  =  delay  + 1
   1803  20fa
   1804  20fa		       e6 df		      INC	delay
   1805  20fc				   .L0190		;  gosub __Titlesceen bank6
   1806  20fc
   1807  20fc		       85 81		      sta	temp7
   1808  20fe		       a9 31		      lda	#>(ret_point1-1)
   1809  2100		       48		      pha
   1810  2101		       a9 13		      lda	#<(ret_point1-1)
   1811  2103		       48		      pha
   1812  2104		       a9 b0		      lda	#>(.__Titlesceen-1)
   1813  2106		       48		      pha
   1814  2107		       a9 84		      lda	#<(.__Titlesceen-1)
   1815  2109		       48		      pha
   1816  210a		       a5 81		      lda	temp7
   1817  210c		       48		      pha
   1818  210d		       8a		      txa
   1819  210e		       48		      pha
   1820  210f		       a2 06		      ldx	#6
   1821  2111		       4c ee df 	      jmp	BS_jsr
   1822  2114				   ret_point1
   1823  2114				   .L0191		;  if Bit0_NewLevel{0}  &&  delay  <  60 then __TitleDelay
   1824  2114
   1825  2114		       a5 ea		      LDA	Bit0_NewLevel
   1826  2116		       4a		      LSR
   1827  2117		       90 06		      BCC	.skipL0191
   1828  2119				   .condpart0
   1829  2119		       a5 df		      LDA	delay
   1830  211b		       c9 3c		      CMP	#60
   1831  211d					      if	((* - .__TitleDelay) < 127) && ((* - .__TitleDelay) > -128)
   1832  211d		       90 11		      bcc	.__TitleDelay
   1833  211f				  -	      else
   1834  211f				  -	      bcs	.0skip__TitleDelay
   1835  211f				  -	      jmp	.__TitleDelay
   1836  211f				  -.0skip__TitleDelay
   1837  211f					      endif
   1838  211f				   .skipL0191
   1839  211f				   .L0192		;  if joy0fire  ||  switchreset then goto __Gamestart
   1840  211f
   1841  211f		       24 0c		      bit	INPT4
   1842  2121		       30 03		      BMI	.skipL0192
   1843  2123				   .condpart1
   1844  2123		       4c 2d 31 	      jmp	.condpart2
   1845  2126				   .skipL0192
   1846  2126		       a9 01		      lda	#1
   1847  2128		       2c 82 02 	      bit	SWCHB
   1848  212b		       d0 03		      BNE	.skip1OR
   1849  212d				   .condpart2
   1850  212d		       4c 33 31 	      jmp	.__Gamestart
   1851  2130
   1852  2130				   .skip1OR
   1853  2130				   .
   1854  2130							; 
   1855  2130
   1856  2130				   .
   1857  2130							; 
   1858  2130
   1859  2130				   .
   1860  2130							; 
   1861  2130
   1862  2130				   .__TitleDelay
   1863  2130							; __TitleDelay
   1864  2130
   1865  2130				   .L0193		;  goto __titlepage
   1866  2130
   1867  2130		       4c fa 30 	      jmp	.__titlepage
   1868  2133
   1869  2133				   .
   1870  2133							; 
   1871  2133
   1872  2133				   .__Gamestart
   1873  2133							; __Gamestart
   1874  2133
   1875  2133				   .L0194		;  Ch0_Counter = 0 :  Ch0_Duration = 0 :  Ch0_Sound = 0
   1876  2133
   1877  2133		       a9 00		      LDA	#0
   1878  2135		       85 e9		      STA	Ch0_Counter
   1879  2137		       85 e8		      STA	Ch0_Duration
   1880  2139		       85 e7		      STA	Ch0_Sound
   1881  213b				   .L0195		;  Ch1_Counter = 0 :  Ch1_Sound = 0 :	Ch1_Duration = 0
   1882  213b
   1883  213b		       a9 00		      LDA	#0
   1884  213d		       85 e0		      STA	Ch1_Counter
   1885  213f		       85 da		      STA	Ch1_Sound
   1886  2141		       85 db		      STA	Ch1_Duration
   1887  2143				   .L0196		;  swdebounce = 0
   1888  2143
   1889  2143		       a9 00		      LDA	#0
   1890  2145		       85 e6		      STA	swdebounce
   1891  2147				   .L0197		;  Bit4_gameover{4}  = 0
   1892  2147
   1893  2147		       a5 ea		      LDA	Bit4_gameover
   1894  2149		       29 ef		      AND	#239
   1895  214b		       85 ea		      STA	Bit4_gameover
   1896  214d				   .L0198		;  if Bit0_NewLevel{0} then goto __NextLevel
   1897  214d
   1898  214d		       a5 ea		      LDA	Bit0_NewLevel
   1899  214f		       4a		      LSR
   1900  2150		       90 03		      BCC	.skipL0198
   1901  2152				   .condpart3
   1902  2152		       4c b1 31 	      jmp	.__NextLevel
   1903  2155
   1904  2155				   .skipL0198
   1905  2155				   .L0199		;  for Timer  =  1 to 255
   1906  2155
   1907  2155		       a9 01		      LDA	#1
   1908  2157		       85 e4		      STA	Timer
   1909  2159				   .L0199forTimer
   1910  2159				   .L0200		;  next Timer
   1911  2159
   1912  2159		       a5 e4		      LDA	Timer
   1913  215b		       c9 ff		      CMP	#255
   1914  215d
   1915  215d		       e6 e4		      INC	Timer
   1916  215f					      if	((* - .L0199forTimer) < 127) && ((* - .L0199forTimer) > -128)
   1917  215f		       90 f8		      bcc	.L0199forTimer
   1918  2161				  -	      else
   1919  2161				  -	      bcs	.1skipL0199forTimer
   1920  2161				  -	      jmp	.L0199forTimer
   1921  2161				  -.1skipL0199forTimer
   1922  2161					      endif
   1923  2161				   .L0201		;  AUDV0  =  0  :  AUDV1  =  0
   1924  2161
   1925  2161		       a9 00		      LDA	#0
   1926  2163		       85 19		      STA	AUDV0
   1927  2165		       85 1a		      STA	AUDV1
   1928  2167				   .L0202		;  if switchrightb then level = 0  : EnemySpeed  = 3
   1929  2167
   1930  2167		       2c 82 02 	      bit	SWCHB
   1931  216a		       30 08		      BMI	.skipL0202
   1932  216c				   .condpart4
   1933  216c		       a9 00		      LDA	#0
   1934  216e		       85 dc		      STA	level
   1935  2170		       a9 03		      LDA	#3
   1936  2172		       85 d3		      STA	EnemySpeed
   1937  2174				   .skipL0202
   1938  2174				   .L0203		;  if !switchrightb then level  = 2  : EnemySpeed = 5
   1939  2174
   1940  2174		       2c 82 02 	      bit	SWCHB
   1941  2177		       10 08		      BPL	.skipL0203
   1942  2179				   .condpart5
   1943  2179		       a9 02		      LDA	#2
   1944  217b		       85 dc		      STA	level
   1945  217d		       a9 05		      LDA	#5
   1946  217f		       85 d3		      STA	EnemySpeed
   1947  2181				   .skipL0203
   1948  2181				   .L0204		;  EnemySpeed	= 3
   1949  2181
   1950  2181		       a9 03		      LDA	#3
   1951  2183		       85 d3		      STA	EnemySpeed
   1952  2185				   .L0205		;  dec score =  000000
   1953  2185
   1954  2185		       f8		      SED
   1955  2186		       a9 00		      LDA	#$00
   1956  2188		       85 ba		      STA	score+2
   1957  218a		       a9 00		      LDA	#$00
   1958  218c		       85 b9		      STA	score+1
   1959  218e		       a9 00		      LDA	#$00
   1960  2190		       85 b8		      STA	score
   1961  2192		       d8		      CLD
   1962  2193				   .L0206		;  Bit4_gameover{4}  = 0
   1963  2193
   1964  2193		       a5 ea		      LDA	Bit4_gameover
   1965  2195		       29 ef		      AND	#239
   1966  2197		       85 ea		      STA	Bit4_gameover
   1967  2199				   .L0207		;  V0	= 2
   1968  2199
   1969  2199		       a9 02		      LDA	#2
   1970  219b		       85 e6		      STA	V0
   1971  219d				   .L0208		;  Ch0_Duration  =  10
   1972  219d
   1973  219d		       a9 0a		      LDA	#10
   1974  219f		       85 e8		      STA	Ch0_Duration
   1975  21a1				   .L0209		;  V1	= 2
   1976  21a1
   1977  21a1		       a9 02		      LDA	#2
   1978  21a3		       85 d8		      STA	V1
   1979  21a5				   .L0210		;  Ch1_Duration  =  10
   1980  21a5
   1981  21a5		       a9 0a		      LDA	#10
   1982  21a7		       85 db		      STA	Ch1_Duration
   1983  21a9				   .L0211		;  EnemyMissilerate  = 3
   1984  21a9
   1985  21a9		       a9 03		      LDA	#3
   1986  21ab		       85 ef		      STA	EnemyMissilerate
   1987  21ad				   .L0212		;  PlayerMissileRate  =  5
   1988  21ad
   1989  21ad		       a9 05		      LDA	#5
   1990  21af		       85 f0		      STA	PlayerMissileRate
   1991  21b1				   .
   1992  21b1							; 
   1993  21b1
   1994  21b1				   .__NextLevel
   1995  21b1							; __NextLevel
   1996  21b1
   1997  21b1				   .L0213		;  gamenumber = gamenumber + 1
   1998  21b1
   1999  21b1		       e6 e5		      INC	gamenumber
   2000  21b3				   .L0214		;  Powerup  =	 ( rand & 1 ) 
   2001  21b3
   2002  21b3							; complex statement detected
   2003  21b3		       ad 00 10 	      lda	rand
   2004  21b6		       4a		      lsr
   2005  21b7				  -	      ifconst	rand16
   2006  21b7				  -	      rol	rand16
   2007  21b7					      endif
   2008  21b7		       90 02		      bcc	*+4
   2009  21b9		       49 b4		      eor	#$B4
   2010  21bb		       8d 00 10 	      sta	rand
   2011  21be				  -	      ifconst	rand16
   2012  21be				  -	      eor	rand16
   2013  21be					      endif
   2014  21be		       29 01		      AND	#1
   2015  21c0		       85 ee		      STA	Powerup
   2016  21c2				   .L0215		;  Bit0_NewLevel{0}  =  0
   2017  21c2
   2018  21c2		       a5 ea		      LDA	Bit0_NewLevel
   2019  21c4		       29 fe		      AND	#254
   2020  21c6		       85 ea		      STA	Bit0_NewLevel
   2021  21c8				   .L0216		;  pfscore2  =  %11111111
   2022  21c8
   2023  21c8		       a9 ff		      LDA	#%11111111
   2024  21ca		       85 c9		      STA	pfscore2
   2025  21cc				   .L0217		;  pfscore1  =  %11111111
   2026  21cc
   2027  21cc		       a9 ff		      LDA	#%11111111
   2028  21ce		       85 c8		      STA	pfscore1
   2029  21d0				   .L0218		;  PlayerHealth  =  80
   2030  21d0
   2031  21d0		       a9 50		      LDA	#80
   2032  21d2		       85 d5		      STA	PlayerHealth
   2033  21d4				   .L0219		;  AUDV0  =  0  :  AUDV1  =  0
   2034  21d4
   2035  21d4		       a9 00		      LDA	#0
   2036  21d6		       85 19		      STA	AUDV0
   2037  21d8		       85 1a		      STA	AUDV1
   2038  21da				   .L0220		;  Ch0_Counter = 0 :  Ch0_Duration = 0 :  Ch0_Sound = 0
   2039  21da
   2040  21da		       a9 00		      LDA	#0
   2041  21dc		       85 e9		      STA	Ch0_Counter
   2042  21de		       85 e8		      STA	Ch0_Duration
   2043  21e0		       85 e7		      STA	Ch0_Sound
   2044  21e2				   .L0221		;  Ch1_Counter = 0 :  Ch1_Sound = 0 :	Ch1_Duration = 0
   2045  21e2
   2046  21e2		       a9 00		      LDA	#0
   2047  21e4		       85 e0		      STA	Ch1_Counter
   2048  21e6		       85 da		      STA	Ch1_Sound
   2049  21e8		       85 db		      STA	Ch1_Duration
   2050  21ea				   .L0222		;  delay  =  0
   2051  21ea
   2052  21ea		       a9 00		      LDA	#0
   2053  21ec		       85 df		      STA	delay
   2054  21ee				   .L0223		;  player5x  = 200  :	player5y  = 200
   2055  21ee
   2056  21ee		       a9 c8		      LDA	#200
   2057  21f0		       85 94		      STA	player5x
   2058  21f2		       85 9e		      STA	player5y
   2059  21f4				   .L0224		;  player6x  = 200  :	player6y  = 200
   2060  21f4
   2061  21f4		       a9 c8		      LDA	#200
   2062  21f6		       85 95		      STA	player6x
   2063  21f8		       85 9f		      STA	player6y
   2064  21fa				   .L0225		;  player7x  = 200  :	player7y  = 200
   2065  21fa
   2066  21fa		       a9 c8		      LDA	#200
   2067  21fc		       85 96		      STA	player7x
   2068  21fe		       85 a0		      STA	player7y
   2069  2200				   .L0226		;  player1y  =  25  :	player1x  =   ( rand & 150 ) 
   2070  2200
   2071  2200		       a9 19		      LDA	#25
   2072  2202		       85 9a		      STA	player1y
   2073  2204							; complex statement detected
   2074  2204		       ad 00 10 	      lda	rand
   2075  2207		       4a		      lsr
   2076  2208				  -	      ifconst	rand16
   2077  2208				  -	      rol	rand16
   2078  2208					      endif
   2079  2208		       90 02		      bcc	*+4
   2080  220a		       49 b4		      eor	#$B4
   2081  220c		       8d 00 10 	      sta	rand
   2082  220f				  -	      ifconst	rand16
   2083  220f				  -	      eor	rand16
   2084  220f					      endif
   2085  220f		       29 96		      AND	#150
   2086  2211		       85 90		      STA	player1x
   2087  2213				   .L0227		;  player2y  =  10  :	player2x  =   ( rand & 150 ) 
   2088  2213
   2089  2213		       a9 0a		      LDA	#10
   2090  2215		       85 9b		      STA	player2y
   2091  2217							; complex statement detected
   2092  2217		       ad 00 10 	      lda	rand
   2093  221a		       4a		      lsr
   2094  221b				  -	      ifconst	rand16
   2095  221b				  -	      rol	rand16
   2096  221b					      endif
   2097  221b		       90 02		      bcc	*+4
   2098  221d		       49 b4		      eor	#$B4
   2099  221f		       8d 00 10 	      sta	rand
   2100  2222				  -	      ifconst	rand16
   2101  2222				  -	      eor	rand16
   2102  2222					      endif
   2103  2222		       29 96		      AND	#150
   2104  2224		       85 91		      STA	player2x
   2105  2226				   .L0228		;  if LEdge  <=  80 then player3y  =  15 :  player3x  = 150
   2106  2226
   2107  2226		       a9 50		      LDA	#80
   2108  2228		       c9 47		      CMP	#LEdge
   2109  222a		       90 08		      BCC	.skipL0228
   2110  222c				   .condpart6
   2111  222c		       a9 0f		      LDA	#15
   2112  222e		       85 9c		      STA	player3y
   2113  2230		       a9 96		      LDA	#150
   2114  2232		       85 92		      STA	player3x
   2115  2234				   .skipL0228
   2116  2234				   .L0229		;  if LEdge  >  80 then player3y  =  15 :  player3x  = 15
   2117  2234
   2118  2234		       a9 50		      LDA	#80
   2119  2236		       c9 47		      CMP	#LEdge
   2120  2238		       b0 06		      BCS	.skipL0229
   2121  223a				   .condpart7
   2122  223a		       a9 0f		      LDA	#15
   2123  223c		       85 9c		      STA	player3y
   2124  223e		       85 92		      STA	player3x
   2125  2240				   .skipL0229
   2126  2240				   .L0230		;  player4y  = 200
   2127  2240
   2128  2240		       a9 c8		      LDA	#200
   2129  2242		       85 9d		      STA	player4y
   2130  2244				   .L0231		;  level = level + $1
   2131  2244
   2132  2244		       a5 dc		      LDA	level
   2133  2246		       18		      CLC
   2134  2247		       69 01		      ADC	#$1
   2135  2249		       85 dc		      STA	level
   2136  224b				   .L0232		;  Bit1_missleOn{1}  =  0
   2137  224b
   2138  224b		       a5 ea		      LDA	Bit1_missleOn
   2139  224d		       29 fd		      AND	#253
   2140  224f		       85 ea		      STA	Bit1_missleOn
   2141  2251				   .L0233		;  Househit = 1
   2142  2251
   2143  2251		       a9 01		      LDA	#1
   2144  2253		       85 e1		      STA	Househit
   2145  2255				   .L0234		;  Bit2_EnemyMove{2} = 0
   2146  2255
   2147  2255		       a5 ea		      LDA	Bit2_EnemyMove
   2148  2257		       29 fb		      AND	#251
   2149  2259		       85 ea		      STA	Bit2_EnemyMove
   2150  225b				   .L0235		;  if level  <  4 then EnemySpeed = EnemySpeed + 1
   2151  225b
   2152  225b		       a5 dc		      LDA	level
   2153  225d		       c9 04		      CMP	#4
   2154  225f		       b0 02		      BCS	.skipL0235
   2155  2261				   .condpart8
   2156  2261		       e6 d3		      INC	EnemySpeed
   2157  2263				   .skipL0235
   2158  2263				   .L0236		;  PlayerDamage = 0
   2159  2263
   2160  2263		       a9 00		      LDA	#0
   2161  2265		       85 dd		      STA	PlayerDamage
   2162  2267				   .L0237		;  frame = 0
   2163  2267
   2164  2267		       a9 00		      LDA	#0
   2165  2269		       85 d6		      STA	frame
   2166  226b				   .L0238		;  gosub __Playfield1 bank3
   2167  226b
   2168  226b		       85 81		      sta	temp7
   2169  226d		       a9 32		      lda	#>(ret_point2-1)
   2170  226f		       48		      pha
   2171  2270		       a9 82		      lda	#<(ret_point2-1)
   2172  2272		       48		      pha
   2173  2273		       a9 51		      lda	#>(.__Playfield1-1)
   2174  2275		       48		      pha
   2175  2276		       a9 db		      lda	#<(.__Playfield1-1)
   2176  2278		       48		      pha
   2177  2279		       a5 81		      lda	temp7
   2178  227b		       48		      pha
   2179  227c		       8a		      txa
   2180  227d		       48		      pha
   2181  227e		       a2 03		      ldx	#3
   2182  2280		       4c ee df 	      jmp	BS_jsr
   2183  2283				   ret_point2
   2184  2283				   .L0239		;  Bit5_hit{5}  = 0
   2185  2283
   2186  2283		       a5 ea		      LDA	Bit5_hit
   2187  2285		       29 df		      AND	#223
   2188  2287		       85 ea		      STA	Bit5_hit
   2189  2289				   .L0240		;  EnemyMissilerate  =  EnemyMissilerate  + 1
   2190  2289
   2191  2289		       e6 ef		      INC	EnemyMissilerate
   2192  228b				   .L0241		;  if EnemyMissilerate  >  5 then EnemyMissilerate  = 5
   2193  228b
   2194  228b		       a9 05		      LDA	#5
   2195  228d		       c5 ef		      CMP	EnemyMissilerate
   2196  228f		       b0 04		      BCS	.skipL0241
   2197  2291				   .condpart9
   2198  2291		       a9 05		      LDA	#5
   2199  2293		       85 ef		      STA	EnemyMissilerate
   2200  2295				   .skipL0241
   2201  2295				   .
   2202  2295							; 
   2203  2295
   2204  2295				   .
   2205  2295							; 
   2206  2295
   2207  2295				   .
   2208  2295							; 
   2209  2295
   2210  2295				   .
   2211  2295							; 
   2212  2295
   2213  2295				   .__GameVar
   2214  2295							; __GameVar
   2215  2295
   2216  2295				   .
   2217  2295							; 
   2218  2295
   2219  2295				   .L0242		;  player0x  =  75
   2220  2295
   2221  2295		       a9 4b		      LDA	#75
   2222  2297		       85 80		      STA	player0x
   2223  2299				   .L0243		;  player0y  =  160
   2224  2299
   2225  2299		       a9 a0		      LDA	#160
   2226  229b		       85 99		      STA	player0y
   2227  229d				   .L0244		;  missile0x  =  200  :  missile0y  =	200
   2228  229d
   2229  229d		       a9 c8		      LDA	#200
   2230  229f		       85 82		      STA	missile0x
   2231  22a1		       85 bf		      STA	missile0y
   2232  22a3				   .L0245		;  missile0height  =  12
   2233  22a3
   2234  22a3		       a9 0c		      LDA	#12
   2235  22a5		       85 c2		      STA	missile0height
   2236  22a7				   .L0246		;  missile1x  =  200  :  missile1y  =	200
   2237  22a7
   2238  22a7		       a9 c8		      LDA	#200
   2239  22a9		       85 83		      STA	missile1x
   2240  22ab		       85 c0		      STA	missile1y
   2241  22ad				   .L0247		;  missile1height  =  8
   2242  22ad
   2243  22ad		       a9 08		      LDA	#8
   2244  22af		       85 c3		      STA	missile1height
   2245  22b1				   .L0248		;  Bit1_missleOn{1} = 0
   2246  22b1
   2247  22b1		       a5 ea		      LDA	Bit1_missleOn
   2248  22b3		       29 fd		      AND	#253
   2249  22b5		       85 ea		      STA	Bit1_missleOn
   2250  22b7				   .L0249		;  drop  = 0
   2251  22b7
   2252  22b7		       a9 00		      LDA	#0
   2253  22b9		       85 d1		      STA	drop
   2254  22bb				   .L0250		;  CTRLPF = $21
   2255  22bb
   2256  22bb		       a9 21		      LDA	#$21
   2257  22bd		       85 0a		      STA	CTRLPF
   2258  22bf				   .L0251		;  EnemyHit  =  0
   2259  22bf
   2260  22bf		       a9 00		      LDA	#0
   2261  22c1		       85 d9		      STA	EnemyHit
   2262  22c3				   .L0252		;  Bit6_PLayer3Direction{6} = 0
   2263  22c3
   2264  22c3		       a5 ea		      LDA	Bit6_PLayer3Direction
   2265  22c5		       29 bf		      AND	#191
   2266  22c7		       85 ea		      STA	Bit6_PLayer3Direction
   2267  22c9				   .L0253		;  Bit0_HitPlayer{0} = 0
   2268  22c9
   2269  22c9		       a5 f1		      LDA	Bit0_HitPlayer
   2270  22cb		       29 fe		      AND	#254
   2271  22cd		       85 f1		      STA	Bit0_HitPlayer
   2272  22cf				   .L0254		;  Bit1_EnemyShootSound{1}  = 0
   2273  22cf
   2274  22cf		       a5 f1		      LDA	Bit1_EnemyShootSound
   2275  22d1		       29 fd		      AND	#253
   2276  22d3		       85 f1		      STA	Bit1_EnemyShootSound
   2277  22d5				   .L0255		;  Bit2_HealthHitSound  =  0
   2278  22d5
   2279  22d5		       a9 00		      LDA	#0
   2280  22d7		       85 f1		      STA	Bit2_HealthHitSound
   2281  22d9				   .
   2282  22d9							; 
   2283  22d9
   2284  22d9				   .__Main_Loop
   2285  22d9							; __Main_Loop
   2286  22d9
   2287  22d9				   .
   2288  22d9							; 
   2289  22d9
   2290  22d9				   .__GameSettings
   2291  22d9							; __GameSettings
   2292  22d9
   2293  22d9				   .
   2294  22d9							; 
   2295  22d9
   2296  22d9				   .L0256		;  delay  =  delay  + 1
   2297  22d9
   2298  22d9		       e6 df		      INC	delay
   2299  22db				   .L0257		;  if delay  <  60 then __Resume bank2
   2300  22db
   2301  22db		       a5 df		      LDA	delay
   2302  22dd		       c9 3c		      CMP	#60
   2303  22df		       b0 00		      BCS	.skipL0257
   2304  22e1				   .condpart10
   2305  22e1				   .skipL0257
   2306  22e1				   .L0258		;  if delay  >  61 then delay	=  71
   2307  22e1
   2308  22e1		       a9 3d		      LDA	#61
   2309  22e3		       c5 df		      CMP	delay
   2310  22e5		       b0 04		      BCS	.skipL0258
   2311  22e7				   .condpart11
   2312  22e7		       a9 47		      LDA	#71
   2313  22e9		       85 df		      STA	delay
   2314  22eb				   .skipL0258
   2315  22eb				   .L0259		;  if switchreset goto __Reset
   2316  22eb
   2317  22eb		       a9 01		      lda	#1
   2318  22ed		       2c 82 02 	      bit	SWCHB
   2319  22f0				  -	      if	((* - .__Reset) < 127) && ((* - .__Reset) > -128)
   2320  22f0				  -	      BEQ	.__Reset
   2321  22f0					      else
   2322  22f0		       d0 03		      bne	.2skip__Reset
   2323  22f2		       4c a4 30 	      jmp	.__Reset
   2324  22f5				   .2skip__Reset
   2325  22f5					      endif
   2326  22f5				   .L0260		;  if Bit4_gameover{4} then goto __SkipMove bank2
   2327  22f5
   2328  22f5		       a5 ea		      LDA	Bit4_gameover
   2329  22f7		       29 10		      AND	#16
   2330  22f9		       f0 12		      BEQ	.skipL0260
   2331  22fb				   .condpart12
   2332  22fb		       85 81		      sta	temp7
   2333  22fd		       a9 3b		      lda	#>(.__SkipMove-1)
   2334  22ff		       48		      pha
   2335  2300		       a9 d8		      lda	#<(.__SkipMove-1)
   2336  2302		       48		      pha
   2337  2303		       a5 81		      lda	temp7
   2338  2305		       48		      pha
   2339  2306		       8a		      txa
   2340  2307		       48		      pha
   2341  2308		       a2 02		      ldx	#2
   2342  230a		       4c ee df 	      jmp	BS_jsr
   2343  230d				   .skipL0260
   2344  230d				   .L0261		;  if PlayerHealth  <= 0 then Bit4_gameover{4}  = 1
   2345  230d
   2346  230d		       a9 00		      LDA	#0
   2347  230f		       c5 d5		      CMP	PlayerHealth
   2348  2311		       90 06		      BCC	.skipL0261
   2349  2313				   .condpart13
   2350  2313		       a5 ea		      LDA	Bit4_gameover
   2351  2315		       09 10		      ORA	#16
   2352  2317		       85 ea		      STA	Bit4_gameover
   2353  2319				   .skipL0261
   2354  2319				   .L0262		;  if PlayerHealth  > 80 then Bit4_gameover{4}  = 1
   2355  2319
   2356  2319		       a9 50		      LDA	#80
   2357  231b		       c5 d5		      CMP	PlayerHealth
   2358  231d		       b0 06		      BCS	.skipL0262
   2359  231f				   .condpart14
   2360  231f		       a5 ea		      LDA	Bit4_gameover
   2361  2321		       09 10		      ORA	#16
   2362  2323		       85 ea		      STA	Bit4_gameover
   2363  2325				   .skipL0262
   2364  2325				   .L0263		;  if Bit4_gameover{4} then gosub __GameOver bank4
   2365  2325
   2366  2325		       a5 ea		      LDA	Bit4_gameover
   2367  2327		       29 10		      AND	#16
   2368  2329		       f0 18		      BEQ	.skipL0263
   2369  232b				   .condpart15
   2370  232b		       85 81		      sta	temp7
   2371  232d		       a9 33		      lda	#>(ret_point3-1)
   2372  232f		       48		      pha
   2373  2330		       a9 42		      lda	#<(ret_point3-1)
   2374  2332		       48		      pha
   2375  2333		       a9 76		      lda	#>(.__GameOver-1)
   2376  2335		       48		      pha
   2377  2336		       a9 a2		      lda	#<(.__GameOver-1)
   2378  2338		       48		      pha
   2379  2339		       a5 81		      lda	temp7
   2380  233b		       48		      pha
   2381  233c		       8a		      txa
   2382  233d		       48		      pha
   2383  233e		       a2 04		      ldx	#4
   2384  2340		       4c ee df 	      jmp	BS_jsr
   2385  2343				   ret_point3
   2386  2343				   .skipL0263
   2387  2343				   .L0264		;  if Househit > 1 then gosub __Househits bank3
   2388  2343
   2389  2343		       a9 01		      LDA	#1
   2390  2345		       c5 e1		      CMP	Househit
   2391  2347		       b0 18		      BCS	.skipL0264
   2392  2349				   .condpart16
   2393  2349		       85 81		      sta	temp7
   2394  234b		       a9 33		      lda	#>(ret_point4-1)
   2395  234d		       48		      pha
   2396  234e		       a9 60		      lda	#<(ret_point4-1)
   2397  2350		       48		      pha
   2398  2351		       a9 50		      lda	#>(.__Househits-1)
   2399  2353		       48		      pha
   2400  2354		       a9 84		      lda	#<(.__Househits-1)
   2401  2356		       48		      pha
   2402  2357		       a5 81		      lda	temp7
   2403  2359		       48		      pha
   2404  235a		       8a		      txa
   2405  235b		       48		      pha
   2406  235c		       a2 03		      ldx	#3
   2407  235e		       4c ee df 	      jmp	BS_jsr
   2408  2361				   ret_point4
   2409  2361				   .skipL0264
   2410  2361				   .L0265		;  if Househit > 12 then gosub __GameOver bank4
   2411  2361
   2412  2361		       a9 0c		      LDA	#12
   2413  2363		       c5 e1		      CMP	Househit
   2414  2365		       b0 18		      BCS	.skipL0265
   2415  2367				   .condpart17
   2416  2367		       85 81		      sta	temp7
   2417  2369		       a9 33		      lda	#>(ret_point5-1)
   2418  236b		       48		      pha
   2419  236c		       a9 7e		      lda	#<(ret_point5-1)
   2420  236e		       48		      pha
   2421  236f		       a9 76		      lda	#>(.__GameOver-1)
   2422  2371		       48		      pha
   2423  2372		       a9 a2		      lda	#<(.__GameOver-1)
   2424  2374		       48		      pha
   2425  2375		       a5 81		      lda	temp7
   2426  2377		       48		      pha
   2427  2378		       8a		      txa
   2428  2379		       48		      pha
   2429  237a		       a2 04		      ldx	#4
   2430  237c		       4c ee df 	      jmp	BS_jsr
   2431  237f				   ret_point5
   2432  237f				   .skipL0265
   2433  237f				   .L0266		;  if EnemyHit  >  0 then Bit1_missleOn{1}  =	0 :  missile0y = 200
   2434  237f
   2435  237f		       a9 00		      LDA	#0
   2436  2381		       c5 d9		      CMP	EnemyHit
   2437  2383		       b0 0a		      BCS	.skipL0266
   2438  2385				   .condpart18
   2439  2385		       a5 ea		      LDA	Bit1_missleOn
   2440  2387		       29 fd		      AND	#253
   2441  2389		       85 ea		      STA	Bit1_missleOn
   2442  238b		       a9 c8		      LDA	#200
   2443  238d		       85 bf		      STA	missile0y
   2444  238f				   .skipL0266
   2445  238f				   .L0267		;  if PlayerHealth >  80 then pfscore2  = %00000000
   2446  238f
   2447  238f		       a9 50		      LDA	#80
   2448  2391		       c5 d5		      CMP	PlayerHealth
   2449  2393		       b0 04		      BCS	.skipL0267
   2450  2395				   .condpart19
   2451  2395		       a9 00		      LDA	#%00000000
   2452  2397		       85 c9		      STA	pfscore2
   2453  2399				   .skipL0267
   2454  2399				   .L0268		;  if PlayerHealth =  0 then pfscore2	= %00000000
   2455  2399
   2456  2399		       a5 d5		      LDA	PlayerHealth
   2457  239b		       c9 00		      CMP	#0
   2458  239d		       d0 04		      BNE	.skipL0268
   2459  239f				   .condpart20
   2460  239f		       a9 00		      LDA	#%00000000
   2461  23a1		       85 c9		      STA	pfscore2
   2462  23a3				   .skipL0268
   2463  23a3				   .L0269		;  if PlayerHealth >  0 then pfscore2	= %00000001
   2464  23a3
   2465  23a3		       a9 00		      LDA	#0
   2466  23a5		       c5 d5		      CMP	PlayerHealth
   2467  23a7		       b0 04		      BCS	.skipL0269
   2468  23a9				   .condpart21
   2469  23a9		       a9 01		      LDA	#%00000001
   2470  23ab		       85 c9		      STA	pfscore2
   2471  23ad				   .skipL0269
   2472  23ad				   .L0270		;  if PlayerHealth >  10 then pfscore2  = %00000011
   2473  23ad
   2474  23ad		       a9 0a		      LDA	#10
   2475  23af		       c5 d5		      CMP	PlayerHealth
   2476  23b1		       b0 04		      BCS	.skipL0270
   2477  23b3				   .condpart22
   2478  23b3		       a9 03		      LDA	#%00000011
   2479  23b5		       85 c9		      STA	pfscore2
   2480  23b7				   .skipL0270
   2481  23b7				   .L0271		;  if PlayerHealth >  20 then pfscore2  = %00000111
   2482  23b7
   2483  23b7		       a9 14		      LDA	#20
   2484  23b9		       c5 d5		      CMP	PlayerHealth
   2485  23bb		       b0 04		      BCS	.skipL0271
   2486  23bd				   .condpart23
   2487  23bd		       a9 07		      LDA	#%00000111
   2488  23bf		       85 c9		      STA	pfscore2
   2489  23c1				   .skipL0271
   2490  23c1				   .L0272		;  if PlayerHealth >  30 then pfscore2  = %00001111
   2491  23c1
   2492  23c1		       a9 1e		      LDA	#30
   2493  23c3		       c5 d5		      CMP	PlayerHealth
   2494  23c5		       b0 04		      BCS	.skipL0272
   2495  23c7				   .condpart24
   2496  23c7		       a9 0f		      LDA	#%00001111
   2497  23c9		       85 c9		      STA	pfscore2
   2498  23cb				   .skipL0272
   2499  23cb				   .L0273		;  if PlayerHealth >  40 then pfscore2  = %00011111
   2500  23cb
   2501  23cb		       a9 28		      LDA	#40
   2502  23cd		       c5 d5		      CMP	PlayerHealth
   2503  23cf		       b0 04		      BCS	.skipL0273
   2504  23d1				   .condpart25
   2505  23d1		       a9 1f		      LDA	#%00011111
   2506  23d3		       85 c9		      STA	pfscore2
   2507  23d5				   .skipL0273
   2508  23d5				   .L0274		;  if PlayerHealth >  50 then pfscore2  = %00111111
   2509  23d5
   2510  23d5		       a9 32		      LDA	#50
   2511  23d7		       c5 d5		      CMP	PlayerHealth
   2512  23d9		       b0 04		      BCS	.skipL0274
   2513  23db				   .condpart26
   2514  23db		       a9 3f		      LDA	#%00111111
   2515  23dd		       85 c9		      STA	pfscore2
   2516  23df				   .skipL0274
   2517  23df				   .L0275		;  if PlayerHealth >  60 then pfscore2  = %01111111
   2518  23df
   2519  23df		       a9 3c		      LDA	#60
   2520  23e1		       c5 d5		      CMP	PlayerHealth
   2521  23e3		       b0 04		      BCS	.skipL0275
   2522  23e5				   .condpart27
   2523  23e5		       a9 7f		      LDA	#%01111111
   2524  23e7		       85 c9		      STA	pfscore2
   2525  23e9				   .skipL0275
   2526  23e9				   .L0276		;  if PlayerHealth >  70 then pfscore2  =  %11111111
   2527  23e9
   2528  23e9		       a9 46		      LDA	#70
   2529  23eb		       c5 d5		      CMP	PlayerHealth
   2530  23ed		       b0 04		      BCS	.skipL0276
   2531  23ef				   .condpart28
   2532  23ef		       a9 ff		      LDA	#%11111111
   2533  23f1		       85 c9		      STA	pfscore2
   2534  23f3				   .skipL0276
   2535  23f3				   .L0277		;  if drop  >=  45 then pfscore1  =  %00000001
   2536  23f3
   2537  23f3		       a5 d1		      LDA	drop
   2538  23f5		       c9 2d		      CMP	#45
   2539  23f7		       90 04		      BCC	.skipL0277
   2540  23f9				   .condpart29
   2541  23f9		       a9 01		      LDA	#%00000001
   2542  23fb		       85 c8		      STA	pfscore1
   2543  23fd				   .skipL0277
   2544  23fd				   .L0278		;  if drop  <=  45 then pfscore1  =  %00000011
   2545  23fd
   2546  23fd		       a9 2d		      LDA	#45
   2547  23ff		       c5 d1		      CMP	drop
   2548  2401		       90 04		      BCC	.skipL0278
   2549  2403				   .condpart30
   2550  2403		       a9 03		      LDA	#%00000011
   2551  2405		       85 c8		      STA	pfscore1
   2552  2407				   .skipL0278
   2553  2407				   .L0279		;  if drop  <=  40 then pfscore1  =  %00000111
   2554  2407
   2555  2407		       a9 28		      LDA	#40
   2556  2409		       c5 d1		      CMP	drop
   2557  240b		       90 04		      BCC	.skipL0279
   2558  240d				   .condpart31
   2559  240d		       a9 07		      LDA	#%00000111
   2560  240f		       85 c8		      STA	pfscore1
   2561  2411				   .skipL0279
   2562  2411				   .L0280		;  if drop  <=  35 then pfscore1  =  %00001111
   2563  2411
   2564  2411		       a9 23		      LDA	#35
   2565  2413		       c5 d1		      CMP	drop
   2566  2415		       90 04		      BCC	.skipL0280
   2567  2417				   .condpart32
   2568  2417		       a9 0f		      LDA	#%00001111
   2569  2419		       85 c8		      STA	pfscore1
   2570  241b				   .skipL0280
   2571  241b				   .L0281		;  if drop  <=  30 then pfscore1  =  %00011111
   2572  241b
   2573  241b		       a9 1e		      LDA	#30
   2574  241d		       c5 d1		      CMP	drop
   2575  241f		       90 04		      BCC	.skipL0281
   2576  2421				   .condpart33
   2577  2421		       a9 1f		      LDA	#%00011111
   2578  2423		       85 c8		      STA	pfscore1
   2579  2425				   .skipL0281
   2580  2425				   .L0282		;  if drop  <=  20 then pfscore1  =  %00111111
   2581  2425
   2582  2425		       a9 14		      LDA	#20
   2583  2427		       c5 d1		      CMP	drop
   2584  2429		       90 04		      BCC	.skipL0282
   2585  242b				   .condpart34
   2586  242b		       a9 3f		      LDA	#%00111111
   2587  242d		       85 c8		      STA	pfscore1
   2588  242f				   .skipL0282
   2589  242f				   .L0283		;  if drop  <=  10 then pfscore1  =  %01111111
   2590  242f
   2591  242f		       a9 0a		      LDA	#10
   2592  2431		       c5 d1		      CMP	drop
   2593  2433		       90 04		      BCC	.skipL0283
   2594  2435				   .condpart35
   2595  2435		       a9 7f		      LDA	#%01111111
   2596  2437		       85 c8		      STA	pfscore1
   2597  2439				   .skipL0283
   2598  2439				   .L0284		;  if drop  <	10 then pfscore1  =  %11111111
   2599  2439
   2600  2439		       a5 d1		      LDA	drop
   2601  243b		       c9 0a		      CMP	#10
   2602  243d		       b0 04		      BCS	.skipL0284
   2603  243f				   .condpart36
   2604  243f		       a9 ff		      LDA	#%11111111
   2605  2441		       85 c8		      STA	pfscore1
   2606  2443				   .skipL0284
   2607  2443				   .L0285		;  if PlayerHealth  <	20 then pfscorecolor  =  $32
   2608  2443
   2609  2443		       a5 d5		      LDA	PlayerHealth
   2610  2445		       c9 14		      CMP	#20
   2611  2447		       b0 04		      BCS	.skipL0285
   2612  2449				   .condpart37
   2613  2449		       a9 32		      LDA	#$32
   2614  244b		       85 c6		      STA	pfscorecolor
   2615  244d				   .skipL0285
   2616  244d				   .L0286		;  if PlayerHealth  >	20 then pfscorecolor  = $00
   2617  244d
   2618  244d		       a9 14		      LDA	#20
   2619  244f		       c5 d5		      CMP	PlayerHealth
   2620  2451		       b0 04		      BCS	.skipL0286
   2621  2453				   .condpart38
   2622  2453		       a9 00		      LDA	#$00
   2623  2455		       85 c6		      STA	pfscorecolor
   2624  2457				   .skipL0286
   2625  2457				   .L0287		;  if drop  >=  50 then AUDV0	=  0  :  AUDV1	=  0
   2626  2457
   2627  2457		       a5 d1		      LDA	drop
   2628  2459		       c9 32		      CMP	#50
   2629  245b		       90 06		      BCC	.skipL0287
   2630  245d				   .condpart39
   2631  245d		       a9 00		      LDA	#0
   2632  245f		       85 19		      STA	AUDV0
   2633  2461		       85 1a		      STA	AUDV1
   2634  2463				   .skipL0287
   2635  2463				   .L0288		;  if drop  >=  50 then Bit0_NewLevel{0} = 1 :  delay	=  0 :	goto __titlepage bank2
   2636  2463
   2637  2463		       a5 d1		      LDA	drop
   2638  2465		       c9 32		      CMP	#50
   2639  2467		       90 1c		      BCC	.skipL0288
   2640  2469				   .condpart40
   2641  2469		       a5 ea		      LDA	Bit0_NewLevel
   2642  246b		       09 01		      ORA	#1
   2643  246d		       85 ea		      STA	Bit0_NewLevel
   2644  246f		       a9 00		      LDA	#0
   2645  2471		       85 df		      STA	delay
   2646  2473		       85 81		      sta	temp7
   2647  2475		       a9 30		      lda	#>(.__titlepage-1)
   2648  2477		       48		      pha
   2649  2478		       a9 f9		      lda	#<(.__titlepage-1)
   2650  247a		       48		      pha
   2651  247b		       a5 81		      lda	temp7
   2652  247d		       48		      pha
   2653  247e		       8a		      txa
   2654  247f		       48		      pha
   2655  2480		       a2 02		      ldx	#2
   2656  2482		       4c ee df 	      jmp	BS_jsr
   2657  2485				   .skipL0288
   2658  2485				   .L0289		;  frame = frame + 1
   2659  2485
   2660  2485		       e6 d6		      INC	frame
   2661  2487				   .L0290		;  gosub __FrameAnimation bank4
   2662  2487
   2663  2487		       85 81		      sta	temp7
   2664  2489		       a9 34		      lda	#>(ret_point6-1)
   2665  248b		       48		      pha
   2666  248c		       a9 9e		      lda	#<(ret_point6-1)
   2667  248e		       48		      pha
   2668  248f		       a9 70		      lda	#>(.__FrameAnimation-1)
   2669  2491		       48		      pha
   2670  2492		       a9 84		      lda	#<(.__FrameAnimation-1)
   2671  2494		       48		      pha
   2672  2495		       a5 81		      lda	temp7
   2673  2497		       48		      pha
   2674  2498		       8a		      txa
   2675  2499		       48		      pha
   2676  249a		       a2 04		      ldx	#4
   2677  249c		       4c ee df 	      jmp	BS_jsr
   2678  249f				   ret_point6
   2679  249f				   .
   2680  249f							; 
   2681  249f
   2682  249f				   .
   2683  249f							; 
   2684  249f
   2685  249f				   .
   2686  249f							; 
   2687  249f
   2688  249f				   .
   2689  249f							; 
   2690  249f
   2691  249f				   .
   2692  249f							; 
   2693  249f
   2694  249f				   .__Movement
   2695  249f							; __Movement
   2696  249f
   2697  249f				   .L0291		;  Moverate = Moverate  + 1
   2698  249f
   2699  249f		       e6 d2		      INC	Moverate
   2700  24a1				   .
   2701  24a1							; 
   2702  24a1
   2703  24a1				   .__HealthDrop
   2704  24a1							; __HealthDrop
   2705  24a1
   2706  24a1				   .L0292		;  if HealthDrop  >  4  &&  !Bit2_EnemyMove{2} then if player4y  >  190 then player4y	=  5  :  player4x  =   ( rand & 150 )	:  Bit2_EnemyMove{2} = 1
   2707  24a1
   2708  24a1		       a9 04		      LDA	#4
   2709  24a3		       c5 de		      CMP	HealthDrop
   2710  24a5		       b0 25		      BCS	.skipL0292
   2711  24a7				   .condpart41
   2712  24a7		       a5 ea		      LDA	Bit2_EnemyMove
   2713  24a9		       29 04		      AND	#4
   2714  24ab		       d0 1f		      BNE	.skip41then
   2715  24ad				   .condpart42
   2716  24ad		       a9 be		      LDA	#190
   2717  24af		       c5 9d		      CMP	player4y
   2718  24b1		       b0 19		      BCS	.skip42then
   2719  24b3				   .condpart43
   2720  24b3		       a9 05		      LDA	#5
   2721  24b5		       85 9d		      STA	player4y
   2722  24b7							; complex statement detected
   2723  24b7		       ad 00 10 	      lda	rand
   2724  24ba		       4a		      lsr
   2725  24bb				  -	      ifconst	rand16
   2726  24bb				  -	      rol	rand16
   2727  24bb					      endif
   2728  24bb		       90 02		      bcc	*+4
   2729  24bd		       49 b4		      eor	#$B4
   2730  24bf		       8d 00 10 	      sta	rand
   2731  24c2				  -	      ifconst	rand16
   2732  24c2				  -	      eor	rand16
   2733  24c2					      endif
   2734  24c2		       29 96		      AND	#150
   2735  24c4		       85 93		      STA	player4x
   2736  24c6		       a5 ea		      LDA	Bit2_EnemyMove
   2737  24c8		       09 04		      ORA	#4
   2738  24ca		       85 ea		      STA	Bit2_EnemyMove
   2739  24cc				   .skip42then
   2740  24cc				   .skip41then
   2741  24cc				   .skipL0292
   2742  24cc				   .L0293		;  if player4y  >  player1y  -  5  &&	player4y  <  player1y  +  5 then goto __Player1Move
   2743  24cc
   2744  24cc							; complex condition detected
   2745  24cc		       a5 9a		      LDA	player1y
   2746  24ce		       38		      SEC
   2747  24cf		       e9 05		      SBC	#5
   2748  24d1							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   2749  24d1		       c5 9d		      CMP	player4y
   2750  24d3		       b0 11		      BCS	.skipL0293
   2751  24d5				   .condpart44
   2752  24d5							; complex condition detected
   2753  24d5		       a5 9a		      LDA	player1y
   2754  24d7		       18		      CLC
   2755  24d8		       69 05		      ADC	#5
   2756  24da		       48		      PHA
   2757  24db		       ba		      TSX
   2758  24dc		       68		      PLA
   2759  24dd		       a5 9d		      LDA	player4y
   2760  24df		       d5 01		      CMP	1,x
   2761  24e1		       b0 03		      BCS	.skip44then
   2762  24e3				   .condpart45
   2763  24e3		       4c 5a 35 	      jmp	.__Player1Move
   2764  24e6
   2765  24e6				   .skip44then
   2766  24e6				   .skipL0293
   2767  24e6				   .L0294		;  if player4y  >  player2y  -  5  &&	player4y  <  player2y  +  5 then goto __Player1Move
   2768  24e6
   2769  24e6							; complex condition detected
   2770  24e6		       a5 9b		      LDA	player2y
   2771  24e8		       38		      SEC
   2772  24e9		       e9 05		      SBC	#5
   2773  24eb							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   2774  24eb		       c5 9d		      CMP	player4y
   2775  24ed		       b0 11		      BCS	.skipL0294
   2776  24ef				   .condpart46
   2777  24ef							; complex condition detected
   2778  24ef		       a5 9b		      LDA	player2y
   2779  24f1		       18		      CLC
   2780  24f2		       69 05		      ADC	#5
   2781  24f4		       48		      PHA
   2782  24f5		       ba		      TSX
   2783  24f6		       68		      PLA
   2784  24f7		       a5 9d		      LDA	player4y
   2785  24f9		       d5 01		      CMP	1,x
   2786  24fb		       b0 03		      BCS	.skip46then
   2787  24fd				   .condpart47
   2788  24fd		       4c 5a 35 	      jmp	.__Player1Move
   2789  2500
   2790  2500				   .skip46then
   2791  2500				   .skipL0294
   2792  2500				   .L0295		;  if HealthDrop  >  4  &&  player4y  > 190 then Bit2_EnemyMove{2} = 0
   2793  2500
   2794  2500		       a9 04		      LDA	#4
   2795  2502		       c5 de		      CMP	HealthDrop
   2796  2504		       b0 0c		      BCS	.skipL0295
   2797  2506				   .condpart48
   2798  2506		       a9 be		      LDA	#190
   2799  2508		       c5 9d		      CMP	player4y
   2800  250a		       b0 06		      BCS	.skip48then
   2801  250c				   .condpart49
   2802  250c		       a5 ea		      LDA	Bit2_EnemyMove
   2803  250e		       29 fb		      AND	#251
   2804  2510		       85 ea		      STA	Bit2_EnemyMove
   2805  2512				   .skip48then
   2806  2512				   .skipL0295
   2807  2512				   .L0296		;  if Bit2_EnemyMove{2}  &&  player4y > 170 then HealthDrop = 0 :  Bit2_EnemyMove{2} = 0  :  player4y	=  200 : 
   2808  2512
   2809  2512		       a5 ea		      LDA	Bit2_EnemyMove
   2810  2514		       29 04		      AND	#4
   2811  2516		       f0 14		      BEQ	.skipL0296
   2812  2518				   .condpart50
   2813  2518		       a9 aa		      LDA	#170
   2814  251a		       c5 9d		      CMP	player4y
   2815  251c		       b0 0e		      BCS	.skip50then
   2816  251e				   .condpart51
   2817  251e		       a9 00		      LDA	#0
   2818  2520		       85 de		      STA	HealthDrop
   2819  2522		       a5 ea		      LDA	Bit2_EnemyMove
   2820  2524		       29 fb		      AND	#251
   2821  2526		       85 ea		      STA	Bit2_EnemyMove
   2822  2528		       a9 c8		      LDA	#200
   2823  252a		       85 9d		      STA	player4y
   2824  252c				   .skip50then
   2825  252c				   .skipL0296
   2826  252c				   .L0297		;  if player4x  <  5 then player4x = 5
   2827  252c
   2828  252c		       a5 93		      LDA	player4x
   2829  252e		       c9 05		      CMP	#5
   2830  2530		       b0 04		      BCS	.skipL0297
   2831  2532				   .condpart52
   2832  2532		       a9 05		      LDA	#5
   2833  2534		       85 93		      STA	player4x
   2834  2536				   .skipL0297
   2835  2536				   .L0298		;  if player4x  >  150 then player4x  = 150
   2836  2536
   2837  2536		       a9 96		      LDA	#150
   2838  2538		       c5 93		      CMP	player4x
   2839  253a		       b0 04		      BCS	.skipL0298
   2840  253c				   .condpart53
   2841  253c		       a9 96		      LDA	#150
   2842  253e		       85 93		      STA	player4x
   2843  2540				   .skipL0298
   2844  2540				   .L0299		;  if Moverate  <  7 then goto __Player1Move
   2845  2540
   2846  2540		       a5 d2		      LDA	Moverate
   2847  2542		       c9 07		      CMP	#7
   2848  2544		       b0 03		      BCS	.skipL0299
   2849  2546				   .condpart54
   2850  2546		       4c 5a 35 	      jmp	.__Player1Move
   2851  2549
   2852  2549				   .skipL0299
   2853  2549				   .
   2854  2549							; 
   2855  2549
   2856  2549				   .L0300		;  if Bit2_EnemyMove{2} then player4y	=  player4y  + 2  :  HealthDrop  =  0
   2857  2549
   2858  2549		       a5 ea		      LDA	Bit2_EnemyMove
   2859  254b		       29 04		      AND	#4
   2860  254d		       f0 0b		      BEQ	.skipL0300
   2861  254f				   .condpart55
   2862  254f		       a5 9d		      LDA	player4y
   2863  2551		       18		      CLC
   2864  2552		       69 02		      ADC	#2
   2865  2554		       85 9d		      STA	player4y
   2866  2556		       a9 00		      LDA	#0
   2867  2558		       85 de		      STA	HealthDrop
   2868  255a				   .skipL0300
   2869  255a				   .
   2870  255a							; 
   2871  255a
   2872  255a				   .__Player1Move
   2873  255a							; __Player1Move
   2874  255a
   2875  255a				   .L0301		;  if drop  >=  48  &&  player1y  =  200 then goto __Player2Move
   2876  255a
   2877  255a		       a5 d1		      LDA	drop
   2878  255c		       c9 30		      CMP	#48
   2879  255e		       90 09		      BCC	.skipL0301
   2880  2560				   .condpart56
   2881  2560		       a5 9a		      LDA	player1y
   2882  2562		       c9 c8		      CMP	#200
   2883  2564		       d0 03		      BNE	.skip56then
   2884  2566				   .condpart57
   2885  2566		       4c 40 36 	      jmp	.__Player2Move
   2886  2569
   2887  2569				   .skip56then
   2888  2569				   .skipL0301
   2889  2569				   .L0302		;  if player1y  > 190	&&  EnemyHit  <>  1 then player1y  =   ( rand & 5 )  + 1 :  player1x  =   ( rand & 150 )   :  HealthDrop = HealthDrop  + 1  :  drop  =	drop  + 1
   2890  2569
   2891  2569		       a9 be		      LDA	#190
   2892  256b		       c5 9a		      CMP	player1y
   2893  256d		       b0 2b		      BCS	.skipL0302
   2894  256f				   .condpart58
   2895  256f		       a5 d9		      LDA	EnemyHit
   2896  2571		       c9 01		      CMP	#1
   2897  2573		       f0 25		      BEQ	.skip58then
   2898  2575				   .condpart59
   2899  2575							; complex statement detected
   2900  2575		       ad 00 10 	      lda	rand
   2901  2578		       4a		      lsr
   2902  2579				  -	      ifconst	rand16
   2903  2579				  -	      rol	rand16
   2904  2579					      endif
   2905  2579		       90 02		      bcc	*+4
   2906  257b		       49 b4		      eor	#$B4
   2907  257d		       8d 00 10 	      sta	rand
   2908  2580				  -	      ifconst	rand16
   2909  2580				  -	      eor	rand16
   2910  2580					      endif
   2911  2580		       29 05		      AND	#5
   2912  2582		       18		      CLC
   2913  2583		       69 01		      ADC	#1
   2914  2585		       85 9a		      STA	player1y
   2915  2587							; complex statement detected
   2916  2587		       ad 00 10 	      lda	rand
   2917  258a		       4a		      lsr
   2918  258b				  -	      ifconst	rand16
   2919  258b				  -	      rol	rand16
   2920  258b					      endif
   2921  258b		       90 02		      bcc	*+4
   2922  258d		       49 b4		      eor	#$B4
   2923  258f		       8d 00 10 	      sta	rand
   2924  2592				  -	      ifconst	rand16
   2925  2592				  -	      eor	rand16
   2926  2592					      endif
   2927  2592		       29 96		      AND	#150
   2928  2594		       85 90		      STA	player1x
   2929  2596		       e6 de		      INC	HealthDrop
   2930  2598		       e6 d1		      INC	drop
   2931  259a				   .skip58then
   2932  259a				   .skipL0302
   2933  259a				   .L0303		;  if player1x  >  player2x  -  5  &&	player1x  <  player2x  +  5 then player1x  =   ( rand & 150 ) 
   2934  259a
   2935  259a							; complex condition detected
   2936  259a		       a5 91		      LDA	player2x
   2937  259c		       38		      SEC
   2938  259d		       e9 05		      SBC	#5
   2939  259f							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   2940  259f		       c5 90		      CMP	player1x
   2941  25a1		       b0 1d		      BCS	.skipL0303
   2942  25a3				   .condpart60
   2943  25a3							; complex condition detected
   2944  25a3		       a5 91		      LDA	player2x
   2945  25a5		       18		      CLC
   2946  25a6		       69 05		      ADC	#5
   2947  25a8		       48		      PHA
   2948  25a9		       ba		      TSX
   2949  25aa		       68		      PLA
   2950  25ab		       a5 90		      LDA	player1x
   2951  25ad		       d5 01		      CMP	1,x
   2952  25af		       b0 0f		      BCS	.skip60then
   2953  25b1				   .condpart61
   2954  25b1							; complex statement detected
   2955  25b1		       ad 00 10 	      lda	rand
   2956  25b4		       4a		      lsr
   2957  25b5				  -	      ifconst	rand16
   2958  25b5				  -	      rol	rand16
   2959  25b5					      endif
   2960  25b5		       90 02		      bcc	*+4
   2961  25b7		       49 b4		      eor	#$B4
   2962  25b9		       8d 00 10 	      sta	rand
   2963  25bc				  -	      ifconst	rand16
   2964  25bc				  -	      eor	rand16
   2965  25bc					      endif
   2966  25bc		       29 96		      AND	#150
   2967  25be		       85 90		      STA	player1x
   2968  25c0				   .skip60then
   2969  25c0				   .skipL0303
   2970  25c0				   .L0304		;  if player1y  >=  164 then goto __Player1SideMove
   2971  25c0
   2972  25c0		       a5 9a		      LDA	player1y
   2973  25c2		       c9 a4		      CMP	#164
   2974  25c4		       90 03		      BCC	.skipL0304
   2975  25c6				   .condpart62
   2976  25c6		       4c f9 35 	      jmp	.__Player1SideMove
   2977  25c9
   2978  25c9				   .skipL0304
   2979  25c9				   .L0305		;  if player1x  <  8 then player1x  = 8
   2980  25c9
   2981  25c9		       a5 90		      LDA	player1x
   2982  25cb		       c9 08		      CMP	#8
   2983  25cd		       b0 04		      BCS	.skipL0305
   2984  25cf				   .condpart63
   2985  25cf		       a9 08		      LDA	#8
   2986  25d1		       85 90		      STA	player1x
   2987  25d3				   .skipL0305
   2988  25d3				   .L0306		;  if player1x  >  150 then player1x  = 150
   2989  25d3
   2990  25d3		       a9 96		      LDA	#150
   2991  25d5		       c5 90		      CMP	player1x
   2992  25d7		       b0 04		      BCS	.skipL0306
   2993  25d9				   .condpart64
   2994  25d9		       a9 96		      LDA	#150
   2995  25db		       85 90		      STA	player1x
   2996  25dd				   .skipL0306
   2997  25dd				   .L0307		;  if Moverate  <  8 then goto __CheckCollision
   2998  25dd
   2999  25dd		       a5 d2		      LDA	Moverate
   3000  25df		       c9 08		      CMP	#8
   3001  25e1		       b0 03		      BCS	.skipL0307
   3002  25e3				   .condpart65
   3003  25e3		       4c 27 39 	      jmp	.__CheckCollision
   3004  25e6
   3005  25e6				   .skipL0307
   3006  25e6				   .L0308		;  if EnemyHit  =  1 then goto __Player2Move
   3007  25e6
   3008  25e6		       a5 d9		      LDA	EnemyHit
   3009  25e8		       c9 01		      CMP	#1
   3010  25ea		       d0 03		      BNE	.skipL0308
   3011  25ec				   .condpart66
   3012  25ec		       4c 40 36 	      jmp	.__Player2Move
   3013  25ef
   3014  25ef				   .skipL0308
   3015  25ef				   .L0309		;  player1y  =  player1y  +  EnemySpeed
   3016  25ef
   3017  25ef		       a5 9a		      LDA	player1y
   3018  25f1		       18		      CLC
   3019  25f2		       65 d3		      ADC	EnemySpeed
   3020  25f4		       85 9a		      STA	player1y
   3021  25f6				   .L0310		;  goto __Player2Move
   3022  25f6
   3023  25f6		       4c 40 36 	      jmp	.__Player2Move
   3024  25f9
   3025  25f9				   .
   3026  25f9							; 
   3027  25f9
   3028  25f9				   .__Player1SideMove
   3029  25f9							; __Player1SideMove
   3030  25f9
   3031  25f9				   .L0311		;  player1y  = 165
   3032  25f9
   3033  25f9		       a9 a5		      LDA	#165
   3034  25fb		       85 9a		      STA	player1y
   3035  25fd				   .L0312		;  if player1x  <  REdge  &&  player1x  >  LEdge then Househit = Househit + 1 :  player1y = 200  :  goto __Player2Move : Moverate = Moverate - 1
   3036  25fd
   3037  25fd		       a5 90		      LDA	player1x
   3038  25ff		       c9 4f		      CMP	#REdge
   3039  2601		       b0 11		      BCS	.skipL0312
   3040  2603				   .condpart67
   3041  2603		       a9 47		      LDA	#LEdge
   3042  2605		       c5 90		      CMP	player1x
   3043  2607		       b0 0b		      BCS	.skip67then
   3044  2609				   .condpart68
   3045  2609		       e6 e1		      INC	Househit
   3046  260b		       a9 c8		      LDA	#200
   3047  260d		       85 9a		      STA	player1y
   3048  260f		       4c 40 36 	      jmp	.__Player2Move
   3049  2612		       c6 d2		      DEC	Moverate
   3050  2614				   .skip67then
   3051  2614				   .skipL0312
   3052  2614				   .L0313		;  if Moverate  <  8 then goto __CheckCollision
   3053  2614
   3054  2614		       a5 d2		      LDA	Moverate
   3055  2616		       c9 08		      CMP	#8
   3056  2618		       b0 03		      BCS	.skipL0313
   3057  261a				   .condpart69
   3058  261a		       4c 27 39 	      jmp	.__CheckCollision
   3059  261d
   3060  261d				   .skipL0313
   3061  261d				   .L0314		;  if EnemyHit  =  1 then goto __Player2Move
   3062  261d
   3063  261d		       a5 d9		      LDA	EnemyHit
   3064  261f		       c9 01		      CMP	#1
   3065  2621		       d0 03		      BNE	.skipL0314
   3066  2623				   .condpart70
   3067  2623		       4c 40 36 	      jmp	.__Player2Move
   3068  2626
   3069  2626				   .skipL0314
   3070  2626				   .L0315		;  if player1x  >  REdge then player1x  =  player1x  -  EnemySpeed
   3071  2626
   3072  2626		       a9 4f		      LDA	#REdge
   3073  2628		       c5 90		      CMP	player1x
   3074  262a		       b0 07		      BCS	.skipL0315
   3075  262c				   .condpart71
   3076  262c		       a5 90		      LDA	player1x
   3077  262e		       38		      SEC
   3078  262f		       e5 d3		      SBC	EnemySpeed
   3079  2631		       85 90		      STA	player1x
   3080  2633				   .skipL0315
   3081  2633				   .L0316		;  if player1x  <  LEdge then player1x  =  player1x  +  EnemySpeed
   3082  2633
   3083  2633		       a5 90		      LDA	player1x
   3084  2635		       c9 47		      CMP	#LEdge
   3085  2637		       b0 07		      BCS	.skipL0316
   3086  2639				   .condpart72
   3087  2639		       a5 90		      LDA	player1x
   3088  263b		       18		      CLC
   3089  263c		       65 d3		      ADC	EnemySpeed
   3090  263e		       85 90		      STA	player1x
   3091  2640				   .skipL0316
   3092  2640				   .
   3093  2640							; 
   3094  2640
   3095  2640				   .__Player2Move
   3096  2640							; __Player2Move
   3097  2640
   3098  2640				   .L0317		;  if drop  >=  48  &&  player2y  =  200 then goto __Player3Move
   3099  2640
   3100  2640		       a5 d1		      LDA	drop
   3101  2642		       c9 30		      CMP	#48
   3102  2644		       90 09		      BCC	.skipL0317
   3103  2646				   .condpart73
   3104  2646		       a5 9b		      LDA	player2y
   3105  2648		       c9 c8		      CMP	#200
   3106  264a		       d0 03		      BNE	.skip73then
   3107  264c				   .condpart74
   3108  264c		       4c 39 37 	      jmp	.__Player3Move
   3109  264f
   3110  264f				   .skip73then
   3111  264f				   .skipL0317
   3112  264f				   .L0318		;  if player2y  > 165	&&  EnemyHit  <>  2 then player2y  =   ( rand & 10 )  + 1 :  player2x  =   ( rand + 150 )   :  drop  =	drop  + 1
   3113  264f
   3114  264f		       a9 a5		      LDA	#165
   3115  2651		       c5 9b		      CMP	player2y
   3116  2653		       b0 2a		      BCS	.skipL0318
   3117  2655				   .condpart75
   3118  2655		       a5 d9		      LDA	EnemyHit
   3119  2657		       c9 02		      CMP	#2
   3120  2659		       f0 24		      BEQ	.skip75then
   3121  265b				   .condpart76
   3122  265b							; complex statement detected
   3123  265b		       ad 00 10 	      lda	rand
   3124  265e		       4a		      lsr
   3125  265f				  -	      ifconst	rand16
   3126  265f				  -	      rol	rand16
   3127  265f					      endif
   3128  265f		       90 02		      bcc	*+4
   3129  2661		       49 b4		      eor	#$B4
   3130  2663		       8d 00 10 	      sta	rand
   3131  2666				  -	      ifconst	rand16
   3132  2666				  -	      eor	rand16
   3133  2666					      endif
   3134  2666		       29 0a		      AND	#10
   3135  2668		       18		      CLC
   3136  2669		       69 01		      ADC	#1
   3137  266b		       85 9b		      STA	player2y
   3138  266d							; complex statement detected
   3139  266d		       ad 00 10 	      lda	rand
   3140  2670		       4a		      lsr
   3141  2671				  -	      ifconst	rand16
   3142  2671				  -	      rol	rand16
   3143  2671					      endif
   3144  2671		       90 02		      bcc	*+4
   3145  2673		       49 b4		      eor	#$B4
   3146  2675		       8d 00 10 	      sta	rand
   3147  2678				  -	      ifconst	rand16
   3148  2678				  -	      eor	rand16
   3149  2678					      endif
   3150  2678		       18		      CLC
   3151  2679		       69 96		      ADC	#150
   3152  267b		       85 91		      STA	player2x
   3153  267d		       e6 d1		      INC	drop
   3154  267f				   .skip75then
   3155  267f				   .skipL0318
   3156  267f				   .L0319		;  if player2x  <  8 then player2x  =	8
   3157  267f
   3158  267f		       a5 91		      LDA	player2x
   3159  2681		       c9 08		      CMP	#8
   3160  2683		       b0 04		      BCS	.skipL0319
   3161  2685				   .condpart77
   3162  2685		       a9 08		      LDA	#8
   3163  2687		       85 91		      STA	player2x
   3164  2689				   .skipL0319
   3165  2689				   .L0320		;  if player2x  >  150 then player2x  =  150
   3166  2689
   3167  2689		       a9 96		      LDA	#150
   3168  268b		       c5 91		      CMP	player2x
   3169  268d		       b0 04		      BCS	.skipL0320
   3170  268f				   .condpart78
   3171  268f		       a9 96		      LDA	#150
   3172  2691		       85 91		      STA	player2x
   3173  2693				   .skipL0320
   3174  2693				   .L0321		;  if player2y  <  50	&&  player2y  >=  player4y  - 30  &&  player2y	<=  player4y + 30 then goto __Player3Move
   3175  2693
   3176  2693		       a5 9b		      LDA	player2y
   3177  2695		       c9 32		      CMP	#50
   3178  2697		       b0 1a		      BCS	.skipL0321
   3179  2699				   .condpart79
   3180  2699							; complex condition detected
   3181  2699		       a5 9d		      LDA	player4y
   3182  269b		       38		      SEC
   3183  269c		       e9 1e		      SBC	#30
   3184  269e		       48		      PHA
   3185  269f		       ba		      TSX
   3186  26a0		       68		      PLA
   3187  26a1		       a5 9b		      LDA	player2y
   3188  26a3		       d5 01		      CMP	1,x
   3189  26a5		       90 0c		      BCC	.skip79then
   3190  26a7				   .condpart80
   3191  26a7							; complex condition detected
   3192  26a7		       a5 9d		      LDA	player4y
   3193  26a9		       18		      CLC
   3194  26aa		       69 1e		      ADC	#30
   3195  26ac		       c5 9b		      CMP	player2y
   3196  26ae		       90 03		      BCC	.skip80then
   3197  26b0				   .condpart81
   3198  26b0		       4c 39 37 	      jmp	.__Player3Move
   3199  26b3
   3200  26b3				   .skip80then
   3201  26b3				   .skip79then
   3202  26b3				   .skipL0321
   3203  26b3				   .L0322		;  if player2y  <  50	&&  player2y  >=  player1y  - 30  &&  player2y	<=  player1y + 30 then goto __Player3Move
   3204  26b3
   3205  26b3		       a5 9b		      LDA	player2y
   3206  26b5		       c9 32		      CMP	#50
   3207  26b7		       b0 1a		      BCS	.skipL0322
   3208  26b9				   .condpart82
   3209  26b9							; complex condition detected
   3210  26b9		       a5 9a		      LDA	player1y
   3211  26bb		       38		      SEC
   3212  26bc		       e9 1e		      SBC	#30
   3213  26be		       48		      PHA
   3214  26bf		       ba		      TSX
   3215  26c0		       68		      PLA
   3216  26c1		       a5 9b		      LDA	player2y
   3217  26c3		       d5 01		      CMP	1,x
   3218  26c5		       90 0c		      BCC	.skip82then
   3219  26c7				   .condpart83
   3220  26c7							; complex condition detected
   3221  26c7		       a5 9a		      LDA	player1y
   3222  26c9		       18		      CLC
   3223  26ca		       69 1e		      ADC	#30
   3224  26cc		       c5 9b		      CMP	player2y
   3225  26ce		       90 03		      BCC	.skip83then
   3226  26d0				   .condpart84
   3227  26d0		       4c 39 37 	      jmp	.__Player3Move
   3228  26d3
   3229  26d3				   .skip83then
   3230  26d3				   .skip82then
   3231  26d3				   .skipL0322
   3232  26d3				   .
   3233  26d3							; 
   3234  26d3
   3235  26d3				   .__SkipP2drop
   3236  26d3							; __SkipP2drop
   3237  26d3
   3238  26d3				   .L0323		;  if EnemyHit  =  2 then goto __Player3Move
   3239  26d3
   3240  26d3		       a5 d9		      LDA	EnemyHit
   3241  26d5		       c9 02		      CMP	#2
   3242  26d7		       d0 03		      BNE	.skipL0323
   3243  26d9				   .condpart85
   3244  26d9		       4c 39 37 	      jmp	.__Player3Move
   3245  26dc
   3246  26dc				   .skipL0323
   3247  26dc				   .L0324		;  if Moverate  <  8 then goto __CheckCollision
   3248  26dc
   3249  26dc		       a5 d2		      LDA	Moverate
   3250  26de		       c9 08		      CMP	#8
   3251  26e0		       b0 03		      BCS	.skipL0324
   3252  26e2				   .condpart86
   3253  26e2		       4c 27 39 	      jmp	.__CheckCollision
   3254  26e5
   3255  26e5				   .skipL0324
   3256  26e5				   .L0325		;  if level  >  3  &&	player2y  >=  130 then goto __PlayerSideSweep
   3257  26e5
   3258  26e5		       a9 03		      LDA	#3
   3259  26e7		       c5 dc		      CMP	level
   3260  26e9		       b0 09		      BCS	.skipL0325
   3261  26eb				   .condpart87
   3262  26eb		       a5 9b		      LDA	player2y
   3263  26ed		       c9 82		      CMP	#130
   3264  26ef		       90 03		      BCC	.skip87then
   3265  26f1				   .condpart88
   3266  26f1		       4c fe 36 	      jmp	.__PlayerSideSweep
   3267  26f4
   3268  26f4				   .skip87then
   3269  26f4				   .skipL0325
   3270  26f4				   .L0326		;  player2y  =  player2y  +  EnemySpeed
   3271  26f4
   3272  26f4		       a5 9b		      LDA	player2y
   3273  26f6		       18		      CLC
   3274  26f7		       65 d3		      ADC	EnemySpeed
   3275  26f9		       85 9b		      STA	player2y
   3276  26fb				   .L0327		;  goto __Player3Move
   3277  26fb
   3278  26fb		       4c 39 37 	      jmp	.__Player3Move
   3279  26fe
   3280  26fe				   .
   3281  26fe							; 
   3282  26fe
   3283  26fe				   .__PlayerSideSweep
   3284  26fe							; __PlayerSideSweep
   3285  26fe
   3286  26fe				   .L0328		;  player2y  = 130
   3287  26fe
   3288  26fe		       a9 82		      LDA	#130
   3289  2700		       85 9b		      STA	player2y
   3290  2702				   .L0329		;  if Moverate  <  8 then goto __CheckCollision
   3291  2702
   3292  2702		       a5 d2		      LDA	Moverate
   3293  2704		       c9 08		      CMP	#8
   3294  2706		       b0 03		      BCS	.skipL0329
   3295  2708				   .condpart89
   3296  2708		       4c 27 39 	      jmp	.__CheckCollision
   3297  270b
   3298  270b				   .skipL0329
   3299  270b				   .L0330		;  if player2x  >  REdge then player2x  =  player2x  -   ( level  - 2 ) 
   3300  270b
   3301  270b		       a9 4f		      LDA	#REdge
   3302  270d		       c5 91		      CMP	player2x
   3303  270f		       b0 12		      BCS	.skipL0330
   3304  2711				   .condpart90
   3305  2711							; complex statement detected
   3306  2711		       a5 91		      LDA	player2x
   3307  2713		       48		      PHA
   3308  2714		       a5 dc		      LDA	level
   3309  2716		       38		      SEC
   3310  2717		       e9 02		      SBC	#2
   3311  2719		       a8		      TAY
   3312  271a		       68		      PLA
   3313  271b		       ba		      TSX
   3314  271c		       94 00		      STY	$00,x
   3315  271e		       38		      SEC
   3316  271f		       f5 00		      SBC	$00,x
   3317  2721		       85 91		      STA	player2x
   3318  2723				   .skipL0330
   3319  2723				   .L0331		;  if player2x  <  LEdge then player2x  =  player2x  +   ( level  - 2	) 
   3320  2723
   3321  2723		       a5 91		      LDA	player2x
   3322  2725		       c9 47		      CMP	#LEdge
   3323  2727		       b0 10		      BCS	.skipL0331
   3324  2729				   .condpart91
   3325  2729							; complex statement detected
   3326  2729		       a5 91		      LDA	player2x
   3327  272b		       48		      PHA
   3328  272c		       a5 dc		      LDA	level
   3329  272e		       38		      SEC
   3330  272f		       e9 02		      SBC	#2
   3331  2731		       ba		      TSX
   3332  2732		       e8		      INX
   3333  2733		       9a		      TXS
   3334  2734		       18		      CLC
   3335  2735		       75 00		      ADC	$00,x
   3336  2737		       85 91		      STA	player2x
   3337  2739				   .skipL0331
   3338  2739				   .
   3339  2739							; 
   3340  2739
   3341  2739				   .__Player3Move
   3342  2739							; __Player3Move
   3343  2739
   3344  2739				   .
   3345  2739							; 
   3346  2739
   3347  2739				   .__SkipP3drop
   3348  2739							; __SkipP3drop
   3349  2739
   3350  2739				   .L0332		;  if Moverate  <  5 then goto __CheckCollision
   3351  2739
   3352  2739		       a5 d2		      LDA	Moverate
   3353  273b		       c9 05		      CMP	#5
   3354  273d		       b0 03		      BCS	.skipL0332
   3355  273f				   .condpart92
   3356  273f		       4c 27 39 	      jmp	.__CheckCollision
   3357  2742
   3358  2742				   .skipL0332
   3359  2742				   .L0333		;  if player3y  >  120 then __Player3Xset
   3360  2742
   3361  2742		       a9 78		      LDA	#120
   3362  2744		       c5 9c		      CMP	player3y
   3363  2746					      if	((* - .__Player3Xset) < 127) && ((* - .__Player3Xset) > -128)
   3364  2746		       90 2c		      bcc	.__Player3Xset
   3365  2748				  -	      else
   3366  2748				  -	      bcs	.3skip__Player3Xset
   3367  2748				  -	      jmp	.__Player3Xset
   3368  2748				  -.3skip__Player3Xset
   3369  2748					      endif
   3370  2748				   .L0334		;  if level  >  2  &&	player3x  >  LEdge  &&	player3x  <  REdge then player3y  =  player3y  +  3 :  goto __SkipHMove
   3371  2748
   3372  2748		       a9 02		      LDA	#2
   3373  274a		       c5 dc		      CMP	level
   3374  274c		       b0 16		      BCS	.skipL0334
   3375  274e				   .condpart93
   3376  274e		       a9 47		      LDA	#LEdge
   3377  2750		       c5 92		      CMP	player3x
   3378  2752		       b0 10		      BCS	.skip93then
   3379  2754				   .condpart94
   3380  2754		       a5 92		      LDA	player3x
   3381  2756		       c9 4f		      CMP	#REdge
   3382  2758		       b0 0a		      BCS	.skip94then
   3383  275a				   .condpart95
   3384  275a		       a5 9c		      LDA	player3y
   3385  275c		       18		      CLC
   3386  275d		       69 03		      ADC	#3
   3387  275f		       85 9c		      STA	player3y
   3388  2761		       4c 23 39 	      jmp	.__SkipHMove
   3389  2764
   3390  2764				   .skip94then
   3391  2764				   .skip93then
   3392  2764				   .skipL0334
   3393  2764				   .L0335		;  if EnemyHit  =  3 then goto __SkipHMove
   3394  2764
   3395  2764		       a5 d9		      LDA	EnemyHit
   3396  2766		       c9 03		      CMP	#3
   3397  2768		       d0 03		      BNE	.skipL0335
   3398  276a				   .condpart96
   3399  276a		       4c 23 39 	      jmp	.__SkipHMove
   3400  276d
   3401  276d				   .skipL0335
   3402  276d				   .L0336		;  if Bit6_PLayer3Direction{6} then goto __Player3xMove
   3403  276d
   3404  276d		       24 ea		      BIT	Bit6_PLayer3Direction
   3405  276f		       50 03		      BVC	.skipL0336
   3406  2771				   .condpart97
   3407  2771		       4c ea 37 	      jmp	.__Player3xMove
   3408  2774
   3409  2774				   .skipL0336
   3410  2774				   .
   3411  2774							; 
   3412  2774
   3413  2774				   .__Player3Xset
   3414  2774							; __Player3Xset
   3415  2774
   3416  2774				   .L0337		;  if	( rand & 1 )   > 0 then Bit7_PLayer3Moving{7}  = 1 else Bit7_PLayer3Moving{7}  = 0
   3417  2774
   3418  2774							; complex condition detected
   3419  2774							; complex statement detected
   3420  2774		       ad 00 10 	      lda	rand
   3421  2777		       4a		      lsr
   3422  2778				  -	      ifconst	rand16
   3423  2778				  -	      rol	rand16
   3424  2778					      endif
   3425  2778		       90 02		      bcc	*+4
   3426  277a		       49 b4		      eor	#$B4
   3427  277c		       8d 00 10 	      sta	rand
   3428  277f				  -	      ifconst	rand16
   3429  277f				  -	      eor	rand16
   3430  277f					      endif
   3431  277f		       29 01		      AND	#1
   3432  2781		       48		      PHA
   3433  2782		       ba		      TSX
   3434  2783		       68		      PLA
   3435  2784		       a9 00		      LDA	#0
   3436  2786		       d5 01		      CMP	1,x
   3437  2788		       b0 09		      BCS	.skipL0337
   3438  278a				   .condpart98
   3439  278a		       a5 ea		      LDA	Bit7_PLayer3Moving
   3440  278c		       09 80		      ORA	#128
   3441  278e		       85 ea		      STA	Bit7_PLayer3Moving
   3442  2790		       4c 99 37 	      jmp	.skipelse0
   3443  2793				   .skipL0337
   3444  2793		       a5 ea		      LDA	Bit7_PLayer3Moving
   3445  2795		       29 7f		      AND	#127
   3446  2797		       85 ea		      STA	Bit7_PLayer3Moving
   3447  2799				   .skipelse0
   3448  2799				   .L0338		;  if drop  >	49 then goto __Player3Reset
   3449  2799
   3450  2799		       a9 31		      LDA	#49
   3451  279b		       c5 d1		      CMP	drop
   3452  279d		       b0 03		      BCS	.skipL0338
   3453  279f				   .condpart99
   3454  279f		       4c f9 38 	      jmp	.__Player3Reset
   3455  27a2
   3456  27a2				   .skipL0338
   3457  27a2				   .L0339		;  if Bit7_PLayer3Moving{7} then player3y  =  ( rand & 20 )   +  20  :  player3x  =  150  :  drop  =  drop  + 1
   3458  27a2
   3459  27a2		       24 ea		      BIT	Bit7_PLayer3Moving
   3460  27a4		       10 18		      BPL	.skipL0339
   3461  27a6				   .condpart100
   3462  27a6							; complex statement detected
   3463  27a6		       ad 00 10 	      lda	rand
   3464  27a9		       4a		      lsr
   3465  27aa				  -	      ifconst	rand16
   3466  27aa				  -	      rol	rand16
   3467  27aa					      endif
   3468  27aa		       90 02		      bcc	*+4
   3469  27ac		       49 b4		      eor	#$B4
   3470  27ae		       8d 00 10 	      sta	rand
   3471  27b1				  -	      ifconst	rand16
   3472  27b1				  -	      eor	rand16
   3473  27b1					      endif
   3474  27b1		       29 14		      AND	#20
   3475  27b3		       18		      CLC
   3476  27b4		       69 14		      ADC	#20
   3477  27b6		       85 9c		      STA	player3y
   3478  27b8		       a9 96		      LDA	#150
   3479  27ba		       85 92		      STA	player3x
   3480  27bc		       e6 d1		      INC	drop
   3481  27be				   .skipL0339
   3482  27be				   .L0340		;  if !Bit7_PLayer3Moving{7} then player3y  =	( rand & 20 )	+  20  :  player3x  =  4  :  drop  =  drop  + 1
   3483  27be
   3484  27be		       24 ea		      BIT	Bit7_PLayer3Moving
   3485  27c0		       30 18		      BMI	.skipL0340
   3486  27c2				   .condpart101
   3487  27c2							; complex statement detected
   3488  27c2		       ad 00 10 	      lda	rand
   3489  27c5		       4a		      lsr
   3490  27c6				  -	      ifconst	rand16
   3491  27c6				  -	      rol	rand16
   3492  27c6					      endif
   3493  27c6		       90 02		      bcc	*+4
   3494  27c8		       49 b4		      eor	#$B4
   3495  27ca		       8d 00 10 	      sta	rand
   3496  27cd				  -	      ifconst	rand16
   3497  27cd				  -	      eor	rand16
   3498  27cd					      endif
   3499  27cd		       29 14		      AND	#20
   3500  27cf		       18		      CLC
   3501  27d0		       69 14		      ADC	#20
   3502  27d2		       85 9c		      STA	player3y
   3503  27d4		       a9 04		      LDA	#4
   3504  27d6		       85 92		      STA	player3x
   3505  27d8		       e6 d1		      INC	drop
   3506  27da				   .skipL0340
   3507  27da				   .L0341		;  if player3y  >  100 then player3y  = 80
   3508  27da
   3509  27da		       a9 64		      LDA	#100
   3510  27dc		       c5 9c		      CMP	player3y
   3511  27de		       b0 04		      BCS	.skipL0341
   3512  27e0				   .condpart102
   3513  27e0		       a9 50		      LDA	#80
   3514  27e2		       85 9c		      STA	player3y
   3515  27e4				   .skipL0341
   3516  27e4				   .L0342		;  Bit6_PLayer3Direction{6}  = 1
   3517  27e4
   3518  27e4		       a5 ea		      LDA	Bit6_PLayer3Direction
   3519  27e6		       09 40		      ORA	#64
   3520  27e8		       85 ea		      STA	Bit6_PLayer3Direction
   3521  27ea				   .
   3522  27ea							; 
   3523  27ea
   3524  27ea				   .__Player3xMove
   3525  27ea							; __Player3xMove
   3526  27ea
   3527  27ea				   .L0343		;  if !Bit7_PLayer3Moving{7}  &&  player3y  >=  player1y  - 5	&&  player3y  <=  player1y + 5	&&  player3x  >=  player1x  - 20 then goto __Player3Reset
   3528  27ea
   3529  27ea		       24 ea		      BIT	Bit7_PLayer3Moving
   3530  27ec		       30 28		      BMI	.skipL0343
   3531  27ee				   .condpart103
   3532  27ee							; complex condition detected
   3533  27ee		       a5 9a		      LDA	player1y
   3534  27f0		       38		      SEC
   3535  27f1		       e9 05		      SBC	#5
   3536  27f3		       48		      PHA
   3537  27f4		       ba		      TSX
   3538  27f5		       68		      PLA
   3539  27f6		       a5 9c		      LDA	player3y
   3540  27f8		       d5 01		      CMP	1,x
   3541  27fa		       90 1a		      BCC	.skip103then
   3542  27fc				   .condpart104
   3543  27fc							; complex condition detected
   3544  27fc		       a5 9a		      LDA	player1y
   3545  27fe		       18		      CLC
   3546  27ff		       69 05		      ADC	#5
   3547  2801							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3548  2801		       c5 9c		      CMP	player3y
   3549  2803		       90 11		      BCC	.skip104then
   3550  2805				   .condpart105
   3551  2805							; complex condition detected
   3552  2805		       a5 90		      LDA	player1x
   3553  2807		       38		      SEC
   3554  2808		       e9 14		      SBC	#20
   3555  280a		       48		      PHA
   3556  280b		       ba		      TSX
   3557  280c		       68		      PLA
   3558  280d		       a5 92		      LDA	player3x
   3559  280f		       d5 01		      CMP	1,x
   3560  2811		       90 03		      BCC	.skip105then
   3561  2813				   .condpart106
   3562  2813		       4c f9 38 	      jmp	.__Player3Reset
   3563  2816
   3564  2816				   .skip105then
   3565  2816				   .skip104then
   3566  2816				   .skip103then
   3567  2816				   .skipL0343
   3568  2816				   .L0344		;  if Bit7_PLayer3Moving{7}  &&  player3y  >=	player1y  - 5  &&  player3y  <=  player1y + 5  &&  player3x  <=  player1x  + 20 then goto __Player3Reset
   3569  2816
   3570  2816		       24 ea		      BIT	Bit7_PLayer3Moving
   3571  2818		       10 23		      BPL	.skipL0344
   3572  281a				   .condpart107
   3573  281a							; complex condition detected
   3574  281a		       a5 9a		      LDA	player1y
   3575  281c		       38		      SEC
   3576  281d		       e9 05		      SBC	#5
   3577  281f		       48		      PHA
   3578  2820		       ba		      TSX
   3579  2821		       68		      PLA
   3580  2822		       a5 9c		      LDA	player3y
   3581  2824		       d5 01		      CMP	1,x
   3582  2826		       90 15		      BCC	.skip107then
   3583  2828				   .condpart108
   3584  2828							; complex condition detected
   3585  2828		       a5 9a		      LDA	player1y
   3586  282a		       18		      CLC
   3587  282b		       69 05		      ADC	#5
   3588  282d							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3589  282d		       c5 9c		      CMP	player3y
   3590  282f		       90 0c		      BCC	.skip108then
   3591  2831				   .condpart109
   3592  2831							; complex condition detected
   3593  2831		       a5 90		      LDA	player1x
   3594  2833		       18		      CLC
   3595  2834		       69 14		      ADC	#20
   3596  2836		       c5 92		      CMP	player3x
   3597  2838		       90 03		      BCC	.skip109then
   3598  283a				   .condpart110
   3599  283a		       4c f9 38 	      jmp	.__Player3Reset
   3600  283d
   3601  283d				   .skip109then
   3602  283d				   .skip108then
   3603  283d				   .skip107then
   3604  283d				   .skipL0344
   3605  283d				   .L0345		;  if !Bit7_PLayer3Moving{7}  &&  player3y  >=  player2y  - 5	&&  player3y  <=  player2y + 5	&&  player3x  >=  player2x  - 20 then goto __Player3Reset
   3606  283d
   3607  283d		       24 ea		      BIT	Bit7_PLayer3Moving
   3608  283f		       30 28		      BMI	.skipL0345
   3609  2841				   .condpart111
   3610  2841							; complex condition detected
   3611  2841		       a5 9b		      LDA	player2y
   3612  2843		       38		      SEC
   3613  2844		       e9 05		      SBC	#5
   3614  2846		       48		      PHA
   3615  2847		       ba		      TSX
   3616  2848		       68		      PLA
   3617  2849		       a5 9c		      LDA	player3y
   3618  284b		       d5 01		      CMP	1,x
   3619  284d		       90 1a		      BCC	.skip111then
   3620  284f				   .condpart112
   3621  284f							; complex condition detected
   3622  284f		       a5 9b		      LDA	player2y
   3623  2851		       18		      CLC
   3624  2852		       69 05		      ADC	#5
   3625  2854							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3626  2854		       c5 9c		      CMP	player3y
   3627  2856		       90 11		      BCC	.skip112then
   3628  2858				   .condpart113
   3629  2858							; complex condition detected
   3630  2858		       a5 91		      LDA	player2x
   3631  285a		       38		      SEC
   3632  285b		       e9 14		      SBC	#20
   3633  285d		       48		      PHA
   3634  285e		       ba		      TSX
   3635  285f		       68		      PLA
   3636  2860		       a5 92		      LDA	player3x
   3637  2862		       d5 01		      CMP	1,x
   3638  2864		       90 03		      BCC	.skip113then
   3639  2866				   .condpart114
   3640  2866		       4c f9 38 	      jmp	.__Player3Reset
   3641  2869
   3642  2869				   .skip113then
   3643  2869				   .skip112then
   3644  2869				   .skip111then
   3645  2869				   .skipL0345
   3646  2869				   .L0346		;  if Bit7_PLayer3Moving{7}  &&  player3y  >=	player2y  - 5  &&  player3y  <=  player2y + 5  &&  player3x  <=  player2x  + 20 then goto __Player3Reset
   3647  2869
   3648  2869		       24 ea		      BIT	Bit7_PLayer3Moving
   3649  286b		       10 23		      BPL	.skipL0346
   3650  286d				   .condpart115
   3651  286d							; complex condition detected
   3652  286d		       a5 9b		      LDA	player2y
   3653  286f		       38		      SEC
   3654  2870		       e9 05		      SBC	#5
   3655  2872		       48		      PHA
   3656  2873		       ba		      TSX
   3657  2874		       68		      PLA
   3658  2875		       a5 9c		      LDA	player3y
   3659  2877		       d5 01		      CMP	1,x
   3660  2879		       90 15		      BCC	.skip115then
   3661  287b				   .condpart116
   3662  287b							; complex condition detected
   3663  287b		       a5 9b		      LDA	player2y
   3664  287d		       18		      CLC
   3665  287e		       69 05		      ADC	#5
   3666  2880							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3667  2880		       c5 9c		      CMP	player3y
   3668  2882		       90 0c		      BCC	.skip116then
   3669  2884				   .condpart117
   3670  2884							; complex condition detected
   3671  2884		       a5 91		      LDA	player2x
   3672  2886		       18		      CLC
   3673  2887		       69 14		      ADC	#20
   3674  2889		       c5 92		      CMP	player3x
   3675  288b		       90 03		      BCC	.skip117then
   3676  288d				   .condpart118
   3677  288d		       4c f9 38 	      jmp	.__Player3Reset
   3678  2890
   3679  2890				   .skip117then
   3680  2890				   .skip116then
   3681  2890				   .skip115then
   3682  2890				   .skipL0346
   3683  2890				   .L0347		;  if !Bit7_PLayer3Moving{7}  &&  player3y  >=  player4y  - 5	&&  player3y  <=  player4y + 5	&&  player3x  >=  player4x  - 20 then goto __Player3Reset
   3684  2890
   3685  2890		       24 ea		      BIT	Bit7_PLayer3Moving
   3686  2892		       30 28		      BMI	.skipL0347
   3687  2894				   .condpart119
   3688  2894							; complex condition detected
   3689  2894		       a5 9d		      LDA	player4y
   3690  2896		       38		      SEC
   3691  2897		       e9 05		      SBC	#5
   3692  2899		       48		      PHA
   3693  289a		       ba		      TSX
   3694  289b		       68		      PLA
   3695  289c		       a5 9c		      LDA	player3y
   3696  289e		       d5 01		      CMP	1,x
   3697  28a0		       90 1a		      BCC	.skip119then
   3698  28a2				   .condpart120
   3699  28a2							; complex condition detected
   3700  28a2		       a5 9d		      LDA	player4y
   3701  28a4		       18		      CLC
   3702  28a5		       69 05		      ADC	#5
   3703  28a7							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3704  28a7		       c5 9c		      CMP	player3y
   3705  28a9		       90 11		      BCC	.skip120then
   3706  28ab				   .condpart121
   3707  28ab							; complex condition detected
   3708  28ab		       a5 93		      LDA	player4x
   3709  28ad		       38		      SEC
   3710  28ae		       e9 14		      SBC	#20
   3711  28b0		       48		      PHA
   3712  28b1		       ba		      TSX
   3713  28b2		       68		      PLA
   3714  28b3		       a5 92		      LDA	player3x
   3715  28b5		       d5 01		      CMP	1,x
   3716  28b7		       90 03		      BCC	.skip121then
   3717  28b9				   .condpart122
   3718  28b9		       4c f9 38 	      jmp	.__Player3Reset
   3719  28bc
   3720  28bc				   .skip121then
   3721  28bc				   .skip120then
   3722  28bc				   .skip119then
   3723  28bc				   .skipL0347
   3724  28bc				   .L0348		;  if Bit7_PLayer3Moving{7}  &&  player3y  >=	player4y  - 5  &&  player3y  <=  player4y + 5  &&  player3x  <=  player4x  + 20 then goto __Player3Reset
   3725  28bc
   3726  28bc		       24 ea		      BIT	Bit7_PLayer3Moving
   3727  28be		       10 23		      BPL	.skipL0348
   3728  28c0				   .condpart123
   3729  28c0							; complex condition detected
   3730  28c0		       a5 9d		      LDA	player4y
   3731  28c2		       38		      SEC
   3732  28c3		       e9 05		      SBC	#5
   3733  28c5		       48		      PHA
   3734  28c6		       ba		      TSX
   3735  28c7		       68		      PLA
   3736  28c8		       a5 9c		      LDA	player3y
   3737  28ca		       d5 01		      CMP	1,x
   3738  28cc		       90 15		      BCC	.skip123then
   3739  28ce				   .condpart124
   3740  28ce							; complex condition detected
   3741  28ce		       a5 9d		      LDA	player4y
   3742  28d0		       18		      CLC
   3743  28d1		       69 05		      ADC	#5
   3744  28d3							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3745  28d3		       c5 9c		      CMP	player3y
   3746  28d5		       90 0c		      BCC	.skip124then
   3747  28d7				   .condpart125
   3748  28d7							; complex condition detected
   3749  28d7		       a5 93		      LDA	player4x
   3750  28d9		       18		      CLC
   3751  28da		       69 14		      ADC	#20
   3752  28dc		       c5 92		      CMP	player3x
   3753  28de		       90 03		      BCC	.skip125then
   3754  28e0				   .condpart126
   3755  28e0		       4c f9 38 	      jmp	.__Player3Reset
   3756  28e3
   3757  28e3				   .skip125then
   3758  28e3				   .skip124then
   3759  28e3				   .skip123then
   3760  28e3				   .skipL0348
   3761  28e3				   .L0349		;  if !Bit7_PLayer3Moving{7} then player3x  =	player3x  +  EnemySpeed
   3762  28e3
   3763  28e3		       24 ea		      BIT	Bit7_PLayer3Moving
   3764  28e5		       30 07		      BMI	.skipL0349
   3765  28e7				   .condpart127
   3766  28e7		       a5 92		      LDA	player3x
   3767  28e9		       18		      CLC
   3768  28ea		       65 d3		      ADC	EnemySpeed
   3769  28ec		       85 92		      STA	player3x
   3770  28ee				   .skipL0349
   3771  28ee				   .L0350		;  if Bit7_PLayer3Moving{7} then player3x  =  player3x  -  EnemySpeed
   3772  28ee
   3773  28ee		       24 ea		      BIT	Bit7_PLayer3Moving
   3774  28f0		       10 07		      BPL	.skipL0350
   3775  28f2				   .condpart128
   3776  28f2		       a5 92		      LDA	player3x
   3777  28f4		       38		      SEC
   3778  28f5		       e5 d3		      SBC	EnemySpeed
   3779  28f7		       85 92		      STA	player3x
   3780  28f9				   .skipL0350
   3781  28f9				   .
   3782  28f9							; 
   3783  28f9
   3784  28f9				   .__Player3Reset
   3785  28f9							; __Player3Reset
   3786  28f9
   3787  28f9				   .L0351		;  if player3x  >  153  ||  player3x  <  2 then drop  = drop  + 1
   3788  28f9
   3789  28f9		       a9 99		      LDA	#153
   3790  28fb		       c5 92		      CMP	player3x
   3791  28fd		       b0 03		      BCS	.skipL0351
   3792  28ff				   .condpart129
   3793  28ff		       4c 08 39 	      jmp	.condpart130
   3794  2902				   .skipL0351
   3795  2902		       a5 92		      LDA	player3x
   3796  2904		       c9 02		      CMP	#2
   3797  2906		       b0 02		      BCS	.skip38OR
   3798  2908				   .condpart130
   3799  2908		       e6 d1		      INC	drop
   3800  290a				   .skip38OR
   3801  290a				   .L0352		;  if player3x  >  153  ||  player3x  <  2 then player3y  = 200 :  Bit6_PLayer3Direction{6}  =  0
   3802  290a
   3803  290a		       a9 99		      LDA	#153
   3804  290c		       c5 92		      CMP	player3x
   3805  290e		       b0 03		      BCS	.skipL0352
   3806  2910				   .condpart131
   3807  2910		       4c 19 39 	      jmp	.condpart132
   3808  2913				   .skipL0352
   3809  2913		       a5 92		      LDA	player3x
   3810  2915		       c9 02		      CMP	#2
   3811  2917		       b0 0a		      BCS	.skip39OR
   3812  2919				   .condpart132
   3813  2919		       a9 c8		      LDA	#200
   3814  291b		       85 9c		      STA	player3y
   3815  291d		       a5 ea		      LDA	Bit6_PLayer3Direction
   3816  291f		       29 bf		      AND	#191
   3817  2921		       85 ea		      STA	Bit6_PLayer3Direction
   3818  2923				   .skip39OR
   3819  2923				   .
   3820  2923							; 
   3821  2923
   3822  2923				   .__SkipHMove
   3823  2923							; __SkipHMove
   3824  2923
   3825  2923				   .L0353		;  Moverate = 0
   3826  2923
   3827  2923		       a9 00		      LDA	#0
   3828  2925		       85 d2		      STA	Moverate
   3829  2927				   .
   3830  2927							; 
   3831  2927
   3832  2927				   .__EnemyMove
   3833  2927							; __EnemyMove
   3834  2927
   3835  2927				   .
   3836  2927							; 
   3837  2927
   3838  2927				   .
   3839  2927							; 
   3840  2927
   3841  2927				   .
   3842  2927							; 
   3843  2927
   3844  2927				   .
   3845  2927							; 
   3846  2927
   3847  2927				   .
   3848  2927							; 
   3849  2927
   3850  2927				   .__CheckCollision
   3851  2927							; __CheckCollision
   3852  2927
   3853  2927				   .L0354		;  if EnemyHit  > 0 then __EnemyCollision
   3854  2927
   3855  2927		       a9 00		      LDA	#0
   3856  2929		       c5 d9		      CMP	EnemyHit
   3857  292b				  -	      if	((* - .__EnemyCollision) < 127) && ((* - .__EnemyCollision) > -128)
   3858  292b				  -	      bcc	.__EnemyCollision
   3859  292b					      else
   3860  292b		       b0 03		      bcs	.4skip__EnemyCollision
   3861  292d		       4c d9 39 	      jmp	.__EnemyCollision
   3862  2930				   .4skip__EnemyCollision
   3863  2930					      endif
   3864  2930				   .L0355		;  if !collision(player1,playfield) then goto __EnemyCollision
   3865  2930
   3866  2930		       24 03		      bit	CXP1FB
   3867  2932		       30 03		      BMI	.skipL0355
   3868  2934				   .condpart133
   3869  2934		       4c d9 39 	      jmp	.__EnemyCollision
   3870  2937
   3871  2937				   .skipL0355
   3872  2937				   .L0356		;  if	( temp4  +  5 )   >=  player1y	&&  temp4  <=	( player1y  +  5 )  then player1y = 200  :  Househit = Househit + 1  :	Bit0_HitPlayer	= 1  :	Bit5_hit{5}  = 1  :  goto __Explosion
   3873  2937
   3874  2937							; complex condition detected
   3875  2937							; complex statement detected
   3876  2937		       a5 ce		      LDA	temp4
   3877  2939		       18		      CLC
   3878  293a		       69 05		      ADC	#5
   3879  293c							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3880  293c		       c5 9a		      CMP	player1y
   3881  293e		       90 1c		      BCC	.skipL0356
   3882  2940				   .condpart134
   3883  2940							; complex condition detected
   3884  2940							; complex statement detected
   3885  2940		       a5 9a		      LDA	player1y
   3886  2942		       18		      CLC
   3887  2943		       69 05		      ADC	#5
   3888  2945		       c5 ce		      CMP	temp4
   3889  2947		       90 13		      BCC	.skip134then
   3890  2949				   .condpart135
   3891  2949		       a9 c8		      LDA	#200
   3892  294b		       85 9a		      STA	player1y
   3893  294d		       e6 e1		      INC	Househit
   3894  294f		       a9 01		      LDA	#1
   3895  2951		       85 f1		      STA	Bit0_HitPlayer
   3896  2953		       a5 ea		      LDA	Bit5_hit
   3897  2955		       09 20		      ORA	#32
   3898  2957		       85 ea		      STA	Bit5_hit
   3899  2959		       4c 29 3c 	      jmp	.__Explosion
   3900  295c
   3901  295c				   .skip134then
   3902  295c				   .skipL0356
   3903  295c				   .L0357		;  if	( temp4  +  5 )   >=  player2y	&&  temp4  <=	( player2y  +  5 )  then player2y = 200  :  Househit = Househit + 1  :	Bit0_HitPlayer	= 1  :	Bit5_hit{5}  = 1  :  goto __Explosion
   3904  295c
   3905  295c							; complex condition detected
   3906  295c							; complex statement detected
   3907  295c		       a5 ce		      LDA	temp4
   3908  295e		       18		      CLC
   3909  295f		       69 05		      ADC	#5
   3910  2961							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3911  2961		       c5 9b		      CMP	player2y
   3912  2963		       90 1c		      BCC	.skipL0357
   3913  2965				   .condpart136
   3914  2965							; complex condition detected
   3915  2965							; complex statement detected
   3916  2965		       a5 9b		      LDA	player2y
   3917  2967		       18		      CLC
   3918  2968		       69 05		      ADC	#5
   3919  296a		       c5 ce		      CMP	temp4
   3920  296c		       90 13		      BCC	.skip136then
   3921  296e				   .condpart137
   3922  296e		       a9 c8		      LDA	#200
   3923  2970		       85 9b		      STA	player2y
   3924  2972		       e6 e1		      INC	Househit
   3925  2974		       a9 01		      LDA	#1
   3926  2976		       85 f1		      STA	Bit0_HitPlayer
   3927  2978		       a5 ea		      LDA	Bit5_hit
   3928  297a		       09 20		      ORA	#32
   3929  297c		       85 ea		      STA	Bit5_hit
   3930  297e		       4c 29 3c 	      jmp	.__Explosion
   3931  2981
   3932  2981				   .skip136then
   3933  2981				   .skipL0357
   3934  2981				   .L0358		;  if	( temp4  +  5 )   >=  player3y	&&  temp4  <=	( player3y  +  5 )  then player3y = 200  :  Bit6_PLayer3Direction{6}  =  0  :  Househit = Househit + 1	:  Bit0_HitPlayer  = 1	:  Bit5_hit{5}	= 1  :	goto __Explosion
   3935  2981
   3936  2981							; complex condition detected
   3937  2981							; complex statement detected
   3938  2981		       a5 ce		      LDA	temp4
   3939  2983		       18		      CLC
   3940  2984		       69 05		      ADC	#5
   3941  2986							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3942  2986		       c5 9c		      CMP	player3y
   3943  2988		       90 22		      BCC	.skipL0358
   3944  298a				   .condpart138
   3945  298a							; complex condition detected
   3946  298a							; complex statement detected
   3947  298a		       a5 9c		      LDA	player3y
   3948  298c		       18		      CLC
   3949  298d		       69 05		      ADC	#5
   3950  298f		       c5 ce		      CMP	temp4
   3951  2991		       90 19		      BCC	.skip138then
   3952  2993				   .condpart139
   3953  2993		       a9 c8		      LDA	#200
   3954  2995		       85 9c		      STA	player3y
   3955  2997		       a5 ea		      LDA	Bit6_PLayer3Direction
   3956  2999		       29 bf		      AND	#191
   3957  299b		       85 ea		      STA	Bit6_PLayer3Direction
   3958  299d		       e6 e1		      INC	Househit
   3959  299f		       a9 01		      LDA	#1
   3960  29a1		       85 f1		      STA	Bit0_HitPlayer
   3961  29a3		       a5 ea		      LDA	Bit5_hit
   3962  29a5		       09 20		      ORA	#32
   3963  29a7		       85 ea		      STA	Bit5_hit
   3964  29a9		       4c 29 3c 	      jmp	.__Explosion
   3965  29ac
   3966  29ac				   .skip138then
   3967  29ac				   .skipL0358
   3968  29ac				   .L0359		;  if	( temp4  +  5 )   >=  player4y	&&  temp4  <=	( player4y  +  5 )  then player4y = 200  :  HealthDrop = 0 :  Bit2_EnemyMove{2} = 0  :	if Powerup  < 1 then Househit = Househit + 3
   3969  29ac
   3970  29ac							; complex condition detected
   3971  29ac							; complex statement detected
   3972  29ac		       a5 ce		      LDA	temp4
   3973  29ae		       18		      CLC
   3974  29af		       69 05		      ADC	#5
   3975  29b1							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3976  29b1		       c5 9d		      CMP	player4y
   3977  29b3		       90 24		      BCC	.skipL0359
   3978  29b5				   .condpart140
   3979  29b5							; complex condition detected
   3980  29b5							; complex statement detected
   3981  29b5		       a5 9d		      LDA	player4y
   3982  29b7		       18		      CLC
   3983  29b8		       69 05		      ADC	#5
   3984  29ba		       c5 ce		      CMP	temp4
   3985  29bc		       90 1b		      BCC	.skip140then
   3986  29be				   .condpart141
   3987  29be		       a9 c8		      LDA	#200
   3988  29c0		       85 9d		      STA	player4y
   3989  29c2		       a9 00		      LDA	#0
   3990  29c4		       85 de		      STA	HealthDrop
   3991  29c6		       a5 ea		      LDA	Bit2_EnemyMove
   3992  29c8		       29 fb		      AND	#251
   3993  29ca		       85 ea		      STA	Bit2_EnemyMove
   3994  29cc		       a5 ee		      LDA	Powerup
   3995  29ce		       c9 01		      CMP	#1
   3996  29d0		       b0 07		      BCS	.skip141then
   3997  29d2				   .condpart142
   3998  29d2		       a5 e1		      LDA	Househit
   3999  29d4		       18		      CLC
   4000  29d5		       69 03		      ADC	#3
   4001  29d7		       85 e1		      STA	Househit
   4002  29d9				   .skip141then
   4003  29d9				   .skip140then
   4004  29d9				   .skipL0359
   4005  29d9				   .
   4006  29d9							; 
   4007  29d9
   4008  29d9				   .__EnemyCollision
   4009  29d9							; __EnemyCollision
   4010  29d9
   4011  29d9				   .L0360		;  if !collision(player0,player1) then goto __Skip_p0_Collision
   4012  29d9
   4013  29d9		       24 07		      bit	CXPPMM
   4014  29db		       30 03		      BMI	.skipL0360
   4015  29dd				   .condpart143
   4016  29dd		       4c ef 3a 	      jmp	.__Skip_p0_Collision
   4017  29e0
   4018  29e0				   .skipL0360
   4019  29e0				   .L0361		;  temp5  =  15
   4020  29e0
   4021  29e0		       a9 0f		      LDA	#15
   4022  29e2		       85 cf		      STA	temp5
   4023  29e4				   .L0362		;  if EnemyHit  <>  1 then if	( player0y  +  10 )   >=  player1y  &&	player0y  <=   ( player1y  +  10 )   &&   ( player0x  +  temp5 )   >=  player1x  &&  player0x  <=   ( player1x	+  7 )	then EnemyHit  =  1  :	Damage	= 20  :  goto __EnemyBlock
   4024  29e4
   4025  29e4		       a5 d9		      LDA	EnemyHit
   4026  29e6		       c9 01		      CMP	#1
   4027  29e8		       f0 2f		      BEQ	.skipL0362
   4028  29ea				   .condpart144
   4029  29ea							; complex condition detected
   4030  29ea							; complex statement detected
   4031  29ea		       a5 99		      LDA	player0y
   4032  29ec		       18		      CLC
   4033  29ed		       69 0a		      ADC	#10
   4034  29ef							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4035  29ef		       c5 9a		      CMP	player1y
   4036  29f1		       90 26		      BCC	.skip144then
   4037  29f3				   .condpart145
   4038  29f3							; complex condition detected
   4039  29f3							; complex statement detected
   4040  29f3		       a5 9a		      LDA	player1y
   4041  29f5		       18		      CLC
   4042  29f6		       69 0a		      ADC	#10
   4043  29f8							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4044  29f8		       c5 99		      CMP	player0y
   4045  29fa		       90 1d		      BCC	.skip145then
   4046  29fc				   .condpart146
   4047  29fc							; complex condition detected
   4048  29fc							; complex statement detected
   4049  29fc		       a5 80		      LDA	player0x
   4050  29fe		       18		      CLC
   4051  29ff		       65 cf		      ADC	temp5
   4052  2a01							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4053  2a01		       c5 90		      CMP	player1x
   4054  2a03		       90 14		      BCC	.skip146then
   4055  2a05				   .condpart147
   4056  2a05							; complex condition detected
   4057  2a05							; complex statement detected
   4058  2a05		       a5 90		      LDA	player1x
   4059  2a07		       18		      CLC
   4060  2a08		       69 07		      ADC	#7
   4061  2a0a		       c5 80		      CMP	player0x
   4062  2a0c		       90 0b		      BCC	.skip147then
   4063  2a0e				   .condpart148
   4064  2a0e		       a9 01		      LDA	#1
   4065  2a10		       85 d9		      STA	EnemyHit
   4066  2a12		       a9 14		      LDA	#20
   4067  2a14		       85 ed		      STA	Damage
   4068  2a16		       4c 8c 3e 	      jmp	.__EnemyBlock
   4069  2a19
   4070  2a19				   .skip147then
   4071  2a19				   .skip146then
   4072  2a19				   .skip145then
   4073  2a19				   .skip144then
   4074  2a19				   .skipL0362
   4075  2a19				   .L0363		;  if EnemyHit  <>  2 then if	( player0y  +  10 )   >=  player2y  &&	player0y  <=   ( player2y  +  10 )   &&   ( player0x  +  temp5 )   >=  player2x  &&  player0x  <=   ( player2x	+  7 )	then EnemyHit  =  2  :	Damage	= 10  :  goto __EnemyBlock
   4076  2a19
   4077  2a19		       a5 d9		      LDA	EnemyHit
   4078  2a1b		       c9 02		      CMP	#2
   4079  2a1d		       f0 2f		      BEQ	.skipL0363
   4080  2a1f				   .condpart149
   4081  2a1f							; complex condition detected
   4082  2a1f							; complex statement detected
   4083  2a1f		       a5 99		      LDA	player0y
   4084  2a21		       18		      CLC
   4085  2a22		       69 0a		      ADC	#10
   4086  2a24							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4087  2a24		       c5 9b		      CMP	player2y
   4088  2a26		       90 26		      BCC	.skip149then
   4089  2a28				   .condpart150
   4090  2a28							; complex condition detected
   4091  2a28							; complex statement detected
   4092  2a28		       a5 9b		      LDA	player2y
   4093  2a2a		       18		      CLC
   4094  2a2b		       69 0a		      ADC	#10
   4095  2a2d							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4096  2a2d		       c5 99		      CMP	player0y
   4097  2a2f		       90 1d		      BCC	.skip150then
   4098  2a31				   .condpart151
   4099  2a31							; complex condition detected
   4100  2a31							; complex statement detected
   4101  2a31		       a5 80		      LDA	player0x
   4102  2a33		       18		      CLC
   4103  2a34		       65 cf		      ADC	temp5
   4104  2a36							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4105  2a36		       c5 91		      CMP	player2x
   4106  2a38		       90 14		      BCC	.skip151then
   4107  2a3a				   .condpart152
   4108  2a3a							; complex condition detected
   4109  2a3a							; complex statement detected
   4110  2a3a		       a5 91		      LDA	player2x
   4111  2a3c		       18		      CLC
   4112  2a3d		       69 07		      ADC	#7
   4113  2a3f		       c5 80		      CMP	player0x
   4114  2a41		       90 0b		      BCC	.skip152then
   4115  2a43				   .condpart153
   4116  2a43		       a9 02		      LDA	#2
   4117  2a45		       85 d9		      STA	EnemyHit
   4118  2a47		       a9 0a		      LDA	#10
   4119  2a49		       85 ed		      STA	Damage
   4120  2a4b		       4c 8c 3e 	      jmp	.__EnemyBlock
   4121  2a4e
   4122  2a4e				   .skip152then
   4123  2a4e				   .skip151then
   4124  2a4e				   .skip150then
   4125  2a4e				   .skip149then
   4126  2a4e				   .skipL0363
   4127  2a4e				   .L0364		;  if EnemyHit  <>  3 then if	( player0y  +  10 )   >=  player3y  &&	player0y  <=   ( player3y  +  10 )   &&   ( player0x  +  temp5 )   >=  player3x  &&  player0x  <=   ( player3x	+  7 )	then EnemyHit  =  3  :	Damage	= 10  :  goto __EnemyBlock
   4128  2a4e
   4129  2a4e		       a5 d9		      LDA	EnemyHit
   4130  2a50		       c9 03		      CMP	#3
   4131  2a52		       f0 2f		      BEQ	.skipL0364
   4132  2a54				   .condpart154
   4133  2a54							; complex condition detected
   4134  2a54							; complex statement detected
   4135  2a54		       a5 99		      LDA	player0y
   4136  2a56		       18		      CLC
   4137  2a57		       69 0a		      ADC	#10
   4138  2a59							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4139  2a59		       c5 9c		      CMP	player3y
   4140  2a5b		       90 26		      BCC	.skip154then
   4141  2a5d				   .condpart155
   4142  2a5d							; complex condition detected
   4143  2a5d							; complex statement detected
   4144  2a5d		       a5 9c		      LDA	player3y
   4145  2a5f		       18		      CLC
   4146  2a60		       69 0a		      ADC	#10
   4147  2a62							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4148  2a62		       c5 99		      CMP	player0y
   4149  2a64		       90 1d		      BCC	.skip155then
   4150  2a66				   .condpart156
   4151  2a66							; complex condition detected
   4152  2a66							; complex statement detected
   4153  2a66		       a5 80		      LDA	player0x
   4154  2a68		       18		      CLC
   4155  2a69		       65 cf		      ADC	temp5
   4156  2a6b							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4157  2a6b		       c5 92		      CMP	player3x
   4158  2a6d		       90 14		      BCC	.skip156then
   4159  2a6f				   .condpart157
   4160  2a6f							; complex condition detected
   4161  2a6f							; complex statement detected
   4162  2a6f		       a5 92		      LDA	player3x
   4163  2a71		       18		      CLC
   4164  2a72		       69 07		      ADC	#7
   4165  2a74		       c5 80		      CMP	player0x
   4166  2a76		       90 0b		      BCC	.skip157then
   4167  2a78				   .condpart158
   4168  2a78		       a9 03		      LDA	#3
   4169  2a7a		       85 d9		      STA	EnemyHit
   4170  2a7c		       a9 0a		      LDA	#10
   4171  2a7e		       85 ed		      STA	Damage
   4172  2a80		       4c 8c 3e 	      jmp	.__EnemyBlock
   4173  2a83
   4174  2a83				   .skip157then
   4175  2a83				   .skip156then
   4176  2a83				   .skip155then
   4177  2a83				   .skip154then
   4178  2a83				   .skipL0364
   4179  2a83				   .L0365		;  if	( player0y  +  10 )   >=  player4y  &&	player0y  <=   ( player4y  +  10 )   &&   ( player0x  +  temp5 )   >=  player4x  &&  player0x  <=   ( player4x	+  7 )	then gosub __Health bank3
   4180  2a83
   4181  2a83							; complex condition detected
   4182  2a83							; complex statement detected
   4183  2a83		       a5 99		      LDA	player0y
   4184  2a85		       18		      CLC
   4185  2a86		       69 0a		      ADC	#10
   4186  2a88							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4187  2a88		       c5 9d		      CMP	player4y
   4188  2a8a		       90 33		      BCC	.skipL0365
   4189  2a8c				   .condpart159
   4190  2a8c							; complex condition detected
   4191  2a8c							; complex statement detected
   4192  2a8c		       a5 9d		      LDA	player4y
   4193  2a8e		       18		      CLC
   4194  2a8f		       69 0a		      ADC	#10
   4195  2a91							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4196  2a91		       c5 99		      CMP	player0y
   4197  2a93		       90 2a		      BCC	.skip159then
   4198  2a95				   .condpart160
   4199  2a95							; complex condition detected
   4200  2a95							; complex statement detected
   4201  2a95		       a5 80		      LDA	player0x
   4202  2a97		       18		      CLC
   4203  2a98		       65 cf		      ADC	temp5
   4204  2a9a							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4205  2a9a		       c5 93		      CMP	player4x
   4206  2a9c		       90 21		      BCC	.skip160then
   4207  2a9e				   .condpart161
   4208  2a9e							; complex condition detected
   4209  2a9e							; complex statement detected
   4210  2a9e		       a5 93		      LDA	player4x
   4211  2aa0		       18		      CLC
   4212  2aa1		       69 07		      ADC	#7
   4213  2aa3		       c5 80		      CMP	player0x
   4214  2aa5		       90 18		      BCC	.skip161then
   4215  2aa7				   .condpart162
   4216  2aa7		       85 81		      sta	temp7
   4217  2aa9		       a9 3a		      lda	#>(ret_point7-1)
   4218  2aab		       48		      pha
   4219  2aac		       a9 be		      lda	#<(ret_point7-1)
   4220  2aae		       48		      pha
   4221  2aaf		       a9 54		      lda	#>(.__Health-1)
   4222  2ab1		       48		      pha
   4223  2ab2		       a9 9e		      lda	#<(.__Health-1)
   4224  2ab4		       48		      pha
   4225  2ab5		       a5 81		      lda	temp7
   4226  2ab7		       48		      pha
   4227  2ab8		       8a		      txa
   4228  2ab9		       48		      pha
   4229  2aba		       a2 03		      ldx	#3
   4230  2abc		       4c ee df 	      jmp	BS_jsr
   4231  2abf				   ret_point7
   4232  2abf				   .skip161then
   4233  2abf				   .skip160then
   4234  2abf				   .skip159then
   4235  2abf				   .skipL0365
   4236  2abf				   .L0366		;  if	( player0y  +  10 )   >=  player5y  &&	player0y  <=   ( player5y  +  10 )   &&   ( player0x  +  temp5 )   >=  player5x  &&  player0x  <=   ( player5x	+  7 )	then goto __JoystickControls
   4237  2abf
   4238  2abf							; complex condition detected
   4239  2abf							; complex statement detected
   4240  2abf		       a5 99		      LDA	player0y
   4241  2ac1		       18		      CLC
   4242  2ac2		       69 0a		      ADC	#10
   4243  2ac4							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4244  2ac4		       c5 9e		      CMP	player5y
   4245  2ac6		       90 1e		      BCC	.skipL0366
   4246  2ac8				   .condpart163
   4247  2ac8							; complex condition detected
   4248  2ac8							; complex statement detected
   4249  2ac8		       a5 9e		      LDA	player5y
   4250  2aca		       18		      CLC
   4251  2acb		       69 0a		      ADC	#10
   4252  2acd							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4253  2acd		       c5 99		      CMP	player0y
   4254  2acf		       90 15		      BCC	.skip163then
   4255  2ad1				   .condpart164
   4256  2ad1							; complex condition detected
   4257  2ad1							; complex statement detected
   4258  2ad1		       a5 80		      LDA	player0x
   4259  2ad3		       18		      CLC
   4260  2ad4		       65 cf		      ADC	temp5
   4261  2ad6							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4262  2ad6		       c5 94		      CMP	player5x
   4263  2ad8		       90 0c		      BCC	.skip164then
   4264  2ada				   .condpart165
   4265  2ada							; complex condition detected
   4266  2ada							; complex statement detected
   4267  2ada		       a5 94		      LDA	player5x
   4268  2adc		       18		      CLC
   4269  2add		       69 07		      ADC	#7
   4270  2adf		       c5 80		      CMP	player0x
   4271  2ae1		       90 03		      BCC	.skip165then
   4272  2ae3				   .condpart166
   4273  2ae3		       4c f7 3b 	      jmp	.__JoystickControls
   4274  2ae6
   4275  2ae6				   .skip165then
   4276  2ae6				   .skip164then
   4277  2ae6				   .skip163then
   4278  2ae6				   .skipL0366
   4279  2ae6				   .L0367		;  if EnemyHit  <  1 then goto __EnemyScore
   4280  2ae6
   4281  2ae6		       a5 d9		      LDA	EnemyHit
   4282  2ae8		       c9 01		      CMP	#1
   4283  2aea		       b0 03		      BCS	.skipL0367
   4284  2aec				   .condpart167
   4285  2aec		       4c d3 3e 	      jmp	.__EnemyScore
   4286  2aef
   4287  2aef				   .skipL0367
   4288  2aef				   .
   4289  2aef							; 
   4290  2aef
   4291  2aef				   .__Skip_p0_Collision
   4292  2aef							; __Skip_p0_Collision
   4293  2aef
   4294  2aef				   .L0368		;  if !collision(missile0,player1) then goto __Skip_PF_Collision
   4295  2aef
   4296  2aef		       24 00		      bit	CXM0P
   4297  2af1		       30 03		      BMI	.skipL0368
   4298  2af3				   .condpart168
   4299  2af3		       4c d9 3b 	      jmp	.__Skip_PF_Collision
   4300  2af6
   4301  2af6				   .skipL0368
   4302  2af6				   .L0369		;  temp5  =  missile0height[8]
   4303  2af6
   4304  2af6		       a2 08		      LDX	#8
   4305  2af8		       b5 c2		      LDA	missile0height,x
   4306  2afa		       85 cf		      STA	temp5
   4307  2afc				   .L0370		;  if EnemyHit  <  1 then if  ( missile0y  +  missile0height )   >=  player1y	&&  missile0y  <=   ( player1y	+  10 )   &&   ( missile0x  +  temp5 )	 >=  player1x  &&  missile0x  <=   ( player1x  +  15 )	then EnemyHit  =  1 :  Points = $10  :	goto __Score
   4308  2afc
   4309  2afc		       a5 d9		      LDA	EnemyHit
   4310  2afe		       c9 01		      CMP	#1
   4311  2b00		       b0 2f		      BCS	.skipL0370
   4312  2b02				   .condpart169
   4313  2b02							; complex condition detected
   4314  2b02							; complex statement detected
   4315  2b02		       a5 bf		      LDA	missile0y
   4316  2b04		       18		      CLC
   4317  2b05		       65 c2		      ADC	missile0height
   4318  2b07							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4319  2b07		       c5 9a		      CMP	player1y
   4320  2b09		       90 26		      BCC	.skip169then
   4321  2b0b				   .condpart170
   4322  2b0b							; complex condition detected
   4323  2b0b							; complex statement detected
   4324  2b0b		       a5 9a		      LDA	player1y
   4325  2b0d		       18		      CLC
   4326  2b0e		       69 0a		      ADC	#10
   4327  2b10							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4328  2b10		       c5 bf		      CMP	missile0y
   4329  2b12		       90 1d		      BCC	.skip170then
   4330  2b14				   .condpart171
   4331  2b14							; complex condition detected
   4332  2b14							; complex statement detected
   4333  2b14		       a5 82		      LDA	missile0x
   4334  2b16		       18		      CLC
   4335  2b17		       65 cf		      ADC	temp5
   4336  2b19							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4337  2b19		       c5 90		      CMP	player1x
   4338  2b1b		       90 14		      BCC	.skip171then
   4339  2b1d				   .condpart172
   4340  2b1d							; complex condition detected
   4341  2b1d							; complex statement detected
   4342  2b1d		       a5 90		      LDA	player1x
   4343  2b1f		       18		      CLC
   4344  2b20		       69 0f		      ADC	#15
   4345  2b22		       c5 82		      CMP	missile0x
   4346  2b24		       90 0b		      BCC	.skip172then
   4347  2b26				   .condpart173
   4348  2b26		       a9 01		      LDA	#1
   4349  2b28		       85 d9		      STA	EnemyHit
   4350  2b2a		       a9 10		      LDA	#$10
   4351  2b2c		       85 d4		      STA	Points
   4352  2b2e		       4c 60 3d 	      jmp	.__Score
   4353  2b31
   4354  2b31				   .skip172then
   4355  2b31				   .skip171then
   4356  2b31				   .skip170then
   4357  2b31				   .skip169then
   4358  2b31				   .skipL0370
   4359  2b31				   .L0371		;  if EnemyHit  <  2 then if  ( missile0y  +  missile0height )   >=  player2y	&&  missile0y  <=   ( player2y	+  10 )   &&   ( missile0x  +  temp5 )	 >=  player2x  &&  missile0x  <=   ( player2x  +  15 )	then EnemyHit  =  2  :	Points = $05  :  goto __Score
   4360  2b31
   4361  2b31		       a5 d9		      LDA	EnemyHit
   4362  2b33		       c9 02		      CMP	#2
   4363  2b35		       b0 2f		      BCS	.skipL0371
   4364  2b37				   .condpart174
   4365  2b37							; complex condition detected
   4366  2b37							; complex statement detected
   4367  2b37		       a5 bf		      LDA	missile0y
   4368  2b39		       18		      CLC
   4369  2b3a		       65 c2		      ADC	missile0height
   4370  2b3c							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4371  2b3c		       c5 9b		      CMP	player2y
   4372  2b3e		       90 26		      BCC	.skip174then
   4373  2b40				   .condpart175
   4374  2b40							; complex condition detected
   4375  2b40							; complex statement detected
   4376  2b40		       a5 9b		      LDA	player2y
   4377  2b42		       18		      CLC
   4378  2b43		       69 0a		      ADC	#10
   4379  2b45							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4380  2b45		       c5 bf		      CMP	missile0y
   4381  2b47		       90 1d		      BCC	.skip175then
   4382  2b49				   .condpart176
   4383  2b49							; complex condition detected
   4384  2b49							; complex statement detected
   4385  2b49		       a5 82		      LDA	missile0x
   4386  2b4b		       18		      CLC
   4387  2b4c		       65 cf		      ADC	temp5
   4388  2b4e							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4389  2b4e		       c5 91		      CMP	player2x
   4390  2b50		       90 14		      BCC	.skip176then
   4391  2b52				   .condpart177
   4392  2b52							; complex condition detected
   4393  2b52							; complex statement detected
   4394  2b52		       a5 91		      LDA	player2x
   4395  2b54		       18		      CLC
   4396  2b55		       69 0f		      ADC	#15
   4397  2b57		       c5 82		      CMP	missile0x
   4398  2b59		       90 0b		      BCC	.skip177then
   4399  2b5b				   .condpart178
   4400  2b5b		       a9 02		      LDA	#2
   4401  2b5d		       85 d9		      STA	EnemyHit
   4402  2b5f		       a9 05		      LDA	#$05
   4403  2b61		       85 d4		      STA	Points
   4404  2b63		       4c 60 3d 	      jmp	.__Score
   4405  2b66
   4406  2b66				   .skip177then
   4407  2b66				   .skip176then
   4408  2b66				   .skip175then
   4409  2b66				   .skip174then
   4410  2b66				   .skipL0371
   4411  2b66				   .L0372		;  if EnemyHit  <  3 then if  ( missile0y  +  missile0height )   >=  player3y	&&  missile0y  <=   ( player3y	+  10 )   &&   ( missile0x  +  temp5 )	 >=  player3x  &&  missile0x  <=   ( player3x  +  15 )	then EnemyHit  =  3  :	Bit6_PLayer3Direction{6}  = 0  :  goto __Score
   4412  2b66
   4413  2b66		       a5 d9		      LDA	EnemyHit
   4414  2b68		       c9 03		      CMP	#3
   4415  2b6a		       b0 31		      BCS	.skipL0372
   4416  2b6c				   .condpart179
   4417  2b6c							; complex condition detected
   4418  2b6c							; complex statement detected
   4419  2b6c		       a5 bf		      LDA	missile0y
   4420  2b6e		       18		      CLC
   4421  2b6f		       65 c2		      ADC	missile0height
   4422  2b71							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4423  2b71		       c5 9c		      CMP	player3y
   4424  2b73		       90 28		      BCC	.skip179then
   4425  2b75				   .condpart180
   4426  2b75							; complex condition detected
   4427  2b75							; complex statement detected
   4428  2b75		       a5 9c		      LDA	player3y
   4429  2b77		       18		      CLC
   4430  2b78		       69 0a		      ADC	#10
   4431  2b7a							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4432  2b7a		       c5 bf		      CMP	missile0y
   4433  2b7c		       90 1f		      BCC	.skip180then
   4434  2b7e				   .condpart181
   4435  2b7e							; complex condition detected
   4436  2b7e							; complex statement detected
   4437  2b7e		       a5 82		      LDA	missile0x
   4438  2b80		       18		      CLC
   4439  2b81		       65 cf		      ADC	temp5
   4440  2b83							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4441  2b83		       c5 92		      CMP	player3x
   4442  2b85		       90 16		      BCC	.skip181then
   4443  2b87				   .condpart182
   4444  2b87							; complex condition detected
   4445  2b87							; complex statement detected
   4446  2b87		       a5 92		      LDA	player3x
   4447  2b89		       18		      CLC
   4448  2b8a		       69 0f		      ADC	#15
   4449  2b8c		       c5 82		      CMP	missile0x
   4450  2b8e		       90 0d		      BCC	.skip182then
   4451  2b90				   .condpart183
   4452  2b90		       a9 03		      LDA	#3
   4453  2b92		       85 d9		      STA	EnemyHit
   4454  2b94		       a5 ea		      LDA	Bit6_PLayer3Direction
   4455  2b96		       29 bf		      AND	#191
   4456  2b98		       85 ea		      STA	Bit6_PLayer3Direction
   4457  2b9a		       4c 60 3d 	      jmp	.__Score
   4458  2b9d
   4459  2b9d				   .skip182then
   4460  2b9d				   .skip181then
   4461  2b9d				   .skip180then
   4462  2b9d				   .skip179then
   4463  2b9d				   .skipL0372
   4464  2b9d				   .L0373		;  if	( missile0y  +	missile0height )   >=  player4y  &&  missile0y	<=   ( player4y  +  10 )   &&	( missile0x  +	temp5 )   >=  player4x	&&  missile0x  <=   ( player4x	+  15 )  then gosub __Health bank3
   4465  2b9d
   4466  2b9d							; complex condition detected
   4467  2b9d							; complex statement detected
   4468  2b9d		       a5 bf		      LDA	missile0y
   4469  2b9f		       18		      CLC
   4470  2ba0		       65 c2		      ADC	missile0height
   4471  2ba2							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4472  2ba2		       c5 9d		      CMP	player4y
   4473  2ba4		       90 33		      BCC	.skipL0373
   4474  2ba6				   .condpart184
   4475  2ba6							; complex condition detected
   4476  2ba6							; complex statement detected
   4477  2ba6		       a5 9d		      LDA	player4y
   4478  2ba8		       18		      CLC
   4479  2ba9		       69 0a		      ADC	#10
   4480  2bab							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4481  2bab		       c5 bf		      CMP	missile0y
   4482  2bad		       90 2a		      BCC	.skip184then
   4483  2baf				   .condpart185
   4484  2baf							; complex condition detected
   4485  2baf							; complex statement detected
   4486  2baf		       a5 82		      LDA	missile0x
   4487  2bb1		       18		      CLC
   4488  2bb2		       65 cf		      ADC	temp5
   4489  2bb4							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4490  2bb4		       c5 93		      CMP	player4x
   4491  2bb6		       90 21		      BCC	.skip185then
   4492  2bb8				   .condpart186
   4493  2bb8							; complex condition detected
   4494  2bb8							; complex statement detected
   4495  2bb8		       a5 93		      LDA	player4x
   4496  2bba		       18		      CLC
   4497  2bbb		       69 0f		      ADC	#15
   4498  2bbd		       c5 82		      CMP	missile0x
   4499  2bbf		       90 18		      BCC	.skip186then
   4500  2bc1				   .condpart187
   4501  2bc1		       85 81		      sta	temp7
   4502  2bc3		       a9 3b		      lda	#>(ret_point8-1)
   4503  2bc5		       48		      pha
   4504  2bc6		       a9 d8		      lda	#<(ret_point8-1)
   4505  2bc8		       48		      pha
   4506  2bc9		       a9 54		      lda	#>(.__Health-1)
   4507  2bcb		       48		      pha
   4508  2bcc		       a9 9e		      lda	#<(.__Health-1)
   4509  2bce		       48		      pha
   4510  2bcf		       a5 81		      lda	temp7
   4511  2bd1		       48		      pha
   4512  2bd2		       8a		      txa
   4513  2bd3		       48		      pha
   4514  2bd4		       a2 03		      ldx	#3
   4515  2bd6		       4c ee df 	      jmp	BS_jsr
   4516  2bd9				   ret_point8
   4517  2bd9				   .skip186then
   4518  2bd9				   .skip185then
   4519  2bd9				   .skip184then
   4520  2bd9				   .skipL0373
   4521  2bd9				   .
   4522  2bd9							; 
   4523  2bd9
   4524  2bd9				   .__Skip_PF_Collision
   4525  2bd9							; __Skip_PF_Collision
   4526  2bd9
   4527  2bd9				   .
   4528  2bd9							; 
   4529  2bd9
   4530  2bd9				   .__SkipMove
   4531  2bd9							; __SkipMove
   4532  2bd9
   4533  2bd9				   .
   4534  2bd9							; 
   4535  2bd9
   4536  2bd9				   .L0374		;  DF6FRACINC	=  255
   4537  2bd9
   4538  2bd9		       a9 ff		      LDA	#255
   4539  2bdb		       8d 3e 10 	      STA	DF6FRACINC
   4540  2bde				   .L0375		;  DF4FRACINC	=  255
   4541  2bde
   4542  2bde		       a9 ff		      LDA	#255
   4543  2be0		       8d 3c 10 	      STA	DF4FRACINC
   4544  2be3				   .L0376		;  DF0FRACINC	=  128
   4545  2be3
   4546  2be3		       a9 80		      LDA	#128
   4547  2be5		       8d 38 10 	      STA	DF0FRACINC
   4548  2be8				   .L0377		;  DF1FRACINC	=  128
   4549  2be8
   4550  2be8		       a9 80		      LDA	#128
   4551  2bea		       8d 39 10 	      STA	DF1FRACINC
   4552  2bed				   .L0378		;  DF2FRACINC	=  128
   4553  2bed
   4554  2bed		       a9 80		      LDA	#128
   4555  2bef		       8d 3a 10 	      STA	DF2FRACINC
   4556  2bf2				   .L0379		;  DF3FRACINC	=  128
   4557  2bf2
   4558  2bf2		       a9 80		      LDA	#128
   4559  2bf4		       8d 3b 10 	      STA	DF3FRACINC
   4560  2bf7				   .
   4561  2bf7							; 
   4562  2bf7
   4563  2bf7				   .__JoystickControls
   4564  2bf7							; __JoystickControls
   4565  2bf7
   4566  2bf7				   .L0380		;  if joy0left  &&  player0x  >  _P_Edge_Left then player0x  =  player0x  -  1
   4567  2bf7
   4568  2bf7		       2c 80 02 	      bit	SWCHA
   4569  2bfa		       70 08		      BVS	.skipL0380
   4570  2bfc				   .condpart188
   4571  2bfc		       a9 00		      LDA	#_P_Edge_Left
   4572  2bfe		       c5 80		      CMP	player0x
   4573  2c00		       b0 02		      BCS	.skip188then
   4574  2c02				   .condpart189
   4575  2c02		       c6 80		      DEC	player0x
   4576  2c04				   .skip188then
   4577  2c04				   .skipL0380
   4578  2c04				   .L0381		;  if joy0right  &&  player0x	<  _P_Edge_Right then player0x	=  player0x  +	1
   4579  2c04
   4580  2c04		       2c 80 02 	      bit	SWCHA
   4581  2c07		       30 08		      BMI	.skipL0381
   4582  2c09				   .condpart190
   4583  2c09		       a5 80		      LDA	player0x
   4584  2c0b		       c9 96		      CMP	#_P_Edge_Right
   4585  2c0d		       b0 02		      BCS	.skip190then
   4586  2c0f				   .condpart191
   4587  2c0f		       e6 80		      INC	player0x
   4588  2c11				   .skip190then
   4589  2c11				   .skipL0381
   4590  2c11				   .
   4591  2c11							; 
   4592  2c11
   4593  2c11				   .L0382		;  gosub __FireSound bank5
   4594  2c11
   4595  2c11		       85 81		      sta	temp7
   4596  2c13		       a9 3c		      lda	#>(ret_point9-1)
   4597  2c15		       48		      pha
   4598  2c16		       a9 28		      lda	#<(ret_point9-1)
   4599  2c18		       48		      pha
   4600  2c19		       a9 90		      lda	#>(.__FireSound-1)
   4601  2c1b		       48		      pha
   4602  2c1c		       a9 84		      lda	#<(.__FireSound-1)
   4603  2c1e		       48		      pha
   4604  2c1f		       a5 81		      lda	temp7
   4605  2c21		       48		      pha
   4606  2c22		       8a		      txa
   4607  2c23		       48		      pha
   4608  2c24		       a2 05		      ldx	#5
   4609  2c26		       4c ee df 	      jmp	BS_jsr
   4610  2c29				   ret_point9
   4611  2c29				   .
   4612  2c29							; 
   4613  2c29
   4614  2c29				   .__Explosion
   4615  2c29							; __Explosion
   4616  2c29
   4617  2c29				   .L0383		;  if Bit5_hit{5}  &&	!Ch1_Sound then Ch1_Sound  =  1  :  Ch1_Duration  =  30
   4618  2c29
   4619  2c29		       a5 ea		      LDA	Bit5_hit
   4620  2c2b		       29 20		      AND	#32
   4621  2c2d		       f0 0c		      BEQ	.skipL0383
   4622  2c2f				   .condpart192
   4623  2c2f		       a5 da		      LDA	Ch1_Sound
   4624  2c31		       d0 08		      BNE	.skip192then
   4625  2c33				   .condpart193
   4626  2c33		       a9 01		      LDA	#1
   4627  2c35		       85 da		      STA	Ch1_Sound
   4628  2c37		       a9 1e		      LDA	#30
   4629  2c39		       85 db		      STA	Ch1_Duration
   4630  2c3b				   .skip192then
   4631  2c3b				   .skipL0383
   4632  2c3b				   .L0384		;  if Bit2_HealthHitSound{2}  &&  !Ch1_Sound then Ch1_Sound  =  1  :  goto __HealthHitSound
   4633  2c3b
   4634  2c3b		       a5 f1		      LDA	Bit2_HealthHitSound
   4635  2c3d		       29 04		      AND	#4
   4636  2c3f		       f0 0b		      BEQ	.skipL0384
   4637  2c41				   .condpart194
   4638  2c41		       a5 da		      LDA	Ch1_Sound
   4639  2c43		       d0 07		      BNE	.skip194then
   4640  2c45				   .condpart195
   4641  2c45		       a9 01		      LDA	#1
   4642  2c47		       85 da		      STA	Ch1_Sound
   4643  2c49		       4c ee 3c 	      jmp	.__HealthHitSound
   4644  2c4c
   4645  2c4c				   .skip194then
   4646  2c4c				   .skipL0384
   4647  2c4c				   .L0385		;  if Bit0_HitPlayer{0}  &&  !Ch1_Sound then Ch1_Sound  =  1  :  goto __EHit
   4648  2c4c
   4649  2c4c		       a5 f1		      LDA	Bit0_HitPlayer
   4650  2c4e		       4a		      LSR
   4651  2c4f		       90 0b		      BCC	.skipL0385
   4652  2c51				   .condpart196
   4653  2c51		       a5 da		      LDA	Ch1_Sound
   4654  2c53		       d0 07		      BNE	.skip196then
   4655  2c55				   .condpart197
   4656  2c55		       a9 01		      LDA	#1
   4657  2c57		       85 da		      STA	Ch1_Sound
   4658  2c59		       4c bb 3c 	      jmp	.__EHit
   4659  2c5c
   4660  2c5c				   .skip196then
   4661  2c5c				   .skipL0385
   4662  2c5c				   .
   4663  2c5c							; 
   4664  2c5c
   4665  2c5c				   .L0386		;  if !Ch1_Sound then goto __Skip_Fire
   4666  2c5c
   4667  2c5c		       a5 da		      LDA	Ch1_Sound
   4668  2c5e		       d0 03		      BNE	.skipL0386
   4669  2c60				   .condpart198
   4670  2c60		       4c 3e 3d 	      jmp	.__Skip_Fire
   4671  2c63
   4672  2c63				   .skipL0386
   4673  2c63				   .L0387		;  Ch1_Duration  =  Ch1_Duration  -  1
   4674  2c63
   4675  2c63		       c6 db		      DEC	Ch1_Duration
   4676  2c65				   .L0388		;  if !Ch1_Duration then goto __Exp_Clear_Ch_1
   4677  2c65
   4678  2c65		       a5 db		      LDA	Ch1_Duration
   4679  2c67		       d0 03		      BNE	.skipL0388
   4680  2c69				   .condpart199
   4681  2c69		       4c 22 3d 	      jmp	.__Exp_Clear_Ch_1
   4682  2c6c
   4683  2c6c				   .skipL0388
   4684  2c6c				   .L0389		;  if Ch1_Sound  <>  1 then goto __Exp_Skip_Ch1_Sound_001
   4685  2c6c
   4686  2c6c		       a5 da		      LDA	Ch1_Sound
   4687  2c6e		       c9 01		      CMP	#1
   4688  2c70		       f0 03		      BEQ	.skipL0389
   4689  2c72				   .condpart200
   4690  2c72		       4c 1f 3d 	      jmp	.__Exp_Skip_Ch1_Sound_001
   4691  2c75
   4692  2c75				   .skipL0389
   4693  2c75				   .L0390		;  if Bit2_HealthHitSound{2}  &&  Ch1_Sound then goto __HealthHitSound
   4694  2c75
   4695  2c75		       a5 f1		      LDA	Bit2_HealthHitSound
   4696  2c77		       29 04		      AND	#4
   4697  2c79		       f0 07		      BEQ	.skipL0390
   4698  2c7b				   .condpart201
   4699  2c7b		       a5 da		      LDA	Ch1_Sound
   4700  2c7d		       f0 03		      BEQ	.skip201then
   4701  2c7f				   .condpart202
   4702  2c7f		       4c ee 3c 	      jmp	.__HealthHitSound
   4703  2c82
   4704  2c82				   .skip201then
   4705  2c82				   .skipL0390
   4706  2c82				   .L0391		;  if !Bit0_HitPlayer{0} then goto __EHit
   4707  2c82
   4708  2c82		       a5 f1		      LDA	Bit0_HitPlayer
   4709  2c84		       4a		      LSR
   4710  2c85		       b0 03		      BCS	.skipL0391
   4711  2c87				   .condpart203
   4712  2c87		       4c bb 3c 	      jmp	.__EHit
   4713  2c8a
   4714  2c8a				   .skipL0391
   4715  2c8a				   .
   4716  2c8a							; 
   4717  2c8a
   4718  2c8a				   .L0392		;  AUDC1  =  8  :  AUDV1  =  4  :  AUDF1  =  1
   4719  2c8a
   4720  2c8a		       a9 08		      LDA	#8
   4721  2c8c		       85 16		      STA	AUDC1
   4722  2c8e		       a9 04		      LDA	#4
   4723  2c90		       85 1a		      STA	AUDV1
   4724  2c92		       a9 01		      LDA	#1
   4725  2c94		       85 18		      STA	AUDF1
   4726  2c96				   .L0393		;  if Ch1_Duration  <	20 then AUDC1  =  8  :	AUDV1  =  2  :	AUDF1  =  2
   4727  2c96
   4728  2c96		       a5 db		      LDA	Ch1_Duration
   4729  2c98		       c9 14		      CMP	#20
   4730  2c9a		       b0 0a		      BCS	.skipL0393
   4731  2c9c				   .condpart204
   4732  2c9c		       a9 08		      LDA	#8
   4733  2c9e		       85 16		      STA	AUDC1
   4734  2ca0		       a9 02		      LDA	#2
   4735  2ca2		       85 1a		      STA	AUDV1
   4736  2ca4		       85 18		      STA	AUDF1
   4737  2ca6				   .skipL0393
   4738  2ca6				   .L0394		;  if Ch1_Duration  <	10 then AUDC1  =  8  :	AUDV1  =  2  :	AUDF1  =  1
   4739  2ca6
   4740  2ca6		       a5 db		      LDA	Ch1_Duration
   4741  2ca8		       c9 0a		      CMP	#10
   4742  2caa		       b0 0c		      BCS	.skipL0394
   4743  2cac				   .condpart205
   4744  2cac		       a9 08		      LDA	#8
   4745  2cae		       85 16		      STA	AUDC1
   4746  2cb0		       a9 02		      LDA	#2
   4747  2cb2		       85 1a		      STA	AUDV1
   4748  2cb4		       a9 01		      LDA	#1
   4749  2cb6		       85 18		      STA	AUDF1
   4750  2cb8				   .skipL0394
   4751  2cb8				   .L0395		;  goto __Skip_Fire
   4752  2cb8
   4753  2cb8		       4c 3e 3d 	      jmp	.__Skip_Fire
   4754  2cbb
   4755  2cbb				   .
   4756  2cbb							; 
   4757  2cbb
   4758  2cbb				   .__EHit
   4759  2cbb							; __EHit
   4760  2cbb
   4761  2cbb				   .L0396		;  AUDC1  =  8  :  AUDV1  =  4  :  AUDF1  =  16
   4762  2cbb
   4763  2cbb		       a9 08		      LDA	#8
   4764  2cbd		       85 16		      STA	AUDC1
   4765  2cbf		       a9 04		      LDA	#4
   4766  2cc1		       85 1a		      STA	AUDV1
   4767  2cc3		       a9 10		      LDA	#16
   4768  2cc5		       85 18		      STA	AUDF1
   4769  2cc7				   .L0397		;  if Ch1_Duration  <	15 then AUDC1  =  8  :	AUDV1  =  2  :	AUDF1  =  24
   4770  2cc7
   4771  2cc7		       a5 db		      LDA	Ch1_Duration
   4772  2cc9		       c9 0f		      CMP	#15
   4773  2ccb		       b0 0c		      BCS	.skipL0397
   4774  2ccd				   .condpart206
   4775  2ccd		       a9 08		      LDA	#8
   4776  2ccf		       85 16		      STA	AUDC1
   4777  2cd1		       a9 02		      LDA	#2
   4778  2cd3		       85 1a		      STA	AUDV1
   4779  2cd5		       a9 18		      LDA	#24
   4780  2cd7		       85 18		      STA	AUDF1
   4781  2cd9				   .skipL0397
   4782  2cd9				   .L0398		;  if Ch1_Duration  <	5 then AUDC1  =  8  :  AUDV1  =  2  :  AUDF1  =  16
   4783  2cd9
   4784  2cd9		       a5 db		      LDA	Ch1_Duration
   4785  2cdb		       c9 05		      CMP	#5
   4786  2cdd		       b0 0c		      BCS	.skipL0398
   4787  2cdf				   .condpart207
   4788  2cdf		       a9 08		      LDA	#8
   4789  2ce1		       85 16		      STA	AUDC1
   4790  2ce3		       a9 02		      LDA	#2
   4791  2ce5		       85 1a		      STA	AUDV1
   4792  2ce7		       a9 10		      LDA	#16
   4793  2ce9		       85 18		      STA	AUDF1
   4794  2ceb				   .skipL0398
   4795  2ceb				   .L0399		;  goto __Skip_Fire
   4796  2ceb
   4797  2ceb		       4c 3e 3d 	      jmp	.__Skip_Fire
   4798  2cee
   4799  2cee				   .
   4800  2cee							; 
   4801  2cee
   4802  2cee				   .__HealthHitSound
   4803  2cee							; __HealthHitSound
   4804  2cee
   4805  2cee				   .L0400		;  AUDC1  =  4  :  AUDV1  =  6  :  AUDF1  =  12
   4806  2cee
   4807  2cee		       a9 04		      LDA	#4
   4808  2cf0		       85 16		      STA	AUDC1
   4809  2cf2		       a9 06		      LDA	#6
   4810  2cf4		       85 1a		      STA	AUDV1
   4811  2cf6		       a9 0c		      LDA	#12
   4812  2cf8		       85 18		      STA	AUDF1
   4813  2cfa				   .L0401		;  if Ch1_Duration  <	8 then AUDC1  =  4  :  AUDV1  =  4  :  AUDF1  =  12
   4814  2cfa
   4815  2cfa		       a5 db		      LDA	Ch1_Duration
   4816  2cfc		       c9 08		      CMP	#8
   4817  2cfe		       b0 0a		      BCS	.skipL0401
   4818  2d00				   .condpart208
   4819  2d00		       a9 04		      LDA	#4
   4820  2d02		       85 16		      STA	AUDC1
   4821  2d04		       85 1a		      STA	AUDV1
   4822  2d06		       a9 0c		      LDA	#12
   4823  2d08		       85 18		      STA	AUDF1
   4824  2d0a				   .skipL0401
   4825  2d0a				   .L0402		;  if Ch1_Duration  <	3 then AUDC1  =  9  :  AUDV1  =  1  :  AUDF1  =  9
   4826  2d0a
   4827  2d0a		       a5 db		      LDA	Ch1_Duration
   4828  2d0c		       c9 03		      CMP	#3
   4829  2d0e		       b0 0c		      BCS	.skipL0402
   4830  2d10				   .condpart209
   4831  2d10		       a9 09		      LDA	#9
   4832  2d12		       85 16		      STA	AUDC1
   4833  2d14		       a9 01		      LDA	#1
   4834  2d16		       85 1a		      STA	AUDV1
   4835  2d18		       a9 09		      LDA	#9
   4836  2d1a		       85 18		      STA	AUDF1
   4837  2d1c				   .skipL0402
   4838  2d1c				   .
   4839  2d1c							; 
   4840  2d1c
   4841  2d1c				   .L0403		;  goto __Skip_Fire
   4842  2d1c
   4843  2d1c		       4c 3e 3d 	      jmp	.__Skip_Fire
   4844  2d1f
   4845  2d1f				   .
   4846  2d1f							; 
   4847  2d1f
   4848  2d1f				   .__Exp_Skip_Ch1_Sound_001
   4849  2d1f							; __Exp_Skip_Ch1_Sound_001
   4850  2d1f
   4851  2d1f				   .L0404		;  goto __Skip_Fire
   4852  2d1f
   4853  2d1f		       4c 3e 3d 	      jmp	.__Skip_Fire
   4854  2d22
   4855  2d22				   .__Exp_Clear_Ch_1
   4856  2d22							; __Exp_Clear_Ch_1
   4857  2d22
   4858  2d22				   .L0405		;  Ch1_Sound  =  0  :	AUDV1  =  0 :  AUDC1  =  0 :  AUDF1  =	0
   4859  2d22
   4860  2d22		       a9 00		      LDA	#0
   4861  2d24		       85 da		      STA	Ch1_Sound
   4862  2d26		       85 1a		      STA	AUDV1
   4863  2d28		       85 16		      STA	AUDC1
   4864  2d2a		       85 18		      STA	AUDF1
   4865  2d2c				   .L0406		;  Bit5_hit{5}  = 0
   4866  2d2c
   4867  2d2c		       a5 ea		      LDA	Bit5_hit
   4868  2d2e		       29 df		      AND	#223
   4869  2d30		       85 ea		      STA	Bit5_hit
   4870  2d32				   .L0407		;  Bit0_HitPlayer{0} = 0
   4871  2d32
   4872  2d32		       a5 f1		      LDA	Bit0_HitPlayer
   4873  2d34		       29 fe		      AND	#254
   4874  2d36		       85 f1		      STA	Bit0_HitPlayer
   4875  2d38				   .L0408		;  Bit2_HealthHitSound{2}  =  0
   4876  2d38
   4877  2d38		       a5 f1		      LDA	Bit2_HealthHitSound
   4878  2d3a		       29 fb		      AND	#251
   4879  2d3c		       85 f1		      STA	Bit2_HealthHitSound
   4880  2d3e				   .
   4881  2d3e							; 
   4882  2d3e
   4883  2d3e				   .__Skip_Fire
   4884  2d3e							; __Skip_Fire
   4885  2d3e
   4886  2d3e				   .L0409		;  if Bit1_missleOn{1} then missile0y	=  missile0y  -  PlayerMissileRate
   4887  2d3e
   4888  2d3e		       a5 ea		      LDA	Bit1_missleOn
   4889  2d40		       29 02		      AND	#2
   4890  2d42		       f0 07		      BEQ	.skipL0409
   4891  2d44				   .condpart210
   4892  2d44		       a5 bf		      LDA	missile0y
   4893  2d46		       38		      SEC
   4894  2d47		       e5 f0		      SBC	PlayerMissileRate
   4895  2d49		       85 bf		      STA	missile0y
   4896  2d4b				   .skipL0409
   4897  2d4b				   .L0410		;  if missile0y  <  7 then Bit1_missleOn{1}  =  0 :  missile0x  = 200 :  missile0y  =	200
   4898  2d4b
   4899  2d4b		       a5 bf		      LDA	missile0y
   4900  2d4d		       c9 07		      CMP	#7
   4901  2d4f		       b0 0c		      BCS	.skipL0410
   4902  2d51				   .condpart211
   4903  2d51		       a5 ea		      LDA	Bit1_missleOn
   4904  2d53		       29 fd		      AND	#253
   4905  2d55		       85 ea		      STA	Bit1_missleOn
   4906  2d57		       a9 c8		      LDA	#200
   4907  2d59		       85 82		      STA	missile0x
   4908  2d5b		       85 bf		      STA	missile0y
   4909  2d5d				   .skipL0410
   4910  2d5d				   .L0411		;  goto __EnemyFire
   4911  2d5d
   4912  2d5d		       4c c4 3d 	      jmp	.__EnemyFire
   4913  2d60
   4914  2d60				   .
   4915  2d60							; 
   4916  2d60
   4917  2d60				   .__Score
   4918  2d60							; __Score
   4919  2d60
   4920  2d60				   .L0412		;  if PlayerHealth  <	0 then PlayerHealth  = 0
   4921  2d60
   4922  2d60		       a5 d5		      LDA	PlayerHealth
   4923  2d62		       c9 00		      CMP	#0
   4924  2d64		       b0 04		      BCS	.skipL0412
   4925  2d66				   .condpart212
   4926  2d66		       a9 00		      LDA	#0
   4927  2d68		       85 d5		      STA	PlayerHealth
   4928  2d6a				   .skipL0412
   4929  2d6a				   .L0413		;  Bit5_hit{5}  =  1
   4930  2d6a
   4931  2d6a		       a5 ea		      LDA	Bit5_hit
   4932  2d6c		       09 20		      ORA	#32
   4933  2d6e		       85 ea		      STA	Bit5_hit
   4934  2d70				   .L0414		;  if !Bit6_PLayer3Direction{6} then Points  = $35
   4935  2d70
   4936  2d70		       24 ea		      BIT	Bit6_PLayer3Direction
   4937  2d72		       70 04		      BVS	.skipL0414
   4938  2d74				   .condpart213
   4939  2d74		       a9 35		      LDA	#$35
   4940  2d76		       85 d4		      STA	Points
   4941  2d78				   .skipL0414
   4942  2d78				   .L0415		;  frame  =  0
   4943  2d78
   4944  2d78		       a9 00		      LDA	#0
   4945  2d7a		       85 d6		      STA	frame
   4946  2d7c				   .L0416		;  dec score  = score	+  Points
   4947  2d7c
   4948  2d7c		       f8		      SED
   4949  2d7d		       f8		      SED
   4950  2d7e		       18		      CLC
   4951  2d7f		       a5 ba		      LDA	score+2
   4952  2d81		       65 d4		      ADC	Points
   4953  2d83
   4954  2d83		       85 ba		      STA	score+2
   4955  2d85		       a5 b9		      LDA	score+1
   4956  2d87		       69 00		      ADC	#0
   4957  2d89		       85 b9		      STA	score+1
   4958  2d8b		       a5 b8		      LDA	score
   4959  2d8d		       69 00		      ADC	#0
   4960  2d8f		       85 b8		      STA	score
   4961  2d91		       d8		      CLD
   4962  2d92		       d8		      CLD
   4963  2d93				   .L0417		;  missile0x  =  200  :  missile0y  =	200
   4964  2d93
   4965  2d93		       a9 c8		      LDA	#200
   4966  2d95		       85 82		      STA	missile0x
   4967  2d97		       85 bf		      STA	missile0y
   4968  2d99				   .L0418		;  Bit1_missleOn{1} = 0
   4969  2d99
   4970  2d99		       a5 ea		      LDA	Bit1_missleOn
   4971  2d9b		       29 fd		      AND	#253
   4972  2d9d		       85 ea		      STA	Bit1_missleOn
   4973  2d9f				   .L0419		;  for Timer  =  1 to 10
   4974  2d9f
   4975  2d9f		       a9 01		      LDA	#1
   4976  2da1		       85 e4		      STA	Timer
   4977  2da3				   .L0419forTimer
   4978  2da3				   .L0420		;  next
   4979  2da3
   4980  2da3		       a5 e4		      LDA	Timer
   4981  2da5		       c9 0a		      CMP	#10
   4982  2da7
   4983  2da7		       e6 e4		      INC	Timer
   4984  2da9					      if	((* - .L0419forTimer) < 127) && ((* - .L0419forTimer) > -128)
   4985  2da9		       90 f8		      bcc	.L0419forTimer
   4986  2dab				  -	      else
   4987  2dab				  -	      bcs	.5skipL0419forTimer
   4988  2dab				  -	      jmp	.L0419forTimer
   4989  2dab				  -.5skipL0419forTimer
   4990  2dab					      endif
   4991  2dab				   .L0421		;  Points = 0
   4992  2dab
   4993  2dab		       a9 00		      LDA	#0
   4994  2dad		       85 d4		      STA	Points
   4995  2daf				   .L0422		;  Ch1_Duration  =  0
   4996  2daf
   4997  2daf		       a9 00		      LDA	#0
   4998  2db1		       85 db		      STA	Ch1_Duration
   4999  2db3				   .L0423		;  Ch1_Sound  =  0  :	AUDV1  =  0 :  AUDC1  =  0 :  AUDF1  =	0
   5000  2db3
   5001  2db3		       a9 00		      LDA	#0
   5002  2db5		       85 da		      STA	Ch1_Sound
   5003  2db7		       85 1a		      STA	AUDV1
   5004  2db9		       85 16		      STA	AUDC1
   5005  2dbb		       85 18		      STA	AUDF1
   5006  2dbd				   .L0424		;  PlayerDamage  =  1
   5007  2dbd
   5008  2dbd		       a9 01		      LDA	#1
   5009  2dbf		       85 dd		      STA	PlayerDamage
   5010  2dc1				   .L0425		;  goto __Resume
   5011  2dc1
   5012  2dc1		       4c 09 3f 	      jmp	.__Resume
   5013  2dc4
   5014  2dc4				   .
   5015  2dc4							; 
   5016  2dc4
   5017  2dc4				   .
   5018  2dc4							; 
   5019  2dc4
   5020  2dc4				   .__EnemyFire
   5021  2dc4							; __EnemyFire
   5022  2dc4
   5023  2dc4				   .L0426		;  if !Bit3_ShootorNot{3} then goto __EnemyShoot
   5024  2dc4
   5025  2dc4		       a5 ea		      LDA	Bit3_ShootorNot
   5026  2dc6		       29 08		      AND	#8
   5027  2dc8		       d0 03		      BNE	.skipL0426
   5028  2dca				   .condpart214
   5029  2dca		       4c 5b 3e 	      jmp	.__EnemyShoot
   5030  2dcd
   5031  2dcd				   .skipL0426
   5032  2dcd				   .L0427		;  if missile1y  >  170 then missile1y = 200 : 
   5033  2dcd
   5034  2dcd		       a9 aa		      LDA	#170
   5035  2dcf		       c5 c0		      CMP	missile1y
   5036  2dd1		       b0 04		      BCS	.skipL0427
   5037  2dd3				   .condpart215
   5038  2dd3		       a9 c8		      LDA	#200
   5039  2dd5		       85 c0		      STA	missile1y
   5040  2dd7				   .skipL0427
   5041  2dd7				   .L0428		;  if level  <= 5 then if !Bit4_gameover{4} then if Bit3_ShootorNot{3} then missile1y	=  missile1y  +  3
   5042  2dd7
   5043  2dd7		       a9 05		      LDA	#5
   5044  2dd9		       c5 dc		      CMP	level
   5045  2ddb		       90 13		      BCC	.skipL0428
   5046  2ddd				   .condpart216
   5047  2ddd		       a5 ea		      LDA	Bit4_gameover
   5048  2ddf		       29 10		      AND	#16
   5049  2de1		       d0 0d		      BNE	.skip216then
   5050  2de3				   .condpart217
   5051  2de3		       a5 ea		      LDA	Bit3_ShootorNot
   5052  2de5		       29 08		      AND	#8
   5053  2de7		       f0 07		      BEQ	.skip217then
   5054  2de9				   .condpart218
   5055  2de9		       a5 c0		      LDA	missile1y
   5056  2deb		       18		      CLC
   5057  2dec		       69 03		      ADC	#3
   5058  2dee		       85 c0		      STA	missile1y
   5059  2df0				   .skip217then
   5060  2df0				   .skip216then
   5061  2df0				   .skipL0428
   5062  2df0				   .L0429		;  if level  > 5 then if !Bit4_gameover{4} then if Bit3_ShootorNot{3} then missile1y  =  missile1y  +	5
   5063  2df0
   5064  2df0		       a9 05		      LDA	#5
   5065  2df2		       c5 dc		      CMP	level
   5066  2df4		       b0 13		      BCS	.skipL0429
   5067  2df6				   .condpart219
   5068  2df6		       a5 ea		      LDA	Bit4_gameover
   5069  2df8		       29 10		      AND	#16
   5070  2dfa		       d0 0d		      BNE	.skip219then
   5071  2dfc				   .condpart220
   5072  2dfc		       a5 ea		      LDA	Bit3_ShootorNot
   5073  2dfe		       29 08		      AND	#8
   5074  2e00		       f0 07		      BEQ	.skip220then
   5075  2e02				   .condpart221
   5076  2e02		       a5 c0		      LDA	missile1y
   5077  2e04		       18		      CLC
   5078  2e05		       69 05		      ADC	#5
   5079  2e07		       85 c0		      STA	missile1y
   5080  2e09				   .skip220then
   5081  2e09				   .skip219then
   5082  2e09				   .skipL0429
   5083  2e09				   .L0430		;  if missile1y  >  170 then missile1y = 200 :  Bit3_ShootorNot{3} = 0
   5084  2e09
   5085  2e09		       a9 aa		      LDA	#170
   5086  2e0b		       c5 c0		      CMP	missile1y
   5087  2e0d		       b0 0a		      BCS	.skipL0430
   5088  2e0f				   .condpart222
   5089  2e0f		       a9 c8		      LDA	#200
   5090  2e11		       85 c0		      STA	missile1y
   5091  2e13		       a5 ea		      LDA	Bit3_ShootorNot
   5092  2e15		       29 f7		      AND	#247
   5093  2e17		       85 ea		      STA	Bit3_ShootorNot
   5094  2e19				   .skipL0430
   5095  2e19				   .L0431		;  if missile1y  >  player0y - 8  &&  missile1y  <  player0y + 1 then if missile1x  >	player0x  - 8  &&  missile1x  <  player0x  + 8 then Damage  = 5  :  PlayerDamage  = 0  :  goto __EnemyScore
   5096  2e19
   5097  2e19							; complex condition detected
   5098  2e19		       a5 99		      LDA	player0y
   5099  2e1b		       38		      SEC
   5100  2e1c		       e9 08		      SBC	#8
   5101  2e1e							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   5102  2e1e		       c5 c0		      CMP	missile1y
   5103  2e20		       b0 30		      BCS	.skipL0431
   5104  2e22				   .condpart223
   5105  2e22							; complex condition detected
   5106  2e22		       a5 99		      LDA	player0y
   5107  2e24		       18		      CLC
   5108  2e25		       69 01		      ADC	#1
   5109  2e27		       48		      PHA
   5110  2e28		       ba		      TSX
   5111  2e29		       68		      PLA
   5112  2e2a		       a5 c0		      LDA	missile1y
   5113  2e2c		       d5 01		      CMP	1,x
   5114  2e2e		       b0 22		      BCS	.skip223then
   5115  2e30				   .condpart224
   5116  2e30							; complex condition detected
   5117  2e30		       a5 80		      LDA	player0x
   5118  2e32		       38		      SEC
   5119  2e33		       e9 08		      SBC	#8
   5120  2e35							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   5121  2e35		       c5 83		      CMP	missile1x
   5122  2e37		       b0 19		      BCS	.skip224then
   5123  2e39				   .condpart225
   5124  2e39							; complex condition detected
   5125  2e39		       a5 80		      LDA	player0x
   5126  2e3b		       18		      CLC
   5127  2e3c		       69 08		      ADC	#8
   5128  2e3e		       48		      PHA
   5129  2e3f		       ba		      TSX
   5130  2e40		       68		      PLA
   5131  2e41		       a5 83		      LDA	missile1x
   5132  2e43		       d5 01		      CMP	1,x
   5133  2e45		       b0 0b		      BCS	.skip225then
   5134  2e47				   .condpart226
   5135  2e47		       a9 05		      LDA	#5
   5136  2e49		       85 ed		      STA	Damage
   5137  2e4b		       a9 00		      LDA	#0
   5138  2e4d		       85 dd		      STA	PlayerDamage
   5139  2e4f		       4c d3 3e 	      jmp	.__EnemyScore
   5140  2e52
   5141  2e52				   .skip225then
   5142  2e52				   .skip224then
   5143  2e52				   .skip223then
   5144  2e52				   .skipL0431
   5145  2e52				   .L0432		;  Bit1_EnemyShootSound{1}  = 1
   5146  2e52
   5147  2e52		       a5 f1		      LDA	Bit1_EnemyShootSound
   5148  2e54		       09 02		      ORA	#2
   5149  2e56		       85 f1		      STA	Bit1_EnemyShootSound
   5150  2e58				   .
   5151  2e58							; 
   5152  2e58
   5153  2e58				   .
   5154  2e58							; 
   5155  2e58
   5156  2e58				   .L0433		;  goto __Resume
   5157  2e58
   5158  2e58		       4c 09 3f 	      jmp	.__Resume
   5159  2e5b
   5160  2e5b				   .
   5161  2e5b							; 
   5162  2e5b
   5163  2e5b				   .__EnemyShoot
   5164  2e5b							; __EnemyShoot
   5165  2e5b
   5166  2e5b				   .
   5167  2e5b							; 
   5168  2e5b
   5169  2e5b				   .L0434		;  if !Bit4_gameover{4} then if player3x - 5  <  player0x  &&	player3x + 5  >  player0x then missile1x  =  player3x  +  EnemyMissilerate  :  missile1y  =  player3y  :  Bit3_ShootorNot{3} = 1
   5170  2e5b
   5171  2e5b		       a5 ea		      LDA	Bit4_gameover
   5172  2e5d		       29 10		      AND	#16
   5173  2e5f		       d0 28		      BNE	.skipL0434
   5174  2e61				   .condpart227
   5175  2e61							; complex condition detected
   5176  2e61		       a5 92		      LDA	player3x
   5177  2e63		       38		      SEC
   5178  2e64		       e9 05		      SBC	#5
   5179  2e66							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   5180  2e66		       c5 80		      CMP	player0x
   5181  2e68		       b0 1f		      BCS	.skip227then
   5182  2e6a				   .condpart228
   5183  2e6a							; complex condition detected
   5184  2e6a		       a5 92		      LDA	player3x
   5185  2e6c		       18		      CLC
   5186  2e6d		       69 05		      ADC	#5
   5187  2e6f		       48		      PHA
   5188  2e70		       ba		      TSX
   5189  2e71		       68		      PLA
   5190  2e72		       a5 80		      LDA	player0x
   5191  2e74		       d5 01		      CMP	1,x
   5192  2e76		       b0 11		      BCS	.skip228then
   5193  2e78				   .condpart229
   5194  2e78		       a5 92		      LDA	player3x
   5195  2e7a		       18		      CLC
   5196  2e7b		       65 ef		      ADC	EnemyMissilerate
   5197  2e7d		       85 83		      STA	missile1x
   5198  2e7f		       a5 9c		      LDA	player3y
   5199  2e81		       85 c0		      STA	missile1y
   5200  2e83		       a5 ea		      LDA	Bit3_ShootorNot
   5201  2e85		       09 08		      ORA	#8
   5202  2e87		       85 ea		      STA	Bit3_ShootorNot
   5203  2e89				   .skip228then
   5204  2e89				   .skip227then
   5205  2e89				   .skipL0434
   5206  2e89				   .
   5207  2e89							; 
   5208  2e89
   5209  2e89				   .L0435		;  goto __Resume
   5210  2e89
   5211  2e89		       4c 09 3f 	      jmp	.__Resume
   5212  2e8c
   5213  2e8c				   .
   5214  2e8c							; 
   5215  2e8c
   5216  2e8c				   .__EnemyBlock
   5217  2e8c							; __EnemyBlock
   5218  2e8c
   5219  2e8c				   .L0436		;  frame  =  0
   5220  2e8c
   5221  2e8c		       a9 00		      LDA	#0
   5222  2e8e		       85 d6		      STA	frame
   5223  2e90				   .L0437		;  if joy0fire then PlayerDamage  = 0	:  Damage  =  $5  :  goto __EnemyScore
   5224  2e90
   5225  2e90		       24 0c		      bit	INPT4
   5226  2e92		       30 0b		      BMI	.skipL0437
   5227  2e94				   .condpart230
   5228  2e94		       a9 00		      LDA	#0
   5229  2e96		       85 dd		      STA	PlayerDamage
   5230  2e98		       a9 05		      LDA	#$5
   5231  2e9a		       85 ed		      STA	Damage
   5232  2e9c		       4c d3 3e 	      jmp	.__EnemyScore
   5233  2e9f
   5234  2e9f				   .skipL0437
   5235  2e9f				   .L0438		;  if !joy0left  ||  !joy0right then Points  =  10
   5236  2e9f
   5237  2e9f		       2c 80 02 	      bit	SWCHA
   5238  2ea2		       50 03		      BVC	.skipL0438
   5239  2ea4				   .condpart231
   5240  2ea4		       4c ac 3e 	      jmp	.condpart232
   5241  2ea7				   .skipL0438
   5242  2ea7		       2c 80 02 	      bit	SWCHA
   5243  2eaa		       10 04		      BPL	.skip80OR
   5244  2eac				   .condpart232
   5245  2eac		       a9 0a		      LDA	#10
   5246  2eae		       85 d4		      STA	Points
   5247  2eb0				   .skip80OR
   5248  2eb0				   .L0439		;  if joy0left  ||  joy0right then if !joy0fire then Points  =  $5 :  PlayerDamage  = 2  :  goto __Score
   5249  2eb0
   5250  2eb0		       2c 80 02 	      bit	SWCHA
   5251  2eb3		       70 03		      BVS	.skipL0439
   5252  2eb5				   .condpart233
   5253  2eb5		       4c bd 3e 	      jmp	.condpart234
   5254  2eb8				   .skipL0439
   5255  2eb8		       2c 80 02 	      bit	SWCHA
   5256  2ebb		       30 0f		      BMI	.skip81OR
   5257  2ebd				   .condpart234
   5258  2ebd		       24 0c		      bit	INPT4
   5259  2ebf		       10 0b		      BPL	.skip234then
   5260  2ec1				   .condpart235
   5261  2ec1		       a9 05		      LDA	#$5
   5262  2ec3		       85 d4		      STA	Points
   5263  2ec5		       a9 02		      LDA	#2
   5264  2ec7		       85 dd		      STA	PlayerDamage
   5265  2ec9		       4c 60 3d 	      jmp	.__Score
   5266  2ecc
   5267  2ecc				   .skip234then
   5268  2ecc				   .skip81OR
   5269  2ecc				   .L0440		;  PlayerDamage  = 1
   5270  2ecc
   5271  2ecc		       a9 01		      LDA	#1
   5272  2ece		       85 dd		      STA	PlayerDamage
   5273  2ed0				   .L0441		;  goto __Resume
   5274  2ed0
   5275  2ed0		       4c 09 3f 	      jmp	.__Resume
   5276  2ed3
   5277  2ed3				   .
   5278  2ed3							; 
   5279  2ed3
   5280  2ed3				   .__EnemyScore
   5281  2ed3							; __EnemyScore
   5282  2ed3
   5283  2ed3				   .L0442		;  if PlayerDamage  <	1 then dec PlayerHealth  =  PlayerHealth  -  Damage
   5284  2ed3
   5285  2ed3		       a5 dd		      LDA	PlayerDamage
   5286  2ed5		       c9 01		      CMP	#1
   5287  2ed7		       b0 09		      BCS	.skipL0442
   5288  2ed9				   .condpart236
   5289  2ed9		       f8		      SED
   5290  2eda		       a5 d5		      LDA	PlayerHealth
   5291  2edc		       38		      SEC
   5292  2edd		       e5 ed		      SBC	Damage
   5293  2edf		       85 d5		      STA	PlayerHealth
   5294  2ee1		       d8		      CLD
   5295  2ee2				   .skipL0442
   5296  2ee2				   .L0443		;  if PlayerHealth  <	0 then PlayerHealth  = 0
   5297  2ee2
   5298  2ee2		       a5 d5		      LDA	PlayerHealth
   5299  2ee4		       c9 00		      CMP	#0
   5300  2ee6		       b0 04		      BCS	.skipL0443
   5301  2ee8				   .condpart237
   5302  2ee8		       a9 00		      LDA	#0
   5303  2eea		       85 d5		      STA	PlayerHealth
   5304  2eec				   .skipL0443
   5305  2eec				   .L0444		;  PlayerDamage  =  1
   5306  2eec
   5307  2eec		       a9 01		      LDA	#1
   5308  2eee		       85 dd		      STA	PlayerDamage
   5309  2ef0				   .L0445		;  Points = 0
   5310  2ef0
   5311  2ef0		       a9 00		      LDA	#0
   5312  2ef2		       85 d4		      STA	Points
   5313  2ef4				   .L0446		;  missile1y  = 200 :	missile1x =  200
   5314  2ef4
   5315  2ef4		       a9 c8		      LDA	#200
   5316  2ef6		       85 c0		      STA	missile1y
   5317  2ef8		       85 83		      STA	missile1x
   5318  2efa				   .L0447		;  Bit5_hit{5} = 1
   5319  2efa
   5320  2efa		       a5 ea		      LDA	Bit5_hit
   5321  2efc		       09 20		      ORA	#32
   5322  2efe		       85 ea		      STA	Bit5_hit
   5323  2f00				   .L0448		;  Bit0_HitPlayer{0} = 1
   5324  2f00
   5325  2f00		       a5 f1		      LDA	Bit0_HitPlayer
   5326  2f02		       09 01		      ORA	#1
   5327  2f04		       85 f1		      STA	Bit0_HitPlayer
   5328  2f06				   .L0449		;  goto __Explosion
   5329  2f06
   5330  2f06		       4c 29 3c 	      jmp	.__Explosion
   5331  2f09
   5332  2f09				   .
   5333  2f09							; 
   5334  2f09
   5335  2f09				   .__Resume
   5336  2f09							; __Resume
   5337  2f09
   5338  2f09				   .
   5339  2f09							; 
   5340  2f09
   5341  2f09				   .L0450		;  drawscreen
   5342  2f09
   5343  2f09		       85 81		      sta	temp7
   5344  2f0b		       a9 3f		      lda	#>(ret_point10-1)
   5345  2f0d		       48		      pha
   5346  2f0e		       a9 20		      lda	#<(ret_point10-1)
   5347  2f10		       48		      pha
   5348  2f11		       a9 19		      lda	#>(drawscreen-1)
   5349  2f13		       48		      pha
   5350  2f14		       a9 48		      lda	#<(drawscreen-1)
   5351  2f16		       48		      pha
   5352  2f17		       a5 81		      lda	temp7
   5353  2f19		       48		      pha
   5354  2f1a		       8a		      txa
   5355  2f1b		       48		      pha
   5356  2f1c		       a2 01		      ldx	#1
   5357  2f1e		       4c ee df 	      jmp	BS_jsr
   5358  2f21				   ret_point10
   5359  2f21				   .L0451		;  PF0 = %00000000
   5360  2f21
   5361  2f21		       a9 00		      LDA	#%00000000
   5362  2f23		       85 0d		      STA	PF0
   5363  2f25				   .L0452		;  goto __Main_Loop
   5364  2f25
   5365  2f25		       4c d9 32 	      jmp	.__Main_Loop
   5366  2f28
   5367  2f28				   .
   5368  2f28							; 
   5369  2f28
   5370  2f28				   .L0453		;  bank 3
   5371  2f28
   5372  2f28					      if	ECHO2
      172 bytes of ROM space left in bank 2
   5373  2f28					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
   5374  2f28					      endif
   5375  2f28		       00 01	   ECHO2      =	1
   5376  2fd4					      ORG	$2FF4-bscode_length
   5377  2fd4					      RORG	$3FF4-bscode_length
   5378  2fd4		       a2 ff	   start_bank2 ldx	#$ff
   5379  2fd6					      ifconst	FASTFETCH	; using DPC+
   5380  2fd6		       8e 58 10 	      stx	FASTFETCH
   5381  2fd9					      endif
   5382  2fd9		       9a		      txs
   5383  2fda				  -	      if	bankswitch == 64
   5384  2fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   5385  2fda					      else
   5386  2fda		       a9 18		      lda	#>(start-1)
   5387  2fdc					      endif
   5388  2fdc		       48		      pha
   5389  2fdd		       a9 e3		      lda	#<(start-1)
   5390  2fdf		       48		      pha
   5391  2fe0		       48		      pha
   5392  2fe1		       8a		      txa
   5393  2fe2		       48		      pha
   5394  2fe3		       ba		      tsx
   5395  2fe4					      if	bankswitch != 64
   5396  2fe4		       b5 04		      lda	4,x	; get high byte of return address
   5397  2fe6		       2a		      rol
   5398  2fe7		       2a		      rol
   5399  2fe8		       2a		      rol
   5400  2fe9		       2a		      rol
   5401  2fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   5402  2fec		       aa		      tax
   5403  2fed		       e8		      inx
   5404  2fee				  -	      else
   5405  2fee				  -	      lda	4,x	; get high byte of return address
   5406  2fee				  -	      tay
   5407  2fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   5408  2fee				  -	      sta	4,x
   5409  2fee				  -	      tya
   5410  2fee				  -	      lsr
   5411  2fee				  -	      lsr
   5412  2fee				  -	      lsr
   5413  2fee				  -	      lsr
   5414  2fee				  -	      tax
   5415  2fee				  -	      inx
   5416  2fee					      endif
   5417  2fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   5418  2ff1		       68		      pla
   5419  2ff2		       aa		      tax
   5420  2ff3		       68		      pla
   5421  2ff4		       60		      rts
   5422  2ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   5423  2ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   5424  2ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   5425  2ff5					      endif
   5426  2ffc					      ORG	$2FFC
   5427  2ffc					      RORG	$3FFC
   5428  2ffc		       d4 3f		      .word.w	(start_bank2 & $ffff)
   5429  2ffe		       d4 3f		      .word.w	(start_bank2 & $ffff)
   5430  3000					      ORG	$3000
   5431  3000					      RORG	$5000
   5432  3000					      repeat	129
   5433  3000		       00		      .byte.b	0
   5432  3000					      repend
   5433  3001		       00		      .byte.b	0
   5432  3001					      repend
   5433  3002		       00		      .byte.b	0
   5432  3002					      repend
   5433  3003		       00		      .byte.b	0
   5432  3003					      repend
   5433  3004		       00		      .byte.b	0
   5432  3004					      repend
   5433  3005		       00		      .byte.b	0
   5432  3005					      repend
   5433  3006		       00		      .byte.b	0
   5432  3006					      repend
   5433  3007		       00		      .byte.b	0
   5432  3007					      repend
   5433  3008		       00		      .byte.b	0
   5432  3008					      repend
   5433  3009		       00		      .byte.b	0
   5432  3009					      repend
   5433  300a		       00		      .byte.b	0
   5432  300a					      repend
   5433  300b		       00		      .byte.b	0
   5432  300b					      repend
   5433  300c		       00		      .byte.b	0
   5432  300c					      repend
   5433  300d		       00		      .byte.b	0
   5432  300d					      repend
   5433  300e		       00		      .byte.b	0
   5432  300e					      repend
   5433  300f		       00		      .byte.b	0
   5432  300f					      repend
   5433  3010		       00		      .byte.b	0
   5432  3010					      repend
   5433  3011		       00		      .byte.b	0
   5432  3011					      repend
   5433  3012		       00		      .byte.b	0
   5432  3012					      repend
   5433  3013		       00		      .byte.b	0
   5432  3013					      repend
   5433  3014		       00		      .byte.b	0
   5432  3014					      repend
   5433  3015		       00		      .byte.b	0
   5432  3015					      repend
   5433  3016		       00		      .byte.b	0
   5432  3016					      repend
   5433  3017		       00		      .byte.b	0
   5432  3017					      repend
   5433  3018		       00		      .byte.b	0
   5432  3018					      repend
   5433  3019		       00		      .byte.b	0
   5432  3019					      repend
   5433  301a		       00		      .byte.b	0
   5432  301a					      repend
   5433  301b		       00		      .byte.b	0
   5432  301b					      repend
   5433  301c		       00		      .byte.b	0
   5432  301c					      repend
   5433  301d		       00		      .byte.b	0
   5432  301d					      repend
   5433  301e		       00		      .byte.b	0
   5432  301e					      repend
   5433  301f		       00		      .byte.b	0
   5432  301f					      repend
   5433  3020		       00		      .byte.b	0
   5432  3020					      repend
   5433  3021		       00		      .byte.b	0
   5432  3021					      repend
   5433  3022		       00		      .byte.b	0
   5432  3022					      repend
   5433  3023		       00		      .byte.b	0
   5432  3023					      repend
   5433  3024		       00		      .byte.b	0
   5432  3024					      repend
   5433  3025		       00		      .byte.b	0
   5432  3025					      repend
   5433  3026		       00		      .byte.b	0
   5432  3026					      repend
   5433  3027		       00		      .byte.b	0
   5432  3027					      repend
   5433  3028		       00		      .byte.b	0
   5432  3028					      repend
   5433  3029		       00		      .byte.b	0
   5432  3029					      repend
   5433  302a		       00		      .byte.b	0
   5432  302a					      repend
   5433  302b		       00		      .byte.b	0
   5432  302b					      repend
   5433  302c		       00		      .byte.b	0
   5432  302c					      repend
   5433  302d		       00		      .byte.b	0
   5432  302d					      repend
   5433  302e		       00		      .byte.b	0
   5432  302e					      repend
   5433  302f		       00		      .byte.b	0
   5432  302f					      repend
   5433  3030		       00		      .byte.b	0
   5432  3030					      repend
   5433  3031		       00		      .byte.b	0
   5432  3031					      repend
   5433  3032		       00		      .byte.b	0
   5432  3032					      repend
   5433  3033		       00		      .byte.b	0
   5432  3033					      repend
   5433  3034		       00		      .byte.b	0
   5432  3034					      repend
   5433  3035		       00		      .byte.b	0
   5432  3035					      repend
   5433  3036		       00		      .byte.b	0
   5432  3036					      repend
   5433  3037		       00		      .byte.b	0
   5432  3037					      repend
   5433  3038		       00		      .byte.b	0
   5432  3038					      repend
   5433  3039		       00		      .byte.b	0
   5432  3039					      repend
   5433  303a		       00		      .byte.b	0
   5432  303a					      repend
   5433  303b		       00		      .byte.b	0
   5432  303b					      repend
   5433  303c		       00		      .byte.b	0
   5432  303c					      repend
   5433  303d		       00		      .byte.b	0
   5432  303d					      repend
   5433  303e		       00		      .byte.b	0
   5432  303e					      repend
   5433  303f		       00		      .byte.b	0
   5432  303f					      repend
   5433  3040		       00		      .byte.b	0
   5432  3040					      repend
   5433  3041		       00		      .byte.b	0
   5432  3041					      repend
   5433  3042		       00		      .byte.b	0
   5432  3042					      repend
   5433  3043		       00		      .byte.b	0
   5432  3043					      repend
   5433  3044		       00		      .byte.b	0
   5432  3044					      repend
   5433  3045		       00		      .byte.b	0
   5432  3045					      repend
   5433  3046		       00		      .byte.b	0
   5432  3046					      repend
   5433  3047		       00		      .byte.b	0
   5432  3047					      repend
   5433  3048		       00		      .byte.b	0
   5432  3048					      repend
   5433  3049		       00		      .byte.b	0
   5432  3049					      repend
   5433  304a		       00		      .byte.b	0
   5432  304a					      repend
   5433  304b		       00		      .byte.b	0
   5432  304b					      repend
   5433  304c		       00		      .byte.b	0
   5432  304c					      repend
   5433  304d		       00		      .byte.b	0
   5432  304d					      repend
   5433  304e		       00		      .byte.b	0
   5432  304e					      repend
   5433  304f		       00		      .byte.b	0
   5432  304f					      repend
   5433  3050		       00		      .byte.b	0
   5432  3050					      repend
   5433  3051		       00		      .byte.b	0
   5432  3051					      repend
   5433  3052		       00		      .byte.b	0
   5432  3052					      repend
   5433  3053		       00		      .byte.b	0
   5432  3053					      repend
   5433  3054		       00		      .byte.b	0
   5432  3054					      repend
   5433  3055		       00		      .byte.b	0
   5432  3055					      repend
   5433  3056		       00		      .byte.b	0
   5432  3056					      repend
   5433  3057		       00		      .byte.b	0
   5432  3057					      repend
   5433  3058		       00		      .byte.b	0
   5432  3058					      repend
   5433  3059		       00		      .byte.b	0
   5432  3059					      repend
   5433  305a		       00		      .byte.b	0
   5432  305a					      repend
   5433  305b		       00		      .byte.b	0
   5432  305b					      repend
   5433  305c		       00		      .byte.b	0
   5432  305c					      repend
   5433  305d		       00		      .byte.b	0
   5432  305d					      repend
   5433  305e		       00		      .byte.b	0
   5432  305e					      repend
   5433  305f		       00		      .byte.b	0
   5432  305f					      repend
   5433  3060		       00		      .byte.b	0
   5432  3060					      repend
   5433  3061		       00		      .byte.b	0
   5432  3061					      repend
   5433  3062		       00		      .byte.b	0
   5432  3062					      repend
   5433  3063		       00		      .byte.b	0
   5432  3063					      repend
   5433  3064		       00		      .byte.b	0
   5432  3064					      repend
   5433  3065		       00		      .byte.b	0
   5432  3065					      repend
   5433  3066		       00		      .byte.b	0
   5432  3066					      repend
   5433  3067		       00		      .byte.b	0
   5432  3067					      repend
   5433  3068		       00		      .byte.b	0
   5432  3068					      repend
   5433  3069		       00		      .byte.b	0
   5432  3069					      repend
   5433  306a		       00		      .byte.b	0
   5432  306a					      repend
   5433  306b		       00		      .byte.b	0
   5432  306b					      repend
   5433  306c		       00		      .byte.b	0
   5432  306c					      repend
   5433  306d		       00		      .byte.b	0
   5432  306d					      repend
   5433  306e		       00		      .byte.b	0
   5432  306e					      repend
   5433  306f		       00		      .byte.b	0
   5432  306f					      repend
   5433  3070		       00		      .byte.b	0
   5432  3070					      repend
   5433  3071		       00		      .byte.b	0
   5432  3071					      repend
   5433  3072		       00		      .byte.b	0
   5432  3072					      repend
   5433  3073		       00		      .byte.b	0
   5432  3073					      repend
   5433  3074		       00		      .byte.b	0
   5432  3074					      repend
   5433  3075		       00		      .byte.b	0
   5432  3075					      repend
   5433  3076		       00		      .byte.b	0
   5432  3076					      repend
   5433  3077		       00		      .byte.b	0
   5432  3077					      repend
   5433  3078		       00		      .byte.b	0
   5432  3078					      repend
   5433  3079		       00		      .byte.b	0
   5432  3079					      repend
   5433  307a		       00		      .byte.b	0
   5432  307a					      repend
   5433  307b		       00		      .byte.b	0
   5432  307b					      repend
   5433  307c		       00		      .byte.b	0
   5432  307c					      repend
   5433  307d		       00		      .byte.b	0
   5432  307d					      repend
   5433  307e		       00		      .byte.b	0
   5432  307e					      repend
   5433  307f		       00		      .byte.b	0
   5432  307f					      repend
   5433  3080		       00		      .byte.b	0
   5434  3081					      repend
   5435  3081				   .L0454		;  temp1 = temp1
   5436  3081
   5437  3081		       a5 cb		      LDA	temp1
   5438  3083		       85 cb		      STA	temp1
   5439  3085				   .__Bank3
   5440  3085							; __Bank3
   5441  3085
   5442  3085				   .
   5443  3085							; 
   5444  3085
   5445  3085				   .__Househits
   5446  3085							; __Househits
   5447  3085
   5448  3085				   .L0455		;  if Househit = 2 then gosub __PFColors bank3
   5449  3085
   5450  3085		       a5 e1		      LDA	Househit
   5451  3087		       c9 02		      CMP	#2
   5452  3089		       d0 18		      BNE	.skipL0455
   5453  308b				   .condpart238
   5454  308b		       85 81		      sta	temp7
   5455  308d		       a9 50		      lda	#>(ret_point11-1)
   5456  308f		       48		      pha
   5457  3090		       a9 a2		      lda	#<(ret_point11-1)
   5458  3092		       48		      pha
   5459  3093		       a9 52		      lda	#>(.__PFColors-1)
   5460  3095		       48		      pha
   5461  3096		       a9 44		      lda	#<(.__PFColors-1)
   5462  3098		       48		      pha
   5463  3099		       a5 81		      lda	temp7
   5464  309b		       48		      pha
   5465  309c		       8a		      txa
   5466  309d		       48		      pha
   5467  309e		       a2 03		      ldx	#3
   5468  30a0		       4c ee df 	      jmp	BS_jsr
   5469  30a3				   ret_point11
   5470  30a3				   .skipL0455
   5471  30a3				   .L0456		;  if Househit = 3 then gosub __PFColors1 bank3
   5472  30a3
   5473  30a3		       a5 e1		      LDA	Househit
   5474  30a5		       c9 03		      CMP	#3
   5475  30a7		       d0 18		      BNE	.skipL0456
   5476  30a9				   .condpart239
   5477  30a9		       85 81		      sta	temp7
   5478  30ab		       a9 50		      lda	#>(ret_point12-1)
   5479  30ad		       48		      pha
   5480  30ae		       a9 c0		      lda	#<(ret_point12-1)
   5481  30b0		       48		      pha
   5482  30b1		       a9 52		      lda	#>(.__PFColors1-1)
   5483  30b3		       48		      pha
   5484  30b4		       a9 7f		      lda	#<(.__PFColors1-1)
   5485  30b6		       48		      pha
   5486  30b7		       a5 81		      lda	temp7
   5487  30b9		       48		      pha
   5488  30ba		       8a		      txa
   5489  30bb		       48		      pha
   5490  30bc		       a2 03		      ldx	#3
   5491  30be		       4c ee df 	      jmp	BS_jsr
   5492  30c1				   ret_point12
   5493  30c1				   .skipL0456
   5494  30c1				   .L0457		;  if Househit = 4 then gosub __PFColors2 bank3
   5495  30c1
   5496  30c1		       a5 e1		      LDA	Househit
   5497  30c3		       c9 04		      CMP	#4
   5498  30c5		       d0 18		      BNE	.skipL0457
   5499  30c7				   .condpart240
   5500  30c7		       85 81		      sta	temp7
   5501  30c9		       a9 50		      lda	#>(ret_point13-1)
   5502  30cb		       48		      pha
   5503  30cc		       a9 de		      lda	#<(ret_point13-1)
   5504  30ce		       48		      pha
   5505  30cf		       a9 52		      lda	#>(.__PFColors2-1)
   5506  30d1		       48		      pha
   5507  30d2		       a9 ba		      lda	#<(.__PFColors2-1)
   5508  30d4		       48		      pha
   5509  30d5		       a5 81		      lda	temp7
   5510  30d7		       48		      pha
   5511  30d8		       8a		      txa
   5512  30d9		       48		      pha
   5513  30da		       a2 03		      ldx	#3
   5514  30dc		       4c ee df 	      jmp	BS_jsr
   5515  30df				   ret_point13
   5516  30df				   .skipL0457
   5517  30df				   .L0458		;  if Househit = 5 then gosub __PFColors3 bank3
   5518  30df
   5519  30df		       a5 e1		      LDA	Househit
   5520  30e1		       c9 05		      CMP	#5
   5521  30e3		       d0 18		      BNE	.skipL0458
   5522  30e5				   .condpart241
   5523  30e5		       85 81		      sta	temp7
   5524  30e7		       a9 50		      lda	#>(ret_point14-1)
   5525  30e9		       48		      pha
   5526  30ea		       a9 fc		      lda	#<(ret_point14-1)
   5527  30ec		       48		      pha
   5528  30ed		       a9 52		      lda	#>(.__PFColors3-1)
   5529  30ef		       48		      pha
   5530  30f0		       a9 f5		      lda	#<(.__PFColors3-1)
   5531  30f2		       48		      pha
   5532  30f3		       a5 81		      lda	temp7
   5533  30f5		       48		      pha
   5534  30f6		       8a		      txa
   5535  30f7		       48		      pha
   5536  30f8		       a2 03		      ldx	#3
   5537  30fa		       4c ee df 	      jmp	BS_jsr
   5538  30fd				   ret_point14
   5539  30fd				   .skipL0458
   5540  30fd				   .L0459		;  if Househit = 6 then gosub __PFColors4 bank3
   5541  30fd
   5542  30fd		       a5 e1		      LDA	Househit
   5543  30ff		       c9 06		      CMP	#6
   5544  3101		       d0 18		      BNE	.skipL0459
   5545  3103				   .condpart242
   5546  3103		       85 81		      sta	temp7
   5547  3105		       a9 51		      lda	#>(ret_point15-1)
   5548  3107		       48		      pha
   5549  3108		       a9 1a		      lda	#<(ret_point15-1)
   5550  310a		       48		      pha
   5551  310b		       a9 53		      lda	#>(.__PFColors4-1)
   5552  310d		       48		      pha
   5553  310e		       a9 34		      lda	#<(.__PFColors4-1)
   5554  3110		       48		      pha
   5555  3111		       a5 81		      lda	temp7
   5556  3113		       48		      pha
   5557  3114		       8a		      txa
   5558  3115		       48		      pha
   5559  3116		       a2 03		      ldx	#3
   5560  3118		       4c ee df 	      jmp	BS_jsr
   5561  311b				   ret_point15
   5562  311b				   .skipL0459
   5563  311b				   .L0460		;  if Househit = 7 then gosub __PFColors5 bank3
   5564  311b
   5565  311b		       a5 e1		      LDA	Househit
   5566  311d		       c9 07		      CMP	#7
   5567  311f		       d0 18		      BNE	.skipL0460
   5568  3121				   .condpart243
   5569  3121		       85 81		      sta	temp7
   5570  3123		       a9 51		      lda	#>(ret_point16-1)
   5571  3125		       48		      pha
   5572  3126		       a9 38		      lda	#<(ret_point16-1)
   5573  3128		       48		      pha
   5574  3129		       a9 53		      lda	#>(.__PFColors5-1)
   5575  312b		       48		      pha
   5576  312c		       a9 6f		      lda	#<(.__PFColors5-1)
   5577  312e		       48		      pha
   5578  312f		       a5 81		      lda	temp7
   5579  3131		       48		      pha
   5580  3132		       8a		      txa
   5581  3133		       48		      pha
   5582  3134		       a2 03		      ldx	#3
   5583  3136		       4c ee df 	      jmp	BS_jsr
   5584  3139				   ret_point16
   5585  3139				   .skipL0460
   5586  3139				   .L0461		;  if Househit = 8 then gosub __PFColors6 bank3
   5587  3139
   5588  3139		       a5 e1		      LDA	Househit
   5589  313b		       c9 08		      CMP	#8
   5590  313d		       d0 18		      BNE	.skipL0461
   5591  313f				   .condpart244
   5592  313f		       85 81		      sta	temp7
   5593  3141		       a9 51		      lda	#>(ret_point17-1)
   5594  3143		       48		      pha
   5595  3144		       a9 56		      lda	#<(ret_point17-1)
   5596  3146		       48		      pha
   5597  3147		       a9 53		      lda	#>(.__PFColors6-1)
   5598  3149		       48		      pha
   5599  314a		       a9 9f		      lda	#<(.__PFColors6-1)
   5600  314c		       48		      pha
   5601  314d		       a5 81		      lda	temp7
   5602  314f		       48		      pha
   5603  3150		       8a		      txa
   5604  3151		       48		      pha
   5605  3152		       a2 03		      ldx	#3
   5606  3154		       4c ee df 	      jmp	BS_jsr
   5607  3157				   ret_point17
   5608  3157				   .skipL0461
   5609  3157				   .L0462		;  if Househit = 9 then gosub __PFColors7 bank3
   5610  3157
   5611  3157		       a5 e1		      LDA	Househit
   5612  3159		       c9 09		      CMP	#9
   5613  315b		       d0 18		      BNE	.skipL0462
   5614  315d				   .condpart245
   5615  315d		       85 81		      sta	temp7
   5616  315f		       a9 51		      lda	#>(ret_point18-1)
   5617  3161		       48		      pha
   5618  3162		       a9 74		      lda	#<(ret_point18-1)
   5619  3164		       48		      pha
   5620  3165		       a9 53		      lda	#>(.__PFColors7-1)
   5621  3167		       48		      pha
   5622  3168		       a9 de		      lda	#<(.__PFColors7-1)
   5623  316a		       48		      pha
   5624  316b		       a5 81		      lda	temp7
   5625  316d		       48		      pha
   5626  316e		       8a		      txa
   5627  316f		       48		      pha
   5628  3170		       a2 03		      ldx	#3
   5629  3172		       4c ee df 	      jmp	BS_jsr
   5630  3175				   ret_point18
   5631  3175				   .skipL0462
   5632  3175				   .L0463		;  if Househit = 10 then gosub __PFColors8 bank3
   5633  3175
   5634  3175		       a5 e1		      LDA	Househit
   5635  3177		       c9 0a		      CMP	#10
   5636  3179		       d0 18		      BNE	.skipL0463
   5637  317b				   .condpart246
   5638  317b		       85 81		      sta	temp7
   5639  317d		       a9 51		      lda	#>(ret_point19-1)
   5640  317f		       48		      pha
   5641  3180		       a9 92		      lda	#<(ret_point19-1)
   5642  3182		       48		      pha
   5643  3183		       a9 54		      lda	#>(.__PFColors8-1)
   5644  3185		       48		      pha
   5645  3186		       a9 0e		      lda	#<(.__PFColors8-1)
   5646  3188		       48		      pha
   5647  3189		       a5 81		      lda	temp7
   5648  318b		       48		      pha
   5649  318c		       8a		      txa
   5650  318d		       48		      pha
   5651  318e		       a2 03		      ldx	#3
   5652  3190		       4c ee df 	      jmp	BS_jsr
   5653  3193				   ret_point19
   5654  3193				   .skipL0463
   5655  3193				   .L0464		;  if Househit = 11 then gosub __PFColors9 bank3
   5656  3193
   5657  3193		       a5 e1		      LDA	Househit
   5658  3195		       c9 0b		      CMP	#11
   5659  3197		       d0 18		      BNE	.skipL0464
   5660  3199				   .condpart247
   5661  3199		       85 81		      sta	temp7
   5662  319b		       a9 51		      lda	#>(ret_point20-1)
   5663  319d		       48		      pha
   5664  319e		       a9 b0		      lda	#<(ret_point20-1)
   5665  31a0		       48		      pha
   5666  31a1		       a9 54		      lda	#>(.__PFColors9-1)
   5667  31a3		       48		      pha
   5668  31a4		       a9 3e		      lda	#<(.__PFColors9-1)
   5669  31a6		       48		      pha
   5670  31a7		       a5 81		      lda	temp7
   5671  31a9		       48		      pha
   5672  31aa		       8a		      txa
   5673  31ab		       48		      pha
   5674  31ac		       a2 03		      ldx	#3
   5675  31ae		       4c ee df 	      jmp	BS_jsr
   5676  31b1				   ret_point20
   5677  31b1				   .skipL0464
   5678  31b1				   .L0465		;  if Househit = 12 then gosub __PFColors10 bank3
   5679  31b1
   5680  31b1		       a5 e1		      LDA	Househit
   5681  31b3		       c9 0c		      CMP	#12
   5682  31b5		       d0 18		      BNE	.skipL0465
   5683  31b7				   .condpart248
   5684  31b7		       85 81		      sta	temp7
   5685  31b9		       a9 51		      lda	#>(ret_point21-1)
   5686  31bb		       48		      pha
   5687  31bc		       a9 ce		      lda	#<(ret_point21-1)
   5688  31be		       48		      pha
   5689  31bf		       a9 54		      lda	#>(.__PFColors10-1)
   5690  31c1		       48		      pha
   5691  31c2		       a9 6e		      lda	#<(.__PFColors10-1)
   5692  31c4		       48		      pha
   5693  31c5		       a5 81		      lda	temp7
   5694  31c7		       48		      pha
   5695  31c8		       8a		      txa
   5696  31c9		       48		      pha
   5697  31ca		       a2 03		      ldx	#3
   5698  31cc		       4c ee df 	      jmp	BS_jsr
   5699  31cf				   ret_point21
   5700  31cf				   .skipL0465
   5701  31cf				   .L0466		;  return
   5702  31cf
   5703  31cf		       ba		      tsx
   5704  31d0		       b5 02		      lda	2,x	; check return address
   5705  31d2		       49 51		      eor	#(>*)	; vs. current PCH
   5706  31d4		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5707  31d6		       f0 03		      beq	*+5	; if equal, do normal return
   5708  31d8		       4c e0 df 	      JMP	BS_return
   5709  31db		       60		      RTS
   5710  31dc				   .__Playfield1
   5711  31dc							; __Playfield1
   5712  31dc
   5713  31dc				   .
   5714  31dc							; 
   5715  31dc
   5716  31dc				   .L0467		;  if Bit4_gameover{4} then goto __GameOver bank4
   5717  31dc
   5718  31dc		       a5 ea		      LDA	Bit4_gameover
   5719  31de		       29 10		      AND	#16
   5720  31e0		       f0 12		      BEQ	.skipL0467
   5721  31e2				   .condpart249
   5722  31e2		       85 81		      sta	temp7
   5723  31e4		       a9 76		      lda	#>(.__GameOver-1)
   5724  31e6		       48		      pha
   5725  31e7		       a9 a2		      lda	#<(.__GameOver-1)
   5726  31e9		       48		      pha
   5727  31ea		       a5 81		      lda	temp7
   5728  31ec		       48		      pha
   5729  31ed		       8a		      txa
   5730  31ee		       48		      pha
   5731  31ef		       a2 04		      ldx	#4
   5732  31f1		       4c ee df 	      jmp	BS_jsr
   5733  31f4				   .skipL0467
   5734  31f4				   .
   5735  31f4							; 
   5736  31f4
   5737  31f4				   ._PlayfieldLevel1
   5738  31f4							; _PlayfieldLevel1
   5739  31f4
   5740  31f4				   .L0468		;  playfield:
   5741  31f4
   5742  31f4		       a0 58		      ldy	#88
   5743  31f6		       a9 a8		      LDA	#<PF_data1
   5744  31f8		       a2 61		      LDX	#((>PF_data1) & $0f) | (((>PF_data1) / 2) & $70)
   5745  31fa		       85 81		      sta	temp7
   5746  31fc		       a9 52		      lda	#>(ret_point22-1)
   5747  31fe		       48		      pha
   5748  31ff		       a9 11		      lda	#<(ret_point22-1)
   5749  3201		       48		      pha
   5750  3202		       a9 1e		      lda	#>(pfsetup-1)
   5751  3204		       48		      pha
   5752  3205		       a9 8c		      lda	#<(pfsetup-1)
   5753  3207		       48		      pha
   5754  3208		       a5 81		      lda	temp7
   5755  320a		       48		      pha
   5756  320b		       8a		      txa
   5757  320c		       48		      pha
   5758  320d		       a2 01		      ldx	#1
   5759  320f		       4c ee df 	      jmp	BS_jsr
   5760  3212				   ret_point22
   5761  3212				   .
   5762  3212							; 
   5763  3212
   5764  3212				   .L0469		;  goto __Colors
   5765  3212
   5766  3212		       4c 15 52 	      jmp	.__Colors
   5767  3215
   5768  3215				   .
   5769  3215							; 
   5770  3215
   5771  3215				   .__Colors
   5772  3215							; __Colors
   5773  3215
   5774  3215				   .L0470		;  pfcolors:
   5775  3215
   5776  3215		       a9 08		      LDA	#<PFCOLS
   5777  3217		       8d 50 10 	      STA	DF0LOW
   5778  321a		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5779  321c		       8d 68 10 	      STA	DF0HI
   5780  321f		       a9 08		      LDA	#<playfieldcolorL0470
   5781  3221		       8d 59 10 	      STA	PARAMETER
   5782  3224		       a9 63		      LDA	#((>playfieldcolorL0470) & $0f) | (((>playfieldcolorL0470) / 2) & $70)
   5783  3226		       8d 59 10 	      STA	PARAMETER
   5784  3229		       a9 00		      LDA	#0
   5785  322b		       8d 59 10 	      STA	PARAMETER
   5786  322e		       a9 58		      LDA	#88
   5787  3230		       8d 59 10 	      STA	PARAMETER
   5788  3233		       a9 01		      LDA	#1
   5789  3235		       8d 5a 10 	      STA	CALLFUNCTION
   5790  3238				   .L0471		;  return
   5791  3238
   5792  3238		       ba		      tsx
   5793  3239		       b5 02		      lda	2,x	; check return address
   5794  323b		       49 52		      eor	#(>*)	; vs. current PCH
   5795  323d		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5796  323f		       f0 03		      beq	*+5	; if equal, do normal return
   5797  3241		       4c e0 df 	      JMP	BS_return
   5798  3244		       60		      RTS
   5799  3245				   .
   5800  3245							; 
   5801  3245
   5802  3245				   .__PFColors
   5803  3245							; __PFColors
   5804  3245
   5805  3245				   .
   5806  3245							; 
   5807  3245
   5808  3245				   .L0472		;  player5x  = LEdge + 5  :  player5y	= 114
   5809  3245
   5810  3245		       a9 47		      LDA	#LEdge
   5811  3247		       18		      CLC
   5812  3248		       69 05		      ADC	#5
   5813  324a		       85 94		      STA	player5x
   5814  324c		       a9 72		      LDA	#114
   5815  324e		       85 9e		      STA	player5y
   5816  3250				   .
   5817  3250							; 
   5818  3250
   5819  3250				   .L0473		;  pfcolors:
   5820  3250
   5821  3250		       a9 08		      LDA	#<PFCOLS
   5822  3252		       8d 50 10 	      STA	DF0LOW
   5823  3255		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5824  3257		       8d 68 10 	      STA	DF0HI
   5825  325a		       a9 60		      LDA	#<playfieldcolorL0473
   5826  325c		       8d 59 10 	      STA	PARAMETER
   5827  325f		       a9 63		      LDA	#((>playfieldcolorL0473) & $0f) | (((>playfieldcolorL0473) / 2) & $70)
   5828  3261		       8d 59 10 	      STA	PARAMETER
   5829  3264		       a9 00		      LDA	#0
   5830  3266		       8d 59 10 	      STA	PARAMETER
   5831  3269		       a9 58		      LDA	#88
   5832  326b		       8d 59 10 	      STA	PARAMETER
   5833  326e		       a9 01		      LDA	#1
   5834  3270		       8d 5a 10 	      STA	CALLFUNCTION
   5835  3273				   .L0474		;  return
   5836  3273
   5837  3273		       ba		      tsx
   5838  3274		       b5 02		      lda	2,x	; check return address
   5839  3276		       49 52		      eor	#(>*)	; vs. current PCH
   5840  3278		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5841  327a		       f0 03		      beq	*+5	; if equal, do normal return
   5842  327c		       4c e0 df 	      JMP	BS_return
   5843  327f		       60		      RTS
   5844  3280				   .__PFColors1
   5845  3280							; __PFColors1
   5846  3280
   5847  3280				   .L0475		;  player5x  = LEdge + 7 :  player5y  = 114
   5848  3280
   5849  3280		       a9 47		      LDA	#LEdge
   5850  3282		       18		      CLC
   5851  3283		       69 07		      ADC	#7
   5852  3285		       85 94		      STA	player5x
   5853  3287		       a9 72		      LDA	#114
   5854  3289		       85 9e		      STA	player5y
   5855  328b				   .
   5856  328b							; 
   5857  328b
   5858  328b				   .L0476		;  pfcolors:
   5859  328b
   5860  328b		       a9 08		      LDA	#<PFCOLS
   5861  328d		       8d 50 10 	      STA	DF0LOW
   5862  3290		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5863  3292		       8d 68 10 	      STA	DF0HI
   5864  3295		       a9 b8		      LDA	#<playfieldcolorL0476
   5865  3297		       8d 59 10 	      STA	PARAMETER
   5866  329a		       a9 63		      LDA	#((>playfieldcolorL0476) & $0f) | (((>playfieldcolorL0476) / 2) & $70)
   5867  329c		       8d 59 10 	      STA	PARAMETER
   5868  329f		       a9 00		      LDA	#0
   5869  32a1		       8d 59 10 	      STA	PARAMETER
   5870  32a4		       a9 58		      LDA	#88
   5871  32a6		       8d 59 10 	      STA	PARAMETER
   5872  32a9		       a9 01		      LDA	#1
   5873  32ab		       8d 5a 10 	      STA	CALLFUNCTION
   5874  32ae				   .L0477		;  return
   5875  32ae
   5876  32ae		       ba		      tsx
   5877  32af		       b5 02		      lda	2,x	; check return address
   5878  32b1		       49 52		      eor	#(>*)	; vs. current PCH
   5879  32b3		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5880  32b5		       f0 03		      beq	*+5	; if equal, do normal return
   5881  32b7		       4c e0 df 	      JMP	BS_return
   5882  32ba		       60		      RTS
   5883  32bb				   .__PFColors2
   5884  32bb							; __PFColors2
   5885  32bb
   5886  32bb				   .L0478		;  player5x  = LEdge +  5 :  player5y	= 114
   5887  32bb
   5888  32bb		       a9 47		      LDA	#LEdge
   5889  32bd		       18		      CLC
   5890  32be		       69 05		      ADC	#5
   5891  32c0		       85 94		      STA	player5x
   5892  32c2		       a9 72		      LDA	#114
   5893  32c4		       85 9e		      STA	player5y
   5894  32c6				   .
   5895  32c6							; 
   5896  32c6
   5897  32c6				   .L0479		;  pfcolors:
   5898  32c6
   5899  32c6		       a9 08		      LDA	#<PFCOLS
   5900  32c8		       8d 50 10 	      STA	DF0LOW
   5901  32cb		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5902  32cd		       8d 68 10 	      STA	DF0HI
   5903  32d0		       a9 10		      LDA	#<playfieldcolorL0479
   5904  32d2		       8d 59 10 	      STA	PARAMETER
   5905  32d5		       a9 64		      LDA	#((>playfieldcolorL0479) & $0f) | (((>playfieldcolorL0479) / 2) & $70)
   5906  32d7		       8d 59 10 	      STA	PARAMETER
   5907  32da		       a9 00		      LDA	#0
   5908  32dc		       8d 59 10 	      STA	PARAMETER
   5909  32df		       a9 58		      LDA	#88
   5910  32e1		       8d 59 10 	      STA	PARAMETER
   5911  32e4		       a9 01		      LDA	#1
   5912  32e6		       8d 5a 10 	      STA	CALLFUNCTION
   5913  32e9				   .L0480		;  return
   5914  32e9
   5915  32e9		       ba		      tsx
   5916  32ea		       b5 02		      lda	2,x	; check return address
   5917  32ec		       49 52		      eor	#(>*)	; vs. current PCH
   5918  32ee		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5919  32f0		       f0 03		      beq	*+5	; if equal, do normal return
   5920  32f2		       4c e0 df 	      JMP	BS_return
   5921  32f5		       60		      RTS
   5922  32f6				   .
   5923  32f6							; 
   5924  32f6
   5925  32f6				   .__PFColors3
   5926  32f6							; __PFColors3
   5927  32f6
   5928  32f6				   .L0481		;  NUSIZ5  =  $5
   5929  32f6
   5930  32f6		       a9 05		      LDA	#$5
   5931  32f8		       85 b3		      STA	NUSIZ5
   5932  32fa				   .L0482		;  player5x  = LEdge +  5 :  player5y	= 114
   5933  32fa
   5934  32fa		       a9 47		      LDA	#LEdge
   5935  32fc		       18		      CLC
   5936  32fd		       69 05		      ADC	#5
   5937  32ff		       85 94		      STA	player5x
   5938  3301		       a9 72		      LDA	#114
   5939  3303		       85 9e		      STA	player5y
   5940  3305				   .
   5941  3305							; 
   5942  3305
   5943  3305				   .L0483		;  pfcolors:
   5944  3305
   5945  3305		       a9 08		      LDA	#<PFCOLS
   5946  3307		       8d 50 10 	      STA	DF0LOW
   5947  330a		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5948  330c		       8d 68 10 	      STA	DF0HI
   5949  330f		       a9 68		      LDA	#<playfieldcolorL0483
   5950  3311		       8d 59 10 	      STA	PARAMETER
   5951  3314		       a9 64		      LDA	#((>playfieldcolorL0483) & $0f) | (((>playfieldcolorL0483) / 2) & $70)
   5952  3316		       8d 59 10 	      STA	PARAMETER
   5953  3319		       a9 00		      LDA	#0
   5954  331b		       8d 59 10 	      STA	PARAMETER
   5955  331e		       a9 58		      LDA	#88
   5956  3320		       8d 59 10 	      STA	PARAMETER
   5957  3323		       a9 01		      LDA	#1
   5958  3325		       8d 5a 10 	      STA	CALLFUNCTION
   5959  3328				   .L0484		;  return
   5960  3328
   5961  3328		       ba		      tsx
   5962  3329		       b5 02		      lda	2,x	; check return address
   5963  332b		       49 53		      eor	#(>*)	; vs. current PCH
   5964  332d		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5965  332f		       f0 03		      beq	*+5	; if equal, do normal return
   5966  3331		       4c e0 df 	      JMP	BS_return
   5967  3334		       60		      RTS
   5968  3335				   .
   5969  3335							; 
   5970  3335
   5971  3335				   .__PFColors4
   5972  3335							; __PFColors4
   5973  3335
   5974  3335				   .L0485		;  player5x  = LEdge +  15 :  player5y  = 114
   5975  3335
   5976  3335		       a9 47		      LDA	#LEdge
   5977  3337		       18		      CLC
   5978  3338		       69 0f		      ADC	#15
   5979  333a		       85 94		      STA	player5x
   5980  333c		       a9 72		      LDA	#114
   5981  333e		       85 9e		      STA	player5y
   5982  3340				   .
   5983  3340							; 
   5984  3340
   5985  3340				   .L0486		;  pfcolors:
   5986  3340
   5987  3340		       a9 08		      LDA	#<PFCOLS
   5988  3342		       8d 50 10 	      STA	DF0LOW
   5989  3345		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5990  3347		       8d 68 10 	      STA	DF0HI
   5991  334a		       a9 c0		      LDA	#<playfieldcolorL0486
   5992  334c		       8d 59 10 	      STA	PARAMETER
   5993  334f		       a9 64		      LDA	#((>playfieldcolorL0486) & $0f) | (((>playfieldcolorL0486) / 2) & $70)
   5994  3351		       8d 59 10 	      STA	PARAMETER
   5995  3354		       a9 00		      LDA	#0
   5996  3356		       8d 59 10 	      STA	PARAMETER
   5997  3359		       a9 58		      LDA	#88
   5998  335b		       8d 59 10 	      STA	PARAMETER
   5999  335e		       a9 01		      LDA	#1
   6000  3360		       8d 5a 10 	      STA	CALLFUNCTION
   6001  3363				   .L0487		;  return
   6002  3363
   6003  3363		       ba		      tsx
   6004  3364		       b5 02		      lda	2,x	; check return address
   6005  3366		       49 53		      eor	#(>*)	; vs. current PCH
   6006  3368		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   6007  336a		       f0 03		      beq	*+5	; if equal, do normal return
   6008  336c		       4c e0 df 	      JMP	BS_return
   6009  336f		       60		      RTS
   6010  3370				   .
   6011  3370							; 
   6012  3370
   6013  3370				   .__PFColors5
   6014  3370							; __PFColors5
   6015  3370
   6016  3370				   .L0488		;  pfcolors:
   6017  3370
   6018  3370		       a9 08		      LDA	#<PFCOLS
   6019  3372		       8d 50 10 	      STA	DF0LOW
   6020  3375		       a9 0a		      LDA	#(>PFCOLS) & $0F
   6021  3377		       8d 68 10 	      STA	DF0HI
   6022  337a		       a9 18		      LDA	#<playfieldcolorL0488
   6023  337c		       8d 59 10 	      STA	PARAMETER
   6024  337f		       a9 65		      LDA	#((>playfieldcolorL0488) & $0f) | (((>playfieldcolorL0488) / 2) & $70)
   6025  3381		       8d 59 10 	      STA	PARAMETER
   6026  3384		       a9 00		      LDA	#0
   6027  3386		       8d 59 10 	      STA	PARAMETER
   6028  3389		       a9 58		      LDA	#88
   6029  338b		       8d 59 10 	      STA	PARAMETER
   6030  338e		       a9 01		      LDA	#1
   6031  3390		       8d 5a 10 	      STA	CALLFUNCTION
   6032  3393				   .L0489		;  return
   6033  3393
   6034  3393		       ba		      tsx
   6035  3394		       b5 02		      lda	2,x	; check return address
   6036  3396		       49 53		      eor	#(>*)	; vs. current PCH
   6037  3398		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   6038  339a		       f0 03		      beq	*+5	; if equal, do normal return
   6039  339c		       4c e0 df 	      JMP	BS_return
   6040  339f		       60		      RTS
   6041  33a0				   .
   6042  33a0							; 
   6043  33a0
   6044  33a0				   .__PFColors6
   6045  33a0							; __PFColors6
   6046  33a0
   6047  33a0				   .L0490		;  NUSIZ5 = $7
   6048  33a0
   6049  33a0		       a9 07		      LDA	#$7
   6050  33a2		       85 b3		      STA	NUSIZ5
   6051  33a4				   .L0491		;  player5x  = LEdge + 7 :  player5y  = 114
   6052  33a4
   6053  33a4		       a9 47		      LDA	#LEdge
   6054  33a6		       18		      CLC
   6055  33a7		       69 07		      ADC	#7
   6056  33a9		       85 94		      STA	player5x
   6057  33ab		       a9 72		      LDA	#114
   6058  33ad		       85 9e		      STA	player5y
   6059  33af				   .L0492		;  pfcolors:
   6060  33af
   6061  33af		       a9 08		      LDA	#<PFCOLS
   6062  33b1		       8d 50 10 	      STA	DF0LOW
   6063  33b4		       a9 0a		      LDA	#(>PFCOLS) & $0F
   6064  33b6		       8d 68 10 	      STA	DF0HI
   6065  33b9		       a9 70		      LDA	#<playfieldcolorL0492
   6066  33bb		       8d 59 10 	      STA	PARAMETER
   6067  33be		       a9 65		      LDA	#((>playfieldcolorL0492) & $0f) | (((>playfieldcolorL0492) / 2) & $70)
   6068  33c0		       8d 59 10 	      STA	PARAMETER
   6069  33c3		       a9 00		      LDA	#0
   6070  33c5		       8d 59 10 	      STA	PARAMETER
   6071  33c8		       a9 58		      LDA	#88
   6072  33ca		       8d 59 10 	      STA	PARAMETER
   6073  33cd		       a9 01		      LDA	#1
   6074  33cf		       8d 5a 10 	      STA	CALLFUNCTION
   6075  33d2				   .L0493		;  return
   6076  33d2
   6077  33d2		       ba		      tsx
   6078  33d3		       b5 02		      lda	2,x	; check return address
   6079  33d5		       49 53		      eor	#(>*)	; vs. current PCH
   6080  33d7		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   6081  33d9		       f0 03		      beq	*+5	; if equal, do normal return
   6082  33db		       4c e0 df 	      JMP	BS_return
   6083  33de		       60		      RTS
   6084  33df				   .
   6085  33df							; 
   6086  33df
   6087  33df				   .__PFColors7
   6088  33df							; __PFColors7
   6089  33df
   6090  33df				   .L0494		;  pfcolors:
   6091  33df
   6092  33df		       a9 08		      LDA	#<PFCOLS
   6093  33e1		       8d 50 10 	      STA	DF0LOW
   6094  33e4		       a9 0a		      LDA	#(>PFCOLS) & $0F
   6095  33e6		       8d 68 10 	      STA	DF0HI
   6096  33e9		       a9 c8		      LDA	#<playfieldcolorL0494
   6097  33eb		       8d 59 10 	      STA	PARAMETER
   6098  33ee		       a9 65		      LDA	#((>playfieldcolorL0494) & $0f) | (((>playfieldcolorL0494) / 2) & $70)
   6099  33f0		       8d 59 10 	      STA	PARAMETER
   6100  33f3		       a9 00		      LDA	#0
   6101  33f5		       8d 59 10 	      STA	PARAMETER
   6102  33f8		       a9 58		      LDA	#88
   6103  33fa		       8d 59 10 	      STA	PARAMETER
   6104  33fd		       a9 01		      LDA	#1
   6105  33ff		       8d 5a 10 	      STA	CALLFUNCTION
   6106  3402				   .L0495		;  return
   6107  3402
   6108  3402		       ba		      tsx
   6109  3403		       b5 02		      lda	2,x	; check return address
   6110  3405		       49 54		      eor	#(>*)	; vs. current PCH
   6111  3407		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   6112  3409		       f0 03		      beq	*+5	; if equal, do normal return
   6113  340b		       4c e0 df 	      JMP	BS_return
   6114  340e		       60		      RTS
   6115  340f				   .
   6116  340f							; 
   6117  340f
   6118  340f				   .__PFColors8
   6119  340f							; __PFColors8
   6120  340f
   6121  340f				   .L0496		;  pfcolors:
   6122  340f
   6123  340f		       a9 08		      LDA	#<PFCOLS
   6124  3411		       8d 50 10 	      STA	DF0LOW
   6125  3414		       a9 0a		      LDA	#(>PFCOLS) & $0F
   6126  3416		       8d 68 10 	      STA	DF0HI
   6127  3419		       a9 20		      LDA	#<playfieldcolorL0496
   6128  341b		       8d 59 10 	      STA	PARAMETER
   6129  341e		       a9 66		      LDA	#((>playfieldcolorL0496) & $0f) | (((>playfieldcolorL0496) / 2) & $70)
   6130  3420		       8d 59 10 	      STA	PARAMETER
   6131  3423		       a9 00		      LDA	#0
   6132  3425		       8d 59 10 	      STA	PARAMETER
   6133  3428		       a9 58		      LDA	#88
   6134  342a		       8d 59 10 	      STA	PARAMETER
   6135  342d		       a9 01		      LDA	#1
   6136  342f		       8d 5a 10 	      STA	CALLFUNCTION
   6137  3432				   .
   6138  3432							; 
   6139  3432
   6140  3432				   .L0497		;  return
   6141  3432
   6142  3432		       ba		      tsx
   6143  3433		       b5 02		      lda	2,x	; check return address
   6144  3435		       49 54		      eor	#(>*)	; vs. current PCH
   6145  3437		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   6146  3439		       f0 03		      beq	*+5	; if equal, do normal return
   6147  343b		       4c e0 df 	      JMP	BS_return
   6148  343e		       60		      RTS
   6149  343f				   .__PFColors9
   6150  343f							; __PFColors9
   6151  343f
   6152  343f				   .L0498		;  pfcolors:
   6153  343f
   6154  343f		       a9 08		      LDA	#<PFCOLS
   6155  3441		       8d 50 10 	      STA	DF0LOW
   6156  3444		       a9 0a		      LDA	#(>PFCOLS) & $0F
   6157  3446		       8d 68 10 	      STA	DF0HI
   6158  3449		       a9 78		      LDA	#<playfieldcolorL0498
   6159  344b		       8d 59 10 	      STA	PARAMETER
   6160  344e		       a9 66		      LDA	#((>playfieldcolorL0498) & $0f) | (((>playfieldcolorL0498) / 2) & $70)
   6161  3450		       8d 59 10 	      STA	PARAMETER
   6162  3453		       a9 00		      LDA	#0
   6163  3455		       8d 59 10 	      STA	PARAMETER
   6164  3458		       a9 58		      LDA	#88
   6165  345a		       8d 59 10 	      STA	PARAMETER
   6166  345d		       a9 01		      LDA	#1
   6167  345f		       8d 5a 10 	      STA	CALLFUNCTION
   6168  3462				   .L0499		;  return
   6169  3462
   6170  3462		       ba		      tsx
   6171  3463		       b5 02		      lda	2,x	; check return address
   6172  3465		       49 54		      eor	#(>*)	; vs. current PCH
   6173  3467		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   6174  3469		       f0 03		      beq	*+5	; if equal, do normal return
   6175  346b		       4c e0 df 	      JMP	BS_return
   6176  346e		       60		      RTS
   6177  346f				   .
   6178  346f							; 
   6179  346f
   6180  346f				   .__PFColors10
   6181  346f							; __PFColors10
   6182  346f
   6183  346f				   .L0500		;  pfcolors:
   6184  346f
   6185  346f		       a9 08		      LDA	#<PFCOLS
   6186  3471		       8d 50 10 	      STA	DF0LOW
   6187  3474		       a9 0a		      LDA	#(>PFCOLS) & $0F
   6188  3476		       8d 68 10 	      STA	DF0HI
   6189  3479		       a9 d0		      LDA	#<playfieldcolorL0500
   6190  347b		       8d 59 10 	      STA	PARAMETER
   6191  347e		       a9 66		      LDA	#((>playfieldcolorL0500) & $0f) | (((>playfieldcolorL0500) / 2) & $70)
   6192  3480		       8d 59 10 	      STA	PARAMETER
   6193  3483		       a9 00		      LDA	#0
   6194  3485		       8d 59 10 	      STA	PARAMETER
   6195  3488		       a9 58		      LDA	#88
   6196  348a		       8d 59 10 	      STA	PARAMETER
   6197  348d		       a9 01		      LDA	#1
   6198  348f		       8d 5a 10 	      STA	CALLFUNCTION
   6199  3492				   .L0501		;  return
   6200  3492
   6201  3492		       ba		      tsx
   6202  3493		       b5 02		      lda	2,x	; check return address
   6203  3495		       49 54		      eor	#(>*)	; vs. current PCH
   6204  3497		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   6205  3499		       f0 03		      beq	*+5	; if equal, do normal return
   6206  349b		       4c e0 df 	      JMP	BS_return
   6207  349e		       60		      RTS
   6208  349f				   .
   6209  349f							; 
   6210  349f
   6211  349f				   .__Health
   6212  349f							; __Health
   6213  349f
   6214  349f				   .L0502		;  Bit2_HealthHitSound{2}  =  1
   6215  349f
   6216  349f		       a5 f1		      LDA	Bit2_HealthHitSound
   6217  34a1		       09 04		      ORA	#4
   6218  34a3		       85 f1		      STA	Bit2_HealthHitSound
   6219  34a5				   .L0503		;  Timer  = 0
   6220  34a5
   6221  34a5		       a9 00		      LDA	#0
   6222  34a7		       85 e4		      STA	Timer
   6223  34a9				   .L0504		;  Bit5_hit{5} = 1
   6224  34a9
   6225  34a9		       a5 ea		      LDA	Bit5_hit
   6226  34ab		       09 20		      ORA	#32
   6227  34ad		       85 ea		      STA	Bit5_hit
   6228  34af				   .L0505		;  if Powerup	<  1 then __PowerUp
   6229  34af
   6230  34af		       a5 ee		      LDA	Powerup
   6231  34b1		       c9 01		      CMP	#1
   6232  34b3				  -	      if	((* - .__PowerUp) < 127) && ((* - .__PowerUp) > -128)
   6233  34b3				  -	      bcc	.__PowerUp
   6234  34b3					      else
   6235  34b3		       b0 03		      bcs	.6skip__PowerUp
   6236  34b5		       4c 94 55 	      jmp	.__PowerUp
   6237  34b8				   .6skip__PowerUp
   6238  34b8					      endif
   6239  34b8				   .L0506		;  if Powerup	>  1 then __BounusFire
   6240  34b8
   6241  34b8		       a9 01		      LDA	#1
   6242  34ba		       c5 ee		      CMP	Powerup
   6243  34bc				  -	      if	((* - .__BounusFire) < 127) && ((* - .__BounusFire) > -128)
   6244  34bc				  -	      bcc	.__BounusFire
   6245  34bc					      else
   6246  34bc		       b0 03		      bcs	.7skip__BounusFire
   6247  34be		       4c 60 55 	      jmp	.__BounusFire
   6248  34c1				   .7skip__BounusFire
   6249  34c1					      endif
   6250  34c1				   .L0507		;  PlayerHealth  =  PlayerHealth  +  25
   6251  34c1
   6252  34c1		       a5 d5		      LDA	PlayerHealth
   6253  34c3		       18		      CLC
   6254  34c4		       69 19		      ADC	#25
   6255  34c6		       85 d5		      STA	PlayerHealth
   6256  34c8				   .L0508		;  PlayerMissileRate = 5
   6257  34c8
   6258  34c8		       a9 05		      LDA	#5
   6259  34ca		       85 f0		      STA	PlayerMissileRate
   6260  34cc				   .L0509		;  if PlayerHealth  <=  0 then PlayerHealth  =  0
   6261  34cc
   6262  34cc		       a9 00		      LDA	#0
   6263  34ce		       c5 d5		      CMP	PlayerHealth
   6264  34d0		       90 04		      BCC	.skipL0509
   6265  34d2				   .condpart250
   6266  34d2		       a9 00		      LDA	#0
   6267  34d4		       85 d5		      STA	PlayerHealth
   6268  34d6				   .skipL0509
   6269  34d6				   .L0510		;  if PlayerHealth  >	80 then PlayerHealth  =  80
   6270  34d6
   6271  34d6		       a9 50		      LDA	#80
   6272  34d8		       c5 d5		      CMP	PlayerHealth
   6273  34da		       b0 04		      BCS	.skipL0510
   6274  34dc				   .condpart251
   6275  34dc		       a9 50		      LDA	#80
   6276  34de		       85 d5		      STA	PlayerHealth
   6277  34e0				   .skipL0510
   6278  34e0				   .L0511		;  player4y = 200
   6279  34e0
   6280  34e0		       a9 c8		      LDA	#200
   6281  34e2		       85 9d		      STA	player4y
   6282  34e4				   .L0512		;  missile0x  =  200  :  missile0y  =	200
   6283  34e4
   6284  34e4		       a9 c8		      LDA	#200
   6285  34e6		       85 82		      STA	missile0x
   6286  34e8		       85 bf		      STA	missile0y
   6287  34ea				   .L0513		;  Bit1_missleOn{1}  = 0
   6288  34ea
   6289  34ea		       a5 ea		      LDA	Bit1_missleOn
   6290  34ec		       29 fd		      AND	#253
   6291  34ee		       85 ea		      STA	Bit1_missleOn
   6292  34f0				   .L0514		;  goto __Explosion bank2
   6293  34f0
   6294  34f0		       85 81		      sta	temp7
   6295  34f2		       a9 3c		      lda	#>(.__Explosion-1)
   6296  34f4		       48		      pha
   6297  34f5		       a9 28		      lda	#<(.__Explosion-1)
   6298  34f7		       48		      pha
   6299  34f8		       a5 81		      lda	temp7
   6300  34fa		       48		      pha
   6301  34fb		       8a		      txa
   6302  34fc		       48		      pha
   6303  34fd		       a2 02		      ldx	#2
   6304  34ff		       4c ee df 	      jmp	BS_jsr
   6305  3502				   .
   6306  3502							; 
   6307  3502
   6308  3502				   .
   6309  3502							; 
   6310  3502
   6311  3502				   .L0515		;  Househit = Househit - 1
   6312  3502
   6313  3502		       c6 e1		      DEC	Househit
   6314  3504				   .L0516		;  if Househit  < 2 then Househit  = 1
   6315  3504
   6316  3504		       a5 e1		      LDA	Househit
   6317  3506		       c9 02		      CMP	#2
   6318  3508		       b0 04		      BCS	.skipL0516
   6319  350a				   .condpart252
   6320  350a		       a9 01		      LDA	#1
   6321  350c		       85 e1		      STA	Househit
   6322  350e				   .skipL0516
   6323  350e				   .L0517		;  player4y = 200
   6324  350e
   6325  350e		       a9 c8		      LDA	#200
   6326  3510		       85 9d		      STA	player4y
   6327  3512				   .L0518		;  Bit2_EnemyMove{2} = 0
   6328  3512
   6329  3512		       a5 ea		      LDA	Bit2_EnemyMove
   6330  3514		       29 fb		      AND	#251
   6331  3516		       85 ea		      STA	Bit2_EnemyMove
   6332  3518				   .L0519		;  HealthDrop	=  0
   6333  3518
   6334  3518		       a9 00		      LDA	#0
   6335  351a		       85 de		      STA	HealthDrop
   6336  351c				   .L0520		;  Bit1_missleOn{1}  = 0
   6337  351c
   6338  351c		       a5 ea		      LDA	Bit1_missleOn
   6339  351e		       29 fd		      AND	#253
   6340  3520		       85 ea		      STA	Bit1_missleOn
   6341  3522				   .L0521		;  missile0x  =  200  :  missile0y  =	200
   6342  3522
   6343  3522		       a9 c8		      LDA	#200
   6344  3524		       85 82		      STA	missile0x
   6345  3526		       85 bf		      STA	missile0y
   6346  3528				   .L0522		;  gosub __Explosion bank2
   6347  3528
   6348  3528		       85 81		      sta	temp7
   6349  352a		       a9 55		      lda	#>(ret_point23-1)
   6350  352c		       48		      pha
   6351  352d		       a9 3f		      lda	#<(ret_point23-1)
   6352  352f		       48		      pha
   6353  3530		       a9 3c		      lda	#>(.__Explosion-1)
   6354  3532		       48		      pha
   6355  3533		       a9 28		      lda	#<(.__Explosion-1)
   6356  3535		       48		      pha
   6357  3536		       a5 81		      lda	temp7
   6358  3538		       48		      pha
   6359  3539		       8a		      txa
   6360  353a		       48		      pha
   6361  353b		       a2 02		      ldx	#2
   6362  353d		       4c ee df 	      jmp	BS_jsr
   6363  3540				   ret_point23
   6364  3540				   .L0523		;  Bit0_HitPlayer  =  1
   6365  3540
   6366  3540		       a9 01		      LDA	#1
   6367  3542		       85 f1		      STA	Bit0_HitPlayer
   6368  3544				   .L0524		;  Powerup  =	 ( rand & 2 ) 
   6369  3544
   6370  3544							; complex statement detected
   6371  3544		       ad 00 10 	      lda	rand
   6372  3547		       4a		      lsr
   6373  3548				  -	      ifconst	rand16
   6374  3548				  -	      rol	rand16
   6375  3548					      endif
   6376  3548		       90 02		      bcc	*+4
   6377  354a		       49 b4		      eor	#$B4
   6378  354c		       8d 00 10 	      sta	rand
   6379  354f				  -	      ifconst	rand16
   6380  354f				  -	      eor	rand16
   6381  354f					      endif
   6382  354f		       29 02		      AND	#2
   6383  3551		       85 ee		      STA	Powerup
   6384  3553				   .L0525		;  return
   6385  3553
   6386  3553		       ba		      tsx
   6387  3554		       b5 02		      lda	2,x	; check return address
   6388  3556		       49 55		      eor	#(>*)	; vs. current PCH
   6389  3558		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   6390  355a		       f0 03		      beq	*+5	; if equal, do normal return
   6391  355c		       4c e0 df 	      JMP	BS_return
   6392  355f		       60		      RTS
   6393  3560				   .
   6394  3560							; 
   6395  3560
   6396  3560				   .__BounusFire
   6397  3560							; __BounusFire
   6398  3560
   6399  3560				   .L0526		;  PlayerMissileRate = 10
   6400  3560
   6401  3560		       a9 0a		      LDA	#10
   6402  3562		       85 f0		      STA	PlayerMissileRate
   6403  3564				   .L0527		;  HealthDrop	=  0
   6404  3564
   6405  3564		       a9 00		      LDA	#0
   6406  3566		       85 de		      STA	HealthDrop
   6407  3568				   .L0528		;  Bit1_missleOn{1}  = 0
   6408  3568
   6409  3568		       a5 ea		      LDA	Bit1_missleOn
   6410  356a		       29 fd		      AND	#253
   6411  356c		       85 ea		      STA	Bit1_missleOn
   6412  356e				   .L0529		;  missile0x  =  200  :  missile0y  =	200
   6413  356e
   6414  356e		       a9 c8		      LDA	#200
   6415  3570		       85 82		      STA	missile0x
   6416  3572		       85 bf		      STA	missile0y
   6417  3574				   .L0530		;  player4y = 200
   6418  3574
   6419  3574		       a9 c8		      LDA	#200
   6420  3576		       85 9d		      STA	player4y
   6421  3578				   .L0531		;  Powerup  =	 ( rand & 2 ) 
   6422  3578
   6423  3578							; complex statement detected
   6424  3578		       ad 00 10 	      lda	rand
   6425  357b		       4a		      lsr
   6426  357c				  -	      ifconst	rand16
   6427  357c				  -	      rol	rand16
   6428  357c					      endif
   6429  357c		       90 02		      bcc	*+4
   6430  357e		       49 b4		      eor	#$B4
   6431  3580		       8d 00 10 	      sta	rand
   6432  3583				  -	      ifconst	rand16
   6433  3583				  -	      eor	rand16
   6434  3583					      endif
   6435  3583		       29 02		      AND	#2
   6436  3585		       85 ee		      STA	Powerup
   6437  3587				   .L0532		;  return
   6438  3587
   6439  3587		       ba		      tsx
   6440  3588		       b5 02		      lda	2,x	; check return address
   6441  358a		       49 55		      eor	#(>*)	; vs. current PCH
   6442  358c		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   6443  358e		       f0 03		      beq	*+5	; if equal, do normal return
   6444  3590		       4c e0 df 	      JMP	BS_return
   6445  3593		       60		      RTS
   6446  3594				   .
   6447  3594							; 
   6448  3594
   6449  3594				   .__PowerUp
   6450  3594							; __PowerUp
   6451  3594
   6452  3594				   .L0533		;  gosub __Explosion bank2
   6453  3594
   6454  3594		       85 81		      sta	temp7
   6455  3596		       a9 55		      lda	#>(ret_point24-1)
   6456  3598		       48		      pha
   6457  3599		       a9 ab		      lda	#<(ret_point24-1)
   6458  359b		       48		      pha
   6459  359c		       a9 3c		      lda	#>(.__Explosion-1)
   6460  359e		       48		      pha
   6461  359f		       a9 28		      lda	#<(.__Explosion-1)
   6462  35a1		       48		      pha
   6463  35a2		       a5 81		      lda	temp7
   6464  35a4		       48		      pha
   6465  35a5		       8a		      txa
   6466  35a6		       48		      pha
   6467  35a7		       a2 02		      ldx	#2
   6468  35a9		       4c ee df 	      jmp	BS_jsr
   6469  35ac				   ret_point24
   6470  35ac				   .L0534		;  PlayerMissileRate = 5
   6471  35ac
   6472  35ac		       a9 05		      LDA	#5
   6473  35ae		       85 f0		      STA	PlayerMissileRate
   6474  35b0				   .L0535		;  player1y  = 200
   6475  35b0
   6476  35b0		       a9 c8		      LDA	#200
   6477  35b2		       85 9a		      STA	player1y
   6478  35b4				   .L0536		;  player2y  = 200
   6479  35b4
   6480  35b4		       a9 c8		      LDA	#200
   6481  35b6		       85 9b		      STA	player2y
   6482  35b8				   .L0537		;  player3y  =  200
   6483  35b8
   6484  35b8		       a9 c8		      LDA	#200
   6485  35ba		       85 9c		      STA	player3y
   6486  35bc				   .L0538		;  player4y = 200
   6487  35bc
   6488  35bc		       a9 c8		      LDA	#200
   6489  35be		       85 9d		      STA	player4y
   6490  35c0				   .L0539		;  Bit2_EnemyMove{2} = 0
   6491  35c0
   6492  35c0		       a5 ea		      LDA	Bit2_EnemyMove
   6493  35c2		       29 fb		      AND	#251
   6494  35c4		       85 ea		      STA	Bit2_EnemyMove
   6495  35c6				   .L0540		;  HealthDrop	=  0
   6496  35c6
   6497  35c6		       a9 00		      LDA	#0
   6498  35c8		       85 de		      STA	HealthDrop
   6499  35ca				   .L0541		;  Bit5_hit{5} = 1
   6500  35ca
   6501  35ca		       a5 ea		      LDA	Bit5_hit
   6502  35cc		       09 20		      ORA	#32
   6503  35ce		       85 ea		      STA	Bit5_hit
   6504  35d0				   .L0542		;  Bit1_missleOn{1}  = 0
   6505  35d0
   6506  35d0		       a5 ea		      LDA	Bit1_missleOn
   6507  35d2		       29 fd		      AND	#253
   6508  35d4		       85 ea		      STA	Bit1_missleOn
   6509  35d6				   .L0543		;  missile0x  =  200  :  missile0y  =	200
   6510  35d6
   6511  35d6		       a9 c8		      LDA	#200
   6512  35d8		       85 82		      STA	missile0x
   6513  35da		       85 bf		      STA	missile0y
   6514  35dc				   .L0544		;  Powerup  =	 ( rand & 2 ) 
   6515  35dc
   6516  35dc							; complex statement detected
   6517  35dc		       ad 00 10 	      lda	rand
   6518  35df		       4a		      lsr
   6519  35e0				  -	      ifconst	rand16
   6520  35e0				  -	      rol	rand16
   6521  35e0					      endif
   6522  35e0		       90 02		      bcc	*+4
   6523  35e2		       49 b4		      eor	#$B4
   6524  35e4		       8d 00 10 	      sta	rand
   6525  35e7				  -	      ifconst	rand16
   6526  35e7				  -	      eor	rand16
   6527  35e7					      endif
   6528  35e7		       29 02		      AND	#2
   6529  35e9		       85 ee		      STA	Powerup
   6530  35eb				   .
   6531  35eb							; 
   6532  35eb
   6533  35eb				   .L0545		;  bkcolors:
   6534  35eb
   6535  35eb		       a9 a5		      LDA	#<BKCOLS
   6536  35ed		       8d 50 10 	      STA	DF0LOW
   6537  35f0		       a9 0b		      LDA	#(>BKCOLS) & $0F
   6538  35f2		       8d 68 10 	      STA	DF0HI
   6539  35f5		       a9 28		      LDA	#<backgroundcolorL0545
   6540  35f7		       8d 59 10 	      STA	PARAMETER
   6541  35fa		       a9 67		      LDA	#((>backgroundcolorL0545) & $0f) | (((>backgroundcolorL0545) / 2) & $70)
   6542  35fc		       8d 59 10 	      STA	PARAMETER
   6543  35ff		       a9 00		      LDA	#0
   6544  3601		       8d 59 10 	      STA	PARAMETER
   6545  3604		       a9 58		      LDA	#88
   6546  3606		       8d 59 10 	      STA	PARAMETER
   6547  3609		       a9 01		      LDA	#1
   6548  360b		       8d 5a 10 	      STA	CALLFUNCTION
   6549  360e				   .
   6550  360e							; 
   6551  360e
   6552  360e				   .
   6553  360e							; 
   6554  360e
   6555  360e				   .L0546		;  return
   6556  360e
   6557  360e		       ba		      tsx
   6558  360f		       b5 02		      lda	2,x	; check return address
   6559  3611		       49 56		      eor	#(>*)	; vs. current PCH
   6560  3613		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   6561  3615		       f0 03		      beq	*+5	; if equal, do normal return
   6562  3617		       4c e0 df 	      JMP	BS_return
   6563  361a		       60		      RTS
   6564  361b				   .
   6565  361b							; 
   6566  361b
   6567  361b				   .L0547		;  bank 4
   6568  361b
   6569  361b					      if	ECHO3
      2489 bytes of ROM space left in bank 3
   6570  361b					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
   6571  361b					      endif
   6572  361b		       00 01	   ECHO3      =	1
   6573  3fd4					      ORG	$3FF4-bscode_length
   6574  3fd4					      RORG	$5FF4-bscode_length
   6575  3fd4		       a2 ff	   start_bank3 ldx	#$ff
   6576  3fd6					      ifconst	FASTFETCH	; using DPC+
   6577  3fd6		       8e 58 10 	      stx	FASTFETCH
   6578  3fd9					      endif
   6579  3fd9		       9a		      txs
   6580  3fda				  -	      if	bankswitch == 64
   6581  3fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   6582  3fda					      else
   6583  3fda		       a9 18		      lda	#>(start-1)
   6584  3fdc					      endif
   6585  3fdc		       48		      pha
   6586  3fdd		       a9 e3		      lda	#<(start-1)
   6587  3fdf		       48		      pha
   6588  3fe0		       48		      pha
   6589  3fe1		       8a		      txa
   6590  3fe2		       48		      pha
   6591  3fe3		       ba		      tsx
   6592  3fe4					      if	bankswitch != 64
   6593  3fe4		       b5 04		      lda	4,x	; get high byte of return address
   6594  3fe6		       2a		      rol
   6595  3fe7		       2a		      rol
   6596  3fe8		       2a		      rol
   6597  3fe9		       2a		      rol
   6598  3fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   6599  3fec		       aa		      tax
   6600  3fed		       e8		      inx
   6601  3fee				  -	      else
   6602  3fee				  -	      lda	4,x	; get high byte of return address
   6603  3fee				  -	      tay
   6604  3fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   6605  3fee				  -	      sta	4,x
   6606  3fee				  -	      tya
   6607  3fee				  -	      lsr
   6608  3fee				  -	      lsr
   6609  3fee				  -	      lsr
   6610  3fee				  -	      lsr
   6611  3fee				  -	      tax
   6612  3fee				  -	      inx
   6613  3fee					      endif
   6614  3fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   6615  3ff1		       68		      pla
   6616  3ff2		       aa		      tax
   6617  3ff3		       68		      pla
   6618  3ff4		       60		      rts
   6619  3ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   6620  3ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   6621  3ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   6622  3ff5					      endif
   6623  3ffc					      ORG	$3FFC
   6624  3ffc					      RORG	$5FFC
   6625  3ffc		       d4 5f		      .word.w	(start_bank3 & $ffff)
   6626  3ffe		       d4 5f		      .word.w	(start_bank3 & $ffff)
   6627  4000					      ORG	$4000
   6628  4000					      RORG	$7000
   6629  4000					      repeat	129
   6630  4000		       00		      .byte.b	0
   6629  4000					      repend
   6630  4001		       00		      .byte.b	0
   6629  4001					      repend
   6630  4002		       00		      .byte.b	0
   6629  4002					      repend
   6630  4003		       00		      .byte.b	0
   6629  4003					      repend
   6630  4004		       00		      .byte.b	0
   6629  4004					      repend
   6630  4005		       00		      .byte.b	0
   6629  4005					      repend
   6630  4006		       00		      .byte.b	0
   6629  4006					      repend
   6630  4007		       00		      .byte.b	0
   6629  4007					      repend
   6630  4008		       00		      .byte.b	0
   6629  4008					      repend
   6630  4009		       00		      .byte.b	0
   6629  4009					      repend
   6630  400a		       00		      .byte.b	0
   6629  400a					      repend
   6630  400b		       00		      .byte.b	0
   6629  400b					      repend
   6630  400c		       00		      .byte.b	0
   6629  400c					      repend
   6630  400d		       00		      .byte.b	0
   6629  400d					      repend
   6630  400e		       00		      .byte.b	0
   6629  400e					      repend
   6630  400f		       00		      .byte.b	0
   6629  400f					      repend
   6630  4010		       00		      .byte.b	0
   6629  4010					      repend
   6630  4011		       00		      .byte.b	0
   6629  4011					      repend
   6630  4012		       00		      .byte.b	0
   6629  4012					      repend
   6630  4013		       00		      .byte.b	0
   6629  4013					      repend
   6630  4014		       00		      .byte.b	0
   6629  4014					      repend
   6630  4015		       00		      .byte.b	0
   6629  4015					      repend
   6630  4016		       00		      .byte.b	0
   6629  4016					      repend
   6630  4017		       00		      .byte.b	0
   6629  4017					      repend
   6630  4018		       00		      .byte.b	0
   6629  4018					      repend
   6630  4019		       00		      .byte.b	0
   6629  4019					      repend
   6630  401a		       00		      .byte.b	0
   6629  401a					      repend
   6630  401b		       00		      .byte.b	0
   6629  401b					      repend
   6630  401c		       00		      .byte.b	0
   6629  401c					      repend
   6630  401d		       00		      .byte.b	0
   6629  401d					      repend
   6630  401e		       00		      .byte.b	0
   6629  401e					      repend
   6630  401f		       00		      .byte.b	0
   6629  401f					      repend
   6630  4020		       00		      .byte.b	0
   6629  4020					      repend
   6630  4021		       00		      .byte.b	0
   6629  4021					      repend
   6630  4022		       00		      .byte.b	0
   6629  4022					      repend
   6630  4023		       00		      .byte.b	0
   6629  4023					      repend
   6630  4024		       00		      .byte.b	0
   6629  4024					      repend
   6630  4025		       00		      .byte.b	0
   6629  4025					      repend
   6630  4026		       00		      .byte.b	0
   6629  4026					      repend
   6630  4027		       00		      .byte.b	0
   6629  4027					      repend
   6630  4028		       00		      .byte.b	0
   6629  4028					      repend
   6630  4029		       00		      .byte.b	0
   6629  4029					      repend
   6630  402a		       00		      .byte.b	0
   6629  402a					      repend
   6630  402b		       00		      .byte.b	0
   6629  402b					      repend
   6630  402c		       00		      .byte.b	0
   6629  402c					      repend
   6630  402d		       00		      .byte.b	0
   6629  402d					      repend
   6630  402e		       00		      .byte.b	0
   6629  402e					      repend
   6630  402f		       00		      .byte.b	0
   6629  402f					      repend
   6630  4030		       00		      .byte.b	0
   6629  4030					      repend
   6630  4031		       00		      .byte.b	0
   6629  4031					      repend
   6630  4032		       00		      .byte.b	0
   6629  4032					      repend
   6630  4033		       00		      .byte.b	0
   6629  4033					      repend
   6630  4034		       00		      .byte.b	0
   6629  4034					      repend
   6630  4035		       00		      .byte.b	0
   6629  4035					      repend
   6630  4036		       00		      .byte.b	0
   6629  4036					      repend
   6630  4037		       00		      .byte.b	0
   6629  4037					      repend
   6630  4038		       00		      .byte.b	0
   6629  4038					      repend
   6630  4039		       00		      .byte.b	0
   6629  4039					      repend
   6630  403a		       00		      .byte.b	0
   6629  403a					      repend
   6630  403b		       00		      .byte.b	0
   6629  403b					      repend
   6630  403c		       00		      .byte.b	0
   6629  403c					      repend
   6630  403d		       00		      .byte.b	0
   6629  403d					      repend
   6630  403e		       00		      .byte.b	0
   6629  403e					      repend
   6630  403f		       00		      .byte.b	0
   6629  403f					      repend
   6630  4040		       00		      .byte.b	0
   6629  4040					      repend
   6630  4041		       00		      .byte.b	0
   6629  4041					      repend
   6630  4042		       00		      .byte.b	0
   6629  4042					      repend
   6630  4043		       00		      .byte.b	0
   6629  4043					      repend
   6630  4044		       00		      .byte.b	0
   6629  4044					      repend
   6630  4045		       00		      .byte.b	0
   6629  4045					      repend
   6630  4046		       00		      .byte.b	0
   6629  4046					      repend
   6630  4047		       00		      .byte.b	0
   6629  4047					      repend
   6630  4048		       00		      .byte.b	0
   6629  4048					      repend
   6630  4049		       00		      .byte.b	0
   6629  4049					      repend
   6630  404a		       00		      .byte.b	0
   6629  404a					      repend
   6630  404b		       00		      .byte.b	0
   6629  404b					      repend
   6630  404c		       00		      .byte.b	0
   6629  404c					      repend
   6630  404d		       00		      .byte.b	0
   6629  404d					      repend
   6630  404e		       00		      .byte.b	0
   6629  404e					      repend
   6630  404f		       00		      .byte.b	0
   6629  404f					      repend
   6630  4050		       00		      .byte.b	0
   6629  4050					      repend
   6630  4051		       00		      .byte.b	0
   6629  4051					      repend
   6630  4052		       00		      .byte.b	0
   6629  4052					      repend
   6630  4053		       00		      .byte.b	0
   6629  4053					      repend
   6630  4054		       00		      .byte.b	0
   6629  4054					      repend
   6630  4055		       00		      .byte.b	0
   6629  4055					      repend
   6630  4056		       00		      .byte.b	0
   6629  4056					      repend
   6630  4057		       00		      .byte.b	0
   6629  4057					      repend
   6630  4058		       00		      .byte.b	0
   6629  4058					      repend
   6630  4059		       00		      .byte.b	0
   6629  4059					      repend
   6630  405a		       00		      .byte.b	0
   6629  405a					      repend
   6630  405b		       00		      .byte.b	0
   6629  405b					      repend
   6630  405c		       00		      .byte.b	0
   6629  405c					      repend
   6630  405d		       00		      .byte.b	0
   6629  405d					      repend
   6630  405e		       00		      .byte.b	0
   6629  405e					      repend
   6630  405f		       00		      .byte.b	0
   6629  405f					      repend
   6630  4060		       00		      .byte.b	0
   6629  4060					      repend
   6630  4061		       00		      .byte.b	0
   6629  4061					      repend
   6630  4062		       00		      .byte.b	0
   6629  4062					      repend
   6630  4063		       00		      .byte.b	0
   6629  4063					      repend
   6630  4064		       00		      .byte.b	0
   6629  4064					      repend
   6630  4065		       00		      .byte.b	0
   6629  4065					      repend
   6630  4066		       00		      .byte.b	0
   6629  4066					      repend
   6630  4067		       00		      .byte.b	0
   6629  4067					      repend
   6630  4068		       00		      .byte.b	0
   6629  4068					      repend
   6630  4069		       00		      .byte.b	0
   6629  4069					      repend
   6630  406a		       00		      .byte.b	0
   6629  406a					      repend
   6630  406b		       00		      .byte.b	0
   6629  406b					      repend
   6630  406c		       00		      .byte.b	0
   6629  406c					      repend
   6630  406d		       00		      .byte.b	0
   6629  406d					      repend
   6630  406e		       00		      .byte.b	0
   6629  406e					      repend
   6630  406f		       00		      .byte.b	0
   6629  406f					      repend
   6630  4070		       00		      .byte.b	0
   6629  4070					      repend
   6630  4071		       00		      .byte.b	0
   6629  4071					      repend
   6630  4072		       00		      .byte.b	0
   6629  4072					      repend
   6630  4073		       00		      .byte.b	0
   6629  4073					      repend
   6630  4074		       00		      .byte.b	0
   6629  4074					      repend
   6630  4075		       00		      .byte.b	0
   6629  4075					      repend
   6630  4076		       00		      .byte.b	0
   6629  4076					      repend
   6630  4077		       00		      .byte.b	0
   6629  4077					      repend
   6630  4078		       00		      .byte.b	0
   6629  4078					      repend
   6630  4079		       00		      .byte.b	0
   6629  4079					      repend
   6630  407a		       00		      .byte.b	0
   6629  407a					      repend
   6630  407b		       00		      .byte.b	0
   6629  407b					      repend
   6630  407c		       00		      .byte.b	0
   6629  407c					      repend
   6630  407d		       00		      .byte.b	0
   6629  407d					      repend
   6630  407e		       00		      .byte.b	0
   6629  407e					      repend
   6630  407f		       00		      .byte.b	0
   6629  407f					      repend
   6630  4080		       00		      .byte.b	0
   6631  4081					      repend
   6632  4081				   .L0548		;  temp1 = temp1
   6633  4081
   6634  4081		       a5 cb		      LDA	temp1
   6635  4083		       85 cb		      STA	temp1
   6636  4085				   .
   6637  4085							; 
   6638  4085
   6639  4085				   .__FrameAnimation
   6640  4085							; __FrameAnimation
   6641  4085
   6642  4085				   .
   6643  4085							; 
   6644  4085
   6645  4085				   .L0549		;  bkcolors:
   6646  4085
   6647  4085		       a9 a5		      LDA	#<BKCOLS
   6648  4087		       8d 50 10 	      STA	DF0LOW
   6649  408a		       a9 0b		      LDA	#(>BKCOLS) & $0F
   6650  408c		       8d 68 10 	      STA	DF0HI
   6651  408f		       a9 80		      LDA	#<backgroundcolorL0549
   6652  4091		       8d 59 10 	      STA	PARAMETER
   6653  4094		       a9 67		      LDA	#((>backgroundcolorL0549) & $0f) | (((>backgroundcolorL0549) / 2) & $70)
   6654  4096		       8d 59 10 	      STA	PARAMETER
   6655  4099		       a9 00		      LDA	#0
   6656  409b		       8d 59 10 	      STA	PARAMETER
   6657  409e		       a9 58		      LDA	#88
   6658  40a0		       8d 59 10 	      STA	PARAMETER
   6659  40a3		       a9 01		      LDA	#1
   6660  40a5		       8d 5a 10 	      STA	CALLFUNCTION
   6661  40a8				   .__p0Frames
   6662  40a8							; __p0Frames
   6663  40a8
   6664  40a8				   .L0550		;  if !Bit1_missleOn{1} then if joy0fire then goto __p0Fire
   6665  40a8
   6666  40a8		       a5 ea		      LDA	Bit1_missleOn
   6667  40aa		       29 02		      AND	#2
   6668  40ac		       d0 07		      BNE	.skipL0550
   6669  40ae				   .condpart253
   6670  40ae		       24 0c		      bit	INPT4
   6671  40b0		       30 03		      BMI	.skip253then
   6672  40b2				   .condpart254
   6673  40b2		       4c dc 70 	      jmp	.__p0Fire
   6674  40b5
   6675  40b5				   .skip253then
   6676  40b5				   .skipL0550
   6677  40b5				   .L0551		;  if joy0left then goto __P0BlockLeft
   6678  40b5
   6679  40b5		       2c 80 02 	      bit	SWCHA
   6680  40b8		       70 03		      BVS	.skipL0551
   6681  40ba				   .condpart255
   6682  40ba		       4c f3 70 	      jmp	.__P0BlockLeft
   6683  40bd
   6684  40bd				   .skipL0551
   6685  40bd				   .L0552		;  if joy0right then goto __P0BlockRigth
   6686  40bd
   6687  40bd		       2c 80 02 	      bit	SWCHA
   6688  40c0		       30 03		      BMI	.skipL0552
   6689  40c2				   .condpart256
   6690  40c2		       4c 0a 71 	      jmp	.__P0BlockRigth
   6691  40c5
   6692  40c5				   .skipL0552
   6693  40c5				   .L0553		;  player0:
   6694  40c5
   6695  40c5		       a2 d8		      LDX	#<playerL0553_0
   6696  40c7		       86 bd		      STX	player0pointerlo
   6697  40c9		       a9 67		      LDA	#((>playerL0553_0) & $0f) | (((>playerL0553_0) / 2) & $70)
   6698  40cb		       85 be		      STA	player0pointerhi
   6699  40cd		       a9 0f		      LDA	#15
   6700  40cf		       85 a5		      STA	player0height
   6701  40d1				   .L0554		;  player0color:
   6702  40d1
   6703  40d1		       a2 e7		      LDX	#<playercolorL0554_0
   6704  40d3		       86 a3		      STX	player0color
   6705  40d5		       a9 67		      LDA	#((>playercolorL0554_0) & $0f) | (((>playercolorL0554_0) / 2) & $70)
   6706  40d7		       85 a4		      STA	player0color+1
   6707  40d9				   .L0555		;  goto __p0Damagecolors
   6708  40d9
   6709  40d9		       4c 1e 71 	      jmp	.__p0Damagecolors
   6710  40dc
   6711  40dc				   .
   6712  40dc							; 
   6713  40dc
   6714  40dc				   .__p0Fire
   6715  40dc							; __p0Fire
   6716  40dc
   6717  40dc				   .L0556		;  player0:
   6718  40dc
   6719  40dc		       a2 f6		      LDX	#<playerL0556_0
   6720  40de		       86 bd		      STX	player0pointerlo
   6721  40e0		       a9 67		      LDA	#((>playerL0556_0) & $0f) | (((>playerL0556_0) / 2) & $70)
   6722  40e2		       85 be		      STA	player0pointerhi
   6723  40e4		       a9 0f		      LDA	#15
   6724  40e6		       85 a5		      STA	player0height
   6725  40e8				   .L0557		;  player0color:
   6726  40e8
   6727  40e8		       a2 05		      LDX	#<playercolorL0557_0
   6728  40ea		       86 a3		      STX	player0color
   6729  40ec		       a9 68		      LDA	#((>playercolorL0557_0) & $0f) | (((>playercolorL0557_0) / 2) & $70)
   6730  40ee		       85 a4		      STA	player0color+1
   6731  40f0				   .L0558		;  goto __p0Damagecolors
   6732  40f0
   6733  40f0		       4c 1e 71 	      jmp	.__p0Damagecolors
   6734  40f3
   6735  40f3				   .__P0BlockLeft
   6736  40f3							; __P0BlockLeft
   6737  40f3
   6738  40f3				   .L0559		;  player0:
   6739  40f3
   6740  40f3		       a2 14		      LDX	#<playerL0559_0
   6741  40f5		       86 bd		      STX	player0pointerlo
   6742  40f7		       a9 68		      LDA	#((>playerL0559_0) & $0f) | (((>playerL0559_0) / 2) & $70)
   6743  40f9		       85 be		      STA	player0pointerhi
   6744  40fb		       a9 0f		      LDA	#15
   6745  40fd		       85 a5		      STA	player0height
   6746  40ff				   .L0560		;  player0color:
   6747  40ff
   6748  40ff		       a2 23		      LDX	#<playercolorL0560_0
   6749  4101		       86 a3		      STX	player0color
   6750  4103		       a9 68		      LDA	#((>playercolorL0560_0) & $0f) | (((>playercolorL0560_0) / 2) & $70)
   6751  4105		       85 a4		      STA	player0color+1
   6752  4107				   .L0561		;  goto __p0Damagecolors
   6753  4107
   6754  4107		       4c 1e 71 	      jmp	.__p0Damagecolors
   6755  410a
   6756  410a				   .
   6757  410a							; 
   6758  410a
   6759  410a				   .__P0BlockRigth
   6760  410a							; __P0BlockRigth
   6761  410a
   6762  410a				   .L0562		;  player0:
   6763  410a
   6764  410a		       a2 32		      LDX	#<playerL0562_0
   6765  410c		       86 bd		      STX	player0pointerlo
   6766  410e		       a9 68		      LDA	#((>playerL0562_0) & $0f) | (((>playerL0562_0) / 2) & $70)
   6767  4110		       85 be		      STA	player0pointerhi
   6768  4112		       a9 0f		      LDA	#15
   6769  4114		       85 a5		      STA	player0height
   6770  4116				   .L0563		;  player0color:
   6771  4116
   6772  4116		       a2 41		      LDX	#<playercolorL0563_0
   6773  4118		       86 a3		      STX	player0color
   6774  411a		       a9 68		      LDA	#((>playercolorL0563_0) & $0f) | (((>playercolorL0563_0) / 2) & $70)
   6775  411c		       85 a4		      STA	player0color+1
   6776  411e				   .
   6777  411e							; 
   6778  411e
   6779  411e				   .__p0Damagecolors
   6780  411e							; __p0Damagecolors
   6781  411e
   6782  411e				   .
   6783  411e							; 
   6784  411e
   6785  411e				   .L0564		;  if PlayerDamage  = 1  &&  EnemyHit	<  1 then player0color:
   6786  411e
   6787  411e		       a5 dd		      LDA	PlayerDamage
   6788  4120		       c9 01		      CMP	#1
   6789  4122		       d0 0e		      BNE	.skipL0564
   6790  4124				   .condpart257
   6791  4124		       a5 d9		      LDA	EnemyHit
   6792  4126		       c9 01		      CMP	#1
   6793  4128		       b0 08		      BCS	.skip257then
   6794  412a				   .condpart258
   6795  412a		       a2 50		      LDX	#<playercolor258then_0
   6796  412c		       86 a3		      STX	player0color
   6797  412e		       a9 68		      LDA	#((>playercolor258then_0) & $0f) | (((>playercolor258then_0) / 2) & $70)
   6798  4130		       85 a4		      STA	player0color+1
   6799  4132				   .skip257then
   6800  4132				   .skipL0564
   6801  4132				   .
   6802  4132							; 
   6803  4132
   6804  4132				   .L0565		;  if PlayerDamage  = 2 then player0color:
   6805  4132
   6806  4132		       a5 dd		      LDA	PlayerDamage
   6807  4134		       c9 02		      CMP	#2
   6808  4136		       d0 08		      BNE	.skipL0565
   6809  4138				   .condpart259
   6810  4138		       a2 60		      LDX	#<playercolor259then_0
   6811  413a		       86 a3		      STX	player0color
   6812  413c		       a9 68		      LDA	#((>playercolor259then_0) & $0f) | (((>playercolor259then_0) / 2) & $70)
   6813  413e		       85 a4		      STA	player0color+1
   6814  4140				   .skipL0565
   6815  4140				   .
   6816  4140							; 
   6817  4140
   6818  4140				   .L0566		;  if frame  =  10  &&  EnemyHit  <  1 then player2:
   6819  4140
   6820  4140		       a5 d6		      LDA	frame
   6821  4142		       c9 0a		      CMP	#10
   6822  4144		       d0 1e		      BNE	.skipL0566
   6823  4146				   .condpart260
   6824  4146		       a5 d9		      LDA	EnemyHit
   6825  4148		       c9 01		      CMP	#1
   6826  414a		       b0 18		      BCS	.skip260then
   6827  414c				   .condpart261
   6828  414c		       a9 e4		      lda	#<(playerpointers+2)
   6829  414e		       8d 50 10 	      sta	DF0LOW
   6830  4151		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   6831  4153		       8d 68 10 	      sta	DF0HI
   6832  4156		       a2 72		      LDX	#<player261then_2
   6833  4158		       8e 78 10 	      STX	DF0WRITE
   6834  415b		       a9 68		      LDA	#((>player261then_2) & $0f) | (((>player261then_2) / 2) & $70)
   6835  415d		       8d 78 10 	      STA	DF0WRITE
   6836  4160		       a9 08		      LDA	#8
   6837  4162		       85 a7		      STA	player2height
   6838  4164				   .skip260then
   6839  4164				   .skipL0566
   6840  4164				   .L0567		;  if frame  =  10  &&  EnemyHit  =  2 then player2:
   6841  4164
   6842  4164		       a5 d6		      LDA	frame
   6843  4166		       c9 0a		      CMP	#10
   6844  4168		       d0 1e		      BNE	.skipL0567
   6845  416a				   .condpart262
   6846  416a		       a5 d9		      LDA	EnemyHit
   6847  416c		       c9 02		      CMP	#2
   6848  416e		       d0 18		      BNE	.skip262then
   6849  4170				   .condpart263
   6850  4170		       a9 e4		      lda	#<(playerpointers+2)
   6851  4172		       8d 50 10 	      sta	DF0LOW
   6852  4175		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   6853  4177		       8d 68 10 	      sta	DF0HI
   6854  417a		       a2 7a		      LDX	#<player263then_2
   6855  417c		       8e 78 10 	      STX	DF0WRITE
   6856  417f		       a9 68		      LDA	#((>player263then_2) & $0f) | (((>player263then_2) / 2) & $70)
   6857  4181		       8d 78 10 	      STA	DF0WRITE
   6858  4184		       a9 08		      LDA	#8
   6859  4186		       85 a7		      STA	player2height
   6860  4188				   .skip262then
   6861  4188				   .skipL0567
   6862  4188				   .L0568		;  if frame  =  10  &&  EnemyHit  <  1 then player3:
   6863  4188
   6864  4188		       a5 d6		      LDA	frame
   6865  418a		       c9 0a		      CMP	#10
   6866  418c		       d0 1e		      BNE	.skipL0568
   6867  418e				   .condpart264
   6868  418e		       a5 d9		      LDA	EnemyHit
   6869  4190		       c9 01		      CMP	#1
   6870  4192		       b0 18		      BCS	.skip264then
   6871  4194				   .condpart265
   6872  4194		       a9 e6		      lda	#<(playerpointers+4)
   6873  4196		       8d 50 10 	      sta	DF0LOW
   6874  4199		       a9 01		      lda	#(>(playerpointers+4)) & $0F
   6875  419b		       8d 68 10 	      sta	DF0HI
   6876  419e		       a2 82		      LDX	#<player265then_3
   6877  41a0		       8e 78 10 	      STX	DF0WRITE
   6878  41a3		       a9 68		      LDA	#((>player265then_3) & $0f) | (((>player265then_3) / 2) & $70)
   6879  41a5		       8d 78 10 	      STA	DF0WRITE
   6880  41a8		       a9 08		      LDA	#8
   6881  41aa		       85 a8		      STA	player3height
   6882  41ac				   .skip264then
   6883  41ac				   .skipL0568
   6884  41ac				   .L0569		;  if frame  =  10  &&  EnemyHit  = 3 then player3:
   6885  41ac
   6886  41ac		       a5 d6		      LDA	frame
   6887  41ae		       c9 0a		      CMP	#10
   6888  41b0		       d0 1e		      BNE	.skipL0569
   6889  41b2				   .condpart266
   6890  41b2		       a5 d9		      LDA	EnemyHit
   6891  41b4		       c9 03		      CMP	#3
   6892  41b6		       d0 18		      BNE	.skip266then
   6893  41b8				   .condpart267
   6894  41b8		       a9 e6		      lda	#<(playerpointers+4)
   6895  41ba		       8d 50 10 	      sta	DF0LOW
   6896  41bd		       a9 01		      lda	#(>(playerpointers+4)) & $0F
   6897  41bf		       8d 68 10 	      sta	DF0HI
   6898  41c2		       a2 8a		      LDX	#<player267then_3
   6899  41c4		       8e 78 10 	      STX	DF0WRITE
   6900  41c7		       a9 68		      LDA	#((>player267then_3) & $0f) | (((>player267then_3) / 2) & $70)
   6901  41c9		       8d 78 10 	      STA	DF0WRITE
   6902  41cc		       a9 08		      LDA	#8
   6903  41ce		       85 a8		      STA	player3height
   6904  41d0				   .skip266then
   6905  41d0				   .skipL0569
   6906  41d0				   .L0570		;  if frame  =  10  &&  EnemyHit  <  1 then player1:
   6907  41d0
   6908  41d0		       a5 d6		      LDA	frame
   6909  41d2		       c9 0a		      CMP	#10
   6910  41d4		       d0 1e		      BNE	.skipL0570
   6911  41d6				   .condpart268
   6912  41d6		       a5 d9		      LDA	EnemyHit
   6913  41d8		       c9 01		      CMP	#1
   6914  41da		       b0 18		      BCS	.skip268then
   6915  41dc				   .condpart269
   6916  41dc		       a9 e2		      lda	#<(playerpointers+0)
   6917  41de		       8d 50 10 	      sta	DF0LOW
   6918  41e1		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   6919  41e3		       8d 68 10 	      sta	DF0HI
   6920  41e6		       a2 92		      LDX	#<player269then_1
   6921  41e8		       8e 78 10 	      STX	DF0WRITE
   6922  41eb		       a9 68		      LDA	#((>player269then_1) & $0f) | (((>player269then_1) / 2) & $70)
   6923  41ed		       8d 78 10 	      STA	DF0WRITE
   6924  41f0		       a9 08		      LDA	#8
   6925  41f2		       85 a6		      STA	player1height
   6926  41f4				   .skip268then
   6927  41f4				   .skipL0570
   6928  41f4				   .L0571		;  if frame  =  10  &&  EnemyHit  =  1 then player1:
   6929  41f4
   6930  41f4		       a5 d6		      LDA	frame
   6931  41f6		       c9 0a		      CMP	#10
   6932  41f8		       d0 1e		      BNE	.skipL0571
   6933  41fa				   .condpart270
   6934  41fa		       a5 d9		      LDA	EnemyHit
   6935  41fc		       c9 01		      CMP	#1
   6936  41fe		       d0 18		      BNE	.skip270then
   6937  4200				   .condpart271
   6938  4200		       a9 e2		      lda	#<(playerpointers+0)
   6939  4202		       8d 50 10 	      sta	DF0LOW
   6940  4205		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   6941  4207		       8d 68 10 	      sta	DF0HI
   6942  420a		       a2 9a		      LDX	#<player271then_1
   6943  420c		       8e 78 10 	      STX	DF0WRITE
   6944  420f		       a9 68		      LDA	#((>player271then_1) & $0f) | (((>player271then_1) / 2) & $70)
   6945  4211		       8d 78 10 	      STA	DF0WRITE
   6946  4214		       a9 08		      LDA	#8
   6947  4216		       85 a6		      STA	player1height
   6948  4218				   .skip270then
   6949  4218				   .skipL0571
   6950  4218				   .L0572		;  if frame  =  10 then player2color:
   6951  4218
   6952  4218		       a5 d6		      LDA	frame
   6953  421a		       c9 0a		      CMP	#10
   6954  421c		       d0 14		      BNE	.skipL0572
   6955  421e				   .condpart272
   6956  421e		       a9 f6		      lda	#<(playerpointers+20)
   6957  4220		       8d 50 10 	      sta	DF0LOW
   6958  4223		       a9 01		      lda	#(>(playerpointers+20)) & $0F
   6959  4225		       8d 68 10 	      sta	DF0HI
   6960  4228		       a2 a2		      LDX	#<playercolor272then_2
   6961  422a		       8e 78 10 	      STX	DF0WRITE
   6962  422d		       a9 68		      LDA	#((>playercolor272then_2) & $0f) | (((>playercolor272then_2) / 2) & $70)
   6963  422f		       8d 78 10 	      STA	DF0WRITE
   6964  4232				   .skipL0572
   6965  4232				   .L0573		;  if frame  =  10 then player3color:
   6966  4232
   6967  4232		       a5 d6		      LDA	frame
   6968  4234		       c9 0a		      CMP	#10
   6969  4236		       d0 14		      BNE	.skipL0573
   6970  4238				   .condpart273
   6971  4238		       a9 f8		      lda	#<(playerpointers+22)
   6972  423a		       8d 50 10 	      sta	DF0LOW
   6973  423d		       a9 01		      lda	#(>(playerpointers+22)) & $0F
   6974  423f		       8d 68 10 	      sta	DF0HI
   6975  4242		       a2 aa		      LDX	#<playercolor273then_3
   6976  4244		       8e 78 10 	      STX	DF0WRITE
   6977  4247		       a9 68		      LDA	#((>playercolor273then_3) & $0f) | (((>playercolor273then_3) / 2) & $70)
   6978  4249		       8d 78 10 	      STA	DF0WRITE
   6979  424c				   .skipL0573
   6980  424c				   .L0574		;  if frame  =  10 then player1color:
   6981  424c
   6982  424c		       a5 d6		      LDA	frame
   6983  424e		       c9 0a		      CMP	#10
   6984  4250		       d0 14		      BNE	.skipL0574
   6985  4252				   .condpart274
   6986  4252		       a9 f4		      lda	#<(playerpointers+18)
   6987  4254		       8d 50 10 	      sta	DF0LOW
   6988  4257		       a9 01		      lda	#(>(playerpointers+18)) & $0F
   6989  4259		       8d 68 10 	      sta	DF0HI
   6990  425c		       a2 b2		      LDX	#<playercolor274then_1
   6991  425e		       8e 78 10 	      STX	DF0WRITE
   6992  4261		       a9 68		      LDA	#((>playercolor274then_1) & $0f) | (((>playercolor274then_1) / 2) & $70)
   6993  4263		       8d 78 10 	      STA	DF0WRITE
   6994  4266				   .skipL0574
   6995  4266				   .L0575		;  if frame  =  20  &&  EnemyHit  <  1 then player2:
   6996  4266
   6997  4266		       a5 d6		      LDA	frame
   6998  4268		       c9 14		      CMP	#20
   6999  426a		       d0 1e		      BNE	.skipL0575
   7000  426c				   .condpart275
   7001  426c		       a5 d9		      LDA	EnemyHit
   7002  426e		       c9 01		      CMP	#1
   7003  4270		       b0 18		      BCS	.skip275then
   7004  4272				   .condpart276
   7005  4272		       a9 e4		      lda	#<(playerpointers+2)
   7006  4274		       8d 50 10 	      sta	DF0LOW
   7007  4277		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   7008  4279		       8d 68 10 	      sta	DF0HI
   7009  427c		       a2 ba		      LDX	#<player276then_2
   7010  427e		       8e 78 10 	      STX	DF0WRITE
   7011  4281		       a9 68		      LDA	#((>player276then_2) & $0f) | (((>player276then_2) / 2) & $70)
   7012  4283		       8d 78 10 	      STA	DF0WRITE
   7013  4286		       a9 08		      LDA	#8
   7014  4288		       85 a7		      STA	player2height
   7015  428a				   .skip275then
   7016  428a				   .skipL0575
   7017  428a				   .L0576		;  if frame  =  20  &&  EnemyHit  = 2 then player2:
   7018  428a
   7019  428a		       a5 d6		      LDA	frame
   7020  428c		       c9 14		      CMP	#20
   7021  428e		       d0 1e		      BNE	.skipL0576
   7022  4290				   .condpart277
   7023  4290		       a5 d9		      LDA	EnemyHit
   7024  4292		       c9 02		      CMP	#2
   7025  4294		       d0 18		      BNE	.skip277then
   7026  4296				   .condpart278
   7027  4296		       a9 e4		      lda	#<(playerpointers+2)
   7028  4298		       8d 50 10 	      sta	DF0LOW
   7029  429b		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   7030  429d		       8d 68 10 	      sta	DF0HI
   7031  42a0		       a2 c2		      LDX	#<player278then_2
   7032  42a2		       8e 78 10 	      STX	DF0WRITE
   7033  42a5		       a9 68		      LDA	#((>player278then_2) & $0f) | (((>player278then_2) / 2) & $70)
   7034  42a7		       8d 78 10 	      STA	DF0WRITE
   7035  42aa		       a9 08		      LDA	#8
   7036  42ac		       85 a7		      STA	player2height
   7037  42ae				   .skip277then
   7038  42ae				   .skipL0576
   7039  42ae				   .L0577		;  if frame  =  20  &&  EnemyHit  <  1 then player3:
   7040  42ae
   7041  42ae		       a5 d6		      LDA	frame
   7042  42b0		       c9 14		      CMP	#20
   7043  42b2		       d0 1e		      BNE	.skipL0577
   7044  42b4				   .condpart279
   7045  42b4		       a5 d9		      LDA	EnemyHit
   7046  42b6		       c9 01		      CMP	#1
   7047  42b8		       b0 18		      BCS	.skip279then
   7048  42ba				   .condpart280
   7049  42ba		       a9 e6		      lda	#<(playerpointers+4)
   7050  42bc		       8d 50 10 	      sta	DF0LOW
   7051  42bf		       a9 01		      lda	#(>(playerpointers+4)) & $0F
   7052  42c1		       8d 68 10 	      sta	DF0HI
   7053  42c4		       a2 ca		      LDX	#<player280then_3
   7054  42c6		       8e 78 10 	      STX	DF0WRITE
   7055  42c9		       a9 68		      LDA	#((>player280then_3) & $0f) | (((>player280then_3) / 2) & $70)
   7056  42cb		       8d 78 10 	      STA	DF0WRITE
   7057  42ce		       a9 08		      LDA	#8
   7058  42d0		       85 a8		      STA	player3height
   7059  42d2				   .skip279then
   7060  42d2				   .skipL0577
   7061  42d2				   .L0578		;  if frame  =  20  &&  EnemyHit  = 3 then player3:
   7062  42d2
   7063  42d2		       a5 d6		      LDA	frame
   7064  42d4		       c9 14		      CMP	#20
   7065  42d6		       d0 1e		      BNE	.skipL0578
   7066  42d8				   .condpart281
   7067  42d8		       a5 d9		      LDA	EnemyHit
   7068  42da		       c9 03		      CMP	#3
   7069  42dc		       d0 18		      BNE	.skip281then
   7070  42de				   .condpart282
   7071  42de		       a9 e6		      lda	#<(playerpointers+4)
   7072  42e0		       8d 50 10 	      sta	DF0LOW
   7073  42e3		       a9 01		      lda	#(>(playerpointers+4)) & $0F
   7074  42e5		       8d 68 10 	      sta	DF0HI
   7075  42e8		       a2 d2		      LDX	#<player282then_3
   7076  42ea		       8e 78 10 	      STX	DF0WRITE
   7077  42ed		       a9 68		      LDA	#((>player282then_3) & $0f) | (((>player282then_3) / 2) & $70)
   7078  42ef		       8d 78 10 	      STA	DF0WRITE
   7079  42f2		       a9 08		      LDA	#8
   7080  42f4		       85 a8		      STA	player3height
   7081  42f6				   .skip281then
   7082  42f6				   .skipL0578
   7083  42f6				   .L0579		;  if frame  =  20  &&  EnemyHit  <  1 then player1:
   7084  42f6
   7085  42f6		       a5 d6		      LDA	frame
   7086  42f8		       c9 14		      CMP	#20
   7087  42fa		       d0 1e		      BNE	.skipL0579
   7088  42fc				   .condpart283
   7089  42fc		       a5 d9		      LDA	EnemyHit
   7090  42fe		       c9 01		      CMP	#1
   7091  4300		       b0 18		      BCS	.skip283then
   7092  4302				   .condpart284
   7093  4302		       a9 e2		      lda	#<(playerpointers+0)
   7094  4304		       8d 50 10 	      sta	DF0LOW
   7095  4307		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   7096  4309		       8d 68 10 	      sta	DF0HI
   7097  430c		       a2 da		      LDX	#<player284then_1
   7098  430e		       8e 78 10 	      STX	DF0WRITE
   7099  4311		       a9 68		      LDA	#((>player284then_1) & $0f) | (((>player284then_1) / 2) & $70)
   7100  4313		       8d 78 10 	      STA	DF0WRITE
   7101  4316		       a9 08		      LDA	#8
   7102  4318		       85 a6		      STA	player1height
   7103  431a				   .skip283then
   7104  431a				   .skipL0579
   7105  431a				   .L0580		;  if frame  =  20  &&  EnemyHit  =  1 then player1:
   7106  431a
   7107  431a		       a5 d6		      LDA	frame
   7108  431c		       c9 14		      CMP	#20
   7109  431e		       d0 1e		      BNE	.skipL0580
   7110  4320				   .condpart285
   7111  4320		       a5 d9		      LDA	EnemyHit
   7112  4322		       c9 01		      CMP	#1
   7113  4324		       d0 18		      BNE	.skip285then
   7114  4326				   .condpart286
   7115  4326		       a9 e2		      lda	#<(playerpointers+0)
   7116  4328		       8d 50 10 	      sta	DF0LOW
   7117  432b		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   7118  432d		       8d 68 10 	      sta	DF0HI
   7119  4330		       a2 e2		      LDX	#<player286then_1
   7120  4332		       8e 78 10 	      STX	DF0WRITE
   7121  4335		       a9 68		      LDA	#((>player286then_1) & $0f) | (((>player286then_1) / 2) & $70)
   7122  4337		       8d 78 10 	      STA	DF0WRITE
   7123  433a		       a9 08		      LDA	#8
   7124  433c		       85 a6		      STA	player1height
   7125  433e				   .skip285then
   7126  433e				   .skipL0580
   7127  433e				   .L0581		;  if frame  =  20 then player2color:
   7128  433e
   7129  433e		       a5 d6		      LDA	frame
   7130  4340		       c9 14		      CMP	#20
   7131  4342		       d0 14		      BNE	.skipL0581
   7132  4344				   .condpart287
   7133  4344		       a9 f6		      lda	#<(playerpointers+20)
   7134  4346		       8d 50 10 	      sta	DF0LOW
   7135  4349		       a9 01		      lda	#(>(playerpointers+20)) & $0F
   7136  434b		       8d 68 10 	      sta	DF0HI
   7137  434e		       a2 ea		      LDX	#<playercolor287then_2
   7138  4350		       8e 78 10 	      STX	DF0WRITE
   7139  4353		       a9 68		      LDA	#((>playercolor287then_2) & $0f) | (((>playercolor287then_2) / 2) & $70)
   7140  4355		       8d 78 10 	      STA	DF0WRITE
   7141  4358				   .skipL0581
   7142  4358				   .L0582		;  if frame  =  20 then player3color:
   7143  4358
   7144  4358		       a5 d6		      LDA	frame
   7145  435a		       c9 14		      CMP	#20
   7146  435c		       d0 14		      BNE	.skipL0582
   7147  435e				   .condpart288
   7148  435e		       a9 f8		      lda	#<(playerpointers+22)
   7149  4360		       8d 50 10 	      sta	DF0LOW
   7150  4363		       a9 01		      lda	#(>(playerpointers+22)) & $0F
   7151  4365		       8d 68 10 	      sta	DF0HI
   7152  4368		       a2 f2		      LDX	#<playercolor288then_3
   7153  436a		       8e 78 10 	      STX	DF0WRITE
   7154  436d		       a9 68		      LDA	#((>playercolor288then_3) & $0f) | (((>playercolor288then_3) / 2) & $70)
   7155  436f		       8d 78 10 	      STA	DF0WRITE
   7156  4372				   .skipL0582
   7157  4372				   .L0583		;  if frame  =  20 then player1color:
   7158  4372
   7159  4372		       a5 d6		      LDA	frame
   7160  4374		       c9 14		      CMP	#20
   7161  4376		       d0 14		      BNE	.skipL0583
   7162  4378				   .condpart289
   7163  4378		       a9 f4		      lda	#<(playerpointers+18)
   7164  437a		       8d 50 10 	      sta	DF0LOW
   7165  437d		       a9 01		      lda	#(>(playerpointers+18)) & $0F
   7166  437f		       8d 68 10 	      sta	DF0HI
   7167  4382		       a2 fa		      LDX	#<playercolor289then_1
   7168  4384		       8e 78 10 	      STX	DF0WRITE
   7169  4387		       a9 68		      LDA	#((>playercolor289then_1) & $0f) | (((>playercolor289then_1) / 2) & $70)
   7170  4389		       8d 78 10 	      STA	DF0WRITE
   7171  438c				   .skipL0583
   7172  438c				   .L0584		;  if frame  =  30  &&  EnemyHit  <  1 then player2:
   7173  438c
   7174  438c		       a5 d6		      LDA	frame
   7175  438e		       c9 1e		      CMP	#30
   7176  4390		       d0 1e		      BNE	.skipL0584
   7177  4392				   .condpart290
   7178  4392		       a5 d9		      LDA	EnemyHit
   7179  4394		       c9 01		      CMP	#1
   7180  4396		       b0 18		      BCS	.skip290then
   7181  4398				   .condpart291
   7182  4398		       a9 e4		      lda	#<(playerpointers+2)
   7183  439a		       8d 50 10 	      sta	DF0LOW
   7184  439d		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   7185  439f		       8d 68 10 	      sta	DF0HI
   7186  43a2		       a2 02		      LDX	#<player291then_2
   7187  43a4		       8e 78 10 	      STX	DF0WRITE
   7188  43a7		       a9 69		      LDA	#((>player291then_2) & $0f) | (((>player291then_2) / 2) & $70)
   7189  43a9		       8d 78 10 	      STA	DF0WRITE
   7190  43ac		       a9 08		      LDA	#8
   7191  43ae		       85 a7		      STA	player2height
   7192  43b0				   .skip290then
   7193  43b0				   .skipL0584
   7194  43b0				   .L0585		;  if frame  =  30  &&  EnemyHit  =  2 then player2:
   7195  43b0
   7196  43b0		       a5 d6		      LDA	frame
   7197  43b2		       c9 1e		      CMP	#30
   7198  43b4		       d0 1e		      BNE	.skipL0585
   7199  43b6				   .condpart292
   7200  43b6		       a5 d9		      LDA	EnemyHit
   7201  43b8		       c9 02		      CMP	#2
   7202  43ba		       d0 18		      BNE	.skip292then
   7203  43bc				   .condpart293
   7204  43bc		       a9 e4		      lda	#<(playerpointers+2)
   7205  43be		       8d 50 10 	      sta	DF0LOW
   7206  43c1		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   7207  43c3		       8d 68 10 	      sta	DF0HI
   7208  43c6		       a2 0a		      LDX	#<player293then_2
   7209  43c8		       8e 78 10 	      STX	DF0WRITE
   7210  43cb		       a9 69		      LDA	#((>player293then_2) & $0f) | (((>player293then_2) / 2) & $70)
   7211  43cd		       8d 78 10 	      STA	DF0WRITE
   7212  43d0		       a9 08		      LDA	#8
   7213  43d2		       85 a7		      STA	player2height
   7214  43d4				   .skip292then
   7215  43d4				   .skipL0585
   7216  43d4				   .L0586		;  if frame  =  30 then player3:
   7217  43d4
   7218  43d4		       a5 d6		      LDA	frame
   7219  43d6		       c9 1e		      CMP	#30
   7220  43d8		       d0 18		      BNE	.skipL0586
   7221  43da				   .condpart294
   7222  43da		       a9 e6		      lda	#<(playerpointers+4)
   7223  43dc		       8d 50 10 	      sta	DF0LOW
   7224  43df		       a9 01		      lda	#(>(playerpointers+4)) & $0F
   7225  43e1		       8d 68 10 	      sta	DF0HI
   7226  43e4		       a2 12		      LDX	#<player294then_3
   7227  43e6		       8e 78 10 	      STX	DF0WRITE
   7228  43e9		       a9 69		      LDA	#((>player294then_3) & $0f) | (((>player294then_3) / 2) & $70)
   7229  43eb		       8d 78 10 	      STA	DF0WRITE
   7230  43ee		       a9 08		      LDA	#8
   7231  43f0		       85 a8		      STA	player3height
   7232  43f2				   .skipL0586
   7233  43f2				   .L0587		;  if frame  =  30  &&  EnemyHit  <  1 then player1:
   7234  43f2
   7235  43f2		       a5 d6		      LDA	frame
   7236  43f4		       c9 1e		      CMP	#30
   7237  43f6		       d0 1e		      BNE	.skipL0587
   7238  43f8				   .condpart295
   7239  43f8		       a5 d9		      LDA	EnemyHit
   7240  43fa		       c9 01		      CMP	#1
   7241  43fc		       b0 18		      BCS	.skip295then
   7242  43fe				   .condpart296
   7243  43fe		       a9 e2		      lda	#<(playerpointers+0)
   7244  4400		       8d 50 10 	      sta	DF0LOW
   7245  4403		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   7246  4405		       8d 68 10 	      sta	DF0HI
   7247  4408		       a2 1a		      LDX	#<player296then_1
   7248  440a		       8e 78 10 	      STX	DF0WRITE
   7249  440d		       a9 69		      LDA	#((>player296then_1) & $0f) | (((>player296then_1) / 2) & $70)
   7250  440f		       8d 78 10 	      STA	DF0WRITE
   7251  4412		       a9 08		      LDA	#8
   7252  4414		       85 a6		      STA	player1height
   7253  4416				   .skip295then
   7254  4416				   .skipL0587
   7255  4416				   .L0588		;  if frame  =  30  &&  EnemyHit  =  1 then player1:
   7256  4416
   7257  4416		       a5 d6		      LDA	frame
   7258  4418		       c9 1e		      CMP	#30
   7259  441a		       d0 1e		      BNE	.skipL0588
   7260  441c				   .condpart297
   7261  441c		       a5 d9		      LDA	EnemyHit
   7262  441e		       c9 01		      CMP	#1
   7263  4420		       d0 18		      BNE	.skip297then
   7264  4422				   .condpart298
   7265  4422		       a9 e2		      lda	#<(playerpointers+0)
   7266  4424		       8d 50 10 	      sta	DF0LOW
   7267  4427		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   7268  4429		       8d 68 10 	      sta	DF0HI
   7269  442c		       a2 22		      LDX	#<player298then_1
   7270  442e		       8e 78 10 	      STX	DF0WRITE
   7271  4431		       a9 69		      LDA	#((>player298then_1) & $0f) | (((>player298then_1) / 2) & $70)
   7272  4433		       8d 78 10 	      STA	DF0WRITE
   7273  4436		       a9 08		      LDA	#8
   7274  4438		       85 a6		      STA	player1height
   7275  443a				   .skip297then
   7276  443a				   .skipL0588
   7277  443a				   .L0589		;  if frame  =  30 then player2color:
   7278  443a
   7279  443a		       a5 d6		      LDA	frame
   7280  443c		       c9 1e		      CMP	#30
   7281  443e		       d0 14		      BNE	.skipL0589
   7282  4440				   .condpart299
   7283  4440		       a9 f6		      lda	#<(playerpointers+20)
   7284  4442		       8d 50 10 	      sta	DF0LOW
   7285  4445		       a9 01		      lda	#(>(playerpointers+20)) & $0F
   7286  4447		       8d 68 10 	      sta	DF0HI
   7287  444a		       a2 2a		      LDX	#<playercolor299then_2
   7288  444c		       8e 78 10 	      STX	DF0WRITE
   7289  444f		       a9 69		      LDA	#((>playercolor299then_2) & $0f) | (((>playercolor299then_2) / 2) & $70)
   7290  4451		       8d 78 10 	      STA	DF0WRITE
   7291  4454				   .skipL0589
   7292  4454				   .L0590		;  if frame  =  30 then player3color:
   7293  4454
   7294  4454		       a5 d6		      LDA	frame
   7295  4456		       c9 1e		      CMP	#30
   7296  4458		       d0 14		      BNE	.skipL0590
   7297  445a				   .condpart300
   7298  445a		       a9 f8		      lda	#<(playerpointers+22)
   7299  445c		       8d 50 10 	      sta	DF0LOW
   7300  445f		       a9 01		      lda	#(>(playerpointers+22)) & $0F
   7301  4461		       8d 68 10 	      sta	DF0HI
   7302  4464		       a2 32		      LDX	#<playercolor300then_3
   7303  4466		       8e 78 10 	      STX	DF0WRITE
   7304  4469		       a9 69		      LDA	#((>playercolor300then_3) & $0f) | (((>playercolor300then_3) / 2) & $70)
   7305  446b		       8d 78 10 	      STA	DF0WRITE
   7306  446e				   .skipL0590
   7307  446e				   .L0591		;  if frame  =  30 then player1color:
   7308  446e
   7309  446e		       a5 d6		      LDA	frame
   7310  4470		       c9 1e		      CMP	#30
   7311  4472		       d0 14		      BNE	.skipL0591
   7312  4474				   .condpart301
   7313  4474		       a9 f4		      lda	#<(playerpointers+18)
   7314  4476		       8d 50 10 	      sta	DF0LOW
   7315  4479		       a9 01		      lda	#(>(playerpointers+18)) & $0F
   7316  447b		       8d 68 10 	      sta	DF0HI
   7317  447e		       a2 3a		      LDX	#<playercolor301then_1
   7318  4480		       8e 78 10 	      STX	DF0WRITE
   7319  4483		       a9 69		      LDA	#((>playercolor301then_1) & $0f) | (((>playercolor301then_1) / 2) & $70)
   7320  4485		       8d 78 10 	      STA	DF0WRITE
   7321  4488				   .skipL0591
   7322  4488				   .__Fire_Animation
   7323  4488							; __Fire_Animation
   7324  4488
   7325  4488				   .L0592		;  if f  =  10 then player5:
   7326  4488
   7327  4488		       a5 d6		      LDA	f
   7328  448a		       c9 0a		      CMP	#10
   7329  448c		       d0 18		      BNE	.skipL0592
   7330  448e				   .condpart302
   7331  448e		       a9 ea		      lda	#<(playerpointers+8)
   7332  4490		       8d 50 10 	      sta	DF0LOW
   7333  4493		       a9 01		      lda	#(>(playerpointers+8)) & $0F
   7334  4495		       8d 68 10 	      sta	DF0HI
   7335  4498		       a2 42		      LDX	#<player302then_5
   7336  449a		       8e 78 10 	      STX	DF0WRITE
   7337  449d		       a9 69		      LDA	#((>player302then_5) & $0f) | (((>player302then_5) / 2) & $70)
   7338  449f		       8d 78 10 	      STA	DF0WRITE
   7339  44a2		       a9 08		      LDA	#8
   7340  44a4		       85 aa		      STA	player5height
   7341  44a6				   .skipL0592
   7342  44a6				   .
   7343  44a6							; 
   7344  44a6
   7345  44a6				   .L0593		;  if f  =  10 then player5color:
   7346  44a6
   7347  44a6		       a5 d6		      LDA	f
   7348  44a8		       c9 0a		      CMP	#10
   7349  44aa		       d0 14		      BNE	.skipL0593
   7350  44ac				   .condpart303
   7351  44ac		       a9 fc		      lda	#<(playerpointers+26)
   7352  44ae		       8d 50 10 	      sta	DF0LOW
   7353  44b1		       a9 01		      lda	#(>(playerpointers+26)) & $0F
   7354  44b3		       8d 68 10 	      sta	DF0HI
   7355  44b6		       a2 4a		      LDX	#<playercolor303then_5
   7356  44b8		       8e 78 10 	      STX	DF0WRITE
   7357  44bb		       a9 69		      LDA	#((>playercolor303then_5) & $0f) | (((>playercolor303then_5) / 2) & $70)
   7358  44bd		       8d 78 10 	      STA	DF0WRITE
   7359  44c0				   .skipL0593
   7360  44c0				   .L0594		;  if f  =  20 then player5:
   7361  44c0
   7362  44c0		       a5 d6		      LDA	f
   7363  44c2		       c9 14		      CMP	#20
   7364  44c4		       d0 18		      BNE	.skipL0594
   7365  44c6				   .condpart304
   7366  44c6		       a9 ea		      lda	#<(playerpointers+8)
   7367  44c8		       8d 50 10 	      sta	DF0LOW
   7368  44cb		       a9 01		      lda	#(>(playerpointers+8)) & $0F
   7369  44cd		       8d 68 10 	      sta	DF0HI
   7370  44d0		       a2 52		      LDX	#<player304then_5
   7371  44d2		       8e 78 10 	      STX	DF0WRITE
   7372  44d5		       a9 69		      LDA	#((>player304then_5) & $0f) | (((>player304then_5) / 2) & $70)
   7373  44d7		       8d 78 10 	      STA	DF0WRITE
   7374  44da		       a9 08		      LDA	#8
   7375  44dc		       85 aa		      STA	player5height
   7376  44de				   .skipL0594
   7377  44de				   .L0595		;  if f  =  20 then player5color:
   7378  44de
   7379  44de		       a5 d6		      LDA	f
   7380  44e0		       c9 14		      CMP	#20
   7381  44e2		       d0 14		      BNE	.skipL0595
   7382  44e4				   .condpart305
   7383  44e4		       a9 fc		      lda	#<(playerpointers+26)
   7384  44e6		       8d 50 10 	      sta	DF0LOW
   7385  44e9		       a9 01		      lda	#(>(playerpointers+26)) & $0F
   7386  44eb		       8d 68 10 	      sta	DF0HI
   7387  44ee		       a2 5a		      LDX	#<playercolor305then_5
   7388  44f0		       8e 78 10 	      STX	DF0WRITE
   7389  44f3		       a9 69		      LDA	#((>playercolor305then_5) & $0f) | (((>playercolor305then_5) / 2) & $70)
   7390  44f5		       8d 78 10 	      STA	DF0WRITE
   7391  44f8				   .skipL0595
   7392  44f8				   .L0596		;  if f  =  30 then player5:
   7393  44f8
   7394  44f8		       a5 d6		      LDA	f
   7395  44fa		       c9 1e		      CMP	#30
   7396  44fc		       d0 18		      BNE	.skipL0596
   7397  44fe				   .condpart306
   7398  44fe		       a9 ea		      lda	#<(playerpointers+8)
   7399  4500		       8d 50 10 	      sta	DF0LOW
   7400  4503		       a9 01		      lda	#(>(playerpointers+8)) & $0F
   7401  4505		       8d 68 10 	      sta	DF0HI
   7402  4508		       a2 62		      LDX	#<player306then_5
   7403  450a		       8e 78 10 	      STX	DF0WRITE
   7404  450d		       a9 69		      LDA	#((>player306then_5) & $0f) | (((>player306then_5) / 2) & $70)
   7405  450f		       8d 78 10 	      STA	DF0WRITE
   7406  4512		       a9 08		      LDA	#8
   7407  4514		       85 aa		      STA	player5height
   7408  4516				   .skipL0596
   7409  4516				   .L0597		;  if f  =  30 then player5color:
   7410  4516
   7411  4516		       a5 d6		      LDA	f
   7412  4518		       c9 1e		      CMP	#30
   7413  451a		       d0 14		      BNE	.skipL0597
   7414  451c				   .condpart307
   7415  451c		       a9 fc		      lda	#<(playerpointers+26)
   7416  451e		       8d 50 10 	      sta	DF0LOW
   7417  4521		       a9 01		      lda	#(>(playerpointers+26)) & $0F
   7418  4523		       8d 68 10 	      sta	DF0HI
   7419  4526		       a2 6a		      LDX	#<playercolor307then_5
   7420  4528		       8e 78 10 	      STX	DF0WRITE
   7421  452b		       a9 69		      LDA	#((>playercolor307then_5) & $0f) | (((>playercolor307then_5) / 2) & $70)
   7422  452d		       8d 78 10 	      STA	DF0WRITE
   7423  4530				   .skipL0597
   7424  4530				   .L0598		;  if frame  >  0  &&	Powerup  =  1 then player4:
   7425  4530
   7426  4530		       a9 00		      LDA	#0
   7427  4532		       c5 d6		      CMP	frame
   7428  4534		       b0 1e		      BCS	.skipL0598
   7429  4536				   .condpart308
   7430  4536		       a5 ee		      LDA	Powerup
   7431  4538		       c9 01		      CMP	#1
   7432  453a		       d0 18		      BNE	.skip308then
   7433  453c				   .condpart309
   7434  453c		       a9 e8		      lda	#<(playerpointers+6)
   7435  453e		       8d 50 10 	      sta	DF0LOW
   7436  4541		       a9 01		      lda	#(>(playerpointers+6)) & $0F
   7437  4543		       8d 68 10 	      sta	DF0HI
   7438  4546		       a2 72		      LDX	#<player309then_4
   7439  4548		       8e 78 10 	      STX	DF0WRITE
   7440  454b		       a9 69		      LDA	#((>player309then_4) & $0f) | (((>player309then_4) / 2) & $70)
   7441  454d		       8d 78 10 	      STA	DF0WRITE
   7442  4550		       a9 09		      LDA	#9
   7443  4552		       85 a9		      STA	player4height
   7444  4554				   .skip308then
   7445  4554				   .skipL0598
   7446  4554				   .L0599		;  if frame  > 0  &&  Powerup	=  1 then player4color:
   7447  4554
   7448  4554		       a9 00		      LDA	#0
   7449  4556		       c5 d6		      CMP	frame
   7450  4558		       b0 1a		      BCS	.skipL0599
   7451  455a				   .condpart310
   7452  455a		       a5 ee		      LDA	Powerup
   7453  455c		       c9 01		      CMP	#1
   7454  455e		       d0 14		      BNE	.skip310then
   7455  4560				   .condpart311
   7456  4560		       a9 fa		      lda	#<(playerpointers+24)
   7457  4562		       8d 50 10 	      sta	DF0LOW
   7458  4565		       a9 01		      lda	#(>(playerpointers+24)) & $0F
   7459  4567		       8d 68 10 	      sta	DF0HI
   7460  456a		       a2 7b		      LDX	#<playercolor311then_4
   7461  456c		       8e 78 10 	      STX	DF0WRITE
   7462  456f		       a9 69		      LDA	#((>playercolor311then_4) & $0f) | (((>playercolor311then_4) / 2) & $70)
   7463  4571		       8d 78 10 	      STA	DF0WRITE
   7464  4574				   .skip310then
   7465  4574				   .skipL0599
   7466  4574				   .
   7467  4574							; 
   7468  4574
   7469  4574				   .L0600		;  if frame  <  16  &&  Powerup  = 2 then player4:
   7470  4574
   7471  4574		       a5 d6		      LDA	frame
   7472  4576		       c9 10		      CMP	#16
   7473  4578		       b0 1e		      BCS	.skipL0600
   7474  457a				   .condpart312
   7475  457a		       a5 ee		      LDA	Powerup
   7476  457c		       c9 02		      CMP	#2
   7477  457e		       d0 18		      BNE	.skip312then
   7478  4580				   .condpart313
   7479  4580		       a9 e8		      lda	#<(playerpointers+6)
   7480  4582		       8d 50 10 	      sta	DF0LOW
   7481  4585		       a9 01		      lda	#(>(playerpointers+6)) & $0F
   7482  4587		       8d 68 10 	      sta	DF0HI
   7483  458a		       a2 84		      LDX	#<player313then_4
   7484  458c		       8e 78 10 	      STX	DF0WRITE
   7485  458f		       a9 69		      LDA	#((>player313then_4) & $0f) | (((>player313then_4) / 2) & $70)
   7486  4591		       8d 78 10 	      STA	DF0WRITE
   7487  4594		       a9 09		      LDA	#9
   7488  4596		       85 a9		      STA	player4height
   7489  4598				   .skip312then
   7490  4598				   .skipL0600
   7491  4598				   .
   7492  4598							; 
   7493  4598
   7494  4598				   .L0601		;  if frame  < 16  &&	Powerup  = 2 then player4color:
   7495  4598
   7496  4598		       a5 d6		      LDA	frame
   7497  459a		       c9 10		      CMP	#16
   7498  459c		       b0 1a		      BCS	.skipL0601
   7499  459e				   .condpart314
   7500  459e		       a5 ee		      LDA	Powerup
   7501  45a0		       c9 02		      CMP	#2
   7502  45a2		       d0 14		      BNE	.skip314then
   7503  45a4				   .condpart315
   7504  45a4		       a9 fa		      lda	#<(playerpointers+24)
   7505  45a6		       8d 50 10 	      sta	DF0LOW
   7506  45a9		       a9 01		      lda	#(>(playerpointers+24)) & $0F
   7507  45ab		       8d 68 10 	      sta	DF0HI
   7508  45ae		       a2 8d		      LDX	#<playercolor315then_4
   7509  45b0		       8e 78 10 	      STX	DF0WRITE
   7510  45b3		       a9 69		      LDA	#((>playercolor315then_4) & $0f) | (((>playercolor315then_4) / 2) & $70)
   7511  45b5		       8d 78 10 	      STA	DF0WRITE
   7512  45b8				   .skip314then
   7513  45b8				   .skipL0601
   7514  45b8				   .
   7515  45b8							; 
   7516  45b8
   7517  45b8				   .L0602		;  if frame  > 15  &&	Powerup  = 2 then player4color:
   7518  45b8
   7519  45b8		       a9 0f		      LDA	#15
   7520  45ba		       c5 d6		      CMP	frame
   7521  45bc		       b0 1a		      BCS	.skipL0602
   7522  45be				   .condpart316
   7523  45be		       a5 ee		      LDA	Powerup
   7524  45c0		       c9 02		      CMP	#2
   7525  45c2		       d0 14		      BNE	.skip316then
   7526  45c4				   .condpart317
   7527  45c4		       a9 fa		      lda	#<(playerpointers+24)
   7528  45c6		       8d 50 10 	      sta	DF0LOW
   7529  45c9		       a9 01		      lda	#(>(playerpointers+24)) & $0F
   7530  45cb		       8d 68 10 	      sta	DF0HI
   7531  45ce		       a2 96		      LDX	#<playercolor317then_4
   7532  45d0		       8e 78 10 	      STX	DF0WRITE
   7533  45d3		       a9 69		      LDA	#((>playercolor317then_4) & $0f) | (((>playercolor317then_4) / 2) & $70)
   7534  45d5		       8d 78 10 	      STA	DF0WRITE
   7535  45d8				   .skip316then
   7536  45d8				   .skipL0602
   7537  45d8				   .
   7538  45d8							; 
   7539  45d8
   7540  45d8				   .L0603		;  if frame  >  0  &&	Powerup  <  1 then player4:
   7541  45d8
   7542  45d8		       a9 00		      LDA	#0
   7543  45da		       c5 d6		      CMP	frame
   7544  45dc		       b0 1e		      BCS	.skipL0603
   7545  45de				   .condpart318
   7546  45de		       a5 ee		      LDA	Powerup
   7547  45e0		       c9 01		      CMP	#1
   7548  45e2		       b0 18		      BCS	.skip318then
   7549  45e4				   .condpart319
   7550  45e4		       a9 e8		      lda	#<(playerpointers+6)
   7551  45e6		       8d 50 10 	      sta	DF0LOW
   7552  45e9		       a9 01		      lda	#(>(playerpointers+6)) & $0F
   7553  45eb		       8d 68 10 	      sta	DF0HI
   7554  45ee		       a2 9f		      LDX	#<player319then_4
   7555  45f0		       8e 78 10 	      STX	DF0WRITE
   7556  45f3		       a9 69		      LDA	#((>player319then_4) & $0f) | (((>player319then_4) / 2) & $70)
   7557  45f5		       8d 78 10 	      STA	DF0WRITE
   7558  45f8		       a9 09		      LDA	#9
   7559  45fa		       85 a9		      STA	player4height
   7560  45fc				   .skip318then
   7561  45fc				   .skipL0603
   7562  45fc				   .L0604		;  if frame  <  16  &&  Powerup  <  1 then player4color:
   7563  45fc
   7564  45fc		       a5 d6		      LDA	frame
   7565  45fe		       c9 10		      CMP	#16
   7566  4600		       b0 1a		      BCS	.skipL0604
   7567  4602				   .condpart320
   7568  4602		       a5 ee		      LDA	Powerup
   7569  4604		       c9 01		      CMP	#1
   7570  4606		       b0 14		      BCS	.skip320then
   7571  4608				   .condpart321
   7572  4608		       a9 fa		      lda	#<(playerpointers+24)
   7573  460a		       8d 50 10 	      sta	DF0LOW
   7574  460d		       a9 01		      lda	#(>(playerpointers+24)) & $0F
   7575  460f		       8d 68 10 	      sta	DF0HI
   7576  4612		       a2 a8		      LDX	#<playercolor321then_4
   7577  4614		       8e 78 10 	      STX	DF0WRITE
   7578  4617		       a9 69		      LDA	#((>playercolor321then_4) & $0f) | (((>playercolor321then_4) / 2) & $70)
   7579  4619		       8d 78 10 	      STA	DF0WRITE
   7580  461c				   .skip320then
   7581  461c				   .skipL0604
   7582  461c				   .
   7583  461c							; 
   7584  461c
   7585  461c				   .L0605		;  if frame  > 15  &&	Powerup  <  1 then player4color:
   7586  461c
   7587  461c		       a9 0f		      LDA	#15
   7588  461e		       c5 d6		      CMP	frame
   7589  4620		       b0 1a		      BCS	.skipL0605
   7590  4622				   .condpart322
   7591  4622		       a5 ee		      LDA	Powerup
   7592  4624		       c9 01		      CMP	#1
   7593  4626		       b0 14		      BCS	.skip322then
   7594  4628				   .condpart323
   7595  4628		       a9 fa		      lda	#<(playerpointers+24)
   7596  462a		       8d 50 10 	      sta	DF0LOW
   7597  462d		       a9 01		      lda	#(>(playerpointers+24)) & $0F
   7598  462f		       8d 68 10 	      sta	DF0HI
   7599  4632		       a2 b1		      LDX	#<playercolor323then_4
   7600  4634		       8e 78 10 	      STX	DF0WRITE
   7601  4637		       a9 69		      LDA	#((>playercolor323then_4) & $0f) | (((>playercolor323then_4) / 2) & $70)
   7602  4639		       8d 78 10 	      STA	DF0WRITE
   7603  463c				   .skip322then
   7604  463c				   .skipL0605
   7605  463c				   .
   7606  463c							; 
   7607  463c
   7608  463c				   .L0606		;  if frame  >=  30  &&  EnemyHit  = 1 then player1y = 200  :	EnemyHit  = 0
   7609  463c
   7610  463c		       a5 d6		      LDA	frame
   7611  463e		       c9 1e		      CMP	#30
   7612  4640		       90 0e		      BCC	.skipL0606
   7613  4642				   .condpart324
   7614  4642		       a5 d9		      LDA	EnemyHit
   7615  4644		       c9 01		      CMP	#1
   7616  4646		       d0 08		      BNE	.skip324then
   7617  4648				   .condpart325
   7618  4648		       a9 c8		      LDA	#200
   7619  464a		       85 9a		      STA	player1y
   7620  464c		       a9 00		      LDA	#0
   7621  464e		       85 d9		      STA	EnemyHit
   7622  4650				   .skip324then
   7623  4650				   .skipL0606
   7624  4650				   .L0607		;  if frame  >=  30  &&  EnemyHit  = 2 then player2y = 200  :	EnemyHit  = 0
   7625  4650
   7626  4650		       a5 d6		      LDA	frame
   7627  4652		       c9 1e		      CMP	#30
   7628  4654		       90 0e		      BCC	.skipL0607
   7629  4656				   .condpart326
   7630  4656		       a5 d9		      LDA	EnemyHit
   7631  4658		       c9 02		      CMP	#2
   7632  465a		       d0 08		      BNE	.skip326then
   7633  465c				   .condpart327
   7634  465c		       a9 c8		      LDA	#200
   7635  465e		       85 9b		      STA	player2y
   7636  4660		       a9 00		      LDA	#0
   7637  4662		       85 d9		      STA	EnemyHit
   7638  4664				   .skip326then
   7639  4664				   .skipL0607
   7640  4664				   .L0608		;  if frame  >=  30  &&  EnemyHit  = 3 then player3y = 200  :	EnemyHit  = 0
   7641  4664
   7642  4664		       a5 d6		      LDA	frame
   7643  4666		       c9 1e		      CMP	#30
   7644  4668		       90 0e		      BCC	.skipL0608
   7645  466a				   .condpart328
   7646  466a		       a5 d9		      LDA	EnemyHit
   7647  466c		       c9 03		      CMP	#3
   7648  466e		       d0 08		      BNE	.skip328then
   7649  4670				   .condpart329
   7650  4670		       a9 c8		      LDA	#200
   7651  4672		       85 9c		      STA	player3y
   7652  4674		       a9 00		      LDA	#0
   7653  4676		       85 d9		      STA	EnemyHit
   7654  4678				   .skip328then
   7655  4678				   .skipL0608
   7656  4678				   .L0609		;  if frame  >= 30 then frame	= 0  :	PlayerDamage = 0
   7657  4678
   7658  4678		       a5 d6		      LDA	frame
   7659  467a		       c9 1e		      CMP	#30
   7660  467c		       90 06		      BCC	.skipL0609
   7661  467e				   .condpart330
   7662  467e		       a9 00		      LDA	#0
   7663  4680		       85 d6		      STA	frame
   7664  4682		       85 dd		      STA	PlayerDamage
   7665  4684				   .skipL0609
   7666  4684				   .L0610		;  if joy0right then REFP0  =	0
   7667  4684
   7668  4684		       2c 80 02 	      bit	SWCHA
   7669  4687		       30 04		      BMI	.skipL0610
   7670  4689				   .condpart331
   7671  4689		       a9 00		      LDA	#0
   7672  468b		       85 0b		      STA	REFP0
   7673  468d				   .skipL0610
   7674  468d				   .L0611		;  if joy0left then REFP0  =  8
   7675  468d
   7676  468d		       2c 80 02 	      bit	SWCHA
   7677  4690		       70 04		      BVS	.skipL0611
   7678  4692				   .condpart332
   7679  4692		       a9 08		      LDA	#8
   7680  4694		       85 0b		      STA	REFP0
   7681  4696				   .skipL0611
   7682  4696				   .L0612		;  return
   7683  4696
   7684  4696		       ba		      tsx
   7685  4697		       b5 02		      lda	2,x	; check return address
   7686  4699		       49 76		      eor	#(>*)	; vs. current PCH
   7687  469b		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   7688  469d		       f0 03		      beq	*+5	; if equal, do normal return
   7689  469f		       4c e0 df 	      JMP	BS_return
   7690  46a2		       60		      RTS
   7691  46a3				   .
   7692  46a3							; 
   7693  46a3
   7694  46a3				   .__GameOver
   7695  46a3							; __GameOver
   7696  46a3
   7697  46a3				   .L0613		;  Bit4_gameover{4}  =  1
   7698  46a3
   7699  46a3		       a5 ea		      LDA	Bit4_gameover
   7700  46a5		       09 10		      ORA	#16
   7701  46a7		       85 ea		      STA	Bit4_gameover
   7702  46a9				   .L0614		;  Househit  = 1
   7703  46a9
   7704  46a9		       a9 01		      LDA	#1
   7705  46ab		       85 e1		      STA	Househit
   7706  46ad				   .L0615		;  missile0y  = 200 :	missile1y = 200
   7707  46ad
   7708  46ad		       a9 c8		      LDA	#200
   7709  46af		       85 bf		      STA	missile0y
   7710  46b1		       85 c0		      STA	missile1y
   7711  46b3				   .L0616		;  player0y  = 200
   7712  46b3
   7713  46b3		       a9 c8		      LDA	#200
   7714  46b5		       85 99		      STA	player0y
   7715  46b7				   .L0617		;  player1y = 200
   7716  46b7
   7717  46b7		       a9 c8		      LDA	#200
   7718  46b9		       85 9a		      STA	player1y
   7719  46bb				   .L0618		;  player2y = 200
   7720  46bb
   7721  46bb		       a9 c8		      LDA	#200
   7722  46bd		       85 9b		      STA	player2y
   7723  46bf				   .L0619		;  player3y = 200
   7724  46bf
   7725  46bf		       a9 c8		      LDA	#200
   7726  46c1		       85 9c		      STA	player3y
   7727  46c3				   .L0620		;  player4y = 200
   7728  46c3
   7729  46c3		       a9 c8		      LDA	#200
   7730  46c5		       85 9d		      STA	player4y
   7731  46c7				   .L0621		;  player5y = 200
   7732  46c7
   7733  46c7		       a9 c8		      LDA	#200
   7734  46c9		       85 9e		      STA	player5y
   7735  46cb				   .L0622		;  player6y = 200
   7736  46cb
   7737  46cb		       a9 c8		      LDA	#200
   7738  46cd		       85 9f		      STA	player6y
   7739  46cf				   .L0623		;  player7y  = 200
   7740  46cf
   7741  46cf		       a9 c8		      LDA	#200
   7742  46d1		       85 a0		      STA	player7y
   7743  46d3				   .L0624		;  player1x  = 20  :  player1y  =  40
   7744  46d3
   7745  46d3		       a9 14		      LDA	#20
   7746  46d5		       85 90		      STA	player1x
   7747  46d7		       a9 28		      LDA	#40
   7748  46d9		       85 9a		      STA	player1y
   7749  46db				   .L0625		;  player2x  = 20  :  player2y  =  70
   7750  46db
   7751  46db		       a9 14		      LDA	#20
   7752  46dd		       85 91		      STA	player2x
   7753  46df		       a9 46		      LDA	#70
   7754  46e1		       85 9b		      STA	player2y
   7755  46e3				   .L0626		;  player3x  = 20  :  player3y  =  100
   7756  46e3
   7757  46e3		       a9 14		      LDA	#20
   7758  46e5		       85 92		      STA	player3x
   7759  46e7		       a9 64		      LDA	#100
   7760  46e9		       85 9c		      STA	player3y
   7761  46eb				   .L0627		;  Powerup  =	 ( rand & 2 ) 
   7762  46eb
   7763  46eb							; complex statement detected
   7764  46eb		       ad 00 10 	      lda	rand
   7765  46ee		       4a		      lsr
   7766  46ef				  -	      ifconst	rand16
   7767  46ef				  -	      rol	rand16
   7768  46ef					      endif
   7769  46ef		       90 02		      bcc	*+4
   7770  46f1		       49 b4		      eor	#$B4
   7771  46f3		       8d 00 10 	      sta	rand
   7772  46f6				  -	      ifconst	rand16
   7773  46f6				  -	      eor	rand16
   7774  46f6					      endif
   7775  46f6		       29 02		      AND	#2
   7776  46f8		       85 ee		      STA	Powerup
   7777  46fa				   .L0628		;  player4x = 150  :  player4y  = 120
   7778  46fa
   7779  46fa		       a9 96		      LDA	#150
   7780  46fc		       85 93		      STA	player4x
   7781  46fe		       a9 78		      LDA	#120
   7782  4700		       85 9d		      STA	player4y
   7783  4702				   .
   7784  4702							; 
   7785  4702
   7786  4702				   .L0629		;  if Bit4_gameover{4} then if !Ch0_Sound then Ch0_Sound  =  1  :  Ch0_Duration  =  30
   7787  4702
   7788  4702		       a5 ea		      LDA	Bit4_gameover
   7789  4704		       29 10		      AND	#16
   7790  4706		       f0 0c		      BEQ	.skipL0629
   7791  4708				   .condpart333
   7792  4708		       a5 e7		      LDA	Ch0_Sound
   7793  470a		       d0 08		      BNE	.skip333then
   7794  470c				   .condpart334
   7795  470c		       a9 01		      LDA	#1
   7796  470e		       85 e7		      STA	Ch0_Sound
   7797  4710		       a9 1e		      LDA	#30
   7798  4712		       85 e8		      STA	Ch0_Duration
   7799  4714				   .skip333then
   7800  4714				   .skipL0629
   7801  4714				   .L0630		;  if !Ch0_Sound then goto __End__Skip_Ch_0
   7802  4714
   7803  4714		       a5 e7		      LDA	Ch0_Sound
   7804  4716		       d0 03		      BNE	.skipL0630
   7805  4718				   .condpart335
   7806  4718		       4c 6b 77 	      jmp	.__End__Skip_Ch_0
   7807  471b
   7808  471b				   .skipL0630
   7809  471b				   .L0631		;  Ch0_Duration  =  Ch0_Duration  -  1
   7810  471b
   7811  471b		       c6 e8		      DEC	Ch0_Duration
   7812  471d				   .L0632		;  if !Ch0_Duration then goto __End__Clear_Ch_0
   7813  471d
   7814  471d		       a5 e8		      LDA	Ch0_Duration
   7815  471f		       d0 03		      BNE	.skipL0632
   7816  4721				   .condpart336
   7817  4721		       4c 51 77 	      jmp	.__End__Clear_Ch_0
   7818  4724
   7819  4724				   .skipL0632
   7820  4724				   .L0633		;  if Ch0_Sound  <>  1 then goto __End__Skip_Ch0_Sound_001
   7821  4724
   7822  4724		       a5 e7		      LDA	Ch0_Sound
   7823  4726		       c9 01		      CMP	#1
   7824  4728		       f0 03		      BEQ	.skipL0633
   7825  472a				   .condpart337
   7826  472a		       4c 4e 77 	      jmp	.__End__Skip_Ch0_Sound_001
   7827  472d
   7828  472d				   .skipL0633
   7829  472d				   .L0634		;  AUDC0  =  6  :  AUDV0  =  2  :  AUDF0  =  12
   7830  472d
   7831  472d		       a9 06		      LDA	#6
   7832  472f		       85 15		      STA	AUDC0
   7833  4731		       a9 02		      LDA	#2
   7834  4733		       85 19		      STA	AUDV0
   7835  4735		       a9 0c		      LDA	#12
   7836  4737		       85 17		      STA	AUDF0
   7837  4739				   .L0635		;  if Ch0_Duration  <	15 then AUDC0  =  6  :	AUDV0  =  1  :	AUDF0  =  6
   7838  4739
   7839  4739		       a5 e8		      LDA	Ch0_Duration
   7840  473b		       c9 0f		      CMP	#15
   7841  473d		       b0 0c		      BCS	.skipL0635
   7842  473f				   .condpart338
   7843  473f		       a9 06		      LDA	#6
   7844  4741		       85 15		      STA	AUDC0
   7845  4743		       a9 01		      LDA	#1
   7846  4745		       85 19		      STA	AUDV0
   7847  4747		       a9 06		      LDA	#6
   7848  4749		       85 17		      STA	AUDF0
   7849  474b				   .skipL0635
   7850  474b				   .L0636		;  goto __End__Skip_Ch_0
   7851  474b
   7852  474b		       4c 6b 77 	      jmp	.__End__Skip_Ch_0
   7853  474e
   7854  474e				   .__End__Skip_Ch0_Sound_001
   7855  474e							; __End__Skip_Ch0_Sound_001
   7856  474e
   7857  474e				   .L0637		;  goto __End__Skip_Ch_0
   7858  474e
   7859  474e		       4c 6b 77 	      jmp	.__End__Skip_Ch_0
   7860  4751
   7861  4751				   .__End__Clear_Ch_0
   7862  4751							; __End__Clear_Ch_0
   7863  4751
   7864  4751				   .L0638		;  Ch0_Sound  =  0  :	AUDV0  =  0 :  AUDC0 = 0 :  AUDF0  = 0
   7865  4751
   7866  4751		       a9 00		      LDA	#0
   7867  4753		       85 e7		      STA	Ch0_Sound
   7868  4755		       85 19		      STA	AUDV0
   7869  4757		       85 15		      STA	AUDC0
   7870  4759		       85 17		      STA	AUDF0
   7871  475b				   .L0639		;  Ch1_Sound  =  0  :	AUDV1  =  0 :  AUDC1  =  0 :  AUDF1  =	0 :  Bit5_hit{5}  = 0
   7872  475b
   7873  475b		       a9 00		      LDA	#0
   7874  475d		       85 da		      STA	Ch1_Sound
   7875  475f		       85 1a		      STA	AUDV1
   7876  4761		       85 16		      STA	AUDC1
   7877  4763		       85 18		      STA	AUDF1
   7878  4765		       a5 ea		      LDA	Bit5_hit
   7879  4767		       29 df		      AND	#223
   7880  4769		       85 ea		      STA	Bit5_hit
   7881  476b				   .
   7882  476b							; 
   7883  476b
   7884  476b				   .
   7885  476b							; 
   7886  476b
   7887  476b				   .__End__Skip_Ch_0
   7888  476b							; __End__Skip_Ch_0
   7889  476b
   7890  476b				   .L0640		;  playfield:
   7891  476b
   7892  476b		       a0 58		      ldy	#88
   7893  476d		       a9 ba		      LDA	#<PF_data2
   7894  476f		       a2 69		      LDX	#((>PF_data2) & $0f) | (((>PF_data2) / 2) & $70)
   7895  4771		       85 81		      sta	temp7
   7896  4773		       a9 77		      lda	#>(ret_point25-1)
   7897  4775		       48		      pha
   7898  4776		       a9 88		      lda	#<(ret_point25-1)
   7899  4778		       48		      pha
   7900  4779		       a9 1e		      lda	#>(pfsetup-1)
   7901  477b		       48		      pha
   7902  477c		       a9 8c		      lda	#<(pfsetup-1)
   7903  477e		       48		      pha
   7904  477f		       a5 81		      lda	temp7
   7905  4781		       48		      pha
   7906  4782		       8a		      txa
   7907  4783		       48		      pha
   7908  4784		       a2 01		      ldx	#1
   7909  4786		       4c ee df 	      jmp	BS_jsr
   7910  4789				   ret_point25
   7911  4789				   .
   7912  4789							; 
   7913  4789
   7914  4789				   .L0641		;  pfcolors:
   7915  4789
   7916  4789		       a9 08		      LDA	#<PFCOLS
   7917  478b		       8d 50 10 	      STA	DF0LOW
   7918  478e		       a9 0a		      LDA	#(>PFCOLS) & $0F
   7919  4790		       8d 68 10 	      STA	DF0HI
   7920  4793		       a9 1a		      LDA	#<playfieldcolorL0641
   7921  4795		       8d 59 10 	      STA	PARAMETER
   7922  4798		       a9 6b		      LDA	#((>playfieldcolorL0641) & $0f) | (((>playfieldcolorL0641) / 2) & $70)
   7923  479a		       8d 59 10 	      STA	PARAMETER
   7924  479d		       a9 00		      LDA	#0
   7925  479f		       8d 59 10 	      STA	PARAMETER
   7926  47a2		       a9 58		      LDA	#88
   7927  47a4		       8d 59 10 	      STA	PARAMETER
   7928  47a7		       a9 01		      LDA	#1
   7929  47a9		       8d 5a 10 	      STA	CALLFUNCTION
   7930  47ac				   .L0642		;  return
   7931  47ac
   7932  47ac		       ba		      tsx
   7933  47ad		       b5 02		      lda	2,x	; check return address
   7934  47af		       49 77		      eor	#(>*)	; vs. current PCH
   7935  47b1		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   7936  47b3		       f0 03		      beq	*+5	; if equal, do normal return
   7937  47b5		       4c e0 df 	      JMP	BS_return
   7938  47b8		       60		      RTS
   7939  47b9				   .
   7940  47b9							; 
   7941  47b9
   7942  47b9				   .L0643		;  bank 5
   7943  47b9
   7944  47b9					      if	ECHO4
      2075 bytes of ROM space left in bank 4
   7945  47b9					      echo	"    ",[(start_bank4 - *)]d , "bytes of ROM space left in bank 4")
   7946  47b9					      endif
   7947  47b9		       00 01	   ECHO4      =	1
   7948  4fd4					      ORG	$4FF4-bscode_length
   7949  4fd4					      RORG	$7FF4-bscode_length
   7950  4fd4		       a2 ff	   start_bank4 ldx	#$ff
   7951  4fd6					      ifconst	FASTFETCH	; using DPC+
   7952  4fd6		       8e 58 10 	      stx	FASTFETCH
   7953  4fd9					      endif
   7954  4fd9		       9a		      txs
   7955  4fda				  -	      if	bankswitch == 64
   7956  4fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   7957  4fda					      else
   7958  4fda		       a9 18		      lda	#>(start-1)
   7959  4fdc					      endif
   7960  4fdc		       48		      pha
   7961  4fdd		       a9 e3		      lda	#<(start-1)
   7962  4fdf		       48		      pha
   7963  4fe0		       48		      pha
   7964  4fe1		       8a		      txa
   7965  4fe2		       48		      pha
   7966  4fe3		       ba		      tsx
   7967  4fe4					      if	bankswitch != 64
   7968  4fe4		       b5 04		      lda	4,x	; get high byte of return address
   7969  4fe6		       2a		      rol
   7970  4fe7		       2a		      rol
   7971  4fe8		       2a		      rol
   7972  4fe9		       2a		      rol
   7973  4fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   7974  4fec		       aa		      tax
   7975  4fed		       e8		      inx
   7976  4fee				  -	      else
   7977  4fee				  -	      lda	4,x	; get high byte of return address
   7978  4fee				  -	      tay
   7979  4fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   7980  4fee				  -	      sta	4,x
   7981  4fee				  -	      tya
   7982  4fee				  -	      lsr
   7983  4fee				  -	      lsr
   7984  4fee				  -	      lsr
   7985  4fee				  -	      lsr
   7986  4fee				  -	      tax
   7987  4fee				  -	      inx
   7988  4fee					      endif
   7989  4fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   7990  4ff1		       68		      pla
   7991  4ff2		       aa		      tax
   7992  4ff3		       68		      pla
   7993  4ff4		       60		      rts
   7994  4ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   7995  4ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   7996  4ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   7997  4ff5					      endif
   7998  4ffc					      ORG	$4FFC
   7999  4ffc					      RORG	$7FFC
   8000  4ffc		       d4 7f		      .word.w	(start_bank4 & $ffff)
   8001  4ffe		       d4 7f		      .word.w	(start_bank4 & $ffff)
   8002  5000					      ORG	$5000
   8003  5000					      RORG	$9000
   8004  5000					      repeat	129
   8005  5000		       00		      .byte.b	0
   8004  5000					      repend
   8005  5001		       00		      .byte.b	0
   8004  5001					      repend
   8005  5002		       00		      .byte.b	0
   8004  5002					      repend
   8005  5003		       00		      .byte.b	0
   8004  5003					      repend
   8005  5004		       00		      .byte.b	0
   8004  5004					      repend
   8005  5005		       00		      .byte.b	0
   8004  5005					      repend
   8005  5006		       00		      .byte.b	0
   8004  5006					      repend
   8005  5007		       00		      .byte.b	0
   8004  5007					      repend
   8005  5008		       00		      .byte.b	0
   8004  5008					      repend
   8005  5009		       00		      .byte.b	0
   8004  5009					      repend
   8005  500a		       00		      .byte.b	0
   8004  500a					      repend
   8005  500b		       00		      .byte.b	0
   8004  500b					      repend
   8005  500c		       00		      .byte.b	0
   8004  500c					      repend
   8005  500d		       00		      .byte.b	0
   8004  500d					      repend
   8005  500e		       00		      .byte.b	0
   8004  500e					      repend
   8005  500f		       00		      .byte.b	0
   8004  500f					      repend
   8005  5010		       00		      .byte.b	0
   8004  5010					      repend
   8005  5011		       00		      .byte.b	0
   8004  5011					      repend
   8005  5012		       00		      .byte.b	0
   8004  5012					      repend
   8005  5013		       00		      .byte.b	0
   8004  5013					      repend
   8005  5014		       00		      .byte.b	0
   8004  5014					      repend
   8005  5015		       00		      .byte.b	0
   8004  5015					      repend
   8005  5016		       00		      .byte.b	0
   8004  5016					      repend
   8005  5017		       00		      .byte.b	0
   8004  5017					      repend
   8005  5018		       00		      .byte.b	0
   8004  5018					      repend
   8005  5019		       00		      .byte.b	0
   8004  5019					      repend
   8005  501a		       00		      .byte.b	0
   8004  501a					      repend
   8005  501b		       00		      .byte.b	0
   8004  501b					      repend
   8005  501c		       00		      .byte.b	0
   8004  501c					      repend
   8005  501d		       00		      .byte.b	0
   8004  501d					      repend
   8005  501e		       00		      .byte.b	0
   8004  501e					      repend
   8005  501f		       00		      .byte.b	0
   8004  501f					      repend
   8005  5020		       00		      .byte.b	0
   8004  5020					      repend
   8005  5021		       00		      .byte.b	0
   8004  5021					      repend
   8005  5022		       00		      .byte.b	0
   8004  5022					      repend
   8005  5023		       00		      .byte.b	0
   8004  5023					      repend
   8005  5024		       00		      .byte.b	0
   8004  5024					      repend
   8005  5025		       00		      .byte.b	0
   8004  5025					      repend
   8005  5026		       00		      .byte.b	0
   8004  5026					      repend
   8005  5027		       00		      .byte.b	0
   8004  5027					      repend
   8005  5028		       00		      .byte.b	0
   8004  5028					      repend
   8005  5029		       00		      .byte.b	0
   8004  5029					      repend
   8005  502a		       00		      .byte.b	0
   8004  502a					      repend
   8005  502b		       00		      .byte.b	0
   8004  502b					      repend
   8005  502c		       00		      .byte.b	0
   8004  502c					      repend
   8005  502d		       00		      .byte.b	0
   8004  502d					      repend
   8005  502e		       00		      .byte.b	0
   8004  502e					      repend
   8005  502f		       00		      .byte.b	0
   8004  502f					      repend
   8005  5030		       00		      .byte.b	0
   8004  5030					      repend
   8005  5031		       00		      .byte.b	0
   8004  5031					      repend
   8005  5032		       00		      .byte.b	0
   8004  5032					      repend
   8005  5033		       00		      .byte.b	0
   8004  5033					      repend
   8005  5034		       00		      .byte.b	0
   8004  5034					      repend
   8005  5035		       00		      .byte.b	0
   8004  5035					      repend
   8005  5036		       00		      .byte.b	0
   8004  5036					      repend
   8005  5037		       00		      .byte.b	0
   8004  5037					      repend
   8005  5038		       00		      .byte.b	0
   8004  5038					      repend
   8005  5039		       00		      .byte.b	0
   8004  5039					      repend
   8005  503a		       00		      .byte.b	0
   8004  503a					      repend
   8005  503b		       00		      .byte.b	0
   8004  503b					      repend
   8005  503c		       00		      .byte.b	0
   8004  503c					      repend
   8005  503d		       00		      .byte.b	0
   8004  503d					      repend
   8005  503e		       00		      .byte.b	0
   8004  503e					      repend
   8005  503f		       00		      .byte.b	0
   8004  503f					      repend
   8005  5040		       00		      .byte.b	0
   8004  5040					      repend
   8005  5041		       00		      .byte.b	0
   8004  5041					      repend
   8005  5042		       00		      .byte.b	0
   8004  5042					      repend
   8005  5043		       00		      .byte.b	0
   8004  5043					      repend
   8005  5044		       00		      .byte.b	0
   8004  5044					      repend
   8005  5045		       00		      .byte.b	0
   8004  5045					      repend
   8005  5046		       00		      .byte.b	0
   8004  5046					      repend
   8005  5047		       00		      .byte.b	0
   8004  5047					      repend
   8005  5048		       00		      .byte.b	0
   8004  5048					      repend
   8005  5049		       00		      .byte.b	0
   8004  5049					      repend
   8005  504a		       00		      .byte.b	0
   8004  504a					      repend
   8005  504b		       00		      .byte.b	0
   8004  504b					      repend
   8005  504c		       00		      .byte.b	0
   8004  504c					      repend
   8005  504d		       00		      .byte.b	0
   8004  504d					      repend
   8005  504e		       00		      .byte.b	0
   8004  504e					      repend
   8005  504f		       00		      .byte.b	0
   8004  504f					      repend
   8005  5050		       00		      .byte.b	0
   8004  5050					      repend
   8005  5051		       00		      .byte.b	0
   8004  5051					      repend
   8005  5052		       00		      .byte.b	0
   8004  5052					      repend
   8005  5053		       00		      .byte.b	0
   8004  5053					      repend
   8005  5054		       00		      .byte.b	0
   8004  5054					      repend
   8005  5055		       00		      .byte.b	0
   8004  5055					      repend
   8005  5056		       00		      .byte.b	0
   8004  5056					      repend
   8005  5057		       00		      .byte.b	0
   8004  5057					      repend
   8005  5058		       00		      .byte.b	0
   8004  5058					      repend
   8005  5059		       00		      .byte.b	0
   8004  5059					      repend
   8005  505a		       00		      .byte.b	0
   8004  505a					      repend
   8005  505b		       00		      .byte.b	0
   8004  505b					      repend
   8005  505c		       00		      .byte.b	0
   8004  505c					      repend
   8005  505d		       00		      .byte.b	0
   8004  505d					      repend
   8005  505e		       00		      .byte.b	0
   8004  505e					      repend
   8005  505f		       00		      .byte.b	0
   8004  505f					      repend
   8005  5060		       00		      .byte.b	0
   8004  5060					      repend
   8005  5061		       00		      .byte.b	0
   8004  5061					      repend
   8005  5062		       00		      .byte.b	0
   8004  5062					      repend
   8005  5063		       00		      .byte.b	0
   8004  5063					      repend
   8005  5064		       00		      .byte.b	0
   8004  5064					      repend
   8005  5065		       00		      .byte.b	0
   8004  5065					      repend
   8005  5066		       00		      .byte.b	0
   8004  5066					      repend
   8005  5067		       00		      .byte.b	0
   8004  5067					      repend
   8005  5068		       00		      .byte.b	0
   8004  5068					      repend
   8005  5069		       00		      .byte.b	0
   8004  5069					      repend
   8005  506a		       00		      .byte.b	0
   8004  506a					      repend
   8005  506b		       00		      .byte.b	0
   8004  506b					      repend
   8005  506c		       00		      .byte.b	0
   8004  506c					      repend
   8005  506d		       00		      .byte.b	0
   8004  506d					      repend
   8005  506e		       00		      .byte.b	0
   8004  506e					      repend
   8005  506f		       00		      .byte.b	0
   8004  506f					      repend
   8005  5070		       00		      .byte.b	0
   8004  5070					      repend
   8005  5071		       00		      .byte.b	0
   8004  5071					      repend
   8005  5072		       00		      .byte.b	0
   8004  5072					      repend
   8005  5073		       00		      .byte.b	0
   8004  5073					      repend
   8005  5074		       00		      .byte.b	0
   8004  5074					      repend
   8005  5075		       00		      .byte.b	0
   8004  5075					      repend
   8005  5076		       00		      .byte.b	0
   8004  5076					      repend
   8005  5077		       00		      .byte.b	0
   8004  5077					      repend
   8005  5078		       00		      .byte.b	0
   8004  5078					      repend
   8005  5079		       00		      .byte.b	0
   8004  5079					      repend
   8005  507a		       00		      .byte.b	0
   8004  507a					      repend
   8005  507b		       00		      .byte.b	0
   8004  507b					      repend
   8005  507c		       00		      .byte.b	0
   8004  507c					      repend
   8005  507d		       00		      .byte.b	0
   8004  507d					      repend
   8005  507e		       00		      .byte.b	0
   8004  507e					      repend
   8005  507f		       00		      .byte.b	0
   8004  507f					      repend
   8005  5080		       00		      .byte.b	0
   8006  5081					      repend
   8007  5081				   .L0644		;  temp1 = temp1
   8008  5081
   8009  5081		       a5 cb		      LDA	temp1
   8010  5083		       85 cb		      STA	temp1
   8011  5085				   .__Sounds
   8012  5085							; __Sounds
   8013  5085
   8014  5085				   .
   8015  5085							; 
   8016  5085
   8017  5085				   .__FireSound
   8018  5085							; __FireSound
   8019  5085
   8020  5085				   .L0645		;  if joy0fire  &&  !Bit4_gameover{4} then if !Ch0_Sound  &&  !Bit1_missleOn{1} then Ch0_Sound  =  1  :  Ch0_Duration	=  15
   8021  5085
   8022  5085		       24 0c		      bit	INPT4
   8023  5087		       30 18		      BMI	.skipL0645
   8024  5089				   .condpart339
   8025  5089		       a5 ea		      LDA	Bit4_gameover
   8026  508b		       29 10		      AND	#16
   8027  508d		       d0 12		      BNE	.skip339then
   8028  508f				   .condpart340
   8029  508f		       a5 e7		      LDA	Ch0_Sound
   8030  5091		       d0 0e		      BNE	.skip340then
   8031  5093				   .condpart341
   8032  5093		       a5 ea		      LDA	Bit1_missleOn
   8033  5095		       29 02		      AND	#2
   8034  5097		       d0 08		      BNE	.skip341then
   8035  5099				   .condpart342
   8036  5099		       a9 01		      LDA	#1
   8037  509b		       85 e7		      STA	Ch0_Sound
   8038  509d		       a9 0f		      LDA	#15
   8039  509f		       85 e8		      STA	Ch0_Duration
   8040  50a1				   .skip341then
   8041  50a1				   .skip340then
   8042  50a1				   .skip339then
   8043  50a1				   .skipL0645
   8044  50a1				   .
   8045  50a1							; 
   8046  50a1
   8047  50a1				   .L0646		;  if !Ch0_Sound then goto __Skip_Ch_0
   8048  50a1
   8049  50a1		       a5 e7		      LDA	Ch0_Sound
   8050  50a3		       d0 03		      BNE	.skipL0646
   8051  50a5				   .condpart343
   8052  50a5		       4c f6 90 	      jmp	.__Skip_Ch_0
   8053  50a8
   8054  50a8				   .skipL0646
   8055  50a8				   .L0647		;  Ch0_Duration  =  Ch0_Duration  -  1
   8056  50a8
   8057  50a8		       c6 e8		      DEC	Ch0_Duration
   8058  50aa				   .L0648		;  if !Ch0_Duration then goto __Clear_Ch_0
   8059  50aa
   8060  50aa		       a5 e8		      LDA	Ch0_Duration
   8061  50ac		       d0 03		      BNE	.skipL0648
   8062  50ae				   .condpart344
   8063  50ae		       4c f0 90 	      jmp	.__Clear_Ch_0
   8064  50b1
   8065  50b1				   .skipL0648
   8066  50b1				   .L0649		;  if Ch0_Sound  <>  1 then goto __Skip_Ch0_Sound_001
   8067  50b1
   8068  50b1		       a5 e7		      LDA	Ch0_Sound
   8069  50b3		       c9 01		      CMP	#1
   8070  50b5		       f0 03		      BEQ	.skipL0649
   8071  50b7				   .condpart345
   8072  50b7		       4c ed 90 	      jmp	.__Skip_Ch0_Sound_001
   8073  50ba
   8074  50ba				   .skipL0649
   8075  50ba				   .L0650		;  AUDC0  =  8  :  AUDV0  =  2  :  AUDF0  =  4
   8076  50ba
   8077  50ba		       a9 08		      LDA	#8
   8078  50bc		       85 15		      STA	AUDC0
   8079  50be		       a9 02		      LDA	#2
   8080  50c0		       85 19		      STA	AUDV0
   8081  50c2		       a9 04		      LDA	#4
   8082  50c4		       85 17		      STA	AUDF0
   8083  50c6				   .L0651		;  if Ch0_Duration  <	10 then AUDC0  =  6  :	AUDV0  =  2  :	AUDF0  =  12
   8084  50c6
   8085  50c6		       a5 e8		      LDA	Ch0_Duration
   8086  50c8		       c9 0a		      CMP	#10
   8087  50ca		       b0 0c		      BCS	.skipL0651
   8088  50cc				   .condpart346
   8089  50cc		       a9 06		      LDA	#6
   8090  50ce		       85 15		      STA	AUDC0
   8091  50d0		       a9 02		      LDA	#2
   8092  50d2		       85 19		      STA	AUDV0
   8093  50d4		       a9 0c		      LDA	#12
   8094  50d6		       85 17		      STA	AUDF0
   8095  50d8				   .skipL0651
   8096  50d8				   .L0652		;  if Ch0_Duration  <	5 then AUDC0  =  6  :  AUDV0  =  1  :  AUDF0  =  14
   8097  50d8
   8098  50d8		       a5 e8		      LDA	Ch0_Duration
   8099  50da		       c9 05		      CMP	#5
   8100  50dc		       b0 0c		      BCS	.skipL0652
   8101  50de				   .condpart347
   8102  50de		       a9 06		      LDA	#6
   8103  50e0		       85 15		      STA	AUDC0
   8104  50e2		       a9 01		      LDA	#1
   8105  50e4		       85 19		      STA	AUDV0
   8106  50e6		       a9 0e		      LDA	#14
   8107  50e8		       85 17		      STA	AUDF0
   8108  50ea				   .skipL0652
   8109  50ea				   .L0653		;  goto __Skip_Ch_0
   8110  50ea
   8111  50ea		       4c f6 90 	      jmp	.__Skip_Ch_0
   8112  50ed
   8113  50ed				   .__Skip_Ch0_Sound_001
   8114  50ed							; __Skip_Ch0_Sound_001
   8115  50ed
   8116  50ed				   .L0654		;  goto __Skip_Ch_0
   8117  50ed
   8118  50ed		       4c f6 90 	      jmp	.__Skip_Ch_0
   8119  50f0
   8120  50f0				   .__Clear_Ch_0
   8121  50f0							; __Clear_Ch_0
   8122  50f0
   8123  50f0				   .L0655		;  Ch0_Sound  =  0  :	AUDV0  =  0
   8124  50f0
   8125  50f0		       a9 00		      LDA	#0
   8126  50f2		       85 e7		      STA	Ch0_Sound
   8127  50f4		       85 19		      STA	AUDV0
   8128  50f6				   .__Skip_Ch_0
   8129  50f6							; __Skip_Ch_0
   8130  50f6
   8131  50f6				   .L0656		;  if !Bit4_gameover{4} then if joy0fire  &&  !Bit1_missleOn{1} then if EnemyHit  <  1 then Bit1_missleOn{1}  =  1  :	missile0x  =  player0x	+  5 :	missile0y  =  player0y
   8132  50f6
   8133  50f6		       a5 ea		      LDA	Bit4_gameover
   8134  50f8		       29 10		      AND	#16
   8135  50fa		       d0 21		      BNE	.skipL0656
   8136  50fc				   .condpart348
   8137  50fc		       24 0c		      bit	INPT4
   8138  50fe		       30 1d		      BMI	.skip348then
   8139  5100				   .condpart349
   8140  5100		       a5 ea		      LDA	Bit1_missleOn
   8141  5102		       29 02		      AND	#2
   8142  5104		       d0 17		      BNE	.skip349then
   8143  5106				   .condpart350
   8144  5106		       a5 d9		      LDA	EnemyHit
   8145  5108		       c9 01		      CMP	#1
   8146  510a		       b0 11		      BCS	.skip350then
   8147  510c				   .condpart351
   8148  510c		       a5 ea		      LDA	Bit1_missleOn
   8149  510e		       09 02		      ORA	#2
   8150  5110		       85 ea		      STA	Bit1_missleOn
   8151  5112		       a5 80		      LDA	player0x
   8152  5114		       18		      CLC
   8153  5115		       69 05		      ADC	#5
   8154  5117		       85 82		      STA	missile0x
   8155  5119		       a5 99		      LDA	player0y
   8156  511b		       85 bf		      STA	missile0y
   8157  511d				   .skip350then
   8158  511d				   .skip349then
   8159  511d				   .skip348then
   8160  511d				   .skipL0656
   8161  511d				   .L0657		;  Bit1_EnemyShootSound{1}  = 0
   8162  511d
   8163  511d		       a5 f1		      LDA	Bit1_EnemyShootSound
   8164  511f		       29 fd		      AND	#253
   8165  5121		       85 f1		      STA	Bit1_EnemyShootSound
   8166  5123				   .L0658		;  return
   8167  5123
   8168  5123		       ba		      tsx
   8169  5124		       b5 02		      lda	2,x	; check return address
   8170  5126		       49 91		      eor	#(>*)	; vs. current PCH
   8171  5128		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   8172  512a		       f0 03		      beq	*+5	; if equal, do normal return
   8173  512c		       4c e0 df 	      JMP	BS_return
   8174  512f		       60		      RTS
   8175  5130				   .
   8176  5130							; 
   8177  5130
   8178  5130				   .__P0Explosion
   8179  5130							; __P0Explosion
   8180  5130
   8181  5130				   .L0659		;  if !Ch1_Sound then Ch1_Sound  =  1	:  Ch1_Duration  =  10
   8182  5130
   8183  5130		       a5 da		      LDA	Ch1_Sound
   8184  5132		       d0 08		      BNE	.skipL0659
   8185  5134				   .condpart352
   8186  5134		       a9 01		      LDA	#1
   8187  5136		       85 da		      STA	Ch1_Sound
   8188  5138		       a9 0a		      LDA	#10
   8189  513a		       85 db		      STA	Ch1_Duration
   8190  513c				   .skipL0659
   8191  513c				   .L0660		;  if !Ch1_Sound then goto __P0Exp_Skip_Ch_1
   8192  513c
   8193  513c		       a5 da		      LDA	Ch1_Sound
   8194  513e		       d0 03		      BNE	.skipL0660
   8195  5140				   .condpart353
   8196  5140		       4c 94 91 	      jmp	.__P0Exp_Skip_Ch_1
   8197  5143
   8198  5143				   .skipL0660
   8199  5143				   .L0661		;  Ch1_Duration  =  Ch1_Duration  -  1
   8200  5143
   8201  5143		       c6 db		      DEC	Ch1_Duration
   8202  5145				   .L0662		;  if !Ch1_Duration then goto __P0Exp_Clear_Ch_1
   8203  5145
   8204  5145		       a5 db		      LDA	Ch1_Duration
   8205  5147		       d0 03		      BNE	.skipL0662
   8206  5149				   .condpart354
   8207  5149		       4c 86 91 	      jmp	.__P0Exp_Clear_Ch_1
   8208  514c
   8209  514c				   .skipL0662
   8210  514c				   .L0663		;  if Ch1_Sound  <>  1 then goto __P0Exp_Skip_Ch_1
   8211  514c
   8212  514c		       a5 da		      LDA	Ch1_Sound
   8213  514e		       c9 01		      CMP	#1
   8214  5150		       f0 03		      BEQ	.skipL0663
   8215  5152				   .condpart355
   8216  5152		       4c 94 91 	      jmp	.__P0Exp_Skip_Ch_1
   8217  5155
   8218  5155				   .skipL0663
   8219  5155				   .L0664		;  AUDC1  =  4  :  AUDV1  =  6  :  AUDF1  =  12
   8220  5155
   8221  5155		       a9 04		      LDA	#4
   8222  5157		       85 16		      STA	AUDC1
   8223  5159		       a9 06		      LDA	#6
   8224  515b		       85 1a		      STA	AUDV1
   8225  515d		       a9 0c		      LDA	#12
   8226  515f		       85 18		      STA	AUDF1
   8227  5161				   .L0665		;  if Ch1_Duration  <	8 then AUDC1  =  4  :  AUDV1  =  4  :  AUDF1  =  12
   8228  5161
   8229  5161		       a5 db		      LDA	Ch1_Duration
   8230  5163		       c9 08		      CMP	#8
   8231  5165		       b0 0a		      BCS	.skipL0665
   8232  5167				   .condpart356
   8233  5167		       a9 04		      LDA	#4
   8234  5169		       85 16		      STA	AUDC1
   8235  516b		       85 1a		      STA	AUDV1
   8236  516d		       a9 0c		      LDA	#12
   8237  516f		       85 18		      STA	AUDF1
   8238  5171				   .skipL0665
   8239  5171				   .L0666		;  if Ch1_Duration  <	3 then AUDC1  =  9  :  AUDV1  =  1  :  AUDF1  =  9
   8240  5171
   8241  5171		       a5 db		      LDA	Ch1_Duration
   8242  5173		       c9 03		      CMP	#3
   8243  5175		       b0 0c		      BCS	.skipL0666
   8244  5177				   .condpart357
   8245  5177		       a9 09		      LDA	#9
   8246  5179		       85 16		      STA	AUDC1
   8247  517b		       a9 01		      LDA	#1
   8248  517d		       85 1a		      STA	AUDV1
   8249  517f		       a9 09		      LDA	#9
   8250  5181		       85 18		      STA	AUDF1
   8251  5183				   .skipL0666
   8252  5183				   .L0667		;  goto __P0Exp_Skip_Ch_1
   8253  5183
   8254  5183		       4c 94 91 	      jmp	.__P0Exp_Skip_Ch_1
   8255  5186
   8256  5186				   .__P0Exp_Clear_Ch_1
   8257  5186							; __P0Exp_Clear_Ch_1
   8258  5186
   8259  5186				   .L0668		;  Ch1_Sound  =  0  :	AUDV1  =  0
   8260  5186
   8261  5186		       a9 00		      LDA	#0
   8262  5188		       85 da		      STA	Ch1_Sound
   8263  518a		       85 1a		      STA	AUDV1
   8264  518c				   .L0669		;  AUDC1  =  0  :  AUDV1  =  0  :  AUDF1  =  0
   8265  518c
   8266  518c		       a9 00		      LDA	#0
   8267  518e		       85 16		      STA	AUDC1
   8268  5190		       85 1a		      STA	AUDV1
   8269  5192		       85 18		      STA	AUDF1
   8270  5194				   .__P0Exp_Skip_Ch_1
   8271  5194							; __P0Exp_Skip_Ch_1
   8272  5194
   8273  5194				   .L0670		;  return
   8274  5194
   8275  5194		       ba		      tsx
   8276  5195		       b5 02		      lda	2,x	; check return address
   8277  5197		       49 91		      eor	#(>*)	; vs. current PCH
   8278  5199		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   8279  519b		       f0 03		      beq	*+5	; if equal, do normal return
   8280  519d		       4c e0 df 	      JMP	BS_return
   8281  51a0		       60		      RTS
   8282  51a1				   .
   8283  51a1							; 
   8284  51a1
   8285  51a1				   .L0671		;  bank 6
   8286  51a1
   8287  51a1					      if	ECHO5
      3635 bytes of ROM space left in bank 5
   8288  51a1					      echo	"    ",[(start_bank5 - *)]d , "bytes of ROM space left in bank 5")
   8289  51a1					      endif
   8290  51a1		       00 01	   ECHO5      =	1
   8291  5fd4					      ORG	$5FF4-bscode_length
   8292  5fd4					      RORG	$9FF4-bscode_length
   8293  5fd4		       a2 ff	   start_bank5 ldx	#$ff
   8294  5fd6					      ifconst	FASTFETCH	; using DPC+
   8295  5fd6		       8e 58 10 	      stx	FASTFETCH
   8296  5fd9					      endif
   8297  5fd9		       9a		      txs
   8298  5fda				  -	      if	bankswitch == 64
   8299  5fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   8300  5fda					      else
   8301  5fda		       a9 18		      lda	#>(start-1)
   8302  5fdc					      endif
   8303  5fdc		       48		      pha
   8304  5fdd		       a9 e3		      lda	#<(start-1)
   8305  5fdf		       48		      pha
   8306  5fe0		       48		      pha
   8307  5fe1		       8a		      txa
   8308  5fe2		       48		      pha
   8309  5fe3		       ba		      tsx
   8310  5fe4					      if	bankswitch != 64
   8311  5fe4		       b5 04		      lda	4,x	; get high byte of return address
   8312  5fe6		       2a		      rol
   8313  5fe7		       2a		      rol
   8314  5fe8		       2a		      rol
   8315  5fe9		       2a		      rol
   8316  5fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   8317  5fec		       aa		      tax
   8318  5fed		       e8		      inx
   8319  5fee				  -	      else
   8320  5fee				  -	      lda	4,x	; get high byte of return address
   8321  5fee				  -	      tay
   8322  5fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   8323  5fee				  -	      sta	4,x
   8324  5fee				  -	      tya
   8325  5fee				  -	      lsr
   8326  5fee				  -	      lsr
   8327  5fee				  -	      lsr
   8328  5fee				  -	      lsr
   8329  5fee				  -	      tax
   8330  5fee				  -	      inx
   8331  5fee					      endif
   8332  5fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   8333  5ff1		       68		      pla
   8334  5ff2		       aa		      tax
   8335  5ff3		       68		      pla
   8336  5ff4		       60		      rts
   8337  5ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   8338  5ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   8339  5ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   8340  5ff5					      endif
   8341  5ffc					      ORG	$5FFC
   8342  5ffc					      RORG	$9FFC
   8343  5ffc		       d4 9f		      .word.w	(start_bank5 & $ffff)
   8344  5ffe		       d4 9f		      .word.w	(start_bank5 & $ffff)
   8345  6000					      ORG	$6000
   8346  6000					      RORG	$B000
   8347  6000					      repeat	129
   8348  6000		       00		      .byte.b	0
   8347  6000					      repend
   8348  6001		       00		      .byte.b	0
   8347  6001					      repend
   8348  6002		       00		      .byte.b	0
   8347  6002					      repend
   8348  6003		       00		      .byte.b	0
   8347  6003					      repend
   8348  6004		       00		      .byte.b	0
   8347  6004					      repend
   8348  6005		       00		      .byte.b	0
   8347  6005					      repend
   8348  6006		       00		      .byte.b	0
   8347  6006					      repend
   8348  6007		       00		      .byte.b	0
   8347  6007					      repend
   8348  6008		       00		      .byte.b	0
   8347  6008					      repend
   8348  6009		       00		      .byte.b	0
   8347  6009					      repend
   8348  600a		       00		      .byte.b	0
   8347  600a					      repend
   8348  600b		       00		      .byte.b	0
   8347  600b					      repend
   8348  600c		       00		      .byte.b	0
   8347  600c					      repend
   8348  600d		       00		      .byte.b	0
   8347  600d					      repend
   8348  600e		       00		      .byte.b	0
   8347  600e					      repend
   8348  600f		       00		      .byte.b	0
   8347  600f					      repend
   8348  6010		       00		      .byte.b	0
   8347  6010					      repend
   8348  6011		       00		      .byte.b	0
   8347  6011					      repend
   8348  6012		       00		      .byte.b	0
   8347  6012					      repend
   8348  6013		       00		      .byte.b	0
   8347  6013					      repend
   8348  6014		       00		      .byte.b	0
   8347  6014					      repend
   8348  6015		       00		      .byte.b	0
   8347  6015					      repend
   8348  6016		       00		      .byte.b	0
   8347  6016					      repend
   8348  6017		       00		      .byte.b	0
   8347  6017					      repend
   8348  6018		       00		      .byte.b	0
   8347  6018					      repend
   8348  6019		       00		      .byte.b	0
   8347  6019					      repend
   8348  601a		       00		      .byte.b	0
   8347  601a					      repend
   8348  601b		       00		      .byte.b	0
   8347  601b					      repend
   8348  601c		       00		      .byte.b	0
   8347  601c					      repend
   8348  601d		       00		      .byte.b	0
   8347  601d					      repend
   8348  601e		       00		      .byte.b	0
   8347  601e					      repend
   8348  601f		       00		      .byte.b	0
   8347  601f					      repend
   8348  6020		       00		      .byte.b	0
   8347  6020					      repend
   8348  6021		       00		      .byte.b	0
   8347  6021					      repend
   8348  6022		       00		      .byte.b	0
   8347  6022					      repend
   8348  6023		       00		      .byte.b	0
   8347  6023					      repend
   8348  6024		       00		      .byte.b	0
   8347  6024					      repend
   8348  6025		       00		      .byte.b	0
   8347  6025					      repend
   8348  6026		       00		      .byte.b	0
   8347  6026					      repend
   8348  6027		       00		      .byte.b	0
   8347  6027					      repend
   8348  6028		       00		      .byte.b	0
   8347  6028					      repend
   8348  6029		       00		      .byte.b	0
   8347  6029					      repend
   8348  602a		       00		      .byte.b	0
   8347  602a					      repend
   8348  602b		       00		      .byte.b	0
   8347  602b					      repend
   8348  602c		       00		      .byte.b	0
   8347  602c					      repend
   8348  602d		       00		      .byte.b	0
   8347  602d					      repend
   8348  602e		       00		      .byte.b	0
   8347  602e					      repend
   8348  602f		       00		      .byte.b	0
   8347  602f					      repend
   8348  6030		       00		      .byte.b	0
   8347  6030					      repend
   8348  6031		       00		      .byte.b	0
   8347  6031					      repend
   8348  6032		       00		      .byte.b	0
   8347  6032					      repend
   8348  6033		       00		      .byte.b	0
   8347  6033					      repend
   8348  6034		       00		      .byte.b	0
   8347  6034					      repend
   8348  6035		       00		      .byte.b	0
   8347  6035					      repend
   8348  6036		       00		      .byte.b	0
   8347  6036					      repend
   8348  6037		       00		      .byte.b	0
   8347  6037					      repend
   8348  6038		       00		      .byte.b	0
   8347  6038					      repend
   8348  6039		       00		      .byte.b	0
   8347  6039					      repend
   8348  603a		       00		      .byte.b	0
   8347  603a					      repend
   8348  603b		       00		      .byte.b	0
   8347  603b					      repend
   8348  603c		       00		      .byte.b	0
   8347  603c					      repend
   8348  603d		       00		      .byte.b	0
   8347  603d					      repend
   8348  603e		       00		      .byte.b	0
   8347  603e					      repend
   8348  603f		       00		      .byte.b	0
   8347  603f					      repend
   8348  6040		       00		      .byte.b	0
   8347  6040					      repend
   8348  6041		       00		      .byte.b	0
   8347  6041					      repend
   8348  6042		       00		      .byte.b	0
   8347  6042					      repend
   8348  6043		       00		      .byte.b	0
   8347  6043					      repend
   8348  6044		       00		      .byte.b	0
   8347  6044					      repend
   8348  6045		       00		      .byte.b	0
   8347  6045					      repend
   8348  6046		       00		      .byte.b	0
   8347  6046					      repend
   8348  6047		       00		      .byte.b	0
   8347  6047					      repend
   8348  6048		       00		      .byte.b	0
   8347  6048					      repend
   8348  6049		       00		      .byte.b	0
   8347  6049					      repend
   8348  604a		       00		      .byte.b	0
   8347  604a					      repend
   8348  604b		       00		      .byte.b	0
   8347  604b					      repend
   8348  604c		       00		      .byte.b	0
   8347  604c					      repend
   8348  604d		       00		      .byte.b	0
   8347  604d					      repend
   8348  604e		       00		      .byte.b	0
   8347  604e					      repend
   8348  604f		       00		      .byte.b	0
   8347  604f					      repend
   8348  6050		       00		      .byte.b	0
   8347  6050					      repend
   8348  6051		       00		      .byte.b	0
   8347  6051					      repend
   8348  6052		       00		      .byte.b	0
   8347  6052					      repend
   8348  6053		       00		      .byte.b	0
   8347  6053					      repend
   8348  6054		       00		      .byte.b	0
   8347  6054					      repend
   8348  6055		       00		      .byte.b	0
   8347  6055					      repend
   8348  6056		       00		      .byte.b	0
   8347  6056					      repend
   8348  6057		       00		      .byte.b	0
   8347  6057					      repend
   8348  6058		       00		      .byte.b	0
   8347  6058					      repend
   8348  6059		       00		      .byte.b	0
   8347  6059					      repend
   8348  605a		       00		      .byte.b	0
   8347  605a					      repend
   8348  605b		       00		      .byte.b	0
   8347  605b					      repend
   8348  605c		       00		      .byte.b	0
   8347  605c					      repend
   8348  605d		       00		      .byte.b	0
   8347  605d					      repend
   8348  605e		       00		      .byte.b	0
   8347  605e					      repend
   8348  605f		       00		      .byte.b	0
   8347  605f					      repend
   8348  6060		       00		      .byte.b	0
   8347  6060					      repend
   8348  6061		       00		      .byte.b	0
   8347  6061					      repend
   8348  6062		       00		      .byte.b	0
   8347  6062					      repend
   8348  6063		       00		      .byte.b	0
   8347  6063					      repend
   8348  6064		       00		      .byte.b	0
   8347  6064					      repend
   8348  6065		       00		      .byte.b	0
   8347  6065					      repend
   8348  6066		       00		      .byte.b	0
   8347  6066					      repend
   8348  6067		       00		      .byte.b	0
   8347  6067					      repend
   8348  6068		       00		      .byte.b	0
   8347  6068					      repend
   8348  6069		       00		      .byte.b	0
   8347  6069					      repend
   8348  606a		       00		      .byte.b	0
   8347  606a					      repend
   8348  606b		       00		      .byte.b	0
   8347  606b					      repend
   8348  606c		       00		      .byte.b	0
   8347  606c					      repend
   8348  606d		       00		      .byte.b	0
   8347  606d					      repend
   8348  606e		       00		      .byte.b	0
   8347  606e					      repend
   8348  606f		       00		      .byte.b	0
   8347  606f					      repend
   8348  6070		       00		      .byte.b	0
   8347  6070					      repend
   8348  6071		       00		      .byte.b	0
   8347  6071					      repend
   8348  6072		       00		      .byte.b	0
   8347  6072					      repend
   8348  6073		       00		      .byte.b	0
   8347  6073					      repend
   8348  6074		       00		      .byte.b	0
   8347  6074					      repend
   8348  6075		       00		      .byte.b	0
   8347  6075					      repend
   8348  6076		       00		      .byte.b	0
   8347  6076					      repend
   8348  6077		       00		      .byte.b	0
   8347  6077					      repend
   8348  6078		       00		      .byte.b	0
   8347  6078					      repend
   8348  6079		       00		      .byte.b	0
   8347  6079					      repend
   8348  607a		       00		      .byte.b	0
   8347  607a					      repend
   8348  607b		       00		      .byte.b	0
   8347  607b					      repend
   8348  607c		       00		      .byte.b	0
   8347  607c					      repend
   8348  607d		       00		      .byte.b	0
   8347  607d					      repend
   8348  607e		       00		      .byte.b	0
   8347  607e					      repend
   8348  607f		       00		      .byte.b	0
   8347  607f					      repend
   8348  6080		       00		      .byte.b	0
   8349  6081					      repend
   8350  6081				   .L0672		;  temp1 = temp1
   8351  6081
   8352  6081		       a5 cb		      LDA	temp1
   8353  6083		       85 cb		      STA	temp1
   8354  6085				   .
   8355  6085							; 
   8356  6085
   8357  6085				   .__Titlesceen
   8358  6085							; __Titlesceen
   8359  6085
   8360  6085				   .L0673		;  drop = 0
   8361  6085
   8362  6085		       a9 00		      LDA	#0
   8363  6087		       85 d1		      STA	drop
   8364  6089				   .L0674		;  asm
   8365  6089
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 3
      0  6089					      include	"titlescreen/asm/titlescreen.asm"
      1  6089
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 3
      0  6089					      include	"titlescreen/asm/layoutmacros.asm"
      1  6089
      2  6089							; the macro's used in the "titlescreen_layout.asm" file
      3  6089
      4  6089					      MAC	draw_96x2_1
      5  6089				   mk_96x2_1_on =	1
      6  6089					      jsr	draw_bmp_96x2_1
      7  6089					      ENDM
      8  6089
      9  6089					      MAC	draw_96x2_2
     10  6089				   mk_96x2_2_on =	1
     11  6089					      jsr	draw_bmp_96x2_2
     12  6089					      ENDM
     13  6089
     14  6089					      MAC	draw_96x2_3
     15  6089				   mk_96x2_3_on =	1
     16  6089					      jsr	draw_bmp_96x2_3
     17  6089					      ENDM
     18  6089
     19  6089					      MAC	draw_96x2_4
     20  6089				   mk_96x2_4_on =	1
     21  6089					      jsr	draw_bmp_96x2_4
     22  6089					      ENDM
     23  6089
     24  6089					      MAC	draw_96x2_5
     25  6089				   mk_96x2_5_on =	1
     26  6089					      jsr	draw_bmp_96x2_5
     27  6089					      ENDM
     28  6089
     29  6089					      MAC	draw_96x2_6
     30  6089				   mk_96x2_6_on =	1
     31  6089					      jsr	draw_bmp_96x2_6
     32  6089					      ENDM
     33  6089
     34  6089					      MAC	draw_96x2_7
     35  6089				   mk_96x2_7_on =	1
     36  6089					      jsr	draw_bmp_96x2_7
     37  6089					      ENDM
     38  6089
     39  6089					      MAC	draw_96x2_8
     40  6089				   mk_96x2_8_on =	1
     41  6089					      jsr	draw_bmp_96x2_8
     42  6089					      ENDM
     43  6089
     44  6089					      MAC	draw_48x1_1
     45  6089				   mk_48x1_X_on =	1
     46  6089				   mk_48x1_1_on =	1
     47  6089					      jsr	draw_bmp_48x1_1
     48  6089					      ENDM
     49  6089
     50  6089					      MAC	draw_48x1_2
     51  6089				   mk_48x1_X_on =	1
     52  6089				   mk_48x1_2_on =	1
     53  6089					      jsr	draw_bmp_48x1_2
     54  6089					      ENDM
     55  6089
     56  6089					      MAC	draw_48x1_3
     57  6089				   mk_48x1_X_on =	1
     58  6089				   mk_48x1_3_on =	1
     59  6089					      jsr	draw_bmp_48x1_3
     60  6089					      ENDM
     61  6089
     62  6089					      MAC	draw_48x1_4
     63  6089				   mk_48x1_X_on =	1
     64  6089				   mk_48x1_4_on =	1
     65  6089					      jsr	draw_bmp_48x1_4
     66  6089					      ENDM
     67  6089
     68  6089					      MAC	draw_48x1_5
     69  6089				   mk_48x1_X_on =	1
     70  6089				   mk_48x1_5_on =	1
     71  6089					      jsr	draw_bmp_48x1_5
     72  6089					      ENDM
     73  6089
     74  6089					      MAC	draw_48x1_6
     75  6089				   mk_48x1_X_on =	1
     76  6089				   mk_48x1_6_on =	1
     77  6089					      jsr	draw_bmp_48x1_6
     78  6089					      ENDM
     79  6089
     80  6089					      MAC	draw_48x1_7
     81  6089				   mk_48x1_X_on =	1
     82  6089				   mk_48x1_7_on =	1
     83  6089					      jsr	draw_bmp_48x1_7
     84  6089					      ENDM
     85  6089
     86  6089					      MAC	draw_48x1_8
     87  6089				   mk_48x1_X_on =	1
     88  6089				   mk_48x1_8_on =	1
     89  6089					      jsr	draw_bmp_48x1_8
     90  6089					      ENDM
     91  6089
     92  6089
     93  6089					      MAC	draw_48x2_1
     94  6089				   mk_48x2_X_on =	1
     95  6089				   mk_48x2_1_on =	1
     96  6089					      jsr	draw_bmp_48x2_1
     97  6089					      ENDM
     98  6089
     99  6089					      MAC	draw_48x2_2
    100  6089				   mk_48x2_X_on =	1
    101  6089				   mk_48x2_2_on =	1
    102  6089					      jsr	draw_bmp_48x2_2
    103  6089					      ENDM
    104  6089
    105  6089					      MAC	draw_48x2_3
    106  6089				   mk_48x2_X_on =	1
    107  6089				   mk_48x2_3_on =	1
    108  6089					      jsr	draw_bmp_48x2_3
    109  6089					      ENDM
    110  6089
    111  6089					      MAC	draw_48x2_4
    112  6089				   mk_48x2_X_on =	1
    113  6089				   mk_48x2_4_on =	1
    114  6089					      jsr	draw_bmp_48x2_4
    115  6089					      ENDM
    116  6089
    117  6089					      MAC	draw_48x2_5
    118  6089				   mk_48x2_X_on =	1
    119  6089				   mk_48x2_5_on =	1
    120  6089					      jsr	draw_bmp_48x2_5
    121  6089					      ENDM
    122  6089
    123  6089					      MAC	draw_48x2_6
    124  6089				   mk_48x2_X_on =	1
    125  6089				   mk_48x2_6_on =	1
    126  6089					      jsr	draw_bmp_48x2_6
    127  6089					      ENDM
    128  6089
    129  6089					      MAC	draw_48x2_7
    130  6089				   mk_48x2_X_on =	1
    131  6089				   mk_48x2_7_on =	1
    132  6089					      jsr	draw_bmp_48x2_7
    133  6089					      ENDM
    134  6089
    135  6089					      MAC	draw_48x2_8
    136  6089				   mk_48x2_X_on =	1
    137  6089				   mk_48x2_8_on =	1
    138  6089					      jsr	draw_bmp_48x2_8
    139  6089					      ENDM
    140  6089
    141  6089					      MAC	draw_player
    142  6089				   mk_player_on =	1
    143  6089					      jsr	draw_player_display
    144  6089					      ENDM
    145  6089
    146  6089					      MAC	draw_score
    147  6089				   mk_score_on =	1
    148  6089				   mk_48x1_X_on =	1
    149  6089					      jsr	draw_score_display
    150  6089					      ENDM
    151  6089
    152  6089					      MAC	draw_gameselect
    153  6089				   mk_gameselect_on =	1
    154  6089				   mk_48x1_X_on =	1
    155  6089					      jsr	draw_gameselect_display
    156  6089					      ENDM
    157  6089
    158  6089					      MAC	draw_space
    159  6089					      ldy	#{1}
    160  6089				   .loop
    161  6089					      sta	WSYNC
    162  6089					      dey
    163  6089					      bne	.loop
    164  6089					      ENDM
    165  6089
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/asm/dpcfix.asm LEVEL 3 PASS 3
      0  6089					      include	"titlescreen/asm/dpcfix.asm"
      1  6089							; reassign variables that DPC+ doesn't have
      2  6089
      3  6089				  -	      ifnconst	aux2
      4  6089				  -aux2       =	player2x
      5  6089					      endif
      6  6089				  -	      ifnconst	aux4
      7  6089				  -aux4       =	player4x
      8  6089					      endif
      9  6089				  -	      ifnconst	aux5
     10  6089				  -aux5       =	player5x
     11  6089					      endif
     12  6089				  -	      ifnconst	aux6
     13  6089				  -aux6       =	player6x
     14  6089					      endif
     15  6089
     16  6089				  -	      ifnconst	player0pointer
     17  6089				  -player0pointer =	player2y
     18  6089					      endif
     19  6089				  -	      ifnconst	player1pointer
     20  6089				  -player1pointer =	player2height	; to player3height
     21  6089					      endif
     22  6089				  -	      ifnconst	player1color
     23  6089				  -player1color =	player4height	; to player5height
     24  6089					      endif
     25  6089				  -	      ifnconst	scorepointers
     26  6089				  -scorepointers =	player6height	; to NUSIZ8
     27  6089					      endif
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 3
      0  6089					      include	"titlescreen/titlescreen_layout.asm"
      1  6089
      2  6089							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  6089							; in the order they were listed.
      4  6089							;
      5  6089							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  6089							; it won't use any rom space.
      7  6089
      8  6089					      MAC	titlescreenlayout
      9  6089					      draw_96x2_1
     10  6089					      draw_48x1_1
     11  6089					      draw_96x2_2
     12  6089					      draw_96x2_4
     13  6089					      draw_96x2_5
     14  6089					      draw_space	2
     15  6089					      draw_gameselect
     16  6089					      draw_score
     17  6089					      ENDM
     18  6089
     19  6089							; minikernel choices are:
     20  6089							;
     21  6089							; draw_48x1_1, draw_48x1_2, draw_48x1_3
     22  6089							;	The first, second, and third 48-wide single-line bitmap minikernels
     23  6089							;
     24  6089							; draw_48x2_1, draw_48x2_2, draw_48x2_3
     25  6089							;	The first, second, and third 48-wide double-line bitmap minikernels
     26  6089							;
     27  6089							; draw_96x2_1, draw_96x2_2, draw_96x2_3
     28  6089							;	The first, second, and third 96-wide double-line bitmap minikernels
     29  6089							;
     30  6089							; draw_gameselect
     31  6089							;	The game selection display minikernel
     32  6089							;
     33  6089							; draw_score
     34  6089							;	A minikernel that draws the score
     35  6089							;
     36  6089							; draw_space 10
     37  6089							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      5  6089
      6  6089				   .titledrawscreen
      7  6089				   title_eat_overscan
      8  6089							;bB runs in overscan. Wait for the overscan to run out...
      9  6089		       18		      clc
     10  608a		       ad 84 02 	      lda	INTIM
     11  608d		       30 fa		      bmi	title_eat_overscan
     12  608f		       4c 92 b0 	      jmp	title_do_vertical_sync
     13  6092
     14  6092				   title_do_vertical_sync
     15  6092		       a9 02		      lda	#2
     16  6094		       85 02		      sta	WSYNC	;one line with VSYNC
     17  6096		       85 00		      sta	VSYNC	;enable VSYNC
     18  6098		       85 02		      sta	WSYNC	;one line with VSYNC
     19  609a		       85 02		      sta	WSYNC	;one line with VSYNC
     20  609c		       a9 00		      lda	#0
     21  609e		       85 02		      sta	WSYNC	;one line with VSYNC
     22  60a0		       85 00		      sta	VSYNC	;turn off VSYNC
     23  60a2
     24  60a2							;lda #42+128
     25  60a2				  -	      ifnconst	vblank_time
     26  60a2				  -	      lda	#42+128
     27  60a2					      else
     28  60a2		       a9 ab		      lda	#vblank_time+128
     29  60a4					      endif
     30  60a4
     31  60a4		       8d 96 02 	      sta	TIM64T
     32  60a7
     33  60a7		       00 82	   titleframe =	missile0x
     34  60a7		       e6 82		      inc	titleframe	; increment the frame counter
     35  60a9
     36  60a9				  -	      ifconst	.title_vblank
     37  60a9				  -	      jsr	.title_vblank
     38  60a9					      endif
     39  60a9
     40  60a9				   title_vblank_loop
     41  60a9		       ad 84 02 	      lda	INTIM
     42  60ac		       30 fb		      bmi	title_vblank_loop
     43  60ae		       a9 00		      lda	#0
     44  60b0		       85 02		      sta	WSYNC
     45  60b2		       85 01		      sta	VBLANK
     46  60b4		       85 1d		      sta	ENAM0
     47  60b6		       85 1f		      sta	ENABL
     48  60b8
     49  60b8				   title_playfield
     50  60b8
     51  60b8							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     52  60b8
     53  60b8		       a9 e6		      lda	#230
     54  60ba		       8d 96 02 	      sta	TIM64T
     55  60bd
     56  60bd		       a9 01		      lda	#1
     57  60bf		       85 0a		      sta	CTRLPF
     58  60c1		       18		      clc
     59  60c2
     60  60c2		       a9 00		      lda	#0
     61  60c4		       85 0b		      sta	REFP0
     62  60c6		       85 0c		      sta	REFP1
     63  60c8		       85 02		      sta	WSYNC
     64  60ca		       ad 16 b1 	      lda	titlescreencolor
     65  60cd		       85 09		      sta	COLUBK
     66  60cf
      0  60cf					      titlescreenlayout
      0  60cf					      draw_96x2_1
      1  60cf		       00 01	   mk_96x2_1_on =	1
      2  60cf		       20 da b1 	      jsr	draw_bmp_96x2_1
      0  60d2					      draw_48x1_1
      1  60d2		       00 01	   mk_48x1_X_on =	1
      2  60d2		       00 01	   mk_48x1_1_on =	1
      3  60d2		       20 17 b1 	      jsr	draw_bmp_48x1_1
      0  60d5					      draw_96x2_2
      1  60d5		       00 01	   mk_96x2_2_on =	1
      2  60d5		       20 71 b3 	      jsr	draw_bmp_96x2_2
      0  60d8					      draw_96x2_4
      1  60d8		       00 01	   mk_96x2_4_on =	1
      2  60d8		       20 71 b5 	      jsr	draw_bmp_96x2_4
      0  60db					      draw_96x2_5
      1  60db		       00 01	   mk_96x2_5_on =	1
      2  60db		       20 71 b7 	      jsr	draw_bmp_96x2_5
      0  60de					      draw_space	2
      1  60de		       a0 02		      ldy	#2
      2  60e0				   .loop
      3  60e0		       85 02		      sta	WSYNC
      4  60e2		       88		      dey
      5  60e3		       d0 fb		      bne	.loop
      0  60e5					      draw_gameselect
      1  60e5		       00 01	   mk_gameselect_on =	1
      2  60e5		       00 01	   mk_48x1_X_on =	1
      3  60e5		       20 53 ba 	      jsr	draw_gameselect_display
      0  60e8					      draw_score
      1  60e8		       00 01	   mk_score_on =	1
      2  60e8		       00 01	   mk_48x1_X_on =	1
      3  60e8		       20 71 b9 	      jsr	draw_score_display
     68  60eb
     69  60eb		       4c c9 ba 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     70  60ee
------- FILE titlescreen/asm/position48.asm LEVEL 3 PASS 3
      0  60ee					      include	"titlescreen/asm/position48.asm"
      1  60ee
      2  60ee				   position48
      3  60ee
      4  60ee							;postion P0 and P1
      5  60ee
      6  60ee		       85 02		      sta	WSYNC
      7  60f0
      8  60f0		       a9 90		      lda	#$90	;2
      9  60f2		       85 20		      sta	HMP0	;3
     10  60f4		       a9 a0		      lda	#$A0	;2
     11  60f6		       85 21		      sta	HMP1	;3
     12  60f8
     13  60f8		       e6 cb		      inc	temp1
     14  60fa		       c6 cb		      dec	temp1
     15  60fc		       e6 cb		      inc	temp1
     16  60fe		       c6 cb		      dec	temp1
     17  6100		       e6 cb		      inc	temp1
      0  6102					      sleep	2
      1  6102				   .CYCLES    SET	2
      2  6102
      3  6102				  -	      IF	.CYCLES < 2
      4  6102				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6102				  -	      ERR
      6  6102					      ENDIF
      7  6102
      8  6102				  -	      IF	.CYCLES & 1
      9  6102				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6102				  -	      nop	0
     11  6102				  -	      ELSE
     12  6102				  -	      bit	VSYNC
     13  6102				  -	      ENDIF
     14  6102				  -.CYCLES    SET	.CYCLES - 3
     15  6102					      ENDIF
     16  6102
     17  6102					      REPEAT	.CYCLES / 2
     18  6102		       ea		      nop
     19  6103					      REPEND
     19  6103		       85 10		      sta	RESP0	;  +3
     20  6105		       85 11		      sta	RESP1	;  +3
     21  6107		       c6 cb		      dec	temp1	;  +5
     22  6109		       e6 cb		      inc	temp1	;  +5
     23  610b		       c6 cb		      dec	temp1	;  +5
     24  610d		       e6 cb		      inc	temp1	;  +5
     25  610f		       c6 cb		      dec	temp1	;  +5
      0  6111					      sleep	3
      1  6111				   .CYCLES    SET	3
      2  6111
      3  6111				  -	      IF	.CYCLES < 2
      4  6111				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6111				  -	      ERR
      6  6111					      ENDIF
      7  6111
      8  6111					      IF	.CYCLES & 1
      9  6111					      IFNCONST	NO_ILLEGAL_OPCODES
     10  6111		       04 00		      nop	0
     11  6113				  -	      ELSE
     12  6113				  -	      bit	VSYNC
     13  6113					      ENDIF
     14  6113				   .CYCLES    SET	.CYCLES - 3
     15  6113					      ENDIF
     16  6113
     17  6113				  -	      REPEAT	.CYCLES / 2
     18  6113				  -	      nop
     19  6113					      REPEND
     27  6113		       85 2a		      sta	HMOVE	; +76
     28  6115		       60		      RTS
     29  6116
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 3
      0  6116					      include	"titlescreen/titlescreen_color.asm"
      1  6116							; This is where the titlescreen background color gets set.
      2  6116							; You can also do a "dim titlescreencolor=[letter]" in bB
      3  6116							; if you want to change the color on the fly.
      4  6116
      5  6116				  -	      ifnconst	titlescreencolor
      6  6116				  -titlescreencolor
      7  6116					      endif
      8  6116		       00		      .byte.b	$00
      9  6117
------- FILE titlescreen/asm/titlescreen.asm
     73  6117
     74  6117					      ifconst	mk_48x1_1_on
------- FILE titlescreen/asm/48x1_1_kernel.asm LEVEL 3 PASS 3
      0  6117					      include	"titlescreen/asm/48x1_1_kernel.asm"
      1  6117
      2  6117				   draw_bmp_48x1_1
      3  6117
      4  6117		       a9 00		      lda	#0
      5  6119		       85 1b		      sta	GRP0
      6  611b		       85 1c		      sta	GRP1
      7  611d
      8  611d		       a0 0b		      ldy	#11
      9  611f				   bmp_48x1_1_pointersetup
     10  611f		       b9 53 b1 	      lda	bmp_48x1_1_values,y
     11  6122		       99 ab 00 	      sta	scorepointers,y
     12  6125		       88		      dey
     13  6126		       b9 53 b1 	      lda	bmp_48x1_1_values,y
     14  6129				  -	      ifconst	bmp_48x1_1_index
     15  6129				  -	      sec
     16  6129				  -	      sbc	bmp_48x1_1_index
     17  6129					      endif
     18  6129		       99 ab 00 	      sta	scorepointers,y
     19  612c		       88		      dey
     20  612d		       10 f0		      bpl	bmp_48x1_1_pointersetup
     21  612f
     22  612f		       a0 31		      ldy	(#bmp_48x1_1_window-1)
     23  6131		       84 91		      sty	aux2
     24  6133
     25  6133					      ifconst	bmp_48x1_1_background
     26  6133		       ad ef ba 	      lda	bmp_48x1_1_background
     27  6136				  -	      else
     28  6136				  -	      lda	titlescreencolor
     29  6136					      endif
     30  6136		       85 c7		      sta	aux4
     31  6138
     32  6138		       ad f0 ba 	      lda	bmp_48x1_1_color
     33  613b		       85 06		      sta	COLUP0	;3
     34  613d		       85 07		      sta	COLUP1	;3
     35  613f		       85 2b		      sta	HMCLR	;3
     36  6141
     37  6141		       ad 16 b1 	      lda	titlescreencolor
     38  6144		       85 08		      sta	COLUPF
     39  6146
     40  6146					      ifconst	bmp_48x1_1_PF1
     41  6146		       ad ed ba 	      lda	bmp_48x1_1_PF1
     42  6149				  -	      else
     43  6149				  -	      lda	#0
     44  6149				  -	      nop
     45  6149					      endif
     46  6149		       85 0e		      sta	PF1
     47  614b
     48  614b					      ifconst	bmp_48x1_1_PF2
     49  614b		       ad ee ba 	      lda	bmp_48x1_1_PF2
     50  614e				  -	      else
     51  614e				  -	      lda	#0
     52  614e				  -	      nop
     53  614e					      endif
     54  614e		       85 0f		      sta	PF2
     55  6150
     56  6150		       4c 5f b1 	      jmp	draw_bmp_48x1_X	; the common 1lk bitmap minikernel
     57  6153
     58  6153				   bmp_48x1_1_values
     59  6153		       00 bb		      .word.w	(bmp_48x1_1_00+#bmp_48x1_1_height-#bmp_48x1_1_window)
     60  6155		       32 bb		      .word.w	(bmp_48x1_1_01+#bmp_48x1_1_height-#bmp_48x1_1_window)
     61  6157		       64 bb		      .word.w	(bmp_48x1_1_02+#bmp_48x1_1_height-#bmp_48x1_1_window)
     62  6159		       96 bb		      .word.w	(bmp_48x1_1_03+#bmp_48x1_1_height-#bmp_48x1_1_window)
     63  615b		       c8 bb		      .word.w	(bmp_48x1_1_04+#bmp_48x1_1_height-#bmp_48x1_1_window)
     64  615d		       00 bc		      .word.w	(bmp_48x1_1_05+#bmp_48x1_1_height-#bmp_48x1_1_window)
     65  615f
------- FILE titlescreen/asm/titlescreen.asm
     76  615f					      endif		;mk_48x1_1_on
     77  615f
     78  615f				  -	      ifconst	mk_48x1_2_on
     79  615f				  -	      include	"titlescreen/asm/48x1_2_kernel.asm"
     80  615f					      endif		;mk_48x1_2_on
     81  615f
     82  615f				  -	      ifconst	mk_48x1_3_on
     83  615f				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  615f					      endif		;mk_48x1_3_on
     85  615f
     86  615f				  -	      ifconst	mk_48x1_4_on
     87  615f				  -	      include	"titlescreen/asm/48x1_4_kernel.asm"
     88  615f					      endif		;mk_48x1_4_on
     89  615f
     90  615f				  -	      ifconst	mk_48x1_5_on
     91  615f				  -	      include	"titlescreen/asm/48x1_5_kernel.asm"
     92  615f					      endif		;mk_48x1_5_on
     93  615f
     94  615f				  -	      ifconst	mk_48x1_6_on
     95  615f				  -	      include	"titlescreen/asm/48x1_6_kernel.asm"
     96  615f					      endif		;mk_48x1_6_on
     97  615f
     98  615f				  -	      ifconst	mk_48x1_7_on
     99  615f				  -	      include	"titlescreen/asm/48x1_7_kernel.asm"
    100  615f					      endif		;mk_48x1_7_on
    101  615f
    102  615f				  -	      ifconst	mk_48x1_8_on
    103  615f				  -	      include	"titlescreen/asm/48x1_8_kernel.asm"
    104  615f					      endif		;mk_48x1_8_on
    105  615f
    106  615f				  -	      ifconst	mk_48x2_1_on
    107  615f				  -	      include	"titlescreen/asm/48x2_1_kernel.asm"
    108  615f					      endif		;mk_48x2_1_on
    109  615f
    110  615f				  -	      ifconst	mk_48x2_2_on
    111  615f				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
    112  615f					      endif		;mk_48x2_2_on
    113  615f
    114  615f				  -	      ifconst	mk_48x2_3_on
    115  615f				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
    116  615f					      endif		;mk_48x2_3_on
    117  615f
    118  615f				  -	      ifconst	mk_48x2_4_on
    119  615f				  -	      include	"titlescreen/asm/48x2_4_kernel.asm"
    120  615f					      endif		;mk_48x2_4_on
    121  615f
    122  615f				  -	      ifconst	mk_48x2_5_on
    123  615f				  -	      include	"titlescreen/asm/48x2_5_kernel.asm"
    124  615f					      endif		;mk_48x2_5_on
    125  615f
    126  615f				  -	      ifconst	mk_48x2_6_on
    127  615f				  -	      include	"titlescreen/asm/48x2_6_kernel.asm"
    128  615f					      endif		;mk_48x2_6_on
    129  615f
    130  615f				  -	      ifconst	mk_48x2_7_on
    131  615f				  -	      include	"titlescreen/asm/48x2_7_kernel.asm"
    132  615f					      endif		;mk_48x2_7_on
    133  615f
    134  615f				  -	      ifconst	mk_48x2_8_on
    135  615f				  -	      include	"titlescreen/asm/48x2_8_kernel.asm"
    136  615f					      endif		;mk_48x2_8_on
    137  615f
    138  615f					      ifconst	mk_48x1_X_on
------- FILE titlescreen/asm/48x1_X_kernel.asm LEVEL 3 PASS 3
      0  615f					      include	"titlescreen/asm/48x1_X_kernel.asm"
      1  615f				   draw_bmp_48x1_X
      2  615f
      3  615f		       a9 03		      lda	#3
      4  6161		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      5  6163		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
      6  6165
      7  6165		       ba		      tsx
      8  6166		       86 f6		      stx	stack1	;save the stack pointer
      9  6168
     10  6168		       20 ee b0 	      jsr	position48
     11  616b
     12  616b		       a9 03		      lda	#3	;2
     13  616d		       85 25		      sta	VDELP0	;3
     14  616f		       85 26		      sta	VDELP1	;3
     15  6171
     16  6171		       a9 01		      lda	#1	;2
     17  6173		       85 0a		      sta	CTRLPF	;3
     18  6175
     19  6175							;enough cycles have passed for the HMOV, so we can clear HMCLR
     20  6175		       85 2b		      sta	HMCLR
     21  6177
     22  6177		       85 02		      sta	WSYNC
     23  6179
     24  6179		       e6 cb		      inc	temp1	;5
     25  617b		       c6 cb		      dec	temp1	;5
     26  617d		       e6 cb		      inc	temp1	;5
     27  617f		       c6 cb		      dec	temp1	;5
     28  6181		       e6 cb		      inc	temp1	;5
     29  6183		       c6 cb		      dec	temp1	;5
     30  6185		       e6 cb		      inc	temp1	;5
     31  6187		       c6 cb		      dec	temp1	;5
     32  6189		       e6 cb		      inc	temp1	;5
     33  618b		       c6 cb		      dec	temp1	;5
     34  618d
      0  618d					      sleep	5
      1  618d				   .CYCLES    SET	5
      2  618d
      3  618d				  -	      IF	.CYCLES < 2
      4  618d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  618d				  -	      ERR
      6  618d					      ENDIF
      7  618d
      8  618d					      IF	.CYCLES & 1
      9  618d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  618d		       04 00		      nop	0
     11  618f				  -	      ELSE
     12  618f				  -	      bit	VSYNC
     13  618f					      ENDIF
     14  618f				   .CYCLES    SET	.CYCLES - 3
     15  618f					      ENDIF
     16  618f
     17  618f					      REPEAT	.CYCLES / 2
     18  618f		       ea		      nop
     19  6190					      REPEND
     36  6190
     37  6190		       c8		      iny
     38  6191
     39  6191		       4c 94 b1 	      jmp	pf48x1_X_loop_entry
     40  6194
     41  6194				  -	      if	>. != >[.+$2a]
     42  6194				  -	      align	256
     43  6194					      endif
     44  6194
     45  6194				   pf48x1_X_loop_entry
     46  6194				   pf48x1_X_loop
     47  6194		       88		      dey		;2
     48  6195		       84 91		      sty	aux2	;3
     49  6197		       b1 ab		      lda	(scorepointers+0),y	;5
     50  6199		       85 1b		      sta	GRP0	;3
     51  619b
     52  619b		       b1 ad		      lda	(scorepointers+2),y	;5
     53  619d		       85 1c		      sta	GRP1	;3
     54  619f		       b1 af		      lda	(scorepointers+4),y	;5
     55  61a1		       85 1b		      sta	GRP0	;3
     56  61a3
      0  61a3					      sleep	2	; I could make this indirect, if we want to burn more rom
      1  61a3				   .CYCLES    SET	2
      2  61a3
      3  61a3				  -	      IF	.CYCLES < 2
      4  61a3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  61a3				  -	      ERR
      6  61a3					      ENDIF
      7  61a3
      8  61a3				  -	      IF	.CYCLES & 1
      9  61a3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  61a3				  -	      nop	0
     11  61a3				  -	      ELSE
     12  61a3				  -	      bit	VSYNC
     13  61a3				  -	      ENDIF
     14  61a3				  -.CYCLES    SET	.CYCLES - 3
     15  61a3					      ENDIF
     16  61a3
     17  61a3					      REPEAT	.CYCLES / 2
     18  61a3		       ea		      nop
     19  61a4					      REPEND
     58  61a4		       a5 c7		      lda	aux4	;3
     59  61a6		       85 08		      sta	COLUPF	;3 this is a big fat waste...
     60  61a8
     61  61a8		       b3 b5		      lax	(scorepointers+10),y	;5
     62  61aa		       b1 b3		      lda	(scorepointers+8),y	;5
     63  61ac		       85 f7		      sta	stack2	;3
     64  61ae		       b1 b1		      lda	(scorepointers+6),y	;5
     65  61b0		       a4 f7		      ldy	stack2	;3
     66  61b2
     67  61b2		       85 1c		      sta	GRP1	;3
     68  61b4		       84 1b		      sty	GRP0	;3
     69  61b6		       86 1c		      stx	GRP1	;3
     70  61b8		       84 1b		      sty	GRP0	;3
     71  61ba
     72  61ba		       a4 91		      ldy	aux2	;3
     73  61bc		       d0 d6		      bne	pf48x1_X_loop	;2/3
     74  61be
     75  61be				   pf48x1_X_codeend
     76  61be							;echo "critical code in 48x1 is ",(pf48x1_X_codeend-pf48x1_X_loop), " bytes long."
     77  61be
     78  61be		       a9 00		      lda	#0
     79  61c0		       85 1b		      sta	GRP0
     80  61c2		       85 1c		      sta	GRP1
     81  61c4		       85 1b		      sta	GRP0
     82  61c6		       85 1c		      sta	GRP1
     83  61c8		       85 1f		      sta	ENABL
     84  61ca		       85 1d		      sta	ENAM0
     85  61cc		       85 25		      sta	VDELP0
     86  61ce		       85 26		      sta	VDELP1
     87  61d0		       85 0d		      sta	PF0
     88  61d2		       85 0e		      sta	PF1
     89  61d4		       85 0f		      sta	PF2
     90  61d6
     91  61d6		       a6 f6		      ldx	stack1	;restore the stack pointer
     92  61d8		       9a		      txs
     93  61d9		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    140  61da					      endif		;mk_48x1_X_on
    141  61da
    142  61da				  -	      ifconst	mk_48x2_X_on
    143  61da				  -	      include	"titlescreen/asm/48x2_X_kernel.asm"
    144  61da					      endif		;mk_48x2_X_on
    145  61da
    146  61da
    147  61da					      ifconst	mk_96x2_1_on
------- FILE titlescreen/asm/96x2_1_kernel.asm LEVEL 3 PASS 3
      0  61da					      include	"titlescreen/asm/96x2_1_kernel.asm"
      1  61da				   draw_bmp_96x2_1
      2  61da
      3  61da				  -	      ifconst	bmp_96x2_1_index
      4  61da				  -	      lda	#(bmp_96x2_1_height-1)
      5  61da				  -	      sec
      6  61da				  -	      sbc	bmp_96x2_1_index
      7  61da				  -	      tay
      8  61da				  -	      sbc	#bmp_96x2_1_window
      9  61da				  -	      sta	temp1
     10  61da					      else
     11  61da		       a0 13		      ldy	#(bmp_96x2_1_window-1)
     12  61dc		       a9 ff		      lda	#255
     13  61de		       85 cb		      sta	temp1
     14  61e0					      endif
     15  61e0
     16  61e0		       a9 03		      lda	#3
     17  61e2		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  61e4		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  61e6		       a9 00		      lda	#0
     20  61e8
     21  61e8		       b9 33 bc 	      lda	bmp_96x2_1_colors,y	;4
     22  61eb				  -	      ifconst	bmp_96x2_1_fade
     23  61eb				  -	      and	bmp_96x2_1_fade
     24  61eb					      endif
     25  61eb		       85 06		      sta	COLUP0	;3
     26  61ed		       85 07		      sta	COLUP1	;3
     27  61ef		       85 2b		      sta	HMCLR	;3
     28  61f1
     29  61f1		       a5 82		      lda	titleframe
     30  61f3		       29 01		      and	#1
     31  61f5		       f0 03		      beq	jmp_pf96x2_1_frame0
     32  61f7		       4c a1 b2 	      jmp	pf96x2_1_frame1
     33  61fa				   jmp_pf96x2_1_frame0
     34  61fa		       4c fd b1 	      jmp	pf96x2_1_frame0
     35  61fd
     36  61fd				   pf96x2_1_frame0
     37  61fd							;postion P0 and P1
     38  61fd		       85 02		      sta	WSYNC
     39  61ff		       a9 e0		      lda	#%11100000
     40  6201		       85 20		      sta	HMP0
     41  6203		       a9 10		      lda	#%00010000
     42  6205		       85 21		      sta	HMP1
     43  6207		       85 02		      sta	WSYNC
      0  6209					      sleep	28
      1  6209				   .CYCLES    SET	28
      2  6209
      3  6209				  -	      IF	.CYCLES < 2
      4  6209				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6209				  -	      ERR
      6  6209					      ENDIF
      7  6209
      8  6209				  -	      IF	.CYCLES & 1
      9  6209				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6209				  -	      nop	0
     11  6209				  -	      ELSE
     12  6209				  -	      bit	VSYNC
     13  6209				  -	      ENDIF
     14  6209				  -.CYCLES    SET	.CYCLES - 3
     15  6209					      ENDIF
     16  6209
     17  6209					      REPEAT	.CYCLES / 2
     18  6209		       ea		      nop
     17  6209					      REPEND
     18  620a		       ea		      nop
     17  620a					      REPEND
     18  620b		       ea		      nop
     17  620b					      REPEND
     18  620c		       ea		      nop
     17  620c					      REPEND
     18  620d		       ea		      nop
     17  620d					      REPEND
     18  620e		       ea		      nop
     17  620e					      REPEND
     18  620f		       ea		      nop
     17  620f					      REPEND
     18  6210		       ea		      nop
     17  6210					      REPEND
     18  6211		       ea		      nop
     17  6211					      REPEND
     18  6212		       ea		      nop
     17  6212					      REPEND
     18  6213		       ea		      nop
     17  6213					      REPEND
     18  6214		       ea		      nop
     17  6214					      REPEND
     18  6215		       ea		      nop
     17  6215					      REPEND
     18  6216		       ea		      nop
     19  6217					      REPEND
     45  6217		       85 10		      sta	RESP0
      0  6219					      sleep	14
      1  6219				   .CYCLES    SET	14
      2  6219
      3  6219				  -	      IF	.CYCLES < 2
      4  6219				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6219				  -	      ERR
      6  6219					      ENDIF
      7  6219
      8  6219				  -	      IF	.CYCLES & 1
      9  6219				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6219				  -	      nop	0
     11  6219				  -	      ELSE
     12  6219				  -	      bit	VSYNC
     13  6219				  -	      ENDIF
     14  6219				  -.CYCLES    SET	.CYCLES - 3
     15  6219					      ENDIF
     16  6219
     17  6219					      REPEAT	.CYCLES / 2
     18  6219		       ea		      nop
     17  6219					      REPEND
     18  621a		       ea		      nop
     17  621a					      REPEND
     18  621b		       ea		      nop
     17  621b					      REPEND
     18  621c		       ea		      nop
     17  621c					      REPEND
     18  621d		       ea		      nop
     17  621d					      REPEND
     18  621e		       ea		      nop
     17  621e					      REPEND
     18  621f		       ea		      nop
     19  6220					      REPEND
     47  6220		       85 11		      sta	RESP1
     48  6222		       85 02		      sta	WSYNC
     49  6224		       85 2a		      sta	HMOVE
     50  6226
     51  6226		       85 02		      sta	WSYNC
     52  6228		       85 2b		      sta	HMCLR
     53  622a		       85 02		      sta	WSYNC
     54  622c
      0  622c					      sleep	4
      1  622c				   .CYCLES    SET	4
      2  622c
      3  622c				  -	      IF	.CYCLES < 2
      4  622c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  622c				  -	      ERR
      6  622c					      ENDIF
      7  622c
      8  622c				  -	      IF	.CYCLES & 1
      9  622c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  622c				  -	      nop	0
     11  622c				  -	      ELSE
     12  622c				  -	      bit	VSYNC
     13  622c				  -	      ENDIF
     14  622c				  -.CYCLES    SET	.CYCLES - 3
     15  622c					      ENDIF
     16  622c
     17  622c					      REPEAT	.CYCLES / 2
     18  622c		       ea		      nop
     17  622c					      REPEND
     18  622d		       ea		      nop
     19  622e					      REPEND
     56  622e		       4c 31 b2 	      jmp	pfline_96x2_1_frame0
     57  6231							;align so our branch doesn't unexpectedly cross a page...
     58  6231				  -	      if	>. != >[.+$70]
     59  6231				  -	      align	256
     60  6231					      endif
     61  6231
     62  6231				   pfline_96x2_1_frame0
     63  6231		       a9 80		      lda	#$80	;2
     64  6233		       85 20		      sta	HMP0	;3
     65  6235		       85 21		      sta	HMP1	;3
     66  6237
     67  6237		       b9 bf bc 	      lda	bmp_96x2_1_06,y	;4
     68  623a		       85 1c		      sta	GRP1	;3
     69  623c
     70  623c		       b9 47 bc 	      lda	bmp_96x2_1_00,y
     71  623f		       85 1b		      sta	GRP0
     72  6241		       b9 6f bc 	      lda	bmp_96x2_1_02,y
     73  6244		       85 1b		      sta	GRP0
     74  6246		       b9 97 bc 	      lda	bmp_96x2_1_04,y
     75  6249		       85 1b		      sta	GRP0
     76  624b
      0  624b					      sleep	2
      1  624b				   .CYCLES    SET	2
      2  624b
      3  624b				  -	      IF	.CYCLES < 2
      4  624b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  624b				  -	      ERR
      6  624b					      ENDIF
      7  624b
      8  624b				  -	      IF	.CYCLES & 1
      9  624b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  624b				  -	      nop	0
     11  624b				  -	      ELSE
     12  624b				  -	      bit	VSYNC
     13  624b				  -	      ENDIF
     14  624b				  -.CYCLES    SET	.CYCLES - 3
     15  624b					      ENDIF
     16  624b
     17  624b					      REPEAT	.CYCLES / 2
     18  624b		       ea		      nop
     19  624c					      REPEND
     78  624c
     79  624c		       b9 e7 bc 	      lda	bmp_96x2_1_08,y
     80  624f		       85 1c		      sta	GRP1
     81  6251		       b9 14 bd 	      lda	bmp_96x2_1_10,y
     82  6254		       85 1c		      sta	GRP1
     83  6256
     84  6256		       b9 5b bc 	      lda	bmp_96x2_1_01,y
     85  6259		       85 1b		      sta	GRP0
     86  625b
      0  625b					      sleep	8
      1  625b				   .CYCLES    SET	8
      2  625b
      3  625b				  -	      IF	.CYCLES < 2
      4  625b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  625b				  -	      ERR
      6  625b					      ENDIF
      7  625b
      8  625b				  -	      IF	.CYCLES & 1
      9  625b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  625b				  -	      nop	0
     11  625b				  -	      ELSE
     12  625b				  -	      bit	VSYNC
     13  625b				  -	      ENDIF
     14  625b				  -.CYCLES    SET	.CYCLES - 3
     15  625b					      ENDIF
     16  625b
     17  625b					      REPEAT	.CYCLES / 2
     18  625b		       ea		      nop
     17  625b					      REPEND
     18  625c		       ea		      nop
     17  625c					      REPEND
     18  625d		       ea		      nop
     17  625d					      REPEND
     18  625e		       ea		      nop
     19  625f					      REPEND
     88  625f
     89  625f							;sta WSYNC	;=0
     90  625f		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  6261
     92  6261		       b9 32 bc 	      lda	bmp_96x2_1_colors-1,y	;4 - get the title color early and store it for later
     93  6264				  -	      ifconst	bmp_96x2_1_fade
     94  6264				  -	      and	bmp_96x2_1_fade
     95  6264					      else
      0  6264					      sleep	3
      1  6264				   .CYCLES    SET	3
      2  6264
      3  6264				  -	      IF	.CYCLES < 2
      4  6264				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6264				  -	      ERR
      6  6264					      ENDIF
      7  6264
      8  6264					      IF	.CYCLES & 1
      9  6264					      IFNCONST	NO_ILLEGAL_OPCODES
     10  6264		       04 00		      nop	0
     11  6266				  -	      ELSE
     12  6266				  -	      bit	VSYNC
     13  6266					      ENDIF
     14  6266				   .CYCLES    SET	.CYCLES - 3
     15  6266					      ENDIF
     16  6266
     17  6266				  -	      REPEAT	.CYCLES / 2
     18  6266				  -	      nop
     19  6266					      REPEND
     97  6266					      endif
     98  6266		       aa		      tax
     99  6267
    100  6267		       a9 00		      lda	#0	;2
    101  6269		       85 20		      sta	HMP0	;3
    102  626b		       85 21		      sta	HMP1	;3
    103  626d
      0  626d					      sleep	7
      1  626d				   .CYCLES    SET	7
      2  626d
      3  626d				  -	      IF	.CYCLES < 2
      4  626d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  626d				  -	      ERR
      6  626d					      ENDIF
      7  626d
      8  626d					      IF	.CYCLES & 1
      9  626d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  626d		       04 00		      nop	0
     11  626f				  -	      ELSE
     12  626f				  -	      bit	VSYNC
     13  626f					      ENDIF
     14  626f				   .CYCLES    SET	.CYCLES - 3
     15  626f					      ENDIF
     16  626f
     17  626f					      REPEAT	.CYCLES / 2
     18  626f		       ea		      nop
     17  626f					      REPEND
     18  6270		       ea		      nop
     19  6271					      REPEND
    105  6271
    106  6271		       b9 d3 bc 	      lda	bmp_96x2_1_07,y
    107  6274		       85 1c		      sta	GRP1
    108  6276
    109  6276		       b9 83 bc 	      lda	bmp_96x2_1_03,y	;5
    110  6279		       85 1b		      sta	GRP0	;3 =  8
    111  627b		       b9 ab bc 	      lda	bmp_96x2_1_05,y	;5
    112  627e		       85 1b		      sta	GRP0	;3 =  8
    113  6280
      0  6280					      sleep	2
      1  6280				   .CYCLES    SET	2
      2  6280
      3  6280				  -	      IF	.CYCLES < 2
      4  6280				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6280				  -	      ERR
      6  6280					      ENDIF
      7  6280
      8  6280				  -	      IF	.CYCLES & 1
      9  6280				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6280				  -	      nop	0
     11  6280				  -	      ELSE
     12  6280				  -	      bit	VSYNC
     13  6280				  -	      ENDIF
     14  6280				  -.CYCLES    SET	.CYCLES - 3
     15  6280					      ENDIF
     16  6280
     17  6280					      REPEAT	.CYCLES / 2
     18  6280		       ea		      nop
     19  6281					      REPEND
    115  6281
    116  6281		       b9 00 bd 	      lda	bmp_96x2_1_09,y	;5
    117  6284		       85 1c		      sta	GRP1	;3 =  8
    118  6286		       b9 28 bd 	      lda	bmp_96x2_1_11,y	;5
    119  6289		       85 1c		      sta	GRP1	;3 =  8
    120  628b
      0  628b					      sleep	2
      1  628b				   .CYCLES    SET	2
      2  628b
      3  628b				  -	      IF	.CYCLES < 2
      4  628b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  628b				  -	      ERR
      6  628b					      ENDIF
      7  628b
      8  628b				  -	      IF	.CYCLES & 1
      9  628b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  628b				  -	      nop	0
     11  628b				  -	      ELSE
     12  628b				  -	      bit	VSYNC
     13  628b				  -	      ENDIF
     14  628b				  -.CYCLES    SET	.CYCLES - 3
     15  628b					      ENDIF
     16  628b
     17  628b					      REPEAT	.CYCLES / 2
     18  628b		       ea		      nop
     19  628c					      REPEND
    122  628c		       86 07		      stx	COLUP1
    123  628e		       86 06		      stx	COLUP0
    124  6290
    125  6290		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  6292					      sleep	2
      1  6292				   .CYCLES    SET	2
      2  6292
      3  6292				  -	      IF	.CYCLES < 2
      4  6292				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6292				  -	      ERR
      6  6292					      ENDIF
      7  6292
      8  6292				  -	      IF	.CYCLES & 1
      9  6292				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6292				  -	      nop	0
     11  6292				  -	      ELSE
     12  6292				  -	      bit	VSYNC
     13  6292				  -	      ENDIF
     14  6292				  -.CYCLES    SET	.CYCLES - 3
     15  6292					      ENDIF
     16  6292
     17  6292					      REPEAT	.CYCLES / 2
     18  6292		       ea		      nop
     19  6293					      REPEND
    127  6293		       88		      dey
    128  6294
    129  6294		       c4 cb		      cpy	temp1	;3
    130  6296		       d0 99		      bne	pfline_96x2_1_frame0	;2/3
    131  6298
    132  6298				   pf96x2_1_0codeend
    133  6298							;echo "critical code #1 in 96x2_1 is ",(pf96x2_1_0codeend-pfline_96x2_1_frame0), " bytes long."
    134  6298
    135  6298		       a9 00		      lda	#0
    136  629a		       85 1b		      sta	GRP0
    137  629c		       85 1c		      sta	GRP1
    138  629e		       4c 6e b3 	      jmp	pfdone_96x2_1
    139  62a1
    140  62a1
    141  62a1				   pf96x2_1_frame1
    142  62a1
    143  62a1							;postion P0 and P1
    144  62a1		       85 02		      sta	WSYNC
    145  62a3		       a9 20		      lda	#%00100000
    146  62a5		       85 20		      sta	HMP0
    147  62a7		       a9 00		      lda	#0
    148  62a9		       a9 f0		      lda	#%11110000
    149  62ab		       85 21		      sta	HMP1
    150  62ad		       85 02		      sta	WSYNC
      0  62af					      sleep	32
      1  62af				   .CYCLES    SET	32
      2  62af
      3  62af				  -	      IF	.CYCLES < 2
      4  62af				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  62af				  -	      ERR
      6  62af					      ENDIF
      7  62af
      8  62af				  -	      IF	.CYCLES & 1
      9  62af				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  62af				  -	      nop	0
     11  62af				  -	      ELSE
     12  62af				  -	      bit	VSYNC
     13  62af				  -	      ENDIF
     14  62af				  -.CYCLES    SET	.CYCLES - 3
     15  62af					      ENDIF
     16  62af
     17  62af					      REPEAT	.CYCLES / 2
     18  62af		       ea		      nop
     17  62af					      REPEND
     18  62b0		       ea		      nop
     17  62b0					      REPEND
     18  62b1		       ea		      nop
     17  62b1					      REPEND
     18  62b2		       ea		      nop
     17  62b2					      REPEND
     18  62b3		       ea		      nop
     17  62b3					      REPEND
     18  62b4		       ea		      nop
     17  62b4					      REPEND
     18  62b5		       ea		      nop
     17  62b5					      REPEND
     18  62b6		       ea		      nop
     17  62b6					      REPEND
     18  62b7		       ea		      nop
     17  62b7					      REPEND
     18  62b8		       ea		      nop
     17  62b8					      REPEND
     18  62b9		       ea		      nop
     17  62b9					      REPEND
     18  62ba		       ea		      nop
     17  62ba					      REPEND
     18  62bb		       ea		      nop
     17  62bb					      REPEND
     18  62bc		       ea		      nop
     17  62bc					      REPEND
     18  62bd		       ea		      nop
     17  62bd					      REPEND
     18  62be		       ea		      nop
     19  62bf					      REPEND
    152  62bf		       85 10		      sta	RESP0
      0  62c1					      sleep	12
      1  62c1				   .CYCLES    SET	12
      2  62c1
      3  62c1				  -	      IF	.CYCLES < 2
      4  62c1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  62c1				  -	      ERR
      6  62c1					      ENDIF
      7  62c1
      8  62c1				  -	      IF	.CYCLES & 1
      9  62c1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  62c1				  -	      nop	0
     11  62c1				  -	      ELSE
     12  62c1				  -	      bit	VSYNC
     13  62c1				  -	      ENDIF
     14  62c1				  -.CYCLES    SET	.CYCLES - 3
     15  62c1					      ENDIF
     16  62c1
     17  62c1					      REPEAT	.CYCLES / 2
     18  62c1		       ea		      nop
     17  62c1					      REPEND
     18  62c2		       ea		      nop
     17  62c2					      REPEND
     18  62c3		       ea		      nop
     17  62c3					      REPEND
     18  62c4		       ea		      nop
     17  62c4					      REPEND
     18  62c5		       ea		      nop
     17  62c5					      REPEND
     18  62c6		       ea		      nop
     19  62c7					      REPEND
    154  62c7		       85 11		      sta	RESP1
    155  62c9		       85 02		      sta	WSYNC
    156  62cb		       85 2a		      sta	HMOVE
    157  62cd
    158  62cd		       85 02		      sta	WSYNC
    159  62cf		       85 2b		      sta	HMCLR
    160  62d1
    161  62d1
    162  62d1
    163  62d1		       85 02		      sta	WSYNC
      0  62d3					      sleep	3
      1  62d3				   .CYCLES    SET	3
      2  62d3
      3  62d3				  -	      IF	.CYCLES < 2
      4  62d3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  62d3				  -	      ERR
      6  62d3					      ENDIF
      7  62d3
      8  62d3					      IF	.CYCLES & 1
      9  62d3					      IFNCONST	NO_ILLEGAL_OPCODES
     10  62d3		       04 00		      nop	0
     11  62d5				  -	      ELSE
     12  62d5				  -	      bit	VSYNC
     13  62d5					      ENDIF
     14  62d5				   .CYCLES    SET	.CYCLES - 3
     15  62d5					      ENDIF
     16  62d5
     17  62d5				  -	      REPEAT	.CYCLES / 2
     18  62d5				  -	      nop
     19  62d5					      REPEND
    165  62d5		       4c 00 b3 	      jmp	pfline_96x2_1_frame1
    166  62d8
    167  62d8							;align so our branch doesn't unexpectedly cross a page...
    168  62d8					      if	>. != >[.+$70]
    169  6300		       00 00 00 00*	      align	256
    170  6300					      endif
    171  6300
    172  6300				   pfline_96x2_1_frame1
    173  6300
    174  6300		       85 2a		      sta	HMOVE
    175  6302
    176  6302		       b9 d3 bc 	      lda	bmp_96x2_1_07,y	;4
    177  6305		       85 1c		      sta	GRP1	;3
    178  6307
    179  6307		       a9 00		      lda	#$0	;2
    180  6309		       85 20		      sta	HMP0	;3
    181  630b		       85 21		      sta	HMP1	;3
    182  630d
    183  630d		       b9 5b bc 	      lda	bmp_96x2_1_01,y
    184  6310		       8d 1b 00 	      sta.w	GRP0
    185  6313		       b9 83 bc 	      lda	bmp_96x2_1_03,y
    186  6316		       85 1b		      sta	GRP0
    187  6318		       b9 ab bc 	      lda	bmp_96x2_1_05,y
    188  631b		       85 1b		      sta	GRP0
    189  631d
      0  631d					      sleep	2
      1  631d				   .CYCLES    SET	2
      2  631d
      3  631d				  -	      IF	.CYCLES < 2
      4  631d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  631d				  -	      ERR
      6  631d					      ENDIF
      7  631d
      8  631d				  -	      IF	.CYCLES & 1
      9  631d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  631d				  -	      nop	0
     11  631d				  -	      ELSE
     12  631d				  -	      bit	VSYNC
     13  631d				  -	      ENDIF
     14  631d				  -.CYCLES    SET	.CYCLES - 3
     15  631d					      ENDIF
     16  631d
     17  631d					      REPEAT	.CYCLES / 2
     18  631d		       ea		      nop
     19  631e					      REPEND
    191  631e
    192  631e		       b9 00 bd 	      lda	bmp_96x2_1_09,y
    193  6321		       85 1c		      sta	GRP1
    194  6323		       b9 28 bd 	      lda	bmp_96x2_1_11,y
    195  6326		       85 1c		      sta	GRP1
    196  6328
    197  6328		       b9 47 bc 	      lda	bmp_96x2_1_00,y
    198  632b		       85 1b		      sta	GRP0
    199  632d
    200  632d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    201  6330
    202  6330							;sta WSYNC	;=0 -----------------------------------------
    203  6330
    204  6330		       b9 bf bc 	      lda	bmp_96x2_1_06,y
    205  6333		       85 1c		      sta	GRP1
    206  6335
      0  6335					      sleep	8
      1  6335				   .CYCLES    SET	8
      2  6335
      3  6335				  -	      IF	.CYCLES < 2
      4  6335				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6335				  -	      ERR
      6  6335					      ENDIF
      7  6335
      8  6335				  -	      IF	.CYCLES & 1
      9  6335				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6335				  -	      nop	0
     11  6335				  -	      ELSE
     12  6335				  -	      bit	VSYNC
     13  6335				  -	      ENDIF
     14  6335				  -.CYCLES    SET	.CYCLES - 3
     15  6335					      ENDIF
     16  6335
     17  6335					      REPEAT	.CYCLES / 2
     18  6335		       ea		      nop
     17  6335					      REPEND
     18  6336		       ea		      nop
     17  6336					      REPEND
     18  6337		       ea		      nop
     17  6337					      REPEND
     18  6338		       ea		      nop
     19  6339					      REPEND
    208  6339
    209  6339		       b9 32 bc 	      lda	bmp_96x2_1_colors-1,y	;get the title color early and store it for later
    210  633c		       aa		      tax		;2
    211  633d
      0  633d					      sleep	3
      1  633d				   .CYCLES    SET	3
      2  633d
      3  633d				  -	      IF	.CYCLES < 2
      4  633d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  633d				  -	      ERR
      6  633d					      ENDIF
      7  633d
      8  633d					      IF	.CYCLES & 1
      9  633d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  633d		       04 00		      nop	0
     11  633f				  -	      ELSE
     12  633f				  -	      bit	VSYNC
     13  633f					      ENDIF
     14  633f				   .CYCLES    SET	.CYCLES - 3
     15  633f					      ENDIF
     16  633f
     17  633f				  -	      REPEAT	.CYCLES / 2
     18  633f				  -	      nop
     19  633f					      REPEND
    213  633f
    214  633f		       a9 80		      lda	#$80	;2
    215  6341		       85 20		      sta	HMP0	;3
    216  6343		       85 21		      sta	HMP1	;3
    217  6345
    218  6345
    219  6345		       b9 6f bc 	      lda	bmp_96x2_1_02,y	;5
    220  6348		       85 1b		      sta	GRP0	;3 =  8
    221  634a
    222  634a		       b9 97 bc 	      lda	bmp_96x2_1_04,y	;5
    223  634d		       85 1b		      sta	GRP0	;3 =  8
    224  634f
      0  634f					      sleep	2
      1  634f				   .CYCLES    SET	2
      2  634f
      3  634f				  -	      IF	.CYCLES < 2
      4  634f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  634f				  -	      ERR
      6  634f					      ENDIF
      7  634f
      8  634f				  -	      IF	.CYCLES & 1
      9  634f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  634f				  -	      nop	0
     11  634f				  -	      ELSE
     12  634f				  -	      bit	VSYNC
     13  634f				  -	      ENDIF
     14  634f				  -.CYCLES    SET	.CYCLES - 3
     15  634f					      ENDIF
     16  634f
     17  634f					      REPEAT	.CYCLES / 2
     18  634f		       ea		      nop
     19  6350					      REPEND
    226  6350
    227  6350		       b9 e7 bc 	      lda	bmp_96x2_1_08,y	;5
    228  6353		       85 1c		      sta	GRP1	;3 =  8
    229  6355
    230  6355		       b9 14 bd 	      lda	bmp_96x2_1_10,y	;5
    231  6358		       85 1c		      sta	GRP1	;3 =  8
    232  635a
      0  635a					      sleep	4
      1  635a				   .CYCLES    SET	4
      2  635a
      3  635a				  -	      IF	.CYCLES < 2
      4  635a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  635a				  -	      ERR
      6  635a					      ENDIF
      7  635a
      8  635a				  -	      IF	.CYCLES & 1
      9  635a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  635a				  -	      nop	0
     11  635a				  -	      ELSE
     12  635a				  -	      bit	VSYNC
     13  635a				  -	      ENDIF
     14  635a				  -.CYCLES    SET	.CYCLES - 3
     15  635a					      ENDIF
     16  635a
     17  635a					      REPEAT	.CYCLES / 2
     18  635a		       ea		      nop
     17  635a					      REPEND
     18  635b		       ea		      nop
     19  635c					      REPEND
    234  635c
    235  635c		       88		      dey
    236  635d
    237  635d		       8a		      txa
    238  635e				  -	      ifconst	bmp_96x2_1_fade
    239  635e				  -	      and	bmp_96x2_1_fade
    240  635e					      else
      0  635e					      sleep	3
      1  635e				   .CYCLES    SET	3
      2  635e
      3  635e				  -	      IF	.CYCLES < 2
      4  635e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  635e				  -	      ERR
      6  635e					      ENDIF
      7  635e
      8  635e					      IF	.CYCLES & 1
      9  635e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  635e		       04 00		      nop	0
     11  6360				  -	      ELSE
     12  6360				  -	      bit	VSYNC
     13  6360					      ENDIF
     14  6360				   .CYCLES    SET	.CYCLES - 3
     15  6360					      ENDIF
     16  6360
     17  6360				  -	      REPEAT	.CYCLES / 2
     18  6360				  -	      nop
     19  6360					      REPEND
    242  6360					      endif
    243  6360		       85 07		      sta	COLUP1	;3
    244  6362		       85 06		      sta	COLUP0	;3
    245  6364
    246  6364		       c4 cb		      cpy	temp1	;2
    247  6366		       d0 98		      bne	pfline_96x2_1_frame1	;2/3
    248  6368
    249  6368				   pf96x2_1_1codeend
    250  6368							;echo "critical code #2 in 96x2_1 is ",(pf96x2_1_1codeend-pfline_96x2_1_frame1), " bytes long."
    251  6368
    252  6368		       a9 00		      lda	#0
    253  636a		       85 1b		      sta	GRP0
    254  636c		       85 1c		      sta	GRP1
    255  636e
    256  636e				   pfdone_96x2_1
    257  636e		       85 02		      sta	WSYNC	; debug
    258  6370
    259  6370		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    149  6371					      endif		;mk_96x2_1_on
    150  6371
    151  6371					      ifconst	mk_96x2_2_on
------- FILE titlescreen/asm/96x2_2_kernel.asm LEVEL 3 PASS 3
      0  6371					      include	"titlescreen/asm/96x2_2_kernel.asm"
      1  6371				   draw_bmp_96x2_2
      2  6371
      3  6371				  -	      ifconst	bmp_96x2_2_index
      4  6371				  -	      lda	#(bmp_96x2_2_height-1)
      5  6371				  -	      sec
      6  6371				  -	      sbc	bmp_96x2_2_index
      7  6371				  -	      tay
      8  6371				  -	      sbc	#bmp_96x2_2_window
      9  6371				  -	      sta	temp1
     10  6371					      else
     11  6371		       a0 04		      ldy	#(bmp_96x2_2_window-1)
     12  6373		       a9 ff		      lda	#255
     13  6375		       85 cb		      sta	temp1
     14  6377					      endif
     15  6377
     16  6377		       a9 03		      lda	#3
     17  6379		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  637b		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  637d		       a9 00		      lda	#0
     20  637f
     21  637f		       b9 3d bd 	      lda	bmp_96x2_2_colors,y	;4
     22  6382				  -	      ifconst	bmp_96x2_2_fade
     23  6382				  -	      and	bmp_96x2_2_fade
     24  6382					      endif
     25  6382		       85 06		      sta	COLUP0	;3
     26  6384		       85 07		      sta	COLUP1	;3
     27  6386		       85 2b		      sta	HMCLR	;3
     28  6388
     29  6388		       a5 82		      lda	titleframe
     30  638a		       29 01		      and	#1
     31  638c		       f0 03		      beq	jmp_pf96x2_2_frame0
     32  638e		       4c 70 b4 	      jmp	pf96x2_2_frame1
     33  6391				   jmp_pf96x2_2_frame0
     34  6391		       4c 94 b3 	      jmp	pf96x2_2_frame0
     35  6394
     36  6394				   pf96x2_2_frame0
     37  6394							;postion P0 and P1
     38  6394		       85 02		      sta	WSYNC
     39  6396		       a9 e0		      lda	#%11100000
     40  6398		       85 20		      sta	HMP0
     41  639a		       a9 10		      lda	#%00010000
     42  639c		       85 21		      sta	HMP1
     43  639e		       85 02		      sta	WSYNC
      0  63a0					      sleep	28
      1  63a0				   .CYCLES    SET	28
      2  63a0
      3  63a0				  -	      IF	.CYCLES < 2
      4  63a0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  63a0				  -	      ERR
      6  63a0					      ENDIF
      7  63a0
      8  63a0				  -	      IF	.CYCLES & 1
      9  63a0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  63a0				  -	      nop	0
     11  63a0				  -	      ELSE
     12  63a0				  -	      bit	VSYNC
     13  63a0				  -	      ENDIF
     14  63a0				  -.CYCLES    SET	.CYCLES - 3
     15  63a0					      ENDIF
     16  63a0
     17  63a0					      REPEAT	.CYCLES / 2
     18  63a0		       ea		      nop
     17  63a0					      REPEND
     18  63a1		       ea		      nop
     17  63a1					      REPEND
     18  63a2		       ea		      nop
     17  63a2					      REPEND
     18  63a3		       ea		      nop
     17  63a3					      REPEND
     18  63a4		       ea		      nop
     17  63a4					      REPEND
     18  63a5		       ea		      nop
     17  63a5					      REPEND
     18  63a6		       ea		      nop
     17  63a6					      REPEND
     18  63a7		       ea		      nop
     17  63a7					      REPEND
     18  63a8		       ea		      nop
     17  63a8					      REPEND
     18  63a9		       ea		      nop
     17  63a9					      REPEND
     18  63aa		       ea		      nop
     17  63aa					      REPEND
     18  63ab		       ea		      nop
     17  63ab					      REPEND
     18  63ac		       ea		      nop
     17  63ac					      REPEND
     18  63ad		       ea		      nop
     19  63ae					      REPEND
     45  63ae		       85 10		      sta	RESP0
      0  63b0					      sleep	14
      1  63b0				   .CYCLES    SET	14
      2  63b0
      3  63b0				  -	      IF	.CYCLES < 2
      4  63b0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  63b0				  -	      ERR
      6  63b0					      ENDIF
      7  63b0
      8  63b0				  -	      IF	.CYCLES & 1
      9  63b0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  63b0				  -	      nop	0
     11  63b0				  -	      ELSE
     12  63b0				  -	      bit	VSYNC
     13  63b0				  -	      ENDIF
     14  63b0				  -.CYCLES    SET	.CYCLES - 3
     15  63b0					      ENDIF
     16  63b0
     17  63b0					      REPEAT	.CYCLES / 2
     18  63b0		       ea		      nop
     17  63b0					      REPEND
     18  63b1		       ea		      nop
     17  63b1					      REPEND
     18  63b2		       ea		      nop
     17  63b2					      REPEND
     18  63b3		       ea		      nop
     17  63b3					      REPEND
     18  63b4		       ea		      nop
     17  63b4					      REPEND
     18  63b5		       ea		      nop
     17  63b5					      REPEND
     18  63b6		       ea		      nop
     19  63b7					      REPEND
     47  63b7		       85 11		      sta	RESP1
     48  63b9		       85 02		      sta	WSYNC
     49  63bb		       85 2a		      sta	HMOVE
     50  63bd
     51  63bd		       85 02		      sta	WSYNC
     52  63bf		       85 2b		      sta	HMCLR
     53  63c1		       85 02		      sta	WSYNC
     54  63c3
      0  63c3					      sleep	4
      1  63c3				   .CYCLES    SET	4
      2  63c3
      3  63c3				  -	      IF	.CYCLES < 2
      4  63c3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  63c3				  -	      ERR
      6  63c3					      ENDIF
      7  63c3
      8  63c3				  -	      IF	.CYCLES & 1
      9  63c3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  63c3				  -	      nop	0
     11  63c3				  -	      ELSE
     12  63c3				  -	      bit	VSYNC
     13  63c3				  -	      ENDIF
     14  63c3				  -.CYCLES    SET	.CYCLES - 3
     15  63c3					      ENDIF
     16  63c3
     17  63c3					      REPEAT	.CYCLES / 2
     18  63c3		       ea		      nop
     17  63c3					      REPEND
     18  63c4		       ea		      nop
     19  63c5					      REPEND
     56  63c5		       4c 00 b4 	      jmp	pfline_96x2_2_frame0
     57  63c8							;align so our branch doesn't unexpectedly cross a page...
     58  63c8					      if	>. != >[.+$70]
     59  6400		       00 00 00 00*	      align	256
     60  6400					      endif
     61  6400
     62  6400				   pfline_96x2_2_frame0
     63  6400		       a9 80		      lda	#$80	;2
     64  6402		       85 20		      sta	HMP0	;3
     65  6404		       85 21		      sta	HMP1	;3
     66  6406
     67  6406		       b9 60 bd 	      lda	bmp_96x2_2_06,y	;4
     68  6409		       85 1c		      sta	GRP1	;3
     69  640b
     70  640b		       b9 42 bd 	      lda	bmp_96x2_2_00,y
     71  640e		       85 1b		      sta	GRP0
     72  6410		       b9 4c bd 	      lda	bmp_96x2_2_02,y
     73  6413		       85 1b		      sta	GRP0
     74  6415		       b9 56 bd 	      lda	bmp_96x2_2_04,y
     75  6418		       85 1b		      sta	GRP0
     76  641a
      0  641a					      sleep	2
      1  641a				   .CYCLES    SET	2
      2  641a
      3  641a				  -	      IF	.CYCLES < 2
      4  641a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  641a				  -	      ERR
      6  641a					      ENDIF
      7  641a
      8  641a				  -	      IF	.CYCLES & 1
      9  641a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  641a				  -	      nop	0
     11  641a				  -	      ELSE
     12  641a				  -	      bit	VSYNC
     13  641a				  -	      ENDIF
     14  641a				  -.CYCLES    SET	.CYCLES - 3
     15  641a					      ENDIF
     16  641a
     17  641a					      REPEAT	.CYCLES / 2
     18  641a		       ea		      nop
     19  641b					      REPEND
     78  641b
     79  641b		       b9 6a bd 	      lda	bmp_96x2_2_08,y
     80  641e		       85 1c		      sta	GRP1
     81  6420		       b9 74 bd 	      lda	bmp_96x2_2_10,y
     82  6423		       85 1c		      sta	GRP1
     83  6425
     84  6425		       b9 47 bd 	      lda	bmp_96x2_2_01,y
     85  6428		       85 1b		      sta	GRP0
     86  642a
      0  642a					      sleep	8
      1  642a				   .CYCLES    SET	8
      2  642a
      3  642a				  -	      IF	.CYCLES < 2
      4  642a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  642a				  -	      ERR
      6  642a					      ENDIF
      7  642a
      8  642a				  -	      IF	.CYCLES & 1
      9  642a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  642a				  -	      nop	0
     11  642a				  -	      ELSE
     12  642a				  -	      bit	VSYNC
     13  642a				  -	      ENDIF
     14  642a				  -.CYCLES    SET	.CYCLES - 3
     15  642a					      ENDIF
     16  642a
     17  642a					      REPEAT	.CYCLES / 2
     18  642a		       ea		      nop
     17  642a					      REPEND
     18  642b		       ea		      nop
     17  642b					      REPEND
     18  642c		       ea		      nop
     17  642c					      REPEND
     18  642d		       ea		      nop
     19  642e					      REPEND
     88  642e
     89  642e							;sta WSYNC	;=0
     90  642e		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  6430
     92  6430		       b9 3c bd 	      lda	bmp_96x2_2_colors-1,y	;4 - get the title color early and store it for later
     93  6433				  -	      ifconst	bmp_96x2_2_fade
     94  6433				  -	      and	bmp_96x2_2_fade
     95  6433					      else
      0  6433					      sleep	3
      1  6433				   .CYCLES    SET	3
      2  6433
      3  6433				  -	      IF	.CYCLES < 2
      4  6433				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6433				  -	      ERR
      6  6433					      ENDIF
      7  6433
      8  6433					      IF	.CYCLES & 1
      9  6433					      IFNCONST	NO_ILLEGAL_OPCODES
     10  6433		       04 00		      nop	0
     11  6435				  -	      ELSE
     12  6435				  -	      bit	VSYNC
     13  6435					      ENDIF
     14  6435				   .CYCLES    SET	.CYCLES - 3
     15  6435					      ENDIF
     16  6435
     17  6435				  -	      REPEAT	.CYCLES / 2
     18  6435				  -	      nop
     19  6435					      REPEND
     97  6435					      endif
     98  6435		       aa		      tax
     99  6436
    100  6436		       a9 00		      lda	#0	;2
    101  6438		       85 20		      sta	HMP0	;3
    102  643a		       85 21		      sta	HMP1	;3
    103  643c
      0  643c					      sleep	7
      1  643c				   .CYCLES    SET	7
      2  643c
      3  643c				  -	      IF	.CYCLES < 2
      4  643c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  643c				  -	      ERR
      6  643c					      ENDIF
      7  643c
      8  643c					      IF	.CYCLES & 1
      9  643c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  643c		       04 00		      nop	0
     11  643e				  -	      ELSE
     12  643e				  -	      bit	VSYNC
     13  643e					      ENDIF
     14  643e				   .CYCLES    SET	.CYCLES - 3
     15  643e					      ENDIF
     16  643e
     17  643e					      REPEAT	.CYCLES / 2
     18  643e		       ea		      nop
     17  643e					      REPEND
     18  643f		       ea		      nop
     19  6440					      REPEND
    105  6440
    106  6440		       b9 65 bd 	      lda	bmp_96x2_2_07,y
    107  6443		       85 1c		      sta	GRP1
    108  6445
    109  6445		       b9 51 bd 	      lda	bmp_96x2_2_03,y	;5
    110  6448		       85 1b		      sta	GRP0	;3 =  8
    111  644a		       b9 5b bd 	      lda	bmp_96x2_2_05,y	;5
    112  644d		       85 1b		      sta	GRP0	;3 =  8
    113  644f
      0  644f					      sleep	2
      1  644f				   .CYCLES    SET	2
      2  644f
      3  644f				  -	      IF	.CYCLES < 2
      4  644f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  644f				  -	      ERR
      6  644f					      ENDIF
      7  644f
      8  644f				  -	      IF	.CYCLES & 1
      9  644f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  644f				  -	      nop	0
     11  644f				  -	      ELSE
     12  644f				  -	      bit	VSYNC
     13  644f				  -	      ENDIF
     14  644f				  -.CYCLES    SET	.CYCLES - 3
     15  644f					      ENDIF
     16  644f
     17  644f					      REPEAT	.CYCLES / 2
     18  644f		       ea		      nop
     19  6450					      REPEND
    115  6450
    116  6450		       b9 6f bd 	      lda	bmp_96x2_2_09,y	;5
    117  6453		       85 1c		      sta	GRP1	;3 =  8
    118  6455		       b9 75 bd 	      lda	bmp_96x2_2_11,y	;5
    119  6458		       85 1c		      sta	GRP1	;3 =  8
    120  645a
      0  645a					      sleep	2
      1  645a				   .CYCLES    SET	2
      2  645a
      3  645a				  -	      IF	.CYCLES < 2
      4  645a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  645a				  -	      ERR
      6  645a					      ENDIF
      7  645a
      8  645a				  -	      IF	.CYCLES & 1
      9  645a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  645a				  -	      nop	0
     11  645a				  -	      ELSE
     12  645a				  -	      bit	VSYNC
     13  645a				  -	      ENDIF
     14  645a				  -.CYCLES    SET	.CYCLES - 3
     15  645a					      ENDIF
     16  645a
     17  645a					      REPEAT	.CYCLES / 2
     18  645a		       ea		      nop
     19  645b					      REPEND
    122  645b		       86 07		      stx	COLUP1
    123  645d		       86 06		      stx	COLUP0
    124  645f
    125  645f
    126  645f		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  6461					      sleep	2
      1  6461				   .CYCLES    SET	2
      2  6461
      3  6461				  -	      IF	.CYCLES < 2
      4  6461				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6461				  -	      ERR
      6  6461					      ENDIF
      7  6461
      8  6461				  -	      IF	.CYCLES & 1
      9  6461				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6461				  -	      nop	0
     11  6461				  -	      ELSE
     12  6461				  -	      bit	VSYNC
     13  6461				  -	      ENDIF
     14  6461				  -.CYCLES    SET	.CYCLES - 3
     15  6461					      ENDIF
     16  6461
     17  6461					      REPEAT	.CYCLES / 2
     18  6461		       ea		      nop
     19  6462					      REPEND
    128  6462		       88		      dey
    129  6463
    130  6463		       c4 cb		      cpy	temp1	;3
    131  6465		       d0 99		      bne	pfline_96x2_2_frame0	;2/3
    132  6467
    133  6467				   pf96x2_2_0codeend
    134  6467							;echo "critical code #1 in 96x2_2 is ",(pf96x2_2_0codeend-pfline_96x2_2_frame0), " bytes long."
    135  6467
    136  6467		       a9 00		      lda	#0
    137  6469		       85 1b		      sta	GRP0
    138  646b		       85 1c		      sta	GRP1
    139  646d		       4c 6e b5 	      jmp	pfdone_96x2_2
    140  6470
    141  6470
    142  6470				   pf96x2_2_frame1
    143  6470
    144  6470							;postion P0 and P1
    145  6470		       85 02		      sta	WSYNC
    146  6472		       a9 20		      lda	#%00100000
    147  6474		       85 20		      sta	HMP0
    148  6476		       a9 00		      lda	#0
    149  6478		       a9 f0		      lda	#%11110000
    150  647a		       85 21		      sta	HMP1
    151  647c		       85 02		      sta	WSYNC
      0  647e					      sleep	32
      1  647e				   .CYCLES    SET	32
      2  647e
      3  647e				  -	      IF	.CYCLES < 2
      4  647e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  647e				  -	      ERR
      6  647e					      ENDIF
      7  647e
      8  647e				  -	      IF	.CYCLES & 1
      9  647e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  647e				  -	      nop	0
     11  647e				  -	      ELSE
     12  647e				  -	      bit	VSYNC
     13  647e				  -	      ENDIF
     14  647e				  -.CYCLES    SET	.CYCLES - 3
     15  647e					      ENDIF
     16  647e
     17  647e					      REPEAT	.CYCLES / 2
     18  647e		       ea		      nop
     17  647e					      REPEND
     18  647f		       ea		      nop
     17  647f					      REPEND
     18  6480		       ea		      nop
     17  6480					      REPEND
     18  6481		       ea		      nop
     17  6481					      REPEND
     18  6482		       ea		      nop
     17  6482					      REPEND
     18  6483		       ea		      nop
     17  6483					      REPEND
     18  6484		       ea		      nop
     17  6484					      REPEND
     18  6485		       ea		      nop
     17  6485					      REPEND
     18  6486		       ea		      nop
     17  6486					      REPEND
     18  6487		       ea		      nop
     17  6487					      REPEND
     18  6488		       ea		      nop
     17  6488					      REPEND
     18  6489		       ea		      nop
     17  6489					      REPEND
     18  648a		       ea		      nop
     17  648a					      REPEND
     18  648b		       ea		      nop
     17  648b					      REPEND
     18  648c		       ea		      nop
     17  648c					      REPEND
     18  648d		       ea		      nop
     19  648e					      REPEND
    153  648e		       85 10		      sta	RESP0
      0  6490					      sleep	12
      1  6490				   .CYCLES    SET	12
      2  6490
      3  6490				  -	      IF	.CYCLES < 2
      4  6490				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6490				  -	      ERR
      6  6490					      ENDIF
      7  6490
      8  6490				  -	      IF	.CYCLES & 1
      9  6490				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6490				  -	      nop	0
     11  6490				  -	      ELSE
     12  6490				  -	      bit	VSYNC
     13  6490				  -	      ENDIF
     14  6490				  -.CYCLES    SET	.CYCLES - 3
     15  6490					      ENDIF
     16  6490
     17  6490					      REPEAT	.CYCLES / 2
     18  6490		       ea		      nop
     17  6490					      REPEND
     18  6491		       ea		      nop
     17  6491					      REPEND
     18  6492		       ea		      nop
     17  6492					      REPEND
     18  6493		       ea		      nop
     17  6493					      REPEND
     18  6494		       ea		      nop
     17  6494					      REPEND
     18  6495		       ea		      nop
     19  6496					      REPEND
    155  6496		       85 11		      sta	RESP1
    156  6498		       85 02		      sta	WSYNC
    157  649a		       85 2a		      sta	HMOVE
    158  649c
    159  649c		       85 02		      sta	WSYNC
    160  649e		       85 2b		      sta	HMCLR
    161  64a0
    162  64a0
    163  64a0
    164  64a0		       85 02		      sta	WSYNC
      0  64a2					      sleep	3
      1  64a2				   .CYCLES    SET	3
      2  64a2
      3  64a2				  -	      IF	.CYCLES < 2
      4  64a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  64a2				  -	      ERR
      6  64a2					      ENDIF
      7  64a2
      8  64a2					      IF	.CYCLES & 1
      9  64a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  64a2		       04 00		      nop	0
     11  64a4				  -	      ELSE
     12  64a4				  -	      bit	VSYNC
     13  64a4					      ENDIF
     14  64a4				   .CYCLES    SET	.CYCLES - 3
     15  64a4					      ENDIF
     16  64a4
     17  64a4				  -	      REPEAT	.CYCLES / 2
     18  64a4				  -	      nop
     19  64a4					      REPEND
    166  64a4		       4c 00 b5 	      jmp	pfline_96x2_2_frame1
    167  64a7
    168  64a7							;align so our branch doesn't unexpectedly cross a page...
    169  64a7					      if	>. != >[.+$70]
    170  6500		       00 00 00 00*	      align	256
    171  6500					      endif
    172  6500
    173  6500				   pfline_96x2_2_frame1
    174  6500
    175  6500		       85 2a		      sta	HMOVE
    176  6502
    177  6502		       b9 65 bd 	      lda	bmp_96x2_2_07,y	;4
    178  6505		       85 1c		      sta	GRP1	;3
    179  6507
    180  6507		       a9 00		      lda	#$0	;2
    181  6509		       85 20		      sta	HMP0	;3
    182  650b		       85 21		      sta	HMP1	;3
    183  650d
    184  650d		       b9 47 bd 	      lda	bmp_96x2_2_01,y
    185  6510		       8d 1b 00 	      sta.w	GRP0
    186  6513		       b9 51 bd 	      lda	bmp_96x2_2_03,y
    187  6516		       85 1b		      sta	GRP0
    188  6518		       b9 5b bd 	      lda	bmp_96x2_2_05,y
    189  651b		       85 1b		      sta	GRP0
    190  651d
      0  651d					      sleep	2
      1  651d				   .CYCLES    SET	2
      2  651d
      3  651d				  -	      IF	.CYCLES < 2
      4  651d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  651d				  -	      ERR
      6  651d					      ENDIF
      7  651d
      8  651d				  -	      IF	.CYCLES & 1
      9  651d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  651d				  -	      nop	0
     11  651d				  -	      ELSE
     12  651d				  -	      bit	VSYNC
     13  651d				  -	      ENDIF
     14  651d				  -.CYCLES    SET	.CYCLES - 3
     15  651d					      ENDIF
     16  651d
     17  651d					      REPEAT	.CYCLES / 2
     18  651d		       ea		      nop
     19  651e					      REPEND
    192  651e
    193  651e		       b9 6f bd 	      lda	bmp_96x2_2_09,y
    194  6521		       85 1c		      sta	GRP1
    195  6523		       b9 75 bd 	      lda	bmp_96x2_2_11,y
    196  6526		       85 1c		      sta	GRP1
    197  6528
    198  6528		       b9 42 bd 	      lda	bmp_96x2_2_00,y
    199  652b		       85 1b		      sta	GRP0
    200  652d
    201  652d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    202  6530
    203  6530							;sta WSYNC	;=0 -----------------------------------------
    204  6530
    205  6530		       b9 60 bd 	      lda	bmp_96x2_2_06,y
    206  6533		       85 1c		      sta	GRP1
    207  6535
      0  6535					      sleep	8
      1  6535				   .CYCLES    SET	8
      2  6535
      3  6535				  -	      IF	.CYCLES < 2
      4  6535				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6535				  -	      ERR
      6  6535					      ENDIF
      7  6535
      8  6535				  -	      IF	.CYCLES & 1
      9  6535				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6535				  -	      nop	0
     11  6535				  -	      ELSE
     12  6535				  -	      bit	VSYNC
     13  6535				  -	      ENDIF
     14  6535				  -.CYCLES    SET	.CYCLES - 3
     15  6535					      ENDIF
     16  6535
     17  6535					      REPEAT	.CYCLES / 2
     18  6535		       ea		      nop
     17  6535					      REPEND
     18  6536		       ea		      nop
     17  6536					      REPEND
     18  6537		       ea		      nop
     17  6537					      REPEND
     18  6538		       ea		      nop
     19  6539					      REPEND
    209  6539
    210  6539		       b9 3c bd 	      lda	bmp_96x2_2_colors-1,y	;get the title color early and store it for later
    211  653c		       aa		      tax		;2
    212  653d
      0  653d					      sleep	3
      1  653d				   .CYCLES    SET	3
      2  653d
      3  653d				  -	      IF	.CYCLES < 2
      4  653d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  653d				  -	      ERR
      6  653d					      ENDIF
      7  653d
      8  653d					      IF	.CYCLES & 1
      9  653d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  653d		       04 00		      nop	0
     11  653f				  -	      ELSE
     12  653f				  -	      bit	VSYNC
     13  653f					      ENDIF
     14  653f				   .CYCLES    SET	.CYCLES - 3
     15  653f					      ENDIF
     16  653f
     17  653f				  -	      REPEAT	.CYCLES / 2
     18  653f				  -	      nop
     19  653f					      REPEND
    214  653f
    215  653f		       a9 80		      lda	#$80	;2
    216  6541		       85 20		      sta	HMP0	;3
    217  6543		       85 21		      sta	HMP1	;3
    218  6545
    219  6545
    220  6545		       b9 4c bd 	      lda	bmp_96x2_2_02,y	;5
    221  6548		       85 1b		      sta	GRP0	;3 =  8
    222  654a
    223  654a		       b9 56 bd 	      lda	bmp_96x2_2_04,y	;5
    224  654d		       85 1b		      sta	GRP0	;3 =  8
    225  654f
      0  654f					      sleep	2
      1  654f				   .CYCLES    SET	2
      2  654f
      3  654f				  -	      IF	.CYCLES < 2
      4  654f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  654f				  -	      ERR
      6  654f					      ENDIF
      7  654f
      8  654f				  -	      IF	.CYCLES & 1
      9  654f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  654f				  -	      nop	0
     11  654f				  -	      ELSE
     12  654f				  -	      bit	VSYNC
     13  654f				  -	      ENDIF
     14  654f				  -.CYCLES    SET	.CYCLES - 3
     15  654f					      ENDIF
     16  654f
     17  654f					      REPEAT	.CYCLES / 2
     18  654f		       ea		      nop
     19  6550					      REPEND
    227  6550
    228  6550		       b9 6a bd 	      lda	bmp_96x2_2_08,y	;5
    229  6553		       85 1c		      sta	GRP1	;3 =  8
    230  6555
    231  6555		       b9 74 bd 	      lda	bmp_96x2_2_10,y	;5
    232  6558		       85 1c		      sta	GRP1	;3 =  8
    233  655a
      0  655a					      sleep	4
      1  655a				   .CYCLES    SET	4
      2  655a
      3  655a				  -	      IF	.CYCLES < 2
      4  655a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  655a				  -	      ERR
      6  655a					      ENDIF
      7  655a
      8  655a				  -	      IF	.CYCLES & 1
      9  655a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  655a				  -	      nop	0
     11  655a				  -	      ELSE
     12  655a				  -	      bit	VSYNC
     13  655a				  -	      ENDIF
     14  655a				  -.CYCLES    SET	.CYCLES - 3
     15  655a					      ENDIF
     16  655a
     17  655a					      REPEAT	.CYCLES / 2
     18  655a		       ea		      nop
     17  655a					      REPEND
     18  655b		       ea		      nop
     19  655c					      REPEND
    235  655c
    236  655c		       88		      dey
    237  655d
    238  655d		       8a		      txa
    239  655e				  -	      ifconst	bmp_96x2_2_fade
    240  655e				  -	      and	bmp_96x2_2_fade
    241  655e					      else
      0  655e					      sleep	3
      1  655e				   .CYCLES    SET	3
      2  655e
      3  655e				  -	      IF	.CYCLES < 2
      4  655e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  655e				  -	      ERR
      6  655e					      ENDIF
      7  655e
      8  655e					      IF	.CYCLES & 1
      9  655e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  655e		       04 00		      nop	0
     11  6560				  -	      ELSE
     12  6560				  -	      bit	VSYNC
     13  6560					      ENDIF
     14  6560				   .CYCLES    SET	.CYCLES - 3
     15  6560					      ENDIF
     16  6560
     17  6560				  -	      REPEAT	.CYCLES / 2
     18  6560				  -	      nop
     19  6560					      REPEND
    243  6560					      endif
    244  6560		       85 07		      sta	COLUP1	;3
    245  6562		       85 06		      sta	COLUP0	;3
    246  6564
    247  6564		       c4 cb		      cpy	temp1	;2
    248  6566		       d0 98		      bne	pfline_96x2_2_frame1	;2/3
    249  6568
    250  6568				   pf96x2_2_1codeend
    251  6568							;echo "critical code #2 in 96x2_2 is ",(pf96x2_2_1codeend-pfline_96x2_2_frame1), " bytes long."
    252  6568
    253  6568		       a9 00		      lda	#0
    254  656a		       85 1b		      sta	GRP0
    255  656c		       85 1c		      sta	GRP1
    256  656e
    257  656e				   pfdone_96x2_2
    258  656e		       85 02		      sta	WSYNC	; debug
    259  6570
    260  6570		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    153  6571					      endif		;mk_96x2_2_on
    154  6571
    155  6571				  -	      ifconst	mk_96x2_3_on
    156  6571				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    157  6571					      endif		;mk_96x2_3_on
    158  6571
    159  6571					      ifconst	mk_96x2_4_on
------- FILE titlescreen/asm/96x2_4_kernel.asm LEVEL 3 PASS 3
      0  6571					      include	"titlescreen/asm/96x2_4_kernel.asm"
      1  6571				   draw_bmp_96x2_4
      2  6571
      3  6571				  -	      ifconst	bmp_96x2_4_index
      4  6571				  -	      lda	#(bmp_96x2_4_height-1)
      5  6571				  -	      sec
      6  6571				  -	      sbc	bmp_96x2_4_index
      7  6571				  -	      tay
      8  6571				  -	      sbc	#bmp_96x2_4_window
      9  6571				  -	      sta	temp1
     10  6571					      else
     11  6571		       a0 04		      ldy	#(bmp_96x2_4_window-1)
     12  6573		       a9 ff		      lda	#255
     13  6575		       85 cb		      sta	temp1
     14  6577					      endif
     15  6577
     16  6577		       a9 03		      lda	#3
     17  6579		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  657b		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  657d		       a9 00		      lda	#0
     20  657f
     21  657f		       b9 7b bd 	      lda	bmp_96x2_4_colors,y	;4
     22  6582				  -	      ifconst	bmp_96x2_4_fade
     23  6582				  -	      and	bmp_96x2_4_fade
     24  6582					      endif
     25  6582		       85 06		      sta	COLUP0	;3
     26  6584		       85 07		      sta	COLUP1	;3
     27  6586		       85 2b		      sta	HMCLR	;3
     28  6588
     29  6588		       a5 82		      lda	titleframe
     30  658a		       29 01		      and	#1
     31  658c		       f0 03		      beq	jmp_pf96x2_4_frame0
     32  658e		       4c 70 b6 	      jmp	pf96x2_4_frame1
     33  6591				   jmp_pf96x2_4_frame0
     34  6591		       4c 94 b5 	      jmp	pf96x2_4_frame0
     35  6594
     36  6594				   pf96x2_4_frame0
     37  6594							;postion P0 and P1
     38  6594		       85 02		      sta	WSYNC
     39  6596		       a9 e0		      lda	#%11100000
     40  6598		       85 20		      sta	HMP0
     41  659a		       a9 10		      lda	#%00010000
     42  659c		       85 21		      sta	HMP1
     43  659e		       85 02		      sta	WSYNC
      0  65a0					      sleep	28
      1  65a0				   .CYCLES    SET	28
      2  65a0
      3  65a0				  -	      IF	.CYCLES < 2
      4  65a0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  65a0				  -	      ERR
      6  65a0					      ENDIF
      7  65a0
      8  65a0				  -	      IF	.CYCLES & 1
      9  65a0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  65a0				  -	      nop	0
     11  65a0				  -	      ELSE
     12  65a0				  -	      bit	VSYNC
     13  65a0				  -	      ENDIF
     14  65a0				  -.CYCLES    SET	.CYCLES - 3
     15  65a0					      ENDIF
     16  65a0
     17  65a0					      REPEAT	.CYCLES / 2
     18  65a0		       ea		      nop
     17  65a0					      REPEND
     18  65a1		       ea		      nop
     17  65a1					      REPEND
     18  65a2		       ea		      nop
     17  65a2					      REPEND
     18  65a3		       ea		      nop
     17  65a3					      REPEND
     18  65a4		       ea		      nop
     17  65a4					      REPEND
     18  65a5		       ea		      nop
     17  65a5					      REPEND
     18  65a6		       ea		      nop
     17  65a6					      REPEND
     18  65a7		       ea		      nop
     17  65a7					      REPEND
     18  65a8		       ea		      nop
     17  65a8					      REPEND
     18  65a9		       ea		      nop
     17  65a9					      REPEND
     18  65aa		       ea		      nop
     17  65aa					      REPEND
     18  65ab		       ea		      nop
     17  65ab					      REPEND
     18  65ac		       ea		      nop
     17  65ac					      REPEND
     18  65ad		       ea		      nop
     19  65ae					      REPEND
     45  65ae		       85 10		      sta	RESP0
      0  65b0					      sleep	14
      1  65b0				   .CYCLES    SET	14
      2  65b0
      3  65b0				  -	      IF	.CYCLES < 2
      4  65b0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  65b0				  -	      ERR
      6  65b0					      ENDIF
      7  65b0
      8  65b0				  -	      IF	.CYCLES & 1
      9  65b0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  65b0				  -	      nop	0
     11  65b0				  -	      ELSE
     12  65b0				  -	      bit	VSYNC
     13  65b0				  -	      ENDIF
     14  65b0				  -.CYCLES    SET	.CYCLES - 3
     15  65b0					      ENDIF
     16  65b0
     17  65b0					      REPEAT	.CYCLES / 2
     18  65b0		       ea		      nop
     17  65b0					      REPEND
     18  65b1		       ea		      nop
     17  65b1					      REPEND
     18  65b2		       ea		      nop
     17  65b2					      REPEND
     18  65b3		       ea		      nop
     17  65b3					      REPEND
     18  65b4		       ea		      nop
     17  65b4					      REPEND
     18  65b5		       ea		      nop
     17  65b5					      REPEND
     18  65b6		       ea		      nop
     19  65b7					      REPEND
     47  65b7		       85 11		      sta	RESP1
     48  65b9		       85 02		      sta	WSYNC
     49  65bb		       85 2a		      sta	HMOVE
     50  65bd
     51  65bd		       85 02		      sta	WSYNC
     52  65bf		       85 2b		      sta	HMCLR
     53  65c1		       85 02		      sta	WSYNC
     54  65c3
      0  65c3					      sleep	4
      1  65c3				   .CYCLES    SET	4
      2  65c3
      3  65c3				  -	      IF	.CYCLES < 2
      4  65c3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  65c3				  -	      ERR
      6  65c3					      ENDIF
      7  65c3
      8  65c3				  -	      IF	.CYCLES & 1
      9  65c3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  65c3				  -	      nop	0
     11  65c3				  -	      ELSE
     12  65c3				  -	      bit	VSYNC
     13  65c3				  -	      ENDIF
     14  65c3				  -.CYCLES    SET	.CYCLES - 3
     15  65c3					      ENDIF
     16  65c3
     17  65c3					      REPEAT	.CYCLES / 2
     18  65c3		       ea		      nop
     17  65c3					      REPEND
     18  65c4		       ea		      nop
     19  65c5					      REPEND
     56  65c5		       4c 00 b6 	      jmp	pfline_96x2_4_frame0
     57  65c8							;align so our branch doesn't unexpectedly cross a page...
     58  65c8					      if	>. != >[.+$70]
     59  6600		       00 00 00 00*	      align	256
     60  6600					      endif
     61  6600
     62  6600				   pfline_96x2_4_frame0
     63  6600		       a9 80		      lda	#$80	;2
     64  6602		       85 20		      sta	HMP0	;3
     65  6604		       85 21		      sta	HMP1	;3
     66  6606
     67  6606		       b9 9e bd 	      lda	bmp_96x2_4_06,y	;4
     68  6609		       85 1c		      sta	GRP1	;3
     69  660b
     70  660b		       b9 80 bd 	      lda	bmp_96x2_4_00,y
     71  660e		       85 1b		      sta	GRP0
     72  6610		       b9 8a bd 	      lda	bmp_96x2_4_02,y
     73  6613		       85 1b		      sta	GRP0
     74  6615		       b9 94 bd 	      lda	bmp_96x2_4_04,y
     75  6618		       85 1b		      sta	GRP0
     76  661a
      0  661a					      sleep	2
      1  661a				   .CYCLES    SET	2
      2  661a
      3  661a				  -	      IF	.CYCLES < 2
      4  661a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  661a				  -	      ERR
      6  661a					      ENDIF
      7  661a
      8  661a				  -	      IF	.CYCLES & 1
      9  661a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  661a				  -	      nop	0
     11  661a				  -	      ELSE
     12  661a				  -	      bit	VSYNC
     13  661a				  -	      ENDIF
     14  661a				  -.CYCLES    SET	.CYCLES - 3
     15  661a					      ENDIF
     16  661a
     17  661a					      REPEAT	.CYCLES / 2
     18  661a		       ea		      nop
     19  661b					      REPEND
     78  661b
     79  661b		       b9 a8 bd 	      lda	bmp_96x2_4_08,y
     80  661e		       85 1c		      sta	GRP1
     81  6620		       b9 b2 bd 	      lda	bmp_96x2_4_10,y
     82  6623		       85 1c		      sta	GRP1
     83  6625
     84  6625		       b9 85 bd 	      lda	bmp_96x2_4_01,y
     85  6628		       85 1b		      sta	GRP0
     86  662a
      0  662a					      sleep	8
      1  662a				   .CYCLES    SET	8
      2  662a
      3  662a				  -	      IF	.CYCLES < 2
      4  662a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  662a				  -	      ERR
      6  662a					      ENDIF
      7  662a
      8  662a				  -	      IF	.CYCLES & 1
      9  662a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  662a				  -	      nop	0
     11  662a				  -	      ELSE
     12  662a				  -	      bit	VSYNC
     13  662a				  -	      ENDIF
     14  662a				  -.CYCLES    SET	.CYCLES - 3
     15  662a					      ENDIF
     16  662a
     17  662a					      REPEAT	.CYCLES / 2
     18  662a		       ea		      nop
     17  662a					      REPEND
     18  662b		       ea		      nop
     17  662b					      REPEND
     18  662c		       ea		      nop
     17  662c					      REPEND
     18  662d		       ea		      nop
     19  662e					      REPEND
     88  662e
     89  662e							;sta WSYNC	;=0
     90  662e		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  6630
     92  6630		       b9 7a bd 	      lda	bmp_96x2_4_colors-1,y	;4 - get the title color early and store it for later
     93  6633				  -	      ifconst	bmp_96x2_4_fade
     94  6633				  -	      and	bmp_96x2_4_fade
     95  6633					      else
      0  6633					      sleep	3
      1  6633				   .CYCLES    SET	3
      2  6633
      3  6633				  -	      IF	.CYCLES < 2
      4  6633				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6633				  -	      ERR
      6  6633					      ENDIF
      7  6633
      8  6633					      IF	.CYCLES & 1
      9  6633					      IFNCONST	NO_ILLEGAL_OPCODES
     10  6633		       04 00		      nop	0
     11  6635				  -	      ELSE
     12  6635				  -	      bit	VSYNC
     13  6635					      ENDIF
     14  6635				   .CYCLES    SET	.CYCLES - 3
     15  6635					      ENDIF
     16  6635
     17  6635				  -	      REPEAT	.CYCLES / 2
     18  6635				  -	      nop
     19  6635					      REPEND
     97  6635					      endif
     98  6635		       aa		      tax
     99  6636
    100  6636		       a9 00		      lda	#0	;2
    101  6638		       85 20		      sta	HMP0	;3
    102  663a		       85 21		      sta	HMP1	;3
    103  663c
      0  663c					      sleep	7
      1  663c				   .CYCLES    SET	7
      2  663c
      3  663c				  -	      IF	.CYCLES < 2
      4  663c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  663c				  -	      ERR
      6  663c					      ENDIF
      7  663c
      8  663c					      IF	.CYCLES & 1
      9  663c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  663c		       04 00		      nop	0
     11  663e				  -	      ELSE
     12  663e				  -	      bit	VSYNC
     13  663e					      ENDIF
     14  663e				   .CYCLES    SET	.CYCLES - 3
     15  663e					      ENDIF
     16  663e
     17  663e					      REPEAT	.CYCLES / 2
     18  663e		       ea		      nop
     17  663e					      REPEND
     18  663f		       ea		      nop
     19  6640					      REPEND
    105  6640
    106  6640		       b9 a3 bd 	      lda	bmp_96x2_4_07,y
    107  6643		       85 1c		      sta	GRP1
    108  6645
    109  6645		       b9 8f bd 	      lda	bmp_96x2_4_03,y	;5
    110  6648		       85 1b		      sta	GRP0	;3 =  8
    111  664a		       b9 99 bd 	      lda	bmp_96x2_4_05,y	;5
    112  664d		       85 1b		      sta	GRP0	;3 =  8
    113  664f
      0  664f					      sleep	2
      1  664f				   .CYCLES    SET	2
      2  664f
      3  664f				  -	      IF	.CYCLES < 2
      4  664f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  664f				  -	      ERR
      6  664f					      ENDIF
      7  664f
      8  664f				  -	      IF	.CYCLES & 1
      9  664f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  664f				  -	      nop	0
     11  664f				  -	      ELSE
     12  664f				  -	      bit	VSYNC
     13  664f				  -	      ENDIF
     14  664f				  -.CYCLES    SET	.CYCLES - 3
     15  664f					      ENDIF
     16  664f
     17  664f					      REPEAT	.CYCLES / 2
     18  664f		       ea		      nop
     19  6650					      REPEND
    115  6650
    116  6650		       b9 ad bd 	      lda	bmp_96x2_4_09,y	;5
    117  6653		       85 1c		      sta	GRP1	;3 =  8
    118  6655		       b9 b7 bd 	      lda	bmp_96x2_4_11,y	;5
    119  6658		       85 1c		      sta	GRP1	;3 =  8
    120  665a
      0  665a					      sleep	2
      1  665a				   .CYCLES    SET	2
      2  665a
      3  665a				  -	      IF	.CYCLES < 2
      4  665a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  665a				  -	      ERR
      6  665a					      ENDIF
      7  665a
      8  665a				  -	      IF	.CYCLES & 1
      9  665a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  665a				  -	      nop	0
     11  665a				  -	      ELSE
     12  665a				  -	      bit	VSYNC
     13  665a				  -	      ENDIF
     14  665a				  -.CYCLES    SET	.CYCLES - 3
     15  665a					      ENDIF
     16  665a
     17  665a					      REPEAT	.CYCLES / 2
     18  665a		       ea		      nop
     19  665b					      REPEND
    122  665b		       86 07		      stx	COLUP1
    123  665d		       86 06		      stx	COLUP0
    124  665f
    125  665f
    126  665f		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  6661					      sleep	2
      1  6661				   .CYCLES    SET	2
      2  6661
      3  6661				  -	      IF	.CYCLES < 2
      4  6661				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6661				  -	      ERR
      6  6661					      ENDIF
      7  6661
      8  6661				  -	      IF	.CYCLES & 1
      9  6661				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6661				  -	      nop	0
     11  6661				  -	      ELSE
     12  6661				  -	      bit	VSYNC
     13  6661				  -	      ENDIF
     14  6661				  -.CYCLES    SET	.CYCLES - 3
     15  6661					      ENDIF
     16  6661
     17  6661					      REPEAT	.CYCLES / 2
     18  6661		       ea		      nop
     19  6662					      REPEND
    128  6662		       88		      dey
    129  6663
    130  6663		       c4 cb		      cpy	temp1	;3
    131  6665		       d0 99		      bne	pfline_96x2_4_frame0	;2/3
    132  6667
    133  6667				   pf96x2_4_0codeend
    134  6667							;echo "critical code #1 in 96x2_4 is ",(pf96x2_4_0codeend-pfline_96x2_4_frame0), " bytes long."
    135  6667
    136  6667		       a9 00		      lda	#0
    137  6669		       85 1b		      sta	GRP0
    138  666b		       85 1c		      sta	GRP1
    139  666d		       4c 6e b7 	      jmp	pfdone_96x2_4
    140  6670
    141  6670
    142  6670				   pf96x2_4_frame1
    143  6670
    144  6670							;postion P0 and P1
    145  6670		       85 02		      sta	WSYNC
    146  6672		       a9 20		      lda	#%00100000
    147  6674		       85 20		      sta	HMP0
    148  6676		       a9 00		      lda	#0
    149  6678		       a9 f0		      lda	#%11110000
    150  667a		       85 21		      sta	HMP1
    151  667c		       85 02		      sta	WSYNC
      0  667e					      sleep	32
      1  667e				   .CYCLES    SET	32
      2  667e
      3  667e				  -	      IF	.CYCLES < 2
      4  667e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  667e				  -	      ERR
      6  667e					      ENDIF
      7  667e
      8  667e				  -	      IF	.CYCLES & 1
      9  667e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  667e				  -	      nop	0
     11  667e				  -	      ELSE
     12  667e				  -	      bit	VSYNC
     13  667e				  -	      ENDIF
     14  667e				  -.CYCLES    SET	.CYCLES - 3
     15  667e					      ENDIF
     16  667e
     17  667e					      REPEAT	.CYCLES / 2
     18  667e		       ea		      nop
     17  667e					      REPEND
     18  667f		       ea		      nop
     17  667f					      REPEND
     18  6680		       ea		      nop
     17  6680					      REPEND
     18  6681		       ea		      nop
     17  6681					      REPEND
     18  6682		       ea		      nop
     17  6682					      REPEND
     18  6683		       ea		      nop
     17  6683					      REPEND
     18  6684		       ea		      nop
     17  6684					      REPEND
     18  6685		       ea		      nop
     17  6685					      REPEND
     18  6686		       ea		      nop
     17  6686					      REPEND
     18  6687		       ea		      nop
     17  6687					      REPEND
     18  6688		       ea		      nop
     17  6688					      REPEND
     18  6689		       ea		      nop
     17  6689					      REPEND
     18  668a		       ea		      nop
     17  668a					      REPEND
     18  668b		       ea		      nop
     17  668b					      REPEND
     18  668c		       ea		      nop
     17  668c					      REPEND
     18  668d		       ea		      nop
     19  668e					      REPEND
    153  668e		       85 10		      sta	RESP0
      0  6690					      sleep	12
      1  6690				   .CYCLES    SET	12
      2  6690
      3  6690				  -	      IF	.CYCLES < 2
      4  6690				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6690				  -	      ERR
      6  6690					      ENDIF
      7  6690
      8  6690				  -	      IF	.CYCLES & 1
      9  6690				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6690				  -	      nop	0
     11  6690				  -	      ELSE
     12  6690				  -	      bit	VSYNC
     13  6690				  -	      ENDIF
     14  6690				  -.CYCLES    SET	.CYCLES - 3
     15  6690					      ENDIF
     16  6690
     17  6690					      REPEAT	.CYCLES / 2
     18  6690		       ea		      nop
     17  6690					      REPEND
     18  6691		       ea		      nop
     17  6691					      REPEND
     18  6692		       ea		      nop
     17  6692					      REPEND
     18  6693		       ea		      nop
     17  6693					      REPEND
     18  6694		       ea		      nop
     17  6694					      REPEND
     18  6695		       ea		      nop
     19  6696					      REPEND
    155  6696		       85 11		      sta	RESP1
    156  6698		       85 02		      sta	WSYNC
    157  669a		       85 2a		      sta	HMOVE
    158  669c
    159  669c		       85 02		      sta	WSYNC
    160  669e		       85 2b		      sta	HMCLR
    161  66a0
    162  66a0
    163  66a0
    164  66a0		       85 02		      sta	WSYNC
      0  66a2					      sleep	3
      1  66a2				   .CYCLES    SET	3
      2  66a2
      3  66a2				  -	      IF	.CYCLES < 2
      4  66a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  66a2				  -	      ERR
      6  66a2					      ENDIF
      7  66a2
      8  66a2					      IF	.CYCLES & 1
      9  66a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  66a2		       04 00		      nop	0
     11  66a4				  -	      ELSE
     12  66a4				  -	      bit	VSYNC
     13  66a4					      ENDIF
     14  66a4				   .CYCLES    SET	.CYCLES - 3
     15  66a4					      ENDIF
     16  66a4
     17  66a4				  -	      REPEAT	.CYCLES / 2
     18  66a4				  -	      nop
     19  66a4					      REPEND
    166  66a4		       4c 00 b7 	      jmp	pfline_96x2_4_frame1
    167  66a7
    168  66a7							;align so our branch doesn't unexpectedly cross a page...
    169  66a7					      if	>. != >[.+$70]
    170  6700		       00 00 00 00*	      align	256
    171  6700					      endif
    172  6700
    173  6700				   pfline_96x2_4_frame1
    174  6700
    175  6700		       85 2a		      sta	HMOVE
    176  6702
    177  6702		       b9 a3 bd 	      lda	bmp_96x2_4_07,y	;4
    178  6705		       85 1c		      sta	GRP1	;3
    179  6707
    180  6707		       a9 00		      lda	#$0	;2
    181  6709		       85 20		      sta	HMP0	;3
    182  670b		       85 21		      sta	HMP1	;3
    183  670d
    184  670d		       b9 85 bd 	      lda	bmp_96x2_4_01,y
    185  6710		       8d 1b 00 	      sta.w	GRP0
    186  6713		       b9 8f bd 	      lda	bmp_96x2_4_03,y
    187  6716		       85 1b		      sta	GRP0
    188  6718		       b9 99 bd 	      lda	bmp_96x2_4_05,y
    189  671b		       85 1b		      sta	GRP0
    190  671d
      0  671d					      sleep	2
      1  671d				   .CYCLES    SET	2
      2  671d
      3  671d				  -	      IF	.CYCLES < 2
      4  671d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  671d				  -	      ERR
      6  671d					      ENDIF
      7  671d
      8  671d				  -	      IF	.CYCLES & 1
      9  671d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  671d				  -	      nop	0
     11  671d				  -	      ELSE
     12  671d				  -	      bit	VSYNC
     13  671d				  -	      ENDIF
     14  671d				  -.CYCLES    SET	.CYCLES - 3
     15  671d					      ENDIF
     16  671d
     17  671d					      REPEAT	.CYCLES / 2
     18  671d		       ea		      nop
     19  671e					      REPEND
    192  671e
    193  671e		       b9 ad bd 	      lda	bmp_96x2_4_09,y
    194  6721		       85 1c		      sta	GRP1
    195  6723		       b9 b7 bd 	      lda	bmp_96x2_4_11,y
    196  6726		       85 1c		      sta	GRP1
    197  6728
    198  6728		       b9 80 bd 	      lda	bmp_96x2_4_00,y
    199  672b		       85 1b		      sta	GRP0
    200  672d
    201  672d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    202  6730
    203  6730							;sta WSYNC	;=0 -----------------------------------------
    204  6730
    205  6730		       b9 9e bd 	      lda	bmp_96x2_4_06,y
    206  6733		       85 1c		      sta	GRP1
    207  6735
      0  6735					      sleep	8
      1  6735				   .CYCLES    SET	8
      2  6735
      3  6735				  -	      IF	.CYCLES < 2
      4  6735				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6735				  -	      ERR
      6  6735					      ENDIF
      7  6735
      8  6735				  -	      IF	.CYCLES & 1
      9  6735				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6735				  -	      nop	0
     11  6735				  -	      ELSE
     12  6735				  -	      bit	VSYNC
     13  6735				  -	      ENDIF
     14  6735				  -.CYCLES    SET	.CYCLES - 3
     15  6735					      ENDIF
     16  6735
     17  6735					      REPEAT	.CYCLES / 2
     18  6735		       ea		      nop
     17  6735					      REPEND
     18  6736		       ea		      nop
     17  6736					      REPEND
     18  6737		       ea		      nop
     17  6737					      REPEND
     18  6738		       ea		      nop
     19  6739					      REPEND
    209  6739
    210  6739		       b9 7a bd 	      lda	bmp_96x2_4_colors-1,y	;get the title color early and store it for later
    211  673c		       aa		      tax		;2
    212  673d
      0  673d					      sleep	3
      1  673d				   .CYCLES    SET	3
      2  673d
      3  673d				  -	      IF	.CYCLES < 2
      4  673d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  673d				  -	      ERR
      6  673d					      ENDIF
      7  673d
      8  673d					      IF	.CYCLES & 1
      9  673d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  673d		       04 00		      nop	0
     11  673f				  -	      ELSE
     12  673f				  -	      bit	VSYNC
     13  673f					      ENDIF
     14  673f				   .CYCLES    SET	.CYCLES - 3
     15  673f					      ENDIF
     16  673f
     17  673f				  -	      REPEAT	.CYCLES / 2
     18  673f				  -	      nop
     19  673f					      REPEND
    214  673f
    215  673f		       a9 80		      lda	#$80	;2
    216  6741		       85 20		      sta	HMP0	;3
    217  6743		       85 21		      sta	HMP1	;3
    218  6745
    219  6745
    220  6745		       b9 8a bd 	      lda	bmp_96x2_4_02,y	;5
    221  6748		       85 1b		      sta	GRP0	;3 =  8
    222  674a
    223  674a		       b9 94 bd 	      lda	bmp_96x2_4_04,y	;5
    224  674d		       85 1b		      sta	GRP0	;3 =  8
    225  674f
      0  674f					      sleep	2
      1  674f				   .CYCLES    SET	2
      2  674f
      3  674f				  -	      IF	.CYCLES < 2
      4  674f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  674f				  -	      ERR
      6  674f					      ENDIF
      7  674f
      8  674f				  -	      IF	.CYCLES & 1
      9  674f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  674f				  -	      nop	0
     11  674f				  -	      ELSE
     12  674f				  -	      bit	VSYNC
     13  674f				  -	      ENDIF
     14  674f				  -.CYCLES    SET	.CYCLES - 3
     15  674f					      ENDIF
     16  674f
     17  674f					      REPEAT	.CYCLES / 2
     18  674f		       ea		      nop
     19  6750					      REPEND
    227  6750
    228  6750		       b9 a8 bd 	      lda	bmp_96x2_4_08,y	;5
    229  6753		       85 1c		      sta	GRP1	;3 =  8
    230  6755
    231  6755		       b9 b2 bd 	      lda	bmp_96x2_4_10,y	;5
    232  6758		       85 1c		      sta	GRP1	;3 =  8
    233  675a
      0  675a					      sleep	4
      1  675a				   .CYCLES    SET	4
      2  675a
      3  675a				  -	      IF	.CYCLES < 2
      4  675a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  675a				  -	      ERR
      6  675a					      ENDIF
      7  675a
      8  675a				  -	      IF	.CYCLES & 1
      9  675a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  675a				  -	      nop	0
     11  675a				  -	      ELSE
     12  675a				  -	      bit	VSYNC
     13  675a				  -	      ENDIF
     14  675a				  -.CYCLES    SET	.CYCLES - 3
     15  675a					      ENDIF
     16  675a
     17  675a					      REPEAT	.CYCLES / 2
     18  675a		       ea		      nop
     17  675a					      REPEND
     18  675b		       ea		      nop
     19  675c					      REPEND
    235  675c
    236  675c		       88		      dey
    237  675d
    238  675d		       8a		      txa
    239  675e				  -	      ifconst	bmp_96x2_4_fade
    240  675e				  -	      and	bmp_96x2_4_fade
    241  675e					      else
      0  675e					      sleep	3
      1  675e				   .CYCLES    SET	3
      2  675e
      3  675e				  -	      IF	.CYCLES < 2
      4  675e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  675e				  -	      ERR
      6  675e					      ENDIF
      7  675e
      8  675e					      IF	.CYCLES & 1
      9  675e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  675e		       04 00		      nop	0
     11  6760				  -	      ELSE
     12  6760				  -	      bit	VSYNC
     13  6760					      ENDIF
     14  6760				   .CYCLES    SET	.CYCLES - 3
     15  6760					      ENDIF
     16  6760
     17  6760				  -	      REPEAT	.CYCLES / 2
     18  6760				  -	      nop
     19  6760					      REPEND
    243  6760					      endif
    244  6760		       85 07		      sta	COLUP1	;3
    245  6762		       85 06		      sta	COLUP0	;3
    246  6764
    247  6764		       c4 cb		      cpy	temp1	;2
    248  6766		       d0 98		      bne	pfline_96x2_4_frame1	;2/3
    249  6768
    250  6768				   pf96x2_4_1codeend
    251  6768							;echo "critical code #2 in 96x2_4 is ",(pf96x2_4_1codeend-pfline_96x2_4_frame1), " bytes long."
    252  6768
    253  6768		       a9 00		      lda	#0
    254  676a		       85 1b		      sta	GRP0
    255  676c		       85 1c		      sta	GRP1
    256  676e
    257  676e				   pfdone_96x2_4
    258  676e		       85 02		      sta	WSYNC	; debug
    259  6770
    260  6770		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    161  6771					      endif		;mk_96x2_4_on
    162  6771
    163  6771					      ifconst	mk_96x2_5_on
------- FILE titlescreen/asm/96x2_5_kernel.asm LEVEL 3 PASS 3
      0  6771					      include	"titlescreen/asm/96x2_5_kernel.asm"
      1  6771				   draw_bmp_96x2_5
      2  6771
      3  6771				  -	      ifconst	bmp_96x2_5_index
      4  6771				  -	      lda	#(bmp_96x2_5_height-1)
      5  6771				  -	      sec
      6  6771				  -	      sbc	bmp_96x2_5_index
      7  6771				  -	      tay
      8  6771				  -	      sbc	#bmp_96x2_5_window
      9  6771				  -	      sta	temp1
     10  6771					      else
     11  6771		       a0 04		      ldy	#(bmp_96x2_5_window-1)
     12  6773		       a9 ff		      lda	#255
     13  6775		       85 cb		      sta	temp1
     14  6777					      endif
     15  6777
     16  6777		       a9 03		      lda	#3
     17  6779		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  677b		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  677d		       a9 00		      lda	#0
     20  677f
     21  677f		       b9 bd bd 	      lda	bmp_96x2_5_colors,y	;4
     22  6782				  -	      ifconst	bmp_96x2_5_fade
     23  6782				  -	      and	bmp_96x2_5_fade
     24  6782					      endif
     25  6782		       85 06		      sta	COLUP0	;3
     26  6784		       85 07		      sta	COLUP1	;3
     27  6786		       85 2b		      sta	HMCLR	;3
     28  6788
     29  6788		       a5 82		      lda	titleframe
     30  678a		       29 01		      and	#1
     31  678c		       f0 03		      beq	jmp_pf96x2_5_frame0
     32  678e		       4c 70 b8 	      jmp	pf96x2_5_frame1
     33  6791				   jmp_pf96x2_5_frame0
     34  6791		       4c 94 b7 	      jmp	pf96x2_5_frame0
     35  6794
     36  6794				   pf96x2_5_frame0
     37  6794							;postion P0 and P1
     38  6794		       85 02		      sta	WSYNC
     39  6796		       a9 e0		      lda	#%11100000
     40  6798		       85 20		      sta	HMP0
     41  679a		       a9 10		      lda	#%00010000
     42  679c		       85 21		      sta	HMP1
     43  679e		       85 02		      sta	WSYNC
      0  67a0					      sleep	28
      1  67a0				   .CYCLES    SET	28
      2  67a0
      3  67a0				  -	      IF	.CYCLES < 2
      4  67a0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  67a0				  -	      ERR
      6  67a0					      ENDIF
      7  67a0
      8  67a0				  -	      IF	.CYCLES & 1
      9  67a0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  67a0				  -	      nop	0
     11  67a0				  -	      ELSE
     12  67a0				  -	      bit	VSYNC
     13  67a0				  -	      ENDIF
     14  67a0				  -.CYCLES    SET	.CYCLES - 3
     15  67a0					      ENDIF
     16  67a0
     17  67a0					      REPEAT	.CYCLES / 2
     18  67a0		       ea		      nop
     17  67a0					      REPEND
     18  67a1		       ea		      nop
     17  67a1					      REPEND
     18  67a2		       ea		      nop
     17  67a2					      REPEND
     18  67a3		       ea		      nop
     17  67a3					      REPEND
     18  67a4		       ea		      nop
     17  67a4					      REPEND
     18  67a5		       ea		      nop
     17  67a5					      REPEND
     18  67a6		       ea		      nop
     17  67a6					      REPEND
     18  67a7		       ea		      nop
     17  67a7					      REPEND
     18  67a8		       ea		      nop
     17  67a8					      REPEND
     18  67a9		       ea		      nop
     17  67a9					      REPEND
     18  67aa		       ea		      nop
     17  67aa					      REPEND
     18  67ab		       ea		      nop
     17  67ab					      REPEND
     18  67ac		       ea		      nop
     17  67ac					      REPEND
     18  67ad		       ea		      nop
     19  67ae					      REPEND
     45  67ae		       85 10		      sta	RESP0
      0  67b0					      sleep	14
      1  67b0				   .CYCLES    SET	14
      2  67b0
      3  67b0				  -	      IF	.CYCLES < 2
      4  67b0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  67b0				  -	      ERR
      6  67b0					      ENDIF
      7  67b0
      8  67b0				  -	      IF	.CYCLES & 1
      9  67b0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  67b0				  -	      nop	0
     11  67b0				  -	      ELSE
     12  67b0				  -	      bit	VSYNC
     13  67b0				  -	      ENDIF
     14  67b0				  -.CYCLES    SET	.CYCLES - 3
     15  67b0					      ENDIF
     16  67b0
     17  67b0					      REPEAT	.CYCLES / 2
     18  67b0		       ea		      nop
     17  67b0					      REPEND
     18  67b1		       ea		      nop
     17  67b1					      REPEND
     18  67b2		       ea		      nop
     17  67b2					      REPEND
     18  67b3		       ea		      nop
     17  67b3					      REPEND
     18  67b4		       ea		      nop
     17  67b4					      REPEND
     18  67b5		       ea		      nop
     17  67b5					      REPEND
     18  67b6		       ea		      nop
     19  67b7					      REPEND
     47  67b7		       85 11		      sta	RESP1
     48  67b9		       85 02		      sta	WSYNC
     49  67bb		       85 2a		      sta	HMOVE
     50  67bd
     51  67bd		       85 02		      sta	WSYNC
     52  67bf		       85 2b		      sta	HMCLR
     53  67c1		       85 02		      sta	WSYNC
     54  67c3
      0  67c3					      sleep	4
      1  67c3				   .CYCLES    SET	4
      2  67c3
      3  67c3				  -	      IF	.CYCLES < 2
      4  67c3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  67c3				  -	      ERR
      6  67c3					      ENDIF
      7  67c3
      8  67c3				  -	      IF	.CYCLES & 1
      9  67c3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  67c3				  -	      nop	0
     11  67c3				  -	      ELSE
     12  67c3				  -	      bit	VSYNC
     13  67c3				  -	      ENDIF
     14  67c3				  -.CYCLES    SET	.CYCLES - 3
     15  67c3					      ENDIF
     16  67c3
     17  67c3					      REPEAT	.CYCLES / 2
     18  67c3		       ea		      nop
     17  67c3					      REPEND
     18  67c4		       ea		      nop
     19  67c5					      REPEND
     56  67c5		       4c 00 b8 	      jmp	pfline_96x2_5_frame0
     57  67c8							;align so our branch doesn't unexpectedly cross a page...
     58  67c8					      if	>. != >[.+$70]
     59  6800		       00 00 00 00*	      align	256
     60  6800					      endif
     61  6800
     62  6800				   pfline_96x2_5_frame0
     63  6800		       a9 80		      lda	#$80	;2
     64  6802		       85 20		      sta	HMP0	;3
     65  6804		       85 21		      sta	HMP1	;3
     66  6806
     67  6806		       b9 e0 bd 	      lda	bmp_96x2_5_06,y	;4
     68  6809		       85 1c		      sta	GRP1	;3
     69  680b
     70  680b		       b9 c2 bd 	      lda	bmp_96x2_5_00,y
     71  680e		       85 1b		      sta	GRP0
     72  6810		       b9 cc bd 	      lda	bmp_96x2_5_02,y
     73  6813		       85 1b		      sta	GRP0
     74  6815		       b9 d6 bd 	      lda	bmp_96x2_5_04,y
     75  6818		       85 1b		      sta	GRP0
     76  681a
      0  681a					      sleep	2
      1  681a				   .CYCLES    SET	2
      2  681a
      3  681a				  -	      IF	.CYCLES < 2
      4  681a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  681a				  -	      ERR
      6  681a					      ENDIF
      7  681a
      8  681a				  -	      IF	.CYCLES & 1
      9  681a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  681a				  -	      nop	0
     11  681a				  -	      ELSE
     12  681a				  -	      bit	VSYNC
     13  681a				  -	      ENDIF
     14  681a				  -.CYCLES    SET	.CYCLES - 3
     15  681a					      ENDIF
     16  681a
     17  681a					      REPEAT	.CYCLES / 2
     18  681a		       ea		      nop
     19  681b					      REPEND
     78  681b
     79  681b		       b9 ea bd 	      lda	bmp_96x2_5_08,y
     80  681e		       85 1c		      sta	GRP1
     81  6820		       b9 f4 bd 	      lda	bmp_96x2_5_10,y
     82  6823		       85 1c		      sta	GRP1
     83  6825
     84  6825		       b9 c7 bd 	      lda	bmp_96x2_5_01,y
     85  6828		       85 1b		      sta	GRP0
     86  682a
      0  682a					      sleep	8
      1  682a				   .CYCLES    SET	8
      2  682a
      3  682a				  -	      IF	.CYCLES < 2
      4  682a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  682a				  -	      ERR
      6  682a					      ENDIF
      7  682a
      8  682a				  -	      IF	.CYCLES & 1
      9  682a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  682a				  -	      nop	0
     11  682a				  -	      ELSE
     12  682a				  -	      bit	VSYNC
     13  682a				  -	      ENDIF
     14  682a				  -.CYCLES    SET	.CYCLES - 3
     15  682a					      ENDIF
     16  682a
     17  682a					      REPEAT	.CYCLES / 2
     18  682a		       ea		      nop
     17  682a					      REPEND
     18  682b		       ea		      nop
     17  682b					      REPEND
     18  682c		       ea		      nop
     17  682c					      REPEND
     18  682d		       ea		      nop
     19  682e					      REPEND
     88  682e
     89  682e							;sta WSYNC	;=0
     90  682e		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  6830
     92  6830		       b9 bc bd 	      lda	bmp_96x2_5_colors-1,y	;4 - get the title color early and store it for later
     93  6833				  -	      ifconst	bmp_96x2_5_fade
     94  6833				  -	      and	bmp_96x2_5_fade
     95  6833					      else
      0  6833					      sleep	3
      1  6833				   .CYCLES    SET	3
      2  6833
      3  6833				  -	      IF	.CYCLES < 2
      4  6833				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6833				  -	      ERR
      6  6833					      ENDIF
      7  6833
      8  6833					      IF	.CYCLES & 1
      9  6833					      IFNCONST	NO_ILLEGAL_OPCODES
     10  6833		       04 00		      nop	0
     11  6835				  -	      ELSE
     12  6835				  -	      bit	VSYNC
     13  6835					      ENDIF
     14  6835				   .CYCLES    SET	.CYCLES - 3
     15  6835					      ENDIF
     16  6835
     17  6835				  -	      REPEAT	.CYCLES / 2
     18  6835				  -	      nop
     19  6835					      REPEND
     97  6835					      endif
     98  6835		       aa		      tax
     99  6836
    100  6836		       a9 00		      lda	#0	;2
    101  6838		       85 20		      sta	HMP0	;3
    102  683a		       85 21		      sta	HMP1	;3
    103  683c
      0  683c					      sleep	7
      1  683c				   .CYCLES    SET	7
      2  683c
      3  683c				  -	      IF	.CYCLES < 2
      4  683c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  683c				  -	      ERR
      6  683c					      ENDIF
      7  683c
      8  683c					      IF	.CYCLES & 1
      9  683c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  683c		       04 00		      nop	0
     11  683e				  -	      ELSE
     12  683e				  -	      bit	VSYNC
     13  683e					      ENDIF
     14  683e				   .CYCLES    SET	.CYCLES - 3
     15  683e					      ENDIF
     16  683e
     17  683e					      REPEAT	.CYCLES / 2
     18  683e		       ea		      nop
     17  683e					      REPEND
     18  683f		       ea		      nop
     19  6840					      REPEND
    105  6840
    106  6840		       b9 e5 bd 	      lda	bmp_96x2_5_07,y
    107  6843		       85 1c		      sta	GRP1
    108  6845
    109  6845		       b9 d1 bd 	      lda	bmp_96x2_5_03,y	;5
    110  6848		       85 1b		      sta	GRP0	;3 =  8
    111  684a		       b9 db bd 	      lda	bmp_96x2_5_05,y	;5
    112  684d		       85 1b		      sta	GRP0	;3 =  8
    113  684f
      0  684f					      sleep	2
      1  684f				   .CYCLES    SET	2
      2  684f
      3  684f				  -	      IF	.CYCLES < 2
      4  684f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  684f				  -	      ERR
      6  684f					      ENDIF
      7  684f
      8  684f				  -	      IF	.CYCLES & 1
      9  684f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  684f				  -	      nop	0
     11  684f				  -	      ELSE
     12  684f				  -	      bit	VSYNC
     13  684f				  -	      ENDIF
     14  684f				  -.CYCLES    SET	.CYCLES - 3
     15  684f					      ENDIF
     16  684f
     17  684f					      REPEAT	.CYCLES / 2
     18  684f		       ea		      nop
     19  6850					      REPEND
    115  6850
    116  6850		       b9 ef bd 	      lda	bmp_96x2_5_09,y	;5
    117  6853		       85 1c		      sta	GRP1	;3 =  8
    118  6855		       b9 f9 bd 	      lda	bmp_96x2_5_11,y	;5
    119  6858		       85 1c		      sta	GRP1	;3 =  8
    120  685a
      0  685a					      sleep	2
      1  685a				   .CYCLES    SET	2
      2  685a
      3  685a				  -	      IF	.CYCLES < 2
      4  685a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  685a				  -	      ERR
      6  685a					      ENDIF
      7  685a
      8  685a				  -	      IF	.CYCLES & 1
      9  685a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  685a				  -	      nop	0
     11  685a				  -	      ELSE
     12  685a				  -	      bit	VSYNC
     13  685a				  -	      ENDIF
     14  685a				  -.CYCLES    SET	.CYCLES - 3
     15  685a					      ENDIF
     16  685a
     17  685a					      REPEAT	.CYCLES / 2
     18  685a		       ea		      nop
     19  685b					      REPEND
    122  685b		       86 07		      stx	COLUP1
    123  685d		       86 06		      stx	COLUP0
    124  685f
    125  685f
    126  685f		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  6861					      sleep	2
      1  6861				   .CYCLES    SET	2
      2  6861
      3  6861				  -	      IF	.CYCLES < 2
      4  6861				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6861				  -	      ERR
      6  6861					      ENDIF
      7  6861
      8  6861				  -	      IF	.CYCLES & 1
      9  6861				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6861				  -	      nop	0
     11  6861				  -	      ELSE
     12  6861				  -	      bit	VSYNC
     13  6861				  -	      ENDIF
     14  6861				  -.CYCLES    SET	.CYCLES - 3
     15  6861					      ENDIF
     16  6861
     17  6861					      REPEAT	.CYCLES / 2
     18  6861		       ea		      nop
     19  6862					      REPEND
    128  6862		       88		      dey
    129  6863
    130  6863		       c4 cb		      cpy	temp1	;3
    131  6865		       d0 99		      bne	pfline_96x2_5_frame0	;2/3
    132  6867
    133  6867				   pf96x2_5_0codeend
    134  6867							;echo "critical code #1 in 96x2_5 is ",(pf96x2_5_0codeend-pfline_96x2_5_frame0), " bytes long."
    135  6867
    136  6867		       a9 00		      lda	#0
    137  6869		       85 1b		      sta	GRP0
    138  686b		       85 1c		      sta	GRP1
    139  686d		       4c 6e b9 	      jmp	pfdone_96x2_5
    140  6870
    141  6870
    142  6870				   pf96x2_5_frame1
    143  6870
    144  6870							;postion P0 and P1
    145  6870		       85 02		      sta	WSYNC
    146  6872		       a9 20		      lda	#%00100000
    147  6874		       85 20		      sta	HMP0
    148  6876		       a9 00		      lda	#0
    149  6878		       a9 f0		      lda	#%11110000
    150  687a		       85 21		      sta	HMP1
    151  687c		       85 02		      sta	WSYNC
      0  687e					      sleep	32
      1  687e				   .CYCLES    SET	32
      2  687e
      3  687e				  -	      IF	.CYCLES < 2
      4  687e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  687e				  -	      ERR
      6  687e					      ENDIF
      7  687e
      8  687e				  -	      IF	.CYCLES & 1
      9  687e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  687e				  -	      nop	0
     11  687e				  -	      ELSE
     12  687e				  -	      bit	VSYNC
     13  687e				  -	      ENDIF
     14  687e				  -.CYCLES    SET	.CYCLES - 3
     15  687e					      ENDIF
     16  687e
     17  687e					      REPEAT	.CYCLES / 2
     18  687e		       ea		      nop
     17  687e					      REPEND
     18  687f		       ea		      nop
     17  687f					      REPEND
     18  6880		       ea		      nop
     17  6880					      REPEND
     18  6881		       ea		      nop
     17  6881					      REPEND
     18  6882		       ea		      nop
     17  6882					      REPEND
     18  6883		       ea		      nop
     17  6883					      REPEND
     18  6884		       ea		      nop
     17  6884					      REPEND
     18  6885		       ea		      nop
     17  6885					      REPEND
     18  6886		       ea		      nop
     17  6886					      REPEND
     18  6887		       ea		      nop
     17  6887					      REPEND
     18  6888		       ea		      nop
     17  6888					      REPEND
     18  6889		       ea		      nop
     17  6889					      REPEND
     18  688a		       ea		      nop
     17  688a					      REPEND
     18  688b		       ea		      nop
     17  688b					      REPEND
     18  688c		       ea		      nop
     17  688c					      REPEND
     18  688d		       ea		      nop
     19  688e					      REPEND
    153  688e		       85 10		      sta	RESP0
      0  6890					      sleep	12
      1  6890				   .CYCLES    SET	12
      2  6890
      3  6890				  -	      IF	.CYCLES < 2
      4  6890				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6890				  -	      ERR
      6  6890					      ENDIF
      7  6890
      8  6890				  -	      IF	.CYCLES & 1
      9  6890				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6890				  -	      nop	0
     11  6890				  -	      ELSE
     12  6890				  -	      bit	VSYNC
     13  6890				  -	      ENDIF
     14  6890				  -.CYCLES    SET	.CYCLES - 3
     15  6890					      ENDIF
     16  6890
     17  6890					      REPEAT	.CYCLES / 2
     18  6890		       ea		      nop
     17  6890					      REPEND
     18  6891		       ea		      nop
     17  6891					      REPEND
     18  6892		       ea		      nop
     17  6892					      REPEND
     18  6893		       ea		      nop
     17  6893					      REPEND
     18  6894		       ea		      nop
     17  6894					      REPEND
     18  6895		       ea		      nop
     19  6896					      REPEND
    155  6896		       85 11		      sta	RESP1
    156  6898		       85 02		      sta	WSYNC
    157  689a		       85 2a		      sta	HMOVE
    158  689c
    159  689c		       85 02		      sta	WSYNC
    160  689e		       85 2b		      sta	HMCLR
    161  68a0
    162  68a0
    163  68a0
    164  68a0		       85 02		      sta	WSYNC
      0  68a2					      sleep	3
      1  68a2				   .CYCLES    SET	3
      2  68a2
      3  68a2				  -	      IF	.CYCLES < 2
      4  68a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  68a2				  -	      ERR
      6  68a2					      ENDIF
      7  68a2
      8  68a2					      IF	.CYCLES & 1
      9  68a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  68a2		       04 00		      nop	0
     11  68a4				  -	      ELSE
     12  68a4				  -	      bit	VSYNC
     13  68a4					      ENDIF
     14  68a4				   .CYCLES    SET	.CYCLES - 3
     15  68a4					      ENDIF
     16  68a4
     17  68a4				  -	      REPEAT	.CYCLES / 2
     18  68a4				  -	      nop
     19  68a4					      REPEND
    166  68a4		       4c 00 b9 	      jmp	pfline_96x2_5_frame1
    167  68a7
    168  68a7							;align so our branch doesn't unexpectedly cross a page...
    169  68a7					      if	>. != >[.+$70]
    170  6900		       00 00 00 00*	      align	256
    171  6900					      endif
    172  6900
    173  6900				   pfline_96x2_5_frame1
    174  6900
    175  6900		       85 2a		      sta	HMOVE
    176  6902
    177  6902		       b9 e5 bd 	      lda	bmp_96x2_5_07,y	;4
    178  6905		       85 1c		      sta	GRP1	;3
    179  6907
    180  6907		       a9 00		      lda	#$0	;2
    181  6909		       85 20		      sta	HMP0	;3
    182  690b		       85 21		      sta	HMP1	;3
    183  690d
    184  690d		       b9 c7 bd 	      lda	bmp_96x2_5_01,y
    185  6910		       8d 1b 00 	      sta.w	GRP0
    186  6913		       b9 d1 bd 	      lda	bmp_96x2_5_03,y
    187  6916		       85 1b		      sta	GRP0
    188  6918		       b9 db bd 	      lda	bmp_96x2_5_05,y
    189  691b		       85 1b		      sta	GRP0
    190  691d
      0  691d					      sleep	2
      1  691d				   .CYCLES    SET	2
      2  691d
      3  691d				  -	      IF	.CYCLES < 2
      4  691d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  691d				  -	      ERR
      6  691d					      ENDIF
      7  691d
      8  691d				  -	      IF	.CYCLES & 1
      9  691d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  691d				  -	      nop	0
     11  691d				  -	      ELSE
     12  691d				  -	      bit	VSYNC
     13  691d				  -	      ENDIF
     14  691d				  -.CYCLES    SET	.CYCLES - 3
     15  691d					      ENDIF
     16  691d
     17  691d					      REPEAT	.CYCLES / 2
     18  691d		       ea		      nop
     19  691e					      REPEND
    192  691e
    193  691e		       b9 ef bd 	      lda	bmp_96x2_5_09,y
    194  6921		       85 1c		      sta	GRP1
    195  6923		       b9 f9 bd 	      lda	bmp_96x2_5_11,y
    196  6926		       85 1c		      sta	GRP1
    197  6928
    198  6928		       b9 c2 bd 	      lda	bmp_96x2_5_00,y
    199  692b		       85 1b		      sta	GRP0
    200  692d
    201  692d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    202  6930
    203  6930							;sta WSYNC	;=0 -----------------------------------------
    204  6930
    205  6930		       b9 e0 bd 	      lda	bmp_96x2_5_06,y
    206  6933		       85 1c		      sta	GRP1
    207  6935
      0  6935					      sleep	8
      1  6935				   .CYCLES    SET	8
      2  6935
      3  6935				  -	      IF	.CYCLES < 2
      4  6935				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6935				  -	      ERR
      6  6935					      ENDIF
      7  6935
      8  6935				  -	      IF	.CYCLES & 1
      9  6935				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6935				  -	      nop	0
     11  6935				  -	      ELSE
     12  6935				  -	      bit	VSYNC
     13  6935				  -	      ENDIF
     14  6935				  -.CYCLES    SET	.CYCLES - 3
     15  6935					      ENDIF
     16  6935
     17  6935					      REPEAT	.CYCLES / 2
     18  6935		       ea		      nop
     17  6935					      REPEND
     18  6936		       ea		      nop
     17  6936					      REPEND
     18  6937		       ea		      nop
     17  6937					      REPEND
     18  6938		       ea		      nop
     19  6939					      REPEND
    209  6939
    210  6939		       b9 bc bd 	      lda	bmp_96x2_5_colors-1,y	;get the title color early and store it for later
    211  693c		       aa		      tax		;2
    212  693d
      0  693d					      sleep	3
      1  693d				   .CYCLES    SET	3
      2  693d
      3  693d				  -	      IF	.CYCLES < 2
      4  693d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  693d				  -	      ERR
      6  693d					      ENDIF
      7  693d
      8  693d					      IF	.CYCLES & 1
      9  693d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  693d		       04 00		      nop	0
     11  693f				  -	      ELSE
     12  693f				  -	      bit	VSYNC
     13  693f					      ENDIF
     14  693f				   .CYCLES    SET	.CYCLES - 3
     15  693f					      ENDIF
     16  693f
     17  693f				  -	      REPEAT	.CYCLES / 2
     18  693f				  -	      nop
     19  693f					      REPEND
    214  693f
    215  693f		       a9 80		      lda	#$80	;2
    216  6941		       85 20		      sta	HMP0	;3
    217  6943		       85 21		      sta	HMP1	;3
    218  6945
    219  6945
    220  6945		       b9 cc bd 	      lda	bmp_96x2_5_02,y	;5
    221  6948		       85 1b		      sta	GRP0	;3 =  8
    222  694a
    223  694a		       b9 d6 bd 	      lda	bmp_96x2_5_04,y	;5
    224  694d		       85 1b		      sta	GRP0	;3 =  8
    225  694f
      0  694f					      sleep	2
      1  694f				   .CYCLES    SET	2
      2  694f
      3  694f				  -	      IF	.CYCLES < 2
      4  694f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  694f				  -	      ERR
      6  694f					      ENDIF
      7  694f
      8  694f				  -	      IF	.CYCLES & 1
      9  694f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  694f				  -	      nop	0
     11  694f				  -	      ELSE
     12  694f				  -	      bit	VSYNC
     13  694f				  -	      ENDIF
     14  694f				  -.CYCLES    SET	.CYCLES - 3
     15  694f					      ENDIF
     16  694f
     17  694f					      REPEAT	.CYCLES / 2
     18  694f		       ea		      nop
     19  6950					      REPEND
    227  6950
    228  6950		       b9 ea bd 	      lda	bmp_96x2_5_08,y	;5
    229  6953		       85 1c		      sta	GRP1	;3 =  8
    230  6955
    231  6955		       b9 f4 bd 	      lda	bmp_96x2_5_10,y	;5
    232  6958		       85 1c		      sta	GRP1	;3 =  8
    233  695a
      0  695a					      sleep	4
      1  695a				   .CYCLES    SET	4
      2  695a
      3  695a				  -	      IF	.CYCLES < 2
      4  695a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  695a				  -	      ERR
      6  695a					      ENDIF
      7  695a
      8  695a				  -	      IF	.CYCLES & 1
      9  695a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  695a				  -	      nop	0
     11  695a				  -	      ELSE
     12  695a				  -	      bit	VSYNC
     13  695a				  -	      ENDIF
     14  695a				  -.CYCLES    SET	.CYCLES - 3
     15  695a					      ENDIF
     16  695a
     17  695a					      REPEAT	.CYCLES / 2
     18  695a		       ea		      nop
     17  695a					      REPEND
     18  695b		       ea		      nop
     19  695c					      REPEND
    235  695c
    236  695c		       88		      dey
    237  695d
    238  695d		       8a		      txa
    239  695e				  -	      ifconst	bmp_96x2_5_fade
    240  695e				  -	      and	bmp_96x2_5_fade
    241  695e					      else
      0  695e					      sleep	3
      1  695e				   .CYCLES    SET	3
      2  695e
      3  695e				  -	      IF	.CYCLES < 2
      4  695e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  695e				  -	      ERR
      6  695e					      ENDIF
      7  695e
      8  695e					      IF	.CYCLES & 1
      9  695e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  695e		       04 00		      nop	0
     11  6960				  -	      ELSE
     12  6960				  -	      bit	VSYNC
     13  6960					      ENDIF
     14  6960				   .CYCLES    SET	.CYCLES - 3
     15  6960					      ENDIF
     16  6960
     17  6960				  -	      REPEAT	.CYCLES / 2
     18  6960				  -	      nop
     19  6960					      REPEND
    243  6960					      endif
    244  6960		       85 07		      sta	COLUP1	;3
    245  6962		       85 06		      sta	COLUP0	;3
    246  6964
    247  6964		       c4 cb		      cpy	temp1	;2
    248  6966		       d0 98		      bne	pfline_96x2_5_frame1	;2/3
    249  6968
    250  6968				   pf96x2_5_1codeend
    251  6968							;echo "critical code #2 in 96x2_5 is ",(pf96x2_5_1codeend-pfline_96x2_5_frame1), " bytes long."
    252  6968
    253  6968		       a9 00		      lda	#0
    254  696a		       85 1b		      sta	GRP0
    255  696c		       85 1c		      sta	GRP1
    256  696e
    257  696e				   pfdone_96x2_5
    258  696e		       85 02		      sta	WSYNC	; debug
    259  6970
    260  6970		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    165  6971					      endif		;mk_96x2_5_on
    166  6971
    167  6971				  -	      ifconst	mk_96x2_6_on
    168  6971				  -	      include	"titlescreen/asm/96x2_6_kernel.asm"
    169  6971					      endif		;mk_96x2_6_on
    170  6971
    171  6971				  -	      ifconst	mk_96x2_7_on
    172  6971				  -	      include	"titlescreen/asm/96x2_7_kernel.asm"
    173  6971					      endif		;mk_96x2_7_on
    174  6971
    175  6971				  -	      ifconst	mk_96x2_8_on
    176  6971				  -	      include	"titlescreen/asm/96x2_8_kernel.asm"
    177  6971					      endif		;mk_96x2_8_on
    178  6971
    179  6971					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 3
      0  6971					      include	"titlescreen/asm/score_kernel.asm"
      1  6971							; The batari Basic score kernel
      2  6971							; This minikernel is not under the same license as the rest of the
      3  6971							; titlescreen code. Refer to the bB license before you use this in
      4  6971							; a non-bB program.
      5  6971
      6  6971				   draw_score_display
      7  6971
      8  6971		       a7 b8		      lax	score+0
      9  6973		       20 43 ba 	      jsr	miniscorepointerset
     10  6976		       84 b3		      sty	scorepointers+8
     11  6978		       86 ab		      stx	scorepointers+0
     12  697a		       a7 b9		      lax	score+1
     13  697c		       20 43 ba 	      jsr	miniscorepointerset
     14  697f		       84 af		      sty	scorepointers+4
     15  6981		       86 b1		      stx	scorepointers+6
     16  6983		       a7 ba		      lax	score+2
     17  6985		       20 43 ba 	      jsr	miniscorepointerset
     18  6988		       84 b5		      sty	scorepointers+10
     19  698a		       86 ad		      stx	scorepointers+2
     20  698c
     21  698c		       85 2b		      sta	HMCLR
     22  698e		       ba		      tsx
     23  698f		       86 f6		      stx	stack1
     24  6991							;ldx #$20
     25  6991		       a2 60		      ldx	#$60
     26  6993		       86 20		      stx	HMP0
     27  6995
     28  6995		       a2 00		      ldx	#0
     29  6997		       85 02		      sta	WSYNC	;   0
     30  6999		       86 1b		      STx	GRP0	; 3 3
     31  699b		       86 1c		      STx	GRP1	; 3 6 seems to be needed because of vdel
     32  699d
      0  699d					      sleep	7	; 7 13
      1  699d				   .CYCLES    SET	7
      2  699d
      3  699d				  -	      IF	.CYCLES < 2
      4  699d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  699d				  -	      ERR
      6  699d					      ENDIF
      7  699d
      8  699d					      IF	.CYCLES & 1
      9  699d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  699d		       04 00		      nop	0
     11  699f				  -	      ELSE
     12  699f				  -	      bit	VSYNC
     13  699f					      ENDIF
     14  699f				   .CYCLES    SET	.CYCLES - 3
     15  699f					      ENDIF
     16  699f
     17  699f					      REPEAT	.CYCLES / 2
     18  699f		       ea		      nop
     17  699f					      REPEND
     18  69a0		       ea		      nop
     19  69a1					      REPEND
     34  69a1
     35  69a1		       a9 be		      lda	#>miniscoretable	; 2 15
     36  69a3		       95 ac		      sta	scorepointers+1,x	; 4 19
     37  69a5		       95 ae		      sta	scorepointers+3,x	; 4 23
     38  69a7		       95 b0		      sta	scorepointers+5,x	; 4 27
     39  69a9		       95 b2		      sta	scorepointers+7,x	; 4 31
     40  69ab		       95 b4		      sta	scorepointers+9,x	; 4 35
     41  69ad		       95 b6		      sta	scorepointers+11,x	; 4 39
     42  69af
     43  69af		       a0 07		      LDY	#7	; 2 41
     44  69b1		       85 10		      STA	RESP0	; 3 44
     45  69b3		       85 11		      STA	RESP1	; 3 47
     46  69b5
     47  69b5		       a9 03		      LDA	#$03	; 2 49
     48  69b7		       85 04		      STA	NUSIZ0	; 3 52
     49  69b9		       95 05		      STA	NUSIZ1,x	; 4 56
     50  69bb		       85 25		      STA	VDELP0	; 3 59
     51  69bd		       85 26		      STA	VDELP1	; 3 62
     52  69bf							;LDA #$30		; 2 64
     53  69bf		       a9 70		      LDA	#$70	; 2 64
     54  69c1		       85 21		      STA	HMP1	; 3 67
     55  69c3		       a5 eb		      LDA	scorecolor	; 3 70
     56  69c5		       85 2a		      STA	HMOVE	; cycle 73 ?
     57  69c7				  -	      ifconst	score_kernel_fade
     58  69c7				  -	      and	score_kernel_fade
     59  69c7					      endif
     60  69c7
     61  69c7		       85 06		      STA	COLUP0
     62  69c9		       85 07		      STA	COLUP1
     63  69cb				  -	      ifconst	scorefade
     64  69cb				  -	      STA	stack2	; scorefade
     65  69cb					      endif
     66  69cb		       b1 ab		      lda	(scorepointers),y
     67  69cd		       85 1b		      sta	GRP0
     68  69cf		       b1 b3		      lda	(scorepointers+8),y
     69  69d1		       85 02		      sta	WSYNC
      0  69d3					      sleep	2
      1  69d3				   .CYCLES    SET	2
      2  69d3
      3  69d3				  -	      IF	.CYCLES < 2
      4  69d3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  69d3				  -	      ERR
      6  69d3					      ENDIF
      7  69d3
      8  69d3				  -	      IF	.CYCLES & 1
      9  69d3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  69d3				  -	      nop	0
     11  69d3				  -	      ELSE
     12  69d3				  -	      bit	VSYNC
     13  69d3				  -	      ENDIF
     14  69d3				  -.CYCLES    SET	.CYCLES - 3
     15  69d3					      ENDIF
     16  69d3
     17  69d3					      REPEAT	.CYCLES / 2
     18  69d3		       ea		      nop
     19  69d4					      REPEND
     71  69d4		       4c 0b ba 	      jmp	beginscoreloop
     72  69d7
     73  69d7					      if	((<*)>$28)
     74  6a00		       00 00 00 00*	      align	256	; kludge that potentially wastes space!  should be fixed!
     75  6a00					      endif
     76  6a00
     77  6a00				   scoreloop2
     78  6a00				  -	      ifconst	scorefade
     79  6a00				  -	      lda	stack2
     80  6a00				  -	      sta	COLUP0
     81  6a00				  -	      sta	COLUP1
     82  6a00					      else
      0  6a00					      sleep	9
      1  6a00				   .CYCLES    SET	9
      2  6a00
      3  6a00				  -	      IF	.CYCLES < 2
      4  6a00				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6a00				  -	      ERR
      6  6a00					      ENDIF
      7  6a00
      8  6a00					      IF	.CYCLES & 1
      9  6a00					      IFNCONST	NO_ILLEGAL_OPCODES
     10  6a00		       04 00		      nop	0
     11  6a02				  -	      ELSE
     12  6a02				  -	      bit	VSYNC
     13  6a02					      ENDIF
     14  6a02				   .CYCLES    SET	.CYCLES - 3
     15  6a02					      ENDIF
     16  6a02
     17  6a02					      REPEAT	.CYCLES / 2
     18  6a02		       ea		      nop
     17  6a02					      REPEND
     18  6a03		       ea		      nop
     17  6a03					      REPEND
     18  6a04		       ea		      nop
     19  6a05					      REPEND
     84  6a05					      endif
     85  6a05		       b1 ab		      lda	(scorepointers),y	;+5  68  204
     86  6a07		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     87  6a09		       b1 b3		      lda	(scorepointers+$8),y	;+5   5   15
     88  6a0b							; cycle 0
     89  6a0b				   beginscoreloop
     90  6a0b		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
     91  6a0d		       b1 b1		      lda	(scorepointers+$6),y	;+5  13   39
     92  6a0f		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
     93  6a11		       b3 ad		      lax	(scorepointers+$2),y	;+5  29   87
     94  6a13		       9a		      txs
     95  6a14		       b3 af		      lax	(scorepointers+$4),y	;+5  36  108
     96  6a16
     97  6a16				  -	      ifconst	scorefade
     98  6a16				  -	      dec	stack2
     99  6a16					      else
      0  6a16					      sleep	5
      1  6a16				   .CYCLES    SET	5
      2  6a16
      3  6a16				  -	      IF	.CYCLES < 2
      4  6a16				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6a16				  -	      ERR
      6  6a16					      ENDIF
      7  6a16
      8  6a16					      IF	.CYCLES & 1
      9  6a16					      IFNCONST	NO_ILLEGAL_OPCODES
     10  6a16		       04 00		      nop	0
     11  6a18				  -	      ELSE
     12  6a18				  -	      bit	VSYNC
     13  6a18					      ENDIF
     14  6a18				   .CYCLES    SET	.CYCLES - 3
     15  6a18					      ENDIF
     16  6a18
     17  6a18					      REPEAT	.CYCLES / 2
     18  6a18		       ea		      nop
     19  6a19					      REPEND
    101  6a19					      endif
      0  6a19					      sleep	2
      1  6a19				   .CYCLES    SET	2
      2  6a19
      3  6a19				  -	      IF	.CYCLES < 2
      4  6a19				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6a19				  -	      ERR
      6  6a19					      ENDIF
      7  6a19
      8  6a19				  -	      IF	.CYCLES & 1
      9  6a19				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6a19				  -	      nop	0
     11  6a19				  -	      ELSE
     12  6a19				  -	      bit	VSYNC
     13  6a19				  -	      ENDIF
     14  6a19				  -.CYCLES    SET	.CYCLES - 3
     15  6a19					      ENDIF
     16  6a19
     17  6a19					      REPEAT	.CYCLES / 2
     18  6a19		       ea		      nop
     19  6a1a					      REPEND
    103  6a1a
    104  6a1a		       b1 b5		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    105  6a1c		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    106  6a1e		       ba		      tsx
    107  6a1f		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    108  6a21		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    109  6a23
    110  6a23		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    111  6a25		       88		      dey
    112  6a26		       10 d8		      bpl	scoreloop2	;+2  60  180
    113  6a28				   scoreloop2end
    114  6a28
    115  6a28							;echo "critical size: ",(scoreloop2end-scoreloop2)
    116  6a28
    117  6a28
    118  6a28		       a6 f6		      ldx	stack1
    119  6a2a		       9a		      txs
    120  6a2b
    121  6a2b		       a9 00		      LDA	#0
    122  6a2d		       85 0e		      sta	PF1
    123  6a2f		       85 1b		      STA	GRP0
    124  6a31		       85 1c		      STA	GRP1
    125  6a33		       85 25		      STA	VDELP0
    126  6a35		       85 26		      STA	VDELP1
    127  6a37		       85 04		      STA	NUSIZ0
    128  6a39		       85 05		      STA	NUSIZ1
    129  6a3b
    130  6a3b							; clear out the score pointers in case they're stolen DPC variables...
    131  6a3b		       a2 0b		      ldx	#11
    132  6a3d				   clearscoreploop
    133  6a3d		       95 ab		      sta	scorepointers,x
    134  6a3f		       ca		      dex
    135  6a40		       10 fb		      bpl	clearscoreploop
    136  6a42
    137  6a42
    138  6a42							;;ldy temp3
    139  6a42							;ldy scorepointers+8
    140  6a42							;sty scorepointers+3
    141  6a42
    142  6a42							;;ldy temp5
    143  6a42							;ldy scorepointers+10
    144  6a42							;sty scorepointers+5
    145  6a42		       60		      rts
    146  6a43
    147  6a43				   miniscorepointerset
    148  6a43		       29 0f		      and	#$0F
    149  6a45		       0a		      asl
    150  6a46		       0a		      asl
    151  6a47		       0a		      asl
    152  6a48		       69 00		      adc	#<miniscoretable
    153  6a4a		       a8		      tay
    154  6a4b		       8a		      txa
    155  6a4c		       29 f0		      and	#$F0
    156  6a4e		       4a		      lsr
    157  6a4f		       69 00		      adc	#<miniscoretable
    158  6a51		       aa		      tax
    159  6a52		       60		      rts
    160  6a53
------- FILE titlescreen/asm/titlescreen.asm
    181  6a53					      endif		;mk_score_on
    182  6a53
    183  6a53					      ifconst	mk_gameselect_on
------- FILE titlescreen/asm/gameselect_kernel.asm LEVEL 3 PASS 3
      0  6a53					      include	"titlescreen/asm/gameselect_kernel.asm"
      1  6a53
      2  6a53				   draw_gameselect_display
      3  6a53		       a9 00		      lda	#0
      4  6a55		       85 1b		      sta	GRP0
      5  6a57		       85 1c		      sta	GRP1
      6  6a59
      7  6a59		       a0 04		      ldy	#4
      8  6a5b		       84 91		      sty	aux2
      9  6a5d
     10  6a5d		       ad 50 be 	      lda	bmp_gameselect_color
     11  6a60		       85 06		      sta	COLUP0
     12  6a62		       85 07		      sta	COLUP1
     13  6a64
     14  6a64							;change gamenumber to a BCD number and stick it in temp5
     15  6a64		       a5 e5		      lda	gamenumber
     16  6a66		       85 cd		      sta	temp3
     17  6a68		       a9 00		      lda	#0
     18  6a6a		       85 ce		      sta	temp4
     19  6a6c		       a2 08		      ldx	#8
     20  6a6e		       18		      clc
     21  6a6f		       f8		      sed
     22  6a70				   converttobcd
     23  6a70		       06 cd		      asl	temp3
     24  6a72		       a5 ce		      lda	temp4
     25  6a74		       65 ce		      adc	temp4
     26  6a76		       85 ce		      sta	temp4
     27  6a78		       ca		      dex
     28  6a79		       d0 f5		      bne	converttobcd
     29  6a7b		       d8		      cld
     30  6a7c
     31  6a7c		       a5 ce		      lda	temp4
     32  6a7e		       29 0f		      and	#$0f
     33  6a80		       85 cd		      sta	temp3
     34  6a82		       0a		      asl
     35  6a83		       0a		      asl
     36  6a84		       18		      clc
     37  6a85		       65 cd		      adc	temp3	; *5
     38  6a87		       18		      clc
     39  6a88		       69 65		      adc	#<(font_gameselect_img)
     40  6a8a		       85 b5		      sta	scorepointers+10
     41  6a8c
     42  6a8c		       a5 ce		      lda	temp4
     43  6a8e		       29 f0		      and	#$f0
     44  6a90		       4a		      lsr
     45  6a91		       4a		      lsr
     46  6a92		       85 cd		      sta	temp3
     47  6a94		       4a		      lsr
     48  6a95		       4a		      lsr
     49  6a96		       18		      clc
     50  6a97		       65 cd		      adc	temp3	; *5
     51  6a99		       18		      clc
     52  6a9a		       69 65		      adc	#<(font_gameselect_img)
     53  6a9c		       85 b3		      sta	scorepointers+8
     54  6a9e
     55  6a9e
     56  6a9e							;setup score pointers to point at my bitmap slices instead
     57  6a9e		       a9 51		      lda	#<(bmp_gameselect_CHAR0)
     58  6aa0		       85 ab		      sta	scorepointers+0
     59  6aa2		       a9 be		      lda	#>(bmp_gameselect_CHAR0)
     60  6aa4		       85 ac		      sta	scorepointers+1
     61  6aa6		       a9 56		      lda	#<(bmp_gameselect_CHAR1)
     62  6aa8		       85 ad		      sta	scorepointers+2
     63  6aaa		       a9 be		      lda	#>(bmp_gameselect_CHAR1)
     64  6aac		       85 ae		      sta	scorepointers+3
     65  6aae		       a9 5b		      lda	#<(bmp_gameselect_CHAR2)
     66  6ab0		       85 af		      sta	scorepointers+4
     67  6ab2		       a9 be		      lda	#>(bmp_gameselect_CHAR2)
     68  6ab4		       85 b0		      sta	scorepointers+5
     69  6ab6		       a9 60		      lda	#<(bmp_gameselect_CHAR3)
     70  6ab8		       85 b1		      sta	scorepointers+6
     71  6aba		       a9 be		      lda	#>(bmp_gameselect_CHAR3)
     72  6abc		       85 b2		      sta	scorepointers+7
     73  6abe
     74  6abe		       a9 be		      lda	#>(font_gameselect_img)
     75  6ac0		       85 b4		      sta	scorepointers+9
     76  6ac2
     77  6ac2		       a9 be		      lda	#>(font_gameselect_img)
     78  6ac4		       85 b6		      sta	scorepointers+11
     79  6ac6
     80  6ac6		       4c 5f b1 	      jmp	draw_bmp_48x1_X
------- FILE titlescreen/asm/titlescreen.asm
    185  6ac9					      endif		;mk_gameselect_on
    186  6ac9
    187  6ac9				   PFWAIT
    188  6ac9		       ad 84 02 	      lda	INTIM
    189  6acc		       d0 fb		      bne	PFWAIT
    190  6ace		       85 02		      sta	WSYNC
    191  6ad0
    192  6ad0				   OVERSCAN
    193  6ad0				  -	      ifnconst	overscan_time
    194  6ad0				  -	      lda	#34+128
    195  6ad0					      else
    196  6ad0		       a9 a0		      lda	#overscan_time+128-5
    197  6ad2					      endif
    198  6ad2		       8d 96 02 	      sta	TIM64T
    199  6ad5
    200  6ad5							;fix height variables we borrowed, so DPC doesn't crash on drawscreen...
    201  6ad5					      ifconst	player9height
    202  6ad5		       a0 08		      ldy	#8
    203  6ad7		       a9 00		      lda	#0
    204  6ad9		       85 a5		      sta	player0height
    205  6adb				   .playerheightfixloop
    206  6adb		       99 a6 00 	      sta	player1height,y
    207  6ade					      ifconst	_NUSIZ1
    208  6ade		       99 af 00 	      sta	_NUSIZ1,y
    209  6ae1					      endif
    210  6ae1		       88		      dey
    211  6ae2		       10 f7		      bpl	.playerheightfixloop
    212  6ae4					      endif
    213  6ae4
    214  6ae4		       a9 c2		      lda	#%11000010
    215  6ae6		       85 02		      sta	WSYNC
    216  6ae8		       85 01		      sta	VBLANK
      0  6aea					      RETURN
      1  6aea				  -	      ifnconst	bankswitch
      2  6aea				  -	      rts
      3  6aea					      else
      4  6aea		       4c e0 df 	      jmp	BS_return
      5  6aed					      endif
    218  6aed
    219  6aed					      ifconst	mk_48x1_1_on
------- FILE titlescreen/48x1_1_image.asm LEVEL 3 PASS 3
      0  6aed					      include	"titlescreen/48x1_1_image.asm"
      1  6aed
      2  6aed							;*** The height of the displayed data...
      3  6aed		       00 32	   bmp_48x1_1_window =	50
      4  6aed
      5  6aed							;*** The height of the bitmap data. This can be larger than
      6  6aed							;*** the displayed data height, if you're scrolling or animating
      7  6aed							;*** the data...
      8  6aed		       00 32	   bmp_48x1_1_height =	50
      9  6aed
     10  6aed				  -	      ifnconst	bmp_48x1_1_PF1
     11  6aed				  -bmp_48x1_1_PF1
     12  6aed					      endif
     13  6aed		       00		      BYTE.b	%00000000
     14  6aee				  -	      ifnconst	bmp_48x1_1_PF2
     15  6aee				  -bmp_48x1_1_PF2
     16  6aee					      endif
     17  6aee		       00		      BYTE.b	%00000000
     18  6aef				  -	      ifnconst	bmp_48x1_1_background
     19  6aef				  -bmp_48x1_1_background
     20  6aef					      endif
     21  6aef		       c2		      BYTE.b	$c2
     22  6af0
     23  6af0				  -	      ifnconst	bmp_48x1_1_color
     24  6af0				  -bmp_48x1_1_color
     25  6af0					      endif
     26  6af0							; *** this is the bitmap color. If you want to change it in a
     27  6af0							; *** variable instead, dim one in bB called "bmp_48x1_1_color"
     28  6af0		       c6		      .byte.b	$C6
     29  6af1
     30  6af1
     31  6af1					      if	>. != >[.+bmp_48x1_1_height]
     32  6b00		       00 00 00 00*	      align	256
     33  6b00					      endif
     34  6b00
     35  6b00				   bmp_48x1_1_00
     36  6b00							; *** replace this block with your bimap_00 data block...
     37  6b00		       00		      BYTE.b	%00000000
     38  6b01		       00		      BYTE.b	%00000000
     39  6b02		       01		      BYTE.b	%00000001
     40  6b03		       03		      BYTE.b	%00000011
     41  6b04		       07		      BYTE.b	%00000111
     42  6b05		       07		      BYTE.b	%00000111
     43  6b06		       0f		      BYTE.b	%00001111
     44  6b07		       1f		      BYTE.b	%00011111
     45  6b08		       1f		      BYTE.b	%00011111
     46  6b09		       1f		      BYTE.b	%00011111
     47  6b0a		       3f		      BYTE.b	%00111111
     48  6b0b		       3f		      BYTE.b	%00111111
     49  6b0c		       3f		      BYTE.b	%00111111
     50  6b0d		       3f		      BYTE.b	%00111111
     51  6b0e		       7f		      BYTE.b	%01111111
     52  6b0f		       7f		      BYTE.b	%01111111
     53  6b10		       7f		      BYTE.b	%01111111
     54  6b11		       7f		      BYTE.b	%01111111
     55  6b12		       7f		      BYTE.b	%01111111
     56  6b13		       7f		      BYTE.b	%01111111
     57  6b14		       7f		      BYTE.b	%01111111
     58  6b15		       7f		      BYTE.b	%01111111
     59  6b16		       7f		      BYTE.b	%01111111
     60  6b17		       7f		      BYTE.b	%01111111
     61  6b18		       7f		      BYTE.b	%01111111
     62  6b19		       7f		      BYTE.b	%01111111
     63  6b1a		       7f		      BYTE.b	%01111111
     64  6b1b		       3f		      BYTE.b	%00111111
     65  6b1c		       3f		      BYTE.b	%00111111
     66  6b1d		       3f		      BYTE.b	%00111111
     67  6b1e		       3f		      BYTE.b	%00111111
     68  6b1f		       1f		      BYTE.b	%00011111
     69  6b20		       1f		      BYTE.b	%00011111
     70  6b21		       1f		      BYTE.b	%00011111
     71  6b22		       0f		      BYTE.b	%00001111
     72  6b23		       0f		      BYTE.b	%00001111
     73  6b24		       07		      BYTE.b	%00000111
     74  6b25		       03		      BYTE.b	%00000011
     75  6b26		       01		      BYTE.b	%00000001
     76  6b27		       00		      BYTE.b	%00000000
     77  6b28		       00		      BYTE.b	%00000000
     78  6b29		       00		      BYTE.b	%00000000
     79  6b2a		       00		      BYTE.b	%00000000
     80  6b2b		       00		      BYTE.b	%00000000
     81  6b2c		       00		      BYTE.b	%00000000
     82  6b2d		       00		      BYTE.b	%00000000
     83  6b2e		       00		      BYTE.b	%00000000
     84  6b2f		       00		      BYTE.b	%00000000
     85  6b30		       00		      BYTE.b	%00000000
     86  6b31		       00		      BYTE.b	%00000000
     87  6b32
     88  6b32
     89  6b32
     90  6b32				  -	      if	>. != >[.+bmp_48x1_1_height]
     91  6b32				  -	      align	256
     92  6b32					      endif
     93  6b32
     94  6b32
     95  6b32				   bmp_48x1_1_01
     96  6b32							; *** replace this block with your bimap_01 data block...
     97  6b32		       00		      BYTE.b	%00000000
     98  6b33		       20		      BYTE.b	%00100000
     99  6b34		       f8		      BYTE.b	%11111000
    100  6b35		       fc		      BYTE.b	%11111100
    101  6b36		       fe		      BYTE.b	%11111110
    102  6b37		       ff		      BYTE.b	%11111111
    103  6b38		       ff		      BYTE.b	%11111111
    104  6b39		       ff		      BYTE.b	%11111111
    105  6b3a		       ff		      BYTE.b	%11111111
    106  6b3b		       ff		      BYTE.b	%11111111
    107  6b3c		       ff		      BYTE.b	%11111111
    108  6b3d		       ff		      BYTE.b	%11111111
    109  6b3e		       ff		      BYTE.b	%11111111
    110  6b3f		       ff		      BYTE.b	%11111111
    111  6b40		       ff		      BYTE.b	%11111111
    112  6b41		       ff		      BYTE.b	%11111111
    113  6b42		       ff		      BYTE.b	%11111111
    114  6b43		       ff		      BYTE.b	%11111111
    115  6b44		       ff		      BYTE.b	%11111111
    116  6b45		       ff		      BYTE.b	%11111111
    117  6b46		       ff		      BYTE.b	%11111111
    118  6b47		       ff		      BYTE.b	%11111111
    119  6b48		       ff		      BYTE.b	%11111111
    120  6b49		       ff		      BYTE.b	%11111111
    121  6b4a		       ff		      BYTE.b	%11111111
    122  6b4b		       ff		      BYTE.b	%11111111
    123  6b4c		       ff		      BYTE.b	%11111111
    124  6b4d		       ff		      BYTE.b	%11111111
    125  6b4e		       ff		      BYTE.b	%11111111
    126  6b4f		       ff		      BYTE.b	%11111111
    127  6b50		       ff		      BYTE.b	%11111111
    128  6b51		       ff		      BYTE.b	%11111111
    129  6b52		       ff		      BYTE.b	%11111111
    130  6b53		       ff		      BYTE.b	%11111111
    131  6b54		       ff		      BYTE.b	%11111111
    132  6b55		       ff		      BYTE.b	%11111111
    133  6b56		       fe		      BYTE.b	%11111110
    134  6b57		       f8		      BYTE.b	%11111000
    135  6b58		       68		      BYTE.b	%01101000
    136  6b59		       60		      BYTE.b	%01100000
    137  6b5a		       00		      BYTE.b	%00000000
    138  6b5b		       00		      BYTE.b	%00000000
    139  6b5c		       00		      BYTE.b	%00000000
    140  6b5d		       00		      BYTE.b	%00000000
    141  6b5e		       00		      BYTE.b	%00000000
    142  6b5f		       00		      BYTE.b	%00000000
    143  6b60		       00		      BYTE.b	%00000000
    144  6b61		       00		      BYTE.b	%00000000
    145  6b62		       00		      BYTE.b	%00000000
    146  6b63		       00		      BYTE.b	%00000000
    147  6b64
    148  6b64
    149  6b64
    150  6b64				  -	      if	>. != >[.+bmp_48x1_1_height]
    151  6b64				  -	      align	256
    152  6b64					      endif
    153  6b64
    154  6b64
    155  6b64				   bmp_48x1_1_02
    156  6b64							; *** replace this block with your bimap_02 data block...
    157  6b64		       00		      BYTE.b	%00000000
    158  6b65		       00		      BYTE.b	%00000000
    159  6b66		       00		      BYTE.b	%00000000
    160  6b67		       00		      BYTE.b	%00000000
    161  6b68		       00		      BYTE.b	%00000000
    162  6b69		       00		      BYTE.b	%00000000
    163  6b6a		       00		      BYTE.b	%00000000
    164  6b6b		       80		      BYTE.b	%10000000
    165  6b6c		       80		      BYTE.b	%10000000
    166  6b6d		       c0		      BYTE.b	%11000000
    167  6b6e		       c0		      BYTE.b	%11000000
    168  6b6f		       c0		      BYTE.b	%11000000
    169  6b70		       c0		      BYTE.b	%11000000
    170  6b71		       e0		      BYTE.b	%11100000
    171  6b72		       e0		      BYTE.b	%11100000
    172  6b73		       e0		      BYTE.b	%11100000
    173  6b74		       e0		      BYTE.b	%11100000
    174  6b75		       e0		      BYTE.b	%11100000
    175  6b76		       ff		      BYTE.b	%11111111
    176  6b77		       ff		      BYTE.b	%11111111
    177  6b78		       ff		      BYTE.b	%11111111
    178  6b79		       e0		      BYTE.b	%11100000
    179  6b7a		       e0		      BYTE.b	%11100000
    180  6b7b		       e0		      BYTE.b	%11100000
    181  6b7c		       e0		      BYTE.b	%11100000
    182  6b7d		       e0		      BYTE.b	%11100000
    183  6b7e		       e0		      BYTE.b	%11100000
    184  6b7f		       e0		      BYTE.b	%11100000
    185  6b80		       c0		      BYTE.b	%11000000
    186  6b81		       c0		      BYTE.b	%11000000
    187  6b82		       c0		      BYTE.b	%11000000
    188  6b83		       e0		      BYTE.b	%11100000
    189  6b84		       f0		      BYTE.b	%11110000
    190  6b85		       b8		      BYTE.b	%10111000
    191  6b86		       1c		      BYTE.b	%00011100
    192  6b87		       0e		      BYTE.b	%00001110
    193  6b88		       07		      BYTE.b	%00000111
    194  6b89		       03		      BYTE.b	%00000011
    195  6b8a		       01		      BYTE.b	%00000001
    196  6b8b		       01		      BYTE.b	%00000001
    197  6b8c		       01		      BYTE.b	%00000001
    198  6b8d		       01		      BYTE.b	%00000001
    199  6b8e		       01		      BYTE.b	%00000001
    200  6b8f		       00		      BYTE.b	%00000000
    201  6b90		       00		      BYTE.b	%00000000
    202  6b91		       00		      BYTE.b	%00000000
    203  6b92		       00		      BYTE.b	%00000000
    204  6b93		       00		      BYTE.b	%00000000
    205  6b94		       00		      BYTE.b	%00000000
    206  6b95		       00		      BYTE.b	%00000000
    207  6b96
    208  6b96
    209  6b96
    210  6b96				  -	      if	>. != >[.+bmp_48x1_1_height]
    211  6b96				  -	      align	256
    212  6b96					      endif
    213  6b96
    214  6b96
    215  6b96				   bmp_48x1_1_03
    216  6b96							; *** replace this block with your bimap_03 data block...
    217  6b96		       00		      BYTE.b	%00000000
    218  6b97		       00		      BYTE.b	%00000000
    219  6b98		       00		      BYTE.b	%00000000
    220  6b99		       00		      BYTE.b	%00000000
    221  6b9a		       00		      BYTE.b	%00000000
    222  6b9b		       00		      BYTE.b	%00000000
    223  6b9c		       00		      BYTE.b	%00000000
    224  6b9d		       00		      BYTE.b	%00000000
    225  6b9e		       00		      BYTE.b	%00000000
    226  6b9f		       00		      BYTE.b	%00000000
    227  6ba0		       00		      BYTE.b	%00000000
    228  6ba1		       00		      BYTE.b	%00000000
    229  6ba2		       00		      BYTE.b	%00000000
    230  6ba3		       00		      BYTE.b	%00000000
    231  6ba4		       00		      BYTE.b	%00000000
    232  6ba5		       00		      BYTE.b	%00000000
    233  6ba6		       00		      BYTE.b	%00000000
    234  6ba7		       00		      BYTE.b	%00000000
    235  6ba8		       ff		      BYTE.b	%11111111
    236  6ba9		       ff		      BYTE.b	%11111111
    237  6baa		       ff		      BYTE.b	%11111111
    238  6bab		       00		      BYTE.b	%00000000
    239  6bac		       00		      BYTE.b	%00000000
    240  6bad		       00		      BYTE.b	%00000000
    241  6bae		       00		      BYTE.b	%00000000
    242  6baf		       00		      BYTE.b	%00000000
    243  6bb0		       00		      BYTE.b	%00000000
    244  6bb1		       00		      BYTE.b	%00000000
    245  6bb2		       00		      BYTE.b	%00000000
    246  6bb3		       00		      BYTE.b	%00000000
    247  6bb4		       00		      BYTE.b	%00000000
    248  6bb5		       00		      BYTE.b	%00000000
    249  6bb6		       00		      BYTE.b	%00000000
    250  6bb7		       20		      BYTE.b	%00100000
    251  6bb8		       70		      BYTE.b	%01110000
    252  6bb9		       f8		      BYTE.b	%11111000
    253  6bba		       f8		      BYTE.b	%11111000
    254  6bbb		       fc		      BYTE.b	%11111100
    255  6bbc		       fc		      BYTE.b	%11111100
    256  6bbd		       fc		      BYTE.b	%11111100
    257  6bbe		       fc		      BYTE.b	%11111100
    258  6bbf		       fc		      BYTE.b	%11111100
    259  6bc0		       fc		      BYTE.b	%11111100
    260  6bc1		       fc		      BYTE.b	%11111100
    261  6bc2		       f8		      BYTE.b	%11111000
    262  6bc3		       f8		      BYTE.b	%11111000
    263  6bc4		       70		      BYTE.b	%01110000
    264  6bc5		       00		      BYTE.b	%00000000
    265  6bc6		       00		      BYTE.b	%00000000
    266  6bc7		       00		      BYTE.b	%00000000
    267  6bc8
    268  6bc8
    269  6bc8
    270  6bc8				  -	      if	>. != >[.+bmp_48x1_1_height]
    271  6bc8				  -	      align	256
    272  6bc8					      endif
    273  6bc8
    274  6bc8
    275  6bc8				   bmp_48x1_1_04
    276  6bc8							; *** replace this block with your bimap_04 data block...
    277  6bc8		       00		      BYTE.b	%00000000
    278  6bc9		       00		      BYTE.b	%00000000
    279  6bca		       00		      BYTE.b	%00000000
    280  6bcb		       00		      BYTE.b	%00000000
    281  6bcc		       00		      BYTE.b	%00000000
    282  6bcd		       00		      BYTE.b	%00000000
    283  6bce		       03		      BYTE.b	%00000011
    284  6bcf		       07		      BYTE.b	%00000111
    285  6bd0		       0f		      BYTE.b	%00001111
    286  6bd1		       1f		      BYTE.b	%00011111
    287  6bd2		       1f		      BYTE.b	%00011111
    288  6bd3		       3f		      BYTE.b	%00111111
    289  6bd4		       3f		      BYTE.b	%00111111
    290  6bd5		       3f		      BYTE.b	%00111111
    291  6bd6		       3f		      BYTE.b	%00111111
    292  6bd7		       3f		      BYTE.b	%00111111
    293  6bd8		       7f		      BYTE.b	%01111111
    294  6bd9		       7f		      BYTE.b	%01111111
    295  6bda		       ff		      BYTE.b	%11111111
    296  6bdb		       ff		      BYTE.b	%11111111
    297  6bdc		       ff		      BYTE.b	%11111111
    298  6bdd		       7f		      BYTE.b	%01111111
    299  6bde		       7f		      BYTE.b	%01111111
    300  6bdf		       7f		      BYTE.b	%01111111
    301  6be0		       3f		      BYTE.b	%00111111
    302  6be1		       3f		      BYTE.b	%00111111
    303  6be2		       3f		      BYTE.b	%00111111
    304  6be3		       3f		      BYTE.b	%00111111
    305  6be4		       1f		      BYTE.b	%00011111
    306  6be5		       1f		      BYTE.b	%00011111
    307  6be6		       0f		      BYTE.b	%00001111
    308  6be7		       0f		      BYTE.b	%00001111
    309  6be8		       07		      BYTE.b	%00000111
    310  6be9		       03		      BYTE.b	%00000011
    311  6bea		       00		      BYTE.b	%00000000
    312  6beb		       00		      BYTE.b	%00000000
    313  6bec		       00		      BYTE.b	%00000000
    314  6bed		       00		      BYTE.b	%00000000
    315  6bee		       00		      BYTE.b	%00000000
    316  6bef		       00		      BYTE.b	%00000000
    317  6bf0		       00		      BYTE.b	%00000000
    318  6bf1		       00		      BYTE.b	%00000000
    319  6bf2		       00		      BYTE.b	%00000000
    320  6bf3		       00		      BYTE.b	%00000000
    321  6bf4		       00		      BYTE.b	%00000000
    322  6bf5		       00		      BYTE.b	%00000000
    323  6bf6		       00		      BYTE.b	%00000000
    324  6bf7		       00		      BYTE.b	%00000000
    325  6bf8		       00		      BYTE.b	%00000000
    326  6bf9		       00		      BYTE.b	%00000000
    327  6bfa
    328  6bfa
    329  6bfa
    330  6bfa					      if	>. != >[.+bmp_48x1_1_height]
    331  6c00		       00 00 00 00*	      align	256
    332  6c00					      endif
    333  6c00
    334  6c00
    335  6c00				   bmp_48x1_1_05
    336  6c00							; *** replace this block with your bimap_05 data block...
    337  6c00		       00		      BYTE.b	%00000000
    338  6c01		       00		      BYTE.b	%00000000
    339  6c02		       00		      BYTE.b	%00000000
    340  6c03		       00		      BYTE.b	%00000000
    341  6c04		       00		      BYTE.b	%00000000
    342  6c05		       00		      BYTE.b	%00000000
    343  6c06		       e0		      BYTE.b	%11100000
    344  6c07		       f0		      BYTE.b	%11110000
    345  6c08		       f0		      BYTE.b	%11110000
    346  6c09		       f8		      BYTE.b	%11111000
    347  6c0a		       f8		      BYTE.b	%11111000
    348  6c0b		       fc		      BYTE.b	%11111100
    349  6c0c		       fc		      BYTE.b	%11111100
    350  6c0d		       fc		      BYTE.b	%11111100
    351  6c0e		       fe		      BYTE.b	%11111110
    352  6c0f		       fe		      BYTE.b	%11111110
    353  6c10		       fe		      BYTE.b	%11111110
    354  6c11		       fe		      BYTE.b	%11111110
    355  6c12		       fe		      BYTE.b	%11111110
    356  6c13		       fe		      BYTE.b	%11111110
    357  6c14		       fe		      BYTE.b	%11111110
    358  6c15		       fe		      BYTE.b	%11111110
    359  6c16		       fe		      BYTE.b	%11111110
    360  6c17		       fe		      BYTE.b	%11111110
    361  6c18		       fe		      BYTE.b	%11111110
    362  6c19		       fc		      BYTE.b	%11111100
    363  6c1a		       fc		      BYTE.b	%11111100
    364  6c1b		       fc		      BYTE.b	%11111100
    365  6c1c		       fc		      BYTE.b	%11111100
    366  6c1d		       f8		      BYTE.b	%11111000
    367  6c1e		       f8		      BYTE.b	%11111000
    368  6c1f		       f0		      BYTE.b	%11110000
    369  6c20		       e0		      BYTE.b	%11100000
    370  6c21		       c0		      BYTE.b	%11000000
    371  6c22		       00		      BYTE.b	%00000000
    372  6c23		       00		      BYTE.b	%00000000
    373  6c24		       00		      BYTE.b	%00000000
    374  6c25		       00		      BYTE.b	%00000000
    375  6c26		       00		      BYTE.b	%00000000
    376  6c27		       00		      BYTE.b	%00000000
    377  6c28		       00		      BYTE.b	%00000000
    378  6c29		       00		      BYTE.b	%00000000
    379  6c2a		       00		      BYTE.b	%00000000
    380  6c2b		       00		      BYTE.b	%00000000
    381  6c2c		       00		      BYTE.b	%00000000
    382  6c2d		       00		      BYTE.b	%00000000
    383  6c2e		       00		      BYTE.b	%00000000
    384  6c2f		       00		      BYTE.b	%00000000
    385  6c30		       00		      BYTE.b	%00000000
    386  6c31		       00		      BYTE.b	%00000000
    387  6c32
    388  6c32
------- FILE titlescreen/asm/titlescreen.asm
    221  6c32					      endif
    222  6c32				  -	      ifconst	mk_48x1_2_on
    223  6c32				  -	      include	"titlescreen/48x1_2_image.asm"
    224  6c32					      endif
    225  6c32				  -	      ifconst	mk_48x1_3_on
    226  6c32				  -	      include	"titlescreen/48x1_3_image.asm"
    227  6c32					      endif
    228  6c32				  -	      ifconst	mk_48x1_4_on
    229  6c32				  -	      include	"titlescreen/48x1_4_image.asm"
    230  6c32					      endif
    231  6c32				  -	      ifconst	mk_48x1_5_on
    232  6c32				  -	      include	"titlescreen/48x1_5_image.asm"
    233  6c32					      endif
    234  6c32				  -	      ifconst	mk_48x1_6_on
    235  6c32				  -	      include	"titlescreen/48x1_6_image.asm"
    236  6c32					      endif
    237  6c32				  -	      ifconst	mk_48x1_7_on
    238  6c32				  -	      include	"titlescreen/48x1_7_image.asm"
    239  6c32					      endif
    240  6c32				  -	      ifconst	mk_48x1_8_on
    241  6c32				  -	      include	"titlescreen/48x1_8_image.asm"
    242  6c32					      endif
    243  6c32
    244  6c32
    245  6c32				  -	      ifconst	mk_48x2_1_on
    246  6c32				  -	      include	"titlescreen/48x2_1_image.asm"
    247  6c32					      endif
    248  6c32				  -	      ifconst	mk_48x2_2_on
    249  6c32				  -	      include	"titlescreen/48x2_2_image.asm"
    250  6c32					      endif
    251  6c32				  -	      ifconst	mk_48x2_3_on
    252  6c32				  -	      include	"titlescreen/48x2_3_image.asm"
    253  6c32					      endif
    254  6c32				  -	      ifconst	mk_48x2_4_on
    255  6c32				  -	      include	"titlescreen/48x2_4_image.asm"
    256  6c32					      endif
    257  6c32				  -	      ifconst	mk_48x2_5_on
    258  6c32				  -	      include	"titlescreen/48x2_5_image.asm"
    259  6c32					      endif
    260  6c32				  -	      ifconst	mk_48x2_6_on
    261  6c32				  -	      include	"titlescreen/48x2_6_image.asm"
    262  6c32					      endif
    263  6c32				  -	      ifconst	mk_48x2_7_on
    264  6c32				  -	      include	"titlescreen/48x2_7_image.asm"
    265  6c32					      endif
    266  6c32
    267  6c32				  -	      ifconst	mk_48x2_8_on
    268  6c32				  -	      include	"titlescreen/48x2_8_image.asm"
    269  6c32					      endif
    270  6c32
    271  6c32
    272  6c32					      ifconst	mk_96x2_1_on
------- FILE titlescreen/96x2_1_image.asm LEVEL 3 PASS 3
      0  6c32					      include	"titlescreen/96x2_1_image.asm"
      1  6c32
      2  6c32
      3  6c32							;*** The height of the displayed data...
      4  6c32		       00 14	   bmp_96x2_1_window =	20
      5  6c32
      6  6c32							;*** The height of the bitmap data. This can be larger than
      7  6c32							;*** the displayed data height, if you're scrolling or animating
      8  6c32							;*** the data...
      9  6c32		       00 14	   bmp_96x2_1_height =	20
     10  6c32
     11  6c32
     12  6c32				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     13  6c32				  -	      align	256
     14  6c32					      endif
     15  6c32		       00		      BYTE.b	$00	; leave this here!
     16  6c33
     17  6c33
     18  6c33							;*** The color of each line in the bitmap, in reverse order...
     19  6c33				   bmp_96x2_1_colors
     20  6c33		       0e		      .byte.b	$0E
     21  6c34		       40		      .byte.b	$40
     22  6c35		       94		      .byte.b	$94
     23  6c36		       94		      .byte.b	$94
     24  6c37		       94		      .byte.b	$94
     25  6c38		       94		      .byte.b	$94
     26  6c39		       94		      .byte.b	$94
     27  6c3a		       94		      .byte.b	$94
     28  6c3b		       94		      .byte.b	$94
     29  6c3c		       94		      .byte.b	$94
     30  6c3d		       94		      .byte.b	$94
     31  6c3e		       94		      .byte.b	$94
     32  6c3f		       94		      .byte.b	$94
     33  6c40		       94		      .byte.b	$94
     34  6c41		       94		      .byte.b	$94
     35  6c42		       94		      .byte.b	$94
     36  6c43		       94		      .byte.b	$94
     37  6c44		       94		      .byte.b	$94
     38  6c45		       94		      .byte.b	$94
     39  6c46		       94		      .byte.b	$94
     40  6c47
     41  6c47
     42  6c47				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     43  6c47				  -	      align	256
     44  6c47					      endif
     45  6c47
     46  6c47
     47  6c47				   bmp_96x2_1_00
     48  6c47							; *** replace this block with your bimap_00 data block...
     49  6c47		       00		      BYTE.b	%00000000
     50  6c48		       00		      BYTE.b	%00000000
     51  6c49		       00		      BYTE.b	%00000000
     52  6c4a		       00		      BYTE.b	%00000000
     53  6c4b		       00		      BYTE.b	%00000000
     54  6c4c		       00		      BYTE.b	%00000000
     55  6c4d		       00		      BYTE.b	%00000000
     56  6c4e		       00		      BYTE.b	%00000000
     57  6c4f		       00		      BYTE.b	%00000000
     58  6c50		       00		      BYTE.b	%00000000
     59  6c51		       00		      BYTE.b	%00000000
     60  6c52		       00		      BYTE.b	%00000000
     61  6c53		       00		      BYTE.b	%00000000
     62  6c54		       00		      BYTE.b	%00000000
     63  6c55		       00		      BYTE.b	%00000000
     64  6c56		       00		      BYTE.b	%00000000
     65  6c57		       00		      BYTE.b	%00000000
     66  6c58		       00		      BYTE.b	%00000000
     67  6c59		       00		      BYTE.b	%00000000
     68  6c5a		       00		      BYTE.b	%00000000
     69  6c5b
     70  6c5b
     71  6c5b
     72  6c5b				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     73  6c5b				  -	      align	256
     74  6c5b					      endif
     75  6c5b
     76  6c5b
     77  6c5b				   bmp_96x2_1_01
     78  6c5b							; *** replace this block with your bimap_01 data block...
     79  6c5b		       00		      BYTE.b	%00000000
     80  6c5c		       00		      BYTE.b	%00000000
     81  6c5d		       00		      BYTE.b	%00000000
     82  6c5e		       0d		      BYTE.b	%00001101
     83  6c5f		       1d		      BYTE.b	%00011101
     84  6c60		       1d		      BYTE.b	%00011101
     85  6c61		       1c		      BYTE.b	%00011100
     86  6c62		       1c		      BYTE.b	%00011100
     87  6c63		       1c		      BYTE.b	%00011100
     88  6c64		       1d		      BYTE.b	%00011101
     89  6c65		       1d		      BYTE.b	%00011101
     90  6c66		       1c		      BYTE.b	%00011100
     91  6c67		       1c		      BYTE.b	%00011100
     92  6c68		       1c		      BYTE.b	%00011100
     93  6c69		       0f		      BYTE.b	%00001111
     94  6c6a		       0f		      BYTE.b	%00001111
     95  6c6b		       03		      BYTE.b	%00000011
     96  6c6c		       00		      BYTE.b	%00000000
     97  6c6d		       00		      BYTE.b	%00000000
     98  6c6e		       00		      BYTE.b	%00000000
     99  6c6f
    100  6c6f
    101  6c6f
    102  6c6f				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    103  6c6f				  -	      align	256
    104  6c6f					      endif
    105  6c6f
    106  6c6f
    107  6c6f				   bmp_96x2_1_02
    108  6c6f							; *** replace this block with your bimap_02 data block...
    109  6c6f		       00		      BYTE.b	%00000000
    110  6c70		       00		      BYTE.b	%00000000
    111  6c71		       00		      BYTE.b	%00000000
    112  6c72		       e1		      BYTE.b	%11100001
    113  6c73		       f1		      BYTE.b	%11110001
    114  6c74		       f9		      BYTE.b	%11111001
    115  6c75		       39		      BYTE.b	%00111001
    116  6c76		       39		      BYTE.b	%00111001
    117  6c77		       39		      BYTE.b	%00111001
    118  6c78		       f1		      BYTE.b	%11110001
    119  6c79		       e1		      BYTE.b	%11100001
    120  6c7a		       71		      BYTE.b	%01110001
    121  6c7b		       71		      BYTE.b	%01110001
    122  6c7c		       71		      BYTE.b	%01110001
    123  6c7d		       f1		      BYTE.b	%11110001
    124  6c7e		       e0		      BYTE.b	%11100000
    125  6c7f		       c0		      BYTE.b	%11000000
    126  6c80		       00		      BYTE.b	%00000000
    127  6c81		       00		      BYTE.b	%00000000
    128  6c82		       00		      BYTE.b	%00000000
    129  6c83
    130  6c83
    131  6c83
    132  6c83				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    133  6c83				  -	      align	256
    134  6c83					      endif
    135  6c83
    136  6c83
    137  6c83				   bmp_96x2_1_03
    138  6c83							; *** replace this block with your bimap_03 data block...
    139  6c83		       00		      BYTE.b	%00000000
    140  6c84		       00		      BYTE.b	%00000000
    141  6c85		       00		      BYTE.b	%00000000
    142  6c86		       83		      BYTE.b	%10000011
    143  6c87		       83		      BYTE.b	%10000011
    144  6c88		       83		      BYTE.b	%10000011
    145  6c89		       83		      BYTE.b	%10000011
    146  6c8a		       83		      BYTE.b	%10000011
    147  6c8b		       8f		      BYTE.b	%10001111
    148  6c8c		       9e		      BYTE.b	%10011110
    149  6c8d		       de		      BYTE.b	%11011110
    150  6c8e		       c7		      BYTE.b	%11000111
    151  6c8f		       c7		      BYTE.b	%11000111
    152  6c90		       c7		      BYTE.b	%11000111
    153  6c91		       ff		      BYTE.b	%11111111
    154  6c92		       fe		      BYTE.b	%11111110
    155  6c93		       38		      BYTE.b	%00111000
    156  6c94		       00		      BYTE.b	%00000000
    157  6c95		       00		      BYTE.b	%00000000
    158  6c96		       00		      BYTE.b	%00000000
    159  6c97
    160  6c97
    161  6c97
    162  6c97				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    163  6c97				  -	      align	256
    164  6c97					      endif
    165  6c97
    166  6c97
    167  6c97				   bmp_96x2_1_04
    168  6c97							; *** replace this block with your bimap_04 data block...
    169  6c97		       00		      BYTE.b	%00000000
    170  6c98		       00		      BYTE.b	%00000000
    171  6c99		       00		      BYTE.b	%00000000
    172  6c9a		       18		      BYTE.b	%00011000
    173  6c9b		       1c		      BYTE.b	%00011100
    174  6c9c		       1c		      BYTE.b	%00011100
    175  6c9d		       1c		      BYTE.b	%00011100
    176  6c9e		       1c		      BYTE.b	%00011100
    177  6c9f		       1d		      BYTE.b	%00011101
    178  6ca0		       1d		      BYTE.b	%00011101
    179  6ca1		       1c		      BYTE.b	%00011100
    180  6ca2		       1c		      BYTE.b	%00011100
    181  6ca3		       1c		      BYTE.b	%00011100
    182  6ca4		       1c		      BYTE.b	%00011100
    183  6ca5		       1f		      BYTE.b	%00011111
    184  6ca6		       0f		      BYTE.b	%00001111
    185  6ca7		       07		      BYTE.b	%00000111
    186  6ca8		       00		      BYTE.b	%00000000
    187  6ca9		       00		      BYTE.b	%00000000
    188  6caa		       00		      BYTE.b	%00000000
    189  6cab
    190  6cab
    191  6cab
    192  6cab				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    193  6cab				  -	      align	256
    194  6cab					      endif
    195  6cab
    196  6cab
    197  6cab				   bmp_96x2_1_05
    198  6cab							; *** replace this block with your bimap_05 data block...
    199  6cab		       00		      BYTE.b	%00000000
    200  6cac		       00		      BYTE.b	%00000000
    201  6cad		       00		      BYTE.b	%00000000
    202  6cae		       38		      BYTE.b	%00111000
    203  6caf		       38		      BYTE.b	%00111000
    204  6cb0		       38		      BYTE.b	%00111000
    205  6cb1		       39		      BYTE.b	%00111001
    206  6cb2		       39		      BYTE.b	%00111001
    207  6cb3		       f9		      BYTE.b	%11111001
    208  6cb4		       f9		      BYTE.b	%11111001
    209  6cb5		       39		      BYTE.b	%00111001
    210  6cb6		       39		      BYTE.b	%00111001
    211  6cb7		       39		      BYTE.b	%00111001
    212  6cb8		       39		      BYTE.b	%00111001
    213  6cb9		       f9		      BYTE.b	%11111001
    214  6cba		       f1		      BYTE.b	%11110001
    215  6cbb		       c1		      BYTE.b	%11000001
    216  6cbc		       00		      BYTE.b	%00000000
    217  6cbd		       00		      BYTE.b	%00000000
    218  6cbe		       00		      BYTE.b	%00000000
    219  6cbf
    220  6cbf
    221  6cbf
    222  6cbf				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    223  6cbf				  -	      align	256
    224  6cbf					      endif
    225  6cbf
    226  6cbf
    227  6cbf				   bmp_96x2_1_06
    228  6cbf							; *** replace this block with your bimap_06 data block...
    229  6cbf		       00		      BYTE.b	%00000000
    230  6cc0		       00		      BYTE.b	%00000000
    231  6cc1		       00		      BYTE.b	%00000000
    232  6cc2		       38		      BYTE.b	%00111000
    233  6cc3		       ff		      BYTE.b	%11111111
    234  6cc4		       ff		      BYTE.b	%11111111
    235  6cc5		       c3		      BYTE.b	%11000011
    236  6cc6		       c3		      BYTE.b	%11000011
    237  6cc7		       c3		      BYTE.b	%11000011
    238  6cc8		       c3		      BYTE.b	%11000011
    239  6cc9		       c3		      BYTE.b	%11000011
    240  6cca		       c3		      BYTE.b	%11000011
    241  6ccb		       c3		      BYTE.b	%11000011
    242  6ccc		       c3		      BYTE.b	%11000011
    243  6ccd		       c3		      BYTE.b	%11000011
    244  6cce		       c3		      BYTE.b	%11000011
    245  6ccf		       c3		      BYTE.b	%11000011
    246  6cd0		       00		      BYTE.b	%00000000
    247  6cd1		       00		      BYTE.b	%00000000
    248  6cd2		       00		      BYTE.b	%00000000
    249  6cd3
    250  6cd3
    251  6cd3
    252  6cd3				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    253  6cd3				  -	      align	256
    254  6cd3					      endif
    255  6cd3
    256  6cd3
    257  6cd3				   bmp_96x2_1_07
    258  6cd3							; *** replace this block with your bimap_07 data block...
    259  6cd3		       00		      BYTE.b	%00000000
    260  6cd4		       00		      BYTE.b	%00000000
    261  6cd5		       00		      BYTE.b	%00000000
    262  6cd6		       70		      BYTE.b	%01110000
    263  6cd7		       fc		      BYTE.b	%11111100
    264  6cd8		       fe		      BYTE.b	%11111110
    265  6cd9		       8e		      BYTE.b	%10001110
    266  6cda		       8e		      BYTE.b	%10001110
    267  6cdb		       8e		      BYTE.b	%10001110
    268  6cdc		       8e		      BYTE.b	%10001110
    269  6cdd		       8e		      BYTE.b	%10001110
    270  6cde		       8e		      BYTE.b	%10001110
    271  6cdf		       8e		      BYTE.b	%10001110
    272  6ce0		       8e		      BYTE.b	%10001110
    273  6ce1		       8e		      BYTE.b	%10001110
    274  6ce2		       8e		      BYTE.b	%10001110
    275  6ce3		       8e		      BYTE.b	%10001110
    276  6ce4		       00		      BYTE.b	%00000000
    277  6ce5		       00		      BYTE.b	%00000000
    278  6ce6		       00		      BYTE.b	%00000000
    279  6ce7
    280  6ce7
    281  6ce7
    282  6ce7				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    283  6ce7				  -	      align	256
    284  6ce7					      endif
    285  6ce7
    286  6ce7
    287  6ce7				   bmp_96x2_1_08
    288  6ce7							; *** replace this block with your bimap_08 data block...
    289  6ce7		       00		      BYTE.b	%00000000
    290  6ce8		       00		      BYTE.b	%00000000
    291  6ce9		       00		      BYTE.b	%00000000
    292  6cea		       77		      BYTE.b	%01110111
    293  6ceb		       77		      BYTE.b	%01110111
    294  6cec		       77		      BYTE.b	%01110111
    295  6ced		       70		      BYTE.b	%01110000
    296  6cee		       70		      BYTE.b	%01110000
    297  6cef		       70		      BYTE.b	%01110000
    298  6cf0		       70		      BYTE.b	%01110000
    299  6cf1		       70		      BYTE.b	%01110000
    300  6cf2		       70		      BYTE.b	%01110000
    301  6cf3		       70		      BYTE.b	%01110000
    302  6cf4		       70		      BYTE.b	%01110000
    303  6cf5		       7f		      BYTE.b	%01111111
    304  6cf6		       7f		      BYTE.b	%01111111
    305  6cf7		       7e		      BYTE.b	%01111110
    306  6cf8		       00		      BYTE.b	%00000000
    307  6cf9		       00		      BYTE.b	%00000000
    308  6cfa		       00		      BYTE.b	%00000000
    309  6cfb
    310  6cfb
    311  6cfb
    312  6cfb					      if	>. != >[.+(bmp_96x2_1_height)]
    313  6d00		       00 00 00 00*	      align	256
    314  6d00					      endif
    315  6d00
    316  6d00
    317  6d00				   bmp_96x2_1_09
    318  6d00							; *** replace this block with your bimap_09 data block...
    319  6d00		       00		      BYTE.b	%00000000
    320  6d01		       00		      BYTE.b	%00000000
    321  6d02		       00		      BYTE.b	%00000000
    322  6d03		       80		      BYTE.b	%10000000
    323  6d04		       c0		      BYTE.b	%11000000
    324  6d05		       e0		      BYTE.b	%11100000
    325  6d06		       f0		      BYTE.b	%11110000
    326  6d07		       78		      BYTE.b	%01111000
    327  6d08		       38		      BYTE.b	%00111000
    328  6d09		       38		      BYTE.b	%00111000
    329  6d0a		       39		      BYTE.b	%00111001
    330  6d0b		       39		      BYTE.b	%00111001
    331  6d0c		       79		      BYTE.b	%01111001
    332  6d0d		       f1		      BYTE.b	%11110001
    333  6d0e		       f1		      BYTE.b	%11110001
    334  6d0f		       c1		      BYTE.b	%11000001
    335  6d10		       01		      BYTE.b	%00000001
    336  6d11		       00		      BYTE.b	%00000000
    337  6d12		       00		      BYTE.b	%00000000
    338  6d13		       00		      BYTE.b	%00000000
    339  6d14
    340  6d14
    341  6d14
    342  6d14				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    343  6d14				  -	      align	256
    344  6d14					      endif
    345  6d14
    346  6d14
    347  6d14				   bmp_96x2_1_10
    348  6d14							; *** replace this block with your bimap_10 data block...
    349  6d14		       00		      BYTE.b	%00000000
    350  6d15		       00		      BYTE.b	%00000000
    351  6d16		       00		      BYTE.b	%00000000
    352  6d17		       38		      BYTE.b	%00111000
    353  6d18		       38		      BYTE.b	%00111000
    354  6d19		       38		      BYTE.b	%00111000
    355  6d1a		       38		      BYTE.b	%00111000
    356  6d1b		       38		      BYTE.b	%00111000
    357  6d1c		       3c		      BYTE.b	%00111100
    358  6d1d		       fe		      BYTE.b	%11111110
    359  6d1e		       ff		      BYTE.b	%11111111
    360  6d1f		       c3		      BYTE.b	%11000011
    361  6d20		       c3		      BYTE.b	%11000011
    362  6d21		       c3		      BYTE.b	%11000011
    363  6d22		       c3		      BYTE.b	%11000011
    364  6d23		       c3		      BYTE.b	%11000011
    365  6d24		       c3		      BYTE.b	%11000011
    366  6d25		       00		      BYTE.b	%00000000
    367  6d26		       00		      BYTE.b	%00000000
    368  6d27		       00		      BYTE.b	%00000000
    369  6d28
    370  6d28
    371  6d28
    372  6d28				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    373  6d28				  -	      align	256
    374  6d28					      endif
    375  6d28
    376  6d28
    377  6d28				   bmp_96x2_1_11
    378  6d28							; *** replace this block with your bimap_11 data block...
    379  6d28		       00		      BYTE.b	%00000000
    380  6d29		       00		      BYTE.b	%00000000
    381  6d2a		       00		      BYTE.b	%00000000
    382  6d2b		       00		      BYTE.b	%00000000
    383  6d2c		       00		      BYTE.b	%00000000
    384  6d2d		       00		      BYTE.b	%00000000
    385  6d2e		       00		      BYTE.b	%00000000
    386  6d2f		       00		      BYTE.b	%00000000
    387  6d30		       00		      BYTE.b	%00000000
    388  6d31		       00		      BYTE.b	%00000000
    389  6d32		       00		      BYTE.b	%00000000
    390  6d33		       00		      BYTE.b	%00000000
    391  6d34		       00		      BYTE.b	%00000000
    392  6d35		       00		      BYTE.b	%00000000
    393  6d36		       00		      BYTE.b	%00000000
    394  6d37		       00		      BYTE.b	%00000000
    395  6d38		       00		      BYTE.b	%00000000
    396  6d39		       00		      BYTE.b	%00000000
    397  6d3a		       00		      BYTE.b	%00000000
    398  6d3b		       00		      BYTE.b	%00000000
    399  6d3c
    400  6d3c
    401  6d3c
------- FILE titlescreen/asm/titlescreen.asm
    274  6d3c					      endif
    275  6d3c					      ifconst	mk_96x2_2_on
------- FILE titlescreen/96x2_2_image.asm LEVEL 3 PASS 3
      0  6d3c					      include	"titlescreen/96x2_2_image.asm"
      1  6d3c
      2  6d3c
      3  6d3c							;*** The height of the displayed data...
      4  6d3c		       00 05	   bmp_96x2_2_window =	5
      5  6d3c
      6  6d3c							;*** The height of the bitmap data. This can be larger than
      7  6d3c							;*** the displayed data height, if you're scrolling or animating
      8  6d3c							;*** the data...
      9  6d3c		       00 05	   bmp_96x2_2_height =	5
     10  6d3c
     11  6d3c
     12  6d3c				  -	      if	>. != >[.+(bmp_96x2_2_height)]
     13  6d3c				  -	      align	256
     14  6d3c					      endif
     15  6d3c		       00		      BYTE.b	$00	; leave this here!
     16  6d3d
     17  6d3d
     18  6d3d							;*** The color of each line in the bitmap, in reverse order...
     19  6d3d				   bmp_96x2_2_colors
     20  6d3d		       40		      .byte.b	$40
     21  6d3e		       40		      .byte.b	$40
     22  6d3f		       40		      .byte.b	$40
     23  6d40		       40		      .byte.b	$40
     24  6d41		       40		      .byte.b	$40
     25  6d42
     26  6d42
     27  6d42
     28  6d42				  -	      if	>. != >[.+(bmp_96x2_2_height)]
     29  6d42				  -	      align	256
     30  6d42					      endif
     31  6d42
     32  6d42				   bmp_96x2_2_00
     33  6d42							; *** replace this block with your bimap_11 data block...
     34  6d42		       00		      BYTE.b	%00000000
     35  6d43		       00		      BYTE.b	%00000000
     36  6d44		       00		      BYTE.b	%00000000
     37  6d45		       00		      BYTE.b	%00000000
     38  6d46		       00		      BYTE.b	%00000000
     39  6d47				  -	      if	>. != >[.+(bmp_96x2_2_height)]
     40  6d47				  -	      align	256
     41  6d47					      endif
     42  6d47
     43  6d47				   bmp_96x2_2_01
     44  6d47							; *** replace this block with your bimap_11 data block...
     45  6d47		       00		      BYTE.b	%00000000
     46  6d48		       00		      BYTE.b	%00000000
     47  6d49		       00		      BYTE.b	%00000000
     48  6d4a		       00		      BYTE.b	%00000000
     49  6d4b		       00		      BYTE.b	%00000000
     50  6d4c				  -	      if	>. != >[.+(bmp_96x2_2_height)]
     51  6d4c				  -	      align	256
     52  6d4c					      endif
     53  6d4c
     54  6d4c				   bmp_96x2_2_02
     55  6d4c							; *** replace this block with your bimap_11 data block...
     56  6d4c		       00		      BYTE.b	%00000000
     57  6d4d		       00		      BYTE.b	%00000000
     58  6d4e		       00		      BYTE.b	%00000000
     59  6d4f		       00		      BYTE.b	%00000000
     60  6d50		       00		      BYTE.b	%00000000
     61  6d51
     62  6d51				  -	      if	>. != >[.+(bmp_96x2_2_height)]
     63  6d51				  -	      align	256
     64  6d51					      endif
     65  6d51
     66  6d51				   bmp_96x2_2_03
     67  6d51							; *** replace this block with your bimap_00 data block...
     68  6d51		       ae		      .byte.b	%10101110	;
     69  6d52		       a8		      .byte.b	%10101000	;
     70  6d53		       e8		      .byte.b	%11101000	;
     71  6d54		       a8		      .byte.b	%10101000	;
     72  6d55		       e8		      .byte.b	%11101000	;
     73  6d56
     74  6d56
     75  6d56
     76  6d56				  -	      if	>. != >[.+(bmp_96x2_2_height)]
     77  6d56				  -	      align	256
     78  6d56					      endif
     79  6d56
     80  6d56
     81  6d56				   bmp_96x2_2_04
     82  6d56							; *** replace this block with your bimap_01 data block...
     83  6d56		       4e		      .byte.b	%01001110	;
     84  6d57		       48		      .byte.b	%01001000	;
     85  6d58		       4c		      .byte.b	%01001100	;
     86  6d59		       48		      .byte.b	%01001000	;
     87  6d5a		       4e		      .byte.b	%01001110	;
     88  6d5b
     89  6d5b
     90  6d5b
     91  6d5b				  -	      if	>. != >[.+(bmp_96x2_2_height)]
     92  6d5b				  -	      align	256
     93  6d5b					      endif
     94  6d5b
     95  6d5b
     96  6d5b				   bmp_96x2_2_05
     97  6d5b							; *** replace this block with your bimap_02 data block...
     98  6d5b		       90		      .byte.b	%10010000	;
     99  6d5c		       b0		      .byte.b	%10110000	;
    100  6d5d		       d0		      .byte.b	%11010000	;
    101  6d5e		       90		      .byte.b	%10010000	;
    102  6d5f		       90		      .byte.b	%10010000	;
    103  6d60
    104  6d60
    105  6d60
    106  6d60				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    107  6d60				  -	      align	256
    108  6d60					      endif
    109  6d60
    110  6d60
    111  6d60				   bmp_96x2_2_06
    112  6d60							; *** replace this block with your bimap_03 data block...
    113  6d60		       a4		      .byte.b	%10100100	;
    114  6d61		       a4		      .byte.b	%10100100	;
    115  6d62		       ac		      .byte.b	%10101100	;
    116  6d63		       b4		      .byte.b	%10110100	;
    117  6d64		       a4		      .byte.b	%10100100	;
    118  6d65
    119  6d65
    120  6d65				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    121  6d65				  -	      align	256
    122  6d65					      endif
    123  6d65
    124  6d65
    125  6d65				   bmp_96x2_2_07
    126  6d65							; *** replace this block with your bimap_04 data block...
    127  6d65		       4a		      .byte.b	%01001010	;
    128  6d66		       aa		      .byte.b	%10101010	;
    129  6d67		       ae		      .byte.b	%10101110	;
    130  6d68		       aa		      .byte.b	%10101010	;
    131  6d69		       ae		      .byte.b	%10101110	;
    132  6d6a
    133  6d6a
    134  6d6a
    135  6d6a				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    136  6d6a				  -	      align	256
    137  6d6a					      endif
    138  6d6a
    139  6d6a
    140  6d6a				   bmp_96x2_2_08
    141  6d6a							; *** replace this block with your bimap_05 data block...
    142  6d6a		       e4		      .byte.b	%11100100	;
    143  6d6b		       24		      .byte.b	%00100100	;
    144  6d6c		       e4		      .byte.b	%11100100	;
    145  6d6d		       84		      .byte.b	%10000100	;
    146  6d6e		       e4		      .byte.b	%11100100	;
    147  6d6f
    148  6d6f
    149  6d6f
    150  6d6f				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    151  6d6f				  -	      align	256
    152  6d6f					      endif
    153  6d6f
    154  6d6f
    155  6d6f				   bmp_96x2_2_09
    156  6d6f							; *** replace this block with your bimap_06 data block...
    157  6d6f		       e9		      .byte.b	%11101001	;
    158  6d70		       a9		      .byte.b	%10101001	;
    159  6d71		       ab		      .byte.b	%10101011	;
    160  6d72		       ad		      .byte.b	%10101101	;
    161  6d73		       e9		      .byte.b	%11101001	;
    162  6d74
    163  6d74
    164  6d74
    165  6d74				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    166  6d74				  -	      align	256
    167  6d74					      endif
    168  6d74
    169  6d74
    170  6d74				   bmp_96x2_2_10
    171  6d74							; *** replace this block with your bimap_07 data block...
    172  6d74		       00		      BYTE.b	%00000000
    173  6d75
    174  6d75
    175  6d75
    176  6d75				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    177  6d75				  -	      align	256
    178  6d75					      endif
    179  6d75
    180  6d75
    181  6d75				   bmp_96x2_2_11
    182  6d75							; *** replace this block with your bimap_08 data block...
    183  6d75		       00		      BYTE.b	%00000000
    184  6d76		       00		      BYTE.b	%00000000
    185  6d77		       00		      BYTE.b	%00000000
    186  6d78		       00		      BYTE.b	%00000000
    187  6d79		       00		      BYTE.b	%00000000
    188  6d7a
    189  6d7a
    190  6d7a
    191  6d7a
    192  6d7a
    193  6d7a
    194  6d7a
    195  6d7a
------- FILE titlescreen/asm/titlescreen.asm
    277  6d7a					      endif
    278  6d7a				  -	      ifconst	mk_96x2_3_on
    279  6d7a				  -	      include	"titlescreen/96x2_3_image.asm"
    280  6d7a					      endif
    281  6d7a					      ifconst	mk_96x2_4_on
------- FILE titlescreen/96x2_4_image.asm LEVEL 3 PASS 3
      0  6d7a					      include	"titlescreen/96x2_4_image.asm"
      1  6d7a
      2  6d7a
      3  6d7a							;*** The height of the displayed data...
      4  6d7a		       00 05	   bmp_96x2_4_window =	5
      5  6d7a
      6  6d7a							;*** The height of the bitmap data. This can be larger than
      7  6d7a							;*** the displayed data height, if you're scrolling or animating
      8  6d7a							;*** the data...
      9  6d7a		       00 05	   bmp_96x2_4_height =	5
     10  6d7a
     11  6d7a
     12  6d7a				  -	      if	>. != >[.+(bmp_96x2_4_height)]
     13  6d7a				  -	      align	256
     14  6d7a					      endif
     15  6d7a		       00		      BYTE.b	$00	; leave this here!
     16  6d7b
     17  6d7b
     18  6d7b							;*** The color of each line in the bitmap, in reverse order...
     19  6d7b				   bmp_96x2_4_colors
     20  6d7b		       c2		      .byte.b	$C2
     21  6d7c		       c2		      .byte.b	$C2
     22  6d7d		       c2		      .byte.b	$C2
     23  6d7e		       c2		      .byte.b	$C2
     24  6d7f		       c2		      .byte.b	$C2
     25  6d80
     26  6d80
     27  6d80				  -	      if	>. != >[.+(bmp_96x2_4_height)]
     28  6d80				  -	      align	256
     29  6d80					      endif
     30  6d80
     31  6d80				   bmp_96x2_4_00
     32  6d80							; *** replace this block with your bimap_09 data block...
     33  6d80
     34  6d80		       00		      .byte.b	%00000000	;
     35  6d81		       00		      .byte.b	%00000000	;
     36  6d82		       00		      .byte.b	%00000000	;
     37  6d83		       00		      .byte.b	%00000000	;
     38  6d84		       00		      .byte.b	%00000000	;
     39  6d85
     40  6d85				  -	      if	>. != >[.+(bmp_96x2_4_height)]
     41  6d85				  -	      align	256
     42  6d85					      endif
     43  6d85				   bmp_96x2_4_01
     44  6d85							; *** replace this block with your bimap_09 data block...
     45  6d85
     46  6d85		       00		      .byte.b	%00000000	;
     47  6d86		       00		      .byte.b	%00000000	;
     48  6d87		       00		      .byte.b	%00000000	;
     49  6d88		       00		      .byte.b	%00000000	;
     50  6d89		       00		      .byte.b	%00000000	;
     51  6d8a
     52  6d8a				  -	      if	>. != >[.+(bmp_96x2_4_height)]
     53  6d8a				  -	      align	256
     54  6d8a					      endif
     55  6d8a
     56  6d8a				   bmp_96x2_4_02
     57  6d8a		       8a		      .byte.b	%10001010	;
     58  6d8b		       8a		      .byte.b	%10001010	;
     59  6d8c		       ec		      .byte.b	%11101100	;
     60  6d8d		       aa		      .byte.b	%10101010	;
     61  6d8e		       ee		      .byte.b	%11101110	;
     62  6d8f
     63  6d8f
     64  6d8f				  -	      if	>. != >[.+(bmp_96x2_4_height)]
     65  6d8f				  -	      align	256
     66  6d8f					      endif
     67  6d8f				   bmp_96x2_4_03
     68  6d8f							; *** replace this block with your bimap_00 data block...
     69  6d8f		       ee		      .byte.b	%11101110	;
     70  6d90		       82		      .byte.b	%10000010	;
     71  6d91		       ce		      .byte.b	%11001110	;
     72  6d92		       88		      .byte.b	%10001000	;
     73  6d93		       ee		      .byte.b	%11101110	;
     74  6d94
     75  6d94
     76  6d94
     77  6d94				  -	      if	>. != >[.+(bmp_96x2_4_height)]
     78  6d94				  -	      align	256
     79  6d94					      endif
     80  6d94
     81  6d94
     82  6d94				   bmp_96x2_4_04
     83  6d94							; *** replace this block with your bimap_01 data block...
     84  6d94		       e0		      .byte.b	%11100000	;
     85  6d95		       20		      .byte.b	%00100000	;
     86  6d96		       e0		      .byte.b	%11100000	;
     87  6d97		       80		      .byte.b	%10000000	;
     88  6d98		       e0		      .byte.b	%11100000	;
     89  6d99
     90  6d99
     91  6d99				  -	      if	>. != >[.+(bmp_96x2_4_height)]
     92  6d99				  -	      align	256
     93  6d99					      endif
     94  6d99
     95  6d99
     96  6d99				   bmp_96x2_4_05
     97  6d99							; *** replace this block with your bimap_02 data block...
     98  6d99		       84		      .byte.b	%10000100	;
     99  6d9a		       84		      .byte.b	%10000100	;
    100  6d9b		       c4		      .byte.b	%11000100	;
    101  6d9c		       84		      .byte.b	%10000100	;
    102  6d9d		       e4		      .byte.b	%11100100	;
    103  6d9e
    104  6d9e
    105  6d9e				  -	      if	>. != >[.+(bmp_96x2_4_height)]
    106  6d9e				  -	      align	256
    107  6d9e					      endif
    108  6d9e
    109  6d9e
    110  6d9e				   bmp_96x2_4_06
    111  6d9e							; *** replace this block with your bimap_03 data block...
    112  6d9e		       ae		      .byte.b	%10101110	;
    113  6d9f		       a8		      .byte.b	%10101000	;
    114  6da0		       cc		      .byte.b	%11001100	;
    115  6da1		       a8		      .byte.b	%10101000	;
    116  6da2		       ee		      .byte.b	%11101110	;
    117  6da3
    118  6da3
    119  6da3
    120  6da3				  -	      if	>. != >[.+(bmp_96x2_4_height)]
    121  6da3				  -	      align	256
    122  6da3					      endif
    123  6da3
    124  6da3
    125  6da3				   bmp_96x2_4_07
    126  6da3							; *** replace this block with your bimap_04 data block...
    127  6da3		       04		      .byte.b	%00000100	;
    128  6da4		       04		      .byte.b	%00000100	;
    129  6da5		       04		      .byte.b	%00000100	;
    130  6da6		       04		      .byte.b	%00000100	;
    131  6da7		       0e		      .byte.b	%00001110	;
    132  6da8
    133  6da8
    134  6da8
    135  6da8				  -	      if	>. != >[.+(bmp_96x2_4_height)]
    136  6da8				  -	      align	256
    137  6da8					      endif
    138  6da8
    139  6da8
    140  6da8				   bmp_96x2_4_08
    141  6da8							; *** replace this block with your bimap_05 data block...
    142  6da8		       e0		      .byte.b	%11100000	;
    143  6da9		       a0		      .byte.b	%10100000	;
    144  6daa		       a0		      .byte.b	%10100000	;
    145  6dab		       a0		      .byte.b	%10100000	;
    146  6dac		       e0		      .byte.b	%11100000	;
    147  6dad
    148  6dad
    149  6dad
    150  6dad				  -	      if	>. != >[.+(bmp_96x2_4_height)]
    151  6dad				  -	      align	256
    152  6dad					      endif
    153  6dad
    154  6dad
    155  6dad				   bmp_96x2_4_09
    156  6dad							; *** replace this block with your bimap_06 data block...
    157  6dad		       8e		      .byte.b	%10001110	;
    158  6dae		       88		      .byte.b	%10001000	;
    159  6daf		       e8		      .byte.b	%11101000	;
    160  6db0		       a8		      .byte.b	%10101000	;
    161  6db1		       e8		      .byte.b	%11101000	;
    162  6db2
    163  6db2
    164  6db2
    165  6db2				  -	      if	>. != >[.+(bmp_96x2_4_height)]
    166  6db2				  -	      align	256
    167  6db2					      endif
    168  6db2
    169  6db2
    170  6db2				   bmp_96x2_4_10
    171  6db2							; *** replace this block with your bimap_07 data block...
    172  6db2		       a4		      .byte.b	%10100100	;
    173  6db3		       a4		      .byte.b	%10100100	;
    174  6db4		       ee		      .byte.b	%11101110	;
    175  6db5		       aa		      .byte.b	%10101010	;
    176  6db6		       ea		      .byte.b	%11101010	;
    177  6db7
    178  6db7
    179  6db7
    180  6db7				  -	      if	>. != >[.+(bmp_96x2_4_height)]
    181  6db7				  -	      align	256
    182  6db7					      endif
    183  6db7
    184  6db7
    185  6db7				   bmp_96x2_4_11
    186  6db7							; *** replace this block with your bimap_08 data block...
    187  6db7
    188  6db7		       00		      .byte.b	%00000000	;
    189  6db8		       00		      .byte.b	%00000000	;
    190  6db9		       00		      .byte.b	%00000000	;
    191  6dba		       00		      .byte.b	%00000000	;
    192  6dbb		       00		      .byte.b	%00000000	;
    193  6dbc
    194  6dbc				  -	      if	>. != >[.+(bmp_96x2_4_height)]
    195  6dbc				  -	      align	256
    196  6dbc					      endif
    197  6dbc
    198  6dbc
    199  6dbc
    200  6dbc
    201  6dbc
    202  6dbc
    203  6dbc
    204  6dbc
    205  6dbc
------- FILE titlescreen/asm/titlescreen.asm
    283  6dbc					      endif
    284  6dbc					      ifconst	mk_96x2_5_on
------- FILE titlescreen/96x2_5_image.asm LEVEL 3 PASS 3
      0  6dbc					      include	"titlescreen/96x2_5_image.asm"
      1  6dbc
      2  6dbc							;*** The height of the displayed data...
      3  6dbc		       00 05	   bmp_96x2_5_window =	5
      4  6dbc
      5  6dbc							;*** The height of the bitmap data. This can be larger than
      6  6dbc							;*** the displayed data height, if you're scrolling or animating
      7  6dbc							;*** the data...
      8  6dbc		       00 05	   bmp_96x2_5_height =	5
      9  6dbc
     10  6dbc
     11  6dbc				  -	      if	>. != >[.+(bmp_96x2_5_height)]
     12  6dbc				  -	      align	256
     13  6dbc					      endif
     14  6dbc		       00		      BYTE.b	$00	; leave this here!
     15  6dbd
     16  6dbd
     17  6dbd							;*** The color of each line in the bitmap, in reverse order...
     18  6dbd				   bmp_96x2_5_colors
     19  6dbd		       9a		      BYTE.b	$9a
     20  6dbe		       7a		      BYTE.b	$7a
     21  6dbf		       5a		      BYTE.b	$5a
     22  6dc0		       3a		      BYTE.b	$3a
     23  6dc1		       1a		      BYTE.b	$1a
     24  6dc2
     25  6dc2
     26  6dc2				  -	      if	>. != >[.+(bmp_96x2_5_height)]
     27  6dc2				  -	      align	256
     28  6dc2					      endif
     29  6dc2
     30  6dc2
     31  6dc2				   bmp_96x2_5_00
     32  6dc2							; *** replace this block with your bimap_11 data block...
     33  6dc2		       00		      BYTE.b	%00000000
     34  6dc3		       00		      BYTE.b	%00000000
     35  6dc4		       00		      BYTE.b	%00000000
     36  6dc5		       00		      BYTE.b	%00000000
     37  6dc6		       00		      BYTE.b	%00000000
     38  6dc7
     39  6dc7				  -	      if	>. != >[.+(bmp_96x2_5_height)]
     40  6dc7				  -	      align	256
     41  6dc7					      endif
     42  6dc7
     43  6dc7				   bmp_96x2_5_01
     44  6dc7							; *** replace this block with your bimap_11 data block...
     45  6dc7		       00		      BYTE.b	%00000000
     46  6dc8		       00		      BYTE.b	%00000000
     47  6dc9		       00		      BYTE.b	%00000000
     48  6dca		       00		      BYTE.b	%00000000
     49  6dcb		       00		      BYTE.b	%00000000
     50  6dcc
     51  6dcc				  -	      if	>. != >[.+(bmp_96x2_5_height)]
     52  6dcc				  -	      align	256
     53  6dcc					      endif
     54  6dcc
     55  6dcc				   bmp_96x2_5_02
     56  6dcc							; *** replace this block with your bimap_11 data block...
     57  6dcc		       00		      BYTE.b	%00000000
     58  6dcd		       00		      BYTE.b	%00000000
     59  6dce		       00		      BYTE.b	%00000000
     60  6dcf		       00		      BYTE.b	%00000000
     61  6dd0		       00		      BYTE.b	%00000000
     62  6dd1
     63  6dd1				  -	      if	>. != >[.+(bmp_96x2_5_height)]
     64  6dd1				  -	      align	256
     65  6dd1					      endif
     66  6dd1
     67  6dd1				   bmp_96x2_5_03
     68  6dd1							; *** replace this block with your bimap_00 data block...
     69  6dd1		       4a		      .byte.b	%01001010	;
     70  6dd2		       4a		      .byte.b	%01001010	;
     71  6dd3		       4e		      .byte.b	%01001110	;
     72  6dd4		       4a		      .byte.b	%01001010	;
     73  6dd5		       e4		      .byte.b	%11100100	;
     74  6dd6
     75  6dd6
     76  6dd6				  -	      if	>. != >[.+(bmp_96x2_5_height)]
     77  6dd6				  -	      align	256
     78  6dd6					      endif
     79  6dd6
     80  6dd6
     81  6dd6				   bmp_96x2_5_04
     82  6dd6							; *** replace this block with your bimap_01 data block...
     83  6dd6		       ea		      .byte.b	%11101010	;
     84  6dd7		       8a		      .byte.b	%10001010	;
     85  6dd8		       4c		      .byte.b	%01001100	;
     86  6dd9		       2a		      .byte.b	%00101010	;
     87  6dda		       ec		      .byte.b	%11101100	;
     88  6ddb
     89  6ddb
     90  6ddb				  -	      if	>. != >[.+(bmp_96x2_5_height)]
     91  6ddb				  -	      align	256
     92  6ddb					      endif
     93  6ddb
     94  6ddb
     95  6ddb				   bmp_96x2_5_05
     96  6ddb							; *** replace this block with your bimap_02 data block...
     97  6ddb		       ee		      .byte.b	%11101110	;
     98  6ddc		       aa		      .byte.b	%10101010	;
     99  6ddd		       aa		      .byte.b	%10101010	;
    100  6dde		       a8		      .byte.b	%10101000	;
    101  6ddf		       ee		      .byte.b	%11101110	;
    102  6de0
    103  6de0
    104  6de0				  -	      if	>. != >[.+(bmp_96x2_5_height)]
    105  6de0				  -	      align	256
    106  6de0					      endif
    107  6de0
    108  6de0
    109  6de0				   bmp_96x2_5_06
    110  6de0							; *** replace this block with your bimap_03 data block...
    111  6de0		       0e		      .byte.b	%00001110	;
    112  6de1		       0a		      .byte.b	%00001010	;
    113  6de2		       0a		      .byte.b	%00001010	;
    114  6de3		       08		      .byte.b	%00001000	;
    115  6de4		       0e		      .byte.b	%00001110	;
    116  6de5
    117  6de5
    118  6de5
    119  6de5				  -	      if	>. != >[.+(bmp_96x2_5_height)]
    120  6de5				  -	      align	256
    121  6de5					      endif
    122  6de5
    123  6de5
    124  6de5				   bmp_96x2_5_07
    125  6de5							; *** replace this block with your bimap_04 data block...
    126  6de5		       aa		      .byte.b	%10101010	;
    127  6de6		       aa		      .byte.b	%10101010	;
    128  6de7		       ea		      .byte.b	%11101010	;
    129  6de8		       ae		      .byte.b	%10101110	;
    130  6de9		       ea		      .byte.b	%11101010	;
    131  6dea
    132  6dea
    133  6dea				  -	      if	>. != >[.+(bmp_96x2_5_height)]
    134  6dea				  -	      align	256
    135  6dea					      endif
    136  6dea
    137  6dea
    138  6dea				   bmp_96x2_5_08
    139  6dea							; *** replace this block with your bimap_05 data block...
    140  6dea		       ee		      .byte.b	%11101110	;
    141  6deb		       82		      .byte.b	%10000010	;
    142  6dec		       ce		      .byte.b	%11001110	;
    143  6ded		       88		      .byte.b	%10001000	;
    144  6dee		       ee		      .byte.b	%11101110	;
    145  6def
    146  6def
    147  6def				  -	      if	>. != >[.+(bmp_96x2_5_height)]
    148  6def				  -	      align	256
    149  6def					      endif
    150  6def
    151  6def
    152  6def				   bmp_96x2_5_09
    153  6def							; *** replace this block with your bimap_06 data block...
    154  6def		       00		      BYTE.b	%00000000
    155  6df0		       00		      BYTE.b	%00000000
    156  6df1		       00		      BYTE.b	%00000000
    157  6df2		       00		      BYTE.b	%00000000
    158  6df3		       00		      BYTE.b	%00000000
    159  6df4
    160  6df4
    161  6df4				  -	      if	>. != >[.+(bmp_96x2_5_height)]
    162  6df4				  -	      align	256
    163  6df4					      endif
    164  6df4
    165  6df4
    166  6df4				   bmp_96x2_5_10
    167  6df4							; *** replace this block with your bimap_07 data block...
    168  6df4		       00		      BYTE.b	%00000000
    169  6df5		       00		      BYTE.b	%00000000
    170  6df6		       00		      BYTE.b	%00000000
    171  6df7		       00		      BYTE.b	%00000000
    172  6df8		       00		      BYTE.b	%00000000
    173  6df9
    174  6df9
    175  6df9				  -	      if	>. != >[.+(bmp_96x2_5_height)]
    176  6df9				  -	      align	256
    177  6df9					      endif
    178  6df9
    179  6df9
    180  6df9				   bmp_96x2_5_11
    181  6df9							; *** replace this block with your bimap_08 data block...
    182  6df9		       00		      BYTE.b	%00000000
    183  6dfa		       00		      BYTE.b	%00000000
    184  6dfb		       00		      BYTE.b	%00000000
    185  6dfc		       00		      BYTE.b	%00000000
    186  6dfd		       00		      BYTE.b	%00000000
    187  6dfe
    188  6dfe
    189  6dfe
------- FILE titlescreen/asm/titlescreen.asm
    286  6dfe					      endif
    287  6dfe				  -	      ifconst	mk_96x2_6_on
    288  6dfe				  -	      include	"titlescreen/96x2_6_image.asm"
    289  6dfe					      endif
    290  6dfe				  -	      ifconst	mk_96x2_7_on
    291  6dfe				  -	      include	"titlescreen/96x2_7_image.asm"
    292  6dfe					      endif
    293  6dfe				  -	      ifconst	mk_96x2_8_on
    294  6dfe				  -	      include	"titlescreen/96x2_8_image.asm"
    295  6dfe					      endif
    296  6dfe
    297  6dfe				  -	      ifconst	mk_player_on
    298  6dfe				  -	      include	"titlescreen/player_image.asm"
    299  6dfe					      endif
    300  6dfe
    301  6dfe					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 3
      0  6dfe					      include	"titlescreen/score_image.asm"
      1  6dfe							; feel free to modify the score graphics - just keep each digit 8 high
      2  6dfe							; if you're looking to want to modify any one font, pick on the
      3  6dfe
      4  6dfe				  -	      ifnconst	scorecolor
      5  6dfe				  -scorecolor
      6  6dfe					      endif
      7  6dfe							; ** change this value for a different scorecolor under DPC+
      8  6dfe							;    for other kernels, just use the scorecolor variable
      9  6dfe		       0f		      .byte.b	$0f
     10  6dff
     11  6dff				  -	      ifnconst	NOFONT
     12  6dff				  -NOFONT     =	0
     13  6dff					      endif
     14  6dff				  -	      ifnconst	STOCK
     15  6dff				  -STOCK      =	1	;_FONTNAME
     16  6dff					      endif
     17  6dff				  -	      ifnconst	NEWCENTURY
     18  6dff				  -NEWCENTURY =	2	;_FONTNAME
     19  6dff					      endif
     20  6dff				  -	      ifnconst	WHIMSEY
     21  6dff				  -WHIMSEY    =	3	;_FONTNAME
     22  6dff					      endif
     23  6dff				  -	      ifnconst	ALARMCLOCK
     24  6dff				  -ALARMCLOCK =	4	;_FONTNAME
     25  6dff					      endif
     26  6dff				  -	      ifnconst	HANDWRITTEN
     27  6dff				  -HANDWRITTEN =	5	;_FONTNAME
     28  6dff					      endif
     29  6dff				  -	      ifnconst	INTERRUPTED
     30  6dff				  -INTERRUPTED =	6	;_FONTNAME
     31  6dff					      endif
     32  6dff				  -	      ifnconst	TINY
     33  6dff				  -TINY       =	7	;_FONTNAME
     34  6dff					      endif
     35  6dff				  -	      ifnconst	RETROPUTER
     36  6dff				  -RETROPUTER =	8	;_FONTNAME
     37  6dff					      endif
     38  6dff				  -	      ifnconst	CURVES
     39  6dff				  -CURVES     =	9	;_FONTNAME
     40  6dff					      endif
     41  6dff				  -	      ifnconst	HUSKY
     42  6dff				  -HUSKY      =	10	;_FONTNAME
     43  6dff					      endif
     44  6dff				  -	      ifnconst	SNAKE
     45  6dff				  -SNAKE      =	11	;_FONTNAME
     46  6dff					      endif
     47  6dff				  -	      ifnconst	PLOK
     48  6dff				  -PLOK       =	13	;_FONTNAME
     49  6dff					      endif
     50  6dff
     51  6dff				  -	      ifnconst	SYMBOLS
     52  6dff				  -SYMBOLS    =	0	;_FONTNAME
     53  6dff					      endif
     54  6dff
     55  6dff							; ### setup some defaults
     56  6dff				  -	      ifnconst	fontstyle
     57  6dff				  -fontstyle  =	STOCK
     58  6dff					      endif
     59  6dff
     60  6dff							;fix up the table alignment, if necessary
     61  6dff					      if	>. != >[.+81]
     62  6e00		       00		      align	256
     63  6e00					      endif
     64  6e00
     65  6e00
     66  6e00				   miniscoretable
     67  6e00
     68  6e00					      if	fontstyle == STOCK
     69  6e00
     70  6e00							;byte %00000000 ; STOCK
     71  6e00
     72  6e00		       3c		      .byte.b	%00111100	; STOCK
     73  6e01		       66		      .byte.b	%01100110	; STOCK
     74  6e02		       66		      .byte.b	%01100110	; STOCK
     75  6e03		       66		      .byte.b	%01100110	; STOCK
     76  6e04		       66		      .byte.b	%01100110	; STOCK
     77  6e05		       66		      .byte.b	%01100110	; STOCK
     78  6e06		       66		      .byte.b	%01100110	; STOCK
     79  6e07		       3c		      .byte.b	%00111100	; STOCK
     80  6e08
     81  6e08							;byte %00000000 ; STOCK
     82  6e08
     83  6e08		       7e		      .byte.b	%01111110	; STOCK
     84  6e09		       18		      .byte.b	%00011000	; STOCK
     85  6e0a		       18		      .byte.b	%00011000	; STOCK
     86  6e0b		       18		      .byte.b	%00011000	; STOCK
     87  6e0c		       18		      .byte.b	%00011000	; STOCK
     88  6e0d		       38		      .byte.b	%00111000	; STOCK
     89  6e0e		       18		      .byte.b	%00011000	; STOCK
     90  6e0f		       08		      .byte.b	%00001000	; STOCK
     91  6e10
     92  6e10							;byte %00000000 ; STOCK
     93  6e10
     94  6e10		       7e		      .byte.b	%01111110	; STOCK
     95  6e11		       60		      .byte.b	%01100000	; STOCK
     96  6e12		       60		      .byte.b	%01100000	; STOCK
     97  6e13		       3c		      .byte.b	%00111100	; STOCK
     98  6e14		       06		      .byte.b	%00000110	; STOCK
     99  6e15		       06		      .byte.b	%00000110	; STOCK
    100  6e16		       46		      .byte.b	%01000110	; STOCK
    101  6e17		       3c		      .byte.b	%00111100	; STOCK
    102  6e18
    103  6e18							;byte %00000000 ; STOCK
    104  6e18
    105  6e18		       3c		      .byte.b	%00111100	; STOCK
    106  6e19		       46		      .byte.b	%01000110	; STOCK
    107  6e1a		       06		      .byte.b	%00000110	; STOCK
    108  6e1b		       06		      .byte.b	%00000110	; STOCK
    109  6e1c		       1c		      .byte.b	%00011100	; STOCK
    110  6e1d		       06		      .byte.b	%00000110	; STOCK
    111  6e1e		       46		      .byte.b	%01000110	; STOCK
    112  6e1f		       3c		      .byte.b	%00111100	; STOCK
    113  6e20
    114  6e20							;byte %00000000 ; STOCK
    115  6e20
    116  6e20		       0c		      .byte.b	%00001100	; STOCK
    117  6e21		       0c		      .byte.b	%00001100	; STOCK
    118  6e22		       7e		      .byte.b	%01111110	; STOCK
    119  6e23		       4c		      .byte.b	%01001100	; STOCK
    120  6e24		       4c		      .byte.b	%01001100	; STOCK
    121  6e25		       2c		      .byte.b	%00101100	; STOCK
    122  6e26		       1c		      .byte.b	%00011100	; STOCK
    123  6e27		       0c		      .byte.b	%00001100	; STOCK
    124  6e28
    125  6e28							;byte %00000000 ; STOCK
    126  6e28
    127  6e28		       3c		      .byte.b	%00111100	; STOCK
    128  6e29		       46		      .byte.b	%01000110	; STOCK
    129  6e2a		       06		      .byte.b	%00000110	; STOCK
    130  6e2b		       06		      .byte.b	%00000110	; STOCK
    131  6e2c		       3c		      .byte.b	%00111100	; STOCK
    132  6e2d		       60		      .byte.b	%01100000	; STOCK
    133  6e2e		       60		      .byte.b	%01100000	; STOCK
    134  6e2f		       7e		      .byte.b	%01111110	; STOCK
    135  6e30
    136  6e30							;byte %00000000 ; STOCK
    137  6e30
    138  6e30		       3c		      .byte.b	%00111100	; STOCK
    139  6e31		       66		      .byte.b	%01100110	; STOCK
    140  6e32		       66		      .byte.b	%01100110	; STOCK
    141  6e33		       66		      .byte.b	%01100110	; STOCK
    142  6e34		       7c		      .byte.b	%01111100	; STOCK
    143  6e35		       60		      .byte.b	%01100000	; STOCK
    144  6e36		       62		      .byte.b	%01100010	; STOCK
    145  6e37		       3c		      .byte.b	%00111100	; STOCK
    146  6e38
    147  6e38							;byte %00000000 ; STOCK
    148  6e38
    149  6e38		       30		      .byte.b	%00110000	; STOCK
    150  6e39		       30		      .byte.b	%00110000	; STOCK
    151  6e3a		       30		      .byte.b	%00110000	; STOCK
    152  6e3b		       18		      .byte.b	%00011000	; STOCK
    153  6e3c		       0c		      .byte.b	%00001100	; STOCK
    154  6e3d		       06		      .byte.b	%00000110	; STOCK
    155  6e3e		       42		      .byte.b	%01000010	; STOCK
    156  6e3f		       3e		      .byte.b	%00111110	; STOCK
    157  6e40
    158  6e40							;byte %00000000 ; STOCK
    159  6e40
    160  6e40		       3c		      .byte.b	%00111100	; STOCK
    161  6e41		       66		      .byte.b	%01100110	; STOCK
    162  6e42		       66		      .byte.b	%01100110	; STOCK
    163  6e43		       66		      .byte.b	%01100110	; STOCK
    164  6e44		       3c		      .byte.b	%00111100	; STOCK
    165  6e45		       66		      .byte.b	%01100110	; STOCK
    166  6e46		       66		      .byte.b	%01100110	; STOCK
    167  6e47		       3c		      .byte.b	%00111100	; STOCK
    168  6e48
    169  6e48							;byte %00000000 ; STOCK
    170  6e48
    171  6e48		       3c		      .byte.b	%00111100	; STOCK
    172  6e49		       46		      .byte.b	%01000110	; STOCK
    173  6e4a		       06		      .byte.b	%00000110	; STOCK
    174  6e4b		       3e		      .byte.b	%00111110	; STOCK
    175  6e4c		       66		      .byte.b	%01100110	; STOCK
    176  6e4d		       66		      .byte.b	%01100110	; STOCK
    177  6e4e		       66		      .byte.b	%01100110	; STOCK
    178  6e4f		       3c		      .byte.b	%00111100	; STOCK
    179  6e50
    180  6e50					      endif		; STOCK
    181  6e50
    182  6e50				  -	      if	fontstyle == NEWCENTURY
    183  6e50				  -			;byte %00000000 ; NEWCENTURY
    184  6e50				  -
    185  6e50				  -	      .byte	%00111100	; NEWCENTURY
    186  6e50				  -	      .byte	%01000010	; NEWCENTURY
    187  6e50				  -	      .byte	%01000010	; NEWCENTURY
    188  6e50				  -	      .byte	%01000010	; NEWCENTURY
    189  6e50				  -	      .byte	%00100100	; NEWCENTURY
    190  6e50				  -	      .byte	%00100100	; NEWCENTURY
    191  6e50				  -	      .byte	%00100100	; NEWCENTURY
    192  6e50				  -	      .byte	%00011000	; NEWCENTURY
    193  6e50				  -
    194  6e50				  -			;byte %00000000 ; NEWCENTURY
    195  6e50				  -
    196  6e50				  -	      .byte	%00001000	; NEWCENTURY
    197  6e50				  -	      .byte	%00001000	; NEWCENTURY
    198  6e50				  -	      .byte	%00001000	; NEWCENTURY
    199  6e50				  -	      .byte	%00001000	; NEWCENTURY
    200  6e50				  -	      .byte	%00001000	; NEWCENTURY
    201  6e50				  -	      .byte	%00001000	; NEWCENTURY
    202  6e50				  -	      .byte	%00001000	; NEWCENTURY
    203  6e50				  -	      .byte	%00001000	; NEWCENTURY
    204  6e50				  -
    205  6e50				  -			;byte %00000000 ; NEWCENTURY
    206  6e50				  -
    207  6e50				  -	      .byte	%01111110	; NEWCENTURY
    208  6e50				  -	      .byte	%01000000	; NEWCENTURY
    209  6e50				  -	      .byte	%01000000	; NEWCENTURY
    210  6e50				  -	      .byte	%00100000	; NEWCENTURY
    211  6e50				  -	      .byte	%00011100	; NEWCENTURY
    212  6e50				  -	      .byte	%00000010	; NEWCENTURY
    213  6e50				  -	      .byte	%00000010	; NEWCENTURY
    214  6e50				  -	      .byte	%00011100	; NEWCENTURY
    215  6e50				  -
    216  6e50				  -			;byte %00000000 ; NEWCENTURY
    217  6e50				  -
    218  6e50				  -	      .byte	%01111100	; NEWCENTURY
    219  6e50				  -	      .byte	%00000010	; NEWCENTURY
    220  6e50				  -	      .byte	%00000010	; NEWCENTURY
    221  6e50				  -	      .byte	%00000010	; NEWCENTURY
    222  6e50				  -	      .byte	%00111100	; NEWCENTURY
    223  6e50				  -	      .byte	%00000010	; NEWCENTURY
    224  6e50				  -	      .byte	%00000010	; NEWCENTURY
    225  6e50				  -	      .byte	%00011100	; NEWCENTURY
    226  6e50				  -
    227  6e50				  -			;byte %00000000 ; NEWCENTURY
    228  6e50				  -
    229  6e50				  -	      .byte	%00000010	; NEWCENTURY
    230  6e50				  -	      .byte	%00000010	; NEWCENTURY
    231  6e50				  -	      .byte	%00000010	; NEWCENTURY
    232  6e50				  -	      .byte	%00111110	; NEWCENTURY
    233  6e50				  -	      .byte	%00100010	; NEWCENTURY
    234  6e50				  -	      .byte	%00100010	; NEWCENTURY
    235  6e50				  -	      .byte	%00010010	; NEWCENTURY
    236  6e50				  -	      .byte	%00010010	; NEWCENTURY
    237  6e50				  -
    238  6e50				  -			;byte %00000000 ; NEWCENTURY
    239  6e50				  -
    240  6e50				  -	      .byte	%01111100	; NEWCENTURY
    241  6e50				  -	      .byte	%00000010	; NEWCENTURY
    242  6e50				  -	      .byte	%00000010	; NEWCENTURY
    243  6e50				  -	      .byte	%00000010	; NEWCENTURY
    244  6e50				  -	      .byte	%01111100	; NEWCENTURY
    245  6e50				  -	      .byte	%01000000	; NEWCENTURY
    246  6e50				  -	      .byte	%01000000	; NEWCENTURY
    247  6e50				  -	      .byte	%01111000	; NEWCENTURY
    248  6e50				  -
    249  6e50				  -			;byte %00000000 ; NEWCENTURY
    250  6e50				  -
    251  6e50				  -	      .byte	%00111100	; NEWCENTURY
    252  6e50				  -	      .byte	%01000010	; NEWCENTURY
    253  6e50				  -	      .byte	%01000010	; NEWCENTURY
    254  6e50				  -	      .byte	%01000010	; NEWCENTURY
    255  6e50				  -	      .byte	%01111100	; NEWCENTURY
    256  6e50				  -	      .byte	%01000000	; NEWCENTURY
    257  6e50				  -	      .byte	%01000000	; NEWCENTURY
    258  6e50				  -	      .byte	%00110000	; NEWCENTURY
    259  6e50				  -
    260  6e50				  -			;byte %00000000 ; NEWCENTURY
    261  6e50				  -
    262  6e50				  -	      .byte	%00010000	; NEWCENTURY
    263  6e50				  -	      .byte	%00010000	; NEWCENTURY
    264  6e50				  -	      .byte	%00001000	; NEWCENTURY
    265  6e50				  -	      .byte	%00001000	; NEWCENTURY
    266  6e50				  -	      .byte	%00000100	; NEWCENTURY
    267  6e50				  -	      .byte	%00000100	; NEWCENTURY
    268  6e50				  -	      .byte	%00000010	; NEWCENTURY
    269  6e50				  -	      .byte	%00011110	; NEWCENTURY
    270  6e50				  -
    271  6e50				  -			;byte %00000000 ; NEWCENTURY
    272  6e50				  -
    273  6e50				  -	      .byte	%00111100	; NEWCENTURY
    274  6e50				  -	      .byte	%01000010	; NEWCENTURY
    275  6e50				  -	      .byte	%01000010	; NEWCENTURY
    276  6e50				  -	      .byte	%01000010	; NEWCENTURY
    277  6e50				  -	      .byte	%00111100	; NEWCENTURY
    278  6e50				  -	      .byte	%00100100	; NEWCENTURY
    279  6e50				  -	      .byte	%00100100	; NEWCENTURY
    280  6e50				  -	      .byte	%00011000	; NEWCENTURY
    281  6e50				  -
    282  6e50				  -			;byte %00000000 ; NEWCENTURY
    283  6e50				  -
    284  6e50				  -	      .byte	%00111100	; NEWCENTURY
    285  6e50				  -	      .byte	%00000010	; NEWCENTURY
    286  6e50				  -	      .byte	%00000010	; NEWCENTURY
    287  6e50				  -	      .byte	%00000010	; NEWCENTURY
    288  6e50				  -	      .byte	%00001110	; NEWCENTURY
    289  6e50				  -	      .byte	%00010010	; NEWCENTURY
    290  6e50				  -	      .byte	%00010010	; NEWCENTURY
    291  6e50				  -	      .byte	%00001100	; NEWCENTURY
    292  6e50				  -
    293  6e50					      endif		; NEWCENTURY
    294  6e50
    295  6e50				  -	      if	fontstyle == WHIMSEY
    296  6e50				  -			;byte %00000000 ; WHIMSEY
    297  6e50				  -
    298  6e50				  -	      .byte	%00111100	; WHIMSEY
    299  6e50				  -	      .byte	%01111110	; WHIMSEY
    300  6e50				  -	      .byte	%01111110	; WHIMSEY
    301  6e50				  -	      .byte	%01111110	; WHIMSEY
    302  6e50				  -	      .byte	%01110110	; WHIMSEY
    303  6e50				  -	      .byte	%01110110	; WHIMSEY
    304  6e50				  -	      .byte	%01110110	; WHIMSEY
    305  6e50				  -	      .byte	%00111100	; WHIMSEY
    306  6e50				  -
    307  6e50				  -			;byte %00000000 ; WHIMSEY
    308  6e50				  -
    309  6e50				  -	      .byte	%01111110	; WHIMSEY
    310  6e50				  -	      .byte	%01111110	; WHIMSEY
    311  6e50				  -	      .byte	%01111110	; WHIMSEY
    312  6e50				  -	      .byte	%00011000	; WHIMSEY
    313  6e50				  -	      .byte	%00011000	; WHIMSEY
    314  6e50				  -	      .byte	%00011000	; WHIMSEY
    315  6e50				  -	      .byte	%01111000	; WHIMSEY
    316  6e50				  -	      .byte	%00011000	; WHIMSEY
    317  6e50				  -
    318  6e50				  -			;byte %00000000 ; WHIMSEY
    319  6e50				  -
    320  6e50				  -	      .byte	%01111110	; WHIMSEY
    321  6e50				  -	      .byte	%01111110	; WHIMSEY
    322  6e50				  -	      .byte	%01111110	; WHIMSEY
    323  6e50				  -	      .byte	%01111000	; WHIMSEY
    324  6e50				  -	      .byte	%00111100	; WHIMSEY
    325  6e50				  -	      .byte	%00001110	; WHIMSEY
    326  6e50				  -	      .byte	%01100110	; WHIMSEY
    327  6e50				  -	      .byte	%00111100	; WHIMSEY
    328  6e50				  -
    329  6e50				  -			;byte %00000000 ; WHIMSEY
    330  6e50				  -
    331  6e50				  -	      .byte	%00111100	; WHIMSEY
    332  6e50				  -	      .byte	%01111110	; WHIMSEY
    333  6e50				  -	      .byte	%01111110	; WHIMSEY
    334  6e50				  -	      .byte	%01101110	; WHIMSEY
    335  6e50				  -	      .byte	%00001110	; WHIMSEY
    336  6e50				  -	      .byte	%00111100	; WHIMSEY
    337  6e50				  -	      .byte	%00011100	; WHIMSEY
    338  6e50				  -	      .byte	%01111110	; WHIMSEY
    339  6e50				  -
    340  6e50				  -			;byte %00000000 ; WHIMSEY
    341  6e50				  -
    342  6e50				  -	      .byte	%00011100	; WHIMSEY
    343  6e50				  -	      .byte	%00011100	; WHIMSEY
    344  6e50				  -	      .byte	%01111110	; WHIMSEY
    345  6e50				  -	      .byte	%01011100	; WHIMSEY
    346  6e50				  -	      .byte	%01011100	; WHIMSEY
    347  6e50				  -	      .byte	%00011100	; WHIMSEY
    348  6e50				  -	      .byte	%00011100	; WHIMSEY
    349  6e50				  -	      .byte	%00011100	; WHIMSEY
    350  6e50				  -
    351  6e50				  -			;byte %00000000 ; WHIMSEY
    352  6e50				  -
    353  6e50				  -	      .byte	%00111100	; WHIMSEY
    354  6e50				  -	      .byte	%01111110	; WHIMSEY
    355  6e50				  -	      .byte	%01111110	; WHIMSEY
    356  6e50				  -	      .byte	%01101110	; WHIMSEY
    357  6e50				  -	      .byte	%00001110	; WHIMSEY
    358  6e50				  -	      .byte	%01111100	; WHIMSEY
    359  6e50				  -	      .byte	%01110000	; WHIMSEY
    360  6e50				  -	      .byte	%01111110	; WHIMSEY
    361  6e50				  -
    362  6e50				  -			;byte %00000000 ; WHIMSEY
    363  6e50				  -
    364  6e50				  -	      .byte	%00111100	; WHIMSEY
    365  6e50				  -	      .byte	%01111110	; WHIMSEY
    366  6e50				  -	      .byte	%01111110	; WHIMSEY
    367  6e50				  -	      .byte	%01110110	; WHIMSEY
    368  6e50				  -	      .byte	%01110110	; WHIMSEY
    369  6e50				  -	      .byte	%01111100	; WHIMSEY
    370  6e50				  -	      .byte	%01110000	; WHIMSEY
    371  6e50				  -	      .byte	%00111110	; WHIMSEY
    372  6e50				  -
    373  6e50				  -			;byte %00000000 ; WHIMSEY
    374  6e50				  -
    375  6e50				  -	      .byte	%01111000	; WHIMSEY
    376  6e50				  -	      .byte	%01111000	; WHIMSEY
    377  6e50				  -	      .byte	%01111000	; WHIMSEY
    378  6e50				  -	      .byte	%00111100	; WHIMSEY
    379  6e50				  -	      .byte	%00011100	; WHIMSEY
    380  6e50				  -	      .byte	%00001110	; WHIMSEY
    381  6e50				  -	      .byte	%00001110	; WHIMSEY
    382  6e50				  -	      .byte	%01111110	; WHIMSEY
    383  6e50				  -
    384  6e50				  -			;byte %00000000 ; WHIMSEY
    385  6e50				  -
    386  6e50				  -	      .byte	%00111100	; WHIMSEY
    387  6e50				  -	      .byte	%01111110	; WHIMSEY
    388  6e50				  -	      .byte	%01111110	; WHIMSEY
    389  6e50				  -	      .byte	%01110110	; WHIMSEY
    390  6e50				  -	      .byte	%01110110	; WHIMSEY
    391  6e50				  -	      .byte	%00111100	; WHIMSEY
    392  6e50				  -	      .byte	%01110110	; WHIMSEY
    393  6e50				  -	      .byte	%00111100	; WHIMSEY
    394  6e50				  -
    395  6e50				  -			;byte %00000000 ; WHIMSEY
    396  6e50				  -
    397  6e50				  -	      .byte	%00111100	; WHIMSEY
    398  6e50				  -	      .byte	%01111110	; WHIMSEY
    399  6e50				  -	      .byte	%01111110	; WHIMSEY
    400  6e50				  -	      .byte	%01110110	; WHIMSEY
    401  6e50				  -	      .byte	%00000110	; WHIMSEY
    402  6e50				  -	      .byte	%00111110	; WHIMSEY
    403  6e50				  -	      .byte	%01110110	; WHIMSEY
    404  6e50				  -	      .byte	%00111100	; WHIMSEY
    405  6e50				  -
    406  6e50					      endif		; WHIMSEY
    407  6e50
    408  6e50				  -	      if	fontstyle == ALARMCLOCK
    409  6e50				  -
    410  6e50				  -			;byte %00000000 ; ALARMCLOCK
    411  6e50				  -
    412  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    413  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    414  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    415  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    416  6e50				  -	      .byte	%00000000	; ALARMCLOCK
    417  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    418  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    419  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    420  6e50				  -
    421  6e50				  -			;byte %00000000 ; ALARMCLOCK
    422  6e50				  -
    423  6e50				  -	      .byte	%00000000	; ALARMCLOCK
    424  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    425  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    426  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    427  6e50				  -	      .byte	%00000000	; ALARMCLOCK
    428  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    429  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    430  6e50				  -	      .byte	%00000000	; ALARMCLOCK
    431  6e50				  -
    432  6e50				  -			;byte %00000000 ; ALARMCLOCK
    433  6e50				  -
    434  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    435  6e50				  -	      .byte	%01000000	; ALARMCLOCK
    436  6e50				  -	      .byte	%01000000	; ALARMCLOCK
    437  6e50				  -	      .byte	%01000000	; ALARMCLOCK
    438  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    439  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    440  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    441  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    442  6e50				  -
    443  6e50				  -			;byte %00000000 ; ALARMCLOCK
    444  6e50				  -
    445  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    446  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    447  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    448  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    449  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    450  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    451  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    452  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    453  6e50				  -
    454  6e50				  -			;byte %00000000 ; ALARMCLOCK
    455  6e50				  -
    456  6e50				  -	      .byte	%00000000	; ALARMCLOCK
    457  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    458  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    459  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    460  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    461  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    462  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    463  6e50				  -	      .byte	%00000000	; ALARMCLOCK
    464  6e50				  -
    465  6e50				  -			;byte %00000000 ; ALARMCLOCK
    466  6e50				  -
    467  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    468  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    469  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    470  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    471  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    472  6e50				  -	      .byte	%01000000	; ALARMCLOCK
    473  6e50				  -	      .byte	%01000000	; ALARMCLOCK
    474  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    475  6e50				  -
    476  6e50				  -			;byte %00000000 ; ALARMCLOCK
    477  6e50				  -
    478  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    479  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    480  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    481  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    482  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    483  6e50				  -	      .byte	%01000000	; ALARMCLOCK
    484  6e50				  -	      .byte	%01000000	; ALARMCLOCK
    485  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    486  6e50				  -
    487  6e50				  -			;byte %00000000 ; ALARMCLOCK
    488  6e50				  -
    489  6e50				  -	      .byte	%00000000	; ALARMCLOCK
    490  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    491  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    492  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    493  6e50				  -	      .byte	%00000000	; ALARMCLOCK
    494  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    495  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    496  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    497  6e50				  -
    498  6e50				  -			;byte %00000000 ; ALARMCLOCK
    499  6e50				  -
    500  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    501  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    502  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    503  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    504  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    505  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    506  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    507  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    508  6e50				  -
    509  6e50				  -			;byte %00000000 ; ALARMCLOCK
    510  6e50				  -
    511  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    512  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    513  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    514  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    515  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    516  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    517  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    518  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    519  6e50				  -
    520  6e50				  -
    521  6e50					      endif		; ALARMCLOCK
    522  6e50
    523  6e50				  -	      if	fontstyle == HANDWRITTEN
    524  6e50				  -
    525  6e50				  -			;byte %00000000 ; HANDWRITTEN
    526  6e50				  -
    527  6e50				  -	      .byte	%00110000	; HANDWRITTEN
    528  6e50				  -	      .byte	%01001000	; HANDWRITTEN
    529  6e50				  -	      .byte	%01001000	; HANDWRITTEN
    530  6e50				  -	      .byte	%01001000	; HANDWRITTEN
    531  6e50				  -	      .byte	%00100100	; HANDWRITTEN
    532  6e50				  -	      .byte	%00100100	; HANDWRITTEN
    533  6e50				  -	      .byte	%00010010	; HANDWRITTEN
    534  6e50				  -	      .byte	%00001100	; HANDWRITTEN
    535  6e50				  -
    536  6e50				  -			;byte %00000000 ; HANDWRITTEN
    537  6e50				  -
    538  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    539  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    540  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    541  6e50				  -	      .byte	%00001000	; HANDWRITTEN
    542  6e50				  -	      .byte	%00001000	; HANDWRITTEN
    543  6e50				  -	      .byte	%00001000	; HANDWRITTEN
    544  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    545  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    546  6e50				  -
    547  6e50				  -			;byte %00000000 ; HANDWRITTEN
    548  6e50				  -
    549  6e50				  -	      .byte	%01110000	; HANDWRITTEN
    550  6e50				  -	      .byte	%01001100	; HANDWRITTEN
    551  6e50				  -	      .byte	%01000000	; HANDWRITTEN
    552  6e50				  -	      .byte	%00100000	; HANDWRITTEN
    553  6e50				  -	      .byte	%00011000	; HANDWRITTEN
    554  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    555  6e50				  -	      .byte	%00100010	; HANDWRITTEN
    556  6e50				  -	      .byte	%00011100	; HANDWRITTEN
    557  6e50				  -
    558  6e50				  -			;byte %00000000 ; HANDWRITTEN
    559  6e50				  -
    560  6e50				  -	      .byte	%00110000	; HANDWRITTEN
    561  6e50				  -	      .byte	%01001000	; HANDWRITTEN
    562  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    563  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    564  6e50				  -	      .byte	%00011000	; HANDWRITTEN
    565  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    566  6e50				  -	      .byte	%00100010	; HANDWRITTEN
    567  6e50				  -	      .byte	%00011100	; HANDWRITTEN
    568  6e50				  -
    569  6e50				  -			;byte %00000000 ; HANDWRITTEN
    570  6e50				  -
    571  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    572  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    573  6e50				  -	      .byte	%00001000	; HANDWRITTEN
    574  6e50				  -	      .byte	%01111000	; HANDWRITTEN
    575  6e50				  -	      .byte	%01000100	; HANDWRITTEN
    576  6e50				  -	      .byte	%00100100	; HANDWRITTEN
    577  6e50				  -	      .byte	%00010010	; HANDWRITTEN
    578  6e50				  -	      .byte	%00000010	; HANDWRITTEN
    579  6e50				  -
    580  6e50				  -			;byte %00000000 ; HANDWRITTEN
    581  6e50				  -
    582  6e50				  -	      .byte	%00110000	; HANDWRITTEN
    583  6e50				  -	      .byte	%01001000	; HANDWRITTEN
    584  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    585  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    586  6e50				  -	      .byte	%00011000	; HANDWRITTEN
    587  6e50				  -	      .byte	%00100000	; HANDWRITTEN
    588  6e50				  -	      .byte	%00010010	; HANDWRITTEN
    589  6e50				  -	      .byte	%00001100	; HANDWRITTEN
    590  6e50				  -
    591  6e50				  -			;byte %00000000 ; HANDWRITTEN
    592  6e50				  -
    593  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    594  6e50				  -	      .byte	%00101000	; HANDWRITTEN
    595  6e50				  -	      .byte	%00100100	; HANDWRITTEN
    596  6e50				  -	      .byte	%00100100	; HANDWRITTEN
    597  6e50				  -	      .byte	%00011000	; HANDWRITTEN
    598  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    599  6e50				  -	      .byte	%00001000	; HANDWRITTEN
    600  6e50				  -	      .byte	%00000110	; HANDWRITTEN
    601  6e50				  -
    602  6e50				  -			;byte %00000000 ; HANDWRITTEN
    603  6e50				  -
    604  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    605  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    606  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    607  6e50				  -	      .byte	%00001000	; HANDWRITTEN
    608  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    609  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    610  6e50				  -	      .byte	%00110010	; HANDWRITTEN
    611  6e50				  -	      .byte	%00001110	; HANDWRITTEN
    612  6e50				  -
    613  6e50				  -			;byte %00000000 ; HANDWRITTEN
    614  6e50				  -
    615  6e50				  -	      .byte	%00110000	; HANDWRITTEN
    616  6e50				  -	      .byte	%01001000	; HANDWRITTEN
    617  6e50				  -	      .byte	%01000100	; HANDWRITTEN
    618  6e50				  -	      .byte	%00100100	; HANDWRITTEN
    619  6e50				  -	      .byte	%00011100	; HANDWRITTEN
    620  6e50				  -	      .byte	%00010010	; HANDWRITTEN
    621  6e50				  -	      .byte	%00001010	; HANDWRITTEN
    622  6e50				  -	      .byte	%00000110	; HANDWRITTEN
    623  6e50				  -
    624  6e50				  -			;byte %00000000 ; HANDWRITTEN
    625  6e50				  -
    626  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    627  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    628  6e50				  -	      .byte	%00001000	; HANDWRITTEN
    629  6e50				  -	      .byte	%00001000	; HANDWRITTEN
    630  6e50				  -	      .byte	%00011100	; HANDWRITTEN
    631  6e50				  -	      .byte	%00100100	; HANDWRITTEN
    632  6e50				  -	      .byte	%00010010	; HANDWRITTEN
    633  6e50				  -	      .byte	%00001100	; HANDWRITTEN
    634  6e50				  -
    635  6e50					      endif		; HANDWRITTEN
    636  6e50
    637  6e50				  -	      if	fontstyle == INTERRUPTED
    638  6e50				  -
    639  6e50				  -			;byte %00000000 ; INTERRUPTED
    640  6e50				  -
    641  6e50				  -	      .byte	%00110100	; INTERRUPTED
    642  6e50				  -	      .byte	%01100110	; INTERRUPTED
    643  6e50				  -	      .byte	%01100110	; INTERRUPTED
    644  6e50				  -	      .byte	%01100110	; INTERRUPTED
    645  6e50				  -	      .byte	%01100110	; INTERRUPTED
    646  6e50				  -	      .byte	%01100110	; INTERRUPTED
    647  6e50				  -	      .byte	%01100110	; INTERRUPTED
    648  6e50				  -	      .byte	%00110100	; INTERRUPTED
    649  6e50				  -
    650  6e50				  -			;byte %00000000 ; INTERRUPTED
    651  6e50				  -
    652  6e50				  -	      .byte	%00111100	; INTERRUPTED
    653  6e50				  -	      .byte	%00000000	; INTERRUPTED
    654  6e50				  -	      .byte	%00011000	; INTERRUPTED
    655  6e50				  -	      .byte	%00011000	; INTERRUPTED
    656  6e50				  -	      .byte	%00011000	; INTERRUPTED
    657  6e50				  -	      .byte	%00011000	; INTERRUPTED
    658  6e50				  -	      .byte	%00011000	; INTERRUPTED
    659  6e50				  -	      .byte	%00111000	; INTERRUPTED
    660  6e50				  -
    661  6e50				  -			;byte %00000000 ; INTERRUPTED
    662  6e50				  -
    663  6e50				  -	      .byte	%01101110	; INTERRUPTED
    664  6e50				  -	      .byte	%01100000	; INTERRUPTED
    665  6e50				  -	      .byte	%00110000	; INTERRUPTED
    666  6e50				  -	      .byte	%00011000	; INTERRUPTED
    667  6e50				  -	      .byte	%00001100	; INTERRUPTED
    668  6e50				  -	      .byte	%00000110	; INTERRUPTED
    669  6e50				  -	      .byte	%01000110	; INTERRUPTED
    670  6e50				  -	      .byte	%00111100	; INTERRUPTED
    671  6e50				  -
    672  6e50				  -			;byte %00000000 ; INTERRUPTED
    673  6e50				  -
    674  6e50				  -	      .byte	%01111100	; INTERRUPTED
    675  6e50				  -	      .byte	%00000110	; INTERRUPTED
    676  6e50				  -	      .byte	%00000110	; INTERRUPTED
    677  6e50				  -	      .byte	%00000110	; INTERRUPTED
    678  6e50				  -	      .byte	%01110110	; INTERRUPTED
    679  6e50				  -	      .byte	%00000110	; INTERRUPTED
    680  6e50				  -	      .byte	%00000110	; INTERRUPTED
    681  6e50				  -	      .byte	%01110100	; INTERRUPTED
    682  6e50				  -
    683  6e50				  -			;byte %00000000 ; INTERRUPTED
    684  6e50				  -
    685  6e50				  -	      .byte	%00000110	; INTERRUPTED
    686  6e50				  -	      .byte	%00000110	; INTERRUPTED
    687  6e50				  -	      .byte	%00000110	; INTERRUPTED
    688  6e50				  -	      .byte	%00000110	; INTERRUPTED
    689  6e50				  -	      .byte	%01110110	; INTERRUPTED
    690  6e50				  -	      .byte	%01100110	; INTERRUPTED
    691  6e50				  -	      .byte	%01100110	; INTERRUPTED
    692  6e50				  -	      .byte	%01100110	; INTERRUPTED
    693  6e50				  -
    694  6e50				  -			;byte %00000000 ; INTERRUPTED
    695  6e50				  -
    696  6e50				  -	      .byte	%01111100	; INTERRUPTED
    697  6e50				  -	      .byte	%00000110	; INTERRUPTED
    698  6e50				  -	      .byte	%00000110	; INTERRUPTED
    699  6e50				  -	      .byte	%00000110	; INTERRUPTED
    700  6e50				  -	      .byte	%01111100	; INTERRUPTED
    701  6e50				  -	      .byte	%01100000	; INTERRUPTED
    702  6e50				  -	      .byte	%01100000	; INTERRUPTED
    703  6e50				  -	      .byte	%01101110	; INTERRUPTED
    704  6e50				  -
    705  6e50				  -			;byte %00000000 ; INTERRUPTED
    706  6e50				  -
    707  6e50				  -	      .byte	%00101100	; INTERRUPTED
    708  6e50				  -	      .byte	%01100110	; INTERRUPTED
    709  6e50				  -	      .byte	%01100110	; INTERRUPTED
    710  6e50				  -	      .byte	%01100110	; INTERRUPTED
    711  6e50				  -	      .byte	%01101100	; INTERRUPTED
    712  6e50				  -	      .byte	%01100000	; INTERRUPTED
    713  6e50				  -	      .byte	%00110000	; INTERRUPTED
    714  6e50				  -	      .byte	%00011100	; INTERRUPTED
    715  6e50				  -
    716  6e50				  -			;byte %00000000 ; INTERRUPTED
    717  6e50				  -
    718  6e50				  -	      .byte	%00011000	; INTERRUPTED
    719  6e50				  -	      .byte	%00011000	; INTERRUPTED
    720  6e50				  -	      .byte	%00011000	; INTERRUPTED
    721  6e50				  -	      .byte	%00011100	; INTERRUPTED
    722  6e50				  -	      .byte	%00001110	; INTERRUPTED
    723  6e50				  -	      .byte	%00000110	; INTERRUPTED
    724  6e50				  -	      .byte	%00000000	; INTERRUPTED
    725  6e50				  -	      .byte	%01111110	; INTERRUPTED
    726  6e50				  -
    727  6e50				  -			;byte %00000000 ; INTERRUPTED
    728  6e50				  -
    729  6e50				  -	      .byte	%00110100	; INTERRUPTED
    730  6e50				  -	      .byte	%01100110	; INTERRUPTED
    731  6e50				  -	      .byte	%01100110	; INTERRUPTED
    732  6e50				  -	      .byte	%01100110	; INTERRUPTED
    733  6e50				  -	      .byte	%00110100	; INTERRUPTED
    734  6e50				  -	      .byte	%01100110	; INTERRUPTED
    735  6e50				  -	      .byte	%01100110	; INTERRUPTED
    736  6e50				  -	      .byte	%00110100	; INTERRUPTED
    737  6e50				  -
    738  6e50				  -			;byte %00000000 ; INTERRUPTED
    739  6e50				  -
    740  6e50				  -	      .byte	%00111000	; INTERRUPTED
    741  6e50				  -	      .byte	%00001100	; INTERRUPTED
    742  6e50				  -	      .byte	%00000110	; INTERRUPTED
    743  6e50				  -	      .byte	%00110110	; INTERRUPTED
    744  6e50				  -	      .byte	%01100110	; INTERRUPTED
    745  6e50				  -	      .byte	%01100110	; INTERRUPTED
    746  6e50				  -	      .byte	%01100110	; INTERRUPTED
    747  6e50				  -	      .byte	%00110100	; INTERRUPTED
    748  6e50				  -
    749  6e50					      endif		; INTERRUPTED
    750  6e50
    751  6e50
    752  6e50				  -	      if	fontstyle == TINY
    753  6e50				  -
    754  6e50				  -			;byte %00000000 ; TINY
    755  6e50				  -
    756  6e50				  -	      .byte	%00000000	; TINY
    757  6e50				  -	      .byte	%00111000	; TINY
    758  6e50				  -	      .byte	%00101000	; TINY
    759  6e50				  -	      .byte	%00101000	; TINY
    760  6e50				  -	      .byte	%00101000	; TINY
    761  6e50				  -	      .byte	%00111000	; TINY
    762  6e50				  -	      .byte	%00000000	; TINY
    763  6e50				  -	      .byte	%00000000	; TINY
    764  6e50				  -
    765  6e50				  -			;byte %00000000 ; TINY
    766  6e50				  -
    767  6e50				  -	      .byte	%00000000	; TINY
    768  6e50				  -	      .byte	%00010000	; TINY
    769  6e50				  -	      .byte	%00010000	; TINY
    770  6e50				  -	      .byte	%00010000	; TINY
    771  6e50				  -	      .byte	%00010000	; TINY
    772  6e50				  -	      .byte	%00010000	; TINY
    773  6e50				  -	      .byte	%00000000	; TINY
    774  6e50				  -	      .byte	%00000000	; TINY
    775  6e50				  -
    776  6e50				  -			;byte %00000000 ; TINY
    777  6e50				  -
    778  6e50				  -	      .byte	%00000000	; TINY
    779  6e50				  -	      .byte	%00111000	; TINY
    780  6e50				  -	      .byte	%00100000	; TINY
    781  6e50				  -	      .byte	%00111000	; TINY
    782  6e50				  -	      .byte	%00001000	; TINY
    783  6e50				  -	      .byte	%00111000	; TINY
    784  6e50				  -	      .byte	%00000000	; TINY
    785  6e50				  -	      .byte	%00000000	; TINY
    786  6e50				  -
    787  6e50				  -			;byte %00000000 ; TINY
    788  6e50				  -
    789  6e50				  -	      .byte	%00000000	; TINY
    790  6e50				  -	      .byte	%00111000	; TINY
    791  6e50				  -	      .byte	%00001000	; TINY
    792  6e50				  -	      .byte	%00111000	; TINY
    793  6e50				  -	      .byte	%00001000	; TINY
    794  6e50				  -	      .byte	%00111000	; TINY
    795  6e50				  -	      .byte	%00000000	; TINY
    796  6e50				  -	      .byte	%00000000	; TINY
    797  6e50				  -
    798  6e50				  -			;byte %00000000 ; TINY
    799  6e50				  -
    800  6e50				  -	      .byte	%00000000	; TINY
    801  6e50				  -	      .byte	%00001000	; TINY
    802  6e50				  -	      .byte	%00001000	; TINY
    803  6e50				  -	      .byte	%00111000	; TINY
    804  6e50				  -	      .byte	%00101000	; TINY
    805  6e50				  -	      .byte	%00101000	; TINY
    806  6e50				  -	      .byte	%00000000	; TINY
    807  6e50				  -	      .byte	%00000000	; TINY
    808  6e50				  -
    809  6e50				  -			;byte %00000000 ; TINY
    810  6e50				  -
    811  6e50				  -	      .byte	%00000000	; TINY
    812  6e50				  -	      .byte	%00111000	; TINY
    813  6e50				  -	      .byte	%00001000	; TINY
    814  6e50				  -	      .byte	%00111000	; TINY
    815  6e50				  -	      .byte	%00100000	; TINY
    816  6e50				  -	      .byte	%00111000	; TINY
    817  6e50				  -	      .byte	%00000000	; TINY
    818  6e50				  -	      .byte	%00000000	; TINY
    819  6e50				  -
    820  6e50				  -			;byte %00000000 ; TINY
    821  6e50				  -
    822  6e50				  -	      .byte	%00000000	; TINY
    823  6e50				  -	      .byte	%00111000	; TINY
    824  6e50				  -	      .byte	%00101000	; TINY
    825  6e50				  -	      .byte	%00111000	; TINY
    826  6e50				  -	      .byte	%00100000	; TINY
    827  6e50				  -	      .byte	%00111000	; TINY
    828  6e50				  -	      .byte	%00000000	; TINY
    829  6e50				  -	      .byte	%00000000	; TINY
    830  6e50				  -
    831  6e50				  -			;byte %00000000 ; TINY
    832  6e50				  -
    833  6e50				  -	      .byte	%00000000	; TINY
    834  6e50				  -	      .byte	%00001000	; TINY
    835  6e50				  -	      .byte	%00001000	; TINY
    836  6e50				  -	      .byte	%00001000	; TINY
    837  6e50				  -	      .byte	%00001000	; TINY
    838  6e50				  -	      .byte	%00111000	; TINY
    839  6e50				  -	      .byte	%00000000	; TINY
    840  6e50				  -	      .byte	%00000000	; TINY
    841  6e50				  -
    842  6e50				  -			;byte %00000000 ; TINY
    843  6e50				  -
    844  6e50				  -	      .byte	%00000000	; TINY
    845  6e50				  -	      .byte	%00111000	; TINY
    846  6e50				  -	      .byte	%00101000	; TINY
    847  6e50				  -	      .byte	%00111000	; TINY
    848  6e50				  -	      .byte	%00101000	; TINY
    849  6e50				  -	      .byte	%00111000	; TINY
    850  6e50				  -	      .byte	%00000000	; TINY
    851  6e50				  -	      .byte	%00000000	; TINY
    852  6e50				  -
    853  6e50				  -			;byte %00000000 ; TINY
    854  6e50				  -
    855  6e50				  -	      .byte	%00000000	; TINY
    856  6e50				  -	      .byte	%00001000	; TINY
    857  6e50				  -	      .byte	%00001000	; TINY
    858  6e50				  -	      .byte	%00111000	; TINY
    859  6e50				  -	      .byte	%00101000	; TINY
    860  6e50				  -	      .byte	%00111000	; TINY
    861  6e50				  -	      .byte	%00000000	; TINY
    862  6e50				  -	      .byte	%00000000	; TINY
    863  6e50				  -
    864  6e50					      endif		; TINY
    865  6e50
    866  6e50				  -	      if	fontstyle == RETROPUTER
    867  6e50				  -
    868  6e50				  -			;byte %00000000 ; RETROPUTER
    869  6e50				  -
    870  6e50				  -	      .byte	%01111110	; RETROPUTER
    871  6e50				  -	      .byte	%01000110	; RETROPUTER
    872  6e50				  -	      .byte	%01000110	; RETROPUTER
    873  6e50				  -	      .byte	%01000110	; RETROPUTER
    874  6e50				  -	      .byte	%01100010	; RETROPUTER
    875  6e50				  -	      .byte	%01100010	; RETROPUTER
    876  6e50				  -	      .byte	%01100010	; RETROPUTER
    877  6e50				  -	      .byte	%01111110	; RETROPUTER
    878  6e50				  -
    879  6e50				  -			;byte %00000000 ; RETROPUTER
    880  6e50				  -
    881  6e50				  -	      .byte	%00111000	; RETROPUTER
    882  6e50				  -	      .byte	%00111000	; RETROPUTER
    883  6e50				  -	      .byte	%00111000	; RETROPUTER
    884  6e50				  -	      .byte	%00111000	; RETROPUTER
    885  6e50				  -	      .byte	%00011000	; RETROPUTER
    886  6e50				  -	      .byte	%00011000	; RETROPUTER
    887  6e50				  -	      .byte	%00011000	; RETROPUTER
    888  6e50				  -	      .byte	%00011000	; RETROPUTER
    889  6e50				  -
    890  6e50				  -			;byte %00000000 ; RETROPUTER
    891  6e50				  -
    892  6e50				  -	      .byte	%01111110	; RETROPUTER
    893  6e50				  -	      .byte	%01100000	; RETROPUTER
    894  6e50				  -	      .byte	%01100000	; RETROPUTER
    895  6e50				  -	      .byte	%01100000	; RETROPUTER
    896  6e50				  -	      .byte	%00111110	; RETROPUTER
    897  6e50				  -	      .byte	%00000010	; RETROPUTER
    898  6e50				  -	      .byte	%01000010	; RETROPUTER
    899  6e50				  -	      .byte	%01111110	; RETROPUTER
    900  6e50				  -
    901  6e50				  -			;byte %00000000 ; RETROPUTER
    902  6e50				  -
    903  6e50				  -	      .byte	%01111110	; RETROPUTER
    904  6e50				  -	      .byte	%01000110	; RETROPUTER
    905  6e50				  -	      .byte	%00000110	; RETROPUTER
    906  6e50				  -	      .byte	%00000110	; RETROPUTER
    907  6e50				  -	      .byte	%00111110	; RETROPUTER
    908  6e50				  -	      .byte	%00000010	; RETROPUTER
    909  6e50				  -	      .byte	%01000010	; RETROPUTER
    910  6e50				  -	      .byte	%01111110	; RETROPUTER
    911  6e50				  -
    912  6e50				  -			;byte %00000000 ; RETROPUTER
    913  6e50				  -
    914  6e50				  -	      .byte	%00001100	; RETROPUTER
    915  6e50				  -	      .byte	%00001100	; RETROPUTER
    916  6e50				  -	      .byte	%00001100	; RETROPUTER
    917  6e50				  -	      .byte	%01111110	; RETROPUTER
    918  6e50				  -	      .byte	%01000100	; RETROPUTER
    919  6e50				  -	      .byte	%01000100	; RETROPUTER
    920  6e50				  -	      .byte	%01000100	; RETROPUTER
    921  6e50				  -	      .byte	%00000100	; RETROPUTER
    922  6e50				  -
    923  6e50				  -			;byte %00000000 ; RETROPUTER
    924  6e50				  -
    925  6e50				  -	      .byte	%01111110	; RETROPUTER
    926  6e50				  -	      .byte	%01000110	; RETROPUTER
    927  6e50				  -	      .byte	%00000110	; RETROPUTER
    928  6e50				  -	      .byte	%00000110	; RETROPUTER
    929  6e50				  -	      .byte	%01111100	; RETROPUTER
    930  6e50				  -	      .byte	%01000000	; RETROPUTER
    931  6e50				  -	      .byte	%01000000	; RETROPUTER
    932  6e50				  -	      .byte	%01111110	; RETROPUTER
    933  6e50				  -
    934  6e50				  -			;byte %00000000 ; RETROPUTER
    935  6e50				  -
    936  6e50				  -	      .byte	%01111110	; RETROPUTER
    937  6e50				  -	      .byte	%01000110	; RETROPUTER
    938  6e50				  -	      .byte	%01000110	; RETROPUTER
    939  6e50				  -	      .byte	%01000110	; RETROPUTER
    940  6e50				  -	      .byte	%01111100	; RETROPUTER
    941  6e50				  -	      .byte	%01000000	; RETROPUTER
    942  6e50				  -	      .byte	%01000010	; RETROPUTER
    943  6e50				  -	      .byte	%01111110	; RETROPUTER
    944  6e50				  -
    945  6e50				  -			;byte %00000000 ; RETROPUTER
    946  6e50				  -
    947  6e50				  -	      .byte	%00001100	; RETROPUTER
    948  6e50				  -	      .byte	%00001100	; RETROPUTER
    949  6e50				  -	      .byte	%00001100	; RETROPUTER
    950  6e50				  -	      .byte	%00001100	; RETROPUTER
    951  6e50				  -	      .byte	%00000100	; RETROPUTER
    952  6e50				  -	      .byte	%00000010	; RETROPUTER
    953  6e50				  -	      .byte	%01000010	; RETROPUTER
    954  6e50				  -	      .byte	%01111110	; RETROPUTER
    955  6e50				  -
    956  6e50				  -			;byte %00000000 ; RETROPUTER
    957  6e50				  -
    958  6e50				  -	      .byte	%01111110	; RETROPUTER
    959  6e50				  -	      .byte	%01000110	; RETROPUTER
    960  6e50				  -	      .byte	%01000110	; RETROPUTER
    961  6e50				  -	      .byte	%01000110	; RETROPUTER
    962  6e50				  -	      .byte	%01111110	; RETROPUTER
    963  6e50				  -	      .byte	%01000010	; RETROPUTER
    964  6e50				  -	      .byte	%01000010	; RETROPUTER
    965  6e50				  -	      .byte	%01111110	; RETROPUTER
    966  6e50				  -
    967  6e50				  -			;byte %00000000 ; RETROPUTER
    968  6e50				  -
    969  6e50				  -	      .byte	%00000110	; RETROPUTER
    970  6e50				  -	      .byte	%00000110	; RETROPUTER
    971  6e50				  -	      .byte	%00000110	; RETROPUTER
    972  6e50				  -	      .byte	%00000010	; RETROPUTER
    973  6e50				  -	      .byte	%01111110	; RETROPUTER
    974  6e50				  -	      .byte	%01000010	; RETROPUTER
    975  6e50				  -	      .byte	%01000010	; RETROPUTER
    976  6e50				  -	      .byte	%01111110	; RETROPUTER
    977  6e50				  -
    978  6e50					      endif		; RETROPUTER
    979  6e50
    980  6e50				  -	      if	fontstyle == CURVES
    981  6e50				  -
    982  6e50				  -			;byte %00000000 ; CURVES
    983  6e50				  -
    984  6e50				  -	      .byte	%00111100	; CURVES
    985  6e50				  -	      .byte	%01111110	; CURVES
    986  6e50				  -	      .byte	%01100110	; CURVES
    987  6e50				  -	      .byte	%01100110	; CURVES
    988  6e50				  -	      .byte	%01100110	; CURVES
    989  6e50				  -	      .byte	%01100110	; CURVES
    990  6e50				  -	      .byte	%01111110	; CURVES
    991  6e50				  -	      .byte	%00111100	; CURVES
    992  6e50				  -
    993  6e50				  -			;byte %00000000 ; CURVES
    994  6e50				  -
    995  6e50				  -	      .byte	%00011000	; CURVES
    996  6e50				  -	      .byte	%00011000	; CURVES
    997  6e50				  -	      .byte	%00011000	; CURVES
    998  6e50				  -	      .byte	%00011000	; CURVES
    999  6e50				  -	      .byte	%00011000	; CURVES
   1000  6e50				  -	      .byte	%00011000	; CURVES
   1001  6e50				  -	      .byte	%01111000	; CURVES
   1002  6e50				  -	      .byte	%01110000	; CURVES
   1003  6e50				  -
   1004  6e50				  -			;byte %00000000 ; CURVES
   1005  6e50				  -
   1006  6e50				  -	      .byte	%01111110	; CURVES
   1007  6e50				  -	      .byte	%01111110	; CURVES
   1008  6e50				  -	      .byte	%01100000	; CURVES
   1009  6e50				  -	      .byte	%01111100	; CURVES
   1010  6e50				  -	      .byte	%00111110	; CURVES
   1011  6e50				  -	      .byte	%00000110	; CURVES
   1012  6e50				  -	      .byte	%01111110	; CURVES
   1013  6e50				  -	      .byte	%01111100	; CURVES
   1014  6e50				  -
   1015  6e50				  -			;byte %00000000 ; CURVES
   1016  6e50				  -
   1017  6e50				  -	      .byte	%01111100	; CURVES
   1018  6e50				  -	      .byte	%01111110	; CURVES
   1019  6e50				  -	      .byte	%00001110	; CURVES
   1020  6e50				  -	      .byte	%00111100	; CURVES
   1021  6e50				  -	      .byte	%00111100	; CURVES
   1022  6e50				  -	      .byte	%00001110	; CURVES
   1023  6e50				  -	      .byte	%01111110	; CURVES
   1024  6e50				  -	      .byte	%01111100	; CURVES
   1025  6e50				  -
   1026  6e50				  -			;byte %00000000 ; CURVES
   1027  6e50				  -
   1028  6e50				  -	      .byte	%00000110	; CURVES
   1029  6e50				  -	      .byte	%00000110	; CURVES
   1030  6e50				  -	      .byte	%00111110	; CURVES
   1031  6e50				  -	      .byte	%01111110	; CURVES
   1032  6e50				  -	      .byte	%01100110	; CURVES
   1033  6e50				  -	      .byte	%01100110	; CURVES
   1034  6e50				  -	      .byte	%01100110	; CURVES
   1035  6e50				  -	      .byte	%01100110	; CURVES
   1036  6e50				  -
   1037  6e50				  -			;byte %00000000 ; CURVES
   1038  6e50				  -
   1039  6e50				  -	      .byte	%01111100	; CURVES
   1040  6e50				  -	      .byte	%01111110	; CURVES
   1041  6e50				  -	      .byte	%00000110	; CURVES
   1042  6e50				  -	      .byte	%01111110	; CURVES
   1043  6e50				  -	      .byte	%01111100	; CURVES
   1044  6e50				  -	      .byte	%01100000	; CURVES
   1045  6e50				  -	      .byte	%01111110	; CURVES
   1046  6e50				  -	      .byte	%01111110	; CURVES
   1047  6e50				  -
   1048  6e50				  -			;byte %00000000 ; CURVES
   1049  6e50				  -
   1050  6e50				  -	      .byte	%00111100	; CURVES
   1051  6e50				  -	      .byte	%01111110	; CURVES
   1052  6e50				  -	      .byte	%01100110	; CURVES
   1053  6e50				  -	      .byte	%01111110	; CURVES
   1054  6e50				  -	      .byte	%01111100	; CURVES
   1055  6e50				  -	      .byte	%01100000	; CURVES
   1056  6e50				  -	      .byte	%01111110	; CURVES
   1057  6e50				  -	      .byte	%00111110	; CURVES
   1058  6e50				  -
   1059  6e50				  -			;byte %00000000 ; CURVES
   1060  6e50				  -
   1061  6e50				  -	      .byte	%00000110	; CURVES
   1062  6e50				  -	      .byte	%00000110	; CURVES
   1063  6e50				  -	      .byte	%00000110	; CURVES
   1064  6e50				  -	      .byte	%00000110	; CURVES
   1065  6e50				  -	      .byte	%00000110	; CURVES
   1066  6e50				  -	      .byte	%01100110	; CURVES
   1067  6e50				  -	      .byte	%01111110	; CURVES
   1068  6e50				  -	      .byte	%00111100	; CURVES
   1069  6e50				  -
   1070  6e50				  -			;byte %00000000 ; CURVES
   1071  6e50				  -
   1072  6e50				  -	      .byte	%00111100	; CURVES
   1073  6e50				  -	      .byte	%01111110	; CURVES
   1074  6e50				  -	      .byte	%01100110	; CURVES
   1075  6e50				  -	      .byte	%01111110	; CURVES
   1076  6e50				  -	      .byte	%00111100	; CURVES
   1077  6e50				  -	      .byte	%01100110	; CURVES
   1078  6e50				  -	      .byte	%01111110	; CURVES
   1079  6e50				  -	      .byte	%00111100	; CURVES
   1080  6e50				  -
   1081  6e50				  -			;byte %00000000 ; CURVES
   1082  6e50				  -
   1083  6e50				  -	      .byte	%01111100	; CURVES
   1084  6e50				  -	      .byte	%01111110	; CURVES
   1085  6e50				  -	      .byte	%00000110	; CURVES
   1086  6e50				  -	      .byte	%00111110	; CURVES
   1087  6e50				  -	      .byte	%01111110	; CURVES
   1088  6e50				  -	      .byte	%01100110	; CURVES
   1089  6e50				  -	      .byte	%01111110	; CURVES
   1090  6e50				  -	      .byte	%00111100	; CURVES
   1091  6e50				  -
   1092  6e50					      endif		; CURVES
   1093  6e50
   1094  6e50
   1095  6e50				  -	      if	fontstyle == HUSKY
   1096  6e50				  -
   1097  6e50				  -			;byte %00000000 ; HUSKY
   1098  6e50				  -
   1099  6e50				  -	      .byte	%01111100	; HUSKY
   1100  6e50				  -	      .byte	%11111110	; HUSKY
   1101  6e50				  -	      .byte	%11101110	; HUSKY
   1102  6e50				  -	      .byte	%11101110	; HUSKY
   1103  6e50				  -	      .byte	%11101110	; HUSKY
   1104  6e50				  -	      .byte	%11101110	; HUSKY
   1105  6e50				  -	      .byte	%11111110	; HUSKY
   1106  6e50				  -	      .byte	%01111100	; HUSKY
   1107  6e50				  -
   1108  6e50				  -			;byte %00000000 ; HUSKY
   1109  6e50				  -
   1110  6e50				  -	      .byte	%00111000	; HUSKY
   1111  6e50				  -	      .byte	%00111000	; HUSKY
   1112  6e50				  -	      .byte	%00111000	; HUSKY
   1113  6e50				  -	      .byte	%00111000	; HUSKY
   1114  6e50				  -	      .byte	%00111000	; HUSKY
   1115  6e50				  -	      .byte	%00111000	; HUSKY
   1116  6e50				  -	      .byte	%00111000	; HUSKY
   1117  6e50				  -	      .byte	%00111000	; HUSKY
   1118  6e50				  -
   1119  6e50				  -			;byte %00000000 ; HUSKY
   1120  6e50				  -
   1121  6e50				  -	      .byte	%11111110	; HUSKY
   1122  6e50				  -	      .byte	%11111110	; HUSKY
   1123  6e50				  -	      .byte	%11100000	; HUSKY
   1124  6e50				  -	      .byte	%11111100	; HUSKY
   1125  6e50				  -	      .byte	%01111110	; HUSKY
   1126  6e50				  -	      .byte	%00001110	; HUSKY
   1127  6e50				  -	      .byte	%11111110	; HUSKY
   1128  6e50				  -	      .byte	%11111100	; HUSKY
   1129  6e50				  -
   1130  6e50				  -			;byte %00000000 ; HUSKY
   1131  6e50				  -
   1132  6e50				  -	      .byte	%11111100	; HUSKY
   1133  6e50				  -	      .byte	%11111110	; HUSKY
   1134  6e50				  -	      .byte	%00001110	; HUSKY
   1135  6e50				  -	      .byte	%11111100	; HUSKY
   1136  6e50				  -	      .byte	%11111100	; HUSKY
   1137  6e50				  -	      .byte	%00001110	; HUSKY
   1138  6e50				  -	      .byte	%11111110	; HUSKY
   1139  6e50				  -	      .byte	%11111100	; HUSKY
   1140  6e50				  -
   1141  6e50				  -			;byte %00000000 ; HUSKY
   1142  6e50				  -
   1143  6e50				  -	      .byte	%00011100	; HUSKY
   1144  6e50				  -	      .byte	%00011100	; HUSKY
   1145  6e50				  -	      .byte	%11111110	; HUSKY
   1146  6e50				  -	      .byte	%11111110	; HUSKY
   1147  6e50				  -	      .byte	%11011100	; HUSKY
   1148  6e50				  -	      .byte	%11011100	; HUSKY
   1149  6e50				  -	      .byte	%00011100	; HUSKY
   1150  6e50				  -	      .byte	%00011100	; HUSKY
   1151  6e50				  -
   1152  6e50				  -			;byte %00000000 ; HUSKY
   1153  6e50				  -
   1154  6e50				  -	      .byte	%11111100	; HUSKY
   1155  6e50				  -	      .byte	%11111110	; HUSKY
   1156  6e50				  -	      .byte	%00001110	; HUSKY
   1157  6e50				  -	      .byte	%11111110	; HUSKY
   1158  6e50				  -	      .byte	%11111100	; HUSKY
   1159  6e50				  -	      .byte	%11100000	; HUSKY
   1160  6e50				  -	      .byte	%11111110	; HUSKY
   1161  6e50				  -	      .byte	%11111110	; HUSKY
   1162  6e50				  -
   1163  6e50				  -			;byte %00000000 ; HUSKY
   1164  6e50				  -
   1165  6e50				  -	      .byte	%01111100	; HUSKY
   1166  6e50				  -	      .byte	%11111110	; HUSKY
   1167  6e50				  -	      .byte	%11101110	; HUSKY
   1168  6e50				  -	      .byte	%11111110	; HUSKY
   1169  6e50				  -	      .byte	%11111100	; HUSKY
   1170  6e50				  -	      .byte	%11100000	; HUSKY
   1171  6e50				  -	      .byte	%11111110	; HUSKY
   1172  6e50				  -	      .byte	%01111110	; HUSKY
   1173  6e50				  -
   1174  6e50				  -			;byte %00000000 ; HUSKY
   1175  6e50				  -
   1176  6e50				  -	      .byte	%00111000	; HUSKY
   1177  6e50				  -	      .byte	%00111000	; HUSKY
   1178  6e50				  -	      .byte	%00111000	; HUSKY
   1179  6e50				  -	      .byte	%00111000	; HUSKY
   1180  6e50				  -	      .byte	%00011100	; HUSKY
   1181  6e50				  -	      .byte	%00001110	; HUSKY
   1182  6e50				  -	      .byte	%11111110	; HUSKY
   1183  6e50				  -	      .byte	%11111110	; HUSKY
   1184  6e50				  -
   1185  6e50				  -			;byte %00000000 ; HUSKY
   1186  6e50				  -
   1187  6e50				  -	      .byte	%01111100	; HUSKY
   1188  6e50				  -	      .byte	%11111110	; HUSKY
   1189  6e50				  -	      .byte	%11101110	; HUSKY
   1190  6e50				  -	      .byte	%11111110	; HUSKY
   1191  6e50				  -	      .byte	%01111100	; HUSKY
   1192  6e50				  -	      .byte	%11101110	; HUSKY
   1193  6e50				  -	      .byte	%11111110	; HUSKY
   1194  6e50				  -	      .byte	%01111100	; HUSKY
   1195  6e50				  -
   1196  6e50				  -			;byte %00000000 ; HUSKY
   1197  6e50				  -
   1198  6e50				  -	      .byte	%11111100	; HUSKY
   1199  6e50				  -	      .byte	%11111110	; HUSKY
   1200  6e50				  -	      .byte	%00001110	; HUSKY
   1201  6e50				  -	      .byte	%01111110	; HUSKY
   1202  6e50				  -	      .byte	%11111110	; HUSKY
   1203  6e50				  -	      .byte	%11101110	; HUSKY
   1204  6e50				  -	      .byte	%11111110	; HUSKY
   1205  6e50				  -	      .byte	%01111100	; HUSKY
   1206  6e50				  -
   1207  6e50					      endif		; HUSKY
   1208  6e50
   1209  6e50
   1210  6e50				  -	      if	fontstyle == SNAKE
   1211  6e50				  -
   1212  6e50				  -			;byte %00000000 ; SNAKE
   1213  6e50				  -
   1214  6e50				  -	      .byte	%01111110	; SNAKE
   1215  6e50				  -	      .byte	%01000010	; SNAKE
   1216  6e50				  -	      .byte	%01000010	; SNAKE
   1217  6e50				  -	      .byte	%01000010	; SNAKE
   1218  6e50				  -	      .byte	%01000010	; SNAKE
   1219  6e50				  -	      .byte	%01000010	; SNAKE
   1220  6e50				  -	      .byte	%01000010	; SNAKE
   1221  6e50				  -	      .byte	%01111110	; SNAKE
   1222  6e50				  -
   1223  6e50				  -			;byte %00000000 ; SNAKE
   1224  6e50				  -
   1225  6e50				  -	      .byte	%00111000	; SNAKE
   1226  6e50				  -	      .byte	%00101000	; SNAKE
   1227  6e50				  -	      .byte	%00001000	; SNAKE
   1228  6e50				  -	      .byte	%00001000	; SNAKE
   1229  6e50				  -	      .byte	%00001000	; SNAKE
   1230  6e50				  -	      .byte	%00001000	; SNAKE
   1231  6e50				  -	      .byte	%00001000	; SNAKE
   1232  6e50				  -	      .byte	%00111000	; SNAKE
   1233  6e50				  -
   1234  6e50				  -			;byte %00000000 ; SNAKE
   1235  6e50				  -
   1236  6e50				  -	      .byte	%01111110	; SNAKE
   1237  6e50				  -	      .byte	%01000010	; SNAKE
   1238  6e50				  -	      .byte	%01000110	; SNAKE
   1239  6e50				  -	      .byte	%01000000	; SNAKE
   1240  6e50				  -	      .byte	%01111110	; SNAKE
   1241  6e50				  -	      .byte	%00000010	; SNAKE
   1242  6e50				  -	      .byte	%01000010	; SNAKE
   1243  6e50				  -	      .byte	%01111110	; SNAKE
   1244  6e50				  -
   1245  6e50				  -			;byte %00000000 ; SNAKE
   1246  6e50				  -
   1247  6e50				  -	      .byte	%01111110	; SNAKE
   1248  6e50				  -	      .byte	%01000010	; SNAKE
   1249  6e50				  -	      .byte	%01100010	; SNAKE
   1250  6e50				  -	      .byte	%00000010	; SNAKE
   1251  6e50				  -	      .byte	%01111110	; SNAKE
   1252  6e50				  -	      .byte	%00000010	; SNAKE
   1253  6e50				  -	      .byte	%01000010	; SNAKE
   1254  6e50				  -	      .byte	%01111110	; SNAKE
   1255  6e50				  -
   1256  6e50				  -			;byte %00000000 ; SNAKE
   1257  6e50				  -
   1258  6e50				  -	      .byte	%00001110	; SNAKE
   1259  6e50				  -	      .byte	%00001010	; SNAKE
   1260  6e50				  -	      .byte	%00000010	; SNAKE
   1261  6e50				  -	      .byte	%01111110	; SNAKE
   1262  6e50				  -	      .byte	%01000010	; SNAKE
   1263  6e50				  -	      .byte	%01000010	; SNAKE
   1264  6e50				  -	      .byte	%01000010	; SNAKE
   1265  6e50				  -	      .byte	%01100110	; SNAKE
   1266  6e50				  -
   1267  6e50				  -			;byte %00000000 ; SNAKE
   1268  6e50				  -
   1269  6e50				  -	      .byte	%01111110	; SNAKE
   1270  6e50				  -	      .byte	%01000010	; SNAKE
   1271  6e50				  -	      .byte	%01100010	; SNAKE
   1272  6e50				  -	      .byte	%00000010	; SNAKE
   1273  6e50				  -	      .byte	%01111110	; SNAKE
   1274  6e50				  -	      .byte	%01000000	; SNAKE
   1275  6e50				  -	      .byte	%01000010	; SNAKE
   1276  6e50				  -	      .byte	%01111110	; SNAKE
   1277  6e50				  -
   1278  6e50				  -			;byte %00000000 ; SNAKE
   1279  6e50				  -
   1280  6e50				  -	      .byte	%01111110	; SNAKE
   1281  6e50				  -	      .byte	%01000010	; SNAKE
   1282  6e50				  -	      .byte	%01000010	; SNAKE
   1283  6e50				  -	      .byte	%01111110	; SNAKE
   1284  6e50				  -	      .byte	%01000000	; SNAKE
   1285  6e50				  -	      .byte	%01000110	; SNAKE
   1286  6e50				  -	      .byte	%01000010	; SNAKE
   1287  6e50				  -	      .byte	%01111110	; SNAKE
   1288  6e50				  -
   1289  6e50				  -			;byte %00000000 ; SNAKE
   1290  6e50				  -
   1291  6e50				  -	      .byte	%00000110	; SNAKE
   1292  6e50				  -	      .byte	%00000010	; SNAKE
   1293  6e50				  -	      .byte	%00000010	; SNAKE
   1294  6e50				  -	      .byte	%00000010	; SNAKE
   1295  6e50				  -	      .byte	%00000010	; SNAKE
   1296  6e50				  -	      .byte	%01100010	; SNAKE
   1297  6e50				  -	      .byte	%01000010	; SNAKE
   1298  6e50				  -	      .byte	%01111110	; SNAKE
   1299  6e50				  -
   1300  6e50				  -			;byte %00000000 ; SNAKE
   1301  6e50				  -
   1302  6e50				  -	      .byte	%01111110	; SNAKE
   1303  6e50				  -	      .byte	%01000010	; SNAKE
   1304  6e50				  -	      .byte	%01000010	; SNAKE
   1305  6e50				  -	      .byte	%01000010	; SNAKE
   1306  6e50				  -	      .byte	%01111110	; SNAKE
   1307  6e50				  -	      .byte	%01000010	; SNAKE
   1308  6e50				  -	      .byte	%01000010	; SNAKE
   1309  6e50				  -	      .byte	%01111110	; SNAKE
   1310  6e50				  -
   1311  6e50				  -			;byte %00000000 ; SNAKE
   1312  6e50				  -
   1313  6e50				  -	      .byte	%00001110	; SNAKE
   1314  6e50				  -	      .byte	%00001010	; SNAKE
   1315  6e50				  -	      .byte	%00000010	; SNAKE
   1316  6e50				  -	      .byte	%00000010	; SNAKE
   1317  6e50				  -	      .byte	%01111110	; SNAKE
   1318  6e50				  -	      .byte	%01000010	; SNAKE
   1319  6e50				  -	      .byte	%01000010	; SNAKE
   1320  6e50				  -	      .byte	%01111110	; SNAKE
   1321  6e50				  -
   1322  6e50				  -
   1323  6e50					      endif		; SNAKE
   1324  6e50
   1325  6e50				  -	      if	fontstyle == PLOK
   1326  6e50				  -
   1327  6e50				  -			;byte %00000000 ; PLOK
   1328  6e50				  -
   1329  6e50				  -	      .byte	%00000000	; PLOK
   1330  6e50				  -	      .byte	%00111000	; PLOK
   1331  6e50				  -	      .byte	%01100100	; PLOK
   1332  6e50				  -	      .byte	%01100010	; PLOK
   1333  6e50				  -	      .byte	%01100010	; PLOK
   1334  6e50				  -	      .byte	%00110110	; PLOK
   1335  6e50				  -	      .byte	%00011100	; PLOK
   1336  6e50				  -	      .byte	%00000000	; PLOK
   1337  6e50				  -
   1338  6e50				  -			;byte %00000000 ; PLOK
   1339  6e50				  -
   1340  6e50				  -	      .byte	%00000000	; PLOK
   1341  6e50				  -	      .byte	%00010000	; PLOK
   1342  6e50				  -	      .byte	%00011100	; PLOK
   1343  6e50				  -	      .byte	%00011100	; PLOK
   1344  6e50				  -	      .byte	%00011000	; PLOK
   1345  6e50				  -	      .byte	%00111000	; PLOK
   1346  6e50				  -	      .byte	%00011000	; PLOK
   1347  6e50				  -	      .byte	%00000000	; PLOK
   1348  6e50				  -
   1349  6e50				  -			;byte %00000000 ; PLOK
   1350  6e50				  -
   1351  6e50				  -	      .byte	%00000000	; PLOK
   1352  6e50				  -	      .byte	%00001110	; PLOK
   1353  6e50				  -	      .byte	%01111110	; PLOK
   1354  6e50				  -	      .byte	%00011000	; PLOK
   1355  6e50				  -	      .byte	%00001100	; PLOK
   1356  6e50				  -	      .byte	%00000110	; PLOK
   1357  6e50				  -	      .byte	%00111100	; PLOK
   1358  6e50				  -	      .byte	%00000000	; PLOK
   1359  6e50				  -
   1360  6e50				  -			;byte %00000000 ; PLOK
   1361  6e50				  -
   1362  6e50				  -	      .byte	%00000000	; PLOK
   1363  6e50				  -	      .byte	%00111100	; PLOK
   1364  6e50				  -	      .byte	%01101110	; PLOK
   1365  6e50				  -	      .byte	%00001110	; PLOK
   1366  6e50				  -	      .byte	%00011100	; PLOK
   1367  6e50				  -	      .byte	%00000110	; PLOK
   1368  6e50				  -	      .byte	%01111100	; PLOK
   1369  6e50				  -	      .byte	%00000000	; PLOK
   1370  6e50				  -
   1371  6e50				  -			;byte %00000000 ; PLOK
   1372  6e50				  -
   1373  6e50				  -	      .byte	%00000000	; PLOK
   1374  6e50				  -	      .byte	%00011000	; PLOK
   1375  6e50				  -	      .byte	%01111110	; PLOK
   1376  6e50				  -	      .byte	%01101100	; PLOK
   1377  6e50				  -	      .byte	%00100100	; PLOK
   1378  6e50				  -	      .byte	%00110000	; PLOK
   1379  6e50				  -	      .byte	%00110000	; PLOK
   1380  6e50				  -	      .byte	%00000000	; PLOK
   1381  6e50				  -
   1382  6e50				  -			;byte %00000000 ; PLOK
   1383  6e50				  -
   1384  6e50				  -	      .byte	%00000000	; PLOK
   1385  6e50				  -	      .byte	%00111100	; PLOK
   1386  6e50				  -	      .byte	%01001110	; PLOK
   1387  6e50				  -	      .byte	%00011100	; PLOK
   1388  6e50				  -	      .byte	%01100000	; PLOK
   1389  6e50				  -	      .byte	%01111100	; PLOK
   1390  6e50				  -	      .byte	%00011100	; PLOK
   1391  6e50				  -	      .byte	%00000000	; PLOK
   1392  6e50				  -
   1393  6e50				  -			;byte %00000000 ; PLOK
   1394  6e50				  -
   1395  6e50				  -	      .byte	%00000000	; PLOK
   1396  6e50				  -	      .byte	%00111100	; PLOK
   1397  6e50				  -	      .byte	%01000110	; PLOK
   1398  6e50				  -	      .byte	%01101100	; PLOK
   1399  6e50				  -	      .byte	%01110000	; PLOK
   1400  6e50				  -	      .byte	%00111000	; PLOK
   1401  6e50				  -	      .byte	%00010000	; PLOK
   1402  6e50				  -	      .byte	%00000000	; PLOK
   1403  6e50				  -
   1404  6e50				  -			;byte %00000000 ; PLOK
   1405  6e50				  -
   1406  6e50				  -	      .byte	%00000000	; PLOK
   1407  6e50				  -	      .byte	%00111100	; PLOK
   1408  6e50				  -	      .byte	%00011100	; PLOK
   1409  6e50				  -	      .byte	%00001100	; PLOK
   1410  6e50				  -	      .byte	%00000110	; PLOK
   1411  6e50				  -	      .byte	%01111110	; PLOK
   1412  6e50				  -	      .byte	%00110000	; PLOK
   1413  6e50				  -	      .byte	%00000000	; PLOK
   1414  6e50				  -
   1415  6e50				  -			;byte %00000000 ; PLOK
   1416  6e50				  -
   1417  6e50				  -	      .byte	%00000000	; PLOK
   1418  6e50				  -	      .byte	%00111100	; PLOK
   1419  6e50				  -	      .byte	%01001110	; PLOK
   1420  6e50				  -	      .byte	%01101110	; PLOK
   1421  6e50				  -	      .byte	%00111100	; PLOK
   1422  6e50				  -	      .byte	%01100100	; PLOK
   1423  6e50				  -	      .byte	%00111000	; PLOK
   1424  6e50				  -	      .byte	%00000000	; PLOK
   1425  6e50				  -
   1426  6e50				  -			;byte %00000000 ; PLOK
   1427  6e50				  -
   1428  6e50				  -	      .byte	%00000000	; PLOK
   1429  6e50				  -	      .byte	%00011000	; PLOK
   1430  6e50				  -	      .byte	%00001100	; PLOK
   1431  6e50				  -	      .byte	%00011100	; PLOK
   1432  6e50				  -	      .byte	%00100110	; PLOK
   1433  6e50				  -	      .byte	%01001110	; PLOK
   1434  6e50				  -	      .byte	%00111100	; PLOK
   1435  6e50				  -	      .byte	%00000000	; PLOK
   1436  6e50				  -
   1437  6e50					      endif		; PLOK
   1438  6e50
   1439  6e50							; ### any characters that aren't font specific follow...
   1440  6e50
   1441  6e50				  -	      ifconst	fontcharSPACE
   1442  6e50				  -			;byte %00000000 ; SYMBOLS
   1443  6e50				  -
   1444  6e50				  -	      .byte	%00000000	; SYMBOLS
   1445  6e50				  -	      .byte	%00000000	; SYMBOLS
   1446  6e50				  -	      .byte	%00000000	; SYMBOLS
   1447  6e50				  -	      .byte	%00000000	; SYMBOLS
   1448  6e50				  -	      .byte	%00000000	; SYMBOLS
   1449  6e50				  -	      .byte	%00000000	; SYMBOLS
   1450  6e50				  -	      .byte	%00000000	; SYMBOLS
   1451  6e50				  -	      .byte	%00000000	; SYMBOLS
   1452  6e50				  -
   1453  6e50				  -			;byte %00000000 ; SYMBOLS
   1454  6e50					      endif		; fontcharSPACE
   1455  6e50
   1456  6e50				  -	      ifconst	fontcharDOLLAR
   1457  6e50				  -			;byte %00000000 ; SYMBOLS
   1458  6e50				  -
   1459  6e50				  -	      .byte	%00000000	; SYMBOLS
   1460  6e50				  -	      .byte	%00010000	; SYMBOLS
   1461  6e50				  -	      .byte	%01111100	; SYMBOLS
   1462  6e50				  -	      .byte	%00010010	; SYMBOLS
   1463  6e50				  -	      .byte	%01111100	; SYMBOLS
   1464  6e50				  -	      .byte	%10010000	; SYMBOLS
   1465  6e50				  -	      .byte	%01111100	; SYMBOLS
   1466  6e50				  -	      .byte	%00010000	; SYMBOLS
   1467  6e50				  -
   1468  6e50				  -			;byte %00000000 ; SYMBOLS
   1469  6e50				  -
   1470  6e50					      endif		; fontcharDOLLAR
   1471  6e50
   1472  6e50				  -	      ifconst	fontcharPOUND
   1473  6e50				  -			;byte %00000000 ; SYMBOLS
   1474  6e50				  -
   1475  6e50				  -	      .byte	%01111110	; SYMBOLS
   1476  6e50				  -	      .byte	%01000000	; SYMBOLS
   1477  6e50				  -	      .byte	%00100000	; SYMBOLS
   1478  6e50				  -	      .byte	%00100000	; SYMBOLS
   1479  6e50				  -	      .byte	%01111000	; SYMBOLS
   1480  6e50				  -	      .byte	%00100000	; SYMBOLS
   1481  6e50				  -	      .byte	%00100010	; SYMBOLS
   1482  6e50				  -	      .byte	%00011100	; SYMBOLS
   1483  6e50				  -
   1484  6e50				  -			;byte %00000000 ; SYMBOLS
   1485  6e50				  -
   1486  6e50					      endif		; fontcharPOUND
   1487  6e50
   1488  6e50
   1489  6e50				  -	      ifconst	fontcharMRHAPPY
   1490  6e50				  -			;byte %00000000 ; SYMBOLS
   1491  6e50				  -
   1492  6e50				  -	      .byte	%00111100	; SYMBOLS
   1493  6e50				  -	      .byte	%01100110	; SYMBOLS
   1494  6e50				  -	      .byte	%01011010	; SYMBOLS
   1495  6e50				  -	      .byte	%01111110	; SYMBOLS
   1496  6e50				  -	      .byte	%01111110	; SYMBOLS
   1497  6e50				  -	      .byte	%01011010	; SYMBOLS
   1498  6e50				  -	      .byte	%01111110	; SYMBOLS
   1499  6e50				  -	      .byte	%00111100	; SYMBOLS
   1500  6e50				  -
   1501  6e50				  -			;byte %00000000 ; SYMBOLS
   1502  6e50				  -
   1503  6e50					      endif		; fontcharMRHAPPY
   1504  6e50
   1505  6e50				  -	      ifconst	fontcharMRSAD
   1506  6e50				  -			;byte %00000000 ; SYMBOLS
   1507  6e50				  -
   1508  6e50				  -	      .byte	%00111100	; SYMBOLS
   1509  6e50				  -	      .byte	%01011010	; SYMBOLS
   1510  6e50				  -	      .byte	%01100110	; SYMBOLS
   1511  6e50				  -	      .byte	%01111110	; SYMBOLS
   1512  6e50				  -	      .byte	%01111110	; SYMBOLS
   1513  6e50				  -	      .byte	%01011010	; SYMBOLS
   1514  6e50				  -	      .byte	%01111110	; SYMBOLS
   1515  6e50				  -	      .byte	%00111100	; SYMBOLS
   1516  6e50				  -
   1517  6e50				  -			;byte %00000000 ; SYMBOLS
   1518  6e50				  -
   1519  6e50					      endif		; fontcharMRSAD
   1520  6e50
   1521  6e50
   1522  6e50				  -	      ifconst	fontcharCOPYRIGHT
   1523  6e50				  -			;byte %00000000 ; SYMBOLS
   1524  6e50				  -
   1525  6e50				  -	      .byte	%00000000	; SYMBOLS
   1526  6e50				  -	      .byte	%00111000	; SYMBOLS
   1527  6e50				  -	      .byte	%01000100	; SYMBOLS
   1528  6e50				  -	      .byte	%10111010	; SYMBOLS
   1529  6e50				  -	      .byte	%10100010	; SYMBOLS
   1530  6e50				  -	      .byte	%10111010	; SYMBOLS
   1531  6e50				  -	      .byte	%01000100	; SYMBOLS
   1532  6e50				  -	      .byte	%00111000	; SYMBOLS
   1533  6e50				  -
   1534  6e50				  -			;byte %00000000 ; SYMBOLS
   1535  6e50				  -
   1536  6e50					      endif		; fontcharCOPYRIGHT
   1537  6e50
   1538  6e50
   1539  6e50				  -	      ifconst	fontcharFUJI
   1540  6e50				  -
   1541  6e50				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   1542  6e50				  -
   1543  6e50				  -	      .byte	%01110000	; SYMBOLS
   1544  6e50				  -	      .byte	%01111001	; SYMBOLS
   1545  6e50				  -	      .byte	%00011101	; SYMBOLS
   1546  6e50				  -	      .byte	%00001101	; SYMBOLS
   1547  6e50				  -	      .byte	%00001101	; SYMBOLS
   1548  6e50				  -	      .byte	%00001101	; SYMBOLS
   1549  6e50				  -	      .byte	%00001101	; SYMBOLS
   1550  6e50				  -	      .byte	%00000000	; SYMBOLS
   1551  6e50				  -
   1552  6e50				  -			;byte %00000000 ; SYMBOLS
   1553  6e50				  -
   1554  6e50				  -	      .byte	%00001110	; SYMBOLS
   1555  6e50				  -	      .byte	%10011110	; SYMBOLS
   1556  6e50				  -	      .byte	%10111000	; SYMBOLS
   1557  6e50				  -	      .byte	%10110000	; SYMBOLS
   1558  6e50				  -	      .byte	%10110000	; SYMBOLS
   1559  6e50				  -	      .byte	%10110000	; SYMBOLS
   1560  6e50				  -	      .byte	%10110000	; SYMBOLS
   1561  6e50				  -	      .byte	%00000000	; SYMBOLS
   1562  6e50				  -
   1563  6e50				  -			;byte %00000000 ; SYMBOLS
   1564  6e50				  -
   1565  6e50					      endif		; fontcharFUJI
   1566  6e50
   1567  6e50
   1568  6e50				  -	      ifconst	fontcharHEART
   1569  6e50				  -			;byte %00000000 ; SYMBOLS
   1570  6e50				  -
   1571  6e50				  -	      .byte	%00010000	; SYMBOLS
   1572  6e50				  -	      .byte	%00111000	; SYMBOLS
   1573  6e50				  -	      .byte	%01111100	; SYMBOLS
   1574  6e50				  -	      .byte	%01111100	; SYMBOLS
   1575  6e50				  -	      .byte	%11111110	; SYMBOLS
   1576  6e50				  -	      .byte	%11111110	; SYMBOLS
   1577  6e50				  -	      .byte	%11101110	; SYMBOLS
   1578  6e50				  -	      .byte	%01000100	; SYMBOLS
   1579  6e50				  -
   1580  6e50				  -			;byte %00000000 ; SYMBOLS
   1581  6e50				  -
   1582  6e50					      endif		; fontcharHEART
   1583  6e50
   1584  6e50				  -	      ifconst	fontcharDIAMOND
   1585  6e50				  -			;byte %00000000 ; SYMBOLS
   1586  6e50				  -
   1587  6e50				  -	      .byte	%00010000	; SYMBOLS
   1588  6e50				  -	      .byte	%00111000	; SYMBOLS
   1589  6e50				  -	      .byte	%01111100	; SYMBOLS
   1590  6e50				  -	      .byte	%11111110	; SYMBOLS
   1591  6e50				  -	      .byte	%11111110	; SYMBOLS
   1592  6e50				  -	      .byte	%01111100	; SYMBOLS
   1593  6e50				  -	      .byte	%00111000	; SYMBOLS
   1594  6e50				  -	      .byte	%00010000	; SYMBOLS
   1595  6e50				  -
   1596  6e50				  -			;byte %00000000 ; SYMBOLS
   1597  6e50				  -
   1598  6e50					      endif		; fontcharDIAMOND
   1599  6e50
   1600  6e50				  -	      ifconst	fontcharSPADE
   1601  6e50				  -			;byte %00000000 ; SYMBOLS
   1602  6e50				  -
   1603  6e50				  -	      .byte	%00111000	; SYMBOLS
   1604  6e50				  -	      .byte	%00010000	; SYMBOLS
   1605  6e50				  -	      .byte	%01010100	; SYMBOLS
   1606  6e50				  -	      .byte	%11111110	; SYMBOLS
   1607  6e50				  -	      .byte	%11111110	; SYMBOLS
   1608  6e50				  -	      .byte	%01111100	; SYMBOLS
   1609  6e50				  -	      .byte	%00111000	; SYMBOLS
   1610  6e50				  -	      .byte	%00010000	; SYMBOLS
   1611  6e50				  -
   1612  6e50				  -			;byte %00000000 ; SYMBOLS
   1613  6e50				  -
   1614  6e50					      endif		; fontcharSPADE
   1615  6e50
   1616  6e50				  -	      ifconst	fontcharCLUB
   1617  6e50				  -			;byte %00000000 ; SYMBOLS
   1618  6e50				  -
   1619  6e50				  -	      .byte	%00111000	; SYMBOLS
   1620  6e50				  -	      .byte	%00010000	; SYMBOLS
   1621  6e50				  -	      .byte	%11010110	; SYMBOLS
   1622  6e50				  -	      .byte	%11111110	; SYMBOLS
   1623  6e50				  -	      .byte	%11010110	; SYMBOLS
   1624  6e50				  -	      .byte	%00111000	; SYMBOLS
   1625  6e50				  -	      .byte	%00111000	; SYMBOLS
   1626  6e50				  -	      .byte	%00000000	; SYMBOLS
   1627  6e50				  -
   1628  6e50				  -			;byte %00000000 ; SYMBOLS
   1629  6e50				  -
   1630  6e50					      endif		; fontcharCLUB
   1631  6e50
   1632  6e50
   1633  6e50				  -	      ifconst	fontcharCOLON
   1634  6e50				  -			;byte %00000000 ; SYMBOLS
   1635  6e50				  -
   1636  6e50				  -	      .byte	%00000000	; SYMBOLS
   1637  6e50				  -	      .byte	%00011000	; SYMBOLS
   1638  6e50				  -	      .byte	%00011000	; SYMBOLS
   1639  6e50				  -	      .byte	%00000000	; SYMBOLS
   1640  6e50				  -	      .byte	%00000000	; SYMBOLS
   1641  6e50				  -	      .byte	%00011000	; SYMBOLS
   1642  6e50				  -	      .byte	%00011000	; SYMBOLS
   1643  6e50				  -	      .byte	%00000000	; SYMBOLS
   1644  6e50				  -
   1645  6e50				  -			;byte %00000000 ; SYMBOLS
   1646  6e50				  -
   1647  6e50					      endif		; fontcharCOLON
   1648  6e50
   1649  6e50
   1650  6e50				  -	      ifconst	fontcharBLOCK
   1651  6e50				  -
   1652  6e50				  -			;byte %00000000 ; SYMBOLS
   1653  6e50				  -
   1654  6e50				  -	      .byte	%11111111	; SYMBOLS
   1655  6e50				  -	      .byte	%11111111	; SYMBOLS
   1656  6e50				  -	      .byte	%11111111	; SYMBOLS
   1657  6e50				  -	      .byte	%11111111	; SYMBOLS
   1658  6e50				  -	      .byte	%11111111	; SYMBOLS
   1659  6e50				  -	      .byte	%11111111	; SYMBOLS
   1660  6e50				  -	      .byte	%11111111	; SYMBOLS
   1661  6e50				  -	      .byte	%11111111	; SYMBOLS
   1662  6e50				  -
   1663  6e50				  -			;byte %00000000 ; SYMBOLS
   1664  6e50				  -
   1665  6e50					      endif		; fontcharBLOCK
   1666  6e50
   1667  6e50				  -	      ifconst	fontcharUNDERLINE
   1668  6e50				  -
   1669  6e50				  -			;byte %00000000 ; SYMBOLS
   1670  6e50				  -
   1671  6e50				  -	      .byte	%11111111	; SYMBOLS
   1672  6e50				  -	      .byte	%00000000	; SYMBOLS
   1673  6e50				  -	      .byte	%00000000	; SYMBOLS
   1674  6e50				  -	      .byte	%00000000	; SYMBOLS
   1675  6e50				  -	      .byte	%00000000	; SYMBOLS
   1676  6e50				  -	      .byte	%00000000	; SYMBOLS
   1677  6e50				  -	      .byte	%00000000	; SYMBOLS
   1678  6e50				  -	      .byte	%00000000	; SYMBOLS
   1679  6e50				  -
   1680  6e50				  -			;byte %00000000 ; SYMBOLS
   1681  6e50				  -
   1682  6e50					      endif		; fontcharUNDERLINE
   1683  6e50
   1684  6e50				  -	      ifconst	fontcharARISIDE
   1685  6e50				  -			;byte %00000000 ; SYMBOLS
   1686  6e50				  -
   1687  6e50				  -	      .byte	%00000000	; SYMBOLS
   1688  6e50				  -	      .byte	%00101010	; SYMBOLS
   1689  6e50				  -	      .byte	%00101010	; SYMBOLS
   1690  6e50				  -	      .byte	%00101100	; SYMBOLS
   1691  6e50				  -	      .byte	%01111111	; SYMBOLS
   1692  6e50				  -	      .byte	%00110111	; SYMBOLS
   1693  6e50				  -	      .byte	%00000010	; SYMBOLS
   1694  6e50				  -	      .byte	%00000001	; SYMBOLS
   1695  6e50				  -
   1696  6e50				  -			;byte %00000000 ; SYMBOLS
   1697  6e50				  -
   1698  6e50					      endif		; fontcharARISIDE
   1699  6e50
   1700  6e50				  -	      ifconst	fontcharARIFACE
   1701  6e50				  -			;byte %00000000 ; SYMBOLS
   1702  6e50				  -
   1703  6e50				  -	      .byte	%00001000	; SYMBOLS
   1704  6e50				  -	      .byte	%00011100	; SYMBOLS
   1705  6e50				  -	      .byte	%00111110	; SYMBOLS
   1706  6e50				  -	      .byte	%00101010	; SYMBOLS
   1707  6e50				  -	      .byte	%00011100	; SYMBOLS
   1708  6e50				  -	      .byte	%01010100	; SYMBOLS
   1709  6e50				  -	      .byte	%00100100	; SYMBOLS
   1710  6e50				  -	      .byte	%00000010	; SYMBOLS
   1711  6e50				  -
   1712  6e50				  -			;byte %00000000 ; SYMBOLS
   1713  6e50				  -
   1714  6e50				  -
   1715  6e50					      endif		; fontcharARIRACE
   1716  6e50
------- FILE titlescreen/asm/titlescreen.asm
    303  6e50					      endif
    304  6e50
    305  6e50					      ifconst	mk_gameselect_on
------- FILE titlescreen/gameselect_image.asm LEVEL 3 PASS 3
      0  6e50					      include	"titlescreen/gameselect_image.asm"
      1  6e50				  -	      ifnconst	bmp_gameselect_color
      2  6e50				  -bmp_gameselect_color
      3  6e50					      endif
      4  6e50		       0f		      .byte.b	$0f
      5  6e51
      6  6e51				  -	      if	>. != >[.+5]
      7  6e51				  -	      align	256
      8  6e51					      endif
      9  6e51				   bmp_gameselect_CHAR0
     10  6e51
     11  6e51		       ee		      .byte.b	%11101110	;
     12  6e52		       88		      .byte.b	%10001000	;
     13  6e53		       8c		      .byte.b	%10001100	;
     14  6e54		       88		      .byte.b	%10001000	;
     15  6e55		       8e		      .byte.b	%10001110	;
     16  6e56
     17  6e56				  -	      if	>. != >[.+5]
     18  6e56				  -	      align	256
     19  6e56					      endif
     20  6e56				   bmp_gameselect_CHAR1
     21  6e56
     22  6e56		       4e		      .byte.b	%01001110	;
     23  6e57		       48		      .byte.b	%01001000	;
     24  6e58		       ac		      .byte.b	%10101100	;
     25  6e59		       a8		      .byte.b	%10101000	;
     26  6e5a		       ae		      .byte.b	%10101110	;
     27  6e5b
     28  6e5b				  -	      if	>. != >[.+5]
     29  6e5b				  -	      align	256
     30  6e5b					      endif
     31  6e5b				   bmp_gameselect_CHAR2
     32  6e5b		       e0		      .byte.b	%11100000	;
     33  6e5c		       80		      .byte.b	%10000000	;
     34  6e5d		       80		      .byte.b	%10000000	;
     35  6e5e		       80		      .byte.b	%10000000	;
     36  6e5f		       80		      .byte.b	%10000000	;
     37  6e60
     38  6e60				  -	      if	>. != >[.+5]
     39  6e60				  -	      align	256
     40  6e60					      endif
     41  6e60				   bmp_gameselect_CHAR3
     42  6e60		       00		      .byte.b	%00000000
     43  6e61		       00		      .byte.b	%00000000
     44  6e62		       00		      .byte.b	%00000000
     45  6e63		       00		      .byte.b	%00000000
     46  6e64		       00		      .byte.b	%00000000
     47  6e65
     48  6e65				  -	      if	>. != >[.+80]
     49  6e65				  -	      align	256
     50  6e65					      endif
     51  6e65
     52  6e65
     53  6e65
     54  6e65				  -	      if	>. != >[.+80]
     55  6e65				  -	      align	256
     56  6e65					      endif
     57  6e65
     58  6e65				   font_gameselect_img
     59  6e65		       3c		      .byte.b	%00111100
     60  6e66		       66		      .byte.b	%01100110
     61  6e67		       66		      .byte.b	%01100110
     62  6e68		       66		      .byte.b	%01100110
     63  6e69		       3c		      .byte.b	%00111100
     64  6e6a
     65  6e6a		       3c		      .byte.b	%00111100
     66  6e6b		       18		      .byte.b	%00011000
     67  6e6c		       18		      .byte.b	%00011000
     68  6e6d		       18		      .byte.b	%00011000
     69  6e6e		       38		      .byte.b	%00111000
     70  6e6f
     71  6e6f		       7e		      .byte.b	%01111110
     72  6e70		       60		      .byte.b	%01100000
     73  6e71		       3c		      .byte.b	%00111100
     74  6e72		       06		      .byte.b	%00000110
     75  6e73		       7c		      .byte.b	%01111100
     76  6e74
     77  6e74		       7c		      .byte.b	%01111100
     78  6e75		       06		      .byte.b	%00000110
     79  6e76		       1c		      .byte.b	%00011100
     80  6e77		       06		      .byte.b	%00000110
     81  6e78		       7c		      .byte.b	%01111100
     82  6e79
     83  6e79		       06		      .byte.b	%00000110
     84  6e7a		       06		      .byte.b	%00000110
     85  6e7b		       7e		      .byte.b	%01111110
     86  6e7c		       66		      .byte.b	%01100110
     87  6e7d		       66		      .byte.b	%01100110
     88  6e7e
     89  6e7e		       7c		      .byte.b	%01111100
     90  6e7f		       06		      .byte.b	%00000110
     91  6e80		       7c		      .byte.b	%01111100
     92  6e81		       60		      .byte.b	%01100000
     93  6e82		       7e		      .byte.b	%01111110
     94  6e83
     95  6e83		       3c		      .byte.b	%00111100
     96  6e84		       66		      .byte.b	%01100110
     97  6e85		       7c		      .byte.b	%01111100
     98  6e86		       60		      .byte.b	%01100000
     99  6e87		       3c		      .byte.b	%00111100
    100  6e88
    101  6e88		       18		      .byte.b	%00011000
    102  6e89		       18		      .byte.b	%00011000
    103  6e8a		       0c		      .byte.b	%00001100
    104  6e8b		       06		      .byte.b	%00000110
    105  6e8c		       7e		      .byte.b	%01111110
    106  6e8d
    107  6e8d		       3c		      .byte.b	%00111100
    108  6e8e		       66		      .byte.b	%01100110
    109  6e8f		       3c		      .byte.b	%00111100
    110  6e90		       66		      .byte.b	%01100110
    111  6e91		       3c		      .byte.b	%00111100
    112  6e92
    113  6e92		       3c		      .byte.b	%00111100
    114  6e93		       06		      .byte.b	%00000110
    115  6e94		       3e		      .byte.b	%00111110
    116  6e95		       66		      .byte.b	%01100110
    117  6e96		       3c		      .byte.b	%00111100
    118  6e97
    119  6e97				  -	      ifnconst	gamenumber
    120  6e97				  -gamenumber
    121  6e97					      endif
    122  6e97		       00		      .byte.b	0
    123  6e98
------- FILE titlescreen/asm/titlescreen.asm
    307  6e98					      endif
    308  6e98
    309  6e98				  -	      ifconst	mk_player_on
    310  6e98				  -	      include	"titlescreen/asm/player_kernel.asm"
    311  6e98					      endif		;mk_player_on
    312  6e98
    313  6e98
------- FILE c:\Users\tazrog\BrawdyBAS\brawdy.bas.asm
   8367  6e98
   8368  6e98				   .L0675		;  return
   8369  6e98		       ba		      tsx
   8370  6e99		       b5 02		      lda	2,x	; check return address
   8371  6e9b		       49 be		      eor	#(>*)	; vs. current PCH
   8372  6e9d		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   8373  6e9f		       f0 03		      beq	*+5	; if equal, do normal return
   8374  6ea1		       4c e0 df 	      JMP	BS_return
   8375  6ea4		       60		      RTS
   8376  6ea5					      if	ECHO6
      303 bytes of ROM space left in bank 6
   8377  6ea5					      echo	"    ",[(start_bank6 - *)]d , "bytes of ROM space left in bank 6")
   8378  6ea5					      endif
   8379  6ea5		       00 01	   ECHO6      =	1
   8380  6fd4					      ORG	$6FF4-bscode_length
   8381  6fd4					      RORG	$BFF4-bscode_length
   8382  6fd4		       a2 ff	   start_bank6 ldx	#$ff
   8383  6fd6					      ifconst	FASTFETCH	; using DPC+
   8384  6fd6		       8e 58 10 	      stx	FASTFETCH
   8385  6fd9					      endif
   8386  6fd9		       9a		      txs
   8387  6fda				  -	      if	bankswitch == 64
   8388  6fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   8389  6fda					      else
   8390  6fda		       a9 18		      lda	#>(start-1)
   8391  6fdc					      endif
   8392  6fdc		       48		      pha
   8393  6fdd		       a9 e3		      lda	#<(start-1)
   8394  6fdf		       48		      pha
   8395  6fe0		       48		      pha
   8396  6fe1		       8a		      txa
   8397  6fe2		       48		      pha
   8398  6fe3		       ba		      tsx
   8399  6fe4					      if	bankswitch != 64
   8400  6fe4		       b5 04		      lda	4,x	; get high byte of return address
   8401  6fe6		       2a		      rol
   8402  6fe7		       2a		      rol
   8403  6fe8		       2a		      rol
   8404  6fe9		       2a		      rol
   8405  6fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   8406  6fec		       aa		      tax
   8407  6fed		       e8		      inx
   8408  6fee				  -	      else
   8409  6fee				  -	      lda	4,x	; get high byte of return address
   8410  6fee				  -	      tay
   8411  6fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   8412  6fee				  -	      sta	4,x
   8413  6fee				  -	      tya
   8414  6fee				  -	      lsr
   8415  6fee				  -	      lsr
   8416  6fee				  -	      lsr
   8417  6fee				  -	      lsr
   8418  6fee				  -	      tax
   8419  6fee				  -	      inx
   8420  6fee					      endif
   8421  6fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   8422  6ff1		       68		      pla
   8423  6ff2		       aa		      tax
   8424  6ff3		       68		      pla
   8425  6ff4		       60		      rts
   8426  6ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   8427  6ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   8428  6ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   8429  6ff5					      endif
   8430  6ffc					      ORG	$6FFC
   8431  6ffc					      RORG	$BFFC
   8432  6ffc		       d4 bf		      .word.w	(start_bank6 & $ffff)
   8433  6ffe		       d4 bf		      .word.w	(start_bank6 & $ffff)
   8434  7000					      ORG	$7000
   8435  7000					      RORG	$D000
   8436  7000					      repeat	129
   8437  7000		       00		      .byte.b	0
   8436  7000					      repend
   8437  7001		       00		      .byte.b	0
   8436  7001					      repend
   8437  7002		       00		      .byte.b	0
   8436  7002					      repend
   8437  7003		       00		      .byte.b	0
   8436  7003					      repend
   8437  7004		       00		      .byte.b	0
   8436  7004					      repend
   8437  7005		       00		      .byte.b	0
   8436  7005					      repend
   8437  7006		       00		      .byte.b	0
   8436  7006					      repend
   8437  7007		       00		      .byte.b	0
   8436  7007					      repend
   8437  7008		       00		      .byte.b	0
   8436  7008					      repend
   8437  7009		       00		      .byte.b	0
   8436  7009					      repend
   8437  700a		       00		      .byte.b	0
   8436  700a					      repend
   8437  700b		       00		      .byte.b	0
   8436  700b					      repend
   8437  700c		       00		      .byte.b	0
   8436  700c					      repend
   8437  700d		       00		      .byte.b	0
   8436  700d					      repend
   8437  700e		       00		      .byte.b	0
   8436  700e					      repend
   8437  700f		       00		      .byte.b	0
   8436  700f					      repend
   8437  7010		       00		      .byte.b	0
   8436  7010					      repend
   8437  7011		       00		      .byte.b	0
   8436  7011					      repend
   8437  7012		       00		      .byte.b	0
   8436  7012					      repend
   8437  7013		       00		      .byte.b	0
   8436  7013					      repend
   8437  7014		       00		      .byte.b	0
   8436  7014					      repend
   8437  7015		       00		      .byte.b	0
   8436  7015					      repend
   8437  7016		       00		      .byte.b	0
   8436  7016					      repend
   8437  7017		       00		      .byte.b	0
   8436  7017					      repend
   8437  7018		       00		      .byte.b	0
   8436  7018					      repend
   8437  7019		       00		      .byte.b	0
   8436  7019					      repend
   8437  701a		       00		      .byte.b	0
   8436  701a					      repend
   8437  701b		       00		      .byte.b	0
   8436  701b					      repend
   8437  701c		       00		      .byte.b	0
   8436  701c					      repend
   8437  701d		       00		      .byte.b	0
   8436  701d					      repend
   8437  701e		       00		      .byte.b	0
   8436  701e					      repend
   8437  701f		       00		      .byte.b	0
   8436  701f					      repend
   8437  7020		       00		      .byte.b	0
   8436  7020					      repend
   8437  7021		       00		      .byte.b	0
   8436  7021					      repend
   8437  7022		       00		      .byte.b	0
   8436  7022					      repend
   8437  7023		       00		      .byte.b	0
   8436  7023					      repend
   8437  7024		       00		      .byte.b	0
   8436  7024					      repend
   8437  7025		       00		      .byte.b	0
   8436  7025					      repend
   8437  7026		       00		      .byte.b	0
   8436  7026					      repend
   8437  7027		       00		      .byte.b	0
   8436  7027					      repend
   8437  7028		       00		      .byte.b	0
   8436  7028					      repend
   8437  7029		       00		      .byte.b	0
   8436  7029					      repend
   8437  702a		       00		      .byte.b	0
   8436  702a					      repend
   8437  702b		       00		      .byte.b	0
   8436  702b					      repend
   8437  702c		       00		      .byte.b	0
   8436  702c					      repend
   8437  702d		       00		      .byte.b	0
   8436  702d					      repend
   8437  702e		       00		      .byte.b	0
   8436  702e					      repend
   8437  702f		       00		      .byte.b	0
   8436  702f					      repend
   8437  7030		       00		      .byte.b	0
   8436  7030					      repend
   8437  7031		       00		      .byte.b	0
   8436  7031					      repend
   8437  7032		       00		      .byte.b	0
   8436  7032					      repend
   8437  7033		       00		      .byte.b	0
   8436  7033					      repend
   8437  7034		       00		      .byte.b	0
   8436  7034					      repend
   8437  7035		       00		      .byte.b	0
   8436  7035					      repend
   8437  7036		       00		      .byte.b	0
   8436  7036					      repend
   8437  7037		       00		      .byte.b	0
   8436  7037					      repend
   8437  7038		       00		      .byte.b	0
   8436  7038					      repend
   8437  7039		       00		      .byte.b	0
   8436  7039					      repend
   8437  703a		       00		      .byte.b	0
   8436  703a					      repend
   8437  703b		       00		      .byte.b	0
   8436  703b					      repend
   8437  703c		       00		      .byte.b	0
   8436  703c					      repend
   8437  703d		       00		      .byte.b	0
   8436  703d					      repend
   8437  703e		       00		      .byte.b	0
   8436  703e					      repend
   8437  703f		       00		      .byte.b	0
   8436  703f					      repend
   8437  7040		       00		      .byte.b	0
   8436  7040					      repend
   8437  7041		       00		      .byte.b	0
   8436  7041					      repend
   8437  7042		       00		      .byte.b	0
   8436  7042					      repend
   8437  7043		       00		      .byte.b	0
   8436  7043					      repend
   8437  7044		       00		      .byte.b	0
   8436  7044					      repend
   8437  7045		       00		      .byte.b	0
   8436  7045					      repend
   8437  7046		       00		      .byte.b	0
   8436  7046					      repend
   8437  7047		       00		      .byte.b	0
   8436  7047					      repend
   8437  7048		       00		      .byte.b	0
   8436  7048					      repend
   8437  7049		       00		      .byte.b	0
   8436  7049					      repend
   8437  704a		       00		      .byte.b	0
   8436  704a					      repend
   8437  704b		       00		      .byte.b	0
   8436  704b					      repend
   8437  704c		       00		      .byte.b	0
   8436  704c					      repend
   8437  704d		       00		      .byte.b	0
   8436  704d					      repend
   8437  704e		       00		      .byte.b	0
   8436  704e					      repend
   8437  704f		       00		      .byte.b	0
   8436  704f					      repend
   8437  7050		       00		      .byte.b	0
   8436  7050					      repend
   8437  7051		       00		      .byte.b	0
   8436  7051					      repend
   8437  7052		       00		      .byte.b	0
   8436  7052					      repend
   8437  7053		       00		      .byte.b	0
   8436  7053					      repend
   8437  7054		       00		      .byte.b	0
   8436  7054					      repend
   8437  7055		       00		      .byte.b	0
   8436  7055					      repend
   8437  7056		       00		      .byte.b	0
   8436  7056					      repend
   8437  7057		       00		      .byte.b	0
   8436  7057					      repend
   8437  7058		       00		      .byte.b	0
   8436  7058					      repend
   8437  7059		       00		      .byte.b	0
   8436  7059					      repend
   8437  705a		       00		      .byte.b	0
   8436  705a					      repend
   8437  705b		       00		      .byte.b	0
   8436  705b					      repend
   8437  705c		       00		      .byte.b	0
   8436  705c					      repend
   8437  705d		       00		      .byte.b	0
   8436  705d					      repend
   8437  705e		       00		      .byte.b	0
   8436  705e					      repend
   8437  705f		       00		      .byte.b	0
   8436  705f					      repend
   8437  7060		       00		      .byte.b	0
   8436  7060					      repend
   8437  7061		       00		      .byte.b	0
   8436  7061					      repend
   8437  7062		       00		      .byte.b	0
   8436  7062					      repend
   8437  7063		       00		      .byte.b	0
   8436  7063					      repend
   8437  7064		       00		      .byte.b	0
   8436  7064					      repend
   8437  7065		       00		      .byte.b	0
   8436  7065					      repend
   8437  7066		       00		      .byte.b	0
   8436  7066					      repend
   8437  7067		       00		      .byte.b	0
   8436  7067					      repend
   8437  7068		       00		      .byte.b	0
   8436  7068					      repend
   8437  7069		       00		      .byte.b	0
   8436  7069					      repend
   8437  706a		       00		      .byte.b	0
   8436  706a					      repend
   8437  706b		       00		      .byte.b	0
   8436  706b					      repend
   8437  706c		       00		      .byte.b	0
   8436  706c					      repend
   8437  706d		       00		      .byte.b	0
   8436  706d					      repend
   8437  706e		       00		      .byte.b	0
   8436  706e					      repend
   8437  706f		       00		      .byte.b	0
   8436  706f					      repend
   8437  7070		       00		      .byte.b	0
   8436  7070					      repend
   8437  7071		       00		      .byte.b	0
   8436  7071					      repend
   8437  7072		       00		      .byte.b	0
   8436  7072					      repend
   8437  7073		       00		      .byte.b	0
   8436  7073					      repend
   8437  7074		       00		      .byte.b	0
   8436  7074					      repend
   8437  7075		       00		      .byte.b	0
   8436  7075					      repend
   8437  7076		       00		      .byte.b	0
   8436  7076					      repend
   8437  7077		       00		      .byte.b	0
   8436  7077					      repend
   8437  7078		       00		      .byte.b	0
   8436  7078					      repend
   8437  7079		       00		      .byte.b	0
   8436  7079					      repend
   8437  707a		       00		      .byte.b	0
   8436  707a					      repend
   8437  707b		       00		      .byte.b	0
   8436  707b					      repend
   8437  707c		       00		      .byte.b	0
   8436  707c					      repend
   8437  707d		       00		      .byte.b	0
   8436  707d					      repend
   8437  707e		       00		      .byte.b	0
   8436  707e					      repend
   8437  707f		       00		      .byte.b	0
   8436  707f					      repend
   8437  7080		       00		      .byte.b	0
   8438  7081					      repend
   8439  7081							; Provided under the CC0 license. See the included LICENSE.txt for details.
   8440  7081
   8441  7081							;----------------------------------------
   8442  7081							; Display Data
   8443  7081							;----------------------------------------
   8444  7081							; The Display Data bank is copied into RAM when DPC+ initializes the cartridge.
   8445  7081							; This allows us to manipulate the data during run-time, but have a known
   8446  7081							; starting state when the Atari is first turned on.
   8447  7081							;
   8448  7081							; Unlike normal Atari VCS/2600 sprite definitions, the sprite data in the
   8449  7081							; Display Data bank is stored right-side-up.
   8450  7081							;
   8451  7081							;----------------------------------------
   8452  7081
   8453  7081				   Zeros32
   8454  7081		       00 84	   SOUND_OFF  =	(* & $1fff)/32
   8455  7081				   DisplayDataDigitBlank
   8456  7081		       00		      .byte.b	0	;--
   8457  7082		       00		      .byte.b	0	;--
   8458  7083		       00		      .byte.b	0	;--
   8459  7084		       00		      .byte.b	0	;--
   8460  7085		       00		      .byte.b	0	;--
   8461  7086		       00		      .byte.b	0	;--
   8462  7087		       00		      .byte.b	0	;--
   8463  7088		       00		      .byte.b	0	;--
   8464  7089
   8465  7089							;	align 32
   8466  7089							;Zeros32:
   8467  7089							;SOUND_OFF = (* & $1fff)/32
   8468  7089							;	.byte 0,0,0,0,0,0,0,0
   8469  7089		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8470  7091		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8471  7099		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8472  70a1
   8473  70a1		       00 85	   SINE_WAVE  =	(* & $1fff)/32
   8474  70a1		       03 03 03 04*	      .byte.b	3,3,3,4,4,5,5,5
   8475  70a9		       05 05 05 05*	      .byte.b	5,5,5,5,4,4,3,3
   8476  70b1		       03 02 02 01*	      .byte.b	3,2,2,1,1,0,0,0
   8477  70b9		       00 00 00 00*	      .byte.b	0,0,0,0,1,1,2,2
   8478  70c1
   8479  70e0		       00 00 00 00*	      align	32
   8480  70e0		       00 87	   TRIANGLE_WAVE =	(* & $1fff)/32
   8481  70e0		       00 00 01 01*	      .byte.b	0,0,1,1,1,2,2,2
   8482  70e8		       03 03 03 04*	      .byte.b	3,3,3,4,4,4,5,5
   8483  70f0		       05 05 04 04*	      .byte.b	5,5,4,4,4,3,3,3
   8484  70f8		       02 02 02 01*	      .byte.b	2,2,2,1,1,1,0,0
   8485  7100
   8486  7100					      align	32
   8487  7100		       00 88	   SAWTOOTH_WAVE =	(* & $1fff)/32
   8488  7100		       00 00 00 00*	      .byte.b	0,0,0,0,1,1,1,1
   8489  7108		       01 01 02 02*	      .byte.b	1,1,2,2,2,2,2,2
   8490  7110		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,4,4
   8491  7118		       04 04 04 04*	      .byte.b	4,4,4,4,5,5,5,5
   8492  7120
   8493  7120					      align	32
   8494  7120		       00 89	   SQUARE_WAVE_VOL5 =	(* & $1fff)/32
   8495  7120		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8496  7128		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8497  7130		       05 05 05 05*	      .byte.b	5,5,5,5,5,5,5,5
   8498  7138		       05 05 05 05*	      .byte.b	5,5,5,5,5,5,5,5
   8499  7140
   8500  7140					      align	32
   8501  7140		       00 8a	   SQUARE_WAVE_VOL4 =	(* & $1fff)/32
   8502  7140		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8503  7148		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8504  7150		       04 04 04 04*	      .byte.b	4,4,4,4,4,4,4,4
   8505  7158		       04 04 04 04*	      .byte.b	4,4,4,4,4,4,4,4
   8506  7160
   8507  7160					      align	32
   8508  7160		       00 8b	   SQUARE_WAVE_VOL3 =	(* & $1fff)/32
   8509  7160		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8510  7168		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8511  7170		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,3,3
   8512  7178		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,3,3
   8513  7180
   8514  7180					      align	32
   8515  7180		       00 8c	   NOISE_WAVE =	(* & $1fff)/32
   8516  7180		       07 01 09 0a*	      .byte.b	7, 1, 9,10, 2, 8, 8,14
   8517  7188		       03 0d 08 05*	      .byte.b	3,13, 8, 5,12, 2, 3, 7
   8518  7190		       07 01 08 04*	      .byte.b	7, 1, 8, 4,15, 1,13, 5
   8519  7198		       08 05 0b 06*	      .byte.b	8, 5,11, 6, 8, 7, 9, 2
   8520  71a0
   8521  71a0							; low and high byte of address table (for ROMdata array in C)
   8522  71a0		       57		      .byte.b	<fetcher_address_table
   8523  71a1		       0d		      .byte.b	((>fetcher_address_table) & $0f) | (((>fetcher_address_table) / 2) & $70)
   8524  71a2		       00		      .byte.b	0
   8525  71a3		       00		      .byte.b	0
   8526  71a4				   FETCHER_BEGIN
   8527  71a4		       10		      .byte.b	16
   8528  71a5		       10		      .byte.b	16
   8529  71a6		       10		      .byte.b	16
   8530  71a7		       10		      .byte.b	16	; to zero-fill on boot
   8531  71a8							;bB.asm
   8532  71a8							; bB.asm file is split here
   8533  71a8				   PF_data1
   8534  71a8		       00		      .byte.b	%00000000
   8535  71a9		       00		      .byte.b	%00000000
   8536  71aa		       00		      .byte.b	%00000000
   8537  71ab		       00		      .byte.b	%00000000
   8538  71ac		       00		      .byte.b	%00000000
   8539  71ad		       00		      .byte.b	%00000000
   8540  71ae		       00		      .byte.b	%00000000
   8541  71af		       00		      .byte.b	%00000000
   8542  71b0		       00		      .byte.b	%00000000
   8543  71b1		       00		      .byte.b	%00000000
   8544  71b2		       00		      .byte.b	%00000000
   8545  71b3		       00		      .byte.b	%00000000
   8546  71b4		       00		      .byte.b	%00000000
   8547  71b5		       00		      .byte.b	%00000000
   8548  71b6		       00		      .byte.b	%00000000
   8549  71b7		       00		      .byte.b	%00000000
   8550  71b8		       00		      .byte.b	%00000000
   8551  71b9		       00		      .byte.b	%00000000
   8552  71ba		       00		      .byte.b	%00000000
   8553  71bb		       00		      .byte.b	%00000000
   8554  71bc		       00		      .byte.b	%00000000
   8555  71bd		       00		      .byte.b	%00000000
   8556  71be		       00		      .byte.b	%00000000
   8557  71bf		       00		      .byte.b	%00000000
   8558  71c0		       00		      .byte.b	%00000000
   8559  71c1		       00		      .byte.b	%00000000
   8560  71c2		       00		      .byte.b	%00000000
   8561  71c3		       00		      .byte.b	%00000000
   8562  71c4		       00		      .byte.b	%00000000
   8563  71c5		       00		      .byte.b	%00000000
   8564  71c6		       00		      .byte.b	%00000000
   8565  71c7		       00		      .byte.b	%00000000
   8566  71c8		       00		      .byte.b	%00000000
   8567  71c9		       00		      .byte.b	%00000000
   8568  71ca		       00		      .byte.b	%00000000
   8569  71cb		       00		      .byte.b	%00000000
   8570  71cc		       00		      .byte.b	%00000000
   8571  71cd		       00		      .byte.b	%00000000
   8572  71ce		       00		      .byte.b	%00000000
   8573  71cf		       00		      .byte.b	%00000000
   8574  71d0		       00		      .byte.b	%00000000
   8575  71d1		       00		      .byte.b	%00000000
   8576  71d2		       00		      .byte.b	%00000000
   8577  71d3		       00		      .byte.b	%00000000
   8578  71d4		       00		      .byte.b	%00000000
   8579  71d5		       00		      .byte.b	%00000000
   8580  71d6		       00		      .byte.b	%00000000
   8581  71d7		       00		      .byte.b	%00000000
   8582  71d8		       00		      .byte.b	%00000000
   8583  71d9		       00		      .byte.b	%00000000
   8584  71da		       00		      .byte.b	%00000000
   8585  71db		       00		      .byte.b	%00000000
   8586  71dc		       00		      .byte.b	%00000000
   8587  71dd		       00		      .byte.b	%00000000
   8588  71de		       00		      .byte.b	%00000000
   8589  71df		       00		      .byte.b	%00000000
   8590  71e0		       00		      .byte.b	%00000000
   8591  71e1		       00		      .byte.b	%00000000
   8592  71e2		       00		      .byte.b	%00000000
   8593  71e3		       00		      .byte.b	%00000000
   8594  71e4		       00		      .byte.b	%00000000
   8595  71e5		       00		      .byte.b	%00000000
   8596  71e6		       00		      .byte.b	%00000000
   8597  71e7		       00		      .byte.b	%00000000
   8598  71e8		       00		      .byte.b	%00000000
   8599  71e9		       00		      .byte.b	%00000000
   8600  71ea		       00		      .byte.b	%00000000
   8601  71eb		       00		      .byte.b	%00000000
   8602  71ec		       00		      .byte.b	%00000000
   8603  71ed		       00		      .byte.b	%00000000
   8604  71ee		       00		      .byte.b	%00000000
   8605  71ef		       00		      .byte.b	%00000000
   8606  71f0		       00		      .byte.b	%00000000
   8607  71f1		       00		      .byte.b	%00000000
   8608  71f2		       00		      .byte.b	%00000000
   8609  71f3		       00		      .byte.b	%00000000
   8610  71f4		       00		      .byte.b	%00000000
   8611  71f5		       00		      .byte.b	%00000000
   8612  71f6		       00		      .byte.b	%00000000
   8613  71f7		       00		      .byte.b	%00000000
   8614  71f8		       00		      .byte.b	%00000000
   8615  71f9		       00		      .byte.b	%00000000
   8616  71fa		       00		      .byte.b	%00000000
   8617  71fb		       00		      .byte.b	%00000000
   8618  71fc		       00		      .byte.b	%00000000
   8619  71fd		       00		      .byte.b	%00000000
   8620  71fe		       00		      .byte.b	%00000000
   8621  71ff		       00		      .byte.b	%00000000
   8622  7200		       00		      .byte.b	%00000000
   8623  7201		       00		      .byte.b	%00000000
   8624  7202		       00		      .byte.b	%00000000
   8625  7203		       00		      .byte.b	%00000000
   8626  7204		       00		      .byte.b	%00000000
   8627  7205		       00		      .byte.b	%00000000
   8628  7206		       00		      .byte.b	%00000000
   8629  7207		       00		      .byte.b	%00000000
   8630  7208		       00		      .byte.b	%00000000
   8631  7209		       00		      .byte.b	%00000000
   8632  720a		       00		      .byte.b	%00000000
   8633  720b		       00		      .byte.b	%00000000
   8634  720c		       00		      .byte.b	%00000000
   8635  720d		       00		      .byte.b	%00000000
   8636  720e		       00		      .byte.b	%00000000
   8637  720f		       00		      .byte.b	%00000000
   8638  7210		       00		      .byte.b	%00000000
   8639  7211		       00		      .byte.b	%00000000
   8640  7212		       00		      .byte.b	%00000000
   8641  7213		       00		      .byte.b	%00000000
   8642  7214		       00		      .byte.b	%00000000
   8643  7215		       00		      .byte.b	%00000000
   8644  7216		       00		      .byte.b	%00000000
   8645  7217		       00		      .byte.b	%00000000
   8646  7218		       00		      .byte.b	%00000000
   8647  7219		       00		      .byte.b	%00000000
   8648  721a		       00		      .byte.b	%00000000
   8649  721b		       00		      .byte.b	%00000000
   8650  721c		       00		      .byte.b	%00000000
   8651  721d		       00		      .byte.b	%00000000
   8652  721e		       00		      .byte.b	%00000000
   8653  721f		       00		      .byte.b	%00000000
   8654  7220		       00		      .byte.b	%00000000
   8655  7221		       00		      .byte.b	%00000000
   8656  7222		       00		      .byte.b	%00000000
   8657  7223		       00		      .byte.b	%00000000
   8658  7224		       00		      .byte.b	%00000000
   8659  7225		       00		      .byte.b	%00000000
   8660  7226		       00		      .byte.b	%00000000
   8661  7227		       00		      .byte.b	%00000000
   8662  7228		       00		      .byte.b	%00000000
   8663  7229		       00		      .byte.b	%00000000
   8664  722a		       00		      .byte.b	%00000000
   8665  722b		       00		      .byte.b	%00000000
   8666  722c		       00		      .byte.b	%00000000
   8667  722d		       00		      .byte.b	%00000000
   8668  722e		       00		      .byte.b	%00000000
   8669  722f		       00		      .byte.b	%00000000
   8670  7230		       00		      .byte.b	%00000000
   8671  7231		       00		      .byte.b	%00000000
   8672  7232		       00		      .byte.b	%00000000
   8673  7233		       00		      .byte.b	%00000000
   8674  7234		       00		      .byte.b	%00000000
   8675  7235		       00		      .byte.b	%00000000
   8676  7236		       00		      .byte.b	%00000000
   8677  7237		       00		      .byte.b	%00000000
   8678  7238		       00		      .byte.b	%00000000
   8679  7239		       00		      .byte.b	%00000000
   8680  723a		       00		      .byte.b	%00000000
   8681  723b		       00		      .byte.b	%00000000
   8682  723c		       00		      .byte.b	%00000000
   8683  723d		       fe		      .byte.b	%11111110
   8684  723e		       fe		      .byte.b	%11111110
   8685  723f		       fe		      .byte.b	%11111110
   8686  7240		       fe		      .byte.b	%11111110
   8687  7241		       fc		      .byte.b	%11111100
   8688  7242		       fc		      .byte.b	%11111100
   8689  7243		       fc		      .byte.b	%11111100
   8690  7244		       fc		      .byte.b	%11111100
   8691  7245		       c4		      .byte.b	%11000100
   8692  7246		       c4		      .byte.b	%11000100
   8693  7247		       c4		      .byte.b	%11000100
   8694  7248		       c4		      .byte.b	%11000100
   8695  7249		       c4		      .byte.b	%11000100
   8696  724a		       c4		      .byte.b	%11000100
   8697  724b		       fc		      .byte.b	%11111100
   8698  724c		       c4		      .byte.b	%11000100
   8699  724d		       c4		      .byte.b	%11000100
   8700  724e		       c4		      .byte.b	%11000100
   8701  724f		       c4		      .byte.b	%11000100
   8702  7250		       c4		      .byte.b	%11000100
   8703  7251		       c4		      .byte.b	%11000100
   8704  7252		       c4		      .byte.b	%11000100
   8705  7253		       fc		      .byte.b	%11111100
   8706  7254		       fc		      .byte.b	%11111100
   8707  7255		       fc		      .byte.b	%11111100
   8708  7256		       fc		      .byte.b	%11111100
   8709  7257		       fc		      .byte.b	%11111100
   8710  7258		       00		      .byte.b	%00000000
   8711  7259		       00		      .byte.b	%00000000
   8712  725a		       00		      .byte.b	%00000000
   8713  725b		       00		      .byte.b	%00000000
   8714  725c		       00		      .byte.b	%00000000
   8715  725d		       00		      .byte.b	%00000000
   8716  725e		       00		      .byte.b	%00000000
   8717  725f		       00		      .byte.b	%00000000
   8718  7260		       00		      .byte.b	%00000000
   8719  7261		       00		      .byte.b	%00000000
   8720  7262		       00		      .byte.b	%00000000
   8721  7263		       00		      .byte.b	%00000000
   8722  7264		       00		      .byte.b	%00000000
   8723  7265		       00		      .byte.b	%00000000
   8724  7266		       00		      .byte.b	%00000000
   8725  7267		       00		      .byte.b	%00000000
   8726  7268		       00		      .byte.b	%00000000
   8727  7269		       00		      .byte.b	%00000000
   8728  726a		       00		      .byte.b	%00000000
   8729  726b		       00		      .byte.b	%00000000
   8730  726c		       00		      .byte.b	%00000000
   8731  726d		       00		      .byte.b	%00000000
   8732  726e		       00		      .byte.b	%00000000
   8733  726f		       00		      .byte.b	%00000000
   8734  7270		       00		      .byte.b	%00000000
   8735  7271		       00		      .byte.b	%00000000
   8736  7272		       00		      .byte.b	%00000000
   8737  7273		       00		      .byte.b	%00000000
   8738  7274		       00		      .byte.b	%00000000
   8739  7275		       00		      .byte.b	%00000000
   8740  7276		       00		      .byte.b	%00000000
   8741  7277		       00		      .byte.b	%00000000
   8742  7278		       00		      .byte.b	%00000000
   8743  7279		       00		      .byte.b	%00000000
   8744  727a		       00		      .byte.b	%00000000
   8745  727b		       00		      .byte.b	%00000000
   8746  727c		       00		      .byte.b	%00000000
   8747  727d		       00		      .byte.b	%00000000
   8748  727e		       00		      .byte.b	%00000000
   8749  727f		       00		      .byte.b	%00000000
   8750  7280		       00		      .byte.b	%00000000
   8751  7281		       00		      .byte.b	%00000000
   8752  7282		       00		      .byte.b	%00000000
   8753  7283		       00		      .byte.b	%00000000
   8754  7284		       00		      .byte.b	%00000000
   8755  7285		       00		      .byte.b	%00000000
   8756  7286		       00		      .byte.b	%00000000
   8757  7287		       00		      .byte.b	%00000000
   8758  7288		       00		      .byte.b	%00000000
   8759  7289		       00		      .byte.b	%00000000
   8760  728a		       00		      .byte.b	%00000000
   8761  728b		       00		      .byte.b	%00000000
   8762  728c		       00		      .byte.b	%00000000
   8763  728d		       00		      .byte.b	%00000000
   8764  728e		       00		      .byte.b	%00000000
   8765  728f		       00		      .byte.b	%00000000
   8766  7290		       00		      .byte.b	%00000000
   8767  7291		       00		      .byte.b	%00000000
   8768  7292		       00		      .byte.b	%00000000
   8769  7293		       00		      .byte.b	%00000000
   8770  7294		       00		      .byte.b	%00000000
   8771  7295		       fe		      .byte.b	%11111110
   8772  7296		       fe		      .byte.b	%11111110
   8773  7297		       fe		      .byte.b	%11111110
   8774  7298		       fe		      .byte.b	%11111110
   8775  7299		       fc		      .byte.b	%11111100
   8776  729a		       fc		      .byte.b	%11111100
   8777  729b		       fc		      .byte.b	%11111100
   8778  729c		       fc		      .byte.b	%11111100
   8779  729d		       c4		      .byte.b	%11000100
   8780  729e		       c4		      .byte.b	%11000100
   8781  729f		       c4		      .byte.b	%11000100
   8782  72a0		       c4		      .byte.b	%11000100
   8783  72a1		       c4		      .byte.b	%11000100
   8784  72a2		       c4		      .byte.b	%11000100
   8785  72a3		       fc		      .byte.b	%11111100
   8786  72a4		       c4		      .byte.b	%11000100
   8787  72a5		       c4		      .byte.b	%11000100
   8788  72a6		       c4		      .byte.b	%11000100
   8789  72a7		       c4		      .byte.b	%11000100
   8790  72a8		       c4		      .byte.b	%11000100
   8791  72a9		       c4		      .byte.b	%11000100
   8792  72aa		       c4		      .byte.b	%11000100
   8793  72ab		       fc		      .byte.b	%11111100
   8794  72ac		       fc		      .byte.b	%11111100
   8795  72ad		       fc		      .byte.b	%11111100
   8796  72ae		       fc		      .byte.b	%11111100
   8797  72af		       fc		      .byte.b	%11111100
   8798  72b0		       00		      .byte.b	%00000000
   8799  72b1		       00		      .byte.b	%00000000
   8800  72b2		       00		      .byte.b	%00000000
   8801  72b3		       00		      .byte.b	%00000000
   8802  72b4		       00		      .byte.b	%00000000
   8803  72b5		       00		      .byte.b	%00000000
   8804  72b6		       00		      .byte.b	%00000000
   8805  72b7		       00		      .byte.b	%00000000
   8806  72b8		       00		      .byte.b	%00000000
   8807  72b9		       00		      .byte.b	%00000000
   8808  72ba		       00		      .byte.b	%00000000
   8809  72bb		       00		      .byte.b	%00000000
   8810  72bc		       00		      .byte.b	%00000000
   8811  72bd		       00		      .byte.b	%00000000
   8812  72be		       00		      .byte.b	%00000000
   8813  72bf		       00		      .byte.b	%00000000
   8814  72c0		       00		      .byte.b	%00000000
   8815  72c1		       00		      .byte.b	%00000000
   8816  72c2		       00		      .byte.b	%00000000
   8817  72c3		       00		      .byte.b	%00000000
   8818  72c4		       00		      .byte.b	%00000000
   8819  72c5		       00		      .byte.b	%00000000
   8820  72c6		       00		      .byte.b	%00000000
   8821  72c7		       00		      .byte.b	%00000000
   8822  72c8		       00		      .byte.b	%00000000
   8823  72c9		       00		      .byte.b	%00000000
   8824  72ca		       00		      .byte.b	%00000000
   8825  72cb		       00		      .byte.b	%00000000
   8826  72cc		       00		      .byte.b	%00000000
   8827  72cd		       00		      .byte.b	%00000000
   8828  72ce		       00		      .byte.b	%00000000
   8829  72cf		       00		      .byte.b	%00000000
   8830  72d0		       00		      .byte.b	%00000000
   8831  72d1		       00		      .byte.b	%00000000
   8832  72d2		       00		      .byte.b	%00000000
   8833  72d3		       00		      .byte.b	%00000000
   8834  72d4		       00		      .byte.b	%00000000
   8835  72d5		       00		      .byte.b	%00000000
   8836  72d6		       00		      .byte.b	%00000000
   8837  72d7		       00		      .byte.b	%00000000
   8838  72d8		       00		      .byte.b	%00000000
   8839  72d9		       00		      .byte.b	%00000000
   8840  72da		       00		      .byte.b	%00000000
   8841  72db		       00		      .byte.b	%00000000
   8842  72dc		       00		      .byte.b	%00000000
   8843  72dd		       00		      .byte.b	%00000000
   8844  72de		       00		      .byte.b	%00000000
   8845  72df		       00		      .byte.b	%00000000
   8846  72e0		       00		      .byte.b	%00000000
   8847  72e1		       00		      .byte.b	%00000000
   8848  72e2		       00		      .byte.b	%00000000
   8849  72e3		       00		      .byte.b	%00000000
   8850  72e4		       00		      .byte.b	%00000000
   8851  72e5		       00		      .byte.b	%00000000
   8852  72e6		       00		      .byte.b	%00000000
   8853  72e7		       00		      .byte.b	%00000000
   8854  72e8		       00		      .byte.b	%00000000
   8855  72e9		       00		      .byte.b	%00000000
   8856  72ea		       00		      .byte.b	%00000000
   8857  72eb		       00		      .byte.b	%00000000
   8858  72ec		       00		      .byte.b	%00000000
   8859  72ed		       00		      .byte.b	%00000000
   8860  72ee		       00		      .byte.b	%00000000
   8861  72ef		       00		      .byte.b	%00000000
   8862  72f0		       00		      .byte.b	%00000000
   8863  72f1		       00		      .byte.b	%00000000
   8864  72f2		       00		      .byte.b	%00000000
   8865  72f3		       00		      .byte.b	%00000000
   8866  72f4		       00		      .byte.b	%00000000
   8867  72f5		       00		      .byte.b	%00000000
   8868  72f6		       00		      .byte.b	%00000000
   8869  72f7		       00		      .byte.b	%00000000
   8870  72f8		       00		      .byte.b	%00000000
   8871  72f9		       00		      .byte.b	%00000000
   8872  72fa		       00		      .byte.b	%00000000
   8873  72fb		       00		      .byte.b	%00000000
   8874  72fc		       00		      .byte.b	%00000000
   8875  72fd		       00		      .byte.b	%00000000
   8876  72fe		       00		      .byte.b	%00000000
   8877  72ff		       00		      .byte.b	%00000000
   8878  7300		       00		      .byte.b	%00000000
   8879  7301		       00		      .byte.b	%00000000
   8880  7302		       00		      .byte.b	%00000000
   8881  7303		       00		      .byte.b	%00000000
   8882  7304		       00		      .byte.b	%00000000
   8883  7305		       00		      .byte.b	%00000000
   8884  7306		       00		      .byte.b	%00000000
   8885  7307		       00		      .byte.b	%00000000
   8886  7308				   playfieldcolorL0470
   8887  7308		       c2		      .byte.b	_C2
   8888  7309		       c2		      .byte.b	_C2
   8889  730a		       00		      .byte.b	_00
   8890  730b		       00		      .byte.b	_00
   8891  730c		       00		      .byte.b	_00
   8892  730d		       00		      .byte.b	_00
   8893  730e		       00		      .byte.b	_00
   8894  730f		       00		      .byte.b	_00
   8895  7310		       00		      .byte.b	_00
   8896  7311		       00		      .byte.b	_00
   8897  7312		       00		      .byte.b	_00
   8898  7313		       00		      .byte.b	_00
   8899  7314		       00		      .byte.b	_00
   8900  7315		       00		      .byte.b	_00
   8901  7316		       00		      .byte.b	_00
   8902  7317		       00		      .byte.b	_00
   8903  7318		       00		      .byte.b	_00
   8904  7319		       00		      .byte.b	_00
   8905  731a		       00		      .byte.b	_00
   8906  731b		       00		      .byte.b	_00
   8907  731c		       00		      .byte.b	_00
   8908  731d		       00		      .byte.b	_00
   8909  731e		       00		      .byte.b	_00
   8910  731f		       00		      .byte.b	_00
   8911  7320		       00		      .byte.b	_00
   8912  7321		       00		      .byte.b	_00
   8913  7322		       00		      .byte.b	_00
   8914  7323		       00		      .byte.b	_00
   8915  7324		       00		      .byte.b	_00
   8916  7325		       00		      .byte.b	_00
   8917  7326		       00		      .byte.b	_00
   8918  7327		       00		      .byte.b	_00
   8919  7328		       00		      .byte.b	_00
   8920  7329		       00		      .byte.b	_00
   8921  732a		       00		      .byte.b	_00
   8922  732b		       00		      .byte.b	_00
   8923  732c		       00		      .byte.b	_00
   8924  732d		       00		      .byte.b	_00
   8925  732e		       00		      .byte.b	_00
   8926  732f		       00		      .byte.b	_00
   8927  7330		       00		      .byte.b	_00
   8928  7331		       00		      .byte.b	_00
   8929  7332		       00		      .byte.b	_00
   8930  7333		       00		      .byte.b	_00
   8931  7334		       00		      .byte.b	_00
   8932  7335		       00		      .byte.b	_00
   8933  7336		       00		      .byte.b	_00
   8934  7337		       00		      .byte.b	_00
   8935  7338		       00		      .byte.b	_00
   8936  7339		       00		      .byte.b	_00
   8937  733a		       00		      .byte.b	_00
   8938  733b		       00		      .byte.b	_00
   8939  733c		       00		      .byte.b	_00
   8940  733d		       00		      .byte.b	_00
   8941  733e		       00		      .byte.b	_00
   8942  733f		       00		      .byte.b	_00
   8943  7340		       00		      .byte.b	_00
   8944  7341		       00		      .byte.b	_00
   8945  7342		       00		      .byte.b	_00
   8946  7343		       00		      .byte.b	_00
   8947  7344		       00		      .byte.b	_00
   8948  7345		       00		      .byte.b	_00
   8949  7346		       f2		      .byte.b	_F2
   8950  7347		       f2		      .byte.b	_F2
   8951  7348		       f0		      .byte.b	_F0
   8952  7349		       f0		      .byte.b	_F0
   8953  734a		       f2		      .byte.b	_F2
   8954  734b		       f2		      .byte.b	_F2
   8955  734c		       f0		      .byte.b	_F0
   8956  734d		       f0		      .byte.b	_F0
   8957  734e		       f2		      .byte.b	_F2
   8958  734f		       f2		      .byte.b	_F2
   8959  7350		       f0		      .byte.b	_F0
   8960  7351		       f0		      .byte.b	_F0
   8961  7352		       f2		      .byte.b	_F2
   8962  7353		       f2		      .byte.b	_F2
   8963  7354		       f0		      .byte.b	_F0
   8964  7355		       f0		      .byte.b	_F0
   8965  7356		       f2		      .byte.b	_F2
   8966  7357		       f2		      .byte.b	_F2
   8967  7358		       f0		      .byte.b	_F0
   8968  7359		       f0		      .byte.b	_F0
   8969  735a		       f2		      .byte.b	_F2
   8970  735b		       f2		      .byte.b	_F2
   8971  735c		       f0		      .byte.b	_F0
   8972  735d		       f0		      .byte.b	_F0
   8973  735e		       00		      .byte.b	_00
   8974  735f		       00		      .byte.b	_00
   8975  7360				   playfieldcolorL0473
   8976  7360		       c2		      .byte.b	_C2
   8977  7361		       c2		      .byte.b	_C2
   8978  7362		       00		      .byte.b	_00
   8979  7363		       00		      .byte.b	_00
   8980  7364		       00		      .byte.b	_00
   8981  7365		       00		      .byte.b	_00
   8982  7366		       00		      .byte.b	_00
   8983  7367		       00		      .byte.b	_00
   8984  7368		       00		      .byte.b	_00
   8985  7369		       00		      .byte.b	_00
   8986  736a		       00		      .byte.b	_00
   8987  736b		       00		      .byte.b	_00
   8988  736c		       00		      .byte.b	_00
   8989  736d		       00		      .byte.b	_00
   8990  736e		       00		      .byte.b	_00
   8991  736f		       00		      .byte.b	_00
   8992  7370		       00		      .byte.b	_00
   8993  7371		       00		      .byte.b	_00
   8994  7372		       00		      .byte.b	_00
   8995  7373		       00		      .byte.b	_00
   8996  7374		       00		      .byte.b	_00
   8997  7375		       00		      .byte.b	_00
   8998  7376		       00		      .byte.b	_00
   8999  7377		       00		      .byte.b	_00
   9000  7378		       00		      .byte.b	_00
   9001  7379		       00		      .byte.b	_00
   9002  737a		       00		      .byte.b	_00
   9003  737b		       00		      .byte.b	_00
   9004  737c		       00		      .byte.b	_00
   9005  737d		       00		      .byte.b	_00
   9006  737e		       00		      .byte.b	_00
   9007  737f		       00		      .byte.b	_00
   9008  7380		       00		      .byte.b	_00
   9009  7381		       00		      .byte.b	_00
   9010  7382		       00		      .byte.b	_00
   9011  7383		       00		      .byte.b	_00
   9012  7384		       00		      .byte.b	_00
   9013  7385		       00		      .byte.b	_00
   9014  7386		       00		      .byte.b	_00
   9015  7387		       00		      .byte.b	_00
   9016  7388		       00		      .byte.b	_00
   9017  7389		       00		      .byte.b	_00
   9018  738a		       00		      .byte.b	_00
   9019  738b		       00		      .byte.b	_00
   9020  738c		       00		      .byte.b	_00
   9021  738d		       00		      .byte.b	_00
   9022  738e		       00		      .byte.b	_00
   9023  738f		       00		      .byte.b	_00
   9024  7390		       00		      .byte.b	_00
   9025  7391		       00		      .byte.b	_00
   9026  7392		       00		      .byte.b	_00
   9027  7393		       00		      .byte.b	_00
   9028  7394		       00		      .byte.b	_00
   9029  7395		       00		      .byte.b	_00
   9030  7396		       00		      .byte.b	_00
   9031  7397		       34		      .byte.b	_34
   9032  7398		       34		      .byte.b	_34
   9033  7399		       34		      .byte.b	_34
   9034  739a		       34		      .byte.b	_34
   9035  739b		       34		      .byte.b	_34
   9036  739c		       34		      .byte.b	_34
   9037  739d		       34		      .byte.b	_34
   9038  739e		       34		      .byte.b	_34
   9039  739f		       34		      .byte.b	_34
   9040  73a0		       f0		      .byte.b	_F0
   9041  73a1		       f0		      .byte.b	_F0
   9042  73a2		       f2		      .byte.b	_F2
   9043  73a3		       f2		      .byte.b	_F2
   9044  73a4		       f0		      .byte.b	_F0
   9045  73a5		       f0		      .byte.b	_F0
   9046  73a6		       f2		      .byte.b	_F2
   9047  73a7		       f2		      .byte.b	_F2
   9048  73a8		       f0		      .byte.b	_F0
   9049  73a9		       f0		      .byte.b	_F0
   9050  73aa		       f2		      .byte.b	_F2
   9051  73ab		       f2		      .byte.b	_F2
   9052  73ac		       f0		      .byte.b	_F0
   9053  73ad		       f0		      .byte.b	_F0
   9054  73ae		       f2		      .byte.b	_F2
   9055  73af		       f2		      .byte.b	_F2
   9056  73b0		       f0		      .byte.b	_F0
   9057  73b1		       f0		      .byte.b	_F0
   9058  73b2		       f2		      .byte.b	_F2
   9059  73b3		       f2		      .byte.b	_F2
   9060  73b4		       f0		      .byte.b	_F0
   9061  73b5		       f0		      .byte.b	_F0
   9062  73b6		       00		      .byte.b	_00
   9063  73b7		       00		      .byte.b	_00
   9064  73b8				   playfieldcolorL0476
   9065  73b8		       c2		      .byte.b	_C2
   9066  73b9		       c2		      .byte.b	_C2
   9067  73ba		       00		      .byte.b	_00
   9068  73bb		       00		      .byte.b	_00
   9069  73bc		       00		      .byte.b	_00
   9070  73bd		       00		      .byte.b	_00
   9071  73be		       00		      .byte.b	_00
   9072  73bf		       00		      .byte.b	_00
   9073  73c0		       00		      .byte.b	_00
   9074  73c1		       00		      .byte.b	_00
   9075  73c2		       00		      .byte.b	_00
   9076  73c3		       00		      .byte.b	_00
   9077  73c4		       00		      .byte.b	_00
   9078  73c5		       00		      .byte.b	_00
   9079  73c6		       00		      .byte.b	_00
   9080  73c7		       00		      .byte.b	_00
   9081  73c8		       00		      .byte.b	_00
   9082  73c9		       00		      .byte.b	_00
   9083  73ca		       00		      .byte.b	_00
   9084  73cb		       00		      .byte.b	_00
   9085  73cc		       00		      .byte.b	_00
   9086  73cd		       00		      .byte.b	_00
   9087  73ce		       00		      .byte.b	_00
   9088  73cf		       00		      .byte.b	_00
   9089  73d0		       00		      .byte.b	_00
   9090  73d1		       00		      .byte.b	_00
   9091  73d2		       00		      .byte.b	_00
   9092  73d3		       00		      .byte.b	_00
   9093  73d4		       00		      .byte.b	_00
   9094  73d5		       00		      .byte.b	_00
   9095  73d6		       00		      .byte.b	_00
   9096  73d7		       00		      .byte.b	_00
   9097  73d8		       00		      .byte.b	_00
   9098  73d9		       00		      .byte.b	_00
   9099  73da		       00		      .byte.b	_00
   9100  73db		       00		      .byte.b	_00
   9101  73dc		       00		      .byte.b	_00
   9102  73dd		       00		      .byte.b	_00
   9103  73de		       00		      .byte.b	_00
   9104  73df		       00		      .byte.b	_00
   9105  73e0		       00		      .byte.b	_00
   9106  73e1		       00		      .byte.b	_00
   9107  73e2		       00		      .byte.b	_00
   9108  73e3		       00		      .byte.b	_00
   9109  73e4		       00		      .byte.b	_00
   9110  73e5		       00		      .byte.b	_00
   9111  73e6		       00		      .byte.b	_00
   9112  73e7		       00		      .byte.b	_00
   9113  73e8		       00		      .byte.b	_00
   9114  73e9		       00		      .byte.b	_00
   9115  73ea		       00		      .byte.b	_00
   9116  73eb		       00		      .byte.b	_00
   9117  73ec		       00		      .byte.b	_00
   9118  73ed		       00		      .byte.b	_00
   9119  73ee		       00		      .byte.b	_00
   9120  73ef		       34		      .byte.b	_34
   9121  73f0		       34		      .byte.b	_34
   9122  73f1		       34		      .byte.b	_34
   9123  73f2		       34		      .byte.b	_34
   9124  73f3		       34		      .byte.b	_34
   9125  73f4		       34		      .byte.b	_34
   9126  73f5		       34		      .byte.b	_34
   9127  73f6		       34		      .byte.b	_34
   9128  73f7		       34		      .byte.b	_34
   9129  73f8		       34		      .byte.b	_34
   9130  73f9		       34		      .byte.b	_34
   9131  73fa		       f2		      .byte.b	_F2
   9132  73fb		       f2		      .byte.b	_F2
   9133  73fc		       f0		      .byte.b	_F0
   9134  73fd		       f0		      .byte.b	_F0
   9135  73fe		       f2		      .byte.b	_F2
   9136  73ff		       f2		      .byte.b	_F2
   9137  7400		       f0		      .byte.b	_F0
   9138  7401		       f0		      .byte.b	_F0
   9139  7402		       f2		      .byte.b	_F2
   9140  7403		       f2		      .byte.b	_F2
   9141  7404		       f0		      .byte.b	_F0
   9142  7405		       f0		      .byte.b	_F0
   9143  7406		       f2		      .byte.b	_F2
   9144  7407		       f2		      .byte.b	_F2
   9145  7408		       f0		      .byte.b	_F0
   9146  7409		       f0		      .byte.b	_F0
   9147  740a		       f2		      .byte.b	_F2
   9148  740b		       f2		      .byte.b	_F2
   9149  740c		       f0		      .byte.b	_F0
   9150  740d		       f0		      .byte.b	_F0
   9151  740e		       00		      .byte.b	_00
   9152  740f		       00		      .byte.b	_00
   9153  7410				   playfieldcolorL0479
   9154  7410		       c2		      .byte.b	_C2
   9155  7411		       c2		      .byte.b	_C2
   9156  7412		       00		      .byte.b	_00
   9157  7413		       00		      .byte.b	_00
   9158  7414		       00		      .byte.b	_00
   9159  7415		       00		      .byte.b	_00
   9160  7416		       00		      .byte.b	_00
   9161  7417		       00		      .byte.b	_00
   9162  7418		       00		      .byte.b	_00
   9163  7419		       00		      .byte.b	_00
   9164  741a		       00		      .byte.b	_00
   9165  741b		       00		      .byte.b	_00
   9166  741c		       00		      .byte.b	_00
   9167  741d		       00		      .byte.b	_00
   9168  741e		       00		      .byte.b	_00
   9169  741f		       00		      .byte.b	_00
   9170  7420		       00		      .byte.b	_00
   9171  7421		       00		      .byte.b	_00
   9172  7422		       00		      .byte.b	_00
   9173  7423		       00		      .byte.b	_00
   9174  7424		       00		      .byte.b	_00
   9175  7425		       00		      .byte.b	_00
   9176  7426		       00		      .byte.b	_00
   9177  7427		       00		      .byte.b	_00
   9178  7428		       00		      .byte.b	_00
   9179  7429		       00		      .byte.b	_00
   9180  742a		       00		      .byte.b	_00
   9181  742b		       00		      .byte.b	_00
   9182  742c		       00		      .byte.b	_00
   9183  742d		       00		      .byte.b	_00
   9184  742e		       00		      .byte.b	_00
   9185  742f		       00		      .byte.b	_00
   9186  7430		       00		      .byte.b	_00
   9187  7431		       00		      .byte.b	_00
   9188  7432		       00		      .byte.b	_00
   9189  7433		       00		      .byte.b	_00
   9190  7434		       00		      .byte.b	_00
   9191  7435		       00		      .byte.b	_00
   9192  7436		       00		      .byte.b	_00
   9193  7437		       00		      .byte.b	_00
   9194  7438		       00		      .byte.b	_00
   9195  7439		       00		      .byte.b	_00
   9196  743a		       00		      .byte.b	_00
   9197  743b		       00		      .byte.b	_00
   9198  743c		       00		      .byte.b	_00
   9199  743d		       00		      .byte.b	_00
   9200  743e		       00		      .byte.b	_00
   9201  743f		       00		      .byte.b	_00
   9202  7440		       00		      .byte.b	_00
   9203  7441		       00		      .byte.b	_00
   9204  7442		       00		      .byte.b	_00
   9205  7443		       00		      .byte.b	_00
   9206  7444		       00		      .byte.b	_00
   9207  7445		       00		      .byte.b	_00
   9208  7446		       00		      .byte.b	_00
   9209  7447		       34		      .byte.b	_34
   9210  7448		       34		      .byte.b	_34
   9211  7449		       34		      .byte.b	_34
   9212  744a		       34		      .byte.b	_34
   9213  744b		       34		      .byte.b	_34
   9214  744c		       34		      .byte.b	_34
   9215  744d		       34		      .byte.b	_34
   9216  744e		       34		      .byte.b	_34
   9217  744f		       34		      .byte.b	_34
   9218  7450		       34		      .byte.b	_34
   9219  7451		       34		      .byte.b	_34
   9220  7452		       34		      .byte.b	_34
   9221  7453		       34		      .byte.b	_34
   9222  7454		       f0		      .byte.b	_F0
   9223  7455		       f0		      .byte.b	_F0
   9224  7456		       f2		      .byte.b	_F2
   9225  7457		       f2		      .byte.b	_F2
   9226  7458		       f0		      .byte.b	_F0
   9227  7459		       f0		      .byte.b	_F0
   9228  745a		       f2		      .byte.b	_F2
   9229  745b		       f2		      .byte.b	_F2
   9230  745c		       f0		      .byte.b	_F0
   9231  745d		       f0		      .byte.b	_F0
   9232  745e		       f2		      .byte.b	_F2
   9233  745f		       f2		      .byte.b	_F2
   9234  7460		       f0		      .byte.b	_F0
   9235  7461		       f0		      .byte.b	_F0
   9236  7462		       f2		      .byte.b	_F2
   9237  7463		       f2		      .byte.b	_F2
   9238  7464		       f0		      .byte.b	_F0
   9239  7465		       f0		      .byte.b	_F0
   9240  7466		       00		      .byte.b	_00
   9241  7467		       00		      .byte.b	_00
   9242  7468				   playfieldcolorL0483
   9243  7468		       c2		      .byte.b	_C2
   9244  7469		       c2		      .byte.b	_C2
   9245  746a		       00		      .byte.b	_00
   9246  746b		       00		      .byte.b	_00
   9247  746c		       00		      .byte.b	_00
   9248  746d		       00		      .byte.b	_00
   9249  746e		       00		      .byte.b	_00
   9250  746f		       00		      .byte.b	_00
   9251  7470		       00		      .byte.b	_00
   9252  7471		       00		      .byte.b	_00
   9253  7472		       00		      .byte.b	_00
   9254  7473		       00		      .byte.b	_00
   9255  7474		       00		      .byte.b	_00
   9256  7475		       00		      .byte.b	_00
   9257  7476		       00		      .byte.b	_00
   9258  7477		       00		      .byte.b	_00
   9259  7478		       00		      .byte.b	_00
   9260  7479		       00		      .byte.b	_00
   9261  747a		       00		      .byte.b	_00
   9262  747b		       00		      .byte.b	_00
   9263  747c		       00		      .byte.b	_00
   9264  747d		       00		      .byte.b	_00
   9265  747e		       00		      .byte.b	_00
   9266  747f		       00		      .byte.b	_00
   9267  7480		       00		      .byte.b	_00
   9268  7481		       00		      .byte.b	_00
   9269  7482		       00		      .byte.b	_00
   9270  7483		       00		      .byte.b	_00
   9271  7484		       00		      .byte.b	_00
   9272  7485		       00		      .byte.b	_00
   9273  7486		       00		      .byte.b	_00
   9274  7487		       00		      .byte.b	_00
   9275  7488		       00		      .byte.b	_00
   9276  7489		       00		      .byte.b	_00
   9277  748a		       00		      .byte.b	_00
   9278  748b		       00		      .byte.b	_00
   9279  748c		       00		      .byte.b	_00
   9280  748d		       00		      .byte.b	_00
   9281  748e		       00		      .byte.b	_00
   9282  748f		       00		      .byte.b	_00
   9283  7490		       00		      .byte.b	_00
   9284  7491		       00		      .byte.b	_00
   9285  7492		       00		      .byte.b	_00
   9286  7493		       00		      .byte.b	_00
   9287  7494		       00		      .byte.b	_00
   9288  7495		       00		      .byte.b	_00
   9289  7496		       00		      .byte.b	_00
   9290  7497		       00		      .byte.b	_00
   9291  7498		       00		      .byte.b	_00
   9292  7499		       00		      .byte.b	_00
   9293  749a		       00		      .byte.b	_00
   9294  749b		       00		      .byte.b	_00
   9295  749c		       00		      .byte.b	_00
   9296  749d		       00		      .byte.b	_00
   9297  749e		       00		      .byte.b	_00
   9298  749f		       34		      .byte.b	_34
   9299  74a0		       34		      .byte.b	_34
   9300  74a1		       34		      .byte.b	_34
   9301  74a2		       34		      .byte.b	_34
   9302  74a3		       34		      .byte.b	_34
   9303  74a4		       34		      .byte.b	_34
   9304  74a5		       34		      .byte.b	_34
   9305  74a6		       34		      .byte.b	_34
   9306  74a7		       34		      .byte.b	_34
   9307  74a8		       34		      .byte.b	_34
   9308  74a9		       34		      .byte.b	_34
   9309  74aa		       34		      .byte.b	_34
   9310  74ab		       34		      .byte.b	_34
   9311  74ac		       34		      .byte.b	_34
   9312  74ad		       34		      .byte.b	_34
   9313  74ae		       f2		      .byte.b	_F2
   9314  74af		       f2		      .byte.b	_F2
   9315  74b0		       f0		      .byte.b	_F0
   9316  74b1		       f0		      .byte.b	_F0
   9317  74b2		       f2		      .byte.b	_F2
   9318  74b3		       f2		      .byte.b	_F2
   9319  74b4		       f0		      .byte.b	_F0
   9320  74b5		       f0		      .byte.b	_F0
   9321  74b6		       f2		      .byte.b	_F2
   9322  74b7		       f2		      .byte.b	_F2
   9323  74b8		       f0		      .byte.b	_F0
   9324  74b9		       f0		      .byte.b	_F0
   9325  74ba		       f2		      .byte.b	_F2
   9326  74bb		       f2		      .byte.b	_F2
   9327  74bc		       f0		      .byte.b	_F0
   9328  74bd		       f0		      .byte.b	_F0
   9329  74be		       00		      .byte.b	_00
   9330  74bf		       00		      .byte.b	_00
   9331  74c0				   playfieldcolorL0486
   9332  74c0		       c2		      .byte.b	_C2
   9333  74c1		       c2		      .byte.b	_C2
   9334  74c2		       00		      .byte.b	_00
   9335  74c3		       00		      .byte.b	_00
   9336  74c4		       00		      .byte.b	_00
   9337  74c5		       00		      .byte.b	_00
   9338  74c6		       00		      .byte.b	_00
   9339  74c7		       00		      .byte.b	_00
   9340  74c8		       00		      .byte.b	_00
   9341  74c9		       00		      .byte.b	_00
   9342  74ca		       00		      .byte.b	_00
   9343  74cb		       00		      .byte.b	_00
   9344  74cc		       00		      .byte.b	_00
   9345  74cd		       00		      .byte.b	_00
   9346  74ce		       00		      .byte.b	_00
   9347  74cf		       00		      .byte.b	_00
   9348  74d0		       00		      .byte.b	_00
   9349  74d1		       00		      .byte.b	_00
   9350  74d2		       00		      .byte.b	_00
   9351  74d3		       00		      .byte.b	_00
   9352  74d4		       00		      .byte.b	_00
   9353  74d5		       00		      .byte.b	_00
   9354  74d6		       00		      .byte.b	_00
   9355  74d7		       00		      .byte.b	_00
   9356  74d8		       00		      .byte.b	_00
   9357  74d9		       00		      .byte.b	_00
   9358  74da		       00		      .byte.b	_00
   9359  74db		       00		      .byte.b	_00
   9360  74dc		       00		      .byte.b	_00
   9361  74dd		       00		      .byte.b	_00
   9362  74de		       00		      .byte.b	_00
   9363  74df		       00		      .byte.b	_00
   9364  74e0		       00		      .byte.b	_00
   9365  74e1		       00		      .byte.b	_00
   9366  74e2		       00		      .byte.b	_00
   9367  74e3		       00		      .byte.b	_00
   9368  74e4		       00		      .byte.b	_00
   9369  74e5		       00		      .byte.b	_00
   9370  74e6		       00		      .byte.b	_00
   9371  74e7		       00		      .byte.b	_00
   9372  74e8		       00		      .byte.b	_00
   9373  74e9		       00		      .byte.b	_00
   9374  74ea		       00		      .byte.b	_00
   9375  74eb		       00		      .byte.b	_00
   9376  74ec		       00		      .byte.b	_00
   9377  74ed		       00		      .byte.b	_00
   9378  74ee		       00		      .byte.b	_00
   9379  74ef		       00		      .byte.b	_00
   9380  74f0		       00		      .byte.b	_00
   9381  74f1		       00		      .byte.b	_00
   9382  74f2		       00		      .byte.b	_00
   9383  74f3		       00		      .byte.b	_00
   9384  74f4		       00		      .byte.b	_00
   9385  74f5		       00		      .byte.b	_00
   9386  74f6		       00		      .byte.b	_00
   9387  74f7		       34		      .byte.b	_34
   9388  74f8		       34		      .byte.b	_34
   9389  74f9		       34		      .byte.b	_34
   9390  74fa		       34		      .byte.b	_34
   9391  74fb		       34		      .byte.b	_34
   9392  74fc		       34		      .byte.b	_34
   9393  74fd		       34		      .byte.b	_34
   9394  74fe		       34		      .byte.b	_34
   9395  74ff		       34		      .byte.b	_34
   9396  7500		       34		      .byte.b	_34
   9397  7501		       34		      .byte.b	_34
   9398  7502		       34		      .byte.b	_34
   9399  7503		       34		      .byte.b	_34
   9400  7504		       34		      .byte.b	_34
   9401  7505		       34		      .byte.b	_34
   9402  7506		       34		      .byte.b	_34
   9403  7507		       34		      .byte.b	_34
   9404  7508		       f0		      .byte.b	_F0
   9405  7509		       f0		      .byte.b	_F0
   9406  750a		       f2		      .byte.b	_F2
   9407  750b		       f2		      .byte.b	_F2
   9408  750c		       f0		      .byte.b	_F0
   9409  750d		       f0		      .byte.b	_F0
   9410  750e		       f2		      .byte.b	_F2
   9411  750f		       f2		      .byte.b	_F2
   9412  7510		       f0		      .byte.b	_F0
   9413  7511		       f0		      .byte.b	_F0
   9414  7512		       f2		      .byte.b	_F2
   9415  7513		       f2		      .byte.b	_F2
   9416  7514		       f0		      .byte.b	_F0
   9417  7515		       f0		      .byte.b	_F0
   9418  7516		       00		      .byte.b	_00
   9419  7517		       00		      .byte.b	_00
   9420  7518				   playfieldcolorL0488
   9421  7518		       c2		      .byte.b	_C2
   9422  7519		       c2		      .byte.b	_C2
   9423  751a		       00		      .byte.b	_00
   9424  751b		       00		      .byte.b	_00
   9425  751c		       00		      .byte.b	_00
   9426  751d		       00		      .byte.b	_00
   9427  751e		       00		      .byte.b	_00
   9428  751f		       00		      .byte.b	_00
   9429  7520		       00		      .byte.b	_00
   9430  7521		       00		      .byte.b	_00
   9431  7522		       00		      .byte.b	_00
   9432  7523		       00		      .byte.b	_00
   9433  7524		       00		      .byte.b	_00
   9434  7525		       00		      .byte.b	_00
   9435  7526		       00		      .byte.b	_00
   9436  7527		       00		      .byte.b	_00
   9437  7528		       00		      .byte.b	_00
   9438  7529		       00		      .byte.b	_00
   9439  752a		       00		      .byte.b	_00
   9440  752b		       00		      .byte.b	_00
   9441  752c		       00		      .byte.b	_00
   9442  752d		       00		      .byte.b	_00
   9443  752e		       00		      .byte.b	_00
   9444  752f		       00		      .byte.b	_00
   9445  7530		       00		      .byte.b	_00
   9446  7531		       00		      .byte.b	_00
   9447  7532		       00		      .byte.b	_00
   9448  7533		       00		      .byte.b	_00
   9449  7534		       00		      .byte.b	_00
   9450  7535		       00		      .byte.b	_00
   9451  7536		       00		      .byte.b	_00
   9452  7537		       00		      .byte.b	_00
   9453  7538		       00		      .byte.b	_00
   9454  7539		       00		      .byte.b	_00
   9455  753a		       00		      .byte.b	_00
   9456  753b		       00		      .byte.b	_00
   9457  753c		       00		      .byte.b	_00
   9458  753d		       00		      .byte.b	_00
   9459  753e		       00		      .byte.b	_00
   9460  753f		       00		      .byte.b	_00
   9461  7540		       00		      .byte.b	_00
   9462  7541		       00		      .byte.b	_00
   9463  7542		       00		      .byte.b	_00
   9464  7543		       00		      .byte.b	_00
   9465  7544		       00		      .byte.b	_00
   9466  7545		       00		      .byte.b	_00
   9467  7546		       00		      .byte.b	_00
   9468  7547		       00		      .byte.b	_00
   9469  7548		       00		      .byte.b	_00
   9470  7549		       00		      .byte.b	_00
   9471  754a		       00		      .byte.b	_00
   9472  754b		       00		      .byte.b	_00
   9473  754c		       00		      .byte.b	_00
   9474  754d		       00		      .byte.b	_00
   9475  754e		       00		      .byte.b	_00
   9476  754f		       34		      .byte.b	_34
   9477  7550		       34		      .byte.b	_34
   9478  7551		       34		      .byte.b	_34
   9479  7552		       34		      .byte.b	_34
   9480  7553		       34		      .byte.b	_34
   9481  7554		       34		      .byte.b	_34
   9482  7555		       34		      .byte.b	_34
   9483  7556		       34		      .byte.b	_34
   9484  7557		       34		      .byte.b	_34
   9485  7558		       34		      .byte.b	_34
   9486  7559		       34		      .byte.b	_34
   9487  755a		       34		      .byte.b	_34
   9488  755b		       34		      .byte.b	_34
   9489  755c		       34		      .byte.b	_34
   9490  755d		       34		      .byte.b	_34
   9491  755e		       34		      .byte.b	_34
   9492  755f		       34		      .byte.b	_34
   9493  7560		       34		      .byte.b	_34
   9494  7561		       34		      .byte.b	_34
   9495  7562		       f2		      .byte.b	_F2
   9496  7563		       f2		      .byte.b	_F2
   9497  7564		       f0		      .byte.b	_F0
   9498  7565		       f0		      .byte.b	_F0
   9499  7566		       f2		      .byte.b	_F2
   9500  7567		       f2		      .byte.b	_F2
   9501  7568		       f0		      .byte.b	_F0
   9502  7569		       f0		      .byte.b	_F0
   9503  756a		       f2		      .byte.b	_F2
   9504  756b		       f2		      .byte.b	_F2
   9505  756c		       f0		      .byte.b	_F0
   9506  756d		       f0		      .byte.b	_F0
   9507  756e		       00		      .byte.b	_00
   9508  756f		       00		      .byte.b	_00
   9509  7570				   playfieldcolorL0492
   9510  7570		       c2		      .byte.b	_C2
   9511  7571		       c2		      .byte.b	_C2
   9512  7572		       00		      .byte.b	_00
   9513  7573		       00		      .byte.b	_00
   9514  7574		       00		      .byte.b	_00
   9515  7575		       00		      .byte.b	_00
   9516  7576		       00		      .byte.b	_00
   9517  7577		       00		      .byte.b	_00
   9518  7578		       00		      .byte.b	_00
   9519  7579		       00		      .byte.b	_00
   9520  757a		       00		      .byte.b	_00
   9521  757b		       00		      .byte.b	_00
   9522  757c		       00		      .byte.b	_00
   9523  757d		       00		      .byte.b	_00
   9524  757e		       00		      .byte.b	_00
   9525  757f		       00		      .byte.b	_00
   9526  7580		       00		      .byte.b	_00
   9527  7581		       00		      .byte.b	_00
   9528  7582		       00		      .byte.b	_00
   9529  7583		       00		      .byte.b	_00
   9530  7584		       00		      .byte.b	_00
   9531  7585		       00		      .byte.b	_00
   9532  7586		       00		      .byte.b	_00
   9533  7587		       00		      .byte.b	_00
   9534  7588		       00		      .byte.b	_00
   9535  7589		       00		      .byte.b	_00
   9536  758a		       00		      .byte.b	_00
   9537  758b		       00		      .byte.b	_00
   9538  758c		       00		      .byte.b	_00
   9539  758d		       00		      .byte.b	_00
   9540  758e		       00		      .byte.b	_00
   9541  758f		       00		      .byte.b	_00
   9542  7590		       00		      .byte.b	_00
   9543  7591		       00		      .byte.b	_00
   9544  7592		       00		      .byte.b	_00
   9545  7593		       00		      .byte.b	_00
   9546  7594		       00		      .byte.b	_00
   9547  7595		       00		      .byte.b	_00
   9548  7596		       00		      .byte.b	_00
   9549  7597		       00		      .byte.b	_00
   9550  7598		       00		      .byte.b	_00
   9551  7599		       00		      .byte.b	_00
   9552  759a		       00		      .byte.b	_00
   9553  759b		       00		      .byte.b	_00
   9554  759c		       00		      .byte.b	_00
   9555  759d		       00		      .byte.b	_00
   9556  759e		       00		      .byte.b	_00
   9557  759f		       00		      .byte.b	_00
   9558  75a0		       00		      .byte.b	_00
   9559  75a1		       00		      .byte.b	_00
   9560  75a2		       00		      .byte.b	_00
   9561  75a3		       00		      .byte.b	_00
   9562  75a4		       00		      .byte.b	_00
   9563  75a5		       00		      .byte.b	_00
   9564  75a6		       00		      .byte.b	_00
   9565  75a7		       34		      .byte.b	_34
   9566  75a8		       34		      .byte.b	_34
   9567  75a9		       34		      .byte.b	_34
   9568  75aa		       34		      .byte.b	_34
   9569  75ab		       34		      .byte.b	_34
   9570  75ac		       34		      .byte.b	_34
   9571  75ad		       34		      .byte.b	_34
   9572  75ae		       34		      .byte.b	_34
   9573  75af		       34		      .byte.b	_34
   9574  75b0		       34		      .byte.b	_34
   9575  75b1		       34		      .byte.b	_34
   9576  75b2		       34		      .byte.b	_34
   9577  75b3		       34		      .byte.b	_34
   9578  75b4		       34		      .byte.b	_34
   9579  75b5		       34		      .byte.b	_34
   9580  75b6		       34		      .byte.b	_34
   9581  75b7		       34		      .byte.b	_34
   9582  75b8		       34		      .byte.b	_34
   9583  75b9		       34		      .byte.b	_34
   9584  75ba		       34		      .byte.b	_34
   9585  75bb		       34		      .byte.b	_34
   9586  75bc		       f0		      .byte.b	_F0
   9587  75bd		       f0		      .byte.b	_F0
   9588  75be		       f2		      .byte.b	_F2
   9589  75bf		       f2		      .byte.b	_F2
   9590  75c0		       f0		      .byte.b	_F0
   9591  75c1		       f0		      .byte.b	_F0
   9592  75c2		       f2		      .byte.b	_F2
   9593  75c3		       f2		      .byte.b	_F2
   9594  75c4		       f0		      .byte.b	_F0
   9595  75c5		       f0		      .byte.b	_F0
   9596  75c6		       00		      .byte.b	_00
   9597  75c7		       00		      .byte.b	_00
   9598  75c8				   playfieldcolorL0494
   9599  75c8		       c2		      .byte.b	_C2
   9600  75c9		       c2		      .byte.b	_C2
   9601  75ca		       00		      .byte.b	_00
   9602  75cb		       00		      .byte.b	_00
   9603  75cc		       00		      .byte.b	_00
   9604  75cd		       00		      .byte.b	_00
   9605  75ce		       00		      .byte.b	_00
   9606  75cf		       00		      .byte.b	_00
   9607  75d0		       00		      .byte.b	_00
   9608  75d1		       00		      .byte.b	_00
   9609  75d2		       00		      .byte.b	_00
   9610  75d3		       00		      .byte.b	_00
   9611  75d4		       00		      .byte.b	_00
   9612  75d5		       00		      .byte.b	_00
   9613  75d6		       00		      .byte.b	_00
   9614  75d7		       00		      .byte.b	_00
   9615  75d8		       00		      .byte.b	_00
   9616  75d9		       00		      .byte.b	_00
   9617  75da		       00		      .byte.b	_00
   9618  75db		       00		      .byte.b	_00
   9619  75dc		       00		      .byte.b	_00
   9620  75dd		       00		      .byte.b	_00
   9621  75de		       00		      .byte.b	_00
   9622  75df		       00		      .byte.b	_00
   9623  75e0		       00		      .byte.b	_00
   9624  75e1		       00		      .byte.b	_00
   9625  75e2		       00		      .byte.b	_00
   9626  75e3		       00		      .byte.b	_00
   9627  75e4		       00		      .byte.b	_00
   9628  75e5		       00		      .byte.b	_00
   9629  75e6		       00		      .byte.b	_00
   9630  75e7		       00		      .byte.b	_00
   9631  75e8		       00		      .byte.b	_00
   9632  75e9		       00		      .byte.b	_00
   9633  75ea		       00		      .byte.b	_00
   9634  75eb		       00		      .byte.b	_00
   9635  75ec		       00		      .byte.b	_00
   9636  75ed		       00		      .byte.b	_00
   9637  75ee		       00		      .byte.b	_00
   9638  75ef		       00		      .byte.b	_00
   9639  75f0		       00		      .byte.b	_00
   9640  75f1		       00		      .byte.b	_00
   9641  75f2		       00		      .byte.b	_00
   9642  75f3		       00		      .byte.b	_00
   9643  75f4		       00		      .byte.b	_00
   9644  75f5		       00		      .byte.b	_00
   9645  75f6		       00		      .byte.b	_00
   9646  75f7		       00		      .byte.b	_00
   9647  75f8		       00		      .byte.b	_00
   9648  75f9		       00		      .byte.b	_00
   9649  75fa		       00		      .byte.b	_00
   9650  75fb		       00		      .byte.b	_00
   9651  75fc		       00		      .byte.b	_00
   9652  75fd		       00		      .byte.b	_00
   9653  75fe		       00		      .byte.b	_00
   9654  75ff		       34		      .byte.b	_34
   9655  7600		       34		      .byte.b	_34
   9656  7601		       34		      .byte.b	_34
   9657  7602		       34		      .byte.b	_34
   9658  7603		       34		      .byte.b	_34
   9659  7604		       34		      .byte.b	_34
   9660  7605		       34		      .byte.b	_34
   9661  7606		       34		      .byte.b	_34
   9662  7607		       34		      .byte.b	_34
   9663  7608		       34		      .byte.b	_34
   9664  7609		       34		      .byte.b	_34
   9665  760a		       34		      .byte.b	_34
   9666  760b		       34		      .byte.b	_34
   9667  760c		       34		      .byte.b	_34
   9668  760d		       34		      .byte.b	_34
   9669  760e		       34		      .byte.b	_34
   9670  760f		       34		      .byte.b	_34
   9671  7610		       34		      .byte.b	_34
   9672  7611		       34		      .byte.b	_34
   9673  7612		       34		      .byte.b	_34
   9674  7613		       34		      .byte.b	_34
   9675  7614		       34		      .byte.b	_34
   9676  7615		       34		      .byte.b	_34
   9677  7616		       f2		      .byte.b	_F2
   9678  7617		       f2		      .byte.b	_F2
   9679  7618		       f0		      .byte.b	_F0
   9680  7619		       f0		      .byte.b	_F0
   9681  761a		       f2		      .byte.b	_F2
   9682  761b		       f2		      .byte.b	_F2
   9683  761c		       f0		      .byte.b	_F0
   9684  761d		       f0		      .byte.b	_F0
   9685  761e		       00		      .byte.b	_00
   9686  761f		       00		      .byte.b	_00
   9687  7620				   playfieldcolorL0496
   9688  7620		       c2		      .byte.b	_C2
   9689  7621		       c2		      .byte.b	_C2
   9690  7622		       00		      .byte.b	_00
   9691  7623		       00		      .byte.b	_00
   9692  7624		       00		      .byte.b	_00
   9693  7625		       00		      .byte.b	_00
   9694  7626		       00		      .byte.b	_00
   9695  7627		       00		      .byte.b	_00
   9696  7628		       00		      .byte.b	_00
   9697  7629		       00		      .byte.b	_00
   9698  762a		       00		      .byte.b	_00
   9699  762b		       00		      .byte.b	_00
   9700  762c		       00		      .byte.b	_00
   9701  762d		       00		      .byte.b	_00
   9702  762e		       00		      .byte.b	_00
   9703  762f		       00		      .byte.b	_00
   9704  7630		       00		      .byte.b	_00
   9705  7631		       00		      .byte.b	_00
   9706  7632		       00		      .byte.b	_00
   9707  7633		       00		      .byte.b	_00
   9708  7634		       00		      .byte.b	_00
   9709  7635		       00		      .byte.b	_00
   9710  7636		       00		      .byte.b	_00
   9711  7637		       00		      .byte.b	_00
   9712  7638		       00		      .byte.b	_00
   9713  7639		       00		      .byte.b	_00
   9714  763a		       00		      .byte.b	_00
   9715  763b		       00		      .byte.b	_00
   9716  763c		       00		      .byte.b	_00
   9717  763d		       00		      .byte.b	_00
   9718  763e		       00		      .byte.b	_00
   9719  763f		       00		      .byte.b	_00
   9720  7640		       00		      .byte.b	_00
   9721  7641		       00		      .byte.b	_00
   9722  7642		       00		      .byte.b	_00
   9723  7643		       00		      .byte.b	_00
   9724  7644		       00		      .byte.b	_00
   9725  7645		       00		      .byte.b	_00
   9726  7646		       00		      .byte.b	_00
   9727  7647		       00		      .byte.b	_00
   9728  7648		       00		      .byte.b	_00
   9729  7649		       00		      .byte.b	_00
   9730  764a		       00		      .byte.b	_00
   9731  764b		       00		      .byte.b	_00
   9732  764c		       00		      .byte.b	_00
   9733  764d		       00		      .byte.b	_00
   9734  764e		       00		      .byte.b	_00
   9735  764f		       00		      .byte.b	_00
   9736  7650		       00		      .byte.b	_00
   9737  7651		       00		      .byte.b	_00
   9738  7652		       00		      .byte.b	_00
   9739  7653		       00		      .byte.b	_00
   9740  7654		       00		      .byte.b	_00
   9741  7655		       00		      .byte.b	_00
   9742  7656		       00		      .byte.b	_00
   9743  7657		       40		      .byte.b	_40
   9744  7658		       40		      .byte.b	_40
   9745  7659		       40		      .byte.b	_40
   9746  765a		       40		      .byte.b	_40
   9747  765b		       40		      .byte.b	_40
   9748  765c		       40		      .byte.b	_40
   9749  765d		       40		      .byte.b	_40
   9750  765e		       40		      .byte.b	_40
   9751  765f		       40		      .byte.b	_40
   9752  7660		       40		      .byte.b	_40
   9753  7661		       40		      .byte.b	_40
   9754  7662		       40		      .byte.b	_40
   9755  7663		       40		      .byte.b	_40
   9756  7664		       40		      .byte.b	_40
   9757  7665		       40		      .byte.b	_40
   9758  7666		       40		      .byte.b	_40
   9759  7667		       40		      .byte.b	_40
   9760  7668		       40		      .byte.b	_40
   9761  7669		       40		      .byte.b	_40
   9762  766a		       40		      .byte.b	_40
   9763  766b		       40		      .byte.b	_40
   9764  766c		       40		      .byte.b	_40
   9765  766d		       40		      .byte.b	_40
   9766  766e		       40		      .byte.b	_40
   9767  766f		       40		      .byte.b	_40
   9768  7670		       f0		      .byte.b	_F0
   9769  7671		       f0		      .byte.b	_F0
   9770  7672		       f2		      .byte.b	_F2
   9771  7673		       f2		      .byte.b	_F2
   9772  7674		       f0		      .byte.b	_F0
   9773  7675		       f0		      .byte.b	_F0
   9774  7676		       00		      .byte.b	_00
   9775  7677		       00		      .byte.b	_00
   9776  7678				   playfieldcolorL0498
   9777  7678		       c2		      .byte.b	_C2
   9778  7679		       c2		      .byte.b	_C2
   9779  767a		       00		      .byte.b	_00
   9780  767b		       00		      .byte.b	_00
   9781  767c		       00		      .byte.b	_00
   9782  767d		       00		      .byte.b	_00
   9783  767e		       00		      .byte.b	_00
   9784  767f		       00		      .byte.b	_00
   9785  7680		       00		      .byte.b	_00
   9786  7681		       00		      .byte.b	_00
   9787  7682		       00		      .byte.b	_00
   9788  7683		       00		      .byte.b	_00
   9789  7684		       00		      .byte.b	_00
   9790  7685		       00		      .byte.b	_00
   9791  7686		       00		      .byte.b	_00
   9792  7687		       00		      .byte.b	_00
   9793  7688		       00		      .byte.b	_00
   9794  7689		       00		      .byte.b	_00
   9795  768a		       00		      .byte.b	_00
   9796  768b		       00		      .byte.b	_00
   9797  768c		       00		      .byte.b	_00
   9798  768d		       00		      .byte.b	_00
   9799  768e		       00		      .byte.b	_00
   9800  768f		       00		      .byte.b	_00
   9801  7690		       00		      .byte.b	_00
   9802  7691		       00		      .byte.b	_00
   9803  7692		       00		      .byte.b	_00
   9804  7693		       00		      .byte.b	_00
   9805  7694		       00		      .byte.b	_00
   9806  7695		       00		      .byte.b	_00
   9807  7696		       00		      .byte.b	_00
   9808  7697		       00		      .byte.b	_00
   9809  7698		       00		      .byte.b	_00
   9810  7699		       00		      .byte.b	_00
   9811  769a		       00		      .byte.b	_00
   9812  769b		       00		      .byte.b	_00
   9813  769c		       00		      .byte.b	_00
   9814  769d		       00		      .byte.b	_00
   9815  769e		       00		      .byte.b	_00
   9816  769f		       00		      .byte.b	_00
   9817  76a0		       00		      .byte.b	_00
   9818  76a1		       00		      .byte.b	_00
   9819  76a2		       00		      .byte.b	_00
   9820  76a3		       00		      .byte.b	_00
   9821  76a4		       00		      .byte.b	_00
   9822  76a5		       00		      .byte.b	_00
   9823  76a6		       00		      .byte.b	_00
   9824  76a7		       00		      .byte.b	_00
   9825  76a8		       00		      .byte.b	_00
   9826  76a9		       00		      .byte.b	_00
   9827  76aa		       00		      .byte.b	_00
   9828  76ab		       00		      .byte.b	_00
   9829  76ac		       00		      .byte.b	_00
   9830  76ad		       00		      .byte.b	_00
   9831  76ae		       00		      .byte.b	_00
   9832  76af		       40		      .byte.b	_40
   9833  76b0		       40		      .byte.b	_40
   9834  76b1		       40		      .byte.b	_40
   9835  76b2		       40		      .byte.b	_40
   9836  76b3		       40		      .byte.b	_40
   9837  76b4		       40		      .byte.b	_40
   9838  76b5		       40		      .byte.b	_40
   9839  76b6		       40		      .byte.b	_40
   9840  76b7		       40		      .byte.b	_40
   9841  76b8		       40		      .byte.b	_40
   9842  76b9		       40		      .byte.b	_40
   9843  76ba		       40		      .byte.b	_40
   9844  76bb		       40		      .byte.b	_40
   9845  76bc		       40		      .byte.b	_40
   9846  76bd		       40		      .byte.b	_40
   9847  76be		       40		      .byte.b	_40
   9848  76bf		       40		      .byte.b	_40
   9849  76c0		       40		      .byte.b	_40
   9850  76c1		       40		      .byte.b	_40
   9851  76c2		       40		      .byte.b	_40
   9852  76c3		       40		      .byte.b	_40
   9853  76c4		       40		      .byte.b	_40
   9854  76c5		       40		      .byte.b	_40
   9855  76c6		       40		      .byte.b	_40
   9856  76c7		       40		      .byte.b	_40
   9857  76c8		       40		      .byte.b	_40
   9858  76c9		       40		      .byte.b	_40
   9859  76ca		       40		      .byte.b	_40
   9860  76cb		       f2		      .byte.b	_F2
   9861  76cc		       f0		      .byte.b	_F0
   9862  76cd		       f0		      .byte.b	_F0
   9863  76ce		       00		      .byte.b	_00
   9864  76cf		       00		      .byte.b	_00
   9865  76d0				   playfieldcolorL0500
   9866  76d0		       c2		      .byte.b	_C2
   9867  76d1		       c2		      .byte.b	_C2
   9868  76d2		       00		      .byte.b	_00
   9869  76d3		       00		      .byte.b	_00
   9870  76d4		       00		      .byte.b	_00
   9871  76d5		       00		      .byte.b	_00
   9872  76d6		       00		      .byte.b	_00
   9873  76d7		       00		      .byte.b	_00
   9874  76d8		       00		      .byte.b	_00
   9875  76d9		       00		      .byte.b	_00
   9876  76da		       00		      .byte.b	_00
   9877  76db		       00		      .byte.b	_00
   9878  76dc		       00		      .byte.b	_00
   9879  76dd		       00		      .byte.b	_00
   9880  76de		       00		      .byte.b	_00
   9881  76df		       00		      .byte.b	_00
   9882  76e0		       00		      .byte.b	_00
   9883  76e1		       00		      .byte.b	_00
   9884  76e2		       00		      .byte.b	_00
   9885  76e3		       00		      .byte.b	_00
   9886  76e4		       00		      .byte.b	_00
   9887  76e5		       00		      .byte.b	_00
   9888  76e6		       00		      .byte.b	_00
   9889  76e7		       00		      .byte.b	_00
   9890  76e8		       00		      .byte.b	_00
   9891  76e9		       00		      .byte.b	_00
   9892  76ea		       00		      .byte.b	_00
   9893  76eb		       00		      .byte.b	_00
   9894  76ec		       00		      .byte.b	_00
   9895  76ed		       00		      .byte.b	_00
   9896  76ee		       00		      .byte.b	_00
   9897  76ef		       00		      .byte.b	_00
   9898  76f0		       00		      .byte.b	_00
   9899  76f1		       00		      .byte.b	_00
   9900  76f2		       00		      .byte.b	_00
   9901  76f3		       00		      .byte.b	_00
   9902  76f4		       00		      .byte.b	_00
   9903  76f5		       00		      .byte.b	_00
   9904  76f6		       00		      .byte.b	_00
   9905  76f7		       00		      .byte.b	_00
   9906  76f8		       00		      .byte.b	_00
   9907  76f9		       00		      .byte.b	_00
   9908  76fa		       00		      .byte.b	_00
   9909  76fb		       00		      .byte.b	_00
   9910  76fc		       00		      .byte.b	_00
   9911  76fd		       00		      .byte.b	_00
   9912  76fe		       00		      .byte.b	_00
   9913  76ff		       00		      .byte.b	_00
   9914  7700		       00		      .byte.b	_00
   9915  7701		       00		      .byte.b	_00
   9916  7702		       00		      .byte.b	_00
   9917  7703		       00		      .byte.b	_00
   9918  7704		       00		      .byte.b	_00
   9919  7705		       00		      .byte.b	_00
   9920  7706		       00		      .byte.b	_00
   9921  7707		       40		      .byte.b	_40
   9922  7708		       40		      .byte.b	_40
   9923  7709		       40		      .byte.b	_40
   9924  770a		       40		      .byte.b	_40
   9925  770b		       40		      .byte.b	_40
   9926  770c		       40		      .byte.b	_40
   9927  770d		       40		      .byte.b	_40
   9928  770e		       40		      .byte.b	_40
   9929  770f		       40		      .byte.b	_40
   9930  7710		       40		      .byte.b	_40
   9931  7711		       40		      .byte.b	_40
   9932  7712		       40		      .byte.b	_40
   9933  7713		       40		      .byte.b	_40
   9934  7714		       40		      .byte.b	_40
   9935  7715		       40		      .byte.b	_40
   9936  7716		       40		      .byte.b	_40
   9937  7717		       40		      .byte.b	_40
   9938  7718		       40		      .byte.b	_40
   9939  7719		       40		      .byte.b	_40
   9940  771a		       40		      .byte.b	_40
   9941  771b		       40		      .byte.b	_40
   9942  771c		       40		      .byte.b	_40
   9943  771d		       40		      .byte.b	_40
   9944  771e		       40		      .byte.b	_40
   9945  771f		       40		      .byte.b	_40
   9946  7720		       40		      .byte.b	_40
   9947  7721		       40		      .byte.b	_40
   9948  7722		       40		      .byte.b	_40
   9949  7723		       40		      .byte.b	_40
   9950  7724		       40		      .byte.b	_40
   9951  7725		       40		      .byte.b	_40
   9952  7726		       00		      .byte.b	_00
   9953  7727		       00		      .byte.b	_00
   9954  7728				   backgroundcolorL0545
   9955  7728		       0e		      .byte.b	_0E
   9956  7729		       42		      .byte.b	_42
   9957  772a		       42		      .byte.b	_42
   9958  772b		       42		      .byte.b	_42
   9959  772c		       42		      .byte.b	_42
   9960  772d		       42		      .byte.b	_42
   9961  772e		       42		      .byte.b	_42
   9962  772f		       42		      .byte.b	_42
   9963  7730		       42		      .byte.b	_42
   9964  7731		       42		      .byte.b	_42
   9965  7732		       42		      .byte.b	_42
   9966  7733		       42		      .byte.b	_42
   9967  7734		       42		      .byte.b	_42
   9968  7735		       42		      .byte.b	_42
   9969  7736		       42		      .byte.b	_42
   9970  7737		       42		      .byte.b	_42
   9971  7738		       42		      .byte.b	_42
   9972  7739		       42		      .byte.b	_42
   9973  773a		       42		      .byte.b	_42
   9974  773b		       42		      .byte.b	_42
   9975  773c		       42		      .byte.b	_42
   9976  773d		       42		      .byte.b	_42
   9977  773e		       42		      .byte.b	_42
   9978  773f		       42		      .byte.b	_42
   9979  7740		       42		      .byte.b	_42
   9980  7741		       42		      .byte.b	_42
   9981  7742		       42		      .byte.b	_42
   9982  7743		       42		      .byte.b	_42
   9983  7744		       42		      .byte.b	_42
   9984  7745		       42		      .byte.b	_42
   9985  7746		       42		      .byte.b	_42
   9986  7747		       42		      .byte.b	_42
   9987  7748		       42		      .byte.b	_42
   9988  7749		       42		      .byte.b	_42
   9989  774a		       42		      .byte.b	_42
   9990  774b		       42		      .byte.b	_42
   9991  774c		       42		      .byte.b	_42
   9992  774d		       42		      .byte.b	_42
   9993  774e		       42		      .byte.b	_42
   9994  774f		       42		      .byte.b	_42
   9995  7750		       42		      .byte.b	_42
   9996  7751		       42		      .byte.b	_42
   9997  7752		       42		      .byte.b	_42
   9998  7753		       42		      .byte.b	_42
   9999  7754		       42		      .byte.b	_42
  10000  7755		       42		      .byte.b	_42
  10001  7756		       42		      .byte.b	_42
  10002  7757		       42		      .byte.b	_42
  10003  7758		       42		      .byte.b	_42
  10004  7759		       42		      .byte.b	_42
  10005  775a		       42		      .byte.b	_42
  10006  775b		       42		      .byte.b	_42
  10007  775c		       42		      .byte.b	_42
  10008  775d		       42		      .byte.b	_42
  10009  775e		       42		      .byte.b	_42
  10010  775f		       42		      .byte.b	_42
  10011  7760		       42		      .byte.b	_42
  10012  7761		       42		      .byte.b	_42
  10013  7762		       42		      .byte.b	_42
  10014  7763		       42		      .byte.b	_42
  10015  7764		       42		      .byte.b	_42
  10016  7765		       42		      .byte.b	_42
  10017  7766		       42		      .byte.b	_42
  10018  7767		       42		      .byte.b	_42
  10019  7768		       42		      .byte.b	_42
  10020  7769		       42		      .byte.b	_42
  10021  776a		       42		      .byte.b	_42
  10022  776b		       42		      .byte.b	_42
  10023  776c		       42		      .byte.b	_42
  10024  776d		       42		      .byte.b	_42
  10025  776e		       42		      .byte.b	_42
  10026  776f		       42		      .byte.b	_42
  10027  7770		       42		      .byte.b	_42
  10028  7771		       42		      .byte.b	_42
  10029  7772		       42		      .byte.b	_42
  10030  7773		       42		      .byte.b	_42
  10031  7774		       42		      .byte.b	_42
  10032  7775		       42		      .byte.b	_42
  10033  7776		       42		      .byte.b	_42
  10034  7777		       42		      .byte.b	_42
  10035  7778		       42		      .byte.b	_42
  10036  7779		       42		      .byte.b	_42
  10037  777a		       42		      .byte.b	_42
  10038  777b		       42		      .byte.b	_42
  10039  777c		       42		      .byte.b	_42
  10040  777d		       42		      .byte.b	_42
  10041  777e		       42		      .byte.b	_42
  10042  777f		       42		      .byte.b	_42
  10043  7780				   backgroundcolorL0549
  10044  7780		       08		      .byte.b	_08
  10045  7781		       06		      .byte.b	_06
  10046  7782		       08		      .byte.b	_08
  10047  7783		       08		      .byte.b	_08
  10048  7784		       06		      .byte.b	_06
  10049  7785		       08		      .byte.b	_08
  10050  7786		       06		      .byte.b	_06
  10051  7787		       08		      .byte.b	_08
  10052  7788		       06		      .byte.b	_06
  10053  7789		       06		      .byte.b	_06
  10054  778a		       08		      .byte.b	_08
  10055  778b		       08		      .byte.b	_08
  10056  778c		       06		      .byte.b	_06
  10057  778d		       06		      .byte.b	_06
  10058  778e		       06		      .byte.b	_06
  10059  778f		       06		      .byte.b	_06
  10060  7790		       06		      .byte.b	_06
  10061  7791		       06		      .byte.b	_06
  10062  7792		       06		      .byte.b	_06
  10063  7793		       06		      .byte.b	_06
  10064  7794		       06		      .byte.b	_06
  10065  7795		       06		      .byte.b	_06
  10066  7796		       06		      .byte.b	_06
  10067  7797		       06		      .byte.b	_06
  10068  7798		       06		      .byte.b	_06
  10069  7799		       06		      .byte.b	_06
  10070  779a		       06		      .byte.b	_06
  10071  779b		       06		      .byte.b	_06
  10072  779c		       06		      .byte.b	_06
  10073  779d		       06		      .byte.b	_06
  10074  779e		       06		      .byte.b	_06
  10075  779f		       06		      .byte.b	_06
  10076  77a0		       06		      .byte.b	_06
  10077  77a1		       06		      .byte.b	_06
  10078  77a2		       06		      .byte.b	_06
  10079  77a3		       06		      .byte.b	_06
  10080  77a4		       06		      .byte.b	_06
  10081  77a5		       06		      .byte.b	_06
  10082  77a6		       06		      .byte.b	_06
  10083  77a7		       06		      .byte.b	_06
  10084  77a8		       06		      .byte.b	_06
  10085  77a9		       06		      .byte.b	_06
  10086  77aa		       06		      .byte.b	_06
  10087  77ab		       06		      .byte.b	_06
  10088  77ac		       06		      .byte.b	_06
  10089  77ad		       06		      .byte.b	_06
  10090  77ae		       06		      .byte.b	_06
  10091  77af		       06		      .byte.b	_06
  10092  77b0		       06		      .byte.b	_06
  10093  77b1		       06		      .byte.b	_06
  10094  77b2		       06		      .byte.b	_06
  10095  77b3		       06		      .byte.b	_06
  10096  77b4		       06		      .byte.b	_06
  10097  77b5		       06		      .byte.b	_06
  10098  77b6		       06		      .byte.b	_06
  10099  77b7		       06		      .byte.b	_06
  10100  77b8		       06		      .byte.b	_06
  10101  77b9		       06		      .byte.b	_06
  10102  77ba		       06		      .byte.b	_06
  10103  77bb		       06		      .byte.b	_06
  10104  77bc		       06		      .byte.b	_06
  10105  77bd		       06		      .byte.b	_06
  10106  77be		       06		      .byte.b	_06
  10107  77bf		       06		      .byte.b	_06
  10108  77c0		       06		      .byte.b	_06
  10109  77c1		       06		      .byte.b	_06
  10110  77c2		       06		      .byte.b	_06
  10111  77c3		       06		      .byte.b	_06
  10112  77c4		       06		      .byte.b	_06
  10113  77c5		       06		      .byte.b	_06
  10114  77c6		       06		      .byte.b	_06
  10115  77c7		       06		      .byte.b	_06
  10116  77c8		       06		      .byte.b	_06
  10117  77c9		       06		      .byte.b	_06
  10118  77ca		       06		      .byte.b	_06
  10119  77cb		       06		      .byte.b	_06
  10120  77cc		       06		      .byte.b	_06
  10121  77cd		       06		      .byte.b	_06
  10122  77ce		       06		      .byte.b	_06
  10123  77cf		       06		      .byte.b	_06
  10124  77d0		       06		      .byte.b	_06
  10125  77d1		       06		      .byte.b	_06
  10126  77d2		       06		      .byte.b	_06
  10127  77d3		       06		      .byte.b	_06
  10128  77d4		       06		      .byte.b	_06
  10129  77d5		       06		      .byte.b	_06
  10130  77d6		       c6		      .byte.b	_C6
  10131  77d7		       c6		      .byte.b	_C6
  10132  77d8				   playerL0553_0
  10133  77d8		       00		      .byte.b	%00000000
  10134  77d9		       42		      .byte.b	%01000010
  10135  77da		       42		      .byte.b	%01000010
  10136  77db		       5a		      .byte.b	%01011010
  10137  77dc		       7e		      .byte.b	%01111110
  10138  77dd		       24		      .byte.b	%00100100
  10139  77de		       18		      .byte.b	%00011000
  10140  77df		       18		      .byte.b	%00011000
  10141  77e0		       3c		      .byte.b	%00111100
  10142  77e1		       5a		      .byte.b	%01011010
  10143  77e2		       18		      .byte.b	%00011000
  10144  77e3		       18		      .byte.b	%00011000
  10145  77e4		       18		      .byte.b	%00011000
  10146  77e5		       3c		      .byte.b	%00111100
  10147  77e6		       24		      .byte.b	%00100100
  10148  77e7				   playercolorL0554_0
  10149  77e7		       00		      .byte.b	$00	;
  10150  77e8		       00		      .byte.b	$00	;
  10151  77e9		       00		      .byte.b	$00	;
  10152  77ea		       00		      .byte.b	$00	;
  10153  77eb		       00		      .byte.b	$00	;
  10154  77ec		       0e		      .byte.b	$0E	;
  10155  77ed		       70		      .byte.b	$70	;
  10156  77ee		       70		      .byte.b	$70	;
  10157  77ef		       70		      .byte.b	$70	;
  10158  77f0		       94		      .byte.b	$94	;
  10159  77f1		       70		      .byte.b	$70	;
  10160  77f2		       70		      .byte.b	$70	;
  10161  77f3		       70		      .byte.b	$70	;
  10162  77f4		       70		      .byte.b	$70	;
  10163  77f5		       40		      .byte.b	$40	;
  10164  77f6				   playerL0556_0
  10165  77f6		       18		      .byte.b	%00011000
  10166  77f7		       bd		      .byte.b	%10111101
  10167  77f8		       99		      .byte.b	%10011001
  10168  77f9		       5a		      .byte.b	%01011010
  10169  77fa		       7e		      .byte.b	%01111110
  10170  77fb		       24		      .byte.b	%00100100
  10171  77fc		       18		      .byte.b	%00011000
  10172  77fd		       18		      .byte.b	%00011000
  10173  77fe		       3c		      .byte.b	%00111100
  10174  77ff		       5a		      .byte.b	%01011010
  10175  7800		       18		      .byte.b	%00011000
  10176  7801		       18		      .byte.b	%00011000
  10177  7802		       18		      .byte.b	%00011000
  10178  7803		       3c		      .byte.b	%00111100
  10179  7804		       24		      .byte.b	%00100100
  10180  7805				   playercolorL0557_0
  10181  7805		       40		      .byte.b	$40	;
  10182  7806		       40		      .byte.b	$40	;
  10183  7807		       40		      .byte.b	$40	;
  10184  7808		       40		      .byte.b	$40	;
  10185  7809		       40		      .byte.b	$40	;
  10186  780a		       f6		      .byte.b	$F6	;
  10187  780b		       70		      .byte.b	$70	;
  10188  780c		       70		      .byte.b	$70	;
  10189  780d		       70		      .byte.b	$70	;
  10190  780e		       94		      .byte.b	$94	;
  10191  780f		       70		      .byte.b	$70	;
  10192  7810		       70		      .byte.b	$70	;
  10193  7811		       70		      .byte.b	$70	;
  10194  7812		       70		      .byte.b	$70	;
  10195  7813		       00		      .byte.b	$00	;
  10196  7814				   playerL0559_0
  10197  7814		       00		      .byte.b	%00000000
  10198  7815		       42		      .byte.b	%01000010
  10199  7816		       42		      .byte.b	%01000010
  10200  7817		       5a		      .byte.b	%01011010
  10201  7818		       7e		      .byte.b	%01111110
  10202  7819		       24		      .byte.b	%00100100
  10203  781a		       18		      .byte.b	%00011000
  10204  781b		       19		      .byte.b	%00011001
  10205  781c		       3d		      .byte.b	%00111101
  10206  781d		       5b		      .byte.b	%01011011
  10207  781e		       19		      .byte.b	%00011001
  10208  781f		       19		      .byte.b	%00011001
  10209  7820		       19		      .byte.b	%00011001
  10210  7821		       3c		      .byte.b	%00111100
  10211  7822		       24		      .byte.b	%00100100
  10212  7823				   playercolorL0560_0
  10213  7823		       00		      .byte.b	$00	;
  10214  7824		       00		      .byte.b	$00	;
  10215  7825		       00		      .byte.b	$00	;
  10216  7826		       00		      .byte.b	$00	;
  10217  7827		       00		      .byte.b	$00	;
  10218  7828		       70		      .byte.b	$70	;
  10219  7829		       70		      .byte.b	$70	;
  10220  782a		       40		      .byte.b	$40	;
  10221  782b		       40		      .byte.b	$40	;
  10222  782c		       40		      .byte.b	$40	;
  10223  782d		       40		      .byte.b	$40	;
  10224  782e		       40		      .byte.b	$40	;
  10225  782f		       40		      .byte.b	$40	;
  10226  7830		       70		      .byte.b	$70	;
  10227  7831		       c6		      .byte.b	$C6	;
  10228  7832				   playerL0562_0
  10229  7832		       00		      .byte.b	%00000000
  10230  7833		       42		      .byte.b	%01000010
  10231  7834		       42		      .byte.b	%01000010
  10232  7835		       5a		      .byte.b	%01011010
  10233  7836		       7e		      .byte.b	%01111110
  10234  7837		       24		      .byte.b	%00100100
  10235  7838		       18		      .byte.b	%00011000
  10236  7839		       19		      .byte.b	%00011001
  10237  783a		       3d		      .byte.b	%00111101
  10238  783b		       5b		      .byte.b	%01011011
  10239  783c		       19		      .byte.b	%00011001
  10240  783d		       19		      .byte.b	%00011001
  10241  783e		       19		      .byte.b	%00011001
  10242  783f		       3c		      .byte.b	%00111100
  10243  7840		       24		      .byte.b	%00100100
  10244  7841				   playercolorL0563_0
  10245  7841		       00		      .byte.b	$00	;
  10246  7842		       00		      .byte.b	$00	;
  10247  7843		       00		      .byte.b	$00	;
  10248  7844		       00		      .byte.b	$00	;
  10249  7845		       00		      .byte.b	$00	;
  10250  7846		       70		      .byte.b	$70	;
  10251  7847		       70		      .byte.b	$70	;
  10252  7848		       40		      .byte.b	$40	;
  10253  7849		       40		      .byte.b	$40	;
  10254  784a		       40		      .byte.b	$40	;
  10255  784b		       40		      .byte.b	$40	;
  10256  784c		       40		      .byte.b	$40	;
  10257  784d		       40		      .byte.b	$40	;
  10258  784e		       70		      .byte.b	$70	;
  10259  784f		       c5		      .byte.b	$C5	;
  10260  7850				   playercolor258then_0
  10261  7850		       1c		      .byte.b	$1C	;
  10262  7851		       1c		      .byte.b	$1C	;
  10263  7852		       1c		      .byte.b	$1C	;
  10264  7853		       1c		      .byte.b	$1C	;
  10265  7854		       1c		      .byte.b	$1C	;
  10266  7855		       1c		      .byte.b	$1C	;
  10267  7856		       1c		      .byte.b	$1C	;
  10268  7857		       1c		      .byte.b	$1C	;
  10269  7858		       1c		      .byte.b	$1C	;
  10270  7859		       1c		      .byte.b	$1C	;
  10271  785a		       1c		      .byte.b	$1C	;  
  10272  785b		       1c		      .byte.b	$1C	;
  10273  785c		       1c		      .byte.b	$1C	;
  10274  785d		       1c		      .byte.b	$1C	;
  10275  785e		       1c		      .byte.b	$1C	;
  10276  785f		       1c		      .byte.b	$1C
  10277  7860				   playercolor259then_0
  10278  7860		       cc		      .byte.b	$CC	;
  10279  7861		       cc		      .byte.b	$CC	;
  10280  7862		       cc		      .byte.b	$CC	;
  10281  7863		       cc		      .byte.b	$CC	;
  10282  7864		       cc		      .byte.b	$CC	;
  10283  7865		       cc		      .byte.b	$CC	;
  10284  7866		       cc		      .byte.b	$CC	;
  10285  7867		       cc		      .byte.b	$CC	;
  10286  7868		       cc		      .byte.b	$CC	;
  10287  7869		       cc		      .byte.b	$CC	;
  10288  786a		       cc		      .byte.b	$CC	;  
  10289  786b		       cc		      .byte.b	$CC	;
  10290  786c		       cc		      .byte.b	$CC	;
  10291  786d		       cc		      .byte.b	$CC	;
  10292  786e		       cc		      .byte.b	$CC	;
  10293  786f		       cc		      .byte.b	$CC
  10294  7870		       cc		      .byte.b	$CC	;
  10295  7871		       cc		      .byte.b	$CC
  10296  7872				   player261then_2
  10297  7872		       81		      .byte.b	%10000001
  10298  7873		       42		      .byte.b	%01000010
  10299  7874		       5a		      .byte.b	%01011010
  10300  7875		       5a		      .byte.b	%01011010
  10301  7876		       24		      .byte.b	%00100100
  10302  7877		       99		      .byte.b	%10011001
  10303  7878		       5a		      .byte.b	%01011010
  10304  7879		       24		      .byte.b	%00100100
  10305  787a				   player263then_2
  10306  787a		       00		      .byte.b	%00000000
  10307  787b		       40		      .byte.b	%01000000
  10308  787c		       00		      .byte.b	%00000000
  10309  787d		       30		      .byte.b	%00110000
  10310  787e		       14		      .byte.b	%00010100
  10311  787f		       00		      .byte.b	%00000000
  10312  7880		       48		      .byte.b	%01001000
  10313  7881		       00		      .byte.b	%00000000
  10314  7882				   player265then_3
  10315  7882		       18		      .byte.b	%00011000
  10316  7883		       7e		      .byte.b	%01111110
  10317  7884		       5a		      .byte.b	%01011010
  10318  7885		       db		      .byte.b	%11011011
  10319  7886		       ff		      .byte.b	%11111111
  10320  7887		       3c		      .byte.b	%00111100
  10321  7888		       18		      .byte.b	%00011000
  10322  7889		       00		      .byte.b	%00000000
  10323  788a				   player267then_3
  10324  788a		       00		      .byte.b	%00000000
  10325  788b		       40		      .byte.b	%01000000
  10326  788c		       00		      .byte.b	%00000000
  10327  788d		       30		      .byte.b	%00110000
  10328  788e		       14		      .byte.b	%00010100
  10329  788f		       00		      .byte.b	%00000000
  10330  7890		       48		      .byte.b	%01001000
  10331  7891		       00		      .byte.b	%00000000
  10332  7892				   player269then_1
  10333  7892		       81		      .byte.b	%10000001
  10334  7893		       42		      .byte.b	%01000010
  10335  7894		       5a		      .byte.b	%01011010
  10336  7895		       5a		      .byte.b	%01011010
  10337  7896		       24		      .byte.b	%00100100
  10338  7897		       99		      .byte.b	%10011001
  10339  7898		       5a		      .byte.b	%01011010
  10340  7899		       24		      .byte.b	%00100100
  10341  789a				   player271then_1
  10342  789a		       00		      .byte.b	%00000000
  10343  789b		       40		      .byte.b	%01000000
  10344  789c		       00		      .byte.b	%00000000
  10345  789d		       30		      .byte.b	%00110000
  10346  789e		       14		      .byte.b	%00010100
  10347  789f		       00		      .byte.b	%00000000
  10348  78a0		       48		      .byte.b	%01001000
  10349  78a1		       00		      .byte.b	%00000000
  10350  78a2				   playercolor272then_2
  10351  78a2		       b4		      .byte.b	$B4	;
  10352  78a3		       d0		      .byte.b	$D0	;
  10353  78a4		       d0		      .byte.b	$D0	;
  10354  78a5		       d0		      .byte.b	$D0	;
  10355  78a6		       d0		      .byte.b	$D0	;
  10356  78a7		       d0		      .byte.b	$D0	;
  10357  78a8		       c2		      .byte.b	$C2	;
  10358  78a9		       c6		      .byte.b	$C6	;
  10359  78aa				   playercolor273then_3
  10360  78aa		       30		      .byte.b	$30	;
  10361  78ab		       e0		      .byte.b	$E0	;
  10362  78ac		       b2		      .byte.b	$B2	;
  10363  78ad		       c4		      .byte.b	$C4	;
  10364  78ae		       b0		      .byte.b	$B0	;
  10365  78af		       70		      .byte.b	$70	;
  10366  78b0		       1e		      .byte.b	$1E	;
  10367  78b1		       0e		      .byte.b	$0E	;
  10368  78b2				   playercolor274then_1
  10369  78b2		       30		      .byte.b	$30	;
  10370  78b3		       44		      .byte.b	$44	;
  10371  78b4		       b2		      .byte.b	$B2	;
  10372  78b5		       c4		      .byte.b	$C4	;
  10373  78b6		       42		      .byte.b	$42	;
  10374  78b7		       c0		      .byte.b	$C0	;
  10375  78b8		       30		      .byte.b	$30	;
  10376  78b9		       0e		      .byte.b	$0E	;
  10377  78ba				   player276then_2
  10378  78ba		       42		      .byte.b	%01000010
  10379  78bb		       42		      .byte.b	%01000010
  10380  78bc		       5a		      .byte.b	%01011010
  10381  78bd		       5a		      .byte.b	%01011010
  10382  78be		       24		      .byte.b	%00100100
  10383  78bf		       18		      .byte.b	%00011000
  10384  78c0		       db		      .byte.b	%11011011
  10385  78c1		       24		      .byte.b	%00100100
  10386  78c2				   player278then_2
  10387  78c2		       04		      .byte.b	%00000100
  10388  78c3		       40		      .byte.b	%01000000
  10389  78c4		       01		      .byte.b	%00000001
  10390  78c5		       00		      .byte.b	%00000000
  10391  78c6		       02		      .byte.b	%00000010
  10392  78c7		       80		      .byte.b	%10000000
  10393  78c8		       02		      .byte.b	%00000010
  10394  78c9		       20		      .byte.b	%00100000
  10395  78ca				   player280then_3
  10396  78ca		       00		      .byte.b	%00000000
  10397  78cb		       7e		      .byte.b	%01111110
  10398  78cc		       5a		      .byte.b	%01011010
  10399  78cd		       db		      .byte.b	%11011011
  10400  78ce		       ff		      .byte.b	%11111111
  10401  78cf		       3c		      .byte.b	%00111100
  10402  78d0		       18		      .byte.b	%00011000
  10403  78d1		       00		      .byte.b	%00000000
  10404  78d2				   player282then_3
  10405  78d2		       04		      .byte.b	%00000100
  10406  78d3		       40		      .byte.b	%01000000
  10407  78d4		       01		      .byte.b	%00000001
  10408  78d5		       00		      .byte.b	%00000000
  10409  78d6		       02		      .byte.b	%00000010
  10410  78d7		       80		      .byte.b	%10000000
  10411  78d8		       02		      .byte.b	%00000010
  10412  78d9		       20		      .byte.b	%00100000
  10413  78da				   player284then_1
  10414  78da		       42		      .byte.b	%01000010
  10415  78db		       42		      .byte.b	%01000010
  10416  78dc		       5a		      .byte.b	%01011010
  10417  78dd		       5a		      .byte.b	%01011010
  10418  78de		       24		      .byte.b	%00100100
  10419  78df		       18		      .byte.b	%00011000
  10420  78e0		       db		      .byte.b	%11011011
  10421  78e1		       24		      .byte.b	%00100100
  10422  78e2				   player286then_1
  10423  78e2		       04		      .byte.b	%00000100
  10424  78e3		       40		      .byte.b	%01000000
  10425  78e4		       01		      .byte.b	%00000001
  10426  78e5		       00		      .byte.b	%00000000
  10427  78e6		       02		      .byte.b	%00000010
  10428  78e7		       80		      .byte.b	%10000000
  10429  78e8		       02		      .byte.b	%00000010
  10430  78e9		       20		      .byte.b	%00100000
  10431  78ea				   playercolor287then_2
  10432  78ea		       b4		      .byte.b	$B4	;
  10433  78eb		       d0		      .byte.b	$D0	;
  10434  78ec		       d0		      .byte.b	$D0	;
  10435  78ed		       d0		      .byte.b	$D0	;
  10436  78ee		       d0		      .byte.b	$D0	;
  10437  78ef		       d0		      .byte.b	$D0	;
  10438  78f0		       c2		      .byte.b	$C2	;
  10439  78f1		       c4		      .byte.b	$C4	;
  10440  78f2				   playercolor288then_3
  10441  78f2		       30		      .byte.b	$30	;
  10442  78f3		       e0		      .byte.b	$E0	;
  10443  78f4		       b2		      .byte.b	$B2	;
  10444  78f5		       c4		      .byte.b	$C4	;
  10445  78f6		       b0		      .byte.b	$B0	;
  10446  78f7		       70		      .byte.b	$70	;
  10447  78f8		       1e		      .byte.b	$1E	;
  10448  78f9		       0e		      .byte.b	$0E	;
  10449  78fa				   playercolor289then_1
  10450  78fa		       30		      .byte.b	$30	;
  10451  78fb		       44		      .byte.b	$44	;
  10452  78fc		       b2		      .byte.b	$B2	;
  10453  78fd		       c4		      .byte.b	$C4	;
  10454  78fe		       42		      .byte.b	$42	;
  10455  78ff		       c0		      .byte.b	$C0	;
  10456  7900		       30		      .byte.b	$30	;
  10457  7901		       0e		      .byte.b	$0E	;
  10458  7902				   player291then_2
  10459  7902		       24		      .byte.b	%00100100
  10460  7903		       42		      .byte.b	%01000010
  10461  7904		       5a		      .byte.b	%01011010
  10462  7905		       5a		      .byte.b	%01011010
  10463  7906		       24		      .byte.b	%00100100
  10464  7907		       99		      .byte.b	%10011001
  10465  7908		       5a		      .byte.b	%01011010
  10466  7909		       24		      .byte.b	%00100100
  10467  790a				   player293then_2
  10468  790a		       08		      .byte.b	%00001000
  10469  790b		       00		      .byte.b	%00000000
  10470  790c		       00		      .byte.b	%00000000
  10471  790d		       00		      .byte.b	%00000000
  10472  790e		       80		      .byte.b	%10000000
  10473  790f		       00		      .byte.b	%00000000
  10474  7910		       00		      .byte.b	%00000000
  10475  7911		       21		      .byte.b	%00100001
  10476  7912				   player294then_3
  10477  7912		       18		      .byte.b	%00011000
  10478  7913		       7e		      .byte.b	%01111110
  10479  7914		       7e		      .byte.b	%01111110
  10480  7915		       ff		      .byte.b	%11111111
  10481  7916		       ff		      .byte.b	%11111111
  10482  7917		       3c		      .byte.b	%00111100
  10483  7918		       18		      .byte.b	%00011000
  10484  7919		       00		      .byte.b	%00000000
  10485  791a				   player296then_1
  10486  791a		       24		      .byte.b	%00100100
  10487  791b		       42		      .byte.b	%01000010
  10488  791c		       5a		      .byte.b	%01011010
  10489  791d		       5a		      .byte.b	%01011010
  10490  791e		       24		      .byte.b	%00100100
  10491  791f		       99		      .byte.b	%10011001
  10492  7920		       5a		      .byte.b	%01011010
  10493  7921		       24		      .byte.b	%00100100
  10494  7922				   player298then_1
  10495  7922		       08		      .byte.b	%00001000
  10496  7923		       00		      .byte.b	%00000000
  10497  7924		       00		      .byte.b	%00000000
  10498  7925		       00		      .byte.b	%00000000
  10499  7926		       80		      .byte.b	%10000000
  10500  7927		       00		      .byte.b	%00000000
  10501  7928		       00		      .byte.b	%00000000
  10502  7929		       21		      .byte.b	%00100001
  10503  792a				   playercolor299then_2
  10504  792a		       b4		      .byte.b	$B4	;
  10505  792b		       d0		      .byte.b	$D0	;
  10506  792c		       d0		      .byte.b	$D0	;
  10507  792d		       d0		      .byte.b	$D0	;
  10508  792e		       d0		      .byte.b	$D0	;
  10509  792f		       d0		      .byte.b	$D0	;
  10510  7930		       c2		      .byte.b	$C2	;
  10511  7931		       c6		      .byte.b	$C6	;
  10512  7932				   playercolor300then_3
  10513  7932		       16		      .byte.b	$16	;
  10514  7933		       e0		      .byte.b	$E0	;
  10515  7934		       b2		      .byte.b	$B2	;
  10516  7935		       c4		      .byte.b	$C4	;
  10517  7936		       b0		      .byte.b	$B0	;
  10518  7937		       70		      .byte.b	$70	;
  10519  7938		       30		      .byte.b	$30	;
  10520  7939		       0e		      .byte.b	$0E	;
  10521  793a				   playercolor301then_1
  10522  793a		       30		      .byte.b	$30	;
  10523  793b		       44		      .byte.b	$44	;
  10524  793c		       b2		      .byte.b	$B2	;
  10525  793d		       c4		      .byte.b	$C4	;
  10526  793e		       42		      .byte.b	$42	;
  10527  793f		       c0		      .byte.b	$C0	;
  10528  7940		       30		      .byte.b	$30	;
  10529  7941		       0e		      .byte.b	$0E	;
  10530  7942				   player302then_5
  10531  7942		       09		      .byte.b	%00001001
  10532  7943		       04		      .byte.b	%00000100
  10533  7944		       08		      .byte.b	%00001000
  10534  7945		       0c		      .byte.b	%00001100
  10535  7946		       1c		      .byte.b	%00011100
  10536  7947		       1c		      .byte.b	%00011100
  10537  7948		       1c		      .byte.b	%00011100
  10538  7949		       18		      .byte.b	%00011000
  10539  794a				   playercolor303then_5
  10540  794a		       0e		      .byte.b	$0E	;
  10541  794b		       06		      .byte.b	$06	;
  10542  794c		       40		      .byte.b	$40	;
  10543  794d		       32		      .byte.b	$32	;
  10544  794e		       40		      .byte.b	$40	;
  10545  794f		       34		      .byte.b	$34	;
  10546  7950		       42		      .byte.b	$42	;
  10547  7951		       40		      .byte.b	$40	;
  10548  7952				   player304then_5
  10549  7952		       02		      .byte.b	%00000010
  10550  7953		       05		      .byte.b	%00000101
  10551  7954		       0c		      .byte.b	%00001100
  10552  7955		       0e		      .byte.b	%00001110
  10553  7956		       0e		      .byte.b	%00001110
  10554  7957		       0c		      .byte.b	%00001100
  10555  7958		       1c		      .byte.b	%00011100
  10556  7959		       18		      .byte.b	%00011000
  10557  795a				   playercolor305then_5
  10558  795a		       0e		      .byte.b	$0E	;
  10559  795b		       06		      .byte.b	$06	;
  10560  795c		       40		      .byte.b	$40	;
  10561  795d		       32		      .byte.b	$32	;
  10562  795e		       40		      .byte.b	$40	;
  10563  795f		       34		      .byte.b	$34	;
  10564  7960		       42		      .byte.b	$42	;
  10565  7961		       40		      .byte.b	$40	;
  10566  7962				   player306then_5
  10567  7962		       05		      .byte.b	%00000101
  10568  7963		       08		      .byte.b	%00001000
  10569  7964		       06		      .byte.b	%00000110
  10570  7965		       0c		      .byte.b	%00001100
  10571  7966		       0e		      .byte.b	%00001110
  10572  7967		       1c		      .byte.b	%00011100
  10573  7968		       18		      .byte.b	%00011000
  10574  7969		       18		      .byte.b	%00011000
  10575  796a				   playercolor307then_5
  10576  796a		       0e		      .byte.b	$0E	;
  10577  796b		       06		      .byte.b	$06	;
  10578  796c		       40		      .byte.b	$40	;
  10579  796d		       32		      .byte.b	$32	;
  10580  796e		       40		      .byte.b	$40	;
  10581  796f		       34		      .byte.b	$34	;
  10582  7970		       42		      .byte.b	$42	;
  10583  7971		       40		      .byte.b	$40	;
  10584  7972				   player309then_4
  10585  7972		       fe		      .byte.b	%11111110
  10586  7973		       82		      .byte.b	%10000010
  10587  7974		       92		      .byte.b	%10010010
  10588  7975		       92		      .byte.b	%10010010
  10589  7976		       ba		      .byte.b	%10111010
  10590  7977		       92		      .byte.b	%10010010
  10591  7978		       92		      .byte.b	%10010010
  10592  7979		       82		      .byte.b	%10000010
  10593  797a		       fe		      .byte.b	%11111110
  10594  797b				   playercolor311then_4
  10595  797b		       30		      .byte.b	$30	;
  10596  797c		       30		      .byte.b	$30	;
  10597  797d		       30		      .byte.b	$30	;
  10598  797e		       30		      .byte.b	$30	;
  10599  797f		       30		      .byte.b	$30	;
  10600  7980		       30		      .byte.b	$30	;
  10601  7981		       30		      .byte.b	$30	;
  10602  7982		       40		      .byte.b	$40	;
  10603  7983		       40		      .byte.b	$40	;
  10604  7984				   player313then_4
  10605  7984		       3c		      .byte.b	%00111100
  10606  7985		       5a		      .byte.b	%01011010
  10607  7986		       99		      .byte.b	%10011001
  10608  7987		       3c		      .byte.b	%00111100
  10609  7988		       5a		      .byte.b	%01011010
  10610  7989		       99		      .byte.b	%10011001
  10611  798a		       18		      .byte.b	%00011000
  10612  798b		       3c		      .byte.b	%00111100
  10613  798c		       5a		      .byte.b	%01011010
  10614  798d				   playercolor315then_4
  10615  798d		       d0		      .byte.b	$D0	;
  10616  798e		       d0		      .byte.b	$D0	;
  10617  798f		       d2		      .byte.b	$D2	;
  10618  7990		       d2		      .byte.b	$D2	;
  10619  7991		       d0		      .byte.b	$D0	;
  10620  7992		       d2		      .byte.b	$D2	;
  10621  7993		       d2		      .byte.b	$D2	;
  10622  7994		       d0		      .byte.b	$D0	;
  10623  7995		       d0		      .byte.b	$D0	;
  10624  7996				   playercolor317then_4
  10625  7996		       d2		      .byte.b	$D2	;
  10626  7997		       d2		      .byte.b	$D2	;
  10627  7998		       d0		      .byte.b	$D0	;
  10628  7999		       d0		      .byte.b	$D0	;
  10629  799a		       d2		      .byte.b	$D2	;
  10630  799b		       d0		      .byte.b	$D0	;
  10631  799c		       d0		      .byte.b	$D0	;
  10632  799d		       d2		      .byte.b	$D2	;
  10633  799e		       d2		      .byte.b	$D2	;
  10634  799f				   player319then_4
  10635  799f		       18		      .byte.b	%00011000
  10636  79a0		       10		      .byte.b	%00010000
  10637  79a1		       38		      .byte.b	%00111000
  10638  79a2		       7c		      .byte.b	%01111100
  10639  79a3		       fe		      .byte.b	%11111110
  10640  79a4		       fe		      .byte.b	%11111110
  10641  79a5		       fe		      .byte.b	%11111110
  10642  79a6		       7c		      .byte.b	%01111100
  10643  79a7		       38		      .byte.b	%00111000
  10644  79a8				   playercolor321then_4
  10645  79a8		       30		      .byte.b	$30	;
  10646  79a9		       30		      .byte.b	$30	;
  10647  79aa		       00		      .byte.b	$00	;
  10648  79ab		       00		      .byte.b	$00	;
  10649  79ac		       00		      .byte.b	$00	;
  10650  79ad		       00		      .byte.b	$00	;
  10651  79ae		       00		      .byte.b	$00	;
  10652  79af		       00		      .byte.b	$00	;
  10653  79b0		       00		      .byte.b	$00	;
  10654  79b1				   playercolor323then_4
  10655  79b1		       0f		      .byte.b	$0F	;
  10656  79b2		       0f		      .byte.b	$0F	;
  10657  79b3		       00		      .byte.b	$00	;
  10658  79b4		       00		      .byte.b	$00	;
  10659  79b5		       00		      .byte.b	$00	;
  10660  79b6		       00		      .byte.b	$00	;
  10661  79b7		       00		      .byte.b	$00	;
  10662  79b8		       00		      .byte.b	$00	;
  10663  79b9		       00		      .byte.b	$00	;
  10664  79ba				   PF_data2
  10665  79ba		       00		      .byte.b	%00000000
  10666  79bb		       00		      .byte.b	%00000000
  10667  79bc		       00		      .byte.b	%00000000
  10668  79bd		       00		      .byte.b	%00000000
  10669  79be		       00		      .byte.b	%00000000
  10670  79bf		       00		      .byte.b	%00000000
  10671  79c0		       00		      .byte.b	%00000000
  10672  79c1		       00		      .byte.b	%00000000
  10673  79c2		       00		      .byte.b	%00000000
  10674  79c3		       00		      .byte.b	%00000000
  10675  79c4		       00		      .byte.b	%00000000
  10676  79c5		       00		      .byte.b	%00000000
  10677  79c6		       00		      .byte.b	%00000000
  10678  79c7		       1e		      .byte.b	%00011110
  10679  79c8		       1e		      .byte.b	%00011110
  10680  79c9		       02		      .byte.b	%00000010
  10681  79ca		       02		      .byte.b	%00000010
  10682  79cb		       02		      .byte.b	%00000010
  10683  79cc		       02		      .byte.b	%00000010
  10684  79cd		       02		      .byte.b	%00000010
  10685  79ce		       02		      .byte.b	%00000010
  10686  79cf		       02		      .byte.b	%00000010
  10687  79d0		       02		      .byte.b	%00000010
  10688  79d1		       0e		      .byte.b	%00001110
  10689  79d2		       0e		      .byte.b	%00001110
  10690  79d3		       02		      .byte.b	%00000010
  10691  79d4		       02		      .byte.b	%00000010
  10692  79d5		       02		      .byte.b	%00000010
  10693  79d6		       02		      .byte.b	%00000010
  10694  79d7		       02		      .byte.b	%00000010
  10695  79d8		       02		      .byte.b	%00000010
  10696  79d9		       02		      .byte.b	%00000010
  10697  79da		       02		      .byte.b	%00000010
  10698  79db		       02		      .byte.b	%00000010
  10699  79dc		       02		      .byte.b	%00000010
  10700  79dd		       1e		      .byte.b	%00011110
  10701  79de		       1e		      .byte.b	%00011110
  10702  79df		       00		      .byte.b	%00000000
  10703  79e0		       00		      .byte.b	%00000000
  10704  79e1		       00		      .byte.b	%00000000
  10705  79e2		       00		      .byte.b	%00000000
  10706  79e3		       00		      .byte.b	%00000000
  10707  79e4		       00		      .byte.b	%00000000
  10708  79e5		       00		      .byte.b	%00000000
  10709  79e6		       00		      .byte.b	%00000000
  10710  79e7		       00		      .byte.b	%00000000
  10711  79e8		       1e		      .byte.b	%00011110
  10712  79e9		       1e		      .byte.b	%00011110
  10713  79ea		       12		      .byte.b	%00010010
  10714  79eb		       12		      .byte.b	%00010010
  10715  79ec		       12		      .byte.b	%00010010
  10716  79ed		       12		      .byte.b	%00010010
  10717  79ee		       12		      .byte.b	%00010010
  10718  79ef		       12		      .byte.b	%00010010
  10719  79f0		       12		      .byte.b	%00010010
  10720  79f1		       1e		      .byte.b	%00011110
  10721  79f2		       0e		      .byte.b	%00001110
  10722  79f3		       0e		      .byte.b	%00001110
  10723  79f4		       0a		      .byte.b	%00001010
  10724  79f5		       0a		      .byte.b	%00001010
  10725  79f6		       0a		      .byte.b	%00001010
  10726  79f7		       0a		      .byte.b	%00001010
  10727  79f8		       1a		      .byte.b	%00011010
  10728  79f9		       12		      .byte.b	%00010010
  10729  79fa		       12		      .byte.b	%00010010
  10730  79fb		       12		      .byte.b	%00010010
  10731  79fc		       12		      .byte.b	%00010010
  10732  79fd		       12		      .byte.b	%00010010
  10733  79fe		       12		      .byte.b	%00010010
  10734  79ff		       12		      .byte.b	%00010010
  10735  7a00		       00		      .byte.b	%00000000
  10736  7a01		       00		      .byte.b	%00000000
  10737  7a02		       00		      .byte.b	%00000000
  10738  7a03		       00		      .byte.b	%00000000
  10739  7a04		       00		      .byte.b	%00000000
  10740  7a05		       00		      .byte.b	%00000000
  10741  7a06		       00		      .byte.b	%00000000
  10742  7a07		       00		      .byte.b	%00000000
  10743  7a08		       00		      .byte.b	%00000000
  10744  7a09		       00		      .byte.b	%00000000
  10745  7a0a		       00		      .byte.b	%00000000
  10746  7a0b		       00		      .byte.b	%00000000
  10747  7a0c		       00		      .byte.b	%00000000
  10748  7a0d		       00		      .byte.b	%00000000
  10749  7a0e		       00		      .byte.b	%00000000
  10750  7a0f		       00		      .byte.b	%00000000
  10751  7a10		       00		      .byte.b	%00000000
  10752  7a11		       00		      .byte.b	%00000000
  10753  7a12		       00		      .byte.b	%00000000
  10754  7a13		       00		      .byte.b	%00000000
  10755  7a14		       00		      .byte.b	%00000000
  10756  7a15		       00		      .byte.b	%00000000
  10757  7a16		       00		      .byte.b	%00000000
  10758  7a17		       00		      .byte.b	%00000000
  10759  7a18		       00		      .byte.b	%00000000
  10760  7a19		       00		      .byte.b	%00000000
  10761  7a1a		       00		      .byte.b	%00000000
  10762  7a1b		       00		      .byte.b	%00000000
  10763  7a1c		       00		      .byte.b	%00000000
  10764  7a1d		       00		      .byte.b	%00000000
  10765  7a1e		       00		      .byte.b	%00000000
  10766  7a1f		       1b		      .byte.b	%00011011
  10767  7a20		       1f		      .byte.b	%00011111
  10768  7a21		       15		      .byte.b	%00010101
  10769  7a22		       15		      .byte.b	%00010101
  10770  7a23		       15		      .byte.b	%00010101
  10771  7a24		       15		      .byte.b	%00010101
  10772  7a25		       95		      .byte.b	%10010101
  10773  7a26		       95		      .byte.b	%10010101
  10774  7a27		       95		      .byte.b	%10010101
  10775  7a28		       95		      .byte.b	%10010101
  10776  7a29		       91		      .byte.b	%10010001
  10777  7a2a		       91		      .byte.b	%10010001
  10778  7a2b		       91		      .byte.b	%10010001
  10779  7a2c		       91		      .byte.b	%10010001
  10780  7a2d		       91		      .byte.b	%10010001
  10781  7a2e		       91		      .byte.b	%10010001
  10782  7a2f		       91		      .byte.b	%10010001
  10783  7a30		       91		      .byte.b	%10010001
  10784  7a31		       91		      .byte.b	%10010001
  10785  7a32		       91		      .byte.b	%10010001
  10786  7a33		       91		      .byte.b	%10010001
  10787  7a34		       91		      .byte.b	%10010001
  10788  7a35		       91		      .byte.b	%10010001
  10789  7a36		       91		      .byte.b	%10010001
  10790  7a37		       00		      .byte.b	%00000000
  10791  7a38		       00		      .byte.b	%00000000
  10792  7a39		       00		      .byte.b	%00000000
  10793  7a3a		       00		      .byte.b	%00000000
  10794  7a3b		       00		      .byte.b	%00000000
  10795  7a3c		       00		      .byte.b	%00000000
  10796  7a3d		       00		      .byte.b	%00000000
  10797  7a3e		       00		      .byte.b	%00000000
  10798  7a3f		       00		      .byte.b	%00000000
  10799  7a40		       1e		      .byte.b	%00011110
  10800  7a41		       1e		      .byte.b	%00011110
  10801  7a42		       10		      .byte.b	%00010000
  10802  7a43		       10		      .byte.b	%00010000
  10803  7a44		       10		      .byte.b	%00010000
  10804  7a45		       10		      .byte.b	%00010000
  10805  7a46		       10		      .byte.b	%00010000
  10806  7a47		       10		      .byte.b	%00010000
  10807  7a48		       10		      .byte.b	%00010000
  10808  7a49		       10		      .byte.b	%00010000
  10809  7a4a		       1c		      .byte.b	%00011100
  10810  7a4b		       1c		      .byte.b	%00011100
  10811  7a4c		       10		      .byte.b	%00010000
  10812  7a4d		       10		      .byte.b	%00010000
  10813  7a4e		       10		      .byte.b	%00010000
  10814  7a4f		       10		      .byte.b	%00010000
  10815  7a50		       10		      .byte.b	%00010000
  10816  7a51		       10		      .byte.b	%00010000
  10817  7a52		       10		      .byte.b	%00010000
  10818  7a53		       10		      .byte.b	%00010000
  10819  7a54		       10		      .byte.b	%00010000
  10820  7a55		       10		      .byte.b	%00010000
  10821  7a56		       1e		      .byte.b	%00011110
  10822  7a57		       1e		      .byte.b	%00011110
  10823  7a58		       00		      .byte.b	%00000000
  10824  7a59		       00		      .byte.b	%00000000
  10825  7a5a		       00		      .byte.b	%00000000
  10826  7a5b		       00		      .byte.b	%00000000
  10827  7a5c		       00		      .byte.b	%00000000
  10828  7a5d		       00		      .byte.b	%00000000
  10829  7a5e		       00		      .byte.b	%00000000
  10830  7a5f		       00		      .byte.b	%00000000
  10831  7a60		       00		      .byte.b	%00000000
  10832  7a61		       00		      .byte.b	%00000000
  10833  7a62		       00		      .byte.b	%00000000
  10834  7a63		       00		      .byte.b	%00000000
  10835  7a64		       00		      .byte.b	%00000000
  10836  7a65		       00		      .byte.b	%00000000
  10837  7a66		       00		      .byte.b	%00000000
  10838  7a67		       00		      .byte.b	%00000000
  10839  7a68		       00		      .byte.b	%00000000
  10840  7a69		       00		      .byte.b	%00000000
  10841  7a6a		       00		      .byte.b	%00000000
  10842  7a6b		       00		      .byte.b	%00000000
  10843  7a6c		       00		      .byte.b	%00000000
  10844  7a6d		       00		      .byte.b	%00000000
  10845  7a6e		       00		      .byte.b	%00000000
  10846  7a6f		       00		      .byte.b	%00000000
  10847  7a70		       00		      .byte.b	%00000000
  10848  7a71		       00		      .byte.b	%00000000
  10849  7a72		       00		      .byte.b	%00000000
  10850  7a73		       00		      .byte.b	%00000000
  10851  7a74		       00		      .byte.b	%00000000
  10852  7a75		       00		      .byte.b	%00000000
  10853  7a76		       00		      .byte.b	%00000000
  10854  7a77		       f1		      .byte.b	%11110001
  10855  7a78		       f1		      .byte.b	%11110001
  10856  7a79		       90		      .byte.b	%10010000
  10857  7a7a		       90		      .byte.b	%10010000
  10858  7a7b		       90		      .byte.b	%10010000
  10859  7a7c		       90		      .byte.b	%10010000
  10860  7a7d		       90		      .byte.b	%10010000
  10861  7a7e		       08		      .byte.b	%00001000
  10862  7a7f		       08		      .byte.b	%00001000
  10863  7a80		       08		      .byte.b	%00001000
  10864  7a81		       08		      .byte.b	%00001000
  10865  7a82		       08		      .byte.b	%00001000
  10866  7a83		       08		      .byte.b	%00001000
  10867  7a84		       08		      .byte.b	%00001000
  10868  7a85		       f9		      .byte.b	%11111001
  10869  7a86		       09		      .byte.b	%00001001
  10870  7a87		       09		      .byte.b	%00001001
  10871  7a88		       09		      .byte.b	%00001001
  10872  7a89		       09		      .byte.b	%00001001
  10873  7a8a		       09		      .byte.b	%00001001
  10874  7a8b		       09		      .byte.b	%00001001
  10875  7a8c		       09		      .byte.b	%00001001
  10876  7a8d		       09		      .byte.b	%00001001
  10877  7a8e		       09		      .byte.b	%00001001
  10878  7a8f		       00		      .byte.b	%00000000
  10879  7a90		       00		      .byte.b	%00000000
  10880  7a91		       00		      .byte.b	%00000000
  10881  7a92		       00		      .byte.b	%00000000
  10882  7a93		       00		      .byte.b	%00000000
  10883  7a94		       00		      .byte.b	%00000000
  10884  7a95		       00		      .byte.b	%00000000
  10885  7a96		       00		      .byte.b	%00000000
  10886  7a97		       89		      .byte.b	%10001001
  10887  7a98		       89		      .byte.b	%10001001
  10888  7a99		       89		      .byte.b	%10001001
  10889  7a9a		       89		      .byte.b	%10001001
  10890  7a9b		       89		      .byte.b	%10001001
  10891  7a9c		       89		      .byte.b	%10001001
  10892  7a9d		       89		      .byte.b	%10001001
  10893  7a9e		       d1		      .byte.b	%11010001
  10894  7a9f		       51		      .byte.b	%01010001
  10895  7aa0		       51		      .byte.b	%01010001
  10896  7aa1		       51		      .byte.b	%01010001
  10897  7aa2		       51		      .byte.b	%01010001
  10898  7aa3		       51		      .byte.b	%01010001
  10899  7aa4		       51		      .byte.b	%01010001
  10900  7aa5		       51		      .byte.b	%01010001
  10901  7aa6		       51		      .byte.b	%01010001
  10902  7aa7		       51		      .byte.b	%01010001
  10903  7aa8		       51		      .byte.b	%01010001
  10904  7aa9		       71		      .byte.b	%01110001
  10905  7aaa		       71		      .byte.b	%01110001
  10906  7aab		       21		      .byte.b	%00100001
  10907  7aac		       21		      .byte.b	%00100001
  10908  7aad		       21		      .byte.b	%00100001
  10909  7aae		       21		      .byte.b	%00100001
  10910  7aaf		       21		      .byte.b	%00100001
  10911  7ab0		       00		      .byte.b	%00000000
  10912  7ab1		       00		      .byte.b	%00000000
  10913  7ab2		       00		      .byte.b	%00000000
  10914  7ab3		       00		      .byte.b	%00000000
  10915  7ab4		       00		      .byte.b	%00000000
  10916  7ab5		       00		      .byte.b	%00000000
  10917  7ab6		       00		      .byte.b	%00000000
  10918  7ab7		       00		      .byte.b	%00000000
  10919  7ab8		       00		      .byte.b	%00000000
  10920  7ab9		       00		      .byte.b	%00000000
  10921  7aba		       00		      .byte.b	%00000000
  10922  7abb		       00		      .byte.b	%00000000
  10923  7abc		       00		      .byte.b	%00000000
  10924  7abd		       00		      .byte.b	%00000000
  10925  7abe		       00		      .byte.b	%00000000
  10926  7abf		       00		      .byte.b	%00000000
  10927  7ac0		       00		      .byte.b	%00000000
  10928  7ac1		       00		      .byte.b	%00000000
  10929  7ac2		       00		      .byte.b	%00000000
  10930  7ac3		       00		      .byte.b	%00000000
  10931  7ac4		       00		      .byte.b	%00000000
  10932  7ac5		       00		      .byte.b	%00000000
  10933  7ac6		       00		      .byte.b	%00000000
  10934  7ac7		       00		      .byte.b	%00000000
  10935  7ac8		       00		      .byte.b	%00000000
  10936  7ac9		       00		      .byte.b	%00000000
  10937  7aca		       00		      .byte.b	%00000000
  10938  7acb		       00		      .byte.b	%00000000
  10939  7acc		       00		      .byte.b	%00000000
  10940  7acd		       00		      .byte.b	%00000000
  10941  7ace		       00		      .byte.b	%00000000
  10942  7acf		       0f		      .byte.b	%00001111
  10943  7ad0		       0f		      .byte.b	%00001111
  10944  7ad1		       08		      .byte.b	%00001000
  10945  7ad2		       08		      .byte.b	%00001000
  10946  7ad3		       08		      .byte.b	%00001000
  10947  7ad4		       08		      .byte.b	%00001000
  10948  7ad5		       08		      .byte.b	%00001000
  10949  7ad6		       08		      .byte.b	%00001000
  10950  7ad7		       08		      .byte.b	%00001000
  10951  7ad8		       08		      .byte.b	%00001000
  10952  7ad9		       08		      .byte.b	%00001000
  10953  7ada		       08		      .byte.b	%00001000
  10954  7adb		       08		      .byte.b	%00001000
  10955  7adc		       08		      .byte.b	%00001000
  10956  7add		       0b		      .byte.b	%00001011
  10957  7ade		       0b		      .byte.b	%00001011
  10958  7adf		       08		      .byte.b	%00001000
  10959  7ae0		       08		      .byte.b	%00001000
  10960  7ae1		       08		      .byte.b	%00001000
  10961  7ae2		       08		      .byte.b	%00001000
  10962  7ae3		       08		      .byte.b	%00001000
  10963  7ae4		       08		      .byte.b	%00001000
  10964  7ae5		       0f		      .byte.b	%00001111
  10965  7ae6		       0f		      .byte.b	%00001111
  10966  7ae7		       00		      .byte.b	%00000000
  10967  7ae8		       00		      .byte.b	%00000000
  10968  7ae9		       00		      .byte.b	%00000000
  10969  7aea		       00		      .byte.b	%00000000
  10970  7aeb		       00		      .byte.b	%00000000
  10971  7aec		       00		      .byte.b	%00000000
  10972  7aed		       00		      .byte.b	%00000000
  10973  7aee		       00		      .byte.b	%00000000
  10974  7aef		       0f		      .byte.b	%00001111
  10975  7af0		       0f		      .byte.b	%00001111
  10976  7af1		       08		      .byte.b	%00001000
  10977  7af2		       08		      .byte.b	%00001000
  10978  7af3		       08		      .byte.b	%00001000
  10979  7af4		       08		      .byte.b	%00001000
  10980  7af5		       08		      .byte.b	%00001000
  10981  7af6		       08		      .byte.b	%00001000
  10982  7af7		       08		      .byte.b	%00001000
  10983  7af8		       08		      .byte.b	%00001000
  10984  7af9		       08		      .byte.b	%00001000
  10985  7afa		       08		      .byte.b	%00001000
  10986  7afb		       08		      .byte.b	%00001000
  10987  7afc		       08		      .byte.b	%00001000
  10988  7afd		       08		      .byte.b	%00001000
  10989  7afe		       08		      .byte.b	%00001000
  10990  7aff		       08		      .byte.b	%00001000
  10991  7b00		       08		      .byte.b	%00001000
  10992  7b01		       08		      .byte.b	%00001000
  10993  7b02		       08		      .byte.b	%00001000
  10994  7b03		       08		      .byte.b	%00001000
  10995  7b04		       08		      .byte.b	%00001000
  10996  7b05		       08		      .byte.b	%00001000
  10997  7b06		       0f		      .byte.b	%00001111
  10998  7b07		       0f		      .byte.b	%00001111
  10999  7b08		       00		      .byte.b	%00000000
  11000  7b09		       00		      .byte.b	%00000000
  11001  7b0a		       00		      .byte.b	%00000000
  11002  7b0b		       00		      .byte.b	%00000000
  11003  7b0c		       00		      .byte.b	%00000000
  11004  7b0d		       00		      .byte.b	%00000000
  11005  7b0e		       00		      .byte.b	%00000000
  11006  7b0f		       00		      .byte.b	%00000000
  11007  7b10		       00		      .byte.b	%00000000
  11008  7b11		       00		      .byte.b	%00000000
  11009  7b12		       00		      .byte.b	%00000000
  11010  7b13		       00		      .byte.b	%00000000
  11011  7b14		       00		      .byte.b	%00000000
  11012  7b15		       00		      .byte.b	%00000000
  11013  7b16		       00		      .byte.b	%00000000
  11014  7b17		       00		      .byte.b	%00000000
  11015  7b18		       00		      .byte.b	%00000000
  11016  7b19		       00		      .byte.b	%00000000
  11017  7b1a				   playfieldcolorL0641
  11018  7b1a		       00		      .byte.b	_00
  11019  7b1b		       00		      .byte.b	_00
  11020  7b1c		       00		      .byte.b	_00
  11021  7b1d		       00		      .byte.b	_00
  11022  7b1e		       00		      .byte.b	_00
  11023  7b1f		       00		      .byte.b	_00
  11024  7b20		       00		      .byte.b	_00
  11025  7b21		       00		      .byte.b	_00
  11026  7b22		       00		      .byte.b	_00
  11027  7b23		       00		      .byte.b	_00
  11028  7b24		       00		      .byte.b	_00
  11029  7b25		       00		      .byte.b	_00
  11030  7b26		       00		      .byte.b	_00
  11031  7b27		       00		      .byte.b	_00
  11032  7b28		       00		      .byte.b	_00
  11033  7b29		       00		      .byte.b	_00
  11034  7b2a		       00		      .byte.b	_00
  11035  7b2b		       00		      .byte.b	_00
  11036  7b2c		       00		      .byte.b	_00
  11037  7b2d		       00		      .byte.b	_00
  11038  7b2e		       00		      .byte.b	_00
  11039  7b2f		       00		      .byte.b	_00
  11040  7b30		       00		      .byte.b	_00
  11041  7b31		       00		      .byte.b	_00
  11042  7b32		       00		      .byte.b	_00
  11043  7b33		       00		      .byte.b	_00
  11044  7b34		       00		      .byte.b	_00
  11045  7b35		       00		      .byte.b	_00
  11046  7b36		       00		      .byte.b	_00
  11047  7b37		       00		      .byte.b	_00
  11048  7b38		       00		      .byte.b	_00
  11049  7b39		       00		      .byte.b	_00
  11050  7b3a		       00		      .byte.b	_00
  11051  7b3b		       00		      .byte.b	_00
  11052  7b3c		       00		      .byte.b	_00
  11053  7b3d		       00		      .byte.b	_00
  11054  7b3e		       00		      .byte.b	_00
  11055  7b3f		       00		      .byte.b	_00
  11056  7b40		       00		      .byte.b	_00
  11057  7b41		       00		      .byte.b	_00
  11058  7b42		       00		      .byte.b	_00
  11059  7b43		       00		      .byte.b	_00
  11060  7b44		       00		      .byte.b	_00
  11061  7b45		       00		      .byte.b	_00
  11062  7b46		       00		      .byte.b	_00
  11063  7b47		       00		      .byte.b	_00
  11064  7b48		       00		      .byte.b	_00
  11065  7b49		       00		      .byte.b	_00
  11066  7b4a		       00		      .byte.b	_00
  11067  7b4b		       00		      .byte.b	_00
  11068  7b4c		       00		      .byte.b	_00
  11069  7b4d		       00		      .byte.b	_00
  11070  7b4e		       00		      .byte.b	_00
  11071  7b4f		       00		      .byte.b	_00
  11072  7b50		       00		      .byte.b	_00
  11073  7b51		       00		      .byte.b	_00
  11074  7b52		       00		      .byte.b	_00
  11075  7b53		       00		      .byte.b	_00
  11076  7b54		       00		      .byte.b	_00
  11077  7b55		       00		      .byte.b	_00
  11078  7b56		       00		      .byte.b	_00
  11079  7b57		       00		      .byte.b	_00
  11080  7b58		       00		      .byte.b	_00
  11081  7b59		       00		      .byte.b	_00
  11082  7b5a		       00		      .byte.b	_00
  11083  7b5b		       00		      .byte.b	_00
  11084  7b5c		       00		      .byte.b	_00
  11085  7b5d		       00		      .byte.b	_00
  11086  7b5e		       00		      .byte.b	_00
  11087  7b5f		       00		      .byte.b	_00
  11088  7b60		       00		      .byte.b	_00
  11089  7b61		       00		      .byte.b	_00
  11090  7b62		       00		      .byte.b	_00
  11091  7b63		       00		      .byte.b	_00
  11092  7b64		       00		      .byte.b	_00
  11093  7b65		       00		      .byte.b	_00
  11094  7b66		       00		      .byte.b	_00
  11095  7b67		       00		      .byte.b	_00
  11096  7b68		       00		      .byte.b	_00
  11097  7b69		       00		      .byte.b	_00
  11098  7b6a		       00		      .byte.b	_00
  11099  7b6b		       00		      .byte.b	_00
  11100  7b6c		       00		      .byte.b	_00
  11101  7b6d		       00		      .byte.b	_00
  11102  7b6e		       00		      .byte.b	_00
  11103  7b6f		       00		      .byte.b	_00
  11104  7b70		       00		      .byte.b	_00
  11105  7b71		       00		      .byte.b	_00
  11106  7b72					      if	ECHOFIRST
      1122 bytes of ROM space left in graphics bank
  11107  7b72					      echo	"    ",[(DPC_graphics_end - *)]d , "bytes of ROM space left in graphics bank")
  11108  7b72					      endif
  11109  7b72		       00 01	   ECHOFIRST  =	1
  11110  7b72
  11111  7b72
  11112  7b72							; Provided under the CC0 license. See the included LICENSE.txt for details.
  11113  7b72
  11114  7fd4					      ORG	$7FF4-bscode_length
  11115  7fd4					      RORG	$DFF4-bscode_length
  11116  7fd4				   DPC_graphics_end
  11117  7fd4
  11118  7fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
  11119  7fd4
  11120  7fd4							; every bank has this stuff at the same place
  11121  7fd4							; this code can switch to/from any bank at any entry point
  11122  7fd4							; and can preserve register values
  11123  7fd4							; note: lines not starting with a space are not placed in all banks
  11124  7fd4							;
  11125  7fd4							; line below tells the compiler how long this is - do not remove
  11126  7fd4							;size=32
  11127  7fd4
  11128  7fd4				   begin_bscode
  11129  7fd4		       a2 ff		      ldx	#$ff
  11130  7fd6					      ifconst	FASTFETCH	; using DPC+
  11131  7fd6		       8e 58 10 	      stx	FASTFETCH
  11132  7fd9					      endif
  11133  7fd9		       9a		      txs
  11134  7fda				  -	      if	bankswitch == 64
  11135  7fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  11136  7fda					      else
  11137  7fda		       a9 18		      lda	#>(start-1)
  11138  7fdc					      endif
  11139  7fdc		       48		      pha
  11140  7fdd		       a9 e3		      lda	#<(start-1)
  11141  7fdf		       48		      pha
  11142  7fe0
  11143  7fe0				   BS_return
  11144  7fe0		       48		      pha
  11145  7fe1		       8a		      txa
  11146  7fe2		       48		      pha
  11147  7fe3		       ba		      tsx
  11148  7fe4
  11149  7fe4					      if	bankswitch != 64
  11150  7fe4		       b5 04		      lda	4,x	; get high byte of return address
  11151  7fe6
  11152  7fe6		       2a		      rol
  11153  7fe7		       2a		      rol
  11154  7fe8		       2a		      rol
  11155  7fe9		       2a		      rol
  11156  7fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  11157  7fec		       aa		      tax
  11158  7fed		       e8		      inx
  11159  7fee				  -	      else
  11160  7fee				  -	      lda	4,x	; get high byte of return address
  11161  7fee				  -	      tay
  11162  7fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  11163  7fee				  -	      sta	4,x
  11164  7fee				  -	      tya
  11165  7fee				  -	      lsr
  11166  7fee				  -	      lsr
  11167  7fee				  -	      lsr
  11168  7fee				  -	      lsr
  11169  7fee				  -	      tax
  11170  7fee				  -	      inx
  11171  7fee					      endif
  11172  7fee
  11173  7fee				   BS_jsr
  11174  7fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
  11175  7ff1		       68		      pla
  11176  7ff2		       aa		      tax
  11177  7ff3		       68		      pla
  11178  7ff4		       60		      rts
  11179  7ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  11180  7ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  11181  7ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  11182  7ff5					      endif
  11183  7ff5							; Provided under the CC0 license. See the included LICENSE.txt for details.
  11184  7ff5
  11185  8000					      org	$8000
  11186  8000					      rorg	$1000
  11187  8000							; Provided under the CC0 license. See the included LICENSE.txt for details.
  11188  8000
  11189  8000							; 1K Frequency Table.
  11190  8000							; Fred Quimby, Darrell Spice Jr, Chris Walton 2010
  11191  8000							;
  11192  8000							; The 1K Frequency Table can contain up to 256 frequency values
  11193  8000							;
  11194  8000							; Table entries are defined as 2^32*freq/20000
  11195  8000							;
  11196  8000							; If User ARM code is being used, then the last 512 bytes of the frequency
  11197  8000							; table will no longer be available, reducing the number of frequencies you can
  11198  8000							; use to 128.
  11199  8000
  11200  8000							; piano key frequencies (s = sharp)
  11201  8000
  11202  8000				   .freq_table_start
  11203  8000
  11204  8000		       00 00 00 00	      DC.L	0
  11205  8000		       00 01	   A0	      =	(* & $3ff)/4
  11206  8004		       ac 1c 5a 00	      DC.L	5905580
  11207  8008
  11208  8008		       00 02	   A0s	      =	(* & $3ff)/4
  11209  8008		       68 78 5f 00	      DC.L	6256744
  11210  800c
  11211  800c		       00 03	   B0	      =	(* & $3ff)/4
  11212  800c		       b5 25 65 00	      DC.L	6628789
  11213  8010
  11214  8010		       00 04	   C1	      =	(* & $3ff)/4
  11215  8010		       6e 29 6b 00	      DC.L	7022958
  11216  8014
  11217  8014		       00 05	   C1s	      =	(* & $3ff)/4
  11218  8014		       b5 88 71 00	      DC.L	7440565
  11219  8018
  11220  8018		       00 06	   D1	      =	(* & $3ff)/4
  11221  8018		       fc 48 78 00	      DC.L	7883004
  11222  801c
  11223  801c		       00 07	   D1s	      =	(* & $3ff)/4
  11224  801c		       07 70 7f 00	      DC.L	8351751
  11225  8020
  11226  8020		       00 08	   E1	      =	(* & $3ff)/4
  11227  8020		       f4 03 87 00	      DC.L	8848372
  11228  8024
  11229  8024		       00 09	   F1	      =	(* & $3ff)/4
  11230  8024		       3c 0b 8f 00	      DC.L	9374524
  11231  8028
  11232  8028		       00 0a	   F1s	      =	(* & $3ff)/4
  11233  8028		       ba 8c 97 00	      DC.L	9931962
  11234  802c
  11235  802c		       00 0b	   G1	      =	(* & $3ff)/4
  11236  802c		       b3 8f a0 00	      DC.L	10522547
  11237  8030
  11238  8030		       00 0c	   G1s	      =	(* & $3ff)/4
  11239  8030		       db 1b aa 00	      DC.L	11148251
  11240  8034
  11241  8034		       00 0d	   A1	      =	(* & $3ff)/4
  11242  8034		       58 39 b4 00	      DC.L	11811160
  11243  8038
  11244  8038		       00 0e	   A1s	      =	(* & $3ff)/4
  11245  8038		       d0 f0 be 00	      DC.L	12513488
  11246  803c
  11247  803c		       00 0f	   B1	      =	(* & $3ff)/4
  11248  803c		       6b 4b ca 00	      DC.L	13257579
  11249  8040
  11250  8040		       00 10	   C2	      =	(* & $3ff)/4
  11251  8040		       dc 52 d6 00	      DC.L	14045916
  11252  8044
  11253  8044		       00 11	   C2s	      =	(* & $3ff)/4
  11254  8044		       69 11 e3 00	      DC.L	14881129
  11255  8048
  11256  8048		       00 12	   D2	      =	(* & $3ff)/4
  11257  8048		       f7 91 f0 00	      DC.L	15766007
  11258  804c
  11259  804c		       00 13	   D2s	      =	(* & $3ff)/4
  11260  804c		       0f e0 fe 00	      DC.L	16703503
  11261  8050
  11262  8050		       00 14	   E2	      =	(* & $3ff)/4
  11263  8050		       e9 07 0e 01	      DC.L	17696745
  11264  8054
  11265  8054		       00 15	   F2	      =	(* & $3ff)/4
  11266  8054		       78 16 1e 01	      DC.L	18749048
  11267  8058
  11268  8058		       00 16	   F2s	      =	(* & $3ff)/4
  11269  8058		       74 19 2f 01	      DC.L	19863924
  11270  805c
  11271  805c		       00 17	   G2	      =	(* & $3ff)/4
  11272  805c		       67 1f 41 01	      DC.L	21045095
  11273  8060
  11274  8060		       00 18	   G2s	      =	(* & $3ff)/4
  11275  8060		       b5 37 54 01	      DC.L	22296501
  11276  8064
  11277  8064		       00 19	   A2	      =	(* & $3ff)/4
  11278  8064		       b0 72 68 01	      DC.L	23622320
  11279  8068
  11280  8068		       00 1a	   A2s	      =	(* & $3ff)/4
  11281  8068		       a0 e1 7d 01	      DC.L	25026976
  11282  806c
  11283  806c		       00 1b	   B2	      =	(* & $3ff)/4
  11284  806c		       d6 96 94 01	      DC.L	26515158
  11285  8070
  11286  8070		       00 1c	   C3	      =	(* & $3ff)/4
  11287  8070		       b7 a5 ac 01	      DC.L	28091831
  11288  8074
  11289  8074		       00 1d	   C3s	      =	(* & $3ff)/4
  11290  8074		       d2 22 c6 01	      DC.L	29762258
  11291  8078
  11292  8078		       00 1e	   D3	      =	(* & $3ff)/4
  11293  8078		       ee 23 e1 01	      DC.L	31532014
  11294  807c
  11295  807c		       00 1f	   D3s	      =	(* & $3ff)/4
  11296  807c		       1d c0 fd 01	      DC.L	33407005
  11297  8080
  11298  8080		       00 20	   E3	      =	(* & $3ff)/4
  11299  8080		       d1 0f 1c 02	      DC.L	35393489
  11300  8084
  11301  8084		       00 21	   F3	      =	(* & $3ff)/4
  11302  8084		       f0 2c 3c 02	      DC.L	37498096
  11303  8088
  11304  8088		       00 22	   F3s	      =	(* & $3ff)/4
  11305  8088		       e9 32 5e 02	      DC.L	39727849
  11306  808c
  11307  808c		       00 23	   G3	      =	(* & $3ff)/4
  11308  808c		       cd 3e 82 02	      DC.L	42090189
  11309  8090
  11310  8090		       00 24	   G3s	      =	(* & $3ff)/4
  11311  8090		       6a 6f a8 02	      DC.L	44593002
  11312  8094
  11313  8094		       00 25	   A3	      =	(* & $3ff)/4
  11314  8094		       60 e5 d0 02	      DC.L	47244640
  11315  8098
  11316  8098		       00 26	   A3s	      =	(* & $3ff)/4
  11317  8098		       41 c3 fb 02	      DC.L	50053953
  11318  809c
  11319  809c		       00 27	   B3	      =	(* & $3ff)/4
  11320  809c		       ac 2d 29 03	      DC.L	53030316
  11321  80a0
  11322  80a0		       00 28	   C4	      =	(* & $3ff)/4
  11323  80a0		       6e 4b 59 03	      DC.L	56183662
  11324  80a4
  11325  80a4		       00 29	   C4s	      =	(* & $3ff)/4
  11326  80a4		       a5 45 8c 03	      DC.L	59524517
  11327  80a8
  11328  80a8		       00 2a	   D4	      =	(* & $3ff)/4
  11329  80a8		       dd 47 c2 03	      DC.L	63064029
  11330  80ac
  11331  80ac		       00 2b	   D4s	      =	(* & $3ff)/4
  11332  80ac		       3b 80 fb 03	      DC.L	66814011
  11333  80b0
  11334  80b0		       00 2c	   E4	      =	(* & $3ff)/4
  11335  80b0		       a3 1f 38 04	      DC.L	70786979
  11336  80b4
  11337  80b4		       00 2d	   F4	      =	(* & $3ff)/4
  11338  80b4		       e0 59 78 04	      DC.L	74996192
  11339  80b8
  11340  80b8		       00 2e	   F4s	      =	(* & $3ff)/4
  11341  80b8		       d1 65 bc 04	      DC.L	79455697
  11342  80bc
  11343  80bc		       00 2f	   G4	      =	(* & $3ff)/4
  11344  80bc		       9b 7d 04 05	      DC.L	84180379
  11345  80c0
  11346  80c0		       00 30	   G4s	      =	(* & $3ff)/4
  11347  80c0		       d5 de 50 05	      DC.L	89186005
  11348  80c4
  11349  80c4		       00 31	   A4	      =	(* & $3ff)/4
  11350  80c4		       c1 ca a1 05	      DC.L	94489281
  11351  80c8
  11352  80c8		       00 32	   A4s	      =	(* & $3ff)/4
  11353  80c8		       82 86 f7 05	      DC.L	100107906
  11354  80cc
  11355  80cc		       00 33	   B4	      =	(* & $3ff)/4
  11356  80cc		       57 5b 52 06	      DC.L	106060631
  11357  80d0
  11358  80d0		       00 34	   C5	      =	(* & $3ff)/4
  11359  80d0		       dd 96 b2 06	      DC.L	112367325
  11360  80d4
  11361  80d4		       00 35	   C5s	      =	(* & $3ff)/4
  11362  80d4		       4a 8b 18 07	      DC.L	119049034
  11363  80d8
  11364  80d8		       00 36	   D5	      =	(* & $3ff)/4
  11365  80d8		       b9 8f 84 07	      DC.L	126128057
  11366  80dc
  11367  80dc		       00 37	   D5s	      =	(* & $3ff)/4
  11368  80dc		       76 00 f7 07	      DC.L	133628022
  11369  80e0
  11370  80e0		       00 38	   E5	      =	(* & $3ff)/4
  11371  80e0		       46 3f 70 08	      DC.L	141573958
  11372  80e4
  11373  80e4		       00 39	   F5	      =	(* & $3ff)/4
  11374  80e4		       bf b3 f0 08	      DC.L	149992383
  11375  80e8
  11376  80e8		       00 3a	   F5s	      =	(* & $3ff)/4
  11377  80e8		       a3 cb 78 09	      DC.L	158911395
  11378  80ec
  11379  80ec		       00 3b	   G5	      =	(* & $3ff)/4
  11380  80ec		       36 fb 08 0a	      DC.L	168360758
  11381  80f0
  11382  80f0		       00 3c	   G5s	      =	(* & $3ff)/4
  11383  80f0		       a9 bd a1 0a	      DC.L	178372009
  11384  80f4
  11385  80f4		       00 3d	   A5	      =	(* & $3ff)/4
  11386  80f4		       81 95 43 0b	      DC.L	188978561
  11387  80f8
  11388  80f8		       00 3e	   A5s	      =	(* & $3ff)/4
  11389  80f8		       03 0d ef 0b	      DC.L	200215811
  11390  80fc
  11391  80fc		       00 3f	   B5	      =	(* & $3ff)/4
  11392  80fc		       af b6 a4 0c	      DC.L	212121263
  11393  8100
  11394  8100		       00 40	   C6	      =	(* & $3ff)/4
  11395  8100		       b9 2d 65 0d	      DC.L	224734649
  11396  8104
  11397  8104		       00 41	   C6s	      =	(* & $3ff)/4
  11398  8104		       93 16 31 0e	      DC.L	238098067
  11399  8108
  11400  8108		       00 42	   D6	      =	(* & $3ff)/4
  11401  8108		       73 1f 09 0f	      DC.L	252256115
  11402  810c
  11403  810c		       00 43	   D6s	      =	(* & $3ff)/4
  11404  810c		       ec 00 ee 0f	      DC.L	267256044
  11405  8110
  11406  8110		       00 44	   E6	      =	(* & $3ff)/4
  11407  8110		       8b 7e e0 10	      DC.L	283147915
  11408  8114
  11409  8114		       00 45	   F6	      =	(* & $3ff)/4
  11410  8114		       7f 67 e1 11	      DC.L	299984767
  11411  8118
  11412  8118		       00 46	   F6s	      =	(* & $3ff)/4
  11413  8118		       45 97 f1 12	      DC.L	317822789
  11414  811c
  11415  811c		       00 47	   G6	      =	(* & $3ff)/4
  11416  811c		       6c f6 11 14	      DC.L	336721516
  11417  8120
  11418  8120		       00 48	   G6s	      =	(* & $3ff)/4
  11419  8120		       53 7b 43 15	      DC.L	356744019
  11420  8124
  11421  8124		       00 49	   A6	      =	(* & $3ff)/4
  11422  8124		       02 2b 87 16	      DC.L	377957122
  11423  8128
  11424  8128		       00 4a	   A6s	      =	(* & $3ff)/4
  11425  8128		       06 1a de 17	      DC.L	400431622
  11426  812c
  11427  812c		       00 4b	   B6	      =	(* & $3ff)/4
  11428  812c		       5d 6d 49 19	      DC.L	424242525
  11429  8130
  11430  8130		       00 4c	   C7	      =	(* & $3ff)/4
  11431  8130		       73 5b ca 1a	      DC.L	449469299
  11432  8134
  11433  8134		       00 4d	   C7s	      =	(* & $3ff)/4
  11434  8134		       26 2d 62 1c	      DC.L	476196134
  11435  8138
  11436  8138		       00 4e	   D7	      =	(* & $3ff)/4
  11437  8138		       e6 3e 12 1e	      DC.L	504512230
  11438  813c
  11439  813c		       00 4f	   D7s	      =	(* & $3ff)/4
  11440  813c		       d8 01 dc 1f	      DC.L	534512088
  11441  8140
  11442  8140		       00 50	   E7	      =	(* & $3ff)/4
  11443  8140		       17 fd c0 21	      DC.L	566295831
  11444  8144
  11445  8144		       00 51	   F7	      =	(* & $3ff)/4
  11446  8144		       fd ce c2 23	      DC.L	599969533
  11447  8148
  11448  8148		       00 52	   F7s	      =	(* & $3ff)/4
  11449  8148		       8a 2e e3 25	      DC.L	635645578
  11450  814c
  11451  814c		       00 53	   G7	      =	(* & $3ff)/4
  11452  814c		       d7 ec 23 28	      DC.L	673443031
  11453  8150
  11454  8150		       00 54	   G7s	      =	(* & $3ff)/4
  11455  8150		       a6 f6 86 2a	      DC.L	713488038
  11456  8154
  11457  8154		       00 55	   A7	      =	(* & $3ff)/4
  11458  8154		       04 56 0e 2d	      DC.L	755914244
  11459  8158
  11460  8158		       00 56	   A7s	      =	(* & $3ff)/4
  11461  8158		       0c 34 bc 2f	      DC.L	800863244
  11462  815c
  11463  815c		       00 57	   B7	      =	(* & $3ff)/4
  11464  815c		       bb da 92 32	      DC.L	848485051
  11465  8160
  11466  8160		       00 58	   C8	      =	(* & $3ff)/4
  11467  8160		       e5 b6 94 35	      DC.L	898938597
  11468  8164
  11469  8164							;values for 89-255 may go here 
  11470  8164
  11471  8164					      if	(* <= $1400)
  11472  8164		       00 00 00 00*	      ds	($1400-*)	; pad out remaining space in frequency table
  11473  8400				  -	      else
  11474  8400				  -	      echo	"FATAL ERROR - Frequency table exceeds 1K"
  11475  8400				  -	      err
  11476  8400					      endif
