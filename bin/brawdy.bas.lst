------- FILE c:\Users\roger\OneDrive\Documents\Atari\BrawdyBAS\brawdy.bas.asm LEVEL 1 PASS 3
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  8400 ????				      include	"vcs.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????						; VCS.H
      4  8400 ????						; Version 1.05, 13/November/2003
      5  8400 ????
      6  8400 ????	       00 69	   VERSION_VCS =	105
      7  8400 ????
      8  8400 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  8400 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  8400 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  8400 ????						;
     12  8400 ????						; This file defines hardware registers and memory mapping for the
     13  8400 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  8400 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  8400 ????						; available at at http://www.atari2600.org/dasm
     16  8400 ????						;
     17  8400 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  8400 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  8400 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  8400 ????						; with your views.  Please contribute, if you think you can improve this
     21  8400 ????						; file!
     22  8400 ????						;
     23  8400 ????						; Latest Revisions...
     24  8400 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  8400 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  8400 ????						;			    This will allow conditional code to verify VCS.H being
     27  8400 ????						;			    used for code assembly.
     28  8400 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  8400 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  8400 ????						;			 mirrored reading/writing differences.	This is more a 
     31  8400 ????						;			 readability issue, and binary compatibility with disassembled
     32  8400 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  8400 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  8400 ????						;			 which was broken by the use of segments in this file, as
     35  8400 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  8400 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  8400 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  8400 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  8400 ????						;						   it is safe to leave it undefined, and the base address will
     40  8400 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  8400 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  8400 ????						;			  - register definitions are now generated through assignment
     43  8400 ????						;			    in uninitialised segments.	This allows a changeable base
     44  8400 ????						;			    address architecture.
     45  8400 ????						; 1.0	22/MAR/2003		Initial release
     46  8400 ????
     47  8400 ????
     48  8400 ????						;-------------------------------------------------------------------------------
     49  8400 ????
     50  8400 ????						; TIA_BASE_ADDRESS
     51  8400 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  8400 ????						; Normally 0, the base address should (externally, before including this file)
     53  8400 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  8400 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  8400 ????						; < $40 as a bankswitch.
     56  8400 ????
     57  8400 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  8400 ????			  -TIA_BASE_ADDRESS =	0
     59  8400 ????				      ENDIF
     60  8400 ????
     61  8400 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  8400 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  8400 ????						; *OR* by declaring the label before including this file, eg:
     64  8400 ????						; TIA_BASE_ADDRESS = $40
     65  8400 ????						;   include "vcs.h"
     66  8400 ????
     67  8400 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  8400 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  8400 ????						; for the mirrored ROM hardware registers.
     70  8400 ????
     71  8400 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  8400 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  8400 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  8400 ????
     75  8400 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  8400 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  8400 ????				      ENDIF
     78  8400 ????
     79  8400 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  8400 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  8400 ????				      ENDIF
     82  8400 ????
     83  8400 ????						;-------------------------------------------------------------------------------
     84  8400 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  8400 ????				      SEG
    201  8400 ????
    202  8400 ????						; EOF
------- FILE c:\Users\roger\OneDrive\Documents\Atari\BrawdyBAS\brawdy.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  8400 ????				      include	"macro.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????						; MACRO.H
      4  8400 ????						; Version 1.05, 13/NOVEMBER/2003
      5  8400 ????
      6  8400 ????	       00 69	   VERSION_MACRO =	105
      7  8400 ????
      8  8400 ????						;
      9  8400 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  8400 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  8400 ????						;
     12  8400 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  8400 ????						; It is distributed as a companion machine-specific support package
     14  8400 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  8400 ????						; available at at http://www.atari2600.org/dasm
     16  8400 ????						;
     17  8400 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  8400 ????						; contents, or would like to add something, please write to me
     19  8400 ????						; (atari2600@taswegian.com) with your contribution.
     20  8400 ????						;
     21  8400 ????						; Latest Revisions...
     22  8400 ????						;
     23  8400 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  8400 ????						;			    This will allow conditional code to verify MACRO.H being
     25  8400 ????						;			    used for code assembly.
     26  8400 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  8400 ????						;
     28  8400 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  8400 ????						;
     30  8400 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  8400 ????						;			   (standardised macro for vertical synch code)
     32  8400 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  8400 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  8400 ????						; 1.0	22/MAR/2003		Initial release
     35  8400 ????
     36  8400 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  8400 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  8400 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  8400 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  8400 ????						;   registers and require them to be defined first).
     41  8400 ????
     42  8400 ????						; Available macros...
     43  8400 ????						;   SLEEP n		 - sleep for n cycles
     44  8400 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  8400 ????						;   CLEAN_START	 - set machine to known state on startup
     46  8400 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  8400 ????
     48  8400 ????						;-------------------------------------------------------------------------------
     49  8400 ????						; SLEEP duration
     50  8400 ????						; Original author: Thomas Jentzsch
     51  8400 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  8400 ????						; useful for code where precise timing is required.
     53  8400 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  8400 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  8400 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  8400 ????
     57  8400 ????				      MAC	sleep
     58  8400 ????			   .CYCLES    SET	{1}
     59  8400 ????
     60  8400 ????				      IF	.CYCLES < 2
     61  8400 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  8400 ????				      ERR
     63  8400 ????				      ENDIF
     64  8400 ????
     65  8400 ????				      IF	.CYCLES & 1
     66  8400 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  8400 ????				      nop	0
     68  8400 ????				      ELSE
     69  8400 ????				      bit	VSYNC
     70  8400 ????				      ENDIF
     71  8400 ????			   .CYCLES    SET	.CYCLES - 3
     72  8400 ????				      ENDIF
     73  8400 ????
     74  8400 ????				      REPEAT	.CYCLES / 2
     75  8400 ????				      nop
     76  8400 ????				      REPEND
     77  8400 ????				      ENDM		;usage: SLEEP n (n>1)
     78  8400 ????
     79  8400 ????						;-------------------------------------------------------------------------------
     80  8400 ????						; VERTICAL_SYNC
     81  8400 ????						; Original author: Manuel Polik
     82  8400 ????						; Inserts the code required for a proper 3 scannline 
     83  8400 ????						; vertical sync sequence
     84  8400 ????						;
     85  8400 ????						; Note: Alters the accumulator
     86  8400 ????						;
     87  8400 ????						; IN:
     88  8400 ????						; OUT: A = 1
     89  8400 ????
     90  8400 ????				      MAC	vertical_sync
     91  8400 ????				      LDA	#$02	; A = VSYNC enable
     92  8400 ????				      STA	WSYNC	; Finish current line
     93  8400 ????				      STA	VSYNC	; Start vertical sync
     94  8400 ????				      STA	WSYNC	; 1st line vertical sync
     95  8400 ????				      STA	WSYNC	; 2nd line vertical sync
     96  8400 ????				      LSR		; A = VSYNC disable
     97  8400 ????				      STA	WSYNC	; 3rd line vertical sync
     98  8400 ????				      STA	VSYNC	; Stop vertical sync
     99  8400 ????				      ENDM
    100  8400 ????
    101  8400 ????						;-------------------------------------------------------------------------------
    102  8400 ????						; CLEAN_START
    103  8400 ????						; Original author: Andrew Davie
    104  8400 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  8400 ????						; Sets stack pointer to $FF, and all registers to 0
    106  8400 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  8400 ????						; Use as very first section of code on boot (ie: at reset)
    108  8400 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  8400 ????
    110  8400 ????				      MAC	clean_start
    111  8400 ????				      sei
    112  8400 ????				      cld
    113  8400 ????
    114  8400 ????				      ldx	#0
    115  8400 ????				      txa
    116  8400 ????				      tay
    117  8400 ????			   .CLEAR_STACK dex
    118  8400 ????				      txs
    119  8400 ????				      pha
    120  8400 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  8400 ????
    122  8400 ????				      ENDM
    123  8400 ????
    124  8400 ????						;-------------------------------------------------------
    125  8400 ????						; SET_POINTER
    126  8400 ????						; Original author: Manuel Rotschkar
    127  8400 ????						;
    128  8400 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  8400 ????						;
    130  8400 ????						; Usage: SET_POINTER pointer, address
    131  8400 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  8400 ????						;
    133  8400 ????						; Note: Alters the accumulator, NZ flags
    134  8400 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  8400 ????						; IN 2: absolute address
    136  8400 ????
    137  8400 ????				      MAC	set_pointer
    138  8400 ????			   .POINTER   SET	{1}
    139  8400 ????			   .ADDRESS   SET	{2}
    140  8400 ????
    141  8400 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  8400 ????				      STA	.POINTER	; Store in pointer
    143  8400 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  8400 ????				      STA	.POINTER+1	; Store in pointer+1
    145  8400 ????
    146  8400 ????				      ENDM
    147  8400 ????
    148  8400 ????						; EOF
------- FILE c:\Users\roger\OneDrive\Documents\Atari\BrawdyBAS\brawdy.bas.asm
------- FILE DPCplus.h LEVEL 2 PASS 3
      0  8400 ????				      include	"DPCplus.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????						; DPCplus.H - Display Processor Chip Plus Definitions
      4  8400 ????						; Chris Walton, Fred Quimby, Darrell Spice 2010
      5  8400 ????						; Version 0.00
      6  8400 ????
      7  8400 ????						; DPC Base Address
      8  8400 ????			  -	      IFNCONST	DPC_BASE_ADDRESS
      9  8400 ????			  -DPC_BASE_ADDRESS =	$1000
     10  8400 ????				      ENDIF
     11  8400 ????
     12  8400 ????						; DPC Read Base
     13  8400 ????			  -	      IFNCONST	DPC_BASE_READ_ADDRESS
     14  8400 ????			  -DPC_BASE_READ_ADDRESS =	DPC_BASE_ADDRESS
     15  8400 ????				      ENDIF
     16  8400 ????
     17  8400 ????						; DPC Write Base
     18  8400 ????			  -	      IFNCONST	DPC_BASE_WRITE_ADDRESS
     19  8400 ????			  -DPC_BASE_WRITE_ADDRESS =	DPC_BASE_ADDRESS+$28
     20  8400 ????				      ENDIF
     21  8400 ????
     22 U1028 ????				      SEG.U	DPC_REGISTERS_READ
     23 U1000					      ORG	DPC_BASE_READ_ADDRESS
     24 U1000
     25 U1000							;****************************************
     26 U1000							; DPC+ Read Registers
     27 U1000							;****************************************
     28 U1000							;
     29 U1000							;----------------------------------------
     30 U1000							; Random Numbers
     31 U1000							;----------------------------------------
     32 U1000							; DPC+ provides a 32 bit LFSR (Linear feedback shift register)
     33 U1000							; which is used as a random number generator.	Each individual byte of the
     34 U1000							; random number will return values from 0-255.  The random numbers will follow
     35 U1000							; an exact sequence, so it's best to clock them at least once per frame even if 
     36 U1000							; you don't need the value (this allows the amount of time it takes the user to
     37 U1000							; start the game to select a random starting point in the sequence)
     38 U1000							;----------------------------------------
     39 U1000		       00	   RANDOM0NEXT DS	1	; $00 clock next 32 bit number and returns byte 0
     40 U1001		       00	   RANDOM0PRIOR DS	1	; $01 clock prior 32 bit number and returns byte 0
     41 U1002		       00	   RANDOM1    DS	1	; $02 returns byte 1 of random number w/out clock
     42 U1003		       00	   RANDOM2    DS	1	; $03 returns byte 2 of random number w/out clock
     43 U1004		       00	   RANDOM3    DS	1	; $04 returns byte 3 of random number w/out clock
     44 U1005
     45 U1005							;----------------------------------------
     46 U1005							; Music Fetcher
     47 U1005							;----------------------------------------
     48 U1005							; When generating music, this value must be read every single scanline and
     49 U1005							; stored into AUDV0.
     50 U1005							;----------------------------------------
     51 U1005		       00	   AMPLITUDE  DS	1	; $05
     52 U1006
     53 U1006							;----------------------------------------
     54 U1006							; Reserved
     55 U1006							;----------------------------------------
     56 U1006		       00		      DS	1	; $06
     57 U1007		       00		      DS	1	; $07
     58 U1008
     59 U1008							;----------------------------------------
     60 U1008							; Data Fetcher
     61 U1008							;----------------------------------------
     62 U1008							; There are 8 Data Fetchers which are used to access data stored in the Display
     63 U1008							; Data bank.  Before using, you must point the Data Fetcher at the data to read
     64 U1008							; via DFxLOW and DFxHI.  After each read the Data Fetcher will update to point
     65 U1008							; to the next byte of data to return.
     66 U1008							;
     67 U1008							; psuedo code* to point Data Fetcher 1 to the color data
     68 U1008							;	lda #<(ColorDataPosition - HowFarDownScreen)
     69 U1008							;	sta DF1LOW
     70 U1008							;	lda #>(ColorDataPosition - HowFarDownScreen)
     71 U1008							;	sta DF1HI 
     72 U1008							;	....
     73 U1008							; then in the kernel read the Data Fetcher and update the color, takes 7 cycles
     74 U1008							;	LDA DF1DATA
     75 U1008							;	STA COLUP0
     76 U1008							;
     77 U1008							; * see DPCplus.asm for actual code
     78 U1008							;----------------------------------------
     79 U1008		       00	   DF0DATA    DS	1	; $08
     80 U1009		       00	   DF1DATA    DS	1	; $09
     81 U100a		       00	   DF2DATA    DS	1	; $0A
     82 U100b		       00	   DF3DATA    DS	1	; $0B
     83 U100c		       00	   DF4DATA    DS	1	; $0C
     84 U100d		       00	   DF5DATA    DS	1	; $0D
     85 U100e		       00	   DF6DATA    DS	1	; $0E
     86 U100f		       00	   DF7DATA    DS	1	; $0F
     87 U1010
     88 U1010							;----------------------------------------
     89 U1010							; Data Fetcher, Windowed
     90 U1010							;----------------------------------------
     91 U1010							; The 8 Data Fetchers can also be read in a "windowed" mode, which is most
     92 U1010							; commonly used to update sprites.  To use windowed mode, point the Data
     93 U1010							; Fetcher the same as above, but then also set the Top and Bottom of the
     94 U1010							; Window using DFxTOP and DFxBOT.  When reading via the DFxDATAW registers, a 0
     95 U1010							; value will be returned for anything that's outside of the window.
     96 U1010							;
     97 U1010							; psuedo code to point Data Fetcher0 to the sprite data
     98 U1010							;	lda #<(SpriteDataPosition - HowFarDownScreen)
     99 U1010							;	sta DF0LOW
    100 U1010							;	lda #>(SpriteDataPosition - HowFarDownScreen)
    101 U1010							;	sta DF0HI
    102 U1010							;	
    103 U1010							; set the window for Data Fetcher 0
    104 U1010							;	lda #<(SpriteDataPosition - 1)
    105 U1010							;	sta DF0TOP
    106 U1010							;	lda #<(SpriteDataPosition + ImageHeight)
    107 U1010							;	sta DF0BOT
    108 U1010							;	....
    109 U1010							; then in the kernel read the Data Fetcher and update the sprite, takes 7 cycles
    110 U1010							;	LDA DF0DATAW
    111 U1010							;	STA GRP0
    112 U1010							;----------------------------------------
    113 U1010		       00	   DF0DATAW   DS	1	; $10
    114 U1011		       00	   DF1DATAW   DS	1	; $11
    115 U1012		       00	   DF2DATAW   DS	1	; $12
    116 U1013		       00	   DF3DATAW   DS	1	; $13
    117 U1014		       00	   DF4DATAW   DS	1	; $14
    118 U1015		       00	   DF5DATAW   DS	1	; $15
    119 U1016		       00	   DF6DATAW   DS	1	; $16
    120 U1017		       00	   DF7DATAW   DS	1	; $17
    121 U1018
    122 U1018							;----------------------------------------
    123 U1018							; Fractional Data Fetcher
    124 U1018							;----------------------------------------
    125 U1018							; Another 8 Data Fetchers exist which work differently than the first 8.
    126 U1018							; These allow you to fractionally increment the Data Fetcher so a single
    127 U1018							; value can be read a set number of times before advancing to the next value.
    128 U1018							; This is commonly used to draw asymmetrical playfields without needing to 
    129 U1018							; use 1200 bytes of data (200 scanlines * 6 playfield updates).
    130 U1018							; Before using, you must point the Fractional Data Fetcher at the data to read
    131 U1018							; via DFxFRACLOW and DFxFRACHI.  You must also set the increment value via
    132 U1018							; DFxFRACINC.
    133 U1018							;
    134 U1018							; Set pointer
    135 U1018							;	LDA #<PlayfieldPF0l
    136 U1018							;	STA DF0FRACLOW
    137 U1018							;	... repeat for PF1l, PF2l, PF0r, PF1r and PF2r
    138 U1018							;	lda #>PlayFieldPF0l
    139 U1018							;	STA DF0FRACHI
    140 U1018							;	... repeat for PF1l, PF2l, PF0r, PF1r and PF2r
    141 U1018							; Set the increment to repeat the value for x reads
    142 U1018							;	LDA #(256/x)
    143 U1018							;	STA DF0FRACINC
    144 U1018							;	 STA DF1FRACINC
    145 U1018							;	... repeat for 2-5
    146 U1018							;
    147 U1018							; Special Condition - IF you want to increment the pointer after every read 
    148 U1018							; (just like the normal Data Fetcher), then use the following to set the
    149 U1018							; increment AND prime the Fractional Data Fetcher
    150 U1018							;	LDA #255
    151 U1018							;	STA DF0FRACINC
    152 U1018							;	 STA DF1FRACINC
    153 U1018							;	... repeat for 2-5
    154 U1018							;	LDA DF0FRACDATA - priming read (first value will be read twice)
    155 U1018							;	LDA DF1FRACDATA - priming read (first value will be read twice)
    156 U1018							;	... repeat for 2-5
    157 U1018							;
    158 U1018							; then in the kernel read the Fractional Data Fetchers and update the playfield
    159 U1018							;	LDA DF0FRACDATA
    160 U1018							;	STA PF0
    161 U1018							;	LDA PF1FRACDATA
    162 U1018							;	STA PF1
    163 U1018							;	... repeat for Data Fetchers 2-5, putting them in PF2, PF0, PF1 and PF2
    164 U1018							;----------------------------------------
    165 U1018		       00	   DF0FRACDATA DS	1	; $18
    166 U1019		       00	   DF1FRACDATA DS	1	; $19
    167 U101a		       00	   DF2FRACDATA DS	1	; $1A
    168 U101b		       00	   DF3FRACDATA DS	1	; $1B
    169 U101c		       00	   DF4FRACDATA DS	1	; $1C
    170 U101d		       00	   DF5FRACDATA DS	1	; $1D
    171 U101e		       00	   DF6FRACDATA DS	1	; $1E
    172 U101f		       00	   DF7FRACDATA DS	1	; $1F
    173 U1020
    174 U1020							;----------------------------------------
    175 U1020							; Data Fetcher Window Flag
    176 U1020							;----------------------------------------
    177 U1020							; The Data Fetcher Window Flag allows you to dual-purpose the first four
    178 U1020							; Data Fetchers.  The Window is not required when a Data Fetcher is used to
    179 U1020							; update a sprite's color.  The Flag will return $FF if it's within the window,
    180 U1020							; or 0 if it's not - this value can be used to control the display of the ball
    181 U1020							; and missiles. The Data Fetcher will NOT increment when reading the flag.
    182 U1020							;
    183 U1020							; psuedo code to point Data Fetcher 1 to the color data
    184 U1020							;	lda #<(ColorDataPosition - HowFarDownScreen)
    185 U1020							;	sta DF1LOW
    186 U1020							;	lda #>(ColorDataPosition - HowFarDownScreen)
    187 U1020							;	sta DF1HI
    188 U1020							;
    189 U1020							; set the window based on the missile's Y position and height (number of
    190 U1020							; scanlines to draw missile on)
    191 U1020							;	lda #<(ColorDataPosition + MissileYposition - 1)
    192 U1020							;	sta DF1TOP
    193 U1020							;	lda #<(ColorDataPosition + MissileYposition + MissileHeight)
    194 U1020							;	sta DF1BOT
    195 U1020							;
    196 U1020							; then in the kernel read the Data Fetcher and update the color, then read the
    197 U1020							; flag and update the missile
    198 U1020							;	LDA DF1DATA
    199 U1020							;	STA COLUP0
    200 U1020							;	LDA DF1FLAG
    201 U1020							;	STA ENAM0
    202 U1020							;----------------------------------------
    203 U1020		       00	   DF0FLAG    DS	1	; $20
    204 U1021		       00	   DF1FLAG    DS	1	; $21
    205 U1022		       00	   DF2FLAG    DS	1	; $22
    206 U1023		       00	   DF3FLAG    DS	1	; $23
    207 U1024
    208 U1024							;----------------------------------------
    209 U1024							; Reserved
    210 U1024							;----------------------------------------
    211 U1024		       00		      DS	1	; $24
    212 U1025		       00		      DS	1	; $25
    213 U1026		       00		      DS	1	; $26
    214 U1027		       00		      DS	1	; $27
    215 U1028
    216 U1028
    217 U1080 ????				      SEG.U	DPC_REGISTERS_WRITE
    218 U1028					      ORG	DPC_BASE_WRITE_ADDRESS
    219 U1028
    220 U1028							;****************************************
    221 U1028							; SECTION 2 - DPC+ Write Registers
    222 U1028							;****************************************
    223 U1028							;
    224 U1028							;----------------------------------------
    225 U1028							; Fractional Data Fetcher, Low Pointer
    226 U1028							;----------------------------------------
    227 U1028							; These are used in conjunction with DFxFRACHI to point a Fractional Data
    228 U1028							; Fetcher to the data to read.  For usage, see "Fractional Data Fetcher"
    229 U1028							; in SECTION 1.
    230 U1028							;----------------------------------------
    231 U1028		       00	   DF0FRACLOW DS	1	; $28
    232 U1029		       00	   DF1FRACLOW DS	1	; $29
    233 U102a		       00	   DF2FRACLOW DS	1	; $2A
    234 U102b		       00	   DF3FRACLOW DS	1	; $2B
    235 U102c		       00	   DF4FRACLOW DS	1	; $2C
    236 U102d		       00	   DF5FRACLOW DS	1	; $2D
    237 U102e		       00	   DF6FRACLOW DS	1	; $2E
    238 U102f		       00	   DF7FRACLOW DS	1	; $2F
    239 U1030
    240 U1030							;----------------------------------------
    241 U1030							; Fractional Data Fetcher, High Pointer
    242 U1030							;----------------------------------------
    243 U1030							; These are used in conjunction with DFxFRACLOW to point a Fractional Data
    244 U1030							; Fetcher to the data to read.  For usage, see "Fractional Data Fetcher"
    245 U1030							; in SECTION 1.
    246 U1030							;
    247 U1030							; NOTE: for only the lower 4 bits are used.
    248 U1030							;----------------------------------------
    249 U1030		       00	   DF0FRACHI  DS	1	; $30
    250 U1031		       00	   DF1FRACHI  DS	1	; $31
    251 U1032		       00	   DF2FRACHI  DS	1	; $32
    252 U1033		       00	   DF3FRACHI  DS	1	; $33
    253 U1034		       00	   DF4FRACHI  DS	1	; $34
    254 U1035		       00	   DF5FRACHI  DS	1	; $35 
    255 U1036		       00	   DF6FRACHI  DS	1	; $36 
    256 U1037		       00	   DF7FRACHI  DS	1	; $37 
    257 U1038
    258 U1038							;----------------------------------------
    259 U1038							; Fractional Data Fetcher, Increment
    260 U1038							;----------------------------------------
    261 U1038							; These are used to set the increment amount for the Fractional Data Fetcher.
    262 U1038							; To increment pointer after every Xth read use int(256/X)
    263 U1038							; For usage, see "Fractional Data Fetcher" in SECTION 1.
    264 U1038							;----------------------------------------
    265 U1038		       00	   DF0FRACINC DS	1	; $38
    266 U1039		       00	   DF1FRACINC DS	1	; $39
    267 U103a		       00	   DF2FRACINC DS	1	; $3A
    268 U103b		       00	   DF3FRACINC DS	1	; $3B
    269 U103c		       00	   DF4FRACINC DS	1	; $3C
    270 U103d		       00	   DF5FRACINC DS	1	; $3D
    271 U103e		       00	   DF6FRACINC DS	1	; $3E
    272 U103f		       00	   DF7FRACINC DS	1	; $3F
    273 U1040
    274 U1040							;----------------------------------------
    275 U1040							; Data Fetcher, Window Top
    276 U1040							;----------------------------------------
    277 U1040							; These are used with DFxBOT to define the Data Fetcher Window
    278 U1040							; For usage, see "Data Fetcher, Windowed" in SECTION 1.
    279 U1040							;----------------------------------------
    280 U1040		       00	   DF0TOP     DS	1	; $40
    281 U1041		       00	   DF1TOP     DS	1	; $41
    282 U1042		       00	   DF2TOP     DS	1	; $42
    283 U1043		       00	   DF3TOP     DS	1	; $43
    284 U1044		       00	   DF4TOP     DS	1	; $44
    285 U1045		       00	   DF5TOP     DS	1	; $45
    286 U1046		       00	   DF6TOP     DS	1	; $46
    287 U1047		       00	   DF7TOP     DS	1	; $47
    288 U1048
    289 U1048							;----------------------------------------
    290 U1048							; Data Fetcher, Window Bottom
    291 U1048							;----------------------------------------
    292 U1048							; These are used with DFxTOP to define the Data Fetcher Window
    293 U1048							; For usage, see "Data Fetcher, Windowed" in SECTION 1.
    294 U1048							;----------------------------------------
    295 U1048		       00	   DF0BOT     DS	1	; $48
    296 U1049		       00	   DF1BOT     DS	1	; $49
    297 U104a		       00	   DF2BOT     DS	1	; $4A
    298 U104b		       00	   DF3BOT     DS	1	; $4B
    299 U104c		       00	   DF4BOT     DS	1	; $4C
    300 U104d		       00	   DF5BOT     DS	1	; $4D
    301 U104e		       00	   DF6BOT     DS	1	; $4E
    302 U104f		       00	   DF7BOT     DS	1	; $4F
    303 U1050
    304 U1050							;----------------------------------------
    305 U1050							; Data Fetcher, Low Pointer
    306 U1050							;----------------------------------------
    307 U1050							; These are used in conjunction with DFxHI to point a Data Fetcher to the data
    308 U1050							; to read.  For usage, see "Data Fetcher" in SECTION 1.
    309 U1050							;----------------------------------------
    310 U1050		       00	   DF0LOW     DS	1	; $50
    311 U1051		       00	   DF1LOW     DS	1	; $51
    312 U1052		       00	   DF2LOW     DS	1	; $52
    313 U1053		       00	   DF3LOW     DS	1	; $53
    314 U1054		       00	   DF4LOW     DS	1	; $54
    315 U1055		       00	   DF5LOW     DS	1	; $55
    316 U1056		       00	   DF6LOW     DS	1	; $56
    317 U1057		       00	   DF7LOW     DS	1	; $57
    318 U1058
    319 U1058							;----------------------------------------
    320 U1058							; Fast Fetch Mode
    321 U1058							;----------------------------------------
    322 U1058							; Fast Fetch Mode enables the fastest way to read DPC+ registers.  Normal
    323 U1058							; reads use LDA Absolute addressing (LDA DF0DATA) which takes 4 cycles to
    324 U1058							; process.  Fast Fetch Mode intercepts LDA Immediate addressing (LDA #<DF0DATA)
    325 U1058							; which takes only 2 cycles!  Only immediate values < $28 are intercepted
    326 U1058							; 
    327 U1058							; set Fast Fetch Mode
    328 U1058							;	LDA #0
    329 U1058							;	STA FASTFETCH
    330 U1058							;
    331 U1058							; then use immediate mode to read the registers, takes just 5 cycles to update
    332 U1058							; any TIA register
    333 U1058							;
    334 U1058							;	LDA #<DF0DATA
    335 U1058							;	STA GRP0
    336 U1058							;
    337 U1058							; when done, turn off Fast Fetch Mode using any non-zero value
    338 U1058							;	LDA #$FF
    339 U1058							;	STA FASTFETCH
    340 U1058							;
    341 U1058							; NOTE: if you forget to turn off FASTFETCH mode, then code like this will not
    342 U1058							;	 work as you expect
    343 U1058							;	LDA #0	; returns a RANDOM NUMBER, not 0.
    344 U1058							;	STA COLUPF
    345 U1058							;----------------------------------------
    346 U1058		       00	   FASTFETCH  DS	1	; $58
    347 U1059
    348 U1059							;----------------------------------------
    349 U1059							; Function Support
    350 U1059							;----------------------------------------
    351 U1059							; Currently only Function 255 is defined, and it is used to call user
    352 U1059							; written ARM routines (or C code compiled for the ARM processor.)
    353 U1059							;
    354 U1059							; PARAMETER is not used by function 255, it may be used by future functions.
    355 U1059							; 
    356 U1059							; call custom ARM routine
    357 U1059							;	LDA #$FF
    358 U1059							;	STA CALLFUNCTION
    359 U1059							;
    360 U1059							; A custom ARM demo will be released in the near future
    361 U1059							;----------------------------------------
    362 U1059		       00	   PARAMETER  DS	1	; $59
    363 U105a		       00	   CALLFUNCTION DS	1	; $5A
    364 U105b
    365 U105b							;----------------------------------------
    366 U105b							; Reserved
    367 U105b							;----------------------------------------
    368 U105b		       00		      DS	1	; $5B	 ; reserved
    369 U105c		       00		      DS	1	; $5C	 ; reserved
    370 U105d
    371 U105d							;----------------------------------------
    372 U105d							; Waveforms
    373 U105d							;----------------------------------------
    374 U105d							; Waveforms are 32 byte tables that define a waveform.  Waveforms must be 32
    375 U105d							; byte aligned, and can only be stored in the 4K Display Data Bank. You MUST
    376 U105d							; define an "OFF" waveform,  comprised of all zeros.  The sum of all waveforms
    377 U105d							; being played should be <= 15, so typically you'll use a maximum of 5 for any
    378 U105d							; given value.
    379 U105d							;
    380 U105d							; Valid values are 0-127 and point to the 4K Display Data bank.  The formula
    381 U105d							; (* & $1fff)/32 as shown below will calculate the value for you
    382 U105d							;
    383 U105d							;
    384 U105d							; example waveforms
    385 U105d							;	align 32		; forces the waveform to a 32 byte boundary
    386 U105d							;SOUND_OFF = (* & $1fff)/32	; calculates waveform pointer
    387 U105d							;	.byte 0,0,0,0,0,0,0,0
    388 U105d							;	.byte 0,0,0,0,0,0,0,0
    389 U105d							;	.byte 0,0,0,0,0,0,0,0
    390 U105d							;	.byte 0,0,0,0,0,0,0,0 
    391 U105d							; 
    392 U105d							;	align 32
    393 U105d							;SINE_WAVE = (* & $1fff)/32
    394 U105d							;	.byte 3,3,3,4,4,5,5,5
    395 U105d							;	.byte 5,5,5,5,4,4,3,3
    396 U105d							;	.byte 3,2,2,1,1,0,0,0
    397 U105d							;	.byte 0,0,0,0,1,1,2,2 
    398 U105d							;
    399 U105d							; usage, set voice 0 to Sine Wave, set voice 1 & 2 off
    400 U105d							;	LDA #SINE_WAVE
    401 U105d							;	STA WAVEFORM0
    402 U105d							;	LDA #SOUND_OFF
    403 U105d							;	STA WAVEFORM1
    404 U105d							;	STA WAVEFORM2	
    405 U105d							;----------------------------------------
    406 U105d		       00	   WAVEFORM0  DS	1	; $5D
    407 U105e		       00	   WAVEFORM1  DS	1	; $5E
    408 U105f		       00	   WAVEFORM2  DS	1	; $5F
    409 U1060
    410 U1060							;----------------------------------------
    411 U1060							; Data Fetcher Push (stack)
    412 U1060							;----------------------------------------
    413 U1060							; The Data Fetchers can also be used to update the contents of the 4K
    414 U1060							; Display Data bank.  Point the Data Fetcher to the data to change,
    415 U1060							; then Push to it.  The Data Fetcher's pointer will be decremented BEFORE
    416 U1060							; the data is written.
    417 U1060							;
    418 U1060							; point Data Fetcher 1 to the sprite data
    419 U1060							;	lda #<DisplayData
    420 U1060							;	sta DF1LOW
    421 U1060							;	lda #>DisplayData
    422 U1060							;	sta DF1HI 
    423 U1060							;
    424 U1060							; then update it
    425 U1060							;	LDA #$FF
    426 U1060							;	STA DF1PUSH ; changes data at DisplayData - 1
    427 U1060							;	LDA #$81
    428 U1060							;	STA DF1OUSH ; changes data at DisplayData - 2
    429 U1060							;----------------------------------------
    430 U1060		       00	   DF0PUSH    DS	1	; $60
    431 U1061		       00	   DF1PUSH    DS	1	; $61
    432 U1062		       00	   DF2PUSH    DS	1	; $62
    433 U1063		       00	   DF3PUSH    DS	1	; $63
    434 U1064		       00	   DF4PUSH    DS	1	; $64
    435 U1065		       00	   DF5PUSH    DS	1	; $65
    436 U1066		       00	   DF6PUSH    DS	1	; $66
    437 U1067		       00	   DF7PUSH    DS	1	; $67
    438 U1068
    439 U1068							;----------------------------------------
    440 U1068							; Data Fetcher, High Pointer
    441 U1068							;----------------------------------------
    442 U1068							; These are used in conjunction with DFxLOW to point a Data Fetcher to the data
    443 U1068							; to read.  For usage, see "Data Fetcher" in SECTION 1.
    444 U1068							;----------------------------------------
    445 U1068		       00	   DF0HI      DS	1	; $68
    446 U1069		       00	   DF1HI      DS	1	; $69
    447 U106a		       00	   DF2HI      DS	1	; $6A
    448 U106b		       00	   DF3HI      DS	1	; $6B
    449 U106c		       00	   DF4HI      DS	1	; $6C
    450 U106d		       00	   DF5HI      DS	1	; $6D 
    451 U106e		       00	   DF6HI      DS	1	; $6E 
    452 U106f		       00	   DF7HI      DS	1	; $6F 
    453 U1070
    454 U1070							;----------------------------------------
    455 U1070							; Random Number Initialization
    456 U1070							;----------------------------------------
    457 U1070							; The random number generate defaults to a value that spells out DPC+.
    458 U1070							; Store any value to RRESET to set the random number back to DPC+, or you
    459 U1070							; can use RWRITE0-3 to change the 32 bit value to anything you desire.
    460 U1070							;
    461 U1070							; reset random number
    462 U1070							;	LDA #0
    463 U1070							;	STA RRESET
    464 U1070							;
    465 U1070							; set a specific random number (spells out 2600)
    466 U1070							;	LDA #$32
    467 U1070							;	STA RWRITE0
    468 U1070							;	LDA #$36
    469 U1070							;	STA RWRITE1
    470 U1070							;	LDA #$30
    471 U1070							;	STA RWRITE2
    472 U1070							;	STA RWRITE3
    473 U1070							;
    474 U1070							; NOTE: do not set all 4 bytes to 0, as that will disable the generator.
    475 U1070							;----------------------------------------
    476 U1070		       00	   RRESET     DS	1	; $70
    477 U1071		       00	   RWRITE0    DS	1	; $71
    478 U1072		       00	   RWRITE1    DS	1	; $72
    479 U1073		       00	   RWRITE2    DS	1	; $73
    480 U1074		       00	   RWRITE3    DS	1	; $74
    481 U1075
    482 U1075							;----------------------------------------
    483 U1075							; Notes
    484 U1075							;----------------------------------------
    485 U1075							; These are used to select a value from the frequency table to play.
    486 U1075							; The default table, store in DPC_frequencies.h, only defines frequencies
    487 U1075							; for 1-88, which cover the keys of a piano.  You are free to add additional
    488 U1075							; frequencies from 88-255.  Piano keys are defined at the end of this file
    489 U1075							;
    490 U1075							; set voice 0 to middle C
    491 U1075							;	LDA #C4
    492 U1075							;	STA NOTE0
    493 U1075							;
    494 U1075							; Note: if you are using ARM USER CODE then you can only use notes to 128.
    495 U1075							;----------------------------------------
    496 U1075		       00	   NOTE0      DS	1	; $75
    497 U1076		       00	   NOTE1      DS	1	; $76
    498 U1077		       00	   NOTE2      DS	1	; $77
    499 U1078
    500 U1078							;----------------------------------------
    501 U1078							; Data Fetcher Write (queue)
    502 U1078							;----------------------------------------
    503 U1078							; The Data Fetchers can also be used to update the contents of the 4K
    504 U1078							; Display Data bank.  Point the Data Fetcher to the data to change,
    505 U1078							; then Write to it  The Data Fetcher's pointer will be incremented AFTER
    506 U1078							; the data is written.
    507 U1078							;
    508 U1078							; point Data Fetcher 1 to the sprite data
    509 U1078							;	lda #<SpriteData
    510 U1078							;	sta DF1LOW
    511 U1078							;	lda #>SpriteData
    512 U1078							;	sta DF1HI 
    513 U1078							;
    514 U1078							; then update it
    515 U1078							;	LDA #$FF
    516 U1078							;	STA DF1WRITE ; changes data at SpriteData
    517 U1078							;	LDA #$81
    518 U1078							;	STA DF1WRITE ; changes data at SpriteData + 1
    519 U1078							;----------------------------------------
    520 U1078		       00	   DF0WRITE   DS	1	; $78
    521 U1079		       00	   DF1WRITE   DS	1	; $79
    522 U107a		       00	   DF2WRITE   DS	1	; $7A
    523 U107b		       00	   DF3WRITE   DS	1	; $7B
    524 U107c		       00	   DF4WRITE   DS	1	; $7C
    525 U107d		       00	   DF5WRITE   DS	1	; $7D
    526 U107e		       00	   DF6WRITE   DS	1	; $7E
    527 U107f		       00	   DF7WRITE   DS	1	; $7F
    528 U1080
    529 U1080							;-------------------------------------------------------------------------------
    530 U1080							; The following required for back-compatibility with code which does not use
    531 U1080							; segments.
    532 U1080
    533  8400 ????				      SEG
------- FILE c:\Users\roger\OneDrive\Documents\Atari\BrawdyBAS\brawdy.bas.asm
------- FILE DPCplusbB.h LEVEL 2 PASS 3
      0  8400 ????				      include	"DPCplusbB.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3 U00f5 ????				      SEG.U	vars
      4 U0080					      org	$80
      5 U0080		       00	   player0x   ds	1
      6 U0081		       00	   topP1x     ds	1
      7 U0082		       00	   missile0x  ds	1
      8 U0083		       00	   missile1x  ds	1
      9 U0084		       00	   ballx      ds	1
     10 U0085
     11 U0085		       00 00 00 00*SpriteGfxIndex ds	9
     12 U008e
     13 U008e		       00	   spritedisplay ds	1
     14 U008f
     15 U008f		       00	   player0xcoll ds	1	; to detect p0x colls
     16 U0090		       00	   NewSpriteX ds	1	;		X position
     17 U0090		       00 90	   player1x   =	NewSpriteX
     18 U0091		       00	   player2x   ds	1
     19 U0092		       00	   player3x   ds	1
     20 U0093		       00	   player4x   ds	1
     21 U0094		       00	   player5x   ds	1
     22 U0095		       00	   player6x   ds	1
     23 U0096		       00	   player7x   ds	1
     24 U0097		       00	   player8x   ds	1
     25 U0098		       00	   player9x   ds	1
     26 U0099
     27 U0099		       00	   player0y   ds	1
     28 U009a		       00	   NewSpriteY ds	1	;		Y position
     29 U009a		       00 9a	   player1y   =	NewSpriteY
     30 U009b		       00	   player2y   ds	1
     31 U009c		       00	   player3y   ds	1
     32 U009d		       00	   player4y   ds	1
     33 U009e		       00	   player5y   ds	1
     34 U009f		       00	   player6y   ds	1
     35 U00a0		       00	   player7y   ds	1
     36 U00a1		       00	   player8y   ds	1
     37 U00a2		       00	   player9y   ds	1
     38 U00a3
     39 U00a3		       00 00	   player0color ds	2
     40 U00a5
     41 U00a5		       00	   player0height ds	1
     42 U00a6		       00	   player1height ds	1
     43 U00a7		       00	   player2height ds	1
     44 U00a8		       00	   player3height ds	1
     45 U00a9		       00	   player4height ds	1
     46 U00aa		       00	   player5height ds	1
     47 U00ab		       00	   player6height ds	1
     48 U00ac		       00	   player7height ds	1
     49 U00ad		       00	   player8height ds	1
     50 U00ae		       00	   player9height ds	1
     51 U00af
     52 U00af		       00	   _NUSIZ1    ds	1
     53 U00b0		       00	   NUSIZ2     ds	1
     54 U00b1		       00	   NUSIZ3     ds	1
     55 U00b2		       00	   NUSIZ4     ds	1
     56 U00b3		       00	   NUSIZ5     ds	1
     57 U00b4		       00	   NUSIZ6     ds	1
     58 U00b5		       00	   NUSIZ7     ds	1
     59 U00b6		       00	   NUSIZ8     ds	1
     60 U00b7		       00	   NUSIZ9     ds	1
     61 U00b8
     62 U00b8		       00 00 00    score      ds	3
     63 U00bb		       00	   COLUM0     ds	1
     64 U00bc		       00	   COLUM1     ds	1
     65 U00bd		       00	   player0pointerlo ds	1
     66 U00be		       00	   player0pointerhi ds	1
     67 U00bf
     68 U00bf		       00 85	   RAMcopybegin =	SpriteGfxIndex
     69 U00bf		       00 3a	   RAMcopylength =	*-RAMcopybegin
     70 U00bf
     71 U00bf		       00	   missile0y  ds	1
     72 U00c0		       00	   missile1y  ds	1
     73 U00c1		       00	   bally      ds	1
     74 U00c2
     75 U00c2		       00	   missile0height ds	1
     76 U00c3		       00	   missile1height ds	1
     77 U00c4		       00	   ballheight ds	1
     78 U00c5
     79 U00c5		       00	   statusbarlength ds	1	; needed?
     80 U00c5		       00 c5	   aux3       =	statusbarlength
     81 U00c6
     82 U00c6		       00	   lifecolor  ds	1
     83 U00c6		       00 c6	   pfscorecolor =	lifecolor
     84 U00c7		       00	   aux4       ds	1
     85 U00c8
     86 U00c8		       00	   lifepointer ds	1
     87 U00c9		       00	   lives      ds	1
     88 U00c9		       00 c8	   pfscore1   =	lifepointer
     89 U00c9		       00 c9	   pfscore2   =	lives
     90 U00c9		       00 c8	   aux5       =	pfscore1
     91 U00c9		       00 c9	   aux6       =	pfscore2
     92 U00ca
     93 U00ca		       00	   playfieldpos ds	1
     94 U00cb
     95 U00cb		       00	   temp1      ds	1	; used in sprite flickering
     96 U00cc		       00	   temp2      ds	1	;are obliterated when drawscreen is called.
     97 U00cd		       00	   temp3      ds	1
     98 U00ce		       00	   temp4      ds	1
     99 U00cf		       00	   temp5      ds	1
    100 U00d0		       00	   temp6      ds	1
    101 U00d0		       00 81	   temp7      =	topP1x	; This is used to aid in bankswitching
    102 U00d1
    103 U00d1		       00	   A	      ds	1
    104 U00d1		       00 d1	   a	      =	A
    105 U00d2		       00	   B	      ds	1
    106 U00d2		       00 d2	   b	      =	B
    107 U00d3		       00	   C	      ds	1
    108 U00d3		       00 d3	   c	      =	C
    109 U00d4		       00	   D	      ds	1
    110 U00d4		       00 d4	   d	      =	D
    111 U00d5		       00	   E	      ds	1
    112 U00d5		       00 d5	   e	      =	E
    113 U00d6		       00	   F	      ds	1
    114 U00d6		       00 d6	   f	      =	F
    115 U00d7		       00	   G	      ds	1
    116 U00d7		       00 d7	   g	      =	G
    117 U00d8		       00	   H	      ds	1
    118 U00d8		       00 d8	   h	      =	H
    119 U00d9		       00	   I	      ds	1
    120 U00d9		       00 d9	   i	      =	I
    121 U00da		       00	   J	      ds	1
    122 U00da		       00 da	   j	      =	J
    123 U00db		       00	   K	      ds	1
    124 U00db		       00 db	   k	      =	K
    125 U00dc		       00	   L	      ds	1
    126 U00dc		       00 dc	   l	      =	L
    127 U00dd		       00	   M	      ds	1
    128 U00dd		       00 dd	   m	      =	M
    129 U00de		       00	   N	      ds	1
    130 U00de		       00 de	   n	      =	N
    131 U00df		       00	   O	      ds	1
    132 U00df		       00 df	   o	      =	O
    133 U00e0		       00	   P	      ds	1
    134 U00e0		       00 e0	   p	      =	P
    135 U00e1		       00	   Q	      ds	1
    136 U00e1		       00 e1	   q	      =	Q
    137 U00e2		       00	   R	      ds	1
    138 U00e2		       00 e2	   r	      =	R
    139 U00e3		       00	   S	      ds	1
    140 U00e3		       00 e3	   s	      =	S
    141 U00e4		       00	   T	      ds	1
    142 U00e4		       00 e4	   t	      =	T
    143 U00e5		       00	   U	      ds	1
    144 U00e5		       00 e5	   u	      =	U
    145 U00e6		       00	   V	      ds	1
    146 U00e6		       00 e6	   v	      =	V
    147 U00e7		       00	   W	      ds	1
    148 U00e7		       00 e7	   w	      =	W
    149 U00e8		       00	   X	      ds	1
    150 U00e8		       00 e8	   x	      =	X
    151 U00e9		       00	   Y	      ds	1
    152 U00e9		       00 e9	   y	      =	Y
    153 U00ea		       00	   Z	      ds	1
    154 U00ea		       00 ea	   z	      =	Z
    155 U00eb		       00	   scorecolor ds	1
    156 U00ec
    157 U00ec		       00	   var0       ds	1
    158 U00ed		       00	   var1       ds	1
    159 U00ee		       00	   var2       ds	1
    160 U00ef		       00	   var3       ds	1
    161 U00f0		       00	   var4       ds	1
    162 U00f1		       00	   var5       ds	1
    163 U00f2		       00	   var6       ds	1
    164 U00f3		       00	   var7       ds	1
    165 U00f4		       00	   var8       ds	1
    166 U00f5
 free ram: 0
    167 U00f5					      echo	"free ram:",($f5-*)d
    168 U00f5
    169 U00f5		       00 f6	   stack1     =	$f6
    170 U00f5		       00 f7	   stack2     =	$f7
    171 U00f5		       00 f8	   stack3     =	$f8
    172 U00f5		       00 f9	   stack4     =	$f9
    173 U00f5							; the stack bytes above may be used in the kernel
    174 U00f5							; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    175 U00f5
    176 U00f5					      MAC	return
    177 U00f5					      ifnconst	bankswitch
    178 U00f5					      rts
    179 U00f5					      else
    180 U00f5					      jmp	BS_return
    181 U00f5					      endif
    182 U00f5					      ENDM		; auto-return from either a regular or bankswitched module
    183  8400 ????				      seg
    184  8400 ????	       10 00	   rand       =	RANDOM0NEXT
    185  8400 ????	       00 d3	   KERNEL_LINES =	178*76/64	; warning: not all values will work
    186  8400 ????	       00 a7	   OVERSCAN_LINES =	128+33*76/64	; again, not all values work
    187  8400 ????	       d1 a4	   C_function =	FETCHER_BEGIN
    188  8400 ????	       d1 a8	   CcodeData  =	C_function + 4
    189  8400 ????	       d1 e2	   playerpointers =	CcodeData + RAMcopylength
    190  8400 ????	       d2 08	   P1GFX      =	playerpointers + 38
    191  8400 ????	       d3 08	   P1COLOR    =	P1GFX + 256
    192  8400 ????	       d4 08	   P0GFX      =	P1COLOR + 256
    193  8400 ????	       d5 08	   P0COLOR    =	P0GFX + 256
    194  8400 ????	       d6 08	   PF1L       =	P0COLOR + 256
    195  8400 ????	       d7 08	   PF2L       =	PF1L + 256
    196  8400 ????	       d8 08	   PF1R       =	PF2L + 256
    197  8400 ????	       d9 08	   PF2R       =	PF1R + 256
    198  8400 ????	       da 08	   PFCOLS     =	PF2R + 256
    199  8400 ????	       db 08	   JUMPTABLELO =	PFCOLS + 256
    200  8400 ????	       db 14	   JUMPTABLEHI =	JUMPTABLELO + 12
    201  8400 ????	       db 20	   P1HMP      =	JUMPTABLEHI + 12
    202  8400 ????	       db 2d	   P1SKIP     =	P1HMP + 13
    203  8400 ????	       db 39	   NUSIZREFP  =	P1SKIP + 12
    204  8400 ????	       db 45	   scoredata  =	NUSIZREFP + 12
    205  8400 ????	       db a5	   BKCOLS     =	scoredata + 96
    206  8400 ????	       dc a5	   STACKbegin =	BKCOLS + 256
    207  8400 ????	       dd a5	   USERSTACK  =	STACKbegin + 256	; stack starts here and goes down!!!!
 DPC free RAM= 603
    208  8400 ????				      echo	"DPC free RAM=",($1000-(USERSTACK&$0FFF))d
------- FILE c:\Users\roger\OneDrive\Documents\Atari\BrawdyBAS\brawdy.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  8400 ????				      include	"2600basic_variable_redefs.h"
      1  8400 ????						; This file contains variable mapping and other information for the current project.
      2  8400 ????
      3  8400 ????	       00 f0	   PlayerMissileRate =	var4
      4  8400 ????
      5  8400 ????	       00 ef	   EnemyMissilerate =	var3
      6  8400 ????
      7  8400 ????	       00 ee	   Powerup    =	var2
      8  8400 ????
      9  8400 ????	       00 ed	   Damage     =	var1
     10  8400 ????
     11  8400 ????	       00 d5	   PlayerHealth =	e
     12  8400 ????
     13  8400 ????	       00 e6	   swdebounce =	v
     14  8400 ????
     15  8400 ????	       00 e5	   gamenumber =	u
     16  8400 ????
     17  8400 ????	       00 dd	   PlayerDamage =	m
     18  8400 ????
     19  8400 ????	       00 ea	   Bit0_NewLevel =	z
     20  8400 ????
     21  8400 ????	       00 ea	   Bit5_hit   =	z
     22  8400 ????
     23  8400 ????	       00 e9	   Ch0_Counter =	y
     24  8400 ????
     25  8400 ????	       00 e8	   Ch0_Duration =	x
     26  8400 ????
     27  8400 ????	       00 e7	   Ch0_Sound  =	w
     28  8400 ????
     29  8400 ????	       00 e6	   V0	      =	v
     30  8400 ????
     31  8400 ????	       00 e0	   Ch1_Counter =	p
     32  8400 ????
     33  8400 ????	       00 db	   Ch1_Duration =	k
     34  8400 ????
     35  8400 ????	       00 da	   Ch1_Sound  =	j
     36  8400 ????
     37  8400 ????	       00 d8	   V1	      =	h
     38  8400 ????
     39  8400 ????	       00 ea	   Bit7_PLayer3Moving =	z
     40  8400 ????
     41  8400 ????	       00 ea	   Bit6_PLayer3Direction =	z
     42  8400 ????
     43  8400 ????	       00 ea	   Bit4_gameover =	z
     44  8400 ????
     45  8400 ????	       00 e4	   Timer      =	t
     46  8400 ????
     47  8400 ????	       00 e1	   Househit   =	q
     48  8400 ????
     49  8400 ????	       00 ea	   Bit3_ShootorNot =	z
     50  8400 ????
     51  8400 ????	       00 df	   delay      =	o
     52  8400 ????
     53  8400 ????	       00 de	   HealthDrop =	n
     54  8400 ????
     55  8400 ????	       00 ea	   Bit1_missleOn =	z
     56  8400 ????
     57  8400 ????	       00 dc	   level      =	l
     58  8400 ????
     59  8400 ????	       00 ea	   Bit2_EnemyMove =	z
     60  8400 ????
     61  8400 ????	       00 d6	   frame      =	f
     62  8400 ????
     63  8400 ????	       00 d4	   Points     =	d
     64  8400 ????
     65  8400 ????	       00 d3	   EnemySpeed =	c
     66  8400 ????
     67  8400 ????	       00 d2	   Moverate   =	b
     68  8400 ????
     69  8400 ????	       00 d1	   drop       =	a
     70  8400 ????
     71  8400 ????	       00 d9	   EnemyHit   =	i
     72  8400 ????
     73  8400 ????	       00 01	   pfscore    =	1
     74  8400 ????
     75  8400 ????	       00 47	   LEdge      =	71
     76  8400 ????
     77  8400 ????	       00 4f	   REdge      =	79
     78  8400 ????
     79  8400 ????	       00 96	   _P_Edge_Right =	150
     80  8400 ????
     81  8400 ????	       00 00	   _P_Edge_Left =	0
     82  8400 ????
     83  8400 ????	       00 a0	   _P_Edge_Bottom =	160
     84  8400 ????
     85  8400 ????	       00 09	   _P_Edge_Top =	9
     86  8400 ????
     87  8400 ????	       00 20	   bscode_length =	32
     88  8400 ????	       00 fe	   _FE	      =	$FE
     89  8400 ????
     90  8400 ????	       00 fc	   _FC	      =	$FC
     91  8400 ????
     92  8400 ????	       00 fa	   _FA	      =	$FA
     93  8400 ????
     94  8400 ????	       00 f8	   _F8	      =	$F8
     95  8400 ????
     96  8400 ????	       00 f6	   _F6	      =	$F6
     97  8400 ????
     98  8400 ????	       00 f4	   _F4	      =	$F4
     99  8400 ????
    100  8400 ????	       00 f2	   _F2	      =	$F2
    101  8400 ????
    102  8400 ????	       00 f0	   _F0	      =	$F0
    103  8400 ????
    104  8400 ????	       00 ee	   _EE	      =	$EE
    105  8400 ????
    106  8400 ????	       00 ec	   _EC	      =	$EC
    107  8400 ????
    108  8400 ????	       00 ea	   _EA	      =	$EA
    109  8400 ????
    110  8400 ????	       00 e8	   _E8	      =	$E8
    111  8400 ????
    112  8400 ????	       00 e6	   _E6	      =	$E6
    113  8400 ????
    114  8400 ????	       00 e4	   _E4	      =	$E4
    115  8400 ????
    116  8400 ????	       00 e2	   _E2	      =	$E2
    117  8400 ????
    118  8400 ????	       00 e0	   _E0	      =	$E0
    119  8400 ????
    120  8400 ????	       00 de	   _DE	      =	$DE
    121  8400 ????
    122  8400 ????	       00 dc	   _DC	      =	$DC
    123  8400 ????
    124  8400 ????	       00 da	   _DA	      =	$DA
    125  8400 ????
    126  8400 ????	       00 d8	   _D8	      =	$D8
    127  8400 ????
    128  8400 ????	       00 d6	   _D6	      =	$D6
    129  8400 ????
    130  8400 ????	       00 d4	   _D4	      =	$D4
    131  8400 ????
    132  8400 ????	       00 d2	   _D2	      =	$D2
    133  8400 ????
    134  8400 ????	       00 d0	   _D0	      =	$D0
    135  8400 ????
    136  8400 ????	       00 ce	   _CE	      =	$CE
    137  8400 ????
    138  8400 ????	       00 cc	   _CC	      =	$CC
    139  8400 ????
    140  8400 ????	       00 ca	   _CA	      =	$CA
    141  8400 ????
    142  8400 ????	       00 c8	   _C8	      =	$C8
    143  8400 ????
    144  8400 ????	       00 c6	   _C6	      =	$C6
    145  8400 ????
    146  8400 ????	       00 c4	   _C4	      =	$C4
    147  8400 ????
    148  8400 ????	       00 c2	   _C2	      =	$C2
    149  8400 ????
    150  8400 ????	       00 c0	   _C0	      =	$C0
    151  8400 ????
    152  8400 ????	       00 be	   _BE	      =	$BE
    153  8400 ????
    154  8400 ????	       00 bc	   _BC	      =	$BC
    155  8400 ????
    156  8400 ????	       00 ba	   _BA	      =	$BA
    157  8400 ????
    158  8400 ????	       00 b8	   _B8	      =	$B8
    159  8400 ????
    160  8400 ????	       00 b6	   _B6	      =	$B6
    161  8400 ????
    162  8400 ????	       00 b4	   _B4	      =	$B4
    163  8400 ????
    164  8400 ????	       00 b2	   _B2	      =	$B2
    165  8400 ????
    166  8400 ????	       00 b0	   _B0	      =	$B0
    167  8400 ????
    168  8400 ????	       00 ae	   _AE	      =	$AE
    169  8400 ????
    170  8400 ????	       00 ac	   _AC	      =	$AC
    171  8400 ????
    172  8400 ????	       00 aa	   _AA	      =	$AA
    173  8400 ????
    174  8400 ????	       00 a8	   _A8	      =	$A8
    175  8400 ????
    176  8400 ????	       00 a6	   _A6	      =	$A6
    177  8400 ????
    178  8400 ????	       00 a4	   _A4	      =	$A4
    179  8400 ????
    180  8400 ????	       00 a2	   _A2	      =	$A2
    181  8400 ????
    182  8400 ????	       00 a0	   _A0	      =	$A0
    183  8400 ????
    184  8400 ????	       00 9e	   _9E	      =	$9E
    185  8400 ????
    186  8400 ????	       00 9c	   _9C	      =	$9C
    187  8400 ????
    188  8400 ????	       00 9a	   _9A	      =	$9A
    189  8400 ????
    190  8400 ????	       00 98	   _98	      =	$98
    191  8400 ????
    192  8400 ????	       00 96	   _96	      =	$96
    193  8400 ????
    194  8400 ????	       00 94	   _94	      =	$94
    195  8400 ????
    196  8400 ????	       00 92	   _92	      =	$92
    197  8400 ????
    198  8400 ????	       00 90	   _90	      =	$90
    199  8400 ????
    200  8400 ????	       00 8e	   _8E	      =	$8E
    201  8400 ????
    202  8400 ????	       00 8c	   _8C	      =	$8C
    203  8400 ????
    204  8400 ????	       00 8a	   _8A	      =	$8A
    205  8400 ????
    206  8400 ????	       00 88	   _88	      =	$88
    207  8400 ????
    208  8400 ????	       00 86	   _86	      =	$86
    209  8400 ????
    210  8400 ????	       00 84	   _84	      =	$84
    211  8400 ????
    212  8400 ????	       00 82	   _82	      =	$82
    213  8400 ????
    214  8400 ????	       00 80	   _80	      =	$80
    215  8400 ????
    216  8400 ????	       00 7e	   _7E	      =	$7E
    217  8400 ????
    218  8400 ????	       00 7c	   _7C	      =	$7C
    219  8400 ????
    220  8400 ????	       00 7a	   _7A	      =	$7A
    221  8400 ????
    222  8400 ????	       00 78	   _78	      =	$78
    223  8400 ????
    224  8400 ????	       00 76	   _76	      =	$76
    225  8400 ????
    226  8400 ????	       00 74	   _74	      =	$74
    227  8400 ????
    228  8400 ????	       00 72	   _72	      =	$72
    229  8400 ????
    230  8400 ????	       00 70	   _70	      =	$70
    231  8400 ????
    232  8400 ????	       00 6e	   _6E	      =	$6E
    233  8400 ????
    234  8400 ????	       00 6c	   _6C	      =	$6C
    235  8400 ????
    236  8400 ????	       00 6a	   _6A	      =	$6A
    237  8400 ????
    238  8400 ????	       00 68	   _68	      =	$68
    239  8400 ????
    240  8400 ????	       00 66	   _66	      =	$66
    241  8400 ????
    242  8400 ????	       00 64	   _64	      =	$64
    243  8400 ????
    244  8400 ????	       00 62	   _62	      =	$62
    245  8400 ????
    246  8400 ????	       00 60	   _60	      =	$60
    247  8400 ????
    248  8400 ????	       00 5e	   _5E	      =	$5E
    249  8400 ????
    250  8400 ????	       00 5c	   _5C	      =	$5C
    251  8400 ????
    252  8400 ????	       00 5a	   _5A	      =	$5A
    253  8400 ????
    254  8400 ????	       00 58	   _58	      =	$58
    255  8400 ????
    256  8400 ????	       00 56	   _56	      =	$56
    257  8400 ????
    258  8400 ????	       00 54	   _54	      =	$54
    259  8400 ????
    260  8400 ????	       00 52	   _52	      =	$52
    261  8400 ????
    262  8400 ????	       00 50	   _50	      =	$50
    263  8400 ????
    264  8400 ????	       00 4e	   _4E	      =	$4E
    265  8400 ????
    266  8400 ????	       00 4c	   _4C	      =	$4C
    267  8400 ????
    268  8400 ????	       00 4a	   _4A	      =	$4A
    269  8400 ????
    270  8400 ????	       00 48	   _48	      =	$48
    271  8400 ????
    272  8400 ????	       00 46	   _46	      =	$46
    273  8400 ????
    274  8400 ????	       00 44	   _44	      =	$44
    275  8400 ????
    276  8400 ????	       00 42	   _42	      =	$42
    277  8400 ????
    278  8400 ????	       00 40	   _40	      =	$40
    279  8400 ????
    280  8400 ????	       00 3e	   _3E	      =	$3E
    281  8400 ????
    282  8400 ????	       00 3c	   _3C	      =	$3C
    283  8400 ????
    284  8400 ????	       00 3a	   _3A	      =	$3A
    285  8400 ????
    286  8400 ????	       00 38	   _38	      =	$38
    287  8400 ????
    288  8400 ????	       00 36	   _36	      =	$36
    289  8400 ????
    290  8400 ????	       00 34	   _34	      =	$34
    291  8400 ????
    292  8400 ????	       00 32	   _32	      =	$32
    293  8400 ????
    294  8400 ????	       00 30	   _30	      =	$30
    295  8400 ????
    296  8400 ????	       00 2e	   _2E	      =	$2E
    297  8400 ????
    298  8400 ????	       00 2c	   _2C	      =	$2C
    299  8400 ????
    300  8400 ????	       00 2a	   _2A	      =	$2A
    301  8400 ????
    302  8400 ????	       00 28	   _28	      =	$28
    303  8400 ????
    304  8400 ????	       00 26	   _26	      =	$26
    305  8400 ????
    306  8400 ????	       00 24	   _24	      =	$24
    307  8400 ????
    308  8400 ????	       00 22	   _22	      =	$22
    309  8400 ????
    310  8400 ????	       00 20	   _20	      =	$20
    311  8400 ????
    312  8400 ????	       00 1e	   _1E	      =	$1E
    313  8400 ????
    314  8400 ????	       00 1c	   _1C	      =	$1C
    315  8400 ????
    316  8400 ????	       00 1a	   _1A	      =	$1A
    317  8400 ????
    318  8400 ????	       00 18	   _18	      =	$18
    319  8400 ????
    320  8400 ????	       00 16	   _16	      =	$16
    321  8400 ????
    322  8400 ????	       00 14	   _14	      =	$14
    323  8400 ????
    324  8400 ????	       00 12	   _12	      =	$12
    325  8400 ????
    326  8400 ????	       00 10	   _10	      =	$10
    327  8400 ????
    328  8400 ????	       00 0e	   _0E	      =	$0E
    329  8400 ????
    330  8400 ????	       00 0c	   _0C	      =	$0C
    331  8400 ????
    332  8400 ????	       00 0a	   _0A	      =	$0A
    333  8400 ????
    334  8400 ????	       00 08	   _08	      =	$08
    335  8400 ????
    336  8400 ????	       00 06	   _06	      =	$06
    337  8400 ????
    338  8400 ????	       00 04	   _04	      =	$04
    339  8400 ????
    340  8400 ????	       00 02	   _02	      =	$02
    341  8400 ????
    342  8400 ????	       00 00	   _00	      =	$00
    343  8400 ????
    344  8400 ????	       00 05	   font       =	retroputer
    345  8400 ????
    346  8400 ????	       00 2b	   vblank_time =	43
    347  8400 ????	       00 25	   overscan_time =	37
    348  8400 ????	       00 07	   bs_mask    =	7
    349  8400 ????	       00 1c	   bankswitch =	28
    350  8400 ????	       1f f6	   bankswitch_hotspot =	$1FF6
    351  8400 ????	       00 02	   multisprite =	2
------- FILE c:\Users\roger\OneDrive\Documents\Atari\BrawdyBAS\brawdy.bas.asm
      9  0400					      ORG	$400
     10  0400					      RORG	$0
     11  0400					      incbin	DPCplus.arm
     12  1000					      ORG	$1000
     13  1000					      RORG	$1000
     14  1000					      incbin	custom/bin/custom2.bin
     15  1894							; assume custom2.bin > 128 bytes
     16  1894							; repeat $80
     17  1894							; .byte 0
     18  1894							; repend
     19  1894							; Provided under the CC0 license. See the included LICENSE.txt for details.
     20  1894
     21  1894							; feel free to modify the score graphics - just keep each digit 8 high
     22  1894							; and keep the conditional compilation stuff intact
     23  1894				  -	      ifconst	ROM2k
     24  1894				  -	      ORG	$F7AC-8
     25  1894					      else
     26  1894					      ifconst	bankswitch
     27  1894				  -	      if	bankswitch == 8
     28  1894				  -	      ORG	$2F94-bscode_length
     29  1894				  -	      RORG	$FF94-bscode_length
     30  1894					      endif
     31  1894				  -	      if	bankswitch == 16
     32  1894				  -	      ORG	$4F94-bscode_length
     33  1894				  -	      RORG	$FF94-bscode_length
     34  1894					      endif
     35  1894				  -	      if	bankswitch == 32
     36  1894				  -	      ORG	$8F94-bscode_length
     37  1894				  -	      RORG	$FF94-bscode_length
     38  1894					      endif
     39  1894				  -	      if	bankswitch == 64
     40  1894				  -	      ORG	$10F80-bscode_length
     41  1894				  -	      RORG	$1FF80-bscode_length
     42  1894					      endif
     43  1894				  -	      else
     44  1894				  -	      ORG	$FF9C
     45  1894					      endif
     46  1894					      endif
     47  1894
     48  1894							; font equates
     49  1894		       00 01	   .21stcentury =	1
     50  1894		       00 02	   alarmclock =	2
     51  1894		       00 03	   handwritten =	3
     52  1894		       00 04	   interrupted =	4
     53  1894		       00 05	   retroputer =	5
     54  1894		       00 06	   whimsey    =	6
     55  1894		       00 07	   tiny       =	7
     56  1894		       00 08	   hex	      =	8
     57  1894
     58  1894					      ifconst	font
     59  1894				  -	      if	font == hex
     60  1894				  -	      ORG	. - 48
     61  1894					      endif
     62  1894					      endif
     63  1894
     64  1894				   scoretable
     65  1894
     66  1894					      ifconst	font
     67  1894				  -	      if	font == .21stcentury
     68  1894				  -	      include	"score_graphics.asm.21stcentury"
     69  1894					      endif
     70  1894				  -	      if	font == alarmclock
     71  1894				  -	      include	"score_graphics.asm.alarmclock"
     72  1894					      endif
     73  1894				  -	      if	font == handwritten
     74  1894				  -	      include	"score_graphics.asm.handwritten"
     75  1894					      endif
     76  1894				  -	      if	font == interrupted
     77  1894				  -	      include	"score_graphics.asm.interrupted"
     78  1894					      endif
     79  1894					      if	font == retroputer
------- FILE score_graphics.asm.retroputer LEVEL 2 PASS 3
      0  1894					      include	"score_graphics.asm.retroputer"
      1  1894							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  1894
      3  1894		       7e		      .byte.b	%01111110
      4  1895		       46		      .byte.b	%01000110
      5  1896		       46		      .byte.b	%01000110
      6  1897		       46		      .byte.b	%01000110
      7  1898		       62		      .byte.b	%01100010
      8  1899		       62		      .byte.b	%01100010
      9  189a		       62		      .byte.b	%01100010
     10  189b		       7e		      .byte.b	%01111110
     11  189c
     12  189c		       38		      .byte.b	%00111000
     13  189d		       38		      .byte.b	%00111000
     14  189e		       38		      .byte.b	%00111000
     15  189f		       38		      .byte.b	%00111000
     16  18a0		       18		      .byte.b	%00011000
     17  18a1		       18		      .byte.b	%00011000
     18  18a2		       18		      .byte.b	%00011000
     19  18a3		       18		      .byte.b	%00011000
     20  18a4
     21  18a4		       7e		      .byte.b	%01111110
     22  18a5		       60		      .byte.b	%01100000
     23  18a6		       60		      .byte.b	%01100000
     24  18a7		       60		      .byte.b	%01100000
     25  18a8		       3e		      .byte.b	%00111110
     26  18a9		       02		      .byte.b	%00000010
     27  18aa		       42		      .byte.b	%01000010
     28  18ab		       7e		      .byte.b	%01111110
     29  18ac
     30  18ac		       7e		      .byte.b	%01111110
     31  18ad		       46		      .byte.b	%01000110
     32  18ae		       06		      .byte.b	%00000110
     33  18af		       06		      .byte.b	%00000110
     34  18b0		       3e		      .byte.b	%00111110
     35  18b1		       02		      .byte.b	%00000010
     36  18b2		       42		      .byte.b	%01000010
     37  18b3		       7e		      .byte.b	%01111110
     38  18b4
     39  18b4		       0c		      .byte.b	%00001100
     40  18b5		       0c		      .byte.b	%00001100
     41  18b6		       0c		      .byte.b	%00001100
     42  18b7		       7e		      .byte.b	%01111110
     43  18b8		       44		      .byte.b	%01000100
     44  18b9		       44		      .byte.b	%01000100
     45  18ba		       44		      .byte.b	%01000100
     46  18bb		       04		      .byte.b	%00000100
     47  18bc
     48  18bc		       7e		      .byte.b	%01111110
     49  18bd		       46		      .byte.b	%01000110
     50  18be		       06		      .byte.b	%00000110
     51  18bf		       06		      .byte.b	%00000110
     52  18c0		       7c		      .byte.b	%01111100
     53  18c1		       40		      .byte.b	%01000000
     54  18c2		       40		      .byte.b	%01000000
     55  18c3		       7e		      .byte.b	%01111110
     56  18c4
     57  18c4		       7e		      .byte.b	%01111110
     58  18c5		       46		      .byte.b	%01000110
     59  18c6		       46		      .byte.b	%01000110
     60  18c7		       46		      .byte.b	%01000110
     61  18c8		       7c		      .byte.b	%01111100
     62  18c9		       40		      .byte.b	%01000000
     63  18ca		       42		      .byte.b	%01000010
     64  18cb		       7e		      .byte.b	%01111110
     65  18cc
     66  18cc		       0c		      .byte.b	%00001100
     67  18cd		       0c		      .byte.b	%00001100
     68  18ce		       0c		      .byte.b	%00001100
     69  18cf		       0c		      .byte.b	%00001100
     70  18d0		       04		      .byte.b	%00000100
     71  18d1		       02		      .byte.b	%00000010
     72  18d2		       42		      .byte.b	%01000010
     73  18d3		       7e		      .byte.b	%01111110
     74  18d4
     75  18d4		       7e		      .byte.b	%01111110
     76  18d5		       46		      .byte.b	%01000110
     77  18d6		       46		      .byte.b	%01000110
     78  18d7		       46		      .byte.b	%01000110
     79  18d8		       7e		      .byte.b	%01111110
     80  18d9		       42		      .byte.b	%01000010
     81  18da		       42		      .byte.b	%01000010
     82  18db		       7e		      .byte.b	%01111110
     83  18dc
     84  18dc		       06		      .byte.b	%00000110
     85  18dd		       06		      .byte.b	%00000110
     86  18de		       06		      .byte.b	%00000110
     87  18df		       02		      .byte.b	%00000010
     88  18e0		       7e		      .byte.b	%01111110
     89  18e1		       42		      .byte.b	%01000010
     90  18e2		       42		      .byte.b	%01000010
     91  18e3		       7e		      .byte.b	%01111110
     92  18e4
     93  18e4				  -	      ifnconst	DPC_kernel_options
     94  18e4				  -
     95  18e4				  -	      .byte	%00000000
     96  18e4				  -	      .byte	%00000000
     97  18e4				  -	      .byte	%00000000
     98  18e4				  -	      .byte	%00000000
     99  18e4				  -	      .byte	%00000000
    100  18e4				  -	      .byte	%00000000
    101  18e4				  -	      .byte	%00000000
    102  18e4				  -	      .byte	%00000000
    103  18e4				  -
    104  18e4					      endif
------- FILE c:\Users\roger\OneDrive\Documents\Atari\BrawdyBAS\brawdy.bas.asm
     81  18e4					      endif
     82  18e4				  -	      if	font == whimsey
     83  18e4				  -	      include	"score_graphics.asm.whimsey"
     84  18e4					      endif
     85  18e4				  -	      if	font == tiny
     86  18e4				  -	      include	"score_graphics.asm.tiny"
     87  18e4					      endif
     88  18e4				  -	      if	font == hex
     89  18e4				  -	      include	"score_graphics.asm.hex"
     90  18e4					      endif
     91  18e4				  -	      else		; default font
     92  18e4				  -
     93  18e4				  -	      .byte	%00111100
     94  18e4				  -	      .byte	%01100110
     95  18e4				  -	      .byte	%01100110
     96  18e4				  -	      .byte	%01100110
     97  18e4				  -	      .byte	%01100110
     98  18e4				  -	      .byte	%01100110
     99  18e4				  -	      .byte	%01100110
    100  18e4				  -	      .byte	%00111100
    101  18e4				  -
    102  18e4				  -	      .byte	%01111110
    103  18e4				  -	      .byte	%00011000
    104  18e4				  -	      .byte	%00011000
    105  18e4				  -	      .byte	%00011000
    106  18e4				  -	      .byte	%00011000
    107  18e4				  -	      .byte	%00111000
    108  18e4				  -	      .byte	%00011000
    109  18e4				  -	      .byte	%00001000
    110  18e4				  -
    111  18e4				  -	      .byte	%01111110
    112  18e4				  -	      .byte	%01100000
    113  18e4				  -	      .byte	%01100000
    114  18e4				  -	      .byte	%00111100
    115  18e4				  -	      .byte	%00000110
    116  18e4				  -	      .byte	%00000110
    117  18e4				  -	      .byte	%01000110
    118  18e4				  -	      .byte	%00111100
    119  18e4				  -
    120  18e4				  -	      .byte	%00111100
    121  18e4				  -	      .byte	%01000110
    122  18e4				  -	      .byte	%00000110
    123  18e4				  -	      .byte	%00000110
    124  18e4				  -	      .byte	%00011100
    125  18e4				  -	      .byte	%00000110
    126  18e4				  -	      .byte	%01000110
    127  18e4				  -	      .byte	%00111100
    128  18e4				  -
    129  18e4				  -	      .byte	%00001100
    130  18e4				  -	      .byte	%00001100
    131  18e4				  -	      .byte	%01111110
    132  18e4				  -	      .byte	%01001100
    133  18e4				  -	      .byte	%01001100
    134  18e4				  -	      .byte	%00101100
    135  18e4				  -	      .byte	%00011100
    136  18e4				  -	      .byte	%00001100
    137  18e4				  -
    138  18e4				  -	      .byte	%00111100
    139  18e4				  -	      .byte	%01000110
    140  18e4				  -	      .byte	%00000110
    141  18e4				  -	      .byte	%00000110
    142  18e4				  -	      .byte	%00111100
    143  18e4				  -	      .byte	%01100000
    144  18e4				  -	      .byte	%01100000
    145  18e4				  -	      .byte	%01111110
    146  18e4				  -
    147  18e4				  -	      .byte	%00111100
    148  18e4				  -	      .byte	%01100110
    149  18e4				  -	      .byte	%01100110
    150  18e4				  -	      .byte	%01100110
    151  18e4				  -	      .byte	%01111100
    152  18e4				  -	      .byte	%01100000
    153  18e4				  -	      .byte	%01100010
    154  18e4				  -	      .byte	%00111100
    155  18e4				  -
    156  18e4				  -	      .byte	%00110000
    157  18e4				  -	      .byte	%00110000
    158  18e4				  -	      .byte	%00110000
    159  18e4				  -	      .byte	%00011000
    160  18e4				  -	      .byte	%00001100
    161  18e4				  -	      .byte	%00000110
    162  18e4				  -	      .byte	%01000010
    163  18e4				  -	      .byte	%00111110
    164  18e4				  -
    165  18e4				  -	      .byte	%00111100
    166  18e4				  -	      .byte	%01100110
    167  18e4				  -	      .byte	%01100110
    168  18e4				  -	      .byte	%01100110
    169  18e4				  -	      .byte	%00111100
    170  18e4				  -	      .byte	%01100110
    171  18e4				  -	      .byte	%01100110
    172  18e4				  -	      .byte	%00111100
    173  18e4				  -
    174  18e4				  -	      .byte	%00111100
    175  18e4				  -	      .byte	%01000110
    176  18e4				  -	      .byte	%00000110
    177  18e4				  -	      .byte	%00111110
    178  18e4				  -	      .byte	%01100110
    179  18e4				  -	      .byte	%01100110
    180  18e4				  -	      .byte	%01100110
    181  18e4				  -	      .byte	%00111100
    182  18e4				  -
    183  18e4				  -	      ifnconst	DPC_kernel_options
    184  18e4				  -
    185  18e4				  -	      .byte	%00000000
    186  18e4				  -	      .byte	%00000000
    187  18e4				  -	      .byte	%00000000
    188  18e4				  -	      .byte	%00000000
    189  18e4				  -	      .byte	%00000000
    190  18e4				  -	      .byte	%00000000
    191  18e4				  -	      .byte	%00000000
    192  18e4				  -	      .byte	%00000000
    193  18e4				  -
    194  18e4				  -	      endif
    195  18e4				  -
    196  18e4					      endif
    197  18e4
    198  18e4				  -	      ifconst	ROM2k
    199  18e4				  -	      ORG	$F7FC
    200  18e4					      else
    201  18e4					      ifconst	bankswitch
    202  18e4				  -	      if	bankswitch == 8
    203  18e4				  -	      ORG	$2FF4-bscode_length
    204  18e4				  -	      RORG	$FFF4-bscode_length
    205  18e4					      endif
    206  18e4				  -	      if	bankswitch == 16
    207  18e4				  -	      ORG	$4FF4-bscode_length
    208  18e4				  -	      RORG	$FFF4-bscode_length
    209  18e4					      endif
    210  18e4				  -	      if	bankswitch == 32
    211  18e4				  -	      ORG	$8FF4-bscode_length
    212  18e4				  -	      RORG	$FFF4-bscode_length
    213  18e4					      endif
    214  18e4				  -	      if	bankswitch == 64
    215  18e4				  -	      ORG	$10FE0-bscode_length
    216  18e4				  -	      RORG	$1FFE0-bscode_length
    217  18e4					      endif
    218  18e4				  -	      else
    219  18e4				  -	      ORG	$FFFC
    220  18e4					      endif
    221  18e4					      endif
    222  18e4							; Provided under the CC0 license. See the included LICENSE.txt for details.
    223  18e4
    224  18e4				   start
    225  18e4		       78		      sei
    226  18e5		       d8		      cld
    227  18e6		       a0 00		      ldy	#0
    228  18e8		       a5 d0		      lda	$D0
    229  18ea		       c9 2c		      cmp	#$2C	;check RAM location #1
    230  18ec		       d0 07		      bne	MachineIs2600
    231  18ee		       a5 d1		      lda	$D1
    232  18f0		       c9 a9		      cmp	#$A9	;check RAM location #2
    233  18f2		       d0 01		      bne	MachineIs2600
    234  18f4		       88		      dey
    235  18f5				   MachineIs2600
    236  18f5		       a2 00		      ldx	#0
    237  18f7		       8a		      txa
    238  18f8				   clearmem
    239  18f8		       e8		      inx
    240  18f9		       9a		      txs
    241  18fa		       48		      pha
    242  18fb		       d0 fb		      bne	clearmem
    243  18fd		       84 cb		      sty	temp1
    244  18ff		       a2 08		      ldx	#8
    245  1901		       86 ca		      stx	playfieldpos
    246  1903		       8e 58 10 	      stx	FASTFETCH
    247  1906		       a2 08		      ldx	#8
    248  1908		       a9 e0		      lda	#224
    249  190a				   inityloop
    250  190a		       95 9a		      sta	player1y,x
    251  190c		       ca		      dex
    252  190d		       10 fb		      bpl	inityloop
    253  190f
    254  190f		       a9 01		      lda	#1
    255  1911		       85 0a		      sta	CTRLPF
    256  1913		       ad 84 02 	      lda	INTIM
    257  1916		       8d 71 10 	      sta	RWRITE0
    258  1919		       a9 00		      lda	#0
    259  191b		       8d 38 10 	      STA	DF0FRACINC
    260  191e		       8d 39 10 	      STA	DF1FRACINC
    261  1921		       8d 3a 10 	      STA	DF2FRACINC
    262  1924		       8d 3b 10 	      STA	DF3FRACINC
    263  1927		       8d 3c 10 	      STA	DF4FRACINC
    264  192a		       8d 3e 10 	      STA	DF6FRACINC
    265  192d		       a9 a5		      lda	#<USERSTACK
    266  192f		       8d 57 10 	      STA	DF7LOW
    267  1932		       a9 0d		      lda	#(>USERSTACK) & $0F
    268  1934		       8d 6f 10 	      STA	DF7HI
    269  1937		       a9 ff		      lda	#255
    270  1939		       8d 5a 10 	      sta	CALLFUNCTION	; zero-fill fetcher
    271  193c
    272  193c		       a9 1f		      lda	#>(game-1)
    273  193e		       48		      pha
    274  193f		       a9 96		      lda	#<(game-1)
    275  1941		       48		      pha
    276  1942		       48		      pha
    277  1943		       48		      pha
    278  1944		       a2 01		      ldx	#1
    279  1946		       4c ee df 	      jmp	BS_jsr
    280  1949				   drawscreen
    281  1949		       a9 01		      lda	#1
    282  194b		       85 2c		      sta	CXCLR
    283  194d		       85 09		      sta	COLUBK	; REVENG - don't start with the lastline color
    284  194f
    285  194f				   fufu
    286  194f		       ad 84 02 	      lda	INTIM
    287  1952		       30 fb		      bmi	fufu
    288  1954
      0  1954					      VERTICAL_SYNC
      1  1954		       a9 02		      LDA	#$02
      2  1956		       85 02		      STA	WSYNC
      3  1958		       85 00		      STA	VSYNC
      4  195a		       85 02		      STA	WSYNC
      5  195c		       85 02		      STA	WSYNC
      6  195e		       4a		      LSR
      7  195f		       85 02		      STA	WSYNC
      8  1961		       85 00		      STA	VSYNC
    290  1963
    291  1963		       a9 a9		      lda	#41+128	;was 37 - do more w/c code
    292  1965		       8d 96 02 	      sta	TIM64T
    293  1968
    294  1968							; adjust for pfpos?
    295  1968
    296  1968							; set zero to properly enter C code
    297  1968		       a9 a4		      lda	#<C_function
    298  196a		       8d 50 10 	      sta	DF0LOW
    299  196d		       a9 01		      lda	#(>C_function) & $0F
    300  196f		       8d 68 10 	      sta	DF0HI
    301  1972		       a9 00		      lda	#0
    302  1974		       8d 78 10 	      sta	DF0WRITE
    303  1977
    304  1977							; REVENG - pass the number of vsprites we want...
    305  1977					      ifnconst	dpcspritemax
    306  1977				  -	      ifconst	readpaddle
    307  1977				  -	      lda	#8
    308  1977					      else
    309  1977		       a9 09		      lda	#9
    310  1979					      endif
    311  1979				  -	      else
    312  1979				  -	      lda	#dpcspritemax
    313  1979					      endif
    314  1979		       8d 78 10 	      sta	DF0WRITE
    315  197c
    316  197c		       a5 80		      lda	player0x
    317  197e		       85 8f		      sta	player0xcoll	; detect p0x colls
    318  1980
    319  1980							; copy RAM to fetcher for C-code
    320  1980		       a9 e2		      lda	#<(CcodeData + RAMcopylength)
    321  1982		       8d 50 10 	      sta	DF0LOW
    322  1985		       a9 01		      lda	#(>(CcodeData + RAMcopylength)) & $0F
    323  1987		       8d 68 10 	      sta	DF0HI
    324  198a		       a2 39		      ldx	#RAMcopylength-1
    325  198c				   copy2fetcherloop
    326  198c		       b5 85		      lda	RAMcopybegin,x
    327  198e		       8d 60 10 	      sta	DF0PUSH
    328  1991		       ca		      dex
    329  1992		       10 f8		      bpl	copy2fetcherloop
    330  1994
    331  1994		       a9 ff		      lda	#255
    332  1996		       8d 5a 10 	      sta	CALLFUNCTION
    333  1999
    334  1999							; copy modified data back (just need first 6 bytes, which is sprite sort data)
    335  1999		       a2 ed		      ldx	#256-19
    336  199b				   copyfromfetcherloop
    337  199b		       ad 08 10 	      lda	DF0DATA
    338  199e		       95 98		      sta	RAMcopybegin+19,x
    339  19a0		       e8		      inx
    340  19a1		       30 f8		      bmi	copyfromfetcherloop
    341  19a3
    342  19a3		       20 3a 1e 	      jsr	kernel_setup
    343  19a6		       85 02		      sta	WSYNC
    344  19a8		       a0 80		      ldy	#$80
    345  19aa		       84 20		      sty	HMP0
    346  19ac		       84 21		      sty	HMP1
    347  19ae		       84 22		      sty	HMM0
    348  19b0		       84 23		      sty	HMM1
    349  19b2		       84 24		      sty	HMBL
    350  19b4
    351  19b4							; run possible vblank bB code
    352  19b4				  -	      ifconst	vblank_bB_code
    353  19b4				  -	      jsr	vblank_bB_code
    354  19b4					      endif
    355  19b4
    356  19b4		       20 02 1d 	      jsr	set_fetchers
    357  19b7
    358  19b7		       a2 07		      ldx	#7
    359  19b9				   setloopfrac
    360  19b9		       bd 7d 1d 	      lda	dffraclow,x
    361  19bc		       9d 28 10 	      sta	DF0FRACLOW,x
    362  19bf		       bd 85 1d 	      lda	dffrachi,x
    363  19c2		       9d 30 10 	      sta	DF0FRACHI,x
    364  19c5		       ca		      dex
    365  19c6		       10 f1		      bpl	setloopfrac
    366  19c8							; lda #255
    367  19c8		       8e 3d 10 	      STx	DF5FRACINC	; x=255 right now
    368  19cb		       8e 3f 10 	      STx	DF7FRACINC
    369  19ce		       ad 1d 10 	      lda	DF5FRACDATA	; priming read
    370  19d1		       ad 1f 10 	      lda	DF7FRACDATA	; priming read
    371  19d4
    372  19d4		       a6 85		      ldx	SpriteGfxIndex
    373  19d6		       b5 af		      lda	_NUSIZ1,x	; top NUSIZ/REFP
    374  19d8		       85 05		      sta	NUSIZ1
    375  19da		       85 0c		      sta	REFP1
    376  19dc
    377  19dc							;REVENG - allow P0 to wrap at the top
    378  19dc				   startwrapfix
    379  19dc		       a9 ff		      lda	#255
    380  19de		       85 cc		      sta	temp2
    381  19e0		       18		      clc
    382  19e1		       a5 99		      lda	player0y
    383  19e3		       65 a5		      adc	player0height
    384  19e5		       38		      sec
    385  19e6		       c5 a5		      cmp	player0height
    386  19e8		       90 04		      bcc	skipwrapfix
    387  19ea		       a9 00		      lda	#0
    388  19ec		       85 cc		      sta	temp2
    389  19ee				   skipwrapfix
    390  19ee
    391  19ee		       38		      sec
    392  19ef		       a9 08		      lda	#<P0GFX
    393  19f1		       e5 99		      sbc	player0y
    394  19f3		       8d 52 10 	      sta	DF2LOW
    395  19f6		       a9 d4		      lda	#>P0GFX
    396  19f8							;sbc #0
    397  19f8		       e5 cc		      sbc	temp2
    398  19fa		       8d 6a 10 	      sta	DF2HI
    399  19fd		       a9 07		      lda	#<(P0GFX-1)
    400  19ff		       8d 42 10 	      sta	DF2TOP
    401  1a02		       38		      sec
    402  1a03		       65 a5		      adc	player0height
    403  1a05		       8d 4a 10 	      sta	DF2BOT
    404  1a08
    405  1a08							;REVENG - 1/2 of the COLUM0 fix. the rest is in main.c
    406  1a08		       a9 08		      lda	#<(P0COLOR)
    407  1a0a		       8d 50 10 	      sta	DF0LOW
    408  1a0d		       85 cc		      sta	temp2
    409  1a0f		       a9 d5		      lda	#>(P0COLOR)
    410  1a11		       8d 68 10 	      sta	DF0HI
    411  1a14
    412  1a14							; ball
    413  1a14		       a9 07		      lda	#<(P1GFX-1)
    414  1a16		       18		      clc
    415  1a17		       65 c1		      adc	bally
    416  1a19		       8d 43 10 	      sta	DF3TOP
    417  1a1c		       38		      sec
    418  1a1d		       65 c4		      adc	ballheight
    419  1a1f		       8d 4b 10 	      sta	DF3BOT
    420  1a22
    421  1a22							; missile0
    422  1a22		       a5 cc		      lda	temp2
    423  1a24		       18		      clc
    424  1a25		       65 bf		      adc	missile0y
    425  1a27		       8d 40 10 	      sta	DF0TOP
    426  1a2a		       38		      sec
    427  1a2b		       65 c2		      adc	missile0height
    428  1a2d		       8d 48 10 	      sta	DF0BOT
    429  1a30
    430  1a30
    431  1a30				   fuu
    432  1a30		       ad 84 02 	      lda	INTIM
    433  1a33		       30 fb		      bmi	fuu
    434  1a35		       85 02		      sta	WSYNC
    435  1a37							;     ldy #$80
    436  1a37							;     sty HMP0
    437  1a37							;     sty HMP1
    438  1a37							;     sty HMM0 
    439  1a37							;     sty HMM1
    440  1a37							;     sty HMBL
    441  1a37							; relocated code above prior to vblank, to allow for Cosmic Ark starfield
    442  1a37							; and/or skewed players
      0  1a37					      sleep	17
      1  1a37				   .CYCLES    SET	17
      2  1a37
      3  1a37				  -	      IF	.CYCLES < 2
      4  1a37				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1a37				  -	      ERR
      6  1a37					      ENDIF
      7  1a37
      8  1a37					      IF	.CYCLES & 1
      9  1a37					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1a37		       04 00		      nop	0
     11  1a39				  -	      ELSE
     12  1a39				  -	      bit	VSYNC
     13  1a39					      ENDIF
     14  1a39				   .CYCLES    SET	.CYCLES - 3
     15  1a39					      ENDIF
     16  1a39
     17  1a39					      REPEAT	.CYCLES / 2
     18  1a39		       ea		      nop
     17  1a39					      REPEND
     18  1a3a		       ea		      nop
     17  1a3a					      REPEND
     18  1a3b		       ea		      nop
     17  1a3b					      REPEND
     18  1a3c		       ea		      nop
     17  1a3c					      REPEND
     18  1a3d		       ea		      nop
     17  1a3d					      REPEND
     18  1a3e		       ea		      nop
     17  1a3e					      REPEND
     18  1a3f		       ea		      nop
     19  1a40					      REPEND
    444  1a40
    445  1a40		       a9 d3		      lda	#KERNEL_LINES
    446  1a42		       8d 96 02 	      sta	TIM64T
    447  1a45		       a9 01		      lda	#1
    448  1a47		       85 27		      sta	VDELBL
    449  1a49		       85 25		      sta	VDELP0
    450  1a4b
    451  1a4b							; missile1
    452  1a4b		       a9 07		      lda	#<(P1COLOR-1)
    453  1a4d		       18		      clc
    454  1a4e		       65 c0		      adc	missile1y
    455  1a50		       8d 41 10 	      sta	DF1TOP
    456  1a53		       38		      sec
    457  1a54		       65 c3		      adc	missile1height
    458  1a56		       8d 49 10 	      sta	DF1BOT
    459  1a59
    460  1a59		       a9 00		      lda	#0
    461  1a5b		       85 01		      sta	VBLANK
    462  1a5d		       8d 58 10 	      sta	FASTFETCH
    463  1a60							;sleep 7
    464  1a60		       a9 12		      lda	#<DF2DATAW	; REVENG - added so GRP0 is at TOP
    465  1a62		       85 1b		      STA	GRP0	; 36 (VDEL)   ; ""
      0  1a64					      sleep	2	; ""
      1  1a64				   .CYCLES    SET	2
      2  1a64
      3  1a64				  -	      IF	.CYCLES < 2
      4  1a64				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1a64				  -	      ERR
      6  1a64					      ENDIF
      7  1a64
      8  1a64				  -	      IF	.CYCLES & 1
      9  1a64				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1a64				  -	      nop	0
     11  1a64				  -	      ELSE
     12  1a64				  -	      bit	VSYNC
     13  1a64				  -	      ENDIF
     14  1a64				  -.CYCLES    SET	.CYCLES - 3
     15  1a64					      ENDIF
     16  1a64
     17  1a64					      REPEAT	.CYCLES / 2
     18  1a64		       ea		      nop
     19  1a65					      REPEND
    467  1a65
    468  1a65		       a9 18		      lda	#<DF0FRACDATA
    469  1a67		       85 0e		      sta	PF1	; (PF1L)
    470  1a69
    471  1a69							; enter at cycle ??
    472  1a69				   loop
    473  1a69		       a9 08		      lda	#<DF0DATA	;74
    474  1a6b		       85 06		      STA	COLUP0	; 1
    475  1a6d		       a9 09		      lda	#<DF1DATA	;3
    476  1a6f				   loop2
    477  1a6f		       85 07		      STA	COLUP1	; 6
    478  1a71		       a9 0b		      lda	#<DF3DATA
    479  1a73		       85 1c		      STA	GRP1	; 11
    480  1a75		       a9 20		      lda	#<DF0FLAG
    481  1a77		       85 1d		      STA	ENAM0	; 16
    482  1a79
    483  1a79		       a9 1e		      lda	#<DF6FRACDATA
    484  1a7b		       85 09		      sta	COLUBK	; 21
    485  1a7d		       a9 1c		      lda	#<DF4FRACDATA
    486  1a7f		       85 08		      sta	COLUPF	; 26
    487  1a81		       a9 19		      lda	#<DF1FRACDATA
    488  1a83		       85 0f		      sta	PF2	; 31 (PF2L)
    489  1a85				   loop3
    490  1a85		       a9 12		      lda	#<DF2DATAW
    491  1a87		       85 1b		      STA	GRP0	; 36 (VDEL)
    492  1a89		       a9 23		      lda	#<DF3FLAG
    493  1a8b		       85 1f		      STA	ENABL	; 41 (VDEL)
    494  1a8d		       a2 70		      ldx	#$70	;in case we get kernel 6
    495  1a8f		       a9 1a		      lda	#<DF2FRACDATA	;45
    496  1a91		       85 0f		      sta	PF2	; 48
    497  1a93		       84 21		      sty	HMP1	; 51 ; from prev. cycle: $80=nomove
    498  1a95		       a9 1b		      lda	#<DF3FRACDATA	;53
    499  1a97		       85 0e		      sta	PF1	; 56
    500  1a99		       a9 0c		      lda	#<DF4DATA	; 58 this is the repos info
    501  1a9b		       f0 4d		      beq	repo	;60/61
    502  1a9d				   norepo		; 60
    503  1a9d		       a8		      tay		; 62
    504  1a9e		       a9 08		      lda	#<DF0DATA	; 64
    505  1aa0
    506  1aa0		       ae 84 02 	      ldx	INTIM	; 68 timed for 192 lines
    507  1aa3		       f0 60		      beq	exitkernel	; 70/71
    508  1aa5		       85 2a		      sta	HMOVE	; 73
    509  1aa7
    510  1aa7		       85 06		      STA	COLUP0	; 0
    511  1aa9		       a9 09		      lda	#<DF1DATA	;2
    512  1aab		       85 07		      STA	COLUP1	;5
    513  1aad		       a9 0b		      lda	#<DF3DATA
    514  1aaf		       85 1c		      STA	GRP1	; 10
    515  1ab1		       a9 21		      lda	#<DF1FLAG
    516  1ab3		       85 1e		      STA	ENAM1	; 15
    517  1ab5		       a9 18		      lda	#<DF0FRACDATA
    518  1ab7		       85 0e		      sta	PF1	; 20 (PF1L)
    519  1ab9		       a9 19		      lda	#<DF1FRACDATA
    520  1abb		       85 0f		      sta	PF2	; 25 (PF2L)
    521  1abd		       a9 12		      lda	#<DF2DATAW
    522  1abf		       85 1b		      STA	GRP0	; 30 (VDEL)
    523  1ac1		       a9 23		      lda	#<DF3FLAG
    524  1ac3		       85 1f		      STA	ENABL	; 35 (VDEL)
    525  1ac5		       88		      dey		; 37
    526  1ac6		       8c 64 10 	      STY	DF4PUSH	; 41
    527  1ac9		       a0 80		      ldy	#$80	; 43 no movement next line
    528  1acb		       a9 1a		      lda	#<DF2FRACDATA	;45
    529  1acd		       85 0f		      sta	PF2	; 48
    530  1acf		       84 21		      sty	HMP1	; 51 ; from prev. cycle: $80=nomove
    531  1ad1		       a9 1b		      lda	#<DF3FRACDATA	;53
    532  1ad3		       85 0e		      sta	PF1	; 56
    533  1ad5				  -	      ifnconst	DPC_kernel_options
    534  1ad5				  -			;sleep 8 ; REVENG - timing is off - results in a garbled screen
    535  1ad5				  -	      sleep	5	; this is better
    536  1ad5					      else
    537  1ad5		       24 43		      bit	DPC_kernel_options
    538  1ad7					      if	(DPC_kernel_options > $3F)
    539  1ad7		       30 09		      bmi	COLfound
    540  1ad9				  -	      else
    541  1ad9				  -	      bpl	COLfound
    542  1ad9					      endif
    543  1ad9					      endif
    544  1ad9		       86 ce		      stx	temp4	; +3
    545  1adb
    546  1adb				   getbackearly
    547  1adb		       a9 18		      lda	#<DF0FRACDATA	; +2
    548  1add		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    549  1adf		       4c 69 5a 	      JMP	loop+$4000	; 72
    550  1ae2
    551  1ae2					      ifconst	DPC_kernel_options
    552  1ae2				   COLfound
    553  1ae2		       ad 18 10 	      lda	DF0FRACDATA
    554  1ae5		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    555  1ae7		       4c 69 5a 	      JMP	loop+$4000	; 72
    556  1aea					      endif
    557  1aea
    558  1aea				   repo
    559  1aea		       ac 1f 10 	      ldy	DF7FRACDATA	; 65
    560  1aed		       a9 18		      lda	#<DF0FRACDATA	; 67 preload PF1L for next line
    561  1aef				  -	      if	((>repo) > (>norepo))
    562  1aef				  -	      STA	PF1
    563  1aef					      else
    564  1aef		       8d 0e 00 	      STA.w	PF1	; 71 ; sta.w if page doesn't wrap
    565  1af2					      endif
    566  1af2		       a9 08		      lda	#<DF0DATA	;73
    567  1af4		       85 06		      STA	COLUP0	; 0
    568  1af6		       a9 09		      lda	#<DF1DATA
    569  1af8		       85 07		      STA	COLUP1	;5
    570  1afa		       a9 0b		      lda	#<DF3DATA
    571  1afc		       85 1c		      STA	GRP1	; 10
    572  1afe		       a9 21		      lda	#<DF1FLAG
    573  1b00		       85 1e		      STA	ENAM1	; 15
    574  1b02							; repos info holds HMMx
    575  1b02		       6c 0d 10 	      jmp	(DF5DATA)	; 20 grabs df6/df7=lo/hi
    576  1b05
    577  1b05				   exitkernel		; exit the kernel
    578  1b05		       20 c9 5e 	      jsr	scorekernel+$4000	; 1
    579  1b08				   exit
    580  1b08		       a2 ff		      ldx	#255
    581  1b0a		       8e 58 10 	      stx	FASTFETCH
    582  1b0d		       85 02		      sta	WSYNC
    583  1b0f				  -	      ifconst	qtcontroller
    584  1b0f				  -	      lda	qtcontroller
    585  1b0f				  -	      lsr		; bit 0 in carry
    586  1b0f				  -	      lda	#4
    587  1b0f				  -	      ror		; carry into top of A
    588  1b0f					      else
    589  1b0f		       a9 02		      lda	#2
    590  1b11					      endif		; qtcontroller
    591  1b11		       85 01		      STA	VBLANK
    592  1b13		       a9 a7		      lda	#OVERSCAN_LINES
    593  1b15		       8d 96 02 	      sta	TIM64T
    594  1b18		       38		      sec
    595  1b19		       a9 d3		      lda	#KERNEL_LINES
    596  1b1b		       e5 ce		      sbc	temp4
    597  1b1d		       aa		      tax
    598  1b1e		       4a		      lsr
    599  1b1f		       4a		      lsr
    600  1b20		       85 cd		      sta	temp3	; div4
    601  1b22		       4a		      lsr
    602  1b23		       4a		      lsr
    603  1b24		       85 cc		      sta	temp2	; div16
    604  1b26		       4a		      lsr
    605  1b27		       85 cb		      sta	temp1	; div32
    606  1b29		       18		      clc
    607  1b2a		       8a		      txa
    608  1b2b		       65 cc		      adc	temp2
    609  1b2d		       65 cb		      adc	temp1
    610  1b2f		       38		      sec
    611  1b30		       e5 cd		      sbc	temp3
    612  1b32		       85 ce		      sta	temp4	; approx line of first pf coll
      0  1b34					      RETURN
      1  1b34				  -	      ifnconst	bankswitch
      2  1b34				  -	      rts
      3  1b34					      else
      4  1b34		       4c e0 df 	      jmp	BS_return
      5  1b37					      endif
    614  1b37
    615  1b37							; jmp exit
    616  1b37
    617  1b37							; kernels resp1 23/28/33/38/43/48/53/58/63/68/73
    618  1b37
    619  1b37				   kernel1
    620  1b37		       85 11		      sta	RESP1	; 23
    621  1b39		       a9 12		      lda	#<DF2DATAW
    622  1b3b		       85 1b		      STA	GRP0	; 28 (VDEL)
    623  1b3d		       a9 19		      lda	#<DF1FRACDATA
    624  1b3f		       85 0f		      STA	PF2	; 33
    625  1b41		       a9 23		      lda	#<DF3FLAG
    626  1b43		       85 1f		      STA	ENABL	; 38 (VDEL)
      0  1b45					      sleep	5
      1  1b45				   .CYCLES    SET	5
      2  1b45
      3  1b45				  -	      IF	.CYCLES < 2
      4  1b45				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b45				  -	      ERR
      6  1b45					      ENDIF
      7  1b45
      8  1b45					      IF	.CYCLES & 1
      9  1b45					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b45		       04 00		      nop	0
     11  1b47				  -	      ELSE
     12  1b47				  -	      bit	VSYNC
     13  1b47					      ENDIF
     14  1b47				   .CYCLES    SET	.CYCLES - 3
     15  1b47					      ENDIF
     16  1b47
     17  1b47					      REPEAT	.CYCLES / 2
     18  1b47		       ea		      nop
     19  1b48					      REPEND
    628  1b48		       a9 1a		      lda	#<DF2FRACDATA	;45
    629  1b4a		       85 0f		      sta	PF2	; 48
    630  1b4c		       a9 1b		      lda	#<DF3FRACDATA	;50
    631  1b4e		       85 0e		      sta	PF1	; 53
    632  1b50		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    633  1b52		       85 05		      STA	NUSIZ1	; 58
    634  1b54		       85 0c		      STA	REFP1	; 61
    635  1b56		       4c db 1a 	      jmp	getbackearly	;64
    636  1b59
    637  1b59				   kernel2
    638  1b59		       a9 12		      lda	#<DF2DATAW
    639  1b5b		       85 1b		      STA	GRP0	; 25 (VDEL)
    640  1b5d		       85 11		      sta	RESP1	;28
    641  1b5f		       a9 19		      lda	#<DF1FRACDATA
    642  1b61		       85 0f		      STA	PF2	; 33
    643  1b63		       a9 23		      lda	#<DF3FLAG
    644  1b65		       85 1f		      STA	ENABL	; 38 (VDEL)
      0  1b67					      sleep	5
      1  1b67				   .CYCLES    SET	5
      2  1b67
      3  1b67				  -	      IF	.CYCLES < 2
      4  1b67				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b67				  -	      ERR
      6  1b67					      ENDIF
      7  1b67
      8  1b67					      IF	.CYCLES & 1
      9  1b67					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b67		       04 00		      nop	0
     11  1b69				  -	      ELSE
     12  1b69				  -	      bit	VSYNC
     13  1b69					      ENDIF
     14  1b69				   .CYCLES    SET	.CYCLES - 3
     15  1b69					      ENDIF
     16  1b69
     17  1b69					      REPEAT	.CYCLES / 2
     18  1b69		       ea		      nop
     19  1b6a					      REPEND
    646  1b6a		       a9 1a		      lda	#<DF2FRACDATA	;45
    647  1b6c		       85 0f		      sta	PF2	; 48
    648  1b6e		       a9 1b		      lda	#<DF3FRACDATA	;50
    649  1b70		       85 0e		      sta	PF1	; 53
    650  1b72		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    651  1b74		       85 05		      STA	NUSIZ1
    652  1b76		       85 0c		      STA	REFP1
    653  1b78		       4c db 1a 	      jmp	getbackearly	;64
    654  1b7b
    655  1b7b				   kernel3
    656  1b7b		       a9 12		      lda	#<DF2DATAW
    657  1b7d		       85 1b		      STA	GRP0	; 25 (VDEL)
    658  1b7f		       a9 19		      lda	#<DF1FRACDATA
    659  1b81		       85 0f		      STA	PF2	; 30
    660  1b83		       85 11		      sta	RESP1	;33
    661  1b85		       a9 23		      lda	#<DF3FLAG
    662  1b87		       85 1f		      STA	ENABL	; 38 (VDEL)
      0  1b89					      sleep	5
      1  1b89				   .CYCLES    SET	5
      2  1b89
      3  1b89				  -	      IF	.CYCLES < 2
      4  1b89				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b89				  -	      ERR
      6  1b89					      ENDIF
      7  1b89
      8  1b89					      IF	.CYCLES & 1
      9  1b89					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b89		       04 00		      nop	0
     11  1b8b				  -	      ELSE
     12  1b8b				  -	      bit	VSYNC
     13  1b8b					      ENDIF
     14  1b8b				   .CYCLES    SET	.CYCLES - 3
     15  1b8b					      ENDIF
     16  1b8b
     17  1b8b					      REPEAT	.CYCLES / 2
     18  1b8b		       ea		      nop
     19  1b8c					      REPEND
    664  1b8c		       a9 1a		      lda	#<DF2FRACDATA	;45
    665  1b8e		       85 0f		      sta	PF2	; 48
    666  1b90		       a9 1b		      lda	#<DF3FRACDATA	;50
    667  1b92		       85 0e		      sta	PF1	; 53
    668  1b94		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    669  1b96		       85 05		      STA	NUSIZ1
    670  1b98		       85 0c		      STA	REFP1
    671  1b9a		       4c db 1a 	      JMP	getbackearly	; 64
    672  1b9d
    673  1b9d				   kernel4
    674  1b9d		       a9 12		      lda	#<DF2DATAW
    675  1b9f		       85 1b		      STA	GRP0	; 25 (VDEL)
    676  1ba1		       a9 23		      lda	#<DF3FLAG
    677  1ba3		       85 1f		      STA	ENABL	; 30(VDEL)
    678  1ba5		       a9 19		      lda	#<DF1FRACDATA
    679  1ba7		       85 0f		      STA	PF2	; 35
    680  1ba9		       85 11		      sta	RESP1	;38
      0  1bab					      sleep	5
      1  1bab				   .CYCLES    SET	5
      2  1bab
      3  1bab				  -	      IF	.CYCLES < 2
      4  1bab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1bab				  -	      ERR
      6  1bab					      ENDIF
      7  1bab
      8  1bab					      IF	.CYCLES & 1
      9  1bab					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1bab		       04 00		      nop	0
     11  1bad				  -	      ELSE
     12  1bad				  -	      bit	VSYNC
     13  1bad					      ENDIF
     14  1bad				   .CYCLES    SET	.CYCLES - 3
     15  1bad					      ENDIF
     16  1bad
     17  1bad					      REPEAT	.CYCLES / 2
     18  1bad		       ea		      nop
     19  1bae					      REPEND
    682  1bae		       a9 1a		      lda	#<DF2FRACDATA	;45
    683  1bb0		       85 0f		      sta	PF2	; 48
    684  1bb2		       a9 1b		      lda	#<DF3FRACDATA	;50
    685  1bb4		       85 0e		      sta	PF1	; 53
    686  1bb6		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    687  1bb8		       85 05		      STA	NUSIZ1	; 58
    688  1bba		       85 0c		      STA	REFP1	; 61
    689  1bbc		       4c db 1a 	      JMP	getbackearly	; 64
    690  1bbf
    691  1bbf				   kernel5
    692  1bbf		       a9 12		      lda	#<DF2DATAW
    693  1bc1		       85 1b		      STA	GRP0	; (VDEL)
    694  1bc3		       a9 23		      lda	#<DF3FLAG
    695  1bc5		       85 1f		      STA	ENABL	; (VDEL)
    696  1bc7		       a9 19		      lda	#<DF1FRACDATA
    697  1bc9		       85 0f		      STA	PF2	; 35
      0  1bcb					      sleep	5
      1  1bcb				   .CYCLES    SET	5
      2  1bcb
      3  1bcb				  -	      IF	.CYCLES < 2
      4  1bcb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1bcb				  -	      ERR
      6  1bcb					      ENDIF
      7  1bcb
      8  1bcb					      IF	.CYCLES & 1
      9  1bcb					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1bcb		       04 00		      nop	0
     11  1bcd				  -	      ELSE
     12  1bcd				  -	      bit	VSYNC
     13  1bcd					      ENDIF
     14  1bcd				   .CYCLES    SET	.CYCLES - 3
     15  1bcd					      ENDIF
     16  1bcd
     17  1bcd					      REPEAT	.CYCLES / 2
     18  1bcd		       ea		      nop
     19  1bce					      REPEND
    699  1bce		       85 11		      sta	RESP1	;43
    700  1bd0		       a9 1a		      lda	#<DF2FRACDATA	;45
    701  1bd2		       85 0f		      sta	PF2	; 48
    702  1bd4		       a9 1b		      lda	#<DF3FRACDATA	;50
    703  1bd6		       85 0e		      sta	PF1	; 53
    704  1bd8		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    705  1bda		       85 05		      STA	NUSIZ1
    706  1bdc		       85 0c		      STA	REFP1
    707  1bde		       4c db 1a 	      JMP	getbackearly	; 64
    708  1be1
    709  1be1				   kernel6
    710  1be1		       a9 12		      lda	#<DF2DATAW
    711  1be3		       85 1b		      STA	GRP0	; 25 (VDEL)
    712  1be5		       a9 23		      lda	#<DF3FLAG
    713  1be7		       85 1f		      STA	ENABL	; 30 (VDEL)
    714  1be9		       a9 19		      lda	#<DF1FRACDATA
    715  1beb		       85 0f		      STA	PF2	; 35
    716  1bed		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    717  1bef		       85 05		      STA	NUSIZ1	; 40
    718  1bf1		       85 0c		      STA	REFP1	; 43
    719  1bf3		       a9 1a		      lda	#<DF2FRACDATA	;45
    720  1bf5		       85 0f		      sta	PF2	; 48
    721  1bf7		       a9 1b		      lda	#<DF3FRACDATA	;50
    722  1bf9		       85 11		      sta	RESP1	;53
    723  1bfb							; do a move right by 15
    724  1bfb		       85 0e		      sta	PF1	; 56
    725  1bfd		       86 21		      stx	HMP1	; 59
    726  1bff		       a9 19		      lda	#<DF1FRACDATA
    727  1c01		       85 0f		      sta	PF2	; 64 (PF2L)
    728  1c03		       a9 18		      lda	#<DF0FRACDATA
    729  1c05		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    730  1c07		       a9 08		      lda	#<DF0DATA	; 71
    731  1c09		       85 2a		      sta	HMOVE	; 74 adjust to +15 right
    732  1c0b
    733  1c0b		       85 06		      STA	COLUP0	; 1
    734  1c0d		       a9 09		      lda	#<DF1DATA
    735  1c0f		       85 07		      sta	COLUP1	; 6
    736  1c11		       a9 0b		      lda	#<DF3DATA
    737  1c13		       85 1c		      STA	GRP1	; 11
    738  1c15		       a9 20		      lda	#<DF0FLAG
    739  1c17		       85 1d		      STA	ENAM0	; 16
    740  1c19		       a9 1e		      lda	#<DF6FRACDATA
    741  1c1b		       85 09		      STA	COLUBK	; 21
    742  1c1d		       a9 1c		      lda	#<DF4FRACDATA
    743  1c1f		       85 08		      sta	COLUPF	; 26
      0  1c21					      sleep	2
      1  1c21				   .CYCLES    SET	2
      2  1c21
      3  1c21				  -	      IF	.CYCLES < 2
      4  1c21				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c21				  -	      ERR
      6  1c21					      ENDIF
      7  1c21
      8  1c21				  -	      IF	.CYCLES & 1
      9  1c21				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c21				  -	      nop	0
     11  1c21				  -	      ELSE
     12  1c21				  -	      bit	VSYNC
     13  1c21				  -	      ENDIF
     14  1c21				  -.CYCLES    SET	.CYCLES - 3
     15  1c21					      ENDIF
     16  1c21
     17  1c21					      REPEAT	.CYCLES / 2
     18  1c21		       ea		      nop
     19  1c22					      REPEND
    745  1c22		       4c 85 1a 	      jmp	loop3	; 31
    746  1c25
    747  1c25				   kernel7
    748  1c25		       a9 12		      lda	#<DF2DATAW
    749  1c27		       85 1b		      STA	GRP0	; 25 (VDEL)
    750  1c29		       a9 23		      lda	#<DF3FLAG
    751  1c2b		       85 1f		      STA	ENABL	; 30 (VDEL)
    752  1c2d		       a9 19		      lda	#<DF1FRACDATA
    753  1c2f		       85 0f		      STA	PF2	; 35
    754  1c31		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    755  1c33		       85 05		      STA	NUSIZ1	; 40
    756  1c35		       85 0c		      STA	REFP1	; 43
    757  1c37		       a9 1a		      lda	#<DF2FRACDATA	;45
    758  1c39		       85 0f		      sta	PF2	; 48
      0  1c3b					      sleep	2
      1  1c3b				   .CYCLES    SET	2
      2  1c3b
      3  1c3b				  -	      IF	.CYCLES < 2
      4  1c3b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c3b				  -	      ERR
      6  1c3b					      ENDIF
      7  1c3b
      8  1c3b				  -	      IF	.CYCLES & 1
      9  1c3b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c3b				  -	      nop	0
     11  1c3b				  -	      ELSE
     12  1c3b				  -	      bit	VSYNC
     13  1c3b				  -	      ENDIF
     14  1c3b				  -.CYCLES    SET	.CYCLES - 3
     15  1c3b					      ENDIF
     16  1c3b
     17  1c3b					      REPEAT	.CYCLES / 2
     18  1c3b		       ea		      nop
     19  1c3c					      REPEND
    760  1c3c		       85 11		      sta	RESP1	;53
    761  1c3e		       a9 1b		      lda	#<DF3FRACDATA	;55
    762  1c40		       85 0e		      sta	PF1	; 58
      0  1c42					      sleep	3
      1  1c42				   .CYCLES    SET	3
      2  1c42
      3  1c42				  -	      IF	.CYCLES < 2
      4  1c42				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c42				  -	      ERR
      6  1c42					      ENDIF
      7  1c42
      8  1c42					      IF	.CYCLES & 1
      9  1c42					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c42		       04 00		      nop	0
     11  1c44				  -	      ELSE
     12  1c44				  -	      bit	VSYNC
     13  1c44					      ENDIF
     14  1c44				   .CYCLES    SET	.CYCLES - 3
     15  1c44					      ENDIF
     16  1c44
     17  1c44				  -	      REPEAT	.CYCLES / 2
     18  1c44				  -	      nop
     19  1c44					      REPEND
    764  1c44		       4c db 1a 	      JMP	getbackearly	; 64
    765  1c47
    766  1c47				   kernel8
    767  1c47		       a9 12		      lda	#<DF2DATAW
    768  1c49		       85 1b		      STA	GRP0	; (VDEL)
    769  1c4b		       a9 23		      lda	#<DF3FLAG
    770  1c4d		       85 1f		      STA	ENABL	; (VDEL)
    771  1c4f		       a9 19		      lda	#<DF1FRACDATA
    772  1c51		       85 0f		      STA	PF2	; 35
    773  1c53		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    774  1c55		       85 05		      STA	NUSIZ1	; 40
    775  1c57		       85 0c		      STA	REFP1	; 43
    776  1c59		       a9 1a		      lda	#<DF2FRACDATA	;45
    777  1c5b		       85 0f		      sta	PF2	; 48
    778  1c5d		       a9 1b		      lda	#<DF3FRACDATA	;50
    779  1c5f		       85 0e		      sta	PF1	; 53
      0  1c61					      sleep	2
      1  1c61				   .CYCLES    SET	2
      2  1c61
      3  1c61				  -	      IF	.CYCLES < 2
      4  1c61				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c61				  -	      ERR
      6  1c61					      ENDIF
      7  1c61
      8  1c61				  -	      IF	.CYCLES & 1
      9  1c61				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c61				  -	      nop	0
     11  1c61				  -	      ELSE
     12  1c61				  -	      bit	VSYNC
     13  1c61				  -	      ENDIF
     14  1c61				  -.CYCLES    SET	.CYCLES - 3
     15  1c61					      ENDIF
     16  1c61
     17  1c61					      REPEAT	.CYCLES / 2
     18  1c61		       ea		      nop
     19  1c62					      REPEND
    781  1c62		       85 11		      sta	RESP1	;58
      0  1c64					      sleep	3
      1  1c64				   .CYCLES    SET	3
      2  1c64
      3  1c64				  -	      IF	.CYCLES < 2
      4  1c64				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c64				  -	      ERR
      6  1c64					      ENDIF
      7  1c64
      8  1c64					      IF	.CYCLES & 1
      9  1c64					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c64		       04 00		      nop	0
     11  1c66				  -	      ELSE
     12  1c66				  -	      bit	VSYNC
     13  1c66					      ENDIF
     14  1c66				   .CYCLES    SET	.CYCLES - 3
     15  1c66					      ENDIF
     16  1c66
     17  1c66				  -	      REPEAT	.CYCLES / 2
     18  1c66				  -	      nop
     19  1c66					      REPEND
    783  1c66		       4c db 1a 	      JMP	getbackearly	; 64
    784  1c69
    785  1c69				   kernel9
    786  1c69		       a9 12		      lda	#<DF2DATAW
    787  1c6b		       85 1b		      STA	GRP0	; (VDEL)
    788  1c6d		       a9 23		      lda	#<DF3FLAG
    789  1c6f		       85 1f		      STA	ENABL	; (VDEL)
    790  1c71		       a9 19		      lda	#<DF1FRACDATA
    791  1c73		       85 0f		      STA	PF2	; 35
    792  1c75		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    793  1c77		       85 05		      STA	NUSIZ1	; 40
    794  1c79		       85 0c		      STA	REFP1	; 43
    795  1c7b		       a9 1a		      lda	#<DF2FRACDATA	;45
    796  1c7d		       85 0f		      sta	PF2	; 48
    797  1c7f		       a9 1b		      lda	#<DF3FRACDATA	;50
    798  1c81		       85 0e		      sta	PF1	; 53
      0  1c83					      sleep	5
      1  1c83				   .CYCLES    SET	5
      2  1c83
      3  1c83				  -	      IF	.CYCLES < 2
      4  1c83				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c83				  -	      ERR
      6  1c83					      ENDIF
      7  1c83
      8  1c83					      IF	.CYCLES & 1
      9  1c83					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c83		       04 00		      nop	0
     11  1c85				  -	      ELSE
     12  1c85				  -	      bit	VSYNC
     13  1c85					      ENDIF
     14  1c85				   .CYCLES    SET	.CYCLES - 3
     15  1c85					      ENDIF
     16  1c85
     17  1c85					      REPEAT	.CYCLES / 2
     18  1c85		       ea		      nop
     19  1c86					      REPEND
    800  1c86		       a9 18		      lda	#<DF0FRACDATA
    801  1c88		       85 11		      sta	RESP1	;63
      0  1c8a					      sleep	3
      1  1c8a				   .CYCLES    SET	3
      2  1c8a
      3  1c8a				  -	      IF	.CYCLES < 2
      4  1c8a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c8a				  -	      ERR
      6  1c8a					      ENDIF
      7  1c8a
      8  1c8a					      IF	.CYCLES & 1
      9  1c8a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c8a		       04 00		      nop	0
     11  1c8c				  -	      ELSE
     12  1c8c				  -	      bit	VSYNC
     13  1c8c					      ENDIF
     14  1c8c				   .CYCLES    SET	.CYCLES - 3
     15  1c8c					      ENDIF
     16  1c8c
     17  1c8c				  -	      REPEAT	.CYCLES / 2
     18  1c8c				  -	      nop
     19  1c8c					      REPEND
    803  1c8c		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    804  1c8e		       4c 69 1a 	      jmp	loop	;72
    805  1c91
    806  1c91				   kernel10
    807  1c91		       a9 12		      lda	#<DF2DATAW
    808  1c93		       85 1b		      STA	GRP0	; 25 (VDEL)
    809  1c95		       a9 23		      lda	#<DF3FLAG
    810  1c97		       85 1f		      STA	ENABL	; 30 (VDEL)
    811  1c99		       a9 19		      lda	#<DF1FRACDATA
    812  1c9b		       85 0f		      STA	PF2	; 35
    813  1c9d		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    814  1c9f		       85 05		      STA	NUSIZ1	; 40
    815  1ca1		       85 0c		      STA	REFP1	; 43
    816  1ca3		       a9 1a		      lda	#<DF2FRACDATA	;45
    817  1ca5		       85 0f		      sta	PF2	; 48
    818  1ca7		       a9 1b		      lda	#<DF3FRACDATA	;50
    819  1ca9		       85 0e		      sta	PF1	; 53
      0  1cab					      sleep	6
      1  1cab				   .CYCLES    SET	6
      2  1cab
      3  1cab				  -	      IF	.CYCLES < 2
      4  1cab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1cab				  -	      ERR
      6  1cab					      ENDIF
      7  1cab
      8  1cab				  -	      IF	.CYCLES & 1
      9  1cab				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1cab				  -	      nop	0
     11  1cab				  -	      ELSE
     12  1cab				  -	      bit	VSYNC
     13  1cab				  -	      ENDIF
     14  1cab				  -.CYCLES    SET	.CYCLES - 3
     15  1cab					      ENDIF
     16  1cab
     17  1cab					      REPEAT	.CYCLES / 2
     18  1cab		       ea		      nop
     17  1cab					      REPEND
     18  1cac		       ea		      nop
     17  1cac					      REPEND
     18  1cad		       ea		      nop
     19  1cae					      REPEND
    821  1cae		       a9 18		      lda	#<DF0FRACDATA
    822  1cb0		       ae 08 10 	      LDX	DF0DATA	; 65
    823  1cb3		       85 11		      sta	RESP1	; 68
    824  1cb5		       85 0e		      STA	PF1	; 71
    825  1cb7		       a9 09		      lda	#<DF1DATA	; 74
    826  1cb9		       86 06		      STX	COLUP0	; 0
    827  1cbb		       4c 6f 1a 	      jmp	loop2	; 3
    828  1cbe
    829  1cbe				   kernel11
    830  1cbe		       a9 12		      lda	#<DF2DATAW
    831  1cc0		       85 1b		      STA	GRP0	; (VDEL)
    832  1cc2		       a9 23		      lda	#<DF3FLAG
    833  1cc4		       85 1f		      STA	ENABL	; (VDEL)
    834  1cc6		       a9 19		      lda	#<DF1FRACDATA
    835  1cc8		       85 0f		      STA	PF2	; 35
    836  1cca		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    837  1ccc		       85 05		      STA	NUSIZ1
    838  1cce		       85 0c		      STA	REFP1
    839  1cd0		       a9 1a		      lda	#<DF2FRACDATA	;45
    840  1cd2		       85 0f		      sta	PF2	; 48
    841  1cd4		       a9 1b		      lda	#<DF3FRACDATA	;50
    842  1cd6		       85 0e		      sta	PF1	; 53
      0  1cd8					      sleep	3
      1  1cd8				   .CYCLES    SET	3
      2  1cd8
      3  1cd8				  -	      IF	.CYCLES < 2
      4  1cd8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1cd8				  -	      ERR
      6  1cd8					      ENDIF
      7  1cd8
      8  1cd8					      IF	.CYCLES & 1
      9  1cd8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1cd8		       04 00		      nop	0
     11  1cda				  -	      ELSE
     12  1cda				  -	      bit	VSYNC
     13  1cda					      ENDIF
     14  1cda				   .CYCLES    SET	.CYCLES - 3
     15  1cda					      ENDIF
     16  1cda
     17  1cda				  -	      REPEAT	.CYCLES / 2
     18  1cda				  -	      nop
     19  1cda					      REPEND
    844  1cda		       a9 19		      lda	#<DF1FRACDATA	;45
    845  1cdc		       85 0f		      sta	PF2	; 61
    846  1cde		       ae 08 10 	      LDX	DF0DATA	; 65
    847  1ce1
    848  1ce1		       a9 18		      lda	#<DF0FRACDATA	; 67
    849  1ce3		       85 0e		      sta	PF1	; 70
    850  1ce5		       85 11		      sta	RESP1	; 73
    851  1ce7		       86 06		      STX	COLUP0	; 0
    852  1ce9		       a9 09		      lda	#<DF1DATA	; 2
    853  1ceb		       85 07		      sta	COLUP1	; 5
    854  1ced		       a9 0b		      lda	#<DF3DATA
    855  1cef		       85 1c		      STA	GRP1	; 10
    856  1cf1		       a9 20		      lda	#<DF0FLAG
    857  1cf3		       85 1d		      STA	ENAM0	; 25
    858  1cf5		       a9 1e		      lda	#<DF6FRACDATA
    859  1cf7		       85 09		      STA	COLUBK	; 20
    860  1cf9		       a9 1c		      lda	#<DF4FRACDATA
    861  1cfb		       85 08		      sta	COLUPF	; 25
      0  1cfd					      sleep	3
      1  1cfd				   .CYCLES    SET	3
      2  1cfd
      3  1cfd				  -	      IF	.CYCLES < 2
      4  1cfd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1cfd				  -	      ERR
      6  1cfd					      ENDIF
      7  1cfd
      8  1cfd					      IF	.CYCLES & 1
      9  1cfd					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1cfd		       04 00		      nop	0
     11  1cff				  -	      ELSE
     12  1cff				  -	      bit	VSYNC
     13  1cff					      ENDIF
     14  1cff				   .CYCLES    SET	.CYCLES - 3
     15  1cff					      ENDIF
     16  1cff
     17  1cff				  -	      REPEAT	.CYCLES / 2
     18  1cff				  -	      nop
     19  1cff					      REPEND
    863  1cff		       4c 85 1a 	      jmp	loop3	; 31
    864  1d02
    865  1d02				   set_fetchers
    866  1d02		       ad 6d 1d 	      lda	dflow
    867  1d05		       8d 50 10 	      sta	DF0LOW
    868  1d08		       ad 75 1d 	      lda	dfhigh
    869  1d0b		       8d 68 10 	      sta	DF0HI
    870  1d0e
    871  1d0e		       ad 6e 1d 	      lda	dflow+1
    872  1d11		       8d 51 10 	      sta	DF1LOW
    873  1d14		       ad 76 1d 	      lda	dfhigh+1
    874  1d17		       8d 69 10 	      sta	DF1HI
    875  1d1a
    876  1d1a		       ad 6f 1d 	      lda	dflow+2
    877  1d1d		       8d 52 10 	      sta	DF2LOW
    878  1d20		       ad 77 1d 	      lda	dfhigh+2
    879  1d23		       8d 6a 10 	      sta	DF2HI
    880  1d26
    881  1d26				   set_fetchers36		; sets just 3-6
    882  1d26		       ad 70 1d 	      lda	dflow+3
    883  1d29		       8d 53 10 	      sta	DF3LOW
    884  1d2c		       ad 78 1d 	      lda	dfhigh+3
    885  1d2f		       8d 6b 10 	      sta	DF3HI
    886  1d32
    887  1d32		       ad 71 1d 	      lda	dflow+4
    888  1d35		       8d 54 10 	      sta	DF4LOW
    889  1d38		       ad 79 1d 	      lda	dfhigh+4
    890  1d3b		       8d 6c 10 	      sta	DF4HI
    891  1d3e
    892  1d3e		       ad 72 1d 	      lda	dflow+5
    893  1d41		       8d 55 10 	      sta	DF5LOW
    894  1d44		       ad 7a 1d 	      lda	dfhigh+5
    895  1d47		       8d 6d 10 	      sta	DF5HI
    896  1d4a
    897  1d4a		       ad 73 1d 	      lda	dflow+6
    898  1d4d		       8d 56 10 	      sta	DF6LOW
    899  1d50		       ad 7b 1d 	      lda	dfhigh+6
    900  1d53		       8d 6e 10 	      sta	DF6HI
    901  1d56
    902  1d56		       60		      rts
    903  1d57
    904  1d57							;9d bad
    905  1d57							; the below isn't quite right
    906  1d57							;DF0DATA: COLUP0
    907  1d57							;DF1DATA: COLUP1
    908  1d57							;DF2DATAW: GRP0
    909  1d57							;DF3DATA: GRP1 
    910  1d57							;DF4DATA: 2lk lines until repos/HMP1
    911  1d57							;DF5DATA: low byte of repo kernels (xpos mod 15)
    912  1d57							;DF6DATA: High byte of repo kernels (x pos div 15)
    913  1d57							;DF7DATA: Programmer's stack
    914  1d57							;DF0FRACDATA: PF1L
    915  1d57							;DF1FRACDATA: PF2L
    916  1d57							;DF4FRACDATA: COLUPF
    917  1d57							;DF2FRACDATA: PF2R
    918  1d57							;DF3FRACDATA: PF2L
    919  1d57							;DF5FRACDATA: Sprite NUSIZ1/REFP1 (only during repos)
    920  1d57							;DF6FRACDATA: COLUBK
    921  1d57							;DF7FRACDATA: HMP1
    922  1d57							;DF3FLAG: kernel exit loop ?? (use flags instead?)
    923  1d57							;DF0FLAG: ENAM0
    924  1d57							;DF1FLAG: ENAM1 
    925  1d57							;DF3FLAG: ENABL 
    926  1d57
    927  1d57				   fetcher_address_table
    928  1d57				   kernello
    929  1d57		       37		      .byte.b	<kernel1
    930  1d58		       59		      .byte.b	<kernel2
    931  1d59		       7b		      .byte.b	<kernel3
    932  1d5a		       9d		      .byte.b	<kernel4
    933  1d5b		       bf		      .byte.b	<kernel5
    934  1d5c		       e1		      .byte.b	<kernel6
    935  1d5d		       25		      .byte.b	<kernel7
    936  1d5e		       47		      .byte.b	<kernel8
    937  1d5f		       69		      .byte.b	<kernel9
    938  1d60		       91		      .byte.b	<kernel10
    939  1d61		       be		      .byte.b	<kernel11
    940  1d62				   kernelhi
    941  1d62		       1b		      .byte.b	>kernel1
    942  1d63		       1b		      .byte.b	>kernel2
    943  1d64		       1b		      .byte.b	>kernel3
    944  1d65		       1b		      .byte.b	>kernel4
    945  1d66		       1b		      .byte.b	>kernel5
    946  1d67		       1b		      .byte.b	>kernel6
    947  1d68		       1c		      .byte.b	>kernel7
    948  1d69		       1c		      .byte.b	>kernel8
    949  1d6a		       1c		      .byte.b	>kernel9
    950  1d6b		       1c		      .byte.b	>kernel10
    951  1d6c		       1c		      .byte.b	>kernel11
    952  1d6d				   dflow
    953  1d6d		       08		      .byte.b	<P0COLOR
    954  1d6e		       08		      .byte.b	<P1COLOR
    955  1d6f		       08		      .byte.b	<P0GFX
    956  1d70		       08		      .byte.b	<P1GFX
    957  1d71		       2d		      .byte.b	<P1SKIP
    958  1d72		       08		      .byte.b	<JUMPTABLELO
    959  1d73		       14		      .byte.b	<JUMPTABLEHI
    960  1d74		       a5		      .byte.b	<USERSTACK
    961  1d75				   dfhigh
    962  1d75		       05		      .byte.b	(>P0COLOR) & $0F
    963  1d76		       03		      .byte.b	(>P1COLOR) & $0F
    964  1d77		       04		      .byte.b	(>P0GFX) & $0F
    965  1d78		       02		      .byte.b	(>P1GFX) & $0F
    966  1d79		       0b		      .byte.b	(>P1SKIP) & $0F
    967  1d7a		       0b		      .byte.b	(>JUMPTABLELO) & $0F
    968  1d7b		       0b		      .byte.b	(>JUMPTABLEHI) & $0F
    969  1d7c		       0d		      .byte.b	(>USERSTACK) & $0F
    970  1d7d				   dffraclow
    971  1d7d		       08		      .byte.b	<PF1L
    972  1d7e		       08		      .byte.b	<PF2L
    973  1d7f		       08		      .byte.b	<PF1R
    974  1d80		       08		      .byte.b	<PF2R
    975  1d81		       08		      .byte.b	<PFCOLS
    976  1d82		       39		      .byte.b	<NUSIZREFP
    977  1d83		       a5		      .byte.b	<BKCOLS
    978  1d84		       20		      .byte.b	<P1HMP
    979  1d85				   dffrachi
    980  1d85		       06		      .byte.b	(>PF1L) & $0F
    981  1d86		       07		      .byte.b	(>PF2L) & $0F
    982  1d87		       08		      .byte.b	(>PF1R) & $0F
    983  1d88		       09		      .byte.b	(>PF2R) & $0F
    984  1d89		       0a		      .byte.b	(>PFCOLS) & $0F
    985  1d8a		       0b		      .byte.b	(>NUSIZREFP) & $0F
    986  1d8b		       0b		      .byte.b	(>BKCOLS) & $0F
    987  1d8c		       0b		      .byte.b	(>P1HMP) & $0F
    988  1d8d				   scorepointer
    989  1d8d		       94		      .byte.b	<scoretable
    990  1d8e		       08		      .byte.b	((>scoretable) & $0f) | (((>scoretable) / 2) & $70)
    991  1d8f				   scoresetup		; pointers to digit graphics
    992  1d8f		       45		      .byte.b	<scoredata
    993  1d90		       0b		      .byte.b	(>scoredata) & $0F
    994  1d91				   Hmval		; 112 wuz first
    995  1d91		       60 50 40 30*	      .byte.b	96, 80, 64, 48, 32, 16, 1, 240
    996  1d99				   Hmval74
    997  1d99		       e0 d0 c0 b0*	      .byte.b	224, 208, 192, 176, 160, 144, 128
    998  1da0		       60 50 40 30*	      .byte.b	96, 80, 64, 48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96
    999  1db0		       50 40 30 20*	      .byte.b	80, 64, 48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80
   1000  1dc0		       40 30 20 10*	      .byte.b	64, 48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64
   1001  1dd0		       30 20 10 01*	      .byte.b	48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48
   1002  1de0		       20 10 01 f0*	      .byte.b	32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32
   1003  1df0		       10 01 f0 e0*	      .byte.b	16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16
   1004  1e00		       01 f0 e0 d0*	      .byte.b	1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16, 1
   1005  1e10		       f0 e0 d0 c0*	      .byte.b	240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16, 1, 240
   1006  1e20		       e0 d0 c0 b0*	      .byte.b	224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16, 1, 240, 224, 208, 192
   1007  1e32		       b0 a0 90 80*	      .byte.b	176,160,144,128,16,1,240,224
   1008  1e3a
   1009  1e3a
   1010  1e3a				   kernel_setup
   1011  1e3a							;--position P0, top P1, M0, M1, BL
   1012  1e3a		       a2 00		      ldx	#0	; first sprite displayed
   1013  1e3c		       b5 85		      lda	SpriteGfxIndex,x
   1014  1e3e		       aa		      tax
   1015  1e3f		       b5 90		      lda	player1x,x
   1016  1e41		       c9 a0		      cmp	#160
   1017  1e43		       90 0a		      bcc	nostorep1
   1018  1e45		       c9 d0		      cmp	#208
   1019  1e47		       b0 02		      bcs	ksadjustdown
   1020  1e49							; 160-208: minus 160
   1021  1e49							;add 160 is like minus 96
   1022  1e49							; so minus 64
   1023  1e49		       e9 3f		      sbc	#63	;cc
   1024  1e4b				   ksadjustdown
   1025  1e4b							; 209-255: add 160 
   1026  1e4b		       69 9f		      adc	#159	; cs
   1027  1e4d		       95 90		      sta	player1x,x
   1028  1e4f				   nostorep1
   1029  1e4f		       85 02		      sta	WSYNC
   1030  1e51		       a2 04		      ldx	#4
   1031  1e53		       85 81		      sta	topP1x	; cache top p1
   1032  1e55				   HorPosLoop
   1033  1e55		       b5 80		      lda	player0x,X
   1034  1e57		       38		      sec
   1035  1e58				   DivideLoop
   1036  1e58		       e9 0f		      sbc	#15
   1037  1e5a		       b0 fc		      bcs	DivideLoop
      0  1e5c					      sleep	4
      1  1e5c				   .CYCLES    SET	4
      2  1e5c
      3  1e5c				  -	      IF	.CYCLES < 2
      4  1e5c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1e5c				  -	      ERR
      6  1e5c					      ENDIF
      7  1e5c
      8  1e5c				  -	      IF	.CYCLES & 1
      9  1e5c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1e5c				  -	      nop	0
     11  1e5c				  -	      ELSE
     12  1e5c				  -	      bit	VSYNC
     13  1e5c				  -	      ENDIF
     14  1e5c				  -.CYCLES    SET	.CYCLES - 3
     15  1e5c					      ENDIF
     16  1e5c
     17  1e5c					      REPEAT	.CYCLES / 2
     18  1e5c		       ea		      nop
     17  1e5c					      REPEND
     18  1e5d		       ea		      nop
     19  1e5e					      REPEND
   1039  1e5e		       95 10		      sta	RESP0,X
   1040  1e60		       85 02		      sta	WSYNC
   1041  1e62		       ca		      dex		;2
   1042  1e63		       10 f0		      bpl	HorPosLoop	;4/5
   1043  1e65
   1044  1e65		       a4 80		      ldy	player0x	; 7
   1045  1e67		       b9 91 1d 	      lda	Hmval,y	; 11
   1046  1e6a		       85 20		      sta	HMP0	; 14
   1047  1e6c
   1048  1e6c		       a4 81		      ldy	player0x+1
   1049  1e6e		       b9 91 1d 	      lda	Hmval,y
   1050  1e71		       85 21		      sta	HMP0+1	; 24
   1051  1e73
   1052  1e73		       a4 82		      ldy	player0x+2
   1053  1e75		       b9 91 1d 	      lda	Hmval,y
   1054  1e78		       85 22		      sta	HMP0+2	; 34
   1055  1e7a
   1056  1e7a		       a4 83		      ldy	player0x+3
   1057  1e7c		       b9 91 1d 	      lda	Hmval,y
   1058  1e7f		       85 23		      sta	HMP0+3	; 44
   1059  1e81
   1060  1e81		       a4 84		      ldy	player0x+4
   1061  1e83		       b9 91 1d 	      lda	Hmval,y
   1062  1e86		       85 24		      sta	HMP0+4	; 54
   1063  1e88
   1064  1e88		       85 02		      sta	WSYNC
   1065  1e8a		       85 2a		      sta	HMOVE
   1066  1e8c
   1067  1e8c				   myrts
   1068  1e8c		       60		      rts
   1069  1e8d
   1070  1e8d
   1071  1e8d				   pfsetup
   1072  1e8d
   1073  1e8d		       84 cb		      sty	temp1
   1074  1e8f		       85 cc		      sta	temp2
   1075  1e91		       86 cd		      stx	temp3
   1076  1e93		       a2 03		      ldx	#3
   1077  1e95				   pfsetupp
   1078  1e95		       bd 7d 1d 	      lda	dffraclow,x
   1079  1e98		       9d 50 10 	      sta	DF0LOW,x
   1080  1e9b		       bd 85 1d 	      lda	dffrachi,x
   1081  1e9e		       9d 68 10 	      sta	DF0HI,x
   1082  1ea1		       a5 cc		      lda	temp2
   1083  1ea3		       8d 59 10 	      sta	PARAMETER
   1084  1ea6		       a5 cd		      lda	temp3
   1085  1ea8		       8d 59 10 	      sta	PARAMETER
   1086  1eab		       8e 59 10 	      stx	PARAMETER
   1087  1eae		       8c 59 10 	      sty	PARAMETER
   1088  1eb1		       a9 01		      LDA	#1
   1089  1eb3		       8d 5a 10 	      sta	CALLFUNCTION
   1090  1eb6		       18		      clc
   1091  1eb7		       a5 cc		      lda	temp2
   1092  1eb9		       65 cb		      adc	temp1
   1093  1ebb		       85 cc		      sta	temp2
   1094  1ebd		       a5 cd		      lda	temp3
   1095  1ebf		       69 00		      adc	#0
   1096  1ec1		       85 cd		      sta	temp3
   1097  1ec3		       ca		      dex
   1098  1ec4		       10 cf		      bpl	pfsetupp
      0  1ec6					      RETURN
      1  1ec6				  -	      ifnconst	bankswitch
      2  1ec6				  -	      rts
      3  1ec6					      else
      4  1ec6		       4c e0 df 	      jmp	BS_return
      5  1ec9					      endif
   1100  1ec9
   1101  1ec9
   1102  1ec9				   scorekernel
   1103  1ec9				  -	      ifconst	minikernel
   1104  1ec9				  -			;; disable fast fetch, call the minikernel, and re-enable fast fetch
   1105  1ec9				  -	      lda	#255
   1106  1ec9				  -	      sta	FASTFETCH
   1107  1ec9				  -	      jsr	minikernel
   1108  1ec9				  -	      lda	#0
   1109  1ec9				  -	      sta.w	FASTFETCH
   1110  1ec9					      endif
   1111  1ec9		       a6 eb		      ldx	scorecolor
   1112  1ecb		       86 06		      stx	COLUP0
   1113  1ecd		       86 07		      stx	COLUP1
   1114  1ecf		       a2 00		      ldx	#0
   1115  1ed1		       86 0e		      STx	PF1
   1116  1ed3		       86 0b		      stx	REFP0
   1117  1ed5		       86 0c		      stx	REFP1
   1118  1ed7		       86 1b		      STx	GRP0
   1119  1ed9		       86 1c		      STx	GRP1
   1120  1edb		       86 0f		      STx	PF2
   1121  1edd		       86 2b		      stx	HMCLR
   1122  1edf		       86 1d		      stx	ENAM0
   1123  1ee1		       86 1e		      stx	ENAM1
   1124  1ee3		       86 1f		      stx	ENABL
   1125  1ee5
   1126  1ee5
   1127  1ee5					      ifconst	pfscore
   1128  1ee5		       a5 c6		      lda	pfscorecolor
   1129  1ee7		       85 08		      sta	COLUPF
   1130  1ee9					      endif
   1131  1ee9
   1132  1ee9				  -	      ifconst	noscore
   1133  1ee9				  -	      ldx	#10
   1134  1ee9				  -noscoreloop
   1135  1ee9				  -	      sta	WSYNC
   1136  1ee9				  -	      dex
   1137  1ee9				  -	      bpl	noscoreloop
   1138  1ee9				  -	      rts
   1139  1ee9					      else
   1140  1ee9
   1141  1ee9		       85 2b		      sta	HMCLR
   1142  1eeb		       a2 f0		      ldx	#$f0
   1143  1eed		       86 20		      stx	HMP0
   1144  1eef
   1145  1eef							; set up fetchers 0-5 to handle score digits
   1146  1eef		       a2 45		      ldx	#<(scoredata)
   1147  1ef1		       8e 56 10 	      stx	DF6LOW
   1148  1ef4		       a2 0b		      ldx	#(>(scoredata)) & $0F
   1149  1ef6		       8e 6e 10 	      stx	DF6HI
   1150  1ef9		       a2 4d		      ldx	#<(scoredata+8)
   1151  1efb		       8e 50 10 	      stx	DF0LOW
   1152  1efe		       a2 0b		      ldx	#(>(scoredata+8)) & $0F
   1153  1f00		       8e 68 10 	      stx	DF0HI
   1154  1f03		       a2 55		      ldx	#<(scoredata+16)
   1155  1f05		       8e 51 10 	      stx	DF1LOW
   1156  1f08							; cycle 0??
   1157  1f08		       a2 0b		      ldx	#(>(scoredata+16)) & $0F
   1158  1f0a		       8e 69 10 	      stx	DF1HI
   1159  1f0d		       a2 5d		      ldx	#<(scoredata+24)
   1160  1f0f		       8e 52 10 	      stx	DF2LOW
   1161  1f12		       a2 0b		      ldx	#(>(scoredata+24)) & $0F
   1162  1f14		       8e 6a 10 	      stx	DF2HI
   1163  1f17
   1164  1f17		       85 02		      sta	WSYNC
   1165  1f19		       a2 00		      ldx	#0
   1166  1f1b		       86 1b		      STx	GRP0
   1167  1f1d		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   1168  1f1f
   1169  1f1f		       a2 65		      ldx	#<(scoredata+32)
   1170  1f21		       8e 53 10 	      stx	DF3LOW
   1171  1f24		       a2 0b		      ldx	#(>(scoredata+32)) & $0F
   1172  1f26		       8e 6b 10 	      stx	DF3HI
   1173  1f29		       a2 6d		      ldx	#<(scoredata+40)
   1174  1f2b		       8e 54 10 	      stx	DF4LOW
   1175  1f2e		       a2 0b		      ldx	#(>(scoredata+40)) & $0F
   1176  1f30		       8e 6c 10 	      stx	DF4HI
   1177  1f33
   1178  1f33		       a0 07		      LDY	#7
   1179  1f35		       a2 03		      LDx	#$03
   1180  1f37		       84 25		      STY	VDELP0
   1181  1f39		       85 10		      STA	RESP0
   1182  1f3b		       85 11		      STA	RESP1
   1183  1f3d		       84 cb		      sty	temp1
   1184  1f3f
   1185  1f3f		       86 04		      STx	NUSIZ0
   1186  1f41		       86 05		      STx	NUSIZ1
   1187  1f43		       86 26		      STx	VDELP1
   1188  1f45		       a2 75		      ldx	#<(scoredata+48)
   1189  1f47		       8e 55 10 	      stx	DF5LOW
   1190  1f4a		       a2 0b		      ldx	#(>(scoredata+48)) & $0F
   1191  1f4c		       8e 6d 10 	      stx	DF5HI
   1192  1f4f		       8d 2a 00 	      STA.w	HMOVE	; cycle 73 ?
   1193  1f52				   scoreloop
   1194  1f52		       a9 0e		      lda	#<DF6DATA	;59
   1195  1f54		       85 06		      sta	COLUP0	;62
   1196  1f56		       85 07		      sta	COLUP1	;65
   1197  1f58		       a9 09		      lda	#<DF1DATA	;75
   1198  1f5a		       85 1b		      sta	GRP0	;2
   1199  1f5c		       a9 08		      lda	#<DF0DATA	;4
   1200  1f5e		       85 1c		      sta	GRP1	;7
   1201  1f60		       a9 0b		      lda	#<DF3DATA	;9
   1202  1f62		       85 1b		      sta	GRP0	;12
   1203  1f64
   1204  1f64							; REVENG - rearranged to correct pf write timing and A register overwrite
   1205  1f64					      ifconst	pfscore
   1206  1f64		       a5 c8		      lda	pfscore1
   1207  1f66		       85 0e		      sta	PF1
   1208  1f68				  -	      else
   1209  1f68				  -	      sleep	6
   1210  1f68					      endif
      0  1f68					      sleep	5
      1  1f68				   .CYCLES    SET	5
      2  1f68
      3  1f68				  -	      IF	.CYCLES < 2
      4  1f68				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f68				  -	      ERR
      6  1f68					      ENDIF
      7  1f68
      8  1f68					      IF	.CYCLES & 1
      9  1f68					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f68		       04 00		      nop	0
     11  1f6a				  -	      ELSE
     12  1f6a				  -	      bit	VSYNC
     13  1f6a					      ENDIF
     14  1f6a				   .CYCLES    SET	.CYCLES - 3
     15  1f6a					      ENDIF
     16  1f6a
     17  1f6a					      REPEAT	.CYCLES / 2
     18  1f6a		       ea		      nop
     19  1f6b					      REPEND
   1212  1f6b		       ae 0a 10 	      ldx	DF2DATA	;16
   1213  1f6e		       ac 0d 10 	      ldy	DF5DATA	;20
   1214  1f71		       a9 0c		      lda	#<DF4DATA	;22 
   1215  1f73
   1216  1f73		       86 1c		      stx	GRP1	;40
   1217  1f75		       84 1b		      sty	GRP0	;43
   1218  1f77		       85 1c		      sta	GRP1	;46
   1219  1f79		       85 1b		      sta	GRP0	;49
   1220  1f7b					      ifconst	pfscore
   1221  1f7b		       a5 c9		      lda	pfscore2
   1222  1f7d		       85 0e		      sta	PF1
   1223  1f7f				  -	      else
   1224  1f7f				  -	      sleep	6
   1225  1f7f					      endif
   1226  1f7f							; sleep 2 ;57
      0  1f7f					      sleep	6
      1  1f7f				   .CYCLES    SET	6
      2  1f7f
      3  1f7f				  -	      IF	.CYCLES < 2
      4  1f7f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f7f				  -	      ERR
      6  1f7f					      ENDIF
      7  1f7f
      8  1f7f				  -	      IF	.CYCLES & 1
      9  1f7f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f7f				  -	      nop	0
     11  1f7f				  -	      ELSE
     12  1f7f				  -	      bit	VSYNC
     13  1f7f				  -	      ENDIF
     14  1f7f				  -.CYCLES    SET	.CYCLES - 3
     15  1f7f					      ENDIF
     16  1f7f
     17  1f7f					      REPEAT	.CYCLES / 2
     18  1f7f		       ea		      nop
     17  1f7f					      REPEND
     18  1f80		       ea		      nop
     17  1f80					      REPEND
     18  1f81		       ea		      nop
     19  1f82					      REPEND
   1228  1f82		       c6 cb		      dec	temp1	;70
   1229  1f84		       10 cc		      bpl	scoreloop	;72/73
   1230  1f86		       a2 00		      LDx	#0
   1231  1f88		       86 0e		      stx	PF1
   1232  1f8a		       86 1b		      STx	GRP0
   1233  1f8c		       86 1c		      STx	GRP1
   1234  1f8e		       86 25		      STx	VDELP0
   1235  1f90		       86 26		      STx	VDELP1	;do we need these
   1236  1f92		       86 04		      STx	NUSIZ0
   1237  1f94		       86 05		      STx	NUSIZ1
   1238  1f96
   1239  1f96		       60		      rts
   1240  1f97
   1241  1f97
   1242  1f97					      endif		; noscore
   1243  1f97				   game
   1244  1f97				   .
   1245  1f97							; 
   1246  1f97
   1247  1f97				   .
   1248  1f97							; 
   1249  1f97
   1250  1f97				   .
   1251  1f97							; 
   1252  1f97
   1253  1f97				   .L00 		;  set kernel DPC + 
   1254  1f97
   1255  1f97				   .L01 		;  set optimization inlinerand
   1256  1f97
   1257  1f97				   .L02 		;  set kernel_options collision(player1,playfield)
   1258  1f97
   1259  1f97		       00 43	   DPC_kernel_options =	CXP1FB+$40
   1260  1f97				   .L03 		;  set smartbranching on
   1261  1f97
   1262  1f97				   .L04 		;  set tv ntsc
   1263  1f97
   1264  1f97				   .
   1265  1f97							; 
   1266  1f97
   1267  1f97				   .
   1268  1f97							; 
   1269  1f97
   1270  1f97				   .L05 		;  const font	=  retroputer
   1271  1f97
   1272  1f97				   .L06 		;  const _00  =  $00
   1273  1f97
   1274  1f97				   .L07 		;  const _02  =  $02
   1275  1f97
   1276  1f97				   .L08 		;  const _04  =  $04
   1277  1f97
   1278  1f97				   .L09 		;  const _06  =  $06
   1279  1f97
   1280  1f97				   .L010		;  const _08  =  $08
   1281  1f97
   1282  1f97				   .L011		;  const _0A  =  $0A
   1283  1f97
   1284  1f97				   .L012		;  const _0C  =  $0C
   1285  1f97
   1286  1f97				   .L013		;  const _0E  =  $0E
   1287  1f97
   1288  1f97				   .L014		;  const _10  =  $10
   1289  1f97
   1290  1f97				   .L015		;  const _12  =  $12
   1291  1f97
   1292  1f97				   .L016		;  const _14  =  $14
   1293  1f97
   1294  1f97				   .L017		;  const _16  =  $16
   1295  1f97
   1296  1f97				   .L018		;  const _18  =  $18
   1297  1f97
   1298  1f97				   .L019		;  const _1A  =  $1A
   1299  1f97
   1300  1f97				   .L020		;  const _1C  =  $1C
   1301  1f97
   1302  1f97				   .L021		;  const _1E  =  $1E
   1303  1f97
   1304  1f97				   .L022		;  const _20  =  $20
   1305  1f97
   1306  1f97				   .L023		;  const _22  =  $22
   1307  1f97
   1308  1f97				   .L024		;  const _24  =  $24
   1309  1f97
   1310  1f97				   .L025		;  const _26  =  $26
   1311  1f97
   1312  1f97				   .L026		;  const _28  =  $28
   1313  1f97
   1314  1f97				   .L027		;  const _2A  =  $2A
   1315  1f97
   1316  1f97				   .L028		;  const _2C  =  $2C
   1317  1f97
   1318  1f97				   .L029		;  const _2E  =  $2E
   1319  1f97
   1320  1f97				   .L030		;  const _30  =  $30
   1321  1f97
   1322  1f97				   .L031		;  const _32  =  $32
   1323  1f97
   1324  1f97				   .L032		;  const _34  =  $34
   1325  1f97
   1326  1f97				   .L033		;  const _36  =  $36
   1327  1f97
   1328  1f97				   .L034		;  const _38  =  $38
   1329  1f97
   1330  1f97				   .L035		;  const _3A  =  $3A
   1331  1f97
   1332  1f97				   .L036		;  const _3C  =  $3C
   1333  1f97
   1334  1f97				   .L037		;  const _3E  =  $3E
   1335  1f97
   1336  1f97				   .L038		;  const _40  =  $40
   1337  1f97
   1338  1f97				   .L039		;  const _42  =  $42
   1339  1f97
   1340  1f97				   .L040		;  const _44  =  $44
   1341  1f97
   1342  1f97				   .L041		;  const _46  =  $46
   1343  1f97
   1344  1f97				   .L042		;  const _48  =  $48
   1345  1f97
   1346  1f97				   .L043		;  const _4A  =  $4A
   1347  1f97
   1348  1f97				   .L044		;  const _4C  =  $4C
   1349  1f97
   1350  1f97				   .L045		;  const _4E  =  $4E
   1351  1f97
   1352  1f97				   .L046		;  const _50  =  $50
   1353  1f97
   1354  1f97				   .L047		;  const _52  =  $52
   1355  1f97
   1356  1f97				   .L048		;  const _54  =  $54
   1357  1f97
   1358  1f97				   .L049		;  const _56  =  $56
   1359  1f97
   1360  1f97				   .L050		;  const _58  =  $58
   1361  1f97
   1362  1f97				   .L051		;  const _5A  =  $5A
   1363  1f97
   1364  1f97				   .L052		;  const _5C  =  $5C
   1365  1f97
   1366  1f97				   .L053		;  const _5E  =  $5E
   1367  1f97
   1368  1f97				   .L054		;  const _60  =  $60
   1369  1f97
   1370  1f97				   .L055		;  const _62  =  $62
   1371  1f97
   1372  1f97				   .L056		;  const _64  =  $64
   1373  1f97
   1374  1f97				   .L057		;  const _66  =  $66
   1375  1f97
   1376  1f97				   .L058		;  const _68  =  $68
   1377  1f97
   1378  1f97				   .L059		;  const _6A  =  $6A
   1379  1f97
   1380  1f97				   .L060		;  const _6C  =  $6C
   1381  1f97
   1382  1f97				   .L061		;  const _6E  =  $6E
   1383  1f97
   1384  1f97				   .L062		;  const _70  =  $70
   1385  1f97
   1386  1f97				   .L063		;  const _72  =  $72
   1387  1f97
   1388  1f97				   .L064		;  const _74  =  $74
   1389  1f97
   1390  1f97				   .L065		;  const _76  =  $76
   1391  1f97
   1392  1f97				   .L066		;  const _78  =  $78
   1393  1f97
   1394  1f97				   .L067		;  const _7A  =  $7A
   1395  1f97
   1396  1f97				   .L068		;  const _7C  =  $7C
   1397  1f97
   1398  1f97				   .L069		;  const _7E  =  $7E
   1399  1f97
   1400  1f97				   .L070		;  const _80  =  $80
   1401  1f97
   1402  1f97				   .L071		;  const _82  =  $82
   1403  1f97
   1404  1f97				   .L072		;  const _84  =  $84
   1405  1f97
   1406  1f97				   .L073		;  const _86  =  $86
   1407  1f97
   1408  1f97				   .L074		;  const _88  =  $88
   1409  1f97
   1410  1f97				   .L075		;  const _8A  =  $8A
   1411  1f97
   1412  1f97				   .L076		;  const _8C  =  $8C
   1413  1f97
   1414  1f97				   .L077		;  const _8E  =  $8E
   1415  1f97
   1416  1f97				   .L078		;  const _90  =  $90
   1417  1f97
   1418  1f97				   .L079		;  const _92  =  $92
   1419  1f97
   1420  1f97				   .L080		;  const _94  =  $94
   1421  1f97
   1422  1f97				   .L081		;  const _96  =  $96
   1423  1f97
   1424  1f97				   .L082		;  const _98  =  $98
   1425  1f97
   1426  1f97				   .L083		;  const _9A  =  $9A
   1427  1f97
   1428  1f97				   .L084		;  const _9C  =  $9C
   1429  1f97
   1430  1f97				   .L085		;  const _9E  =  $9E
   1431  1f97
   1432  1f97				   .L086		;  const _A0  =  $A0
   1433  1f97
   1434  1f97				   .L087		;  const _A2  =  $A2
   1435  1f97
   1436  1f97				   .L088		;  const _A4  =  $A4
   1437  1f97
   1438  1f97				   .L089		;  const _A6  =  $A6
   1439  1f97
   1440  1f97				   .L090		;  const _A8  =  $A8
   1441  1f97
   1442  1f97				   .L091		;  const _AA  =  $AA
   1443  1f97
   1444  1f97				   .L092		;  const _AC  =  $AC
   1445  1f97
   1446  1f97				   .L093		;  const _AE  =  $AE
   1447  1f97
   1448  1f97				   .L094		;  const _B0  =  $B0
   1449  1f97
   1450  1f97				   .L095		;  const _B2  =  $B2
   1451  1f97
   1452  1f97				   .L096		;  const _B4  =  $B4
   1453  1f97
   1454  1f97				   .L097		;  const _B6  =  $B6
   1455  1f97
   1456  1f97				   .L098		;  const _B8  =  $B8
   1457  1f97
   1458  1f97				   .L099		;  const _BA  =  $BA
   1459  1f97
   1460  1f97				   .L0100		;  const _BC  =  $BC
   1461  1f97
   1462  1f97				   .L0101		;  const _BE  =  $BE
   1463  1f97
   1464  1f97				   .L0102		;  const _C0  =  $C0
   1465  1f97
   1466  1f97				   .L0103		;  const _C2  =  $C2
   1467  1f97
   1468  1f97				   .L0104		;  const _C4  =  $C4
   1469  1f97
   1470  1f97				   .L0105		;  const _C6  =  $C6
   1471  1f97
   1472  1f97				   .L0106		;  const _C8  =  $C8
   1473  1f97
   1474  1f97				   .L0107		;  const _CA  =  $CA
   1475  1f97
   1476  1f97				   .L0108		;  const _CC  =  $CC
   1477  1f97
   1478  1f97				   .L0109		;  const _CE  =  $CE
   1479  1f97
   1480  1f97				   .L0110		;  const _D0  =  $D0
   1481  1f97
   1482  1f97				   .L0111		;  const _D2  =  $D2
   1483  1f97
   1484  1f97				   .L0112		;  const _D4  =  $D4
   1485  1f97
   1486  1f97				   .L0113		;  const _D6  =  $D6
   1487  1f97
   1488  1f97				   .L0114		;  const _D8  =  $D8
   1489  1f97
   1490  1f97				   .L0115		;  const _DA  =  $DA
   1491  1f97
   1492  1f97				   .L0116		;  const _DC  =  $DC
   1493  1f97
   1494  1f97				   .L0117		;  const _DE  =  $DE
   1495  1f97
   1496  1f97				   .L0118		;  const _E0  =  $E0
   1497  1f97
   1498  1f97				   .L0119		;  const _E2  =  $E2
   1499  1f97
   1500  1f97				   .L0120		;  const _E4  =  $E4
   1501  1f97
   1502  1f97				   .L0121		;  const _E6  =  $E6
   1503  1f97
   1504  1f97				   .L0122		;  const _E8  =  $E8
   1505  1f97
   1506  1f97				   .L0123		;  const _EA  =  $EA
   1507  1f97
   1508  1f97				   .L0124		;  const _EC  =  $EC
   1509  1f97
   1510  1f97				   .L0125		;  const _EE  =  $EE
   1511  1f97
   1512  1f97				   .L0126		;  const _F0  =  $F0
   1513  1f97
   1514  1f97				   .L0127		;  const _F2  =  $F2
   1515  1f97
   1516  1f97				   .L0128		;  const _F4  =  $F4
   1517  1f97
   1518  1f97				   .L0129		;  const _F6  =  $F6
   1519  1f97
   1520  1f97				   .L0130		;  const _F8  =  $F8
   1521  1f97
   1522  1f97				   .L0131		;  const _FA  =  $FA
   1523  1f97
   1524  1f97				   .L0132		;  const _FC  =  $FC
   1525  1f97
   1526  1f97				   .L0133		;  const _FE  =  $FE
   1527  1f97
   1528  1f97				   .
   1529  1f97							; 
   1530  1f97
   1531  1f97				   .L0134		;  goto __Bank_2 bank2
   1532  1f97
   1533  1f97		       85 81		      sta	temp7
   1534  1f99		       a9 30		      lda	#>(.__Bank_2-1)
   1535  1f9b		       48		      pha
   1536  1f9c		       a9 ed		      lda	#<(.__Bank_2-1)
   1537  1f9e		       48		      pha
   1538  1f9f		       a5 81		      lda	temp7
   1539  1fa1		       48		      pha
   1540  1fa2		       8a		      txa
   1541  1fa3		       48		      pha
   1542  1fa4		       a2 02		      ldx	#2
   1543  1fa6		       4c ee df 	      jmp	BS_jsr
   1544  1fa9				   .
   1545  1fa9							; 
   1546  1fa9
   1547  1fa9				   .L0135		;  bank 2
   1548  1fa9
   1549  1fa9					      if	ECHO1
      43 bytes of ROM space left in bank 1
   1550  1fa9					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   1551  1fa9					      endif
   1552  1fa9		       00 01	   ECHO1      =	1
   1553  1fd4					      ORG	$1FF4-bscode_length
   1554  1fd4					      RORG	$1FF4-bscode_length
   1555  1fd4		       a2 ff	   start_bank1 ldx	#$ff
   1556  1fd6					      ifconst	FASTFETCH	; using DPC+
   1557  1fd6		       8e 58 10 	      stx	FASTFETCH
   1558  1fd9					      endif
   1559  1fd9		       9a		      txs
   1560  1fda				  -	      if	bankswitch == 64
   1561  1fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   1562  1fda					      else
   1563  1fda		       a9 18		      lda	#>(start-1)
   1564  1fdc					      endif
   1565  1fdc		       48		      pha
   1566  1fdd		       a9 e3		      lda	#<(start-1)
   1567  1fdf		       48		      pha
   1568  1fe0		       48		      pha
   1569  1fe1		       8a		      txa
   1570  1fe2		       48		      pha
   1571  1fe3		       ba		      tsx
   1572  1fe4					      if	bankswitch != 64
   1573  1fe4		       b5 04		      lda	4,x	; get high byte of return address
   1574  1fe6		       2a		      rol
   1575  1fe7		       2a		      rol
   1576  1fe8		       2a		      rol
   1577  1fe9		       2a		      rol
   1578  1fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   1579  1fec		       aa		      tax
   1580  1fed		       e8		      inx
   1581  1fee				  -	      else
   1582  1fee				  -	      lda	4,x	; get high byte of return address
   1583  1fee				  -	      tay
   1584  1fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   1585  1fee				  -	      sta	4,x
   1586  1fee				  -	      tya
   1587  1fee				  -	      lsr
   1588  1fee				  -	      lsr
   1589  1fee				  -	      lsr
   1590  1fee				  -	      lsr
   1591  1fee				  -	      tax
   1592  1fee				  -	      inx
   1593  1fee					      endif
   1594  1fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   1595  1ff1		       68		      pla
   1596  1ff2		       aa		      tax
   1597  1ff3		       68		      pla
   1598  1ff4		       60		      rts
   1599  1ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   1600  1ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   1601  1ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   1602  1ff5					      endif
   1603  1ffc					      ORG	$1FFC
   1604  1ffc					      RORG	$1FFC
   1605  1ffc		       d4 1f		      .word.w	(start_bank1 & $ffff)
   1606  1ffe		       d4 1f		      .word.w	(start_bank1 & $ffff)
   1607  2000					      ORG	$2000
   1608  2000					      RORG	$3000
   1609  2000				   HMdiv
   1610  2000		       00 00 00 00*	      .byte.b	0, 0, 0, 0, 0, 0, 0
   1611  2007		       01 01 01 01*	      .byte.b	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
   1612  2017		       02 02 02 02*	      .byte.b	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3
   1613  2027		       03 03 03 03*	      .byte.b	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4
   1614  2037		       04 04 04 04*	      .byte.b	4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5
   1615  2047		       05 05 05 05*	      .byte.b	5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6
   1616  2057		       06 06 06 06*	      .byte.b	6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7
   1617  2067		       07 07 07 07*	      .byte.b	7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8
   1618  2077		       08 08 08 08*	      .byte.b	8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9
   1619  2087		       09 09 09 09*	      .byte.b	9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10
   1620  2097		       0a 0a 0a 0a*	      .byte.b	10,10,10,10,10,10,0,0,0
   1621  20a0				   .L0136		;  temp1 = temp1
   1622  20a0
   1623  20a0		       a5 cb		      LDA	temp1
   1624  20a2		       85 cb		      STA	temp1
   1625  20a4				   .__Reset
   1626  20a4							; __Reset
   1627  20a4
   1628  20a4				   .
   1629  20a4							; 
   1630  20a4
   1631  20a4				   .
   1632  20a4							; 
   1633  20a4
   1634  20a4				   .L0137		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   1635  20a4
   1636  20a4		       a9 00		      LDA	#0
   1637  20a6		       85 d1		      STA	a
   1638  20a8		       85 d2		      STA	b
   1639  20aa		       85 d3		      STA	c
   1640  20ac		       85 d4		      STA	d
   1641  20ae		       85 d5		      STA	e
   1642  20b0		       85 d6		      STA	f
   1643  20b2		       85 d7		      STA	g
   1644  20b4		       85 d8		      STA	h
   1645  20b6		       85 d9		      STA	i
   1646  20b8				   .L0138		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   1647  20b8
   1648  20b8		       a9 00		      LDA	#0
   1649  20ba		       85 da		      STA	j
   1650  20bc		       85 db		      STA	k
   1651  20be		       85 dc		      STA	l
   1652  20c0		       85 dd		      STA	m
   1653  20c2		       85 de		      STA	n
   1654  20c4		       85 df		      STA	o
   1655  20c6		       85 e0		      STA	p
   1656  20c8		       85 e1		      STA	q
   1657  20ca		       85 e2		      STA	r
   1658  20cc				   .L0139		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  y  =  0  :	z  =  0  :  var0  =  0
   1659  20cc
   1660  20cc		       a9 00		      LDA	#0
   1661  20ce		       85 e3		      STA	s
   1662  20d0		       85 e4		      STA	t
   1663  20d2		       85 e5		      STA	u
   1664  20d4		       85 e6		      STA	v
   1665  20d6		       85 e7		      STA	w
   1666  20d8		       85 e8		      STA	x
   1667  20da		       85 e9		      STA	y
   1668  20dc		       85 ea		      STA	z
   1669  20de		       85 ec		      STA	var0
   1670  20e0				   .L0140		;  var1  =  0	:  var2  =  0  :  var3	=  0  :  var4  =  0  :	var5  =  0  :  var6  =	0
   1671  20e0
   1672  20e0		       a9 00		      LDA	#0
   1673  20e2		       85 ed		      STA	var1
   1674  20e4		       85 ee		      STA	var2
   1675  20e6		       85 ef		      STA	var3
   1676  20e8		       85 f0		      STA	var4
   1677  20ea		       85 f1		      STA	var5
   1678  20ec		       85 f2		      STA	var6
   1679  20ee				   .
   1680  20ee							; 
   1681  20ee
   1682  20ee				   .__Bank_2
   1683  20ee							; __Bank_2
   1684  20ee
   1685  20ee				   .
   1686  20ee							; 
   1687  20ee
   1688  20ee				   .__Variables
   1689  20ee							; __Variables
   1690  20ee
   1691  20ee				   .
   1692  20ee							; 
   1693  20ee
   1694  20ee				   .L0141		;  const _P_Edge_Top  =  9
   1695  20ee
   1696  20ee				   .L0142		;  const _P_Edge_Bottom  =  160
   1697  20ee
   1698  20ee				   .L0143		;  const _P_Edge_Left	=  0
   1699  20ee
   1700  20ee				   .L0144		;  const _P_Edge_Right  =  150
   1701  20ee
   1702  20ee				   .L0145		;  const REdge  = 79
   1703  20ee
   1704  20ee				   .L0146		;  const LEdge  =  71
   1705  20ee
   1706  20ee				   .L0147		;  const pfscore  =  1
   1707  20ee
   1708  20ee				   .L0148		;  dim EnemyHit  =  i
   1709  20ee
   1710  20ee				   .L0149		;  dim drop  =  a
   1711  20ee
   1712  20ee				   .L0150		;  dim Moverate  = b
   1713  20ee
   1714  20ee				   .L0151		;  dim EnemySpeed  =  c
   1715  20ee
   1716  20ee				   .L0152		;  dim Points	=  d
   1717  20ee
   1718  20ee				   .L0153		;  dim frame  = f
   1719  20ee
   1720  20ee				   .L0154		;  dim Bit2_EnemyMove	= z
   1721  20ee
   1722  20ee				   .L0155		;  dim level  =  l
   1723  20ee
   1724  20ee				   .L0156		;  dim Bit1_missleOn  = z
   1725  20ee
   1726  20ee				   .L0157		;  dim HealthDrop  =  n
   1727  20ee
   1728  20ee				   .L0158		;  dim delay  =  o
   1729  20ee
   1730  20ee				   .L0159		;  dim Bit3_ShootorNot  = z
   1731  20ee
   1732  20ee				   .L0160		;  dim Househit  =  q
   1733  20ee
   1734  20ee				   .L0161		;  dim Timer  = t
   1735  20ee
   1736  20ee				   .L0162		;  dim Bit4_gameover  =  z
   1737  20ee
   1738  20ee				   .L0163		;  dim Bit6_PLayer3Direction  = z
   1739  20ee
   1740  20ee				   .L0164		;  dim Bit7_PLayer3Moving  = z
   1741  20ee
   1742  20ee				   .L0165		;  dim V1  =  h
   1743  20ee
   1744  20ee				   .L0166		;  dim Ch1_Sound  =  j
   1745  20ee
   1746  20ee				   .L0167		;  dim Ch1_Duration  =  k
   1747  20ee
   1748  20ee				   .L0168		;  dim Ch1_Counter  =	p
   1749  20ee
   1750  20ee				   .L0169		;  dim V0  =  v
   1751  20ee
   1752  20ee				   .L0170		;  dim Ch0_Sound  =  w
   1753  20ee
   1754  20ee				   .L0171		;  dim Ch0_Duration  =  x
   1755  20ee
   1756  20ee				   .L0172		;  dim Ch0_Counter  =	y
   1757  20ee
   1758  20ee				   .L0173		;  dim Bit5_hit  =  z
   1759  20ee
   1760  20ee				   .L0174		;  dim Bit0_NewLevel  =  z
   1761  20ee
   1762  20ee				   .L0175		;  dim PlayerDamage  =  m
   1763  20ee
   1764  20ee				   .L0176		;  dim gamenumber = u
   1765  20ee
   1766  20ee				   .L0177		;  dim swdebounce = v
   1767  20ee
   1768  20ee				   .L0178		;  dim PlayerHealth  =  e
   1769  20ee
   1770  20ee				   .L0179		;  dim Damage	=  var1
   1771  20ee
   1772  20ee				   .L0180		;  dim Powerup  =  var2
   1773  20ee
   1774  20ee				   .L0181		;  dim EnemyMissilerate  =  var3
   1775  20ee
   1776  20ee				   .L0182		;  dim PlayerMissileRate  =  var4
   1777  20ee
   1778  20ee				   .L0183		;  swdebounce = 0
   1779  20ee
   1780  20ee		       a9 00		      LDA	#0
   1781  20f0		       85 e6		      STA	swdebounce
   1782  20f2				   .L0184		;  gamenumber = 1
   1783  20f2
   1784  20f2		       a9 01		      LDA	#1
   1785  20f4		       85 e5		      STA	gamenumber
   1786  20f6				   .L0185		;  level  = 1
   1787  20f6
   1788  20f6		       a9 01		      LDA	#1
   1789  20f8		       85 dc		      STA	level
   1790  20fa				   .
   1791  20fa							; 
   1792  20fa
   1793  20fa				   .__titlepage
   1794  20fa							; __titlepage
   1795  20fa
   1796  20fa				   .L0186		;  delay  =  delay  + 1
   1797  20fa
   1798  20fa		       e6 df		      INC	delay
   1799  20fc				   .L0187		;  gosub __Titlesceen bank6
   1800  20fc
   1801  20fc		       85 81		      sta	temp7
   1802  20fe		       a9 31		      lda	#>(ret_point1-1)
   1803  2100		       48		      pha
   1804  2101		       a9 13		      lda	#<(ret_point1-1)
   1805  2103		       48		      pha
   1806  2104		       a9 b0		      lda	#>(.__Titlesceen-1)
   1807  2106		       48		      pha
   1808  2107		       a9 84		      lda	#<(.__Titlesceen-1)
   1809  2109		       48		      pha
   1810  210a		       a5 81		      lda	temp7
   1811  210c		       48		      pha
   1812  210d		       8a		      txa
   1813  210e		       48		      pha
   1814  210f		       a2 06		      ldx	#6
   1815  2111		       4c ee df 	      jmp	BS_jsr
   1816  2114				   ret_point1
   1817  2114				   .L0188		;  if Bit0_NewLevel{0}  &&  delay  <  60 then __TitleDelay
   1818  2114
   1819  2114		       a5 ea		      LDA	Bit0_NewLevel
   1820  2116		       4a		      LSR
   1821  2117		       90 06		      BCC	.skipL0188
   1822  2119				   .condpart0
   1823  2119		       a5 df		      LDA	delay
   1824  211b		       c9 3c		      CMP	#60
   1825  211d					      if	((* - .__TitleDelay) < 127) && ((* - .__TitleDelay) > -128)
   1826  211d		       90 11		      bcc	.__TitleDelay
   1827  211f				  -	      else
   1828  211f				  -	      bcs	.0skip__TitleDelay
   1829  211f				  -	      jmp	.__TitleDelay
   1830  211f				  -.0skip__TitleDelay
   1831  211f					      endif
   1832  211f				   .skipL0188
   1833  211f				   .L0189		;  if joy0fire  ||  switchreset then goto __Gamestart
   1834  211f
   1835  211f		       24 0c		      bit	INPT4
   1836  2121		       30 03		      BMI	.skipL0189
   1837  2123				   .condpart1
   1838  2123		       4c 2d 31 	      jmp	.condpart2
   1839  2126				   .skipL0189
   1840  2126		       a9 01		      lda	#1
   1841  2128		       2c 82 02 	      bit	SWCHB
   1842  212b		       d0 03		      BNE	.skip1OR
   1843  212d				   .condpart2
   1844  212d		       4c 33 31 	      jmp	.__Gamestart
   1845  2130
   1846  2130				   .skip1OR
   1847  2130				   .
   1848  2130							; 
   1849  2130
   1850  2130				   .
   1851  2130							; 
   1852  2130
   1853  2130				   .
   1854  2130							; 
   1855  2130
   1856  2130				   .__TitleDelay
   1857  2130							; __TitleDelay
   1858  2130
   1859  2130				   .L0190		;  goto __titlepage
   1860  2130
   1861  2130		       4c fa 30 	      jmp	.__titlepage
   1862  2133
   1863  2133				   .
   1864  2133							; 
   1865  2133
   1866  2133				   .__Gamestart
   1867  2133							; __Gamestart
   1868  2133
   1869  2133				   .L0191		;  Ch0_Counter = 0 :  Ch0_Duration = 0 :  Ch0_Sound = 0
   1870  2133
   1871  2133		       a9 00		      LDA	#0
   1872  2135		       85 e9		      STA	Ch0_Counter
   1873  2137		       85 e8		      STA	Ch0_Duration
   1874  2139		       85 e7		      STA	Ch0_Sound
   1875  213b				   .L0192		;  Ch1_Counter = 0 :  Ch1_Sound = 0 :	Ch1_Duration = 0
   1876  213b
   1877  213b		       a9 00		      LDA	#0
   1878  213d		       85 e0		      STA	Ch1_Counter
   1879  213f		       85 da		      STA	Ch1_Sound
   1880  2141		       85 db		      STA	Ch1_Duration
   1881  2143				   .L0193		;  swdebounce = 0
   1882  2143
   1883  2143		       a9 00		      LDA	#0
   1884  2145		       85 e6		      STA	swdebounce
   1885  2147				   .L0194		;  Bit4_gameover{4}  = 0
   1886  2147
   1887  2147		       a5 ea		      LDA	Bit4_gameover
   1888  2149		       29 ef		      AND	#239
   1889  214b		       85 ea		      STA	Bit4_gameover
   1890  214d				   .L0195		;  if Bit0_NewLevel{0} then goto __NextLevel
   1891  214d
   1892  214d		       a5 ea		      LDA	Bit0_NewLevel
   1893  214f		       4a		      LSR
   1894  2150		       90 03		      BCC	.skipL0195
   1895  2152				   .condpart3
   1896  2152		       4c b1 31 	      jmp	.__NextLevel
   1897  2155
   1898  2155				   .skipL0195
   1899  2155				   .L0196		;  for Timer  =  1 to 255
   1900  2155
   1901  2155		       a9 01		      LDA	#1
   1902  2157		       85 e4		      STA	Timer
   1903  2159				   .L0196forTimer
   1904  2159				   .L0197		;  next Timer
   1905  2159
   1906  2159		       a5 e4		      LDA	Timer
   1907  215b		       c9 ff		      CMP	#255
   1908  215d
   1909  215d		       e6 e4		      INC	Timer
   1910  215f					      if	((* - .L0196forTimer) < 127) && ((* - .L0196forTimer) > -128)
   1911  215f		       90 f8		      bcc	.L0196forTimer
   1912  2161				  -	      else
   1913  2161				  -	      bcs	.1skipL0196forTimer
   1914  2161				  -	      jmp	.L0196forTimer
   1915  2161				  -.1skipL0196forTimer
   1916  2161					      endif
   1917  2161				   .L0198		;  AUDV0  =  0  :  AUDV1  =  0
   1918  2161
   1919  2161		       a9 00		      LDA	#0
   1920  2163		       85 19		      STA	AUDV0
   1921  2165		       85 1a		      STA	AUDV1
   1922  2167				   .L0199		;  if switchrightb then level = 0  : EnemySpeed  = 3
   1923  2167
   1924  2167		       2c 82 02 	      bit	SWCHB
   1925  216a		       30 08		      BMI	.skipL0199
   1926  216c				   .condpart4
   1927  216c		       a9 00		      LDA	#0
   1928  216e		       85 dc		      STA	level
   1929  2170		       a9 03		      LDA	#3
   1930  2172		       85 d3		      STA	EnemySpeed
   1931  2174				   .skipL0199
   1932  2174				   .L0200		;  if !switchrightb then level  = 2  : EnemySpeed = 5
   1933  2174
   1934  2174		       2c 82 02 	      bit	SWCHB
   1935  2177		       10 08		      BPL	.skipL0200
   1936  2179				   .condpart5
   1937  2179		       a9 02		      LDA	#2
   1938  217b		       85 dc		      STA	level
   1939  217d		       a9 05		      LDA	#5
   1940  217f		       85 d3		      STA	EnemySpeed
   1941  2181				   .skipL0200
   1942  2181				   .L0201		;  EnemySpeed	= 3
   1943  2181
   1944  2181		       a9 03		      LDA	#3
   1945  2183		       85 d3		      STA	EnemySpeed
   1946  2185				   .L0202		;  dec score =  000000
   1947  2185
   1948  2185		       f8		      SED
   1949  2186		       a9 00		      LDA	#$00
   1950  2188		       85 ba		      STA	score+2
   1951  218a		       a9 00		      LDA	#$00
   1952  218c		       85 b9		      STA	score+1
   1953  218e		       a9 00		      LDA	#$00
   1954  2190		       85 b8		      STA	score
   1955  2192		       d8		      CLD
   1956  2193				   .L0203		;  Bit4_gameover{4}  = 0
   1957  2193
   1958  2193		       a5 ea		      LDA	Bit4_gameover
   1959  2195		       29 ef		      AND	#239
   1960  2197		       85 ea		      STA	Bit4_gameover
   1961  2199				   .L0204		;  V0	= 2
   1962  2199
   1963  2199		       a9 02		      LDA	#2
   1964  219b		       85 e6		      STA	V0
   1965  219d				   .L0205		;  Ch0_Duration  =  10
   1966  219d
   1967  219d		       a9 0a		      LDA	#10
   1968  219f		       85 e8		      STA	Ch0_Duration
   1969  21a1				   .L0206		;  V1	= 2
   1970  21a1
   1971  21a1		       a9 02		      LDA	#2
   1972  21a3		       85 d8		      STA	V1
   1973  21a5				   .L0207		;  Ch1_Duration  =  10
   1974  21a5
   1975  21a5		       a9 0a		      LDA	#10
   1976  21a7		       85 db		      STA	Ch1_Duration
   1977  21a9				   .L0208		;  EnemyMissilerate  = 3
   1978  21a9
   1979  21a9		       a9 03		      LDA	#3
   1980  21ab		       85 ef		      STA	EnemyMissilerate
   1981  21ad				   .L0209		;  PlayerMissileRate  =  5
   1982  21ad
   1983  21ad		       a9 05		      LDA	#5
   1984  21af		       85 f0		      STA	PlayerMissileRate
   1985  21b1				   .
   1986  21b1							; 
   1987  21b1
   1988  21b1				   .__NextLevel
   1989  21b1							; __NextLevel
   1990  21b1
   1991  21b1				   .L0210		;  gamenumber = gamenumber + 1
   1992  21b1
   1993  21b1		       e6 e5		      INC	gamenumber
   1994  21b3				   .L0211		;  Powerup  =	 ( rand & 1 ) 
   1995  21b3
   1996  21b3							; complex statement detected
   1997  21b3		       ad 00 10 	      lda	rand
   1998  21b6		       4a		      lsr
   1999  21b7				  -	      ifconst	rand16
   2000  21b7				  -	      rol	rand16
   2001  21b7					      endif
   2002  21b7		       90 02		      bcc	*+4
   2003  21b9		       49 b4		      eor	#$B4
   2004  21bb		       8d 00 10 	      sta	rand
   2005  21be				  -	      ifconst	rand16
   2006  21be				  -	      eor	rand16
   2007  21be					      endif
   2008  21be		       29 01		      AND	#1
   2009  21c0		       85 ee		      STA	Powerup
   2010  21c2				   .L0212		;  Bit0_NewLevel{0}  =  0
   2011  21c2
   2012  21c2		       a5 ea		      LDA	Bit0_NewLevel
   2013  21c4		       29 fe		      AND	#254
   2014  21c6		       85 ea		      STA	Bit0_NewLevel
   2015  21c8				   .L0213		;  pfscore2  =  %11111111
   2016  21c8
   2017  21c8		       a9 ff		      LDA	#%11111111
   2018  21ca		       85 c9		      STA	pfscore2
   2019  21cc				   .L0214		;  pfscore1  =  %11111111
   2020  21cc
   2021  21cc		       a9 ff		      LDA	#%11111111
   2022  21ce		       85 c8		      STA	pfscore1
   2023  21d0				   .L0215		;  PlayerHealth  =  80
   2024  21d0
   2025  21d0		       a9 50		      LDA	#80
   2026  21d2		       85 d5		      STA	PlayerHealth
   2027  21d4				   .L0216		;  AUDV0  =  0  :  AUDV1  =  0
   2028  21d4
   2029  21d4		       a9 00		      LDA	#0
   2030  21d6		       85 19		      STA	AUDV0
   2031  21d8		       85 1a		      STA	AUDV1
   2032  21da				   .L0217		;  Ch0_Counter = 0 :  Ch0_Duration = 0 :  Ch0_Sound = 0
   2033  21da
   2034  21da		       a9 00		      LDA	#0
   2035  21dc		       85 e9		      STA	Ch0_Counter
   2036  21de		       85 e8		      STA	Ch0_Duration
   2037  21e0		       85 e7		      STA	Ch0_Sound
   2038  21e2				   .L0218		;  Ch1_Counter = 0 :  Ch1_Sound = 0 :	Ch1_Duration = 0
   2039  21e2
   2040  21e2		       a9 00		      LDA	#0
   2041  21e4		       85 e0		      STA	Ch1_Counter
   2042  21e6		       85 da		      STA	Ch1_Sound
   2043  21e8		       85 db		      STA	Ch1_Duration
   2044  21ea				   .L0219		;  delay  =  0
   2045  21ea
   2046  21ea		       a9 00		      LDA	#0
   2047  21ec		       85 df		      STA	delay
   2048  21ee				   .L0220		;  player5x  = 200  :	player5y  = 200
   2049  21ee
   2050  21ee		       a9 c8		      LDA	#200
   2051  21f0		       85 94		      STA	player5x
   2052  21f2		       85 9e		      STA	player5y
   2053  21f4				   .L0221		;  player6x  = 200  :	player6y  = 200
   2054  21f4
   2055  21f4		       a9 c8		      LDA	#200
   2056  21f6		       85 95		      STA	player6x
   2057  21f8		       85 9f		      STA	player6y
   2058  21fa				   .L0222		;  player7x  = 200  :	player7y  = 200
   2059  21fa
   2060  21fa		       a9 c8		      LDA	#200
   2061  21fc		       85 96		      STA	player7x
   2062  21fe		       85 a0		      STA	player7y
   2063  2200				   .L0223		;  player1y  =  25  :	player1x  =   ( rand & 150 ) 
   2064  2200
   2065  2200		       a9 19		      LDA	#25
   2066  2202		       85 9a		      STA	player1y
   2067  2204							; complex statement detected
   2068  2204		       ad 00 10 	      lda	rand
   2069  2207		       4a		      lsr
   2070  2208				  -	      ifconst	rand16
   2071  2208				  -	      rol	rand16
   2072  2208					      endif
   2073  2208		       90 02		      bcc	*+4
   2074  220a		       49 b4		      eor	#$B4
   2075  220c		       8d 00 10 	      sta	rand
   2076  220f				  -	      ifconst	rand16
   2077  220f				  -	      eor	rand16
   2078  220f					      endif
   2079  220f		       29 96		      AND	#150
   2080  2211		       85 90		      STA	player1x
   2081  2213				   .L0224		;  player2y  =  10  :	player2x  =   ( rand & 150 ) 
   2082  2213
   2083  2213		       a9 0a		      LDA	#10
   2084  2215		       85 9b		      STA	player2y
   2085  2217							; complex statement detected
   2086  2217		       ad 00 10 	      lda	rand
   2087  221a		       4a		      lsr
   2088  221b				  -	      ifconst	rand16
   2089  221b				  -	      rol	rand16
   2090  221b					      endif
   2091  221b		       90 02		      bcc	*+4
   2092  221d		       49 b4		      eor	#$B4
   2093  221f		       8d 00 10 	      sta	rand
   2094  2222				  -	      ifconst	rand16
   2095  2222				  -	      eor	rand16
   2096  2222					      endif
   2097  2222		       29 96		      AND	#150
   2098  2224		       85 91		      STA	player2x
   2099  2226				   .L0225		;  if LEdge  <=  80 then player3y  =  15 :  player3x  = 150
   2100  2226
   2101  2226		       a9 50		      LDA	#80
   2102  2228		       c9 47		      CMP	#LEdge
   2103  222a		       90 08		      BCC	.skipL0225
   2104  222c				   .condpart6
   2105  222c		       a9 0f		      LDA	#15
   2106  222e		       85 9c		      STA	player3y
   2107  2230		       a9 96		      LDA	#150
   2108  2232		       85 92		      STA	player3x
   2109  2234				   .skipL0225
   2110  2234				   .L0226		;  if LEdge  >  80 then player3y  =  15 :  player3x  = 15
   2111  2234
   2112  2234		       a9 50		      LDA	#80
   2113  2236		       c9 47		      CMP	#LEdge
   2114  2238		       b0 06		      BCS	.skipL0226
   2115  223a				   .condpart7
   2116  223a		       a9 0f		      LDA	#15
   2117  223c		       85 9c		      STA	player3y
   2118  223e		       85 92		      STA	player3x
   2119  2240				   .skipL0226
   2120  2240				   .L0227		;  player4y  = 200
   2121  2240
   2122  2240		       a9 c8		      LDA	#200
   2123  2242		       85 9d		      STA	player4y
   2124  2244				   .L0228		;  level = level + $1
   2125  2244
   2126  2244		       a5 dc		      LDA	level
   2127  2246		       18		      CLC
   2128  2247		       69 01		      ADC	#$1
   2129  2249		       85 dc		      STA	level
   2130  224b				   .L0229		;  Bit1_missleOn{1}  =  0
   2131  224b
   2132  224b		       a5 ea		      LDA	Bit1_missleOn
   2133  224d		       29 fd		      AND	#253
   2134  224f		       85 ea		      STA	Bit1_missleOn
   2135  2251				   .L0230		;  Househit = 1
   2136  2251
   2137  2251		       a9 01		      LDA	#1
   2138  2253		       85 e1		      STA	Househit
   2139  2255				   .L0231		;  Bit2_EnemyMove{2} = 0
   2140  2255
   2141  2255		       a5 ea		      LDA	Bit2_EnemyMove
   2142  2257		       29 fb		      AND	#251
   2143  2259		       85 ea		      STA	Bit2_EnemyMove
   2144  225b				   .L0232		;  if level  <  4 then EnemySpeed = EnemySpeed + 1
   2145  225b
   2146  225b		       a5 dc		      LDA	level
   2147  225d		       c9 04		      CMP	#4
   2148  225f		       b0 02		      BCS	.skipL0232
   2149  2261				   .condpart8
   2150  2261		       e6 d3		      INC	EnemySpeed
   2151  2263				   .skipL0232
   2152  2263				   .L0233		;  PlayerDamage = 0
   2153  2263
   2154  2263		       a9 00		      LDA	#0
   2155  2265		       85 dd		      STA	PlayerDamage
   2156  2267				   .L0234		;  frame = 0
   2157  2267
   2158  2267		       a9 00		      LDA	#0
   2159  2269		       85 d6		      STA	frame
   2160  226b				   .L0235		;  gosub __Playfield1 bank3
   2161  226b
   2162  226b		       85 81		      sta	temp7
   2163  226d		       a9 32		      lda	#>(ret_point2-1)
   2164  226f		       48		      pha
   2165  2270		       a9 82		      lda	#<(ret_point2-1)
   2166  2272		       48		      pha
   2167  2273		       a9 51		      lda	#>(.__Playfield1-1)
   2168  2275		       48		      pha
   2169  2276		       a9 db		      lda	#<(.__Playfield1-1)
   2170  2278		       48		      pha
   2171  2279		       a5 81		      lda	temp7
   2172  227b		       48		      pha
   2173  227c		       8a		      txa
   2174  227d		       48		      pha
   2175  227e		       a2 03		      ldx	#3
   2176  2280		       4c ee df 	      jmp	BS_jsr
   2177  2283				   ret_point2
   2178  2283				   .L0236		;  Bit5_hit{5}  = 0
   2179  2283
   2180  2283		       a5 ea		      LDA	Bit5_hit
   2181  2285		       29 df		      AND	#223
   2182  2287		       85 ea		      STA	Bit5_hit
   2183  2289				   .L0237		;  EnemyMissilerate  =  EnemyMissilerate  + 1
   2184  2289
   2185  2289		       e6 ef		      INC	EnemyMissilerate
   2186  228b				   .L0238		;  if EnemyMissilerate  >  5 then EnemyMissilerate  = 5
   2187  228b
   2188  228b		       a9 05		      LDA	#5
   2189  228d		       c5 ef		      CMP	EnemyMissilerate
   2190  228f		       b0 04		      BCS	.skipL0238
   2191  2291				   .condpart9
   2192  2291		       a9 05		      LDA	#5
   2193  2293		       85 ef		      STA	EnemyMissilerate
   2194  2295				   .skipL0238
   2195  2295				   .
   2196  2295							; 
   2197  2295
   2198  2295				   .
   2199  2295							; 
   2200  2295
   2201  2295				   .
   2202  2295							; 
   2203  2295
   2204  2295				   .
   2205  2295							; 
   2206  2295
   2207  2295				   .__GameVar
   2208  2295							; __GameVar
   2209  2295
   2210  2295				   .L0239		;  PlayerHealth  =  80
   2211  2295
   2212  2295		       a9 50		      LDA	#80
   2213  2297		       85 d5		      STA	PlayerHealth
   2214  2299				   .L0240		;  player0x  =  75
   2215  2299
   2216  2299		       a9 4b		      LDA	#75
   2217  229b		       85 80		      STA	player0x
   2218  229d				   .L0241		;  player0y  =  160
   2219  229d
   2220  229d		       a9 a0		      LDA	#160
   2221  229f		       85 99		      STA	player0y
   2222  22a1				   .L0242		;  missile0x  =  200  :  missile0y  =	200
   2223  22a1
   2224  22a1		       a9 c8		      LDA	#200
   2225  22a3		       85 82		      STA	missile0x
   2226  22a5		       85 bf		      STA	missile0y
   2227  22a7				   .L0243		;  missile0height  =  12
   2228  22a7
   2229  22a7		       a9 0c		      LDA	#12
   2230  22a9		       85 c2		      STA	missile0height
   2231  22ab				   .L0244		;  missile1x  =  200  :  missile1y  =	200
   2232  22ab
   2233  22ab		       a9 c8		      LDA	#200
   2234  22ad		       85 83		      STA	missile1x
   2235  22af		       85 c0		      STA	missile1y
   2236  22b1				   .L0245		;  missile1height  =  8
   2237  22b1
   2238  22b1		       a9 08		      LDA	#8
   2239  22b3		       85 c3		      STA	missile1height
   2240  22b5				   .L0246		;  Bit1_missleOn{1} = 0
   2241  22b5
   2242  22b5		       a5 ea		      LDA	Bit1_missleOn
   2243  22b7		       29 fd		      AND	#253
   2244  22b9		       85 ea		      STA	Bit1_missleOn
   2245  22bb				   .L0247		;  drop  = 0
   2246  22bb
   2247  22bb		       a9 00		      LDA	#0
   2248  22bd		       85 d1		      STA	drop
   2249  22bf				   .L0248		;  CTRLPF = $21
   2250  22bf
   2251  22bf		       a9 21		      LDA	#$21
   2252  22c1		       85 0a		      STA	CTRLPF
   2253  22c3				   .L0249		;  EnemyHit  =  0
   2254  22c3
   2255  22c3		       a9 00		      LDA	#0
   2256  22c5		       85 d9		      STA	EnemyHit
   2257  22c7				   .L0250		;  Bit6_PLayer3Direction{6} = 0
   2258  22c7
   2259  22c7		       a5 ea		      LDA	Bit6_PLayer3Direction
   2260  22c9		       29 bf		      AND	#191
   2261  22cb		       85 ea		      STA	Bit6_PLayer3Direction
   2262  22cd				   .
   2263  22cd							; 
   2264  22cd
   2265  22cd				   .__Main_Loop
   2266  22cd							; __Main_Loop
   2267  22cd
   2268  22cd				   .
   2269  22cd							; 
   2270  22cd
   2271  22cd				   .__GameSettings
   2272  22cd							; __GameSettings
   2273  22cd
   2274  22cd				   .
   2275  22cd							; 
   2276  22cd
   2277  22cd				   .L0251		;  delay  =  delay  + 1
   2278  22cd
   2279  22cd		       e6 df		      INC	delay
   2280  22cf				   .L0252		;  if delay  <  60 then __Resume bank2
   2281  22cf
   2282  22cf		       a5 df		      LDA	delay
   2283  22d1		       c9 3c		      CMP	#60
   2284  22d3		       b0 00		      BCS	.skipL0252
   2285  22d5				   .condpart10
   2286  22d5				   .skipL0252
   2287  22d5				   .L0253		;  if delay  >  61 then delay	=  71
   2288  22d5
   2289  22d5		       a9 3d		      LDA	#61
   2290  22d7		       c5 df		      CMP	delay
   2291  22d9		       b0 04		      BCS	.skipL0253
   2292  22db				   .condpart11
   2293  22db		       a9 47		      LDA	#71
   2294  22dd		       85 df		      STA	delay
   2295  22df				   .skipL0253
   2296  22df				   .L0254		;  if switchreset goto __Reset
   2297  22df
   2298  22df		       a9 01		      lda	#1
   2299  22e1		       2c 82 02 	      bit	SWCHB
   2300  22e4				  -	      if	((* - .__Reset) < 127) && ((* - .__Reset) > -128)
   2301  22e4				  -	      BEQ	.__Reset
   2302  22e4					      else
   2303  22e4		       d0 03		      bne	.2skip__Reset
   2304  22e6		       4c a4 30 	      jmp	.__Reset
   2305  22e9				   .2skip__Reset
   2306  22e9					      endif
   2307  22e9				   .L0255		;  if Bit4_gameover{4} then goto __SkipMove bank2
   2308  22e9
   2309  22e9		       a5 ea		      LDA	Bit4_gameover
   2310  22eb		       29 10		      AND	#16
   2311  22ed		       f0 12		      BEQ	.skipL0255
   2312  22ef				   .condpart12
   2313  22ef		       85 81		      sta	temp7
   2314  22f1		       a9 3b		      lda	#>(.__SkipMove-1)
   2315  22f3		       48		      pha
   2316  22f4		       a9 a0		      lda	#<(.__SkipMove-1)
   2317  22f6		       48		      pha
   2318  22f7		       a5 81		      lda	temp7
   2319  22f9		       48		      pha
   2320  22fa		       8a		      txa
   2321  22fb		       48		      pha
   2322  22fc		       a2 02		      ldx	#2
   2323  22fe		       4c ee df 	      jmp	BS_jsr
   2324  2301				   .skipL0255
   2325  2301				   .L0256		;  if PlayerHealth  <= 0 then Bit4_gameover{4}  = 1
   2326  2301
   2327  2301		       a9 00		      LDA	#0
   2328  2303		       c5 d5		      CMP	PlayerHealth
   2329  2305		       90 06		      BCC	.skipL0256
   2330  2307				   .condpart13
   2331  2307		       a5 ea		      LDA	Bit4_gameover
   2332  2309		       09 10		      ORA	#16
   2333  230b		       85 ea		      STA	Bit4_gameover
   2334  230d				   .skipL0256
   2335  230d				   .L0257		;  if Bit4_gameover{4} then gosub __GameOver bank4
   2336  230d
   2337  230d		       a5 ea		      LDA	Bit4_gameover
   2338  230f		       29 10		      AND	#16
   2339  2311		       f0 18		      BEQ	.skipL0257
   2340  2313				   .condpart14
   2341  2313		       85 81		      sta	temp7
   2342  2315		       a9 33		      lda	#>(ret_point3-1)
   2343  2317		       48		      pha
   2344  2318		       a9 2a		      lda	#<(ret_point3-1)
   2345  231a		       48		      pha
   2346  231b		       a9 76		      lda	#>(.__GameOver-1)
   2347  231d		       48		      pha
   2348  231e		       a9 a2		      lda	#<(.__GameOver-1)
   2349  2320		       48		      pha
   2350  2321		       a5 81		      lda	temp7
   2351  2323		       48		      pha
   2352  2324		       8a		      txa
   2353  2325		       48		      pha
   2354  2326		       a2 04		      ldx	#4
   2355  2328		       4c ee df 	      jmp	BS_jsr
   2356  232b				   ret_point3
   2357  232b				   .skipL0257
   2358  232b				   .L0258		;  if Househit > 1 then gosub __Househits bank3
   2359  232b
   2360  232b		       a9 01		      LDA	#1
   2361  232d		       c5 e1		      CMP	Househit
   2362  232f		       b0 18		      BCS	.skipL0258
   2363  2331				   .condpart15
   2364  2331		       85 81		      sta	temp7
   2365  2333		       a9 33		      lda	#>(ret_point4-1)
   2366  2335		       48		      pha
   2367  2336		       a9 48		      lda	#<(ret_point4-1)
   2368  2338		       48		      pha
   2369  2339		       a9 50		      lda	#>(.__Househits-1)
   2370  233b		       48		      pha
   2371  233c		       a9 84		      lda	#<(.__Househits-1)
   2372  233e		       48		      pha
   2373  233f		       a5 81		      lda	temp7
   2374  2341		       48		      pha
   2375  2342		       8a		      txa
   2376  2343		       48		      pha
   2377  2344		       a2 03		      ldx	#3
   2378  2346		       4c ee df 	      jmp	BS_jsr
   2379  2349				   ret_point4
   2380  2349				   .skipL0258
   2381  2349				   .L0259		;  if Househit > 12 then gosub __GameOver bank4
   2382  2349
   2383  2349		       a9 0c		      LDA	#12
   2384  234b		       c5 e1		      CMP	Househit
   2385  234d		       b0 18		      BCS	.skipL0259
   2386  234f				   .condpart16
   2387  234f		       85 81		      sta	temp7
   2388  2351		       a9 33		      lda	#>(ret_point5-1)
   2389  2353		       48		      pha
   2390  2354		       a9 66		      lda	#<(ret_point5-1)
   2391  2356		       48		      pha
   2392  2357		       a9 76		      lda	#>(.__GameOver-1)
   2393  2359		       48		      pha
   2394  235a		       a9 a2		      lda	#<(.__GameOver-1)
   2395  235c		       48		      pha
   2396  235d		       a5 81		      lda	temp7
   2397  235f		       48		      pha
   2398  2360		       8a		      txa
   2399  2361		       48		      pha
   2400  2362		       a2 04		      ldx	#4
   2401  2364		       4c ee df 	      jmp	BS_jsr
   2402  2367				   ret_point5
   2403  2367				   .skipL0259
   2404  2367				   .L0260		;  if EnemyHit  >  0 then Bit1_missleOn{1}  =	0 :  missile0y = 200
   2405  2367
   2406  2367		       a9 00		      LDA	#0
   2407  2369		       c5 d9		      CMP	EnemyHit
   2408  236b		       b0 0a		      BCS	.skipL0260
   2409  236d				   .condpart17
   2410  236d		       a5 ea		      LDA	Bit1_missleOn
   2411  236f		       29 fd		      AND	#253
   2412  2371		       85 ea		      STA	Bit1_missleOn
   2413  2373		       a9 c8		      LDA	#200
   2414  2375		       85 bf		      STA	missile0y
   2415  2377				   .skipL0260
   2416  2377				   .L0261		;  if PlayerHealth >  0 then pfscore2	= %00000001
   2417  2377
   2418  2377		       a9 00		      LDA	#0
   2419  2379		       c5 d5		      CMP	PlayerHealth
   2420  237b		       b0 04		      BCS	.skipL0261
   2421  237d				   .condpart18
   2422  237d		       a9 01		      LDA	#%00000001
   2423  237f		       85 c9		      STA	pfscore2
   2424  2381				   .skipL0261
   2425  2381				   .L0262		;  if PlayerHealth >  10 then pfscore2  = %00000011
   2426  2381
   2427  2381		       a9 0a		      LDA	#10
   2428  2383		       c5 d5		      CMP	PlayerHealth
   2429  2385		       b0 04		      BCS	.skipL0262
   2430  2387				   .condpart19
   2431  2387		       a9 03		      LDA	#%00000011
   2432  2389		       85 c9		      STA	pfscore2
   2433  238b				   .skipL0262
   2434  238b				   .L0263		;  if PlayerHealth >  20 then pfscore2  = %00000111
   2435  238b
   2436  238b		       a9 14		      LDA	#20
   2437  238d		       c5 d5		      CMP	PlayerHealth
   2438  238f		       b0 04		      BCS	.skipL0263
   2439  2391				   .condpart20
   2440  2391		       a9 07		      LDA	#%00000111
   2441  2393		       85 c9		      STA	pfscore2
   2442  2395				   .skipL0263
   2443  2395				   .L0264		;  if PlayerHealth >  30 then pfscore2  = %00001111
   2444  2395
   2445  2395		       a9 1e		      LDA	#30
   2446  2397		       c5 d5		      CMP	PlayerHealth
   2447  2399		       b0 04		      BCS	.skipL0264
   2448  239b				   .condpart21
   2449  239b		       a9 0f		      LDA	#%00001111
   2450  239d		       85 c9		      STA	pfscore2
   2451  239f				   .skipL0264
   2452  239f				   .L0265		;  if PlayerHealth >  40 then pfscore2  = %00011111
   2453  239f
   2454  239f		       a9 28		      LDA	#40
   2455  23a1		       c5 d5		      CMP	PlayerHealth
   2456  23a3		       b0 04		      BCS	.skipL0265
   2457  23a5				   .condpart22
   2458  23a5		       a9 1f		      LDA	#%00011111
   2459  23a7		       85 c9		      STA	pfscore2
   2460  23a9				   .skipL0265
   2461  23a9				   .L0266		;  if PlayerHealth >  50 then pfscore2  = %00111111
   2462  23a9
   2463  23a9		       a9 32		      LDA	#50
   2464  23ab		       c5 d5		      CMP	PlayerHealth
   2465  23ad		       b0 04		      BCS	.skipL0266
   2466  23af				   .condpart23
   2467  23af		       a9 3f		      LDA	#%00111111
   2468  23b1		       85 c9		      STA	pfscore2
   2469  23b3				   .skipL0266
   2470  23b3				   .L0267		;  if PlayerHealth >  60 then pfscore2  = %01111111
   2471  23b3
   2472  23b3		       a9 3c		      LDA	#60
   2473  23b5		       c5 d5		      CMP	PlayerHealth
   2474  23b7		       b0 04		      BCS	.skipL0267
   2475  23b9				   .condpart24
   2476  23b9		       a9 7f		      LDA	#%01111111
   2477  23bb		       85 c9		      STA	pfscore2
   2478  23bd				   .skipL0267
   2479  23bd				   .L0268		;  if PlayerHealth >  70 then pfscore2  =  %11111111
   2480  23bd
   2481  23bd		       a9 46		      LDA	#70
   2482  23bf		       c5 d5		      CMP	PlayerHealth
   2483  23c1		       b0 04		      BCS	.skipL0268
   2484  23c3				   .condpart25
   2485  23c3		       a9 ff		      LDA	#%11111111
   2486  23c5		       85 c9		      STA	pfscore2
   2487  23c7				   .skipL0268
   2488  23c7				   .L0269		;  if drop  >=  45 then pfscore1  =  %00000001
   2489  23c7
   2490  23c7		       a5 d1		      LDA	drop
   2491  23c9		       c9 2d		      CMP	#45
   2492  23cb		       90 04		      BCC	.skipL0269
   2493  23cd				   .condpart26
   2494  23cd		       a9 01		      LDA	#%00000001
   2495  23cf		       85 c8		      STA	pfscore1
   2496  23d1				   .skipL0269
   2497  23d1				   .L0270		;  if drop  <=  45 then pfscore1  =  %00000011
   2498  23d1
   2499  23d1		       a9 2d		      LDA	#45
   2500  23d3		       c5 d1		      CMP	drop
   2501  23d5		       90 04		      BCC	.skipL0270
   2502  23d7				   .condpart27
   2503  23d7		       a9 03		      LDA	#%00000011
   2504  23d9		       85 c8		      STA	pfscore1
   2505  23db				   .skipL0270
   2506  23db				   .L0271		;  if drop  <=  40 then pfscore1  =  %00000111
   2507  23db
   2508  23db		       a9 28		      LDA	#40
   2509  23dd		       c5 d1		      CMP	drop
   2510  23df		       90 04		      BCC	.skipL0271
   2511  23e1				   .condpart28
   2512  23e1		       a9 07		      LDA	#%00000111
   2513  23e3		       85 c8		      STA	pfscore1
   2514  23e5				   .skipL0271
   2515  23e5				   .L0272		;  if drop  <=  35 then pfscore1  =  %00001111
   2516  23e5
   2517  23e5		       a9 23		      LDA	#35
   2518  23e7		       c5 d1		      CMP	drop
   2519  23e9		       90 04		      BCC	.skipL0272
   2520  23eb				   .condpart29
   2521  23eb		       a9 0f		      LDA	#%00001111
   2522  23ed		       85 c8		      STA	pfscore1
   2523  23ef				   .skipL0272
   2524  23ef				   .L0273		;  if drop  <=  30 then pfscore1  =  %00011111
   2525  23ef
   2526  23ef		       a9 1e		      LDA	#30
   2527  23f1		       c5 d1		      CMP	drop
   2528  23f3		       90 04		      BCC	.skipL0273
   2529  23f5				   .condpart30
   2530  23f5		       a9 1f		      LDA	#%00011111
   2531  23f7		       85 c8		      STA	pfscore1
   2532  23f9				   .skipL0273
   2533  23f9				   .L0274		;  if drop  <=  20 then pfscore1  =  %00111111
   2534  23f9
   2535  23f9		       a9 14		      LDA	#20
   2536  23fb		       c5 d1		      CMP	drop
   2537  23fd		       90 04		      BCC	.skipL0274
   2538  23ff				   .condpart31
   2539  23ff		       a9 3f		      LDA	#%00111111
   2540  2401		       85 c8		      STA	pfscore1
   2541  2403				   .skipL0274
   2542  2403				   .L0275		;  if drop  <=  10 then pfscore1  =  %01111111
   2543  2403
   2544  2403		       a9 0a		      LDA	#10
   2545  2405		       c5 d1		      CMP	drop
   2546  2407		       90 04		      BCC	.skipL0275
   2547  2409				   .condpart32
   2548  2409		       a9 7f		      LDA	#%01111111
   2549  240b		       85 c8		      STA	pfscore1
   2550  240d				   .skipL0275
   2551  240d				   .L0276		;  if drop  <	10 then pfscore1  =  %11111111
   2552  240d
   2553  240d		       a5 d1		      LDA	drop
   2554  240f		       c9 0a		      CMP	#10
   2555  2411		       b0 04		      BCS	.skipL0276
   2556  2413				   .condpart33
   2557  2413		       a9 ff		      LDA	#%11111111
   2558  2415		       85 c8		      STA	pfscore1
   2559  2417				   .skipL0276
   2560  2417				   .L0277		;  if PlayerHealth  <	20 then pfscorecolor  =  $32
   2561  2417
   2562  2417		       a5 d5		      LDA	PlayerHealth
   2563  2419		       c9 14		      CMP	#20
   2564  241b		       b0 04		      BCS	.skipL0277
   2565  241d				   .condpart34
   2566  241d		       a9 32		      LDA	#$32
   2567  241f		       85 c6		      STA	pfscorecolor
   2568  2421				   .skipL0277
   2569  2421				   .L0278		;  if PlayerHealth  >	20 then pfscorecolor  = $00
   2570  2421
   2571  2421		       a9 14		      LDA	#20
   2572  2423		       c5 d5		      CMP	PlayerHealth
   2573  2425		       b0 04		      BCS	.skipL0278
   2574  2427				   .condpart35
   2575  2427		       a9 00		      LDA	#$00
   2576  2429		       85 c6		      STA	pfscorecolor
   2577  242b				   .skipL0278
   2578  242b				   .L0279		;  if drop  >=  50 then AUDV0	=  0  :  AUDV1	=  0
   2579  242b
   2580  242b		       a5 d1		      LDA	drop
   2581  242d		       c9 32		      CMP	#50
   2582  242f		       90 06		      BCC	.skipL0279
   2583  2431				   .condpart36
   2584  2431		       a9 00		      LDA	#0
   2585  2433		       85 19		      STA	AUDV0
   2586  2435		       85 1a		      STA	AUDV1
   2587  2437				   .skipL0279
   2588  2437				   .L0280		;  if drop  >=  50 then Bit0_NewLevel{0} = 1 :  delay	=  0 :	goto __titlepage bank2
   2589  2437
   2590  2437		       a5 d1		      LDA	drop
   2591  2439		       c9 32		      CMP	#50
   2592  243b		       90 1c		      BCC	.skipL0280
   2593  243d				   .condpart37
   2594  243d		       a5 ea		      LDA	Bit0_NewLevel
   2595  243f		       09 01		      ORA	#1
   2596  2441		       85 ea		      STA	Bit0_NewLevel
   2597  2443		       a9 00		      LDA	#0
   2598  2445		       85 df		      STA	delay
   2599  2447		       85 81		      sta	temp7
   2600  2449		       a9 30		      lda	#>(.__titlepage-1)
   2601  244b		       48		      pha
   2602  244c		       a9 f9		      lda	#<(.__titlepage-1)
   2603  244e		       48		      pha
   2604  244f		       a5 81		      lda	temp7
   2605  2451		       48		      pha
   2606  2452		       8a		      txa
   2607  2453		       48		      pha
   2608  2454		       a2 02		      ldx	#2
   2609  2456		       4c ee df 	      jmp	BS_jsr
   2610  2459				   .skipL0280
   2611  2459				   .L0281		;  frame = frame + 1
   2612  2459
   2613  2459		       e6 d6		      INC	frame
   2614  245b				   .L0282		;  gosub __FrameAnimation bank4
   2615  245b
   2616  245b		       85 81		      sta	temp7
   2617  245d		       a9 34		      lda	#>(ret_point6-1)
   2618  245f		       48		      pha
   2619  2460		       a9 72		      lda	#<(ret_point6-1)
   2620  2462		       48		      pha
   2621  2463		       a9 70		      lda	#>(.__FrameAnimation-1)
   2622  2465		       48		      pha
   2623  2466		       a9 84		      lda	#<(.__FrameAnimation-1)
   2624  2468		       48		      pha
   2625  2469		       a5 81		      lda	temp7
   2626  246b		       48		      pha
   2627  246c		       8a		      txa
   2628  246d		       48		      pha
   2629  246e		       a2 04		      ldx	#4
   2630  2470		       4c ee df 	      jmp	BS_jsr
   2631  2473				   ret_point6
   2632  2473				   .
   2633  2473							; 
   2634  2473
   2635  2473				   .
   2636  2473							; 
   2637  2473
   2638  2473				   .
   2639  2473							; 
   2640  2473
   2641  2473				   .
   2642  2473							; 
   2643  2473
   2644  2473				   .
   2645  2473							; 
   2646  2473
   2647  2473				   .__Movement
   2648  2473							; __Movement
   2649  2473
   2650  2473				   .L0283		;  Moverate = Moverate  + 1
   2651  2473
   2652  2473		       e6 d2		      INC	Moverate
   2653  2475				   .
   2654  2475							; 
   2655  2475
   2656  2475				   .__HealthDrop
   2657  2475							; __HealthDrop
   2658  2475
   2659  2475				   .L0284		;  if HealthDrop  >  4  &&  !Bit2_EnemyMove{2} then if player4y  >  190 then player4y	=  5  :  player4x  =   ( rand & 150 )	:  Bit2_EnemyMove{2} = 1
   2660  2475
   2661  2475		       a9 04		      LDA	#4
   2662  2477		       c5 de		      CMP	HealthDrop
   2663  2479		       b0 25		      BCS	.skipL0284
   2664  247b				   .condpart38
   2665  247b		       a5 ea		      LDA	Bit2_EnemyMove
   2666  247d		       29 04		      AND	#4
   2667  247f		       d0 1f		      BNE	.skip38then
   2668  2481				   .condpart39
   2669  2481		       a9 be		      LDA	#190
   2670  2483		       c5 9d		      CMP	player4y
   2671  2485		       b0 19		      BCS	.skip39then
   2672  2487				   .condpart40
   2673  2487		       a9 05		      LDA	#5
   2674  2489		       85 9d		      STA	player4y
   2675  248b							; complex statement detected
   2676  248b		       ad 00 10 	      lda	rand
   2677  248e		       4a		      lsr
   2678  248f				  -	      ifconst	rand16
   2679  248f				  -	      rol	rand16
   2680  248f					      endif
   2681  248f		       90 02		      bcc	*+4
   2682  2491		       49 b4		      eor	#$B4
   2683  2493		       8d 00 10 	      sta	rand
   2684  2496				  -	      ifconst	rand16
   2685  2496				  -	      eor	rand16
   2686  2496					      endif
   2687  2496		       29 96		      AND	#150
   2688  2498		       85 93		      STA	player4x
   2689  249a		       a5 ea		      LDA	Bit2_EnemyMove
   2690  249c		       09 04		      ORA	#4
   2691  249e		       85 ea		      STA	Bit2_EnemyMove
   2692  24a0				   .skip39then
   2693  24a0				   .skip38then
   2694  24a0				   .skipL0284
   2695  24a0				   .L0285		;  if player4y  >  player1y  -  5  &&	player4y  <  player1y  +  5 then goto __Player1Move
   2696  24a0
   2697  24a0							; complex condition detected
   2698  24a0		       a5 9a		      LDA	player1y
   2699  24a2		       38		      SEC
   2700  24a3		       e9 05		      SBC	#5
   2701  24a5							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   2702  24a5		       c5 9d		      CMP	player4y
   2703  24a7		       b0 11		      BCS	.skipL0285
   2704  24a9				   .condpart41
   2705  24a9							; complex condition detected
   2706  24a9		       a5 9a		      LDA	player1y
   2707  24ab		       18		      CLC
   2708  24ac		       69 05		      ADC	#5
   2709  24ae		       48		      PHA
   2710  24af		       ba		      TSX
   2711  24b0		       68		      PLA
   2712  24b1		       a5 9d		      LDA	player4y
   2713  24b3		       d5 01		      CMP	1,x
   2714  24b5		       b0 03		      BCS	.skip41then
   2715  24b7				   .condpart42
   2716  24b7		       4c 2e 35 	      jmp	.__Player1Move
   2717  24ba
   2718  24ba				   .skip41then
   2719  24ba				   .skipL0285
   2720  24ba				   .L0286		;  if player4y  >  player2y  -  5  &&	player4y  <  player2y  +  5 then goto __Player1Move
   2721  24ba
   2722  24ba							; complex condition detected
   2723  24ba		       a5 9b		      LDA	player2y
   2724  24bc		       38		      SEC
   2725  24bd		       e9 05		      SBC	#5
   2726  24bf							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   2727  24bf		       c5 9d		      CMP	player4y
   2728  24c1		       b0 11		      BCS	.skipL0286
   2729  24c3				   .condpart43
   2730  24c3							; complex condition detected
   2731  24c3		       a5 9b		      LDA	player2y
   2732  24c5		       18		      CLC
   2733  24c6		       69 05		      ADC	#5
   2734  24c8		       48		      PHA
   2735  24c9		       ba		      TSX
   2736  24ca		       68		      PLA
   2737  24cb		       a5 9d		      LDA	player4y
   2738  24cd		       d5 01		      CMP	1,x
   2739  24cf		       b0 03		      BCS	.skip43then
   2740  24d1				   .condpart44
   2741  24d1		       4c 2e 35 	      jmp	.__Player1Move
   2742  24d4
   2743  24d4				   .skip43then
   2744  24d4				   .skipL0286
   2745  24d4				   .L0287		;  if HealthDrop  >  4  &&  player4y  > 190 then Bit2_EnemyMove{2} = 0
   2746  24d4
   2747  24d4		       a9 04		      LDA	#4
   2748  24d6		       c5 de		      CMP	HealthDrop
   2749  24d8		       b0 0c		      BCS	.skipL0287
   2750  24da				   .condpart45
   2751  24da		       a9 be		      LDA	#190
   2752  24dc		       c5 9d		      CMP	player4y
   2753  24de		       b0 06		      BCS	.skip45then
   2754  24e0				   .condpart46
   2755  24e0		       a5 ea		      LDA	Bit2_EnemyMove
   2756  24e2		       29 fb		      AND	#251
   2757  24e4		       85 ea		      STA	Bit2_EnemyMove
   2758  24e6				   .skip45then
   2759  24e6				   .skipL0287
   2760  24e6				   .L0288		;  if Bit2_EnemyMove{2}  &&  player4y > 170 then HealthDrop = 0 :  Bit2_EnemyMove{2} = 0  :  player4y	=  200 : 
   2761  24e6
   2762  24e6		       a5 ea		      LDA	Bit2_EnemyMove
   2763  24e8		       29 04		      AND	#4
   2764  24ea		       f0 14		      BEQ	.skipL0288
   2765  24ec				   .condpart47
   2766  24ec		       a9 aa		      LDA	#170
   2767  24ee		       c5 9d		      CMP	player4y
   2768  24f0		       b0 0e		      BCS	.skip47then
   2769  24f2				   .condpart48
   2770  24f2		       a9 00		      LDA	#0
   2771  24f4		       85 de		      STA	HealthDrop
   2772  24f6		       a5 ea		      LDA	Bit2_EnemyMove
   2773  24f8		       29 fb		      AND	#251
   2774  24fa		       85 ea		      STA	Bit2_EnemyMove
   2775  24fc		       a9 c8		      LDA	#200
   2776  24fe		       85 9d		      STA	player4y
   2777  2500				   .skip47then
   2778  2500				   .skipL0288
   2779  2500				   .L0289		;  if player4x  <  5 then player4x = 5
   2780  2500
   2781  2500		       a5 93		      LDA	player4x
   2782  2502		       c9 05		      CMP	#5
   2783  2504		       b0 04		      BCS	.skipL0289
   2784  2506				   .condpart49
   2785  2506		       a9 05		      LDA	#5
   2786  2508		       85 93		      STA	player4x
   2787  250a				   .skipL0289
   2788  250a				   .L0290		;  if player4x  >  150 then player4x  = 150
   2789  250a
   2790  250a		       a9 96		      LDA	#150
   2791  250c		       c5 93		      CMP	player4x
   2792  250e		       b0 04		      BCS	.skipL0290
   2793  2510				   .condpart50
   2794  2510		       a9 96		      LDA	#150
   2795  2512		       85 93		      STA	player4x
   2796  2514				   .skipL0290
   2797  2514				   .L0291		;  if Moverate  <  7 then goto __Player1Move
   2798  2514
   2799  2514		       a5 d2		      LDA	Moverate
   2800  2516		       c9 07		      CMP	#7
   2801  2518		       b0 03		      BCS	.skipL0291
   2802  251a				   .condpart51
   2803  251a		       4c 2e 35 	      jmp	.__Player1Move
   2804  251d
   2805  251d				   .skipL0291
   2806  251d				   .
   2807  251d							; 
   2808  251d
   2809  251d				   .L0292		;  if Bit2_EnemyMove{2} then player4y	=  player4y  + 2  :  HealthDrop  =  0
   2810  251d
   2811  251d		       a5 ea		      LDA	Bit2_EnemyMove
   2812  251f		       29 04		      AND	#4
   2813  2521		       f0 0b		      BEQ	.skipL0292
   2814  2523				   .condpart52
   2815  2523		       a5 9d		      LDA	player4y
   2816  2525		       18		      CLC
   2817  2526		       69 02		      ADC	#2
   2818  2528		       85 9d		      STA	player4y
   2819  252a		       a9 00		      LDA	#0
   2820  252c		       85 de		      STA	HealthDrop
   2821  252e				   .skipL0292
   2822  252e				   .
   2823  252e							; 
   2824  252e
   2825  252e				   .__Player1Move
   2826  252e							; __Player1Move
   2827  252e
   2828  252e				   .L0293		;  if drop  >=  48  &&  player1y  =  200 then goto __Player2Move
   2829  252e
   2830  252e		       a5 d1		      LDA	drop
   2831  2530		       c9 30		      CMP	#48
   2832  2532		       90 09		      BCC	.skipL0293
   2833  2534				   .condpart53
   2834  2534		       a5 9a		      LDA	player1y
   2835  2536		       c9 c8		      CMP	#200
   2836  2538		       d0 03		      BNE	.skip53then
   2837  253a				   .condpart54
   2838  253a		       4c 14 36 	      jmp	.__Player2Move
   2839  253d
   2840  253d				   .skip53then
   2841  253d				   .skipL0293
   2842  253d				   .L0294		;  if player1y  > 190	&&  EnemyHit  <>  1 then player1y  =   ( rand & 5 )  + 1 :  player1x  =   ( rand & 150 )   :  HealthDrop = HealthDrop  + 1  :  drop  =	drop  + 1
   2843  253d
   2844  253d		       a9 be		      LDA	#190
   2845  253f		       c5 9a		      CMP	player1y
   2846  2541		       b0 2b		      BCS	.skipL0294
   2847  2543				   .condpart55
   2848  2543		       a5 d9		      LDA	EnemyHit
   2849  2545		       c9 01		      CMP	#1
   2850  2547		       f0 25		      BEQ	.skip55then
   2851  2549				   .condpart56
   2852  2549							; complex statement detected
   2853  2549		       ad 00 10 	      lda	rand
   2854  254c		       4a		      lsr
   2855  254d				  -	      ifconst	rand16
   2856  254d				  -	      rol	rand16
   2857  254d					      endif
   2858  254d		       90 02		      bcc	*+4
   2859  254f		       49 b4		      eor	#$B4
   2860  2551		       8d 00 10 	      sta	rand
   2861  2554				  -	      ifconst	rand16
   2862  2554				  -	      eor	rand16
   2863  2554					      endif
   2864  2554		       29 05		      AND	#5
   2865  2556		       18		      CLC
   2866  2557		       69 01		      ADC	#1
   2867  2559		       85 9a		      STA	player1y
   2868  255b							; complex statement detected
   2869  255b		       ad 00 10 	      lda	rand
   2870  255e		       4a		      lsr
   2871  255f				  -	      ifconst	rand16
   2872  255f				  -	      rol	rand16
   2873  255f					      endif
   2874  255f		       90 02		      bcc	*+4
   2875  2561		       49 b4		      eor	#$B4
   2876  2563		       8d 00 10 	      sta	rand
   2877  2566				  -	      ifconst	rand16
   2878  2566				  -	      eor	rand16
   2879  2566					      endif
   2880  2566		       29 96		      AND	#150
   2881  2568		       85 90		      STA	player1x
   2882  256a		       e6 de		      INC	HealthDrop
   2883  256c		       e6 d1		      INC	drop
   2884  256e				   .skip55then
   2885  256e				   .skipL0294
   2886  256e				   .L0295		;  if player1x  >  player2x  -  5  &&	player1x  <  player2x  +  5 then player1x  =   ( rand & 150 ) 
   2887  256e
   2888  256e							; complex condition detected
   2889  256e		       a5 91		      LDA	player2x
   2890  2570		       38		      SEC
   2891  2571		       e9 05		      SBC	#5
   2892  2573							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   2893  2573		       c5 90		      CMP	player1x
   2894  2575		       b0 1d		      BCS	.skipL0295
   2895  2577				   .condpart57
   2896  2577							; complex condition detected
   2897  2577		       a5 91		      LDA	player2x
   2898  2579		       18		      CLC
   2899  257a		       69 05		      ADC	#5
   2900  257c		       48		      PHA
   2901  257d		       ba		      TSX
   2902  257e		       68		      PLA
   2903  257f		       a5 90		      LDA	player1x
   2904  2581		       d5 01		      CMP	1,x
   2905  2583		       b0 0f		      BCS	.skip57then
   2906  2585				   .condpart58
   2907  2585							; complex statement detected
   2908  2585		       ad 00 10 	      lda	rand
   2909  2588		       4a		      lsr
   2910  2589				  -	      ifconst	rand16
   2911  2589				  -	      rol	rand16
   2912  2589					      endif
   2913  2589		       90 02		      bcc	*+4
   2914  258b		       49 b4		      eor	#$B4
   2915  258d		       8d 00 10 	      sta	rand
   2916  2590				  -	      ifconst	rand16
   2917  2590				  -	      eor	rand16
   2918  2590					      endif
   2919  2590		       29 96		      AND	#150
   2920  2592		       85 90		      STA	player1x
   2921  2594				   .skip57then
   2922  2594				   .skipL0295
   2923  2594				   .L0296		;  if player1y  >=  164 then goto __Player1SideMove
   2924  2594
   2925  2594		       a5 9a		      LDA	player1y
   2926  2596		       c9 a4		      CMP	#164
   2927  2598		       90 03		      BCC	.skipL0296
   2928  259a				   .condpart59
   2929  259a		       4c cd 35 	      jmp	.__Player1SideMove
   2930  259d
   2931  259d				   .skipL0296
   2932  259d				   .L0297		;  if player1x  <  8 then player1x  = 8
   2933  259d
   2934  259d		       a5 90		      LDA	player1x
   2935  259f		       c9 08		      CMP	#8
   2936  25a1		       b0 04		      BCS	.skipL0297
   2937  25a3				   .condpart60
   2938  25a3		       a9 08		      LDA	#8
   2939  25a5		       85 90		      STA	player1x
   2940  25a7				   .skipL0297
   2941  25a7				   .L0298		;  if player1x  >  150 then player1x  = 150
   2942  25a7
   2943  25a7		       a9 96		      LDA	#150
   2944  25a9		       c5 90		      CMP	player1x
   2945  25ab		       b0 04		      BCS	.skipL0298
   2946  25ad				   .condpart61
   2947  25ad		       a9 96		      LDA	#150
   2948  25af		       85 90		      STA	player1x
   2949  25b1				   .skipL0298
   2950  25b1				   .L0299		;  if Moverate  <  8 then goto __CheckCollision
   2951  25b1
   2952  25b1		       a5 d2		      LDA	Moverate
   2953  25b3		       c9 08		      CMP	#8
   2954  25b5		       b0 03		      BCS	.skipL0299
   2955  25b7				   .condpart62
   2956  25b7		       4c fb 38 	      jmp	.__CheckCollision
   2957  25ba
   2958  25ba				   .skipL0299
   2959  25ba				   .L0300		;  if EnemyHit  =  1 then goto __Player2Move
   2960  25ba
   2961  25ba		       a5 d9		      LDA	EnemyHit
   2962  25bc		       c9 01		      CMP	#1
   2963  25be		       d0 03		      BNE	.skipL0300
   2964  25c0				   .condpart63
   2965  25c0		       4c 14 36 	      jmp	.__Player2Move
   2966  25c3
   2967  25c3				   .skipL0300
   2968  25c3				   .L0301		;  player1y  =  player1y  +  EnemySpeed
   2969  25c3
   2970  25c3		       a5 9a		      LDA	player1y
   2971  25c5		       18		      CLC
   2972  25c6		       65 d3		      ADC	EnemySpeed
   2973  25c8		       85 9a		      STA	player1y
   2974  25ca				   .L0302		;  goto __Player2Move
   2975  25ca
   2976  25ca		       4c 14 36 	      jmp	.__Player2Move
   2977  25cd
   2978  25cd				   .
   2979  25cd							; 
   2980  25cd
   2981  25cd				   .__Player1SideMove
   2982  25cd							; __Player1SideMove
   2983  25cd
   2984  25cd				   .L0303		;  player1y  = 165
   2985  25cd
   2986  25cd		       a9 a5		      LDA	#165
   2987  25cf		       85 9a		      STA	player1y
   2988  25d1				   .L0304		;  if player1x  <  REdge  &&  player1x  >  LEdge then Househit = Househit + 1 :  player1y = 200  :  goto __Player2Move : Moverate = Moverate - 1
   2989  25d1
   2990  25d1		       a5 90		      LDA	player1x
   2991  25d3		       c9 4f		      CMP	#REdge
   2992  25d5		       b0 11		      BCS	.skipL0304
   2993  25d7				   .condpart64
   2994  25d7		       a9 47		      LDA	#LEdge
   2995  25d9		       c5 90		      CMP	player1x
   2996  25db		       b0 0b		      BCS	.skip64then
   2997  25dd				   .condpart65
   2998  25dd		       e6 e1		      INC	Househit
   2999  25df		       a9 c8		      LDA	#200
   3000  25e1		       85 9a		      STA	player1y
   3001  25e3		       4c 14 36 	      jmp	.__Player2Move
   3002  25e6		       c6 d2		      DEC	Moverate
   3003  25e8				   .skip64then
   3004  25e8				   .skipL0304
   3005  25e8				   .L0305		;  if Moverate  <  8 then goto __CheckCollision
   3006  25e8
   3007  25e8		       a5 d2		      LDA	Moverate
   3008  25ea		       c9 08		      CMP	#8
   3009  25ec		       b0 03		      BCS	.skipL0305
   3010  25ee				   .condpart66
   3011  25ee		       4c fb 38 	      jmp	.__CheckCollision
   3012  25f1
   3013  25f1				   .skipL0305
   3014  25f1				   .L0306		;  if EnemyHit  =  1 then goto __Player2Move
   3015  25f1
   3016  25f1		       a5 d9		      LDA	EnemyHit
   3017  25f3		       c9 01		      CMP	#1
   3018  25f5		       d0 03		      BNE	.skipL0306
   3019  25f7				   .condpart67
   3020  25f7		       4c 14 36 	      jmp	.__Player2Move
   3021  25fa
   3022  25fa				   .skipL0306
   3023  25fa				   .L0307		;  if player1x  >  REdge then player1x  =  player1x  -  EnemySpeed
   3024  25fa
   3025  25fa		       a9 4f		      LDA	#REdge
   3026  25fc		       c5 90		      CMP	player1x
   3027  25fe		       b0 07		      BCS	.skipL0307
   3028  2600				   .condpart68
   3029  2600		       a5 90		      LDA	player1x
   3030  2602		       38		      SEC
   3031  2603		       e5 d3		      SBC	EnemySpeed
   3032  2605		       85 90		      STA	player1x
   3033  2607				   .skipL0307
   3034  2607				   .L0308		;  if player1x  <  LEdge then player1x  =  player1x  +  EnemySpeed
   3035  2607
   3036  2607		       a5 90		      LDA	player1x
   3037  2609		       c9 47		      CMP	#LEdge
   3038  260b		       b0 07		      BCS	.skipL0308
   3039  260d				   .condpart69
   3040  260d		       a5 90		      LDA	player1x
   3041  260f		       18		      CLC
   3042  2610		       65 d3		      ADC	EnemySpeed
   3043  2612		       85 90		      STA	player1x
   3044  2614				   .skipL0308
   3045  2614				   .
   3046  2614							; 
   3047  2614
   3048  2614				   .__Player2Move
   3049  2614							; __Player2Move
   3050  2614
   3051  2614				   .L0309		;  if drop  >=  48  &&  player2y  =  200 then goto __Player3Move
   3052  2614
   3053  2614		       a5 d1		      LDA	drop
   3054  2616		       c9 30		      CMP	#48
   3055  2618		       90 09		      BCC	.skipL0309
   3056  261a				   .condpart70
   3057  261a		       a5 9b		      LDA	player2y
   3058  261c		       c9 c8		      CMP	#200
   3059  261e		       d0 03		      BNE	.skip70then
   3060  2620				   .condpart71
   3061  2620		       4c 0d 37 	      jmp	.__Player3Move
   3062  2623
   3063  2623				   .skip70then
   3064  2623				   .skipL0309
   3065  2623				   .L0310		;  if player2y  > 165	&&  EnemyHit  <>  2 then player2y  =   ( rand & 10 )  + 1 :  player2x  =   ( rand + 150 )   :  drop  =	drop  + 1
   3066  2623
   3067  2623		       a9 a5		      LDA	#165
   3068  2625		       c5 9b		      CMP	player2y
   3069  2627		       b0 2a		      BCS	.skipL0310
   3070  2629				   .condpart72
   3071  2629		       a5 d9		      LDA	EnemyHit
   3072  262b		       c9 02		      CMP	#2
   3073  262d		       f0 24		      BEQ	.skip72then
   3074  262f				   .condpart73
   3075  262f							; complex statement detected
   3076  262f		       ad 00 10 	      lda	rand
   3077  2632		       4a		      lsr
   3078  2633				  -	      ifconst	rand16
   3079  2633				  -	      rol	rand16
   3080  2633					      endif
   3081  2633		       90 02		      bcc	*+4
   3082  2635		       49 b4		      eor	#$B4
   3083  2637		       8d 00 10 	      sta	rand
   3084  263a				  -	      ifconst	rand16
   3085  263a				  -	      eor	rand16
   3086  263a					      endif
   3087  263a		       29 0a		      AND	#10
   3088  263c		       18		      CLC
   3089  263d		       69 01		      ADC	#1
   3090  263f		       85 9b		      STA	player2y
   3091  2641							; complex statement detected
   3092  2641		       ad 00 10 	      lda	rand
   3093  2644		       4a		      lsr
   3094  2645				  -	      ifconst	rand16
   3095  2645				  -	      rol	rand16
   3096  2645					      endif
   3097  2645		       90 02		      bcc	*+4
   3098  2647		       49 b4		      eor	#$B4
   3099  2649		       8d 00 10 	      sta	rand
   3100  264c				  -	      ifconst	rand16
   3101  264c				  -	      eor	rand16
   3102  264c					      endif
   3103  264c		       18		      CLC
   3104  264d		       69 96		      ADC	#150
   3105  264f		       85 91		      STA	player2x
   3106  2651		       e6 d1		      INC	drop
   3107  2653				   .skip72then
   3108  2653				   .skipL0310
   3109  2653				   .L0311		;  if player2x  <  8 then player2x  =	8
   3110  2653
   3111  2653		       a5 91		      LDA	player2x
   3112  2655		       c9 08		      CMP	#8
   3113  2657		       b0 04		      BCS	.skipL0311
   3114  2659				   .condpart74
   3115  2659		       a9 08		      LDA	#8
   3116  265b		       85 91		      STA	player2x
   3117  265d				   .skipL0311
   3118  265d				   .L0312		;  if player2x  >  150 then player2x  =  150
   3119  265d
   3120  265d		       a9 96		      LDA	#150
   3121  265f		       c5 91		      CMP	player2x
   3122  2661		       b0 04		      BCS	.skipL0312
   3123  2663				   .condpart75
   3124  2663		       a9 96		      LDA	#150
   3125  2665		       85 91		      STA	player2x
   3126  2667				   .skipL0312
   3127  2667				   .L0313		;  if player2y  <  50	&&  player2y  >=  player4y  - 30  &&  player2y	<=  player4y + 30 then goto __Player3Move
   3128  2667
   3129  2667		       a5 9b		      LDA	player2y
   3130  2669		       c9 32		      CMP	#50
   3131  266b		       b0 1a		      BCS	.skipL0313
   3132  266d				   .condpart76
   3133  266d							; complex condition detected
   3134  266d		       a5 9d		      LDA	player4y
   3135  266f		       38		      SEC
   3136  2670		       e9 1e		      SBC	#30
   3137  2672		       48		      PHA
   3138  2673		       ba		      TSX
   3139  2674		       68		      PLA
   3140  2675		       a5 9b		      LDA	player2y
   3141  2677		       d5 01		      CMP	1,x
   3142  2679		       90 0c		      BCC	.skip76then
   3143  267b				   .condpart77
   3144  267b							; complex condition detected
   3145  267b		       a5 9d		      LDA	player4y
   3146  267d		       18		      CLC
   3147  267e		       69 1e		      ADC	#30
   3148  2680		       c5 9b		      CMP	player2y
   3149  2682		       90 03		      BCC	.skip77then
   3150  2684				   .condpart78
   3151  2684		       4c 0d 37 	      jmp	.__Player3Move
   3152  2687
   3153  2687				   .skip77then
   3154  2687				   .skip76then
   3155  2687				   .skipL0313
   3156  2687				   .L0314		;  if player2y  <  50	&&  player2y  >=  player1y  - 30  &&  player2y	<=  player1y + 30 then goto __Player3Move
   3157  2687
   3158  2687		       a5 9b		      LDA	player2y
   3159  2689		       c9 32		      CMP	#50
   3160  268b		       b0 1a		      BCS	.skipL0314
   3161  268d				   .condpart79
   3162  268d							; complex condition detected
   3163  268d		       a5 9a		      LDA	player1y
   3164  268f		       38		      SEC
   3165  2690		       e9 1e		      SBC	#30
   3166  2692		       48		      PHA
   3167  2693		       ba		      TSX
   3168  2694		       68		      PLA
   3169  2695		       a5 9b		      LDA	player2y
   3170  2697		       d5 01		      CMP	1,x
   3171  2699		       90 0c		      BCC	.skip79then
   3172  269b				   .condpart80
   3173  269b							; complex condition detected
   3174  269b		       a5 9a		      LDA	player1y
   3175  269d		       18		      CLC
   3176  269e		       69 1e		      ADC	#30
   3177  26a0		       c5 9b		      CMP	player2y
   3178  26a2		       90 03		      BCC	.skip80then
   3179  26a4				   .condpart81
   3180  26a4		       4c 0d 37 	      jmp	.__Player3Move
   3181  26a7
   3182  26a7				   .skip80then
   3183  26a7				   .skip79then
   3184  26a7				   .skipL0314
   3185  26a7				   .
   3186  26a7							; 
   3187  26a7
   3188  26a7				   .__SkipP2drop
   3189  26a7							; __SkipP2drop
   3190  26a7
   3191  26a7				   .L0315		;  if EnemyHit  =  2 then goto __Player3Move
   3192  26a7
   3193  26a7		       a5 d9		      LDA	EnemyHit
   3194  26a9		       c9 02		      CMP	#2
   3195  26ab		       d0 03		      BNE	.skipL0315
   3196  26ad				   .condpart82
   3197  26ad		       4c 0d 37 	      jmp	.__Player3Move
   3198  26b0
   3199  26b0				   .skipL0315
   3200  26b0				   .L0316		;  if Moverate  <  8 then goto __CheckCollision
   3201  26b0
   3202  26b0		       a5 d2		      LDA	Moverate
   3203  26b2		       c9 08		      CMP	#8
   3204  26b4		       b0 03		      BCS	.skipL0316
   3205  26b6				   .condpart83
   3206  26b6		       4c fb 38 	      jmp	.__CheckCollision
   3207  26b9
   3208  26b9				   .skipL0316
   3209  26b9				   .L0317		;  if level  >  3  &&	player2y  >=  130 then goto __PlayerSideSweep
   3210  26b9
   3211  26b9		       a9 03		      LDA	#3
   3212  26bb		       c5 dc		      CMP	level
   3213  26bd		       b0 09		      BCS	.skipL0317
   3214  26bf				   .condpart84
   3215  26bf		       a5 9b		      LDA	player2y
   3216  26c1		       c9 82		      CMP	#130
   3217  26c3		       90 03		      BCC	.skip84then
   3218  26c5				   .condpart85
   3219  26c5		       4c d2 36 	      jmp	.__PlayerSideSweep
   3220  26c8
   3221  26c8				   .skip84then
   3222  26c8				   .skipL0317
   3223  26c8				   .L0318		;  player2y  =  player2y  +  EnemySpeed
   3224  26c8
   3225  26c8		       a5 9b		      LDA	player2y
   3226  26ca		       18		      CLC
   3227  26cb		       65 d3		      ADC	EnemySpeed
   3228  26cd		       85 9b		      STA	player2y
   3229  26cf				   .L0319		;  goto __Player3Move
   3230  26cf
   3231  26cf		       4c 0d 37 	      jmp	.__Player3Move
   3232  26d2
   3233  26d2				   .
   3234  26d2							; 
   3235  26d2
   3236  26d2				   .__PlayerSideSweep
   3237  26d2							; __PlayerSideSweep
   3238  26d2
   3239  26d2				   .L0320		;  player2y  = 130
   3240  26d2
   3241  26d2		       a9 82		      LDA	#130
   3242  26d4		       85 9b		      STA	player2y
   3243  26d6				   .L0321		;  if Moverate  <  8 then goto __CheckCollision
   3244  26d6
   3245  26d6		       a5 d2		      LDA	Moverate
   3246  26d8		       c9 08		      CMP	#8
   3247  26da		       b0 03		      BCS	.skipL0321
   3248  26dc				   .condpart86
   3249  26dc		       4c fb 38 	      jmp	.__CheckCollision
   3250  26df
   3251  26df				   .skipL0321
   3252  26df				   .L0322		;  if player2x  >  REdge then player2x  =  player2x  -   ( level  - 3 ) 
   3253  26df
   3254  26df		       a9 4f		      LDA	#REdge
   3255  26e1		       c5 91		      CMP	player2x
   3256  26e3		       b0 12		      BCS	.skipL0322
   3257  26e5				   .condpart87
   3258  26e5							; complex statement detected
   3259  26e5		       a5 91		      LDA	player2x
   3260  26e7		       48		      PHA
   3261  26e8		       a5 dc		      LDA	level
   3262  26ea		       38		      SEC
   3263  26eb		       e9 03		      SBC	#3
   3264  26ed		       a8		      TAY
   3265  26ee		       68		      PLA
   3266  26ef		       ba		      TSX
   3267  26f0		       94 00		      STY	$00,x
   3268  26f2		       38		      SEC
   3269  26f3		       f5 00		      SBC	$00,x
   3270  26f5		       85 91		      STA	player2x
   3271  26f7				   .skipL0322
   3272  26f7				   .L0323		;  if player2x  <  LEdge then player2x  =  player2x  +   ( level  - 3 ) 
   3273  26f7
   3274  26f7		       a5 91		      LDA	player2x
   3275  26f9		       c9 47		      CMP	#LEdge
   3276  26fb		       b0 10		      BCS	.skipL0323
   3277  26fd				   .condpart88
   3278  26fd							; complex statement detected
   3279  26fd		       a5 91		      LDA	player2x
   3280  26ff		       48		      PHA
   3281  2700		       a5 dc		      LDA	level
   3282  2702		       38		      SEC
   3283  2703		       e9 03		      SBC	#3
   3284  2705		       ba		      TSX
   3285  2706		       e8		      INX
   3286  2707		       9a		      TXS
   3287  2708		       18		      CLC
   3288  2709		       75 00		      ADC	$00,x
   3289  270b		       85 91		      STA	player2x
   3290  270d				   .skipL0323
   3291  270d				   .
   3292  270d							; 
   3293  270d
   3294  270d				   .__Player3Move
   3295  270d							; __Player3Move
   3296  270d
   3297  270d				   .
   3298  270d							; 
   3299  270d
   3300  270d				   .__SkipP3drop
   3301  270d							; __SkipP3drop
   3302  270d
   3303  270d				   .L0324		;  if Moverate  <  5 then goto __CheckCollision
   3304  270d
   3305  270d		       a5 d2		      LDA	Moverate
   3306  270f		       c9 05		      CMP	#5
   3307  2711		       b0 03		      BCS	.skipL0324
   3308  2713				   .condpart89
   3309  2713		       4c fb 38 	      jmp	.__CheckCollision
   3310  2716
   3311  2716				   .skipL0324
   3312  2716				   .L0325		;  if player3y  >  120 then __Player3Xset
   3313  2716
   3314  2716		       a9 78		      LDA	#120
   3315  2718		       c5 9c		      CMP	player3y
   3316  271a					      if	((* - .__Player3Xset) < 127) && ((* - .__Player3Xset) > -128)
   3317  271a		       90 2c		      bcc	.__Player3Xset
   3318  271c				  -	      else
   3319  271c				  -	      bcs	.3skip__Player3Xset
   3320  271c				  -	      jmp	.__Player3Xset
   3321  271c				  -.3skip__Player3Xset
   3322  271c					      endif
   3323  271c				   .L0326		;  if level  >  2  &&	player3x  >  LEdge  &&	player3x  <  REdge then player3y  =  player3y  +  3 :  goto __SkipHMove
   3324  271c
   3325  271c		       a9 02		      LDA	#2
   3326  271e		       c5 dc		      CMP	level
   3327  2720		       b0 16		      BCS	.skipL0326
   3328  2722				   .condpart90
   3329  2722		       a9 47		      LDA	#LEdge
   3330  2724		       c5 92		      CMP	player3x
   3331  2726		       b0 10		      BCS	.skip90then
   3332  2728				   .condpart91
   3333  2728		       a5 92		      LDA	player3x
   3334  272a		       c9 4f		      CMP	#REdge
   3335  272c		       b0 0a		      BCS	.skip91then
   3336  272e				   .condpart92
   3337  272e		       a5 9c		      LDA	player3y
   3338  2730		       18		      CLC
   3339  2731		       69 03		      ADC	#3
   3340  2733		       85 9c		      STA	player3y
   3341  2735		       4c f7 38 	      jmp	.__SkipHMove
   3342  2738
   3343  2738				   .skip91then
   3344  2738				   .skip90then
   3345  2738				   .skipL0326
   3346  2738				   .L0327		;  if EnemyHit  =  3 then goto __SkipHMove
   3347  2738
   3348  2738		       a5 d9		      LDA	EnemyHit
   3349  273a		       c9 03		      CMP	#3
   3350  273c		       d0 03		      BNE	.skipL0327
   3351  273e				   .condpart93
   3352  273e		       4c f7 38 	      jmp	.__SkipHMove
   3353  2741
   3354  2741				   .skipL0327
   3355  2741				   .L0328		;  if Bit6_PLayer3Direction{6} then goto __Player3xMove
   3356  2741
   3357  2741		       24 ea		      BIT	Bit6_PLayer3Direction
   3358  2743		       50 03		      BVC	.skipL0328
   3359  2745				   .condpart94
   3360  2745		       4c be 37 	      jmp	.__Player3xMove
   3361  2748
   3362  2748				   .skipL0328
   3363  2748				   .
   3364  2748							; 
   3365  2748
   3366  2748				   .__Player3Xset
   3367  2748							; __Player3Xset
   3368  2748
   3369  2748				   .L0329		;  if	( rand & 1 )   > 0 then Bit7_PLayer3Moving{7}  = 1 else Bit7_PLayer3Moving{7}  = 0
   3370  2748
   3371  2748							; complex condition detected
   3372  2748							; complex statement detected
   3373  2748		       ad 00 10 	      lda	rand
   3374  274b		       4a		      lsr
   3375  274c				  -	      ifconst	rand16
   3376  274c				  -	      rol	rand16
   3377  274c					      endif
   3378  274c		       90 02		      bcc	*+4
   3379  274e		       49 b4		      eor	#$B4
   3380  2750		       8d 00 10 	      sta	rand
   3381  2753				  -	      ifconst	rand16
   3382  2753				  -	      eor	rand16
   3383  2753					      endif
   3384  2753		       29 01		      AND	#1
   3385  2755		       48		      PHA
   3386  2756		       ba		      TSX
   3387  2757		       68		      PLA
   3388  2758		       a9 00		      LDA	#0
   3389  275a		       d5 01		      CMP	1,x
   3390  275c		       b0 09		      BCS	.skipL0329
   3391  275e				   .condpart95
   3392  275e		       a5 ea		      LDA	Bit7_PLayer3Moving
   3393  2760		       09 80		      ORA	#128
   3394  2762		       85 ea		      STA	Bit7_PLayer3Moving
   3395  2764		       4c 6d 37 	      jmp	.skipelse0
   3396  2767				   .skipL0329
   3397  2767		       a5 ea		      LDA	Bit7_PLayer3Moving
   3398  2769		       29 7f		      AND	#127
   3399  276b		       85 ea		      STA	Bit7_PLayer3Moving
   3400  276d				   .skipelse0
   3401  276d				   .L0330		;  if drop  >	49 then goto __Player3Reset
   3402  276d
   3403  276d		       a9 31		      LDA	#49
   3404  276f		       c5 d1		      CMP	drop
   3405  2771		       b0 03		      BCS	.skipL0330
   3406  2773				   .condpart96
   3407  2773		       4c cd 38 	      jmp	.__Player3Reset
   3408  2776
   3409  2776				   .skipL0330
   3410  2776				   .L0331		;  if Bit7_PLayer3Moving{7} then player3y  =  ( rand & 20 )   +  20  :  player3x  =  150  :  drop  =  drop  + 1
   3411  2776
   3412  2776		       24 ea		      BIT	Bit7_PLayer3Moving
   3413  2778		       10 18		      BPL	.skipL0331
   3414  277a				   .condpart97
   3415  277a							; complex statement detected
   3416  277a		       ad 00 10 	      lda	rand
   3417  277d		       4a		      lsr
   3418  277e				  -	      ifconst	rand16
   3419  277e				  -	      rol	rand16
   3420  277e					      endif
   3421  277e		       90 02		      bcc	*+4
   3422  2780		       49 b4		      eor	#$B4
   3423  2782		       8d 00 10 	      sta	rand
   3424  2785				  -	      ifconst	rand16
   3425  2785				  -	      eor	rand16
   3426  2785					      endif
   3427  2785		       29 14		      AND	#20
   3428  2787		       18		      CLC
   3429  2788		       69 14		      ADC	#20
   3430  278a		       85 9c		      STA	player3y
   3431  278c		       a9 96		      LDA	#150
   3432  278e		       85 92		      STA	player3x
   3433  2790		       e6 d1		      INC	drop
   3434  2792				   .skipL0331
   3435  2792				   .L0332		;  if !Bit7_PLayer3Moving{7} then player3y  =	( rand & 20 )	+  20  :  player3x  =  4  :  drop  =  drop  + 1
   3436  2792
   3437  2792		       24 ea		      BIT	Bit7_PLayer3Moving
   3438  2794		       30 18		      BMI	.skipL0332
   3439  2796				   .condpart98
   3440  2796							; complex statement detected
   3441  2796		       ad 00 10 	      lda	rand
   3442  2799		       4a		      lsr
   3443  279a				  -	      ifconst	rand16
   3444  279a				  -	      rol	rand16
   3445  279a					      endif
   3446  279a		       90 02		      bcc	*+4
   3447  279c		       49 b4		      eor	#$B4
   3448  279e		       8d 00 10 	      sta	rand
   3449  27a1				  -	      ifconst	rand16
   3450  27a1				  -	      eor	rand16
   3451  27a1					      endif
   3452  27a1		       29 14		      AND	#20
   3453  27a3		       18		      CLC
   3454  27a4		       69 14		      ADC	#20
   3455  27a6		       85 9c		      STA	player3y
   3456  27a8		       a9 04		      LDA	#4
   3457  27aa		       85 92		      STA	player3x
   3458  27ac		       e6 d1		      INC	drop
   3459  27ae				   .skipL0332
   3460  27ae				   .L0333		;  if player3y  >  100 then player3y  = 80
   3461  27ae
   3462  27ae		       a9 64		      LDA	#100
   3463  27b0		       c5 9c		      CMP	player3y
   3464  27b2		       b0 04		      BCS	.skipL0333
   3465  27b4				   .condpart99
   3466  27b4		       a9 50		      LDA	#80
   3467  27b6		       85 9c		      STA	player3y
   3468  27b8				   .skipL0333
   3469  27b8				   .L0334		;  Bit6_PLayer3Direction{6}  = 1
   3470  27b8
   3471  27b8		       a5 ea		      LDA	Bit6_PLayer3Direction
   3472  27ba		       09 40		      ORA	#64
   3473  27bc		       85 ea		      STA	Bit6_PLayer3Direction
   3474  27be				   .
   3475  27be							; 
   3476  27be
   3477  27be				   .__Player3xMove
   3478  27be							; __Player3xMove
   3479  27be
   3480  27be				   .L0335		;  if !Bit7_PLayer3Moving{7}  &&  player3y  >=  player1y  - 5	&&  player3y  <=  player1y + 5	&&  player3x  >=  player1x  - 20 then goto __Player3Reset
   3481  27be
   3482  27be		       24 ea		      BIT	Bit7_PLayer3Moving
   3483  27c0		       30 28		      BMI	.skipL0335
   3484  27c2				   .condpart100
   3485  27c2							; complex condition detected
   3486  27c2		       a5 9a		      LDA	player1y
   3487  27c4		       38		      SEC
   3488  27c5		       e9 05		      SBC	#5
   3489  27c7		       48		      PHA
   3490  27c8		       ba		      TSX
   3491  27c9		       68		      PLA
   3492  27ca		       a5 9c		      LDA	player3y
   3493  27cc		       d5 01		      CMP	1,x
   3494  27ce		       90 1a		      BCC	.skip100then
   3495  27d0				   .condpart101
   3496  27d0							; complex condition detected
   3497  27d0		       a5 9a		      LDA	player1y
   3498  27d2		       18		      CLC
   3499  27d3		       69 05		      ADC	#5
   3500  27d5							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3501  27d5		       c5 9c		      CMP	player3y
   3502  27d7		       90 11		      BCC	.skip101then
   3503  27d9				   .condpart102
   3504  27d9							; complex condition detected
   3505  27d9		       a5 90		      LDA	player1x
   3506  27db		       38		      SEC
   3507  27dc		       e9 14		      SBC	#20
   3508  27de		       48		      PHA
   3509  27df		       ba		      TSX
   3510  27e0		       68		      PLA
   3511  27e1		       a5 92		      LDA	player3x
   3512  27e3		       d5 01		      CMP	1,x
   3513  27e5		       90 03		      BCC	.skip102then
   3514  27e7				   .condpart103
   3515  27e7		       4c cd 38 	      jmp	.__Player3Reset
   3516  27ea
   3517  27ea				   .skip102then
   3518  27ea				   .skip101then
   3519  27ea				   .skip100then
   3520  27ea				   .skipL0335
   3521  27ea				   .L0336		;  if Bit7_PLayer3Moving{7}  &&  player3y  >=	player1y  - 5  &&  player3y  <=  player1y + 5  &&  player3x  <=  player1x  + 20 then goto __Player3Reset
   3522  27ea
   3523  27ea		       24 ea		      BIT	Bit7_PLayer3Moving
   3524  27ec		       10 23		      BPL	.skipL0336
   3525  27ee				   .condpart104
   3526  27ee							; complex condition detected
   3527  27ee		       a5 9a		      LDA	player1y
   3528  27f0		       38		      SEC
   3529  27f1		       e9 05		      SBC	#5
   3530  27f3		       48		      PHA
   3531  27f4		       ba		      TSX
   3532  27f5		       68		      PLA
   3533  27f6		       a5 9c		      LDA	player3y
   3534  27f8		       d5 01		      CMP	1,x
   3535  27fa		       90 15		      BCC	.skip104then
   3536  27fc				   .condpart105
   3537  27fc							; complex condition detected
   3538  27fc		       a5 9a		      LDA	player1y
   3539  27fe		       18		      CLC
   3540  27ff		       69 05		      ADC	#5
   3541  2801							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3542  2801		       c5 9c		      CMP	player3y
   3543  2803		       90 0c		      BCC	.skip105then
   3544  2805				   .condpart106
   3545  2805							; complex condition detected
   3546  2805		       a5 90		      LDA	player1x
   3547  2807		       18		      CLC
   3548  2808		       69 14		      ADC	#20
   3549  280a		       c5 92		      CMP	player3x
   3550  280c		       90 03		      BCC	.skip106then
   3551  280e				   .condpart107
   3552  280e		       4c cd 38 	      jmp	.__Player3Reset
   3553  2811
   3554  2811				   .skip106then
   3555  2811				   .skip105then
   3556  2811				   .skip104then
   3557  2811				   .skipL0336
   3558  2811				   .L0337		;  if !Bit7_PLayer3Moving{7}  &&  player3y  >=  player2y  - 5	&&  player3y  <=  player2y + 5	&&  player3x  >=  player2x  - 20 then goto __Player3Reset
   3559  2811
   3560  2811		       24 ea		      BIT	Bit7_PLayer3Moving
   3561  2813		       30 28		      BMI	.skipL0337
   3562  2815				   .condpart108
   3563  2815							; complex condition detected
   3564  2815		       a5 9b		      LDA	player2y
   3565  2817		       38		      SEC
   3566  2818		       e9 05		      SBC	#5
   3567  281a		       48		      PHA
   3568  281b		       ba		      TSX
   3569  281c		       68		      PLA
   3570  281d		       a5 9c		      LDA	player3y
   3571  281f		       d5 01		      CMP	1,x
   3572  2821		       90 1a		      BCC	.skip108then
   3573  2823				   .condpart109
   3574  2823							; complex condition detected
   3575  2823		       a5 9b		      LDA	player2y
   3576  2825		       18		      CLC
   3577  2826		       69 05		      ADC	#5
   3578  2828							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3579  2828		       c5 9c		      CMP	player3y
   3580  282a		       90 11		      BCC	.skip109then
   3581  282c				   .condpart110
   3582  282c							; complex condition detected
   3583  282c		       a5 91		      LDA	player2x
   3584  282e		       38		      SEC
   3585  282f		       e9 14		      SBC	#20
   3586  2831		       48		      PHA
   3587  2832		       ba		      TSX
   3588  2833		       68		      PLA
   3589  2834		       a5 92		      LDA	player3x
   3590  2836		       d5 01		      CMP	1,x
   3591  2838		       90 03		      BCC	.skip110then
   3592  283a				   .condpart111
   3593  283a		       4c cd 38 	      jmp	.__Player3Reset
   3594  283d
   3595  283d				   .skip110then
   3596  283d				   .skip109then
   3597  283d				   .skip108then
   3598  283d				   .skipL0337
   3599  283d				   .L0338		;  if Bit7_PLayer3Moving{7}  &&  player3y  >=	player2y  - 5  &&  player3y  <=  player2y + 5  &&  player3x  <=  player2x  + 20 then goto __Player3Reset
   3600  283d
   3601  283d		       24 ea		      BIT	Bit7_PLayer3Moving
   3602  283f		       10 23		      BPL	.skipL0338
   3603  2841				   .condpart112
   3604  2841							; complex condition detected
   3605  2841		       a5 9b		      LDA	player2y
   3606  2843		       38		      SEC
   3607  2844		       e9 05		      SBC	#5
   3608  2846		       48		      PHA
   3609  2847		       ba		      TSX
   3610  2848		       68		      PLA
   3611  2849		       a5 9c		      LDA	player3y
   3612  284b		       d5 01		      CMP	1,x
   3613  284d		       90 15		      BCC	.skip112then
   3614  284f				   .condpart113
   3615  284f							; complex condition detected
   3616  284f		       a5 9b		      LDA	player2y
   3617  2851		       18		      CLC
   3618  2852		       69 05		      ADC	#5
   3619  2854							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3620  2854		       c5 9c		      CMP	player3y
   3621  2856		       90 0c		      BCC	.skip113then
   3622  2858				   .condpart114
   3623  2858							; complex condition detected
   3624  2858		       a5 91		      LDA	player2x
   3625  285a		       18		      CLC
   3626  285b		       69 14		      ADC	#20
   3627  285d		       c5 92		      CMP	player3x
   3628  285f		       90 03		      BCC	.skip114then
   3629  2861				   .condpart115
   3630  2861		       4c cd 38 	      jmp	.__Player3Reset
   3631  2864
   3632  2864				   .skip114then
   3633  2864				   .skip113then
   3634  2864				   .skip112then
   3635  2864				   .skipL0338
   3636  2864				   .L0339		;  if !Bit7_PLayer3Moving{7}  &&  player3y  >=  player4y  - 5	&&  player3y  <=  player4y + 5	&&  player3x  >=  player4x  - 20 then goto __Player3Reset
   3637  2864
   3638  2864		       24 ea		      BIT	Bit7_PLayer3Moving
   3639  2866		       30 28		      BMI	.skipL0339
   3640  2868				   .condpart116
   3641  2868							; complex condition detected
   3642  2868		       a5 9d		      LDA	player4y
   3643  286a		       38		      SEC
   3644  286b		       e9 05		      SBC	#5
   3645  286d		       48		      PHA
   3646  286e		       ba		      TSX
   3647  286f		       68		      PLA
   3648  2870		       a5 9c		      LDA	player3y
   3649  2872		       d5 01		      CMP	1,x
   3650  2874		       90 1a		      BCC	.skip116then
   3651  2876				   .condpart117
   3652  2876							; complex condition detected
   3653  2876		       a5 9d		      LDA	player4y
   3654  2878		       18		      CLC
   3655  2879		       69 05		      ADC	#5
   3656  287b							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3657  287b		       c5 9c		      CMP	player3y
   3658  287d		       90 11		      BCC	.skip117then
   3659  287f				   .condpart118
   3660  287f							; complex condition detected
   3661  287f		       a5 93		      LDA	player4x
   3662  2881		       38		      SEC
   3663  2882		       e9 14		      SBC	#20
   3664  2884		       48		      PHA
   3665  2885		       ba		      TSX
   3666  2886		       68		      PLA
   3667  2887		       a5 92		      LDA	player3x
   3668  2889		       d5 01		      CMP	1,x
   3669  288b		       90 03		      BCC	.skip118then
   3670  288d				   .condpart119
   3671  288d		       4c cd 38 	      jmp	.__Player3Reset
   3672  2890
   3673  2890				   .skip118then
   3674  2890				   .skip117then
   3675  2890				   .skip116then
   3676  2890				   .skipL0339
   3677  2890				   .L0340		;  if Bit7_PLayer3Moving{7}  &&  player3y  >=	player4y  - 5  &&  player3y  <=  player4y + 5  &&  player3x  <=  player4x  + 20 then goto __Player3Reset
   3678  2890
   3679  2890		       24 ea		      BIT	Bit7_PLayer3Moving
   3680  2892		       10 23		      BPL	.skipL0340
   3681  2894				   .condpart120
   3682  2894							; complex condition detected
   3683  2894		       a5 9d		      LDA	player4y
   3684  2896		       38		      SEC
   3685  2897		       e9 05		      SBC	#5
   3686  2899		       48		      PHA
   3687  289a		       ba		      TSX
   3688  289b		       68		      PLA
   3689  289c		       a5 9c		      LDA	player3y
   3690  289e		       d5 01		      CMP	1,x
   3691  28a0		       90 15		      BCC	.skip120then
   3692  28a2				   .condpart121
   3693  28a2							; complex condition detected
   3694  28a2		       a5 9d		      LDA	player4y
   3695  28a4		       18		      CLC
   3696  28a5		       69 05		      ADC	#5
   3697  28a7							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3698  28a7		       c5 9c		      CMP	player3y
   3699  28a9		       90 0c		      BCC	.skip121then
   3700  28ab				   .condpart122
   3701  28ab							; complex condition detected
   3702  28ab		       a5 93		      LDA	player4x
   3703  28ad		       18		      CLC
   3704  28ae		       69 14		      ADC	#20
   3705  28b0		       c5 92		      CMP	player3x
   3706  28b2		       90 03		      BCC	.skip122then
   3707  28b4				   .condpart123
   3708  28b4		       4c cd 38 	      jmp	.__Player3Reset
   3709  28b7
   3710  28b7				   .skip122then
   3711  28b7				   .skip121then
   3712  28b7				   .skip120then
   3713  28b7				   .skipL0340
   3714  28b7				   .L0341		;  if !Bit7_PLayer3Moving{7} then player3x  =	player3x  +  EnemySpeed
   3715  28b7
   3716  28b7		       24 ea		      BIT	Bit7_PLayer3Moving
   3717  28b9		       30 07		      BMI	.skipL0341
   3718  28bb				   .condpart124
   3719  28bb		       a5 92		      LDA	player3x
   3720  28bd		       18		      CLC
   3721  28be		       65 d3		      ADC	EnemySpeed
   3722  28c0		       85 92		      STA	player3x
   3723  28c2				   .skipL0341
   3724  28c2				   .L0342		;  if Bit7_PLayer3Moving{7} then player3x  =  player3x  -  EnemySpeed
   3725  28c2
   3726  28c2		       24 ea		      BIT	Bit7_PLayer3Moving
   3727  28c4		       10 07		      BPL	.skipL0342
   3728  28c6				   .condpart125
   3729  28c6		       a5 92		      LDA	player3x
   3730  28c8		       38		      SEC
   3731  28c9		       e5 d3		      SBC	EnemySpeed
   3732  28cb		       85 92		      STA	player3x
   3733  28cd				   .skipL0342
   3734  28cd				   .
   3735  28cd							; 
   3736  28cd
   3737  28cd				   .__Player3Reset
   3738  28cd							; __Player3Reset
   3739  28cd
   3740  28cd				   .L0343		;  if player3x  >  153  ||  player3x  <  2 then drop  = drop  + 1
   3741  28cd
   3742  28cd		       a9 99		      LDA	#153
   3743  28cf		       c5 92		      CMP	player3x
   3744  28d1		       b0 03		      BCS	.skipL0343
   3745  28d3				   .condpart126
   3746  28d3		       4c dc 38 	      jmp	.condpart127
   3747  28d6				   .skipL0343
   3748  28d6		       a5 92		      LDA	player3x
   3749  28d8		       c9 02		      CMP	#2
   3750  28da		       b0 02		      BCS	.skip38OR
   3751  28dc				   .condpart127
   3752  28dc		       e6 d1		      INC	drop
   3753  28de				   .skip38OR
   3754  28de				   .L0344		;  if player3x  >  153  ||  player3x  <  2 then player3y  = 200 :  Bit6_PLayer3Direction{6}  =  0
   3755  28de
   3756  28de		       a9 99		      LDA	#153
   3757  28e0		       c5 92		      CMP	player3x
   3758  28e2		       b0 03		      BCS	.skipL0344
   3759  28e4				   .condpart128
   3760  28e4		       4c ed 38 	      jmp	.condpart129
   3761  28e7				   .skipL0344
   3762  28e7		       a5 92		      LDA	player3x
   3763  28e9		       c9 02		      CMP	#2
   3764  28eb		       b0 0a		      BCS	.skip39OR
   3765  28ed				   .condpart129
   3766  28ed		       a9 c8		      LDA	#200
   3767  28ef		       85 9c		      STA	player3y
   3768  28f1		       a5 ea		      LDA	Bit6_PLayer3Direction
   3769  28f3		       29 bf		      AND	#191
   3770  28f5		       85 ea		      STA	Bit6_PLayer3Direction
   3771  28f7				   .skip39OR
   3772  28f7				   .
   3773  28f7							; 
   3774  28f7
   3775  28f7				   .__SkipHMove
   3776  28f7							; __SkipHMove
   3777  28f7
   3778  28f7				   .L0345		;  Moverate = 0
   3779  28f7
   3780  28f7		       a9 00		      LDA	#0
   3781  28f9		       85 d2		      STA	Moverate
   3782  28fb				   .
   3783  28fb							; 
   3784  28fb
   3785  28fb				   .__EnemyMove
   3786  28fb							; __EnemyMove
   3787  28fb
   3788  28fb				   .
   3789  28fb							; 
   3790  28fb
   3791  28fb				   .
   3792  28fb							; 
   3793  28fb
   3794  28fb				   .
   3795  28fb							; 
   3796  28fb
   3797  28fb				   .
   3798  28fb							; 
   3799  28fb
   3800  28fb				   .
   3801  28fb							; 
   3802  28fb
   3803  28fb				   .__CheckCollision
   3804  28fb							; __CheckCollision
   3805  28fb
   3806  28fb				   .L0346		;  if EnemyHit  > 0 then __EnemyCollision
   3807  28fb
   3808  28fb		       a9 00		      LDA	#0
   3809  28fd		       c5 d9		      CMP	EnemyHit
   3810  28ff				  -	      if	((* - .__EnemyCollision) < 127) && ((* - .__EnemyCollision) > -128)
   3811  28ff				  -	      bcc	.__EnemyCollision
   3812  28ff					      else
   3813  28ff		       b0 03		      bcs	.4skip__EnemyCollision
   3814  2901		       4c a1 39 	      jmp	.__EnemyCollision
   3815  2904				   .4skip__EnemyCollision
   3816  2904					      endif
   3817  2904				   .L0347		;  if !collision(player1,playfield) then goto __EnemyCollision
   3818  2904
   3819  2904		       24 03		      bit	CXP1FB
   3820  2906		       30 03		      BMI	.skipL0347
   3821  2908				   .condpart130
   3822  2908		       4c a1 39 	      jmp	.__EnemyCollision
   3823  290b
   3824  290b				   .skipL0347
   3825  290b				   .L0348		;  if	( temp4  +  5 )   >=  player1y	&&  temp4  <=	( player1y  +  5 )  then player1y = 200  :  Househit = Househit + 1  :	Bit5_hit{5}  = 1  :  goto __Explosion
   3826  290b
   3827  290b							; complex condition detected
   3828  290b							; complex statement detected
   3829  290b		       a5 ce		      LDA	temp4
   3830  290d		       18		      CLC
   3831  290e		       69 05		      ADC	#5
   3832  2910							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3833  2910		       c5 9a		      CMP	player1y
   3834  2912		       90 18		      BCC	.skipL0348
   3835  2914				   .condpart131
   3836  2914							; complex condition detected
   3837  2914							; complex statement detected
   3838  2914		       a5 9a		      LDA	player1y
   3839  2916		       18		      CLC
   3840  2917		       69 05		      ADC	#5
   3841  2919		       c5 ce		      CMP	temp4
   3842  291b		       90 0f		      BCC	.skip131then
   3843  291d				   .condpart132
   3844  291d		       a9 c8		      LDA	#200
   3845  291f		       85 9a		      STA	player1y
   3846  2921		       e6 e1		      INC	Househit
   3847  2923		       a5 ea		      LDA	Bit5_hit
   3848  2925		       09 20		      ORA	#32
   3849  2927		       85 ea		      STA	Bit5_hit
   3850  2929		       4c 71 3c 	      jmp	.__Explosion
   3851  292c
   3852  292c				   .skip131then
   3853  292c				   .skipL0348
   3854  292c				   .L0349		;  if	( temp4  +  5 )   >=  player2y	&&  temp4  <=	( player2y  +  5 )  then player2y = 200  :  Househit = Househit + 1  :	Bit5_hit{5}  = 1  :  goto __Explosion
   3855  292c
   3856  292c							; complex condition detected
   3857  292c							; complex statement detected
   3858  292c		       a5 ce		      LDA	temp4
   3859  292e		       18		      CLC
   3860  292f		       69 05		      ADC	#5
   3861  2931							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3862  2931		       c5 9b		      CMP	player2y
   3863  2933		       90 18		      BCC	.skipL0349
   3864  2935				   .condpart133
   3865  2935							; complex condition detected
   3866  2935							; complex statement detected
   3867  2935		       a5 9b		      LDA	player2y
   3868  2937		       18		      CLC
   3869  2938		       69 05		      ADC	#5
   3870  293a		       c5 ce		      CMP	temp4
   3871  293c		       90 0f		      BCC	.skip133then
   3872  293e				   .condpart134
   3873  293e		       a9 c8		      LDA	#200
   3874  2940		       85 9b		      STA	player2y
   3875  2942		       e6 e1		      INC	Househit
   3876  2944		       a5 ea		      LDA	Bit5_hit
   3877  2946		       09 20		      ORA	#32
   3878  2948		       85 ea		      STA	Bit5_hit
   3879  294a		       4c 71 3c 	      jmp	.__Explosion
   3880  294d
   3881  294d				   .skip133then
   3882  294d				   .skipL0349
   3883  294d				   .L0350		;  if	( temp4  +  5 )   >=  player3y	&&  temp4  <=	( player3y  +  5 )  then player3y = 200  :  Bit6_PLayer3Direction{6}  =  0  :  Househit = Househit + 1	:  Bit5_hit{5}	= 1  :	goto __Explosion
   3884  294d
   3885  294d							; complex condition detected
   3886  294d							; complex statement detected
   3887  294d		       a5 ce		      LDA	temp4
   3888  294f		       18		      CLC
   3889  2950		       69 05		      ADC	#5
   3890  2952							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3891  2952		       c5 9c		      CMP	player3y
   3892  2954		       90 1e		      BCC	.skipL0350
   3893  2956				   .condpart135
   3894  2956							; complex condition detected
   3895  2956							; complex statement detected
   3896  2956		       a5 9c		      LDA	player3y
   3897  2958		       18		      CLC
   3898  2959		       69 05		      ADC	#5
   3899  295b		       c5 ce		      CMP	temp4
   3900  295d		       90 15		      BCC	.skip135then
   3901  295f				   .condpart136
   3902  295f		       a9 c8		      LDA	#200
   3903  2961		       85 9c		      STA	player3y
   3904  2963		       a5 ea		      LDA	Bit6_PLayer3Direction
   3905  2965		       29 bf		      AND	#191
   3906  2967		       85 ea		      STA	Bit6_PLayer3Direction
   3907  2969		       e6 e1		      INC	Househit
   3908  296b		       a5 ea		      LDA	Bit5_hit
   3909  296d		       09 20		      ORA	#32
   3910  296f		       85 ea		      STA	Bit5_hit
   3911  2971		       4c 71 3c 	      jmp	.__Explosion
   3912  2974
   3913  2974				   .skip135then
   3914  2974				   .skipL0350
   3915  2974				   .L0351		;  if	( temp4  +  5 )   >=  player4y	&&  temp4  <=	( player4y  +  5 )  then player4y = 200  :  HealthDrop = 0 :  Bit2_EnemyMove{2} = 0  :	if Powerup  < 1 then Househit = Househit + 3
   3916  2974
   3917  2974							; complex condition detected
   3918  2974							; complex statement detected
   3919  2974		       a5 ce		      LDA	temp4
   3920  2976		       18		      CLC
   3921  2977		       69 05		      ADC	#5
   3922  2979							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3923  2979		       c5 9d		      CMP	player4y
   3924  297b		       90 24		      BCC	.skipL0351
   3925  297d				   .condpart137
   3926  297d							; complex condition detected
   3927  297d							; complex statement detected
   3928  297d		       a5 9d		      LDA	player4y
   3929  297f		       18		      CLC
   3930  2980		       69 05		      ADC	#5
   3931  2982		       c5 ce		      CMP	temp4
   3932  2984		       90 1b		      BCC	.skip137then
   3933  2986				   .condpart138
   3934  2986		       a9 c8		      LDA	#200
   3935  2988		       85 9d		      STA	player4y
   3936  298a		       a9 00		      LDA	#0
   3937  298c		       85 de		      STA	HealthDrop
   3938  298e		       a5 ea		      LDA	Bit2_EnemyMove
   3939  2990		       29 fb		      AND	#251
   3940  2992		       85 ea		      STA	Bit2_EnemyMove
   3941  2994		       a5 ee		      LDA	Powerup
   3942  2996		       c9 01		      CMP	#1
   3943  2998		       b0 07		      BCS	.skip138then
   3944  299a				   .condpart139
   3945  299a		       a5 e1		      LDA	Househit
   3946  299c		       18		      CLC
   3947  299d		       69 03		      ADC	#3
   3948  299f		       85 e1		      STA	Househit
   3949  29a1				   .skip138then
   3950  29a1				   .skip137then
   3951  29a1				   .skipL0351
   3952  29a1				   .
   3953  29a1							; 
   3954  29a1
   3955  29a1				   .__EnemyCollision
   3956  29a1							; __EnemyCollision
   3957  29a1
   3958  29a1				   .L0352		;  if !collision(player0,player1) then goto __Skip_p0_Collision
   3959  29a1
   3960  29a1		       24 07		      bit	CXPPMM
   3961  29a3		       30 03		      BMI	.skipL0352
   3962  29a5				   .condpart140
   3963  29a5		       4c b7 3a 	      jmp	.__Skip_p0_Collision
   3964  29a8
   3965  29a8				   .skipL0352
   3966  29a8				   .L0353		;  temp5  =  15
   3967  29a8
   3968  29a8		       a9 0f		      LDA	#15
   3969  29aa		       85 cf		      STA	temp5
   3970  29ac				   .L0354		;  if EnemyHit  <>  1 then if	( player0y  +  10 )   >=  player1y  &&	player0y  <=   ( player1y  +  10 )   &&   ( player0x  +  temp5 )   >=  player1x  &&  player0x  <=   ( player1x	+  7 )	then EnemyHit  =  1  :	Damage	= 20 :	goto __EnemyBlock
   3971  29ac
   3972  29ac		       a5 d9		      LDA	EnemyHit
   3973  29ae		       c9 01		      CMP	#1
   3974  29b0		       f0 2f		      BEQ	.skipL0354
   3975  29b2				   .condpart141
   3976  29b2							; complex condition detected
   3977  29b2							; complex statement detected
   3978  29b2		       a5 99		      LDA	player0y
   3979  29b4		       18		      CLC
   3980  29b5		       69 0a		      ADC	#10
   3981  29b7							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3982  29b7		       c5 9a		      CMP	player1y
   3983  29b9		       90 26		      BCC	.skip141then
   3984  29bb				   .condpart142
   3985  29bb							; complex condition detected
   3986  29bb							; complex statement detected
   3987  29bb		       a5 9a		      LDA	player1y
   3988  29bd		       18		      CLC
   3989  29be		       69 0a		      ADC	#10
   3990  29c0							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3991  29c0		       c5 99		      CMP	player0y
   3992  29c2		       90 1d		      BCC	.skip142then
   3993  29c4				   .condpart143
   3994  29c4							; complex condition detected
   3995  29c4							; complex statement detected
   3996  29c4		       a5 80		      LDA	player0x
   3997  29c6		       18		      CLC
   3998  29c7		       65 cf		      ADC	temp5
   3999  29c9							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4000  29c9		       c5 90		      CMP	player1x
   4001  29cb		       90 14		      BCC	.skip143then
   4002  29cd				   .condpart144
   4003  29cd							; complex condition detected
   4004  29cd							; complex statement detected
   4005  29cd		       a5 90		      LDA	player1x
   4006  29cf		       18		      CLC
   4007  29d0		       69 07		      ADC	#7
   4008  29d2		       c5 80		      CMP	player0x
   4009  29d4		       90 0b		      BCC	.skip144then
   4010  29d6				   .condpart145
   4011  29d6		       a9 01		      LDA	#1
   4012  29d8		       85 d9		      STA	EnemyHit
   4013  29da		       a9 14		      LDA	#20
   4014  29dc		       85 ed		      STA	Damage
   4015  29de		       4c 15 3e 	      jmp	.__EnemyBlock
   4016  29e1
   4017  29e1				   .skip144then
   4018  29e1				   .skip143then
   4019  29e1				   .skip142then
   4020  29e1				   .skip141then
   4021  29e1				   .skipL0354
   4022  29e1				   .L0355		;  if EnemyHit  <>  2 then if	( player0y  +  10 )   >=  player2y  &&	player0y  <=   ( player2y  +  10 )   &&   ( player0x  +  temp5 )   >=  player2x  &&  player0x  <=   ( player2x	+  7 )	then EnemyHit  =  2 :  Damage  = 10  :	goto __EnemyBlock
   4023  29e1
   4024  29e1		       a5 d9		      LDA	EnemyHit
   4025  29e3		       c9 02		      CMP	#2
   4026  29e5		       f0 2f		      BEQ	.skipL0355
   4027  29e7				   .condpart146
   4028  29e7							; complex condition detected
   4029  29e7							; complex statement detected
   4030  29e7		       a5 99		      LDA	player0y
   4031  29e9		       18		      CLC
   4032  29ea		       69 0a		      ADC	#10
   4033  29ec							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4034  29ec		       c5 9b		      CMP	player2y
   4035  29ee		       90 26		      BCC	.skip146then
   4036  29f0				   .condpart147
   4037  29f0							; complex condition detected
   4038  29f0							; complex statement detected
   4039  29f0		       a5 9b		      LDA	player2y
   4040  29f2		       18		      CLC
   4041  29f3		       69 0a		      ADC	#10
   4042  29f5							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4043  29f5		       c5 99		      CMP	player0y
   4044  29f7		       90 1d		      BCC	.skip147then
   4045  29f9				   .condpart148
   4046  29f9							; complex condition detected
   4047  29f9							; complex statement detected
   4048  29f9		       a5 80		      LDA	player0x
   4049  29fb		       18		      CLC
   4050  29fc		       65 cf		      ADC	temp5
   4051  29fe							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4052  29fe		       c5 91		      CMP	player2x
   4053  2a00		       90 14		      BCC	.skip148then
   4054  2a02				   .condpart149
   4055  2a02							; complex condition detected
   4056  2a02							; complex statement detected
   4057  2a02		       a5 91		      LDA	player2x
   4058  2a04		       18		      CLC
   4059  2a05		       69 07		      ADC	#7
   4060  2a07		       c5 80		      CMP	player0x
   4061  2a09		       90 0b		      BCC	.skip149then
   4062  2a0b				   .condpart150
   4063  2a0b		       a9 02		      LDA	#2
   4064  2a0d		       85 d9		      STA	EnemyHit
   4065  2a0f		       a9 0a		      LDA	#10
   4066  2a11		       85 ed		      STA	Damage
   4067  2a13		       4c 15 3e 	      jmp	.__EnemyBlock
   4068  2a16
   4069  2a16				   .skip149then
   4070  2a16				   .skip148then
   4071  2a16				   .skip147then
   4072  2a16				   .skip146then
   4073  2a16				   .skipL0355
   4074  2a16				   .L0356		;  if EnemyHit  <>  3 then if	( player0y  +  10 )   >=  player3y  &&	player0y  <=   ( player3y  +  10 )   &&   ( player0x  +  temp5 )   >=  player3x  &&  player0x  <=   ( player3x	+  7 )	then EnemyHit  =  3  :	Damage	= 10  :  goto __EnemyBlock
   4075  2a16
   4076  2a16		       a5 d9		      LDA	EnemyHit
   4077  2a18		       c9 03		      CMP	#3
   4078  2a1a		       f0 2f		      BEQ	.skipL0356
   4079  2a1c				   .condpart151
   4080  2a1c							; complex condition detected
   4081  2a1c							; complex statement detected
   4082  2a1c		       a5 99		      LDA	player0y
   4083  2a1e		       18		      CLC
   4084  2a1f		       69 0a		      ADC	#10
   4085  2a21							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4086  2a21		       c5 9c		      CMP	player3y
   4087  2a23		       90 26		      BCC	.skip151then
   4088  2a25				   .condpart152
   4089  2a25							; complex condition detected
   4090  2a25							; complex statement detected
   4091  2a25		       a5 9c		      LDA	player3y
   4092  2a27		       18		      CLC
   4093  2a28		       69 0a		      ADC	#10
   4094  2a2a							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4095  2a2a		       c5 99		      CMP	player0y
   4096  2a2c		       90 1d		      BCC	.skip152then
   4097  2a2e				   .condpart153
   4098  2a2e							; complex condition detected
   4099  2a2e							; complex statement detected
   4100  2a2e		       a5 80		      LDA	player0x
   4101  2a30		       18		      CLC
   4102  2a31		       65 cf		      ADC	temp5
   4103  2a33							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4104  2a33		       c5 92		      CMP	player3x
   4105  2a35		       90 14		      BCC	.skip153then
   4106  2a37				   .condpart154
   4107  2a37							; complex condition detected
   4108  2a37							; complex statement detected
   4109  2a37		       a5 92		      LDA	player3x
   4110  2a39		       18		      CLC
   4111  2a3a		       69 07		      ADC	#7
   4112  2a3c		       c5 80		      CMP	player0x
   4113  2a3e		       90 0b		      BCC	.skip154then
   4114  2a40				   .condpart155
   4115  2a40		       a9 03		      LDA	#3
   4116  2a42		       85 d9		      STA	EnemyHit
   4117  2a44		       a9 0a		      LDA	#10
   4118  2a46		       85 ed		      STA	Damage
   4119  2a48		       4c 15 3e 	      jmp	.__EnemyBlock
   4120  2a4b
   4121  2a4b				   .skip154then
   4122  2a4b				   .skip153then
   4123  2a4b				   .skip152then
   4124  2a4b				   .skip151then
   4125  2a4b				   .skipL0356
   4126  2a4b				   .L0357		;  if	( player0y  +  10 )   >=  player4y  &&	player0y  <=   ( player4y  +  10 )   &&   ( player0x  +  temp5 )   >=  player4x  &&  player0x  <=   ( player4x	+  7 )	then gosub __Health bank3
   4127  2a4b
   4128  2a4b							; complex condition detected
   4129  2a4b							; complex statement detected
   4130  2a4b		       a5 99		      LDA	player0y
   4131  2a4d		       18		      CLC
   4132  2a4e		       69 0a		      ADC	#10
   4133  2a50							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4134  2a50		       c5 9d		      CMP	player4y
   4135  2a52		       90 33		      BCC	.skipL0357
   4136  2a54				   .condpart156
   4137  2a54							; complex condition detected
   4138  2a54							; complex statement detected
   4139  2a54		       a5 9d		      LDA	player4y
   4140  2a56		       18		      CLC
   4141  2a57		       69 0a		      ADC	#10
   4142  2a59							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4143  2a59		       c5 99		      CMP	player0y
   4144  2a5b		       90 2a		      BCC	.skip156then
   4145  2a5d				   .condpart157
   4146  2a5d							; complex condition detected
   4147  2a5d							; complex statement detected
   4148  2a5d		       a5 80		      LDA	player0x
   4149  2a5f		       18		      CLC
   4150  2a60		       65 cf		      ADC	temp5
   4151  2a62							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4152  2a62		       c5 93		      CMP	player4x
   4153  2a64		       90 21		      BCC	.skip157then
   4154  2a66				   .condpart158
   4155  2a66							; complex condition detected
   4156  2a66							; complex statement detected
   4157  2a66		       a5 93		      LDA	player4x
   4158  2a68		       18		      CLC
   4159  2a69		       69 07		      ADC	#7
   4160  2a6b		       c5 80		      CMP	player0x
   4161  2a6d		       90 18		      BCC	.skip158then
   4162  2a6f				   .condpart159
   4163  2a6f		       85 81		      sta	temp7
   4164  2a71		       a9 3a		      lda	#>(ret_point7-1)
   4165  2a73		       48		      pha
   4166  2a74		       a9 86		      lda	#<(ret_point7-1)
   4167  2a76		       48		      pha
   4168  2a77		       a9 54		      lda	#>(.__Health-1)
   4169  2a79		       48		      pha
   4170  2a7a		       a9 9e		      lda	#<(.__Health-1)
   4171  2a7c		       48		      pha
   4172  2a7d		       a5 81		      lda	temp7
   4173  2a7f		       48		      pha
   4174  2a80		       8a		      txa
   4175  2a81		       48		      pha
   4176  2a82		       a2 03		      ldx	#3
   4177  2a84		       4c ee df 	      jmp	BS_jsr
   4178  2a87				   ret_point7
   4179  2a87				   .skip158then
   4180  2a87				   .skip157then
   4181  2a87				   .skip156then
   4182  2a87				   .skipL0357
   4183  2a87				   .L0358		;  if	( player0y  +  10 )   >=  player5y  &&	player0y  <=   ( player5y  +  10 )   &&   ( player0x  +  temp5 )   >=  player5x  &&  player0x  <=   ( player5x	+  7 )	then goto __JoystickControls
   4184  2a87
   4185  2a87							; complex condition detected
   4186  2a87							; complex statement detected
   4187  2a87		       a5 99		      LDA	player0y
   4188  2a89		       18		      CLC
   4189  2a8a		       69 0a		      ADC	#10
   4190  2a8c							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4191  2a8c		       c5 9e		      CMP	player5y
   4192  2a8e		       90 1e		      BCC	.skipL0358
   4193  2a90				   .condpart160
   4194  2a90							; complex condition detected
   4195  2a90							; complex statement detected
   4196  2a90		       a5 9e		      LDA	player5y
   4197  2a92		       18		      CLC
   4198  2a93		       69 0a		      ADC	#10
   4199  2a95							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4200  2a95		       c5 99		      CMP	player0y
   4201  2a97		       90 15		      BCC	.skip160then
   4202  2a99				   .condpart161
   4203  2a99							; complex condition detected
   4204  2a99							; complex statement detected
   4205  2a99		       a5 80		      LDA	player0x
   4206  2a9b		       18		      CLC
   4207  2a9c		       65 cf		      ADC	temp5
   4208  2a9e							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4209  2a9e		       c5 94		      CMP	player5x
   4210  2aa0		       90 0c		      BCC	.skip161then
   4211  2aa2				   .condpart162
   4212  2aa2							; complex condition detected
   4213  2aa2							; complex statement detected
   4214  2aa2		       a5 94		      LDA	player5x
   4215  2aa4		       18		      CLC
   4216  2aa5		       69 07		      ADC	#7
   4217  2aa7		       c5 80		      CMP	player0x
   4218  2aa9		       90 03		      BCC	.skip162then
   4219  2aab				   .condpart163
   4220  2aab		       4c bf 3b 	      jmp	.__JoystickControls
   4221  2aae
   4222  2aae				   .skip162then
   4223  2aae				   .skip161then
   4224  2aae				   .skip160then
   4225  2aae				   .skipL0358
   4226  2aae				   .L0359		;  if EnemyHit  <  1 then goto __EnemyScore
   4227  2aae
   4228  2aae		       a5 d9		      LDA	EnemyHit
   4229  2ab0		       c9 01		      CMP	#1
   4230  2ab2		       b0 03		      BCS	.skipL0359
   4231  2ab4				   .condpart164
   4232  2ab4		       4c 59 3e 	      jmp	.__EnemyScore
   4233  2ab7
   4234  2ab7				   .skipL0359
   4235  2ab7				   .
   4236  2ab7							; 
   4237  2ab7
   4238  2ab7				   .__Skip_p0_Collision
   4239  2ab7							; __Skip_p0_Collision
   4240  2ab7
   4241  2ab7				   .L0360		;  if !collision(missile0,player1) then goto __Skip_PF_Collision
   4242  2ab7
   4243  2ab7		       24 00		      bit	CXM0P
   4244  2ab9		       30 03		      BMI	.skipL0360
   4245  2abb				   .condpart165
   4246  2abb		       4c a1 3b 	      jmp	.__Skip_PF_Collision
   4247  2abe
   4248  2abe				   .skipL0360
   4249  2abe				   .L0361		;  temp5  =  missile0height[8]
   4250  2abe
   4251  2abe		       a2 08		      LDX	#8
   4252  2ac0		       b5 c2		      LDA	missile0height,x
   4253  2ac2		       85 cf		      STA	temp5
   4254  2ac4				   .L0362		;  if EnemyHit  <  1 then if  ( missile0y  +  missile0height )   >=  player1y	&&  missile0y  <=   ( player1y	+  10 )   &&   ( missile0x  +  temp5 )	 >=  player1x  &&  missile0x  <=   ( player1x  +  15 )	then EnemyHit  =  1 :  Points = $10  :	goto __Score
   4255  2ac4
   4256  2ac4		       a5 d9		      LDA	EnemyHit
   4257  2ac6		       c9 01		      CMP	#1
   4258  2ac8		       b0 2f		      BCS	.skipL0362
   4259  2aca				   .condpart166
   4260  2aca							; complex condition detected
   4261  2aca							; complex statement detected
   4262  2aca		       a5 bf		      LDA	missile0y
   4263  2acc		       18		      CLC
   4264  2acd		       65 c2		      ADC	missile0height
   4265  2acf							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4266  2acf		       c5 9a		      CMP	player1y
   4267  2ad1		       90 26		      BCC	.skip166then
   4268  2ad3				   .condpart167
   4269  2ad3							; complex condition detected
   4270  2ad3							; complex statement detected
   4271  2ad3		       a5 9a		      LDA	player1y
   4272  2ad5		       18		      CLC
   4273  2ad6		       69 0a		      ADC	#10
   4274  2ad8							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4275  2ad8		       c5 bf		      CMP	missile0y
   4276  2ada		       90 1d		      BCC	.skip167then
   4277  2adc				   .condpart168
   4278  2adc							; complex condition detected
   4279  2adc							; complex statement detected
   4280  2adc		       a5 82		      LDA	missile0x
   4281  2ade		       18		      CLC
   4282  2adf		       65 cf		      ADC	temp5
   4283  2ae1							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4284  2ae1		       c5 90		      CMP	player1x
   4285  2ae3		       90 14		      BCC	.skip168then
   4286  2ae5				   .condpart169
   4287  2ae5							; complex condition detected
   4288  2ae5							; complex statement detected
   4289  2ae5		       a5 90		      LDA	player1x
   4290  2ae7		       18		      CLC
   4291  2ae8		       69 0f		      ADC	#15
   4292  2aea		       c5 82		      CMP	missile0x
   4293  2aec		       90 0b		      BCC	.skip169then
   4294  2aee				   .condpart170
   4295  2aee		       a9 01		      LDA	#1
   4296  2af0		       85 d9		      STA	EnemyHit
   4297  2af2		       a9 10		      LDA	#$10
   4298  2af4		       85 d4		      STA	Points
   4299  2af6		       4c 04 3d 	      jmp	.__Score
   4300  2af9
   4301  2af9				   .skip169then
   4302  2af9				   .skip168then
   4303  2af9				   .skip167then
   4304  2af9				   .skip166then
   4305  2af9				   .skipL0362
   4306  2af9				   .L0363		;  if EnemyHit  <  2 then if  ( missile0y  +  missile0height )   >=  player2y	&&  missile0y  <=   ( player2y	+  10 )   &&   ( missile0x  +  temp5 )	 >=  player2x  &&  missile0x  <=   ( player2x  +  15 )	then EnemyHit  =  2  :	Points = $05  :  goto __Score
   4307  2af9
   4308  2af9		       a5 d9		      LDA	EnemyHit
   4309  2afb		       c9 02		      CMP	#2
   4310  2afd		       b0 2f		      BCS	.skipL0363
   4311  2aff				   .condpart171
   4312  2aff							; complex condition detected
   4313  2aff							; complex statement detected
   4314  2aff		       a5 bf		      LDA	missile0y
   4315  2b01		       18		      CLC
   4316  2b02		       65 c2		      ADC	missile0height
   4317  2b04							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4318  2b04		       c5 9b		      CMP	player2y
   4319  2b06		       90 26		      BCC	.skip171then
   4320  2b08				   .condpart172
   4321  2b08							; complex condition detected
   4322  2b08							; complex statement detected
   4323  2b08		       a5 9b		      LDA	player2y
   4324  2b0a		       18		      CLC
   4325  2b0b		       69 0a		      ADC	#10
   4326  2b0d							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4327  2b0d		       c5 bf		      CMP	missile0y
   4328  2b0f		       90 1d		      BCC	.skip172then
   4329  2b11				   .condpart173
   4330  2b11							; complex condition detected
   4331  2b11							; complex statement detected
   4332  2b11		       a5 82		      LDA	missile0x
   4333  2b13		       18		      CLC
   4334  2b14		       65 cf		      ADC	temp5
   4335  2b16							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4336  2b16		       c5 91		      CMP	player2x
   4337  2b18		       90 14		      BCC	.skip173then
   4338  2b1a				   .condpart174
   4339  2b1a							; complex condition detected
   4340  2b1a							; complex statement detected
   4341  2b1a		       a5 91		      LDA	player2x
   4342  2b1c		       18		      CLC
   4343  2b1d		       69 0f		      ADC	#15
   4344  2b1f		       c5 82		      CMP	missile0x
   4345  2b21		       90 0b		      BCC	.skip174then
   4346  2b23				   .condpart175
   4347  2b23		       a9 02		      LDA	#2
   4348  2b25		       85 d9		      STA	EnemyHit
   4349  2b27		       a9 05		      LDA	#$05
   4350  2b29		       85 d4		      STA	Points
   4351  2b2b		       4c 04 3d 	      jmp	.__Score
   4352  2b2e
   4353  2b2e				   .skip174then
   4354  2b2e				   .skip173then
   4355  2b2e				   .skip172then
   4356  2b2e				   .skip171then
   4357  2b2e				   .skipL0363
   4358  2b2e				   .L0364		;  if EnemyHit  <  3 then if  ( missile0y  +  missile0height )   >=  player3y	&&  missile0y  <=   ( player3y	+  10 )   &&   ( missile0x  +  temp5 )	 >=  player3x  &&  missile0x  <=   ( player3x  +  15 )	then EnemyHit  =  3  :	Bit6_PLayer3Direction{6}  = 0  :  goto __Score
   4359  2b2e
   4360  2b2e		       a5 d9		      LDA	EnemyHit
   4361  2b30		       c9 03		      CMP	#3
   4362  2b32		       b0 31		      BCS	.skipL0364
   4363  2b34				   .condpart176
   4364  2b34							; complex condition detected
   4365  2b34							; complex statement detected
   4366  2b34		       a5 bf		      LDA	missile0y
   4367  2b36		       18		      CLC
   4368  2b37		       65 c2		      ADC	missile0height
   4369  2b39							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4370  2b39		       c5 9c		      CMP	player3y
   4371  2b3b		       90 28		      BCC	.skip176then
   4372  2b3d				   .condpart177
   4373  2b3d							; complex condition detected
   4374  2b3d							; complex statement detected
   4375  2b3d		       a5 9c		      LDA	player3y
   4376  2b3f		       18		      CLC
   4377  2b40		       69 0a		      ADC	#10
   4378  2b42							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4379  2b42		       c5 bf		      CMP	missile0y
   4380  2b44		       90 1f		      BCC	.skip177then
   4381  2b46				   .condpart178
   4382  2b46							; complex condition detected
   4383  2b46							; complex statement detected
   4384  2b46		       a5 82		      LDA	missile0x
   4385  2b48		       18		      CLC
   4386  2b49		       65 cf		      ADC	temp5
   4387  2b4b							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4388  2b4b		       c5 92		      CMP	player3x
   4389  2b4d		       90 16		      BCC	.skip178then
   4390  2b4f				   .condpart179
   4391  2b4f							; complex condition detected
   4392  2b4f							; complex statement detected
   4393  2b4f		       a5 92		      LDA	player3x
   4394  2b51		       18		      CLC
   4395  2b52		       69 0f		      ADC	#15
   4396  2b54		       c5 82		      CMP	missile0x
   4397  2b56		       90 0d		      BCC	.skip179then
   4398  2b58				   .condpart180
   4399  2b58		       a9 03		      LDA	#3
   4400  2b5a		       85 d9		      STA	EnemyHit
   4401  2b5c		       a5 ea		      LDA	Bit6_PLayer3Direction
   4402  2b5e		       29 bf		      AND	#191
   4403  2b60		       85 ea		      STA	Bit6_PLayer3Direction
   4404  2b62		       4c 04 3d 	      jmp	.__Score
   4405  2b65
   4406  2b65				   .skip179then
   4407  2b65				   .skip178then
   4408  2b65				   .skip177then
   4409  2b65				   .skip176then
   4410  2b65				   .skipL0364
   4411  2b65				   .L0365		;  if	( missile0y  +	missile0height )   >=  player4y  &&  missile0y	<=   ( player4y  +  10 )   &&	( missile0x  +	temp5 )   >=  player4x	&&  missile0x  <=   ( player4x	+  15 )  then gosub __Health bank3
   4412  2b65
   4413  2b65							; complex condition detected
   4414  2b65							; complex statement detected
   4415  2b65		       a5 bf		      LDA	missile0y
   4416  2b67		       18		      CLC
   4417  2b68		       65 c2		      ADC	missile0height
   4418  2b6a							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4419  2b6a		       c5 9d		      CMP	player4y
   4420  2b6c		       90 33		      BCC	.skipL0365
   4421  2b6e				   .condpart181
   4422  2b6e							; complex condition detected
   4423  2b6e							; complex statement detected
   4424  2b6e		       a5 9d		      LDA	player4y
   4425  2b70		       18		      CLC
   4426  2b71		       69 0a		      ADC	#10
   4427  2b73							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4428  2b73		       c5 bf		      CMP	missile0y
   4429  2b75		       90 2a		      BCC	.skip181then
   4430  2b77				   .condpart182
   4431  2b77							; complex condition detected
   4432  2b77							; complex statement detected
   4433  2b77		       a5 82		      LDA	missile0x
   4434  2b79		       18		      CLC
   4435  2b7a		       65 cf		      ADC	temp5
   4436  2b7c							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4437  2b7c		       c5 93		      CMP	player4x
   4438  2b7e		       90 21		      BCC	.skip182then
   4439  2b80				   .condpart183
   4440  2b80							; complex condition detected
   4441  2b80							; complex statement detected
   4442  2b80		       a5 93		      LDA	player4x
   4443  2b82		       18		      CLC
   4444  2b83		       69 0f		      ADC	#15
   4445  2b85		       c5 82		      CMP	missile0x
   4446  2b87		       90 18		      BCC	.skip183then
   4447  2b89				   .condpart184
   4448  2b89		       85 81		      sta	temp7
   4449  2b8b		       a9 3b		      lda	#>(ret_point8-1)
   4450  2b8d		       48		      pha
   4451  2b8e		       a9 a0		      lda	#<(ret_point8-1)
   4452  2b90		       48		      pha
   4453  2b91		       a9 54		      lda	#>(.__Health-1)
   4454  2b93		       48		      pha
   4455  2b94		       a9 9e		      lda	#<(.__Health-1)
   4456  2b96		       48		      pha
   4457  2b97		       a5 81		      lda	temp7
   4458  2b99		       48		      pha
   4459  2b9a		       8a		      txa
   4460  2b9b		       48		      pha
   4461  2b9c		       a2 03		      ldx	#3
   4462  2b9e		       4c ee df 	      jmp	BS_jsr
   4463  2ba1				   ret_point8
   4464  2ba1				   .skip183then
   4465  2ba1				   .skip182then
   4466  2ba1				   .skip181then
   4467  2ba1				   .skipL0365
   4468  2ba1				   .
   4469  2ba1							; 
   4470  2ba1
   4471  2ba1				   .__Skip_PF_Collision
   4472  2ba1							; __Skip_PF_Collision
   4473  2ba1
   4474  2ba1				   .
   4475  2ba1							; 
   4476  2ba1
   4477  2ba1				   .__SkipMove
   4478  2ba1							; __SkipMove
   4479  2ba1
   4480  2ba1				   .
   4481  2ba1							; 
   4482  2ba1
   4483  2ba1				   .L0366		;  DF6FRACINC	=  255
   4484  2ba1
   4485  2ba1		       a9 ff		      LDA	#255
   4486  2ba3		       8d 3e 10 	      STA	DF6FRACINC
   4487  2ba6				   .L0367		;  DF4FRACINC	=  255
   4488  2ba6
   4489  2ba6		       a9 ff		      LDA	#255
   4490  2ba8		       8d 3c 10 	      STA	DF4FRACINC
   4491  2bab				   .L0368		;  DF0FRACINC	=  128
   4492  2bab
   4493  2bab		       a9 80		      LDA	#128
   4494  2bad		       8d 38 10 	      STA	DF0FRACINC
   4495  2bb0				   .L0369		;  DF1FRACINC	=  128
   4496  2bb0
   4497  2bb0		       a9 80		      LDA	#128
   4498  2bb2		       8d 39 10 	      STA	DF1FRACINC
   4499  2bb5				   .L0370		;  DF2FRACINC	=  128
   4500  2bb5
   4501  2bb5		       a9 80		      LDA	#128
   4502  2bb7		       8d 3a 10 	      STA	DF2FRACINC
   4503  2bba				   .L0371		;  DF3FRACINC	=  128
   4504  2bba
   4505  2bba		       a9 80		      LDA	#128
   4506  2bbc		       8d 3b 10 	      STA	DF3FRACINC
   4507  2bbf				   .
   4508  2bbf							; 
   4509  2bbf
   4510  2bbf				   .__JoystickControls
   4511  2bbf							; __JoystickControls
   4512  2bbf
   4513  2bbf				   .L0372		;  if joy0left  &&  player0x  >  _P_Edge_Left then player0x  =  player0x  -  1
   4514  2bbf
   4515  2bbf		       2c 80 02 	      bit	SWCHA
   4516  2bc2		       70 08		      BVS	.skipL0372
   4517  2bc4				   .condpart185
   4518  2bc4		       a9 00		      LDA	#_P_Edge_Left
   4519  2bc6		       c5 80		      CMP	player0x
   4520  2bc8		       b0 02		      BCS	.skip185then
   4521  2bca				   .condpart186
   4522  2bca		       c6 80		      DEC	player0x
   4523  2bcc				   .skip185then
   4524  2bcc				   .skipL0372
   4525  2bcc				   .L0373		;  if joy0right  &&  player0x	<  _P_Edge_Right then player0x	=  player0x  +	1
   4526  2bcc
   4527  2bcc		       2c 80 02 	      bit	SWCHA
   4528  2bcf		       30 08		      BMI	.skipL0373
   4529  2bd1				   .condpart187
   4530  2bd1		       a5 80		      LDA	player0x
   4531  2bd3		       c9 96		      CMP	#_P_Edge_Right
   4532  2bd5		       b0 02		      BCS	.skip187then
   4533  2bd7				   .condpart188
   4534  2bd7		       e6 80		      INC	player0x
   4535  2bd9				   .skip187then
   4536  2bd9				   .skipL0373
   4537  2bd9				   .
   4538  2bd9							; 
   4539  2bd9
   4540  2bd9				   .__FireSound
   4541  2bd9							; __FireSound
   4542  2bd9
   4543  2bd9				   .
   4544  2bd9							; 
   4545  2bd9
   4546  2bd9				   .L0374		;  if joy0fire  &&  !Bit4_gameover{4} then if !Ch0_Sound  &&  !Bit1_missleOn{1} then Ch0_Sound  =  1  :  Ch0_Duration	=  15
   4547  2bd9
   4548  2bd9		       24 0c		      bit	INPT4
   4549  2bdb		       30 18		      BMI	.skipL0374
   4550  2bdd				   .condpart189
   4551  2bdd		       a5 ea		      LDA	Bit4_gameover
   4552  2bdf		       29 10		      AND	#16
   4553  2be1		       d0 12		      BNE	.skip189then
   4554  2be3				   .condpart190
   4555  2be3		       a5 e7		      LDA	Ch0_Sound
   4556  2be5		       d0 0e		      BNE	.skip190then
   4557  2be7				   .condpart191
   4558  2be7		       a5 ea		      LDA	Bit1_missleOn
   4559  2be9		       29 02		      AND	#2
   4560  2beb		       d0 08		      BNE	.skip191then
   4561  2bed				   .condpart192
   4562  2bed		       a9 01		      LDA	#1
   4563  2bef		       85 e7		      STA	Ch0_Sound
   4564  2bf1		       a9 0f		      LDA	#15
   4565  2bf3		       85 e8		      STA	Ch0_Duration
   4566  2bf5				   .skip191then
   4567  2bf5				   .skip190then
   4568  2bf5				   .skip189then
   4569  2bf5				   .skipL0374
   4570  2bf5				   .L0375		;  if !Ch0_Sound then goto __Skip_Ch_0
   4571  2bf5
   4572  2bf5		       a5 e7		      LDA	Ch0_Sound
   4573  2bf7		       d0 03		      BNE	.skipL0375
   4574  2bf9				   .condpart193
   4575  2bf9		       4c 4a 3c 	      jmp	.__Skip_Ch_0
   4576  2bfc
   4577  2bfc				   .skipL0375
   4578  2bfc				   .L0376		;  Ch0_Duration  =  Ch0_Duration  -  1
   4579  2bfc
   4580  2bfc		       c6 e8		      DEC	Ch0_Duration
   4581  2bfe				   .L0377		;  if !Ch0_Duration then goto __Clear_Ch_0
   4582  2bfe
   4583  2bfe		       a5 e8		      LDA	Ch0_Duration
   4584  2c00		       d0 03		      BNE	.skipL0377
   4585  2c02				   .condpart194
   4586  2c02		       4c 44 3c 	      jmp	.__Clear_Ch_0
   4587  2c05
   4588  2c05				   .skipL0377
   4589  2c05				   .L0378		;  if Ch0_Sound  <>  1 then goto __Skip_Ch0_Sound_001
   4590  2c05
   4591  2c05		       a5 e7		      LDA	Ch0_Sound
   4592  2c07		       c9 01		      CMP	#1
   4593  2c09		       f0 03		      BEQ	.skipL0378
   4594  2c0b				   .condpart195
   4595  2c0b		       4c 41 3c 	      jmp	.__Skip_Ch0_Sound_001
   4596  2c0e
   4597  2c0e				   .skipL0378
   4598  2c0e				   .L0379		;  AUDC0  =  8  :  AUDV0  =  2  :  AUDF0  =  4
   4599  2c0e
   4600  2c0e		       a9 08		      LDA	#8
   4601  2c10		       85 15		      STA	AUDC0
   4602  2c12		       a9 02		      LDA	#2
   4603  2c14		       85 19		      STA	AUDV0
   4604  2c16		       a9 04		      LDA	#4
   4605  2c18		       85 17		      STA	AUDF0
   4606  2c1a				   .L0380		;  if Ch0_Duration  <	10 then AUDC0  =  6  :	AUDV0  =  2  :	AUDF0  =  12
   4607  2c1a
   4608  2c1a		       a5 e8		      LDA	Ch0_Duration
   4609  2c1c		       c9 0a		      CMP	#10
   4610  2c1e		       b0 0c		      BCS	.skipL0380
   4611  2c20				   .condpart196
   4612  2c20		       a9 06		      LDA	#6
   4613  2c22		       85 15		      STA	AUDC0
   4614  2c24		       a9 02		      LDA	#2
   4615  2c26		       85 19		      STA	AUDV0
   4616  2c28		       a9 0c		      LDA	#12
   4617  2c2a		       85 17		      STA	AUDF0
   4618  2c2c				   .skipL0380
   4619  2c2c				   .L0381		;  if Ch0_Duration  <	5 then AUDC0  =  6  :  AUDV0  =  1  :  AUDF0  =  14
   4620  2c2c
   4621  2c2c		       a5 e8		      LDA	Ch0_Duration
   4622  2c2e		       c9 05		      CMP	#5
   4623  2c30		       b0 0c		      BCS	.skipL0381
   4624  2c32				   .condpart197
   4625  2c32		       a9 06		      LDA	#6
   4626  2c34		       85 15		      STA	AUDC0
   4627  2c36		       a9 01		      LDA	#1
   4628  2c38		       85 19		      STA	AUDV0
   4629  2c3a		       a9 0e		      LDA	#14
   4630  2c3c		       85 17		      STA	AUDF0
   4631  2c3e				   .skipL0381
   4632  2c3e				   .L0382		;  goto __Skip_Ch_0
   4633  2c3e
   4634  2c3e		       4c 4a 3c 	      jmp	.__Skip_Ch_0
   4635  2c41
   4636  2c41				   .__Skip_Ch0_Sound_001
   4637  2c41							; __Skip_Ch0_Sound_001
   4638  2c41
   4639  2c41				   .L0383		;  goto __Skip_Ch_0
   4640  2c41
   4641  2c41		       4c 4a 3c 	      jmp	.__Skip_Ch_0
   4642  2c44
   4643  2c44				   .__Clear_Ch_0
   4644  2c44							; __Clear_Ch_0
   4645  2c44
   4646  2c44				   .L0384		;  Ch0_Sound  =  0  :	AUDV0  =  0
   4647  2c44
   4648  2c44		       a9 00		      LDA	#0
   4649  2c46		       85 e7		      STA	Ch0_Sound
   4650  2c48		       85 19		      STA	AUDV0
   4651  2c4a				   .__Skip_Ch_0
   4652  2c4a							; __Skip_Ch_0
   4653  2c4a
   4654  2c4a				   .L0385		;  if !Bit4_gameover{4} then if joy0fire  &&  !Bit1_missleOn{1} then if EnemyHit  <  1 then Bit1_missleOn{1}  =  1  :	missile0x  =  player0x	+  5 :	missile0y  =  player0y
   4655  2c4a
   4656  2c4a		       a5 ea		      LDA	Bit4_gameover
   4657  2c4c		       29 10		      AND	#16
   4658  2c4e		       d0 21		      BNE	.skipL0385
   4659  2c50				   .condpart198
   4660  2c50		       24 0c		      bit	INPT4
   4661  2c52		       30 1d		      BMI	.skip198then
   4662  2c54				   .condpart199
   4663  2c54		       a5 ea		      LDA	Bit1_missleOn
   4664  2c56		       29 02		      AND	#2
   4665  2c58		       d0 17		      BNE	.skip199then
   4666  2c5a				   .condpart200
   4667  2c5a		       a5 d9		      LDA	EnemyHit
   4668  2c5c		       c9 01		      CMP	#1
   4669  2c5e		       b0 11		      BCS	.skip200then
   4670  2c60				   .condpart201
   4671  2c60		       a5 ea		      LDA	Bit1_missleOn
   4672  2c62		       09 02		      ORA	#2
   4673  2c64		       85 ea		      STA	Bit1_missleOn
   4674  2c66		       a5 80		      LDA	player0x
   4675  2c68		       18		      CLC
   4676  2c69		       69 05		      ADC	#5
   4677  2c6b		       85 82		      STA	missile0x
   4678  2c6d		       a5 99		      LDA	player0y
   4679  2c6f		       85 bf		      STA	missile0y
   4680  2c71				   .skip200then
   4681  2c71				   .skip199then
   4682  2c71				   .skip198then
   4683  2c71				   .skipL0385
   4684  2c71				   .
   4685  2c71							; 
   4686  2c71
   4687  2c71				   .__Explosion
   4688  2c71							; __Explosion
   4689  2c71
   4690  2c71				   .L0386		;  if Bit5_hit{5}  &&	!Ch1_Sound then Ch1_Sound  =  1  :  Ch1_Duration  =  30
   4691  2c71
   4692  2c71		       a5 ea		      LDA	Bit5_hit
   4693  2c73		       29 20		      AND	#32
   4694  2c75		       f0 0c		      BEQ	.skipL0386
   4695  2c77				   .condpart202
   4696  2c77		       a5 da		      LDA	Ch1_Sound
   4697  2c79		       d0 08		      BNE	.skip202then
   4698  2c7b				   .condpart203
   4699  2c7b		       a9 01		      LDA	#1
   4700  2c7d		       85 da		      STA	Ch1_Sound
   4701  2c7f		       a9 1e		      LDA	#30
   4702  2c81		       85 db		      STA	Ch1_Duration
   4703  2c83				   .skip202then
   4704  2c83				   .skipL0386
   4705  2c83				   .L0387		;  if !Ch1_Sound then goto __Skip_Fire
   4706  2c83
   4707  2c83		       a5 da		      LDA	Ch1_Sound
   4708  2c85		       d0 03		      BNE	.skipL0387
   4709  2c87				   .condpart204
   4710  2c87		       4c e2 3c 	      jmp	.__Skip_Fire
   4711  2c8a
   4712  2c8a				   .skipL0387
   4713  2c8a				   .L0388		;  Ch1_Duration  =  Ch1_Duration  -  1
   4714  2c8a
   4715  2c8a		       c6 db		      DEC	Ch1_Duration
   4716  2c8c				   .L0389		;  if !Ch1_Duration then goto __Exp_Clear_Ch_1
   4717  2c8c
   4718  2c8c		       a5 db		      LDA	Ch1_Duration
   4719  2c8e		       d0 03		      BNE	.skipL0389
   4720  2c90				   .condpart205
   4721  2c90		       4c d2 3c 	      jmp	.__Exp_Clear_Ch_1
   4722  2c93
   4723  2c93				   .skipL0389
   4724  2c93				   .L0390		;  if Ch1_Sound  <>  1 then goto __Exp_Skip_Ch0_Sound_001
   4725  2c93
   4726  2c93		       a5 da		      LDA	Ch1_Sound
   4727  2c95		       c9 01		      CMP	#1
   4728  2c97		       f0 03		      BEQ	.skipL0390
   4729  2c99				   .condpart206
   4730  2c99		       4c cf 3c 	      jmp	.__Exp_Skip_Ch0_Sound_001
   4731  2c9c
   4732  2c9c				   .skipL0390
   4733  2c9c				   .L0391		;  AUDC1  =  8  :  AUDV1  =  4  :  AUDF1  =  16
   4734  2c9c
   4735  2c9c		       a9 08		      LDA	#8
   4736  2c9e		       85 16		      STA	AUDC1
   4737  2ca0		       a9 04		      LDA	#4
   4738  2ca2		       85 1a		      STA	AUDV1
   4739  2ca4		       a9 10		      LDA	#16
   4740  2ca6		       85 18		      STA	AUDF1
   4741  2ca8				   .L0392		;  if Ch1_Duration  <	20 then AUDC1  =  8  :	AUDV1  =  2  :	AUDF1  =  24
   4742  2ca8
   4743  2ca8		       a5 db		      LDA	Ch1_Duration
   4744  2caa		       c9 14		      CMP	#20
   4745  2cac		       b0 0c		      BCS	.skipL0392
   4746  2cae				   .condpart207
   4747  2cae		       a9 08		      LDA	#8
   4748  2cb0		       85 16		      STA	AUDC1
   4749  2cb2		       a9 02		      LDA	#2
   4750  2cb4		       85 1a		      STA	AUDV1
   4751  2cb6		       a9 18		      LDA	#24
   4752  2cb8		       85 18		      STA	AUDF1
   4753  2cba				   .skipL0392
   4754  2cba				   .L0393		;  if Ch1_Duration  <	10 then AUDC1  =  8  :	AUDV1  =  2  :	AUDF1  =  16
   4755  2cba
   4756  2cba		       a5 db		      LDA	Ch1_Duration
   4757  2cbc		       c9 0a		      CMP	#10
   4758  2cbe		       b0 0c		      BCS	.skipL0393
   4759  2cc0				   .condpart208
   4760  2cc0		       a9 08		      LDA	#8
   4761  2cc2		       85 16		      STA	AUDC1
   4762  2cc4		       a9 02		      LDA	#2
   4763  2cc6		       85 1a		      STA	AUDV1
   4764  2cc8		       a9 10		      LDA	#16
   4765  2cca		       85 18		      STA	AUDF1
   4766  2ccc				   .skipL0393
   4767  2ccc				   .L0394		;  goto __Skip_Fire
   4768  2ccc
   4769  2ccc		       4c e2 3c 	      jmp	.__Skip_Fire
   4770  2ccf
   4771  2ccf				   .__Exp_Skip_Ch0_Sound_001
   4772  2ccf							; __Exp_Skip_Ch0_Sound_001
   4773  2ccf
   4774  2ccf				   .L0395		;  goto __Skip_Fire
   4775  2ccf
   4776  2ccf		       4c e2 3c 	      jmp	.__Skip_Fire
   4777  2cd2
   4778  2cd2				   .__Exp_Clear_Ch_1
   4779  2cd2							; __Exp_Clear_Ch_1
   4780  2cd2
   4781  2cd2				   .L0396		;  Ch1_Sound  =  0  :	AUDV1  =  0 :  AUDC1  =  0 :  AUDF1  =	0 :  Bit5_hit{5}  = 0
   4782  2cd2
   4783  2cd2		       a9 00		      LDA	#0
   4784  2cd4		       85 da		      STA	Ch1_Sound
   4785  2cd6		       85 1a		      STA	AUDV1
   4786  2cd8		       85 16		      STA	AUDC1
   4787  2cda		       85 18		      STA	AUDF1
   4788  2cdc		       a5 ea		      LDA	Bit5_hit
   4789  2cde		       29 df		      AND	#223
   4790  2ce0		       85 ea		      STA	Bit5_hit
   4791  2ce2				   .
   4792  2ce2							; 
   4793  2ce2
   4794  2ce2				   .__Skip_Fire
   4795  2ce2							; __Skip_Fire
   4796  2ce2
   4797  2ce2				   .L0397		;  if Bit1_missleOn{1} then missile0y	=  missile0y  -  PlayerMissileRate
   4798  2ce2
   4799  2ce2		       a5 ea		      LDA	Bit1_missleOn
   4800  2ce4		       29 02		      AND	#2
   4801  2ce6		       f0 07		      BEQ	.skipL0397
   4802  2ce8				   .condpart209
   4803  2ce8		       a5 bf		      LDA	missile0y
   4804  2cea		       38		      SEC
   4805  2ceb		       e5 f0		      SBC	PlayerMissileRate
   4806  2ced		       85 bf		      STA	missile0y
   4807  2cef				   .skipL0397
   4808  2cef				   .L0398		;  if missile0y  <  7 then Bit1_missleOn{1}  =  0 :  missile0x  = 200 :  missile0y  =	200
   4809  2cef
   4810  2cef		       a5 bf		      LDA	missile0y
   4811  2cf1		       c9 07		      CMP	#7
   4812  2cf3		       b0 0c		      BCS	.skipL0398
   4813  2cf5				   .condpart210
   4814  2cf5		       a5 ea		      LDA	Bit1_missleOn
   4815  2cf7		       29 fd		      AND	#253
   4816  2cf9		       85 ea		      STA	Bit1_missleOn
   4817  2cfb		       a9 c8		      LDA	#200
   4818  2cfd		       85 82		      STA	missile0x
   4819  2cff		       85 bf		      STA	missile0y
   4820  2d01				   .skipL0398
   4821  2d01				   .L0399		;  goto __EnemyFire
   4822  2d01
   4823  2d01		       4c 53 3d 	      jmp	.__EnemyFire
   4824  2d04
   4825  2d04				   .
   4826  2d04							; 
   4827  2d04
   4828  2d04				   .__Score
   4829  2d04							; __Score
   4830  2d04
   4831  2d04				   .L0400		;  Bit5_hit{5}  =  1
   4832  2d04
   4833  2d04		       a5 ea		      LDA	Bit5_hit
   4834  2d06		       09 20		      ORA	#32
   4835  2d08		       85 ea		      STA	Bit5_hit
   4836  2d0a				   .L0401		;  if !Bit6_PLayer3Direction{6} then Points  = $35
   4837  2d0a
   4838  2d0a		       24 ea		      BIT	Bit6_PLayer3Direction
   4839  2d0c		       70 04		      BVS	.skipL0401
   4840  2d0e				   .condpart211
   4841  2d0e		       a9 35		      LDA	#$35
   4842  2d10		       85 d4		      STA	Points
   4843  2d12				   .skipL0401
   4844  2d12				   .L0402		;  frame  =  0
   4845  2d12
   4846  2d12		       a9 00		      LDA	#0
   4847  2d14		       85 d6		      STA	frame
   4848  2d16				   .L0403		;  dec score  = score	+  Points
   4849  2d16
   4850  2d16		       f8		      SED
   4851  2d17		       f8		      SED
   4852  2d18		       18		      CLC
   4853  2d19		       a5 ba		      LDA	score+2
   4854  2d1b		       65 d4		      ADC	Points
   4855  2d1d
   4856  2d1d		       85 ba		      STA	score+2
   4857  2d1f		       a5 b9		      LDA	score+1
   4858  2d21		       69 00		      ADC	#0
   4859  2d23		       85 b9		      STA	score+1
   4860  2d25		       a5 b8		      LDA	score
   4861  2d27		       69 00		      ADC	#0
   4862  2d29		       85 b8		      STA	score
   4863  2d2b		       d8		      CLD
   4864  2d2c		       d8		      CLD
   4865  2d2d				   .L0404		;  missile0x  =  200  :  missile0y  =	200
   4866  2d2d
   4867  2d2d		       a9 c8		      LDA	#200
   4868  2d2f		       85 82		      STA	missile0x
   4869  2d31		       85 bf		      STA	missile0y
   4870  2d33				   .L0405		;  Bit1_missleOn{1} = 0
   4871  2d33
   4872  2d33		       a5 ea		      LDA	Bit1_missleOn
   4873  2d35		       29 fd		      AND	#253
   4874  2d37		       85 ea		      STA	Bit1_missleOn
   4875  2d39				   .L0406		;  for Timer  =  1 to 10
   4876  2d39
   4877  2d39		       a9 01		      LDA	#1
   4878  2d3b		       85 e4		      STA	Timer
   4879  2d3d				   .L0406forTimer
   4880  2d3d				   .L0407		;  next
   4881  2d3d
   4882  2d3d		       a5 e4		      LDA	Timer
   4883  2d3f		       c9 0a		      CMP	#10
   4884  2d41
   4885  2d41		       e6 e4		      INC	Timer
   4886  2d43					      if	((* - .L0406forTimer) < 127) && ((* - .L0406forTimer) > -128)
   4887  2d43		       90 f8		      bcc	.L0406forTimer
   4888  2d45				  -	      else
   4889  2d45				  -	      bcs	.5skipL0406forTimer
   4890  2d45				  -	      jmp	.L0406forTimer
   4891  2d45				  -.5skipL0406forTimer
   4892  2d45					      endif
   4893  2d45				   .L0408		;  Points = 0
   4894  2d45
   4895  2d45		       a9 00		      LDA	#0
   4896  2d47		       85 d4		      STA	Points
   4897  2d49				   .L0409		;  Ch1_Sound  =  0  :	AUDV1  =  0 :  AUDC1  =  0 :  AUDF1  =	0
   4898  2d49
   4899  2d49		       a9 00		      LDA	#0
   4900  2d4b		       85 da		      STA	Ch1_Sound
   4901  2d4d		       85 1a		      STA	AUDV1
   4902  2d4f		       85 16		      STA	AUDC1
   4903  2d51		       85 18		      STA	AUDF1
   4904  2d53				   .
   4905  2d53							; 
   4906  2d53
   4907  2d53				   .__EnemyFire
   4908  2d53							; __EnemyFire
   4909  2d53
   4910  2d53				   .L0410		;  if !Bit3_ShootorNot{3} then goto __EnemyShoot
   4911  2d53
   4912  2d53		       a5 ea		      LDA	Bit3_ShootorNot
   4913  2d55		       29 08		      AND	#8
   4914  2d57		       d0 03		      BNE	.skipL0410
   4915  2d59				   .condpart212
   4916  2d59		       4c e4 3d 	      jmp	.__EnemyShoot
   4917  2d5c
   4918  2d5c				   .skipL0410
   4919  2d5c				   .L0411		;  if missile1y  >  170 then missile1y = 200 : 
   4920  2d5c
   4921  2d5c		       a9 aa		      LDA	#170
   4922  2d5e		       c5 c0		      CMP	missile1y
   4923  2d60		       b0 04		      BCS	.skipL0411
   4924  2d62				   .condpart213
   4925  2d62		       a9 c8		      LDA	#200
   4926  2d64		       85 c0		      STA	missile1y
   4927  2d66				   .skipL0411
   4928  2d66				   .L0412		;  if level  <= 5 then if !Bit4_gameover{4} then if Bit3_ShootorNot{3} then missile1y	=  missile1y  +  3
   4929  2d66
   4930  2d66		       a9 05		      LDA	#5
   4931  2d68		       c5 dc		      CMP	level
   4932  2d6a		       90 13		      BCC	.skipL0412
   4933  2d6c				   .condpart214
   4934  2d6c		       a5 ea		      LDA	Bit4_gameover
   4935  2d6e		       29 10		      AND	#16
   4936  2d70		       d0 0d		      BNE	.skip214then
   4937  2d72				   .condpart215
   4938  2d72		       a5 ea		      LDA	Bit3_ShootorNot
   4939  2d74		       29 08		      AND	#8
   4940  2d76		       f0 07		      BEQ	.skip215then
   4941  2d78				   .condpart216
   4942  2d78		       a5 c0		      LDA	missile1y
   4943  2d7a		       18		      CLC
   4944  2d7b		       69 03		      ADC	#3
   4945  2d7d		       85 c0		      STA	missile1y
   4946  2d7f				   .skip215then
   4947  2d7f				   .skip214then
   4948  2d7f				   .skipL0412
   4949  2d7f				   .L0413		;  if level  > 5 then if !Bit4_gameover{4} then if Bit3_ShootorNot{3} then missile1y  =  missile1y  +	5
   4950  2d7f
   4951  2d7f		       a9 05		      LDA	#5
   4952  2d81		       c5 dc		      CMP	level
   4953  2d83		       b0 13		      BCS	.skipL0413
   4954  2d85				   .condpart217
   4955  2d85		       a5 ea		      LDA	Bit4_gameover
   4956  2d87		       29 10		      AND	#16
   4957  2d89		       d0 0d		      BNE	.skip217then
   4958  2d8b				   .condpart218
   4959  2d8b		       a5 ea		      LDA	Bit3_ShootorNot
   4960  2d8d		       29 08		      AND	#8
   4961  2d8f		       f0 07		      BEQ	.skip218then
   4962  2d91				   .condpart219
   4963  2d91		       a5 c0		      LDA	missile1y
   4964  2d93		       18		      CLC
   4965  2d94		       69 05		      ADC	#5
   4966  2d96		       85 c0		      STA	missile1y
   4967  2d98				   .skip218then
   4968  2d98				   .skip217then
   4969  2d98				   .skipL0413
   4970  2d98				   .L0414		;  if missile1y  >  170 then missile1y = 200 :  Bit3_ShootorNot{3} = 0
   4971  2d98
   4972  2d98		       a9 aa		      LDA	#170
   4973  2d9a		       c5 c0		      CMP	missile1y
   4974  2d9c		       b0 0a		      BCS	.skipL0414
   4975  2d9e				   .condpart220
   4976  2d9e		       a9 c8		      LDA	#200
   4977  2da0		       85 c0		      STA	missile1y
   4978  2da2		       a5 ea		      LDA	Bit3_ShootorNot
   4979  2da4		       29 f7		      AND	#247
   4980  2da6		       85 ea		      STA	Bit3_ShootorNot
   4981  2da8				   .skipL0414
   4982  2da8				   .L0415		;  if missile1y  >  player0y - 8  &&  missile1y  <  player0y + 1 then if missile1x  >	player0x  - 8  &&  missile1x  <  player0x  + 8 then Damage  = 5  :  PlayerDamage  = 0  :  goto __EnemyScore
   4983  2da8
   4984  2da8							; complex condition detected
   4985  2da8		       a5 99		      LDA	player0y
   4986  2daa		       38		      SEC
   4987  2dab		       e9 08		      SBC	#8
   4988  2dad							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4989  2dad		       c5 c0		      CMP	missile1y
   4990  2daf		       b0 30		      BCS	.skipL0415
   4991  2db1				   .condpart221
   4992  2db1							; complex condition detected
   4993  2db1		       a5 99		      LDA	player0y
   4994  2db3		       18		      CLC
   4995  2db4		       69 01		      ADC	#1
   4996  2db6		       48		      PHA
   4997  2db7		       ba		      TSX
   4998  2db8		       68		      PLA
   4999  2db9		       a5 c0		      LDA	missile1y
   5000  2dbb		       d5 01		      CMP	1,x
   5001  2dbd		       b0 22		      BCS	.skip221then
   5002  2dbf				   .condpart222
   5003  2dbf							; complex condition detected
   5004  2dbf		       a5 80		      LDA	player0x
   5005  2dc1		       38		      SEC
   5006  2dc2		       e9 08		      SBC	#8
   5007  2dc4							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   5008  2dc4		       c5 83		      CMP	missile1x
   5009  2dc6		       b0 19		      BCS	.skip222then
   5010  2dc8				   .condpart223
   5011  2dc8							; complex condition detected
   5012  2dc8		       a5 80		      LDA	player0x
   5013  2dca		       18		      CLC
   5014  2dcb		       69 08		      ADC	#8
   5015  2dcd		       48		      PHA
   5016  2dce		       ba		      TSX
   5017  2dcf		       68		      PLA
   5018  2dd0		       a5 83		      LDA	missile1x
   5019  2dd2		       d5 01		      CMP	1,x
   5020  2dd4		       b0 0b		      BCS	.skip223then
   5021  2dd6				   .condpart224
   5022  2dd6		       a9 05		      LDA	#5
   5023  2dd8		       85 ed		      STA	Damage
   5024  2dda		       a9 00		      LDA	#0
   5025  2ddc		       85 dd		      STA	PlayerDamage
   5026  2dde		       4c 59 3e 	      jmp	.__EnemyScore
   5027  2de1
   5028  2de1				   .skip223then
   5029  2de1				   .skip222then
   5030  2de1				   .skip221then
   5031  2de1				   .skipL0415
   5032  2de1				   .L0416		;  goto __Resume
   5033  2de1
   5034  2de1		       4c 94 3e 	      jmp	.__Resume
   5035  2de4
   5036  2de4				   .
   5037  2de4							; 
   5038  2de4
   5039  2de4				   .__EnemyShoot
   5040  2de4							; __EnemyShoot
   5041  2de4
   5042  2de4				   .L0417		;  if !Bit4_gameover{4} then if player3x - 10	<  player0x  &&  player3x + 10	>  player0x then missile1x  =  player3x  +  EnemyMissilerate  :  missile1y  =  player3y
   5043  2de4
   5044  2de4		       a5 ea		      LDA	Bit4_gameover
   5045  2de6		       29 10		      AND	#16
   5046  2de8		       d0 22		      BNE	.skipL0417
   5047  2dea				   .condpart225
   5048  2dea							; complex condition detected
   5049  2dea		       a5 92		      LDA	player3x
   5050  2dec		       38		      SEC
   5051  2ded		       e9 0a		      SBC	#10
   5052  2def							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   5053  2def		       c5 80		      CMP	player0x
   5054  2df1		       b0 19		      BCS	.skip225then
   5055  2df3				   .condpart226
   5056  2df3							; complex condition detected
   5057  2df3		       a5 92		      LDA	player3x
   5058  2df5		       18		      CLC
   5059  2df6		       69 0a		      ADC	#10
   5060  2df8		       48		      PHA
   5061  2df9		       ba		      TSX
   5062  2dfa		       68		      PLA
   5063  2dfb		       a5 80		      LDA	player0x
   5064  2dfd		       d5 01		      CMP	1,x
   5065  2dff		       b0 0b		      BCS	.skip226then
   5066  2e01				   .condpart227
   5067  2e01		       a5 92		      LDA	player3x
   5068  2e03		       18		      CLC
   5069  2e04		       65 ef		      ADC	EnemyMissilerate
   5070  2e06		       85 83		      STA	missile1x
   5071  2e08		       a5 9c		      LDA	player3y
   5072  2e0a		       85 c0		      STA	missile1y
   5073  2e0c				   .skip226then
   5074  2e0c				   .skip225then
   5075  2e0c				   .skipL0417
   5076  2e0c				   .L0418		;  Bit3_ShootorNot{3} = 1
   5077  2e0c
   5078  2e0c		       a5 ea		      LDA	Bit3_ShootorNot
   5079  2e0e		       09 08		      ORA	#8
   5080  2e10		       85 ea		      STA	Bit3_ShootorNot
   5081  2e12				   .L0419		;  goto __Resume
   5082  2e12
   5083  2e12		       4c 94 3e 	      jmp	.__Resume
   5084  2e15
   5085  2e15				   .
   5086  2e15							; 
   5087  2e15
   5088  2e15				   .__EnemyBlock
   5089  2e15							; __EnemyBlock
   5090  2e15
   5091  2e15				   .L0420		;  frame  =  0
   5092  2e15
   5093  2e15		       a9 00		      LDA	#0
   5094  2e17		       85 d6		      STA	frame
   5095  2e19				   .L0421		;  if joy0fire then PlayerDamage  = 0	:  Damage  =  $5  :  goto __EnemyScore
   5096  2e19
   5097  2e19		       24 0c		      bit	INPT4
   5098  2e1b		       30 0b		      BMI	.skipL0421
   5099  2e1d				   .condpart228
   5100  2e1d		       a9 00		      LDA	#0
   5101  2e1f		       85 dd		      STA	PlayerDamage
   5102  2e21		       a9 05		      LDA	#$5
   5103  2e23		       85 ed		      STA	Damage
   5104  2e25		       4c 59 3e 	      jmp	.__EnemyScore
   5105  2e28
   5106  2e28				   .skipL0421
   5107  2e28				   .L0422		;  if !joy0left  ||  !joy0right then Points  =  10
   5108  2e28
   5109  2e28		       2c 80 02 	      bit	SWCHA
   5110  2e2b		       50 03		      BVC	.skipL0422
   5111  2e2d				   .condpart229
   5112  2e2d		       4c 35 3e 	      jmp	.condpart230
   5113  2e30				   .skipL0422
   5114  2e30		       2c 80 02 	      bit	SWCHA
   5115  2e33		       10 04		      BPL	.skip80OR
   5116  2e35				   .condpart230
   5117  2e35		       a9 0a		      LDA	#10
   5118  2e37		       85 d4		      STA	Points
   5119  2e39				   .skip80OR
   5120  2e39				   .L0423		;  if joy0left  ||  joy0right then if !joy0fire then Points  =  $5 :  PlayerDamage  = 2  :  goto __Score
   5121  2e39
   5122  2e39		       2c 80 02 	      bit	SWCHA
   5123  2e3c		       70 03		      BVS	.skipL0423
   5124  2e3e				   .condpart231
   5125  2e3e		       4c 46 3e 	      jmp	.condpart232
   5126  2e41				   .skipL0423
   5127  2e41		       2c 80 02 	      bit	SWCHA
   5128  2e44		       30 0f		      BMI	.skip81OR
   5129  2e46				   .condpart232
   5130  2e46		       24 0c		      bit	INPT4
   5131  2e48		       10 0b		      BPL	.skip232then
   5132  2e4a				   .condpart233
   5133  2e4a		       a9 05		      LDA	#$5
   5134  2e4c		       85 d4		      STA	Points
   5135  2e4e		       a9 02		      LDA	#2
   5136  2e50		       85 dd		      STA	PlayerDamage
   5137  2e52		       4c 04 3d 	      jmp	.__Score
   5138  2e55
   5139  2e55				   .skip232then
   5140  2e55				   .skip81OR
   5141  2e55				   .L0424		;  PlayerDamage  = 1
   5142  2e55
   5143  2e55		       a9 01		      LDA	#1
   5144  2e57		       85 dd		      STA	PlayerDamage
   5145  2e59				   .
   5146  2e59							; 
   5147  2e59
   5148  2e59				   .__EnemyScore
   5149  2e59							; __EnemyScore
   5150  2e59
   5151  2e59				   .L0425		;  if PlayerDamage  <	1 then PlayerHealth  =	PlayerHealth  -  Damage
   5152  2e59
   5153  2e59		       a5 dd		      LDA	PlayerDamage
   5154  2e5b		       c9 01		      CMP	#1
   5155  2e5d		       b0 07		      BCS	.skipL0425
   5156  2e5f				   .condpart234
   5157  2e5f		       a5 d5		      LDA	PlayerHealth
   5158  2e61		       38		      SEC
   5159  2e62		       e5 ed		      SBC	Damage
   5160  2e64		       85 d5		      STA	PlayerHealth
   5161  2e66				   .skipL0425
   5162  2e66				   .L0426		;  PlayerDamage  =  1
   5163  2e66
   5164  2e66		       a9 01		      LDA	#1
   5165  2e68		       85 dd		      STA	PlayerDamage
   5166  2e6a				   .L0427		;  Points = 0
   5167  2e6a
   5168  2e6a		       a9 00		      LDA	#0
   5169  2e6c		       85 d4		      STA	Points
   5170  2e6e				   .L0428		;  missile1y  = 200 :	missile1x =  200
   5171  2e6e
   5172  2e6e		       a9 c8		      LDA	#200
   5173  2e70		       85 c0		      STA	missile1y
   5174  2e72		       85 83		      STA	missile1x
   5175  2e74				   .L0429		;  gosub __P0Explosion bank5
   5176  2e74
   5177  2e74		       85 81		      sta	temp7
   5178  2e76		       a9 3e		      lda	#>(ret_point9-1)
   5179  2e78		       48		      pha
   5180  2e79		       a9 8b		      lda	#<(ret_point9-1)
   5181  2e7b		       48		      pha
   5182  2e7c		       a9 90		      lda	#>(.__P0Explosion-1)
   5183  2e7e		       48		      pha
   5184  2e7f		       a9 84		      lda	#<(.__P0Explosion-1)
   5185  2e81		       48		      pha
   5186  2e82		       a5 81		      lda	temp7
   5187  2e84		       48		      pha
   5188  2e85		       8a		      txa
   5189  2e86		       48		      pha
   5190  2e87		       a2 05		      ldx	#5
   5191  2e89		       4c ee df 	      jmp	BS_jsr
   5192  2e8c				   ret_point9
   5193  2e8c				   .L0430		;  AUDV1  =  0 :  AUDC1  =  0 :  AUDF1  =  0
   5194  2e8c
   5195  2e8c		       a9 00		      LDA	#0
   5196  2e8e		       85 1a		      STA	AUDV1
   5197  2e90		       85 16		      STA	AUDC1
   5198  2e92		       85 18		      STA	AUDF1
   5199  2e94				   .__Resume
   5200  2e94							; __Resume
   5201  2e94
   5202  2e94				   .L0431		;  drawscreen
   5203  2e94
   5204  2e94		       85 81		      sta	temp7
   5205  2e96		       a9 3e		      lda	#>(ret_point10-1)
   5206  2e98		       48		      pha
   5207  2e99		       a9 ab		      lda	#<(ret_point10-1)
   5208  2e9b		       48		      pha
   5209  2e9c		       a9 19		      lda	#>(drawscreen-1)
   5210  2e9e		       48		      pha
   5211  2e9f		       a9 48		      lda	#<(drawscreen-1)
   5212  2ea1		       48		      pha
   5213  2ea2		       a5 81		      lda	temp7
   5214  2ea4		       48		      pha
   5215  2ea5		       8a		      txa
   5216  2ea6		       48		      pha
   5217  2ea7		       a2 01		      ldx	#1
   5218  2ea9		       4c ee df 	      jmp	BS_jsr
   5219  2eac				   ret_point10
   5220  2eac				   .L0432		;  PF0 = %00000000
   5221  2eac
   5222  2eac		       a9 00		      LDA	#%00000000
   5223  2eae		       85 0d		      STA	PF0
   5224  2eb0				   .L0433		;  goto __Main_Loop
   5225  2eb0
   5226  2eb0		       4c cd 32 	      jmp	.__Main_Loop
   5227  2eb3
   5228  2eb3				   .
   5229  2eb3							; 
   5230  2eb3
   5231  2eb3				   .L0434		;  bank 3
   5232  2eb3
   5233  2eb3					      if	ECHO2
      289 bytes of ROM space left in bank 2
   5234  2eb3					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
   5235  2eb3					      endif
   5236  2eb3		       00 01	   ECHO2      =	1
   5237  2fd4					      ORG	$2FF4-bscode_length
   5238  2fd4					      RORG	$3FF4-bscode_length
   5239  2fd4		       a2 ff	   start_bank2 ldx	#$ff
   5240  2fd6					      ifconst	FASTFETCH	; using DPC+
   5241  2fd6		       8e 58 10 	      stx	FASTFETCH
   5242  2fd9					      endif
   5243  2fd9		       9a		      txs
   5244  2fda				  -	      if	bankswitch == 64
   5245  2fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   5246  2fda					      else
   5247  2fda		       a9 18		      lda	#>(start-1)
   5248  2fdc					      endif
   5249  2fdc		       48		      pha
   5250  2fdd		       a9 e3		      lda	#<(start-1)
   5251  2fdf		       48		      pha
   5252  2fe0		       48		      pha
   5253  2fe1		       8a		      txa
   5254  2fe2		       48		      pha
   5255  2fe3		       ba		      tsx
   5256  2fe4					      if	bankswitch != 64
   5257  2fe4		       b5 04		      lda	4,x	; get high byte of return address
   5258  2fe6		       2a		      rol
   5259  2fe7		       2a		      rol
   5260  2fe8		       2a		      rol
   5261  2fe9		       2a		      rol
   5262  2fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   5263  2fec		       aa		      tax
   5264  2fed		       e8		      inx
   5265  2fee				  -	      else
   5266  2fee				  -	      lda	4,x	; get high byte of return address
   5267  2fee				  -	      tay
   5268  2fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   5269  2fee				  -	      sta	4,x
   5270  2fee				  -	      tya
   5271  2fee				  -	      lsr
   5272  2fee				  -	      lsr
   5273  2fee				  -	      lsr
   5274  2fee				  -	      lsr
   5275  2fee				  -	      tax
   5276  2fee				  -	      inx
   5277  2fee					      endif
   5278  2fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   5279  2ff1		       68		      pla
   5280  2ff2		       aa		      tax
   5281  2ff3		       68		      pla
   5282  2ff4		       60		      rts
   5283  2ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   5284  2ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   5285  2ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   5286  2ff5					      endif
   5287  2ffc					      ORG	$2FFC
   5288  2ffc					      RORG	$3FFC
   5289  2ffc		       d4 3f		      .word.w	(start_bank2 & $ffff)
   5290  2ffe		       d4 3f		      .word.w	(start_bank2 & $ffff)
   5291  3000					      ORG	$3000
   5292  3000					      RORG	$5000
   5293  3000					      repeat	129
   5294  3000		       00		      .byte.b	0
   5293  3000					      repend
   5294  3001		       00		      .byte.b	0
   5293  3001					      repend
   5294  3002		       00		      .byte.b	0
   5293  3002					      repend
   5294  3003		       00		      .byte.b	0
   5293  3003					      repend
   5294  3004		       00		      .byte.b	0
   5293  3004					      repend
   5294  3005		       00		      .byte.b	0
   5293  3005					      repend
   5294  3006		       00		      .byte.b	0
   5293  3006					      repend
   5294  3007		       00		      .byte.b	0
   5293  3007					      repend
   5294  3008		       00		      .byte.b	0
   5293  3008					      repend
   5294  3009		       00		      .byte.b	0
   5293  3009					      repend
   5294  300a		       00		      .byte.b	0
   5293  300a					      repend
   5294  300b		       00		      .byte.b	0
   5293  300b					      repend
   5294  300c		       00		      .byte.b	0
   5293  300c					      repend
   5294  300d		       00		      .byte.b	0
   5293  300d					      repend
   5294  300e		       00		      .byte.b	0
   5293  300e					      repend
   5294  300f		       00		      .byte.b	0
   5293  300f					      repend
   5294  3010		       00		      .byte.b	0
   5293  3010					      repend
   5294  3011		       00		      .byte.b	0
   5293  3011					      repend
   5294  3012		       00		      .byte.b	0
   5293  3012					      repend
   5294  3013		       00		      .byte.b	0
   5293  3013					      repend
   5294  3014		       00		      .byte.b	0
   5293  3014					      repend
   5294  3015		       00		      .byte.b	0
   5293  3015					      repend
   5294  3016		       00		      .byte.b	0
   5293  3016					      repend
   5294  3017		       00		      .byte.b	0
   5293  3017					      repend
   5294  3018		       00		      .byte.b	0
   5293  3018					      repend
   5294  3019		       00		      .byte.b	0
   5293  3019					      repend
   5294  301a		       00		      .byte.b	0
   5293  301a					      repend
   5294  301b		       00		      .byte.b	0
   5293  301b					      repend
   5294  301c		       00		      .byte.b	0
   5293  301c					      repend
   5294  301d		       00		      .byte.b	0
   5293  301d					      repend
   5294  301e		       00		      .byte.b	0
   5293  301e					      repend
   5294  301f		       00		      .byte.b	0
   5293  301f					      repend
   5294  3020		       00		      .byte.b	0
   5293  3020					      repend
   5294  3021		       00		      .byte.b	0
   5293  3021					      repend
   5294  3022		       00		      .byte.b	0
   5293  3022					      repend
   5294  3023		       00		      .byte.b	0
   5293  3023					      repend
   5294  3024		       00		      .byte.b	0
   5293  3024					      repend
   5294  3025		       00		      .byte.b	0
   5293  3025					      repend
   5294  3026		       00		      .byte.b	0
   5293  3026					      repend
   5294  3027		       00		      .byte.b	0
   5293  3027					      repend
   5294  3028		       00		      .byte.b	0
   5293  3028					      repend
   5294  3029		       00		      .byte.b	0
   5293  3029					      repend
   5294  302a		       00		      .byte.b	0
   5293  302a					      repend
   5294  302b		       00		      .byte.b	0
   5293  302b					      repend
   5294  302c		       00		      .byte.b	0
   5293  302c					      repend
   5294  302d		       00		      .byte.b	0
   5293  302d					      repend
   5294  302e		       00		      .byte.b	0
   5293  302e					      repend
   5294  302f		       00		      .byte.b	0
   5293  302f					      repend
   5294  3030		       00		      .byte.b	0
   5293  3030					      repend
   5294  3031		       00		      .byte.b	0
   5293  3031					      repend
   5294  3032		       00		      .byte.b	0
   5293  3032					      repend
   5294  3033		       00		      .byte.b	0
   5293  3033					      repend
   5294  3034		       00		      .byte.b	0
   5293  3034					      repend
   5294  3035		       00		      .byte.b	0
   5293  3035					      repend
   5294  3036		       00		      .byte.b	0
   5293  3036					      repend
   5294  3037		       00		      .byte.b	0
   5293  3037					      repend
   5294  3038		       00		      .byte.b	0
   5293  3038					      repend
   5294  3039		       00		      .byte.b	0
   5293  3039					      repend
   5294  303a		       00		      .byte.b	0
   5293  303a					      repend
   5294  303b		       00		      .byte.b	0
   5293  303b					      repend
   5294  303c		       00		      .byte.b	0
   5293  303c					      repend
   5294  303d		       00		      .byte.b	0
   5293  303d					      repend
   5294  303e		       00		      .byte.b	0
   5293  303e					      repend
   5294  303f		       00		      .byte.b	0
   5293  303f					      repend
   5294  3040		       00		      .byte.b	0
   5293  3040					      repend
   5294  3041		       00		      .byte.b	0
   5293  3041					      repend
   5294  3042		       00		      .byte.b	0
   5293  3042					      repend
   5294  3043		       00		      .byte.b	0
   5293  3043					      repend
   5294  3044		       00		      .byte.b	0
   5293  3044					      repend
   5294  3045		       00		      .byte.b	0
   5293  3045					      repend
   5294  3046		       00		      .byte.b	0
   5293  3046					      repend
   5294  3047		       00		      .byte.b	0
   5293  3047					      repend
   5294  3048		       00		      .byte.b	0
   5293  3048					      repend
   5294  3049		       00		      .byte.b	0
   5293  3049					      repend
   5294  304a		       00		      .byte.b	0
   5293  304a					      repend
   5294  304b		       00		      .byte.b	0
   5293  304b					      repend
   5294  304c		       00		      .byte.b	0
   5293  304c					      repend
   5294  304d		       00		      .byte.b	0
   5293  304d					      repend
   5294  304e		       00		      .byte.b	0
   5293  304e					      repend
   5294  304f		       00		      .byte.b	0
   5293  304f					      repend
   5294  3050		       00		      .byte.b	0
   5293  3050					      repend
   5294  3051		       00		      .byte.b	0
   5293  3051					      repend
   5294  3052		       00		      .byte.b	0
   5293  3052					      repend
   5294  3053		       00		      .byte.b	0
   5293  3053					      repend
   5294  3054		       00		      .byte.b	0
   5293  3054					      repend
   5294  3055		       00		      .byte.b	0
   5293  3055					      repend
   5294  3056		       00		      .byte.b	0
   5293  3056					      repend
   5294  3057		       00		      .byte.b	0
   5293  3057					      repend
   5294  3058		       00		      .byte.b	0
   5293  3058					      repend
   5294  3059		       00		      .byte.b	0
   5293  3059					      repend
   5294  305a		       00		      .byte.b	0
   5293  305a					      repend
   5294  305b		       00		      .byte.b	0
   5293  305b					      repend
   5294  305c		       00		      .byte.b	0
   5293  305c					      repend
   5294  305d		       00		      .byte.b	0
   5293  305d					      repend
   5294  305e		       00		      .byte.b	0
   5293  305e					      repend
   5294  305f		       00		      .byte.b	0
   5293  305f					      repend
   5294  3060		       00		      .byte.b	0
   5293  3060					      repend
   5294  3061		       00		      .byte.b	0
   5293  3061					      repend
   5294  3062		       00		      .byte.b	0
   5293  3062					      repend
   5294  3063		       00		      .byte.b	0
   5293  3063					      repend
   5294  3064		       00		      .byte.b	0
   5293  3064					      repend
   5294  3065		       00		      .byte.b	0
   5293  3065					      repend
   5294  3066		       00		      .byte.b	0
   5293  3066					      repend
   5294  3067		       00		      .byte.b	0
   5293  3067					      repend
   5294  3068		       00		      .byte.b	0
   5293  3068					      repend
   5294  3069		       00		      .byte.b	0
   5293  3069					      repend
   5294  306a		       00		      .byte.b	0
   5293  306a					      repend
   5294  306b		       00		      .byte.b	0
   5293  306b					      repend
   5294  306c		       00		      .byte.b	0
   5293  306c					      repend
   5294  306d		       00		      .byte.b	0
   5293  306d					      repend
   5294  306e		       00		      .byte.b	0
   5293  306e					      repend
   5294  306f		       00		      .byte.b	0
   5293  306f					      repend
   5294  3070		       00		      .byte.b	0
   5293  3070					      repend
   5294  3071		       00		      .byte.b	0
   5293  3071					      repend
   5294  3072		       00		      .byte.b	0
   5293  3072					      repend
   5294  3073		       00		      .byte.b	0
   5293  3073					      repend
   5294  3074		       00		      .byte.b	0
   5293  3074					      repend
   5294  3075		       00		      .byte.b	0
   5293  3075					      repend
   5294  3076		       00		      .byte.b	0
   5293  3076					      repend
   5294  3077		       00		      .byte.b	0
   5293  3077					      repend
   5294  3078		       00		      .byte.b	0
   5293  3078					      repend
   5294  3079		       00		      .byte.b	0
   5293  3079					      repend
   5294  307a		       00		      .byte.b	0
   5293  307a					      repend
   5294  307b		       00		      .byte.b	0
   5293  307b					      repend
   5294  307c		       00		      .byte.b	0
   5293  307c					      repend
   5294  307d		       00		      .byte.b	0
   5293  307d					      repend
   5294  307e		       00		      .byte.b	0
   5293  307e					      repend
   5294  307f		       00		      .byte.b	0
   5293  307f					      repend
   5294  3080		       00		      .byte.b	0
   5295  3081					      repend
   5296  3081				   .L0435		;  temp1 = temp1
   5297  3081
   5298  3081		       a5 cb		      LDA	temp1
   5299  3083		       85 cb		      STA	temp1
   5300  3085				   .__Bank3
   5301  3085							; __Bank3
   5302  3085
   5303  3085				   .
   5304  3085							; 
   5305  3085
   5306  3085				   .__Househits
   5307  3085							; __Househits
   5308  3085
   5309  3085				   .L0436		;  if Househit = 2 then gosub __PFColors bank3
   5310  3085
   5311  3085		       a5 e1		      LDA	Househit
   5312  3087		       c9 02		      CMP	#2
   5313  3089		       d0 18		      BNE	.skipL0436
   5314  308b				   .condpart235
   5315  308b		       85 81		      sta	temp7
   5316  308d		       a9 50		      lda	#>(ret_point11-1)
   5317  308f		       48		      pha
   5318  3090		       a9 a2		      lda	#<(ret_point11-1)
   5319  3092		       48		      pha
   5320  3093		       a9 52		      lda	#>(.__PFColors-1)
   5321  3095		       48		      pha
   5322  3096		       a9 44		      lda	#<(.__PFColors-1)
   5323  3098		       48		      pha
   5324  3099		       a5 81		      lda	temp7
   5325  309b		       48		      pha
   5326  309c		       8a		      txa
   5327  309d		       48		      pha
   5328  309e		       a2 03		      ldx	#3
   5329  30a0		       4c ee df 	      jmp	BS_jsr
   5330  30a3				   ret_point11
   5331  30a3				   .skipL0436
   5332  30a3				   .L0437		;  if Househit = 3 then gosub __PFColors1 bank3
   5333  30a3
   5334  30a3		       a5 e1		      LDA	Househit
   5335  30a5		       c9 03		      CMP	#3
   5336  30a7		       d0 18		      BNE	.skipL0437
   5337  30a9				   .condpart236
   5338  30a9		       85 81		      sta	temp7
   5339  30ab		       a9 50		      lda	#>(ret_point12-1)
   5340  30ad		       48		      pha
   5341  30ae		       a9 c0		      lda	#<(ret_point12-1)
   5342  30b0		       48		      pha
   5343  30b1		       a9 52		      lda	#>(.__PFColors1-1)
   5344  30b3		       48		      pha
   5345  30b4		       a9 7f		      lda	#<(.__PFColors1-1)
   5346  30b6		       48		      pha
   5347  30b7		       a5 81		      lda	temp7
   5348  30b9		       48		      pha
   5349  30ba		       8a		      txa
   5350  30bb		       48		      pha
   5351  30bc		       a2 03		      ldx	#3
   5352  30be		       4c ee df 	      jmp	BS_jsr
   5353  30c1				   ret_point12
   5354  30c1				   .skipL0437
   5355  30c1				   .L0438		;  if Househit = 4 then gosub __PFColors2 bank3
   5356  30c1
   5357  30c1		       a5 e1		      LDA	Househit
   5358  30c3		       c9 04		      CMP	#4
   5359  30c5		       d0 18		      BNE	.skipL0438
   5360  30c7				   .condpart237
   5361  30c7		       85 81		      sta	temp7
   5362  30c9		       a9 50		      lda	#>(ret_point13-1)
   5363  30cb		       48		      pha
   5364  30cc		       a9 de		      lda	#<(ret_point13-1)
   5365  30ce		       48		      pha
   5366  30cf		       a9 52		      lda	#>(.__PFColors2-1)
   5367  30d1		       48		      pha
   5368  30d2		       a9 ba		      lda	#<(.__PFColors2-1)
   5369  30d4		       48		      pha
   5370  30d5		       a5 81		      lda	temp7
   5371  30d7		       48		      pha
   5372  30d8		       8a		      txa
   5373  30d9		       48		      pha
   5374  30da		       a2 03		      ldx	#3
   5375  30dc		       4c ee df 	      jmp	BS_jsr
   5376  30df				   ret_point13
   5377  30df				   .skipL0438
   5378  30df				   .L0439		;  if Househit = 5 then gosub __PFColors3 bank3
   5379  30df
   5380  30df		       a5 e1		      LDA	Househit
   5381  30e1		       c9 05		      CMP	#5
   5382  30e3		       d0 18		      BNE	.skipL0439
   5383  30e5				   .condpart238
   5384  30e5		       85 81		      sta	temp7
   5385  30e7		       a9 50		      lda	#>(ret_point14-1)
   5386  30e9		       48		      pha
   5387  30ea		       a9 fc		      lda	#<(ret_point14-1)
   5388  30ec		       48		      pha
   5389  30ed		       a9 52		      lda	#>(.__PFColors3-1)
   5390  30ef		       48		      pha
   5391  30f0		       a9 f5		      lda	#<(.__PFColors3-1)
   5392  30f2		       48		      pha
   5393  30f3		       a5 81		      lda	temp7
   5394  30f5		       48		      pha
   5395  30f6		       8a		      txa
   5396  30f7		       48		      pha
   5397  30f8		       a2 03		      ldx	#3
   5398  30fa		       4c ee df 	      jmp	BS_jsr
   5399  30fd				   ret_point14
   5400  30fd				   .skipL0439
   5401  30fd				   .L0440		;  if Househit = 6 then gosub __PFColors4 bank3
   5402  30fd
   5403  30fd		       a5 e1		      LDA	Househit
   5404  30ff		       c9 06		      CMP	#6
   5405  3101		       d0 18		      BNE	.skipL0440
   5406  3103				   .condpart239
   5407  3103		       85 81		      sta	temp7
   5408  3105		       a9 51		      lda	#>(ret_point15-1)
   5409  3107		       48		      pha
   5410  3108		       a9 1a		      lda	#<(ret_point15-1)
   5411  310a		       48		      pha
   5412  310b		       a9 53		      lda	#>(.__PFColors4-1)
   5413  310d		       48		      pha
   5414  310e		       a9 34		      lda	#<(.__PFColors4-1)
   5415  3110		       48		      pha
   5416  3111		       a5 81		      lda	temp7
   5417  3113		       48		      pha
   5418  3114		       8a		      txa
   5419  3115		       48		      pha
   5420  3116		       a2 03		      ldx	#3
   5421  3118		       4c ee df 	      jmp	BS_jsr
   5422  311b				   ret_point15
   5423  311b				   .skipL0440
   5424  311b				   .L0441		;  if Househit = 7 then gosub __PFColors5 bank3
   5425  311b
   5426  311b		       a5 e1		      LDA	Househit
   5427  311d		       c9 07		      CMP	#7
   5428  311f		       d0 18		      BNE	.skipL0441
   5429  3121				   .condpart240
   5430  3121		       85 81		      sta	temp7
   5431  3123		       a9 51		      lda	#>(ret_point16-1)
   5432  3125		       48		      pha
   5433  3126		       a9 38		      lda	#<(ret_point16-1)
   5434  3128		       48		      pha
   5435  3129		       a9 53		      lda	#>(.__PFColors5-1)
   5436  312b		       48		      pha
   5437  312c		       a9 6f		      lda	#<(.__PFColors5-1)
   5438  312e		       48		      pha
   5439  312f		       a5 81		      lda	temp7
   5440  3131		       48		      pha
   5441  3132		       8a		      txa
   5442  3133		       48		      pha
   5443  3134		       a2 03		      ldx	#3
   5444  3136		       4c ee df 	      jmp	BS_jsr
   5445  3139				   ret_point16
   5446  3139				   .skipL0441
   5447  3139				   .L0442		;  if Househit = 8 then gosub __PFColors6 bank3
   5448  3139
   5449  3139		       a5 e1		      LDA	Househit
   5450  313b		       c9 08		      CMP	#8
   5451  313d		       d0 18		      BNE	.skipL0442
   5452  313f				   .condpart241
   5453  313f		       85 81		      sta	temp7
   5454  3141		       a9 51		      lda	#>(ret_point17-1)
   5455  3143		       48		      pha
   5456  3144		       a9 56		      lda	#<(ret_point17-1)
   5457  3146		       48		      pha
   5458  3147		       a9 53		      lda	#>(.__PFColors6-1)
   5459  3149		       48		      pha
   5460  314a		       a9 9f		      lda	#<(.__PFColors6-1)
   5461  314c		       48		      pha
   5462  314d		       a5 81		      lda	temp7
   5463  314f		       48		      pha
   5464  3150		       8a		      txa
   5465  3151		       48		      pha
   5466  3152		       a2 03		      ldx	#3
   5467  3154		       4c ee df 	      jmp	BS_jsr
   5468  3157				   ret_point17
   5469  3157				   .skipL0442
   5470  3157				   .L0443		;  if Househit = 9 then gosub __PFColors7 bank3
   5471  3157
   5472  3157		       a5 e1		      LDA	Househit
   5473  3159		       c9 09		      CMP	#9
   5474  315b		       d0 18		      BNE	.skipL0443
   5475  315d				   .condpart242
   5476  315d		       85 81		      sta	temp7
   5477  315f		       a9 51		      lda	#>(ret_point18-1)
   5478  3161		       48		      pha
   5479  3162		       a9 74		      lda	#<(ret_point18-1)
   5480  3164		       48		      pha
   5481  3165		       a9 53		      lda	#>(.__PFColors7-1)
   5482  3167		       48		      pha
   5483  3168		       a9 de		      lda	#<(.__PFColors7-1)
   5484  316a		       48		      pha
   5485  316b		       a5 81		      lda	temp7
   5486  316d		       48		      pha
   5487  316e		       8a		      txa
   5488  316f		       48		      pha
   5489  3170		       a2 03		      ldx	#3
   5490  3172		       4c ee df 	      jmp	BS_jsr
   5491  3175				   ret_point18
   5492  3175				   .skipL0443
   5493  3175				   .L0444		;  if Househit = 10 then gosub __PFColors8 bank3
   5494  3175
   5495  3175		       a5 e1		      LDA	Househit
   5496  3177		       c9 0a		      CMP	#10
   5497  3179		       d0 18		      BNE	.skipL0444
   5498  317b				   .condpart243
   5499  317b		       85 81		      sta	temp7
   5500  317d		       a9 51		      lda	#>(ret_point19-1)
   5501  317f		       48		      pha
   5502  3180		       a9 92		      lda	#<(ret_point19-1)
   5503  3182		       48		      pha
   5504  3183		       a9 54		      lda	#>(.__PFColors8-1)
   5505  3185		       48		      pha
   5506  3186		       a9 0e		      lda	#<(.__PFColors8-1)
   5507  3188		       48		      pha
   5508  3189		       a5 81		      lda	temp7
   5509  318b		       48		      pha
   5510  318c		       8a		      txa
   5511  318d		       48		      pha
   5512  318e		       a2 03		      ldx	#3
   5513  3190		       4c ee df 	      jmp	BS_jsr
   5514  3193				   ret_point19
   5515  3193				   .skipL0444
   5516  3193				   .L0445		;  if Househit = 11 then gosub __PFColors9 bank3
   5517  3193
   5518  3193		       a5 e1		      LDA	Househit
   5519  3195		       c9 0b		      CMP	#11
   5520  3197		       d0 18		      BNE	.skipL0445
   5521  3199				   .condpart244
   5522  3199		       85 81		      sta	temp7
   5523  319b		       a9 51		      lda	#>(ret_point20-1)
   5524  319d		       48		      pha
   5525  319e		       a9 b0		      lda	#<(ret_point20-1)
   5526  31a0		       48		      pha
   5527  31a1		       a9 54		      lda	#>(.__PFColors9-1)
   5528  31a3		       48		      pha
   5529  31a4		       a9 3e		      lda	#<(.__PFColors9-1)
   5530  31a6		       48		      pha
   5531  31a7		       a5 81		      lda	temp7
   5532  31a9		       48		      pha
   5533  31aa		       8a		      txa
   5534  31ab		       48		      pha
   5535  31ac		       a2 03		      ldx	#3
   5536  31ae		       4c ee df 	      jmp	BS_jsr
   5537  31b1				   ret_point20
   5538  31b1				   .skipL0445
   5539  31b1				   .L0446		;  if Househit = 12 then gosub __PFColors10 bank3
   5540  31b1
   5541  31b1		       a5 e1		      LDA	Househit
   5542  31b3		       c9 0c		      CMP	#12
   5543  31b5		       d0 18		      BNE	.skipL0446
   5544  31b7				   .condpart245
   5545  31b7		       85 81		      sta	temp7
   5546  31b9		       a9 51		      lda	#>(ret_point21-1)
   5547  31bb		       48		      pha
   5548  31bc		       a9 ce		      lda	#<(ret_point21-1)
   5549  31be		       48		      pha
   5550  31bf		       a9 54		      lda	#>(.__PFColors10-1)
   5551  31c1		       48		      pha
   5552  31c2		       a9 6e		      lda	#<(.__PFColors10-1)
   5553  31c4		       48		      pha
   5554  31c5		       a5 81		      lda	temp7
   5555  31c7		       48		      pha
   5556  31c8		       8a		      txa
   5557  31c9		       48		      pha
   5558  31ca		       a2 03		      ldx	#3
   5559  31cc		       4c ee df 	      jmp	BS_jsr
   5560  31cf				   ret_point21
   5561  31cf				   .skipL0446
   5562  31cf				   .L0447		;  return
   5563  31cf
   5564  31cf		       ba		      tsx
   5565  31d0		       b5 02		      lda	2,x	; check return address
   5566  31d2		       49 51		      eor	#(>*)	; vs. current PCH
   5567  31d4		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5568  31d6		       f0 03		      beq	*+5	; if equal, do normal return
   5569  31d8		       4c e0 df 	      JMP	BS_return
   5570  31db		       60		      RTS
   5571  31dc				   .__Playfield1
   5572  31dc							; __Playfield1
   5573  31dc
   5574  31dc				   .
   5575  31dc							; 
   5576  31dc
   5577  31dc				   .L0448		;  if Bit4_gameover{4} then goto __GameOver bank4
   5578  31dc
   5579  31dc		       a5 ea		      LDA	Bit4_gameover
   5580  31de		       29 10		      AND	#16
   5581  31e0		       f0 12		      BEQ	.skipL0448
   5582  31e2				   .condpart246
   5583  31e2		       85 81		      sta	temp7
   5584  31e4		       a9 76		      lda	#>(.__GameOver-1)
   5585  31e6		       48		      pha
   5586  31e7		       a9 a2		      lda	#<(.__GameOver-1)
   5587  31e9		       48		      pha
   5588  31ea		       a5 81		      lda	temp7
   5589  31ec		       48		      pha
   5590  31ed		       8a		      txa
   5591  31ee		       48		      pha
   5592  31ef		       a2 04		      ldx	#4
   5593  31f1		       4c ee df 	      jmp	BS_jsr
   5594  31f4				   .skipL0448
   5595  31f4				   .
   5596  31f4							; 
   5597  31f4
   5598  31f4				   ._PlayfieldLevel1
   5599  31f4							; _PlayfieldLevel1
   5600  31f4
   5601  31f4				   .L0449		;  playfield:
   5602  31f4
   5603  31f4		       a0 58		      ldy	#88
   5604  31f6		       a9 a8		      LDA	#<PF_data1
   5605  31f8		       a2 61		      LDX	#((>PF_data1) & $0f) | (((>PF_data1) / 2) & $70)
   5606  31fa		       85 81		      sta	temp7
   5607  31fc		       a9 52		      lda	#>(ret_point22-1)
   5608  31fe		       48		      pha
   5609  31ff		       a9 11		      lda	#<(ret_point22-1)
   5610  3201		       48		      pha
   5611  3202		       a9 1e		      lda	#>(pfsetup-1)
   5612  3204		       48		      pha
   5613  3205		       a9 8c		      lda	#<(pfsetup-1)
   5614  3207		       48		      pha
   5615  3208		       a5 81		      lda	temp7
   5616  320a		       48		      pha
   5617  320b		       8a		      txa
   5618  320c		       48		      pha
   5619  320d		       a2 01		      ldx	#1
   5620  320f		       4c ee df 	      jmp	BS_jsr
   5621  3212				   ret_point22
   5622  3212				   .
   5623  3212							; 
   5624  3212
   5625  3212				   .L0450		;  goto __Colors
   5626  3212
   5627  3212		       4c 15 52 	      jmp	.__Colors
   5628  3215
   5629  3215				   .
   5630  3215							; 
   5631  3215
   5632  3215				   .__Colors
   5633  3215							; __Colors
   5634  3215
   5635  3215				   .L0451		;  pfcolors:
   5636  3215
   5637  3215		       a9 08		      LDA	#<PFCOLS
   5638  3217		       8d 50 10 	      STA	DF0LOW
   5639  321a		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5640  321c		       8d 68 10 	      STA	DF0HI
   5641  321f		       a9 08		      LDA	#<playfieldcolorL0451
   5642  3221		       8d 59 10 	      STA	PARAMETER
   5643  3224		       a9 63		      LDA	#((>playfieldcolorL0451) & $0f) | (((>playfieldcolorL0451) / 2) & $70)
   5644  3226		       8d 59 10 	      STA	PARAMETER
   5645  3229		       a9 00		      LDA	#0
   5646  322b		       8d 59 10 	      STA	PARAMETER
   5647  322e		       a9 58		      LDA	#88
   5648  3230		       8d 59 10 	      STA	PARAMETER
   5649  3233		       a9 01		      LDA	#1
   5650  3235		       8d 5a 10 	      STA	CALLFUNCTION
   5651  3238				   .L0452		;  return
   5652  3238
   5653  3238		       ba		      tsx
   5654  3239		       b5 02		      lda	2,x	; check return address
   5655  323b		       49 52		      eor	#(>*)	; vs. current PCH
   5656  323d		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5657  323f		       f0 03		      beq	*+5	; if equal, do normal return
   5658  3241		       4c e0 df 	      JMP	BS_return
   5659  3244		       60		      RTS
   5660  3245				   .
   5661  3245							; 
   5662  3245
   5663  3245				   .__PFColors
   5664  3245							; __PFColors
   5665  3245
   5666  3245				   .
   5667  3245							; 
   5668  3245
   5669  3245				   .L0453		;  player5x  = LEdge + 5  :  player5y	= 114
   5670  3245
   5671  3245		       a9 47		      LDA	#LEdge
   5672  3247		       18		      CLC
   5673  3248		       69 05		      ADC	#5
   5674  324a		       85 94		      STA	player5x
   5675  324c		       a9 72		      LDA	#114
   5676  324e		       85 9e		      STA	player5y
   5677  3250				   .
   5678  3250							; 
   5679  3250
   5680  3250				   .L0454		;  pfcolors:
   5681  3250
   5682  3250		       a9 08		      LDA	#<PFCOLS
   5683  3252		       8d 50 10 	      STA	DF0LOW
   5684  3255		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5685  3257		       8d 68 10 	      STA	DF0HI
   5686  325a		       a9 60		      LDA	#<playfieldcolorL0454
   5687  325c		       8d 59 10 	      STA	PARAMETER
   5688  325f		       a9 63		      LDA	#((>playfieldcolorL0454) & $0f) | (((>playfieldcolorL0454) / 2) & $70)
   5689  3261		       8d 59 10 	      STA	PARAMETER
   5690  3264		       a9 00		      LDA	#0
   5691  3266		       8d 59 10 	      STA	PARAMETER
   5692  3269		       a9 58		      LDA	#88
   5693  326b		       8d 59 10 	      STA	PARAMETER
   5694  326e		       a9 01		      LDA	#1
   5695  3270		       8d 5a 10 	      STA	CALLFUNCTION
   5696  3273				   .L0455		;  return
   5697  3273
   5698  3273		       ba		      tsx
   5699  3274		       b5 02		      lda	2,x	; check return address
   5700  3276		       49 52		      eor	#(>*)	; vs. current PCH
   5701  3278		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5702  327a		       f0 03		      beq	*+5	; if equal, do normal return
   5703  327c		       4c e0 df 	      JMP	BS_return
   5704  327f		       60		      RTS
   5705  3280				   .__PFColors1
   5706  3280							; __PFColors1
   5707  3280
   5708  3280				   .L0456		;  player5x  = LEdge + 7 :  player5y  = 114
   5709  3280
   5710  3280		       a9 47		      LDA	#LEdge
   5711  3282		       18		      CLC
   5712  3283		       69 07		      ADC	#7
   5713  3285		       85 94		      STA	player5x
   5714  3287		       a9 72		      LDA	#114
   5715  3289		       85 9e		      STA	player5y
   5716  328b				   .
   5717  328b							; 
   5718  328b
   5719  328b				   .L0457		;  pfcolors:
   5720  328b
   5721  328b		       a9 08		      LDA	#<PFCOLS
   5722  328d		       8d 50 10 	      STA	DF0LOW
   5723  3290		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5724  3292		       8d 68 10 	      STA	DF0HI
   5725  3295		       a9 b8		      LDA	#<playfieldcolorL0457
   5726  3297		       8d 59 10 	      STA	PARAMETER
   5727  329a		       a9 63		      LDA	#((>playfieldcolorL0457) & $0f) | (((>playfieldcolorL0457) / 2) & $70)
   5728  329c		       8d 59 10 	      STA	PARAMETER
   5729  329f		       a9 00		      LDA	#0
   5730  32a1		       8d 59 10 	      STA	PARAMETER
   5731  32a4		       a9 58		      LDA	#88
   5732  32a6		       8d 59 10 	      STA	PARAMETER
   5733  32a9		       a9 01		      LDA	#1
   5734  32ab		       8d 5a 10 	      STA	CALLFUNCTION
   5735  32ae				   .L0458		;  return
   5736  32ae
   5737  32ae		       ba		      tsx
   5738  32af		       b5 02		      lda	2,x	; check return address
   5739  32b1		       49 52		      eor	#(>*)	; vs. current PCH
   5740  32b3		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5741  32b5		       f0 03		      beq	*+5	; if equal, do normal return
   5742  32b7		       4c e0 df 	      JMP	BS_return
   5743  32ba		       60		      RTS
   5744  32bb				   .__PFColors2
   5745  32bb							; __PFColors2
   5746  32bb
   5747  32bb				   .L0459		;  player5x  = LEdge +  5 :  player5y	= 114
   5748  32bb
   5749  32bb		       a9 47		      LDA	#LEdge
   5750  32bd		       18		      CLC
   5751  32be		       69 05		      ADC	#5
   5752  32c0		       85 94		      STA	player5x
   5753  32c2		       a9 72		      LDA	#114
   5754  32c4		       85 9e		      STA	player5y
   5755  32c6				   .
   5756  32c6							; 
   5757  32c6
   5758  32c6				   .L0460		;  pfcolors:
   5759  32c6
   5760  32c6		       a9 08		      LDA	#<PFCOLS
   5761  32c8		       8d 50 10 	      STA	DF0LOW
   5762  32cb		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5763  32cd		       8d 68 10 	      STA	DF0HI
   5764  32d0		       a9 10		      LDA	#<playfieldcolorL0460
   5765  32d2		       8d 59 10 	      STA	PARAMETER
   5766  32d5		       a9 64		      LDA	#((>playfieldcolorL0460) & $0f) | (((>playfieldcolorL0460) / 2) & $70)
   5767  32d7		       8d 59 10 	      STA	PARAMETER
   5768  32da		       a9 00		      LDA	#0
   5769  32dc		       8d 59 10 	      STA	PARAMETER
   5770  32df		       a9 58		      LDA	#88
   5771  32e1		       8d 59 10 	      STA	PARAMETER
   5772  32e4		       a9 01		      LDA	#1
   5773  32e6		       8d 5a 10 	      STA	CALLFUNCTION
   5774  32e9				   .L0461		;  return
   5775  32e9
   5776  32e9		       ba		      tsx
   5777  32ea		       b5 02		      lda	2,x	; check return address
   5778  32ec		       49 52		      eor	#(>*)	; vs. current PCH
   5779  32ee		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5780  32f0		       f0 03		      beq	*+5	; if equal, do normal return
   5781  32f2		       4c e0 df 	      JMP	BS_return
   5782  32f5		       60		      RTS
   5783  32f6				   .
   5784  32f6							; 
   5785  32f6
   5786  32f6				   .__PFColors3
   5787  32f6							; __PFColors3
   5788  32f6
   5789  32f6				   .L0462		;  NUSIZ5  =  $5
   5790  32f6
   5791  32f6		       a9 05		      LDA	#$5
   5792  32f8		       85 b3		      STA	NUSIZ5
   5793  32fa				   .L0463		;  player5x  = LEdge +  5 :  player5y	= 114
   5794  32fa
   5795  32fa		       a9 47		      LDA	#LEdge
   5796  32fc		       18		      CLC
   5797  32fd		       69 05		      ADC	#5
   5798  32ff		       85 94		      STA	player5x
   5799  3301		       a9 72		      LDA	#114
   5800  3303		       85 9e		      STA	player5y
   5801  3305				   .
   5802  3305							; 
   5803  3305
   5804  3305				   .L0464		;  pfcolors:
   5805  3305
   5806  3305		       a9 08		      LDA	#<PFCOLS
   5807  3307		       8d 50 10 	      STA	DF0LOW
   5808  330a		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5809  330c		       8d 68 10 	      STA	DF0HI
   5810  330f		       a9 68		      LDA	#<playfieldcolorL0464
   5811  3311		       8d 59 10 	      STA	PARAMETER
   5812  3314		       a9 64		      LDA	#((>playfieldcolorL0464) & $0f) | (((>playfieldcolorL0464) / 2) & $70)
   5813  3316		       8d 59 10 	      STA	PARAMETER
   5814  3319		       a9 00		      LDA	#0
   5815  331b		       8d 59 10 	      STA	PARAMETER
   5816  331e		       a9 58		      LDA	#88
   5817  3320		       8d 59 10 	      STA	PARAMETER
   5818  3323		       a9 01		      LDA	#1
   5819  3325		       8d 5a 10 	      STA	CALLFUNCTION
   5820  3328				   .L0465		;  return
   5821  3328
   5822  3328		       ba		      tsx
   5823  3329		       b5 02		      lda	2,x	; check return address
   5824  332b		       49 53		      eor	#(>*)	; vs. current PCH
   5825  332d		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5826  332f		       f0 03		      beq	*+5	; if equal, do normal return
   5827  3331		       4c e0 df 	      JMP	BS_return
   5828  3334		       60		      RTS
   5829  3335				   .
   5830  3335							; 
   5831  3335
   5832  3335				   .__PFColors4
   5833  3335							; __PFColors4
   5834  3335
   5835  3335				   .L0466		;  player5x  = LEdge +  15 :  player5y  = 114
   5836  3335
   5837  3335		       a9 47		      LDA	#LEdge
   5838  3337		       18		      CLC
   5839  3338		       69 0f		      ADC	#15
   5840  333a		       85 94		      STA	player5x
   5841  333c		       a9 72		      LDA	#114
   5842  333e		       85 9e		      STA	player5y
   5843  3340				   .
   5844  3340							; 
   5845  3340
   5846  3340				   .L0467		;  pfcolors:
   5847  3340
   5848  3340		       a9 08		      LDA	#<PFCOLS
   5849  3342		       8d 50 10 	      STA	DF0LOW
   5850  3345		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5851  3347		       8d 68 10 	      STA	DF0HI
   5852  334a		       a9 c0		      LDA	#<playfieldcolorL0467
   5853  334c		       8d 59 10 	      STA	PARAMETER
   5854  334f		       a9 64		      LDA	#((>playfieldcolorL0467) & $0f) | (((>playfieldcolorL0467) / 2) & $70)
   5855  3351		       8d 59 10 	      STA	PARAMETER
   5856  3354		       a9 00		      LDA	#0
   5857  3356		       8d 59 10 	      STA	PARAMETER
   5858  3359		       a9 58		      LDA	#88
   5859  335b		       8d 59 10 	      STA	PARAMETER
   5860  335e		       a9 01		      LDA	#1
   5861  3360		       8d 5a 10 	      STA	CALLFUNCTION
   5862  3363				   .L0468		;  return
   5863  3363
   5864  3363		       ba		      tsx
   5865  3364		       b5 02		      lda	2,x	; check return address
   5866  3366		       49 53		      eor	#(>*)	; vs. current PCH
   5867  3368		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5868  336a		       f0 03		      beq	*+5	; if equal, do normal return
   5869  336c		       4c e0 df 	      JMP	BS_return
   5870  336f		       60		      RTS
   5871  3370				   .
   5872  3370							; 
   5873  3370
   5874  3370				   .__PFColors5
   5875  3370							; __PFColors5
   5876  3370
   5877  3370				   .L0469		;  pfcolors:
   5878  3370
   5879  3370		       a9 08		      LDA	#<PFCOLS
   5880  3372		       8d 50 10 	      STA	DF0LOW
   5881  3375		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5882  3377		       8d 68 10 	      STA	DF0HI
   5883  337a		       a9 18		      LDA	#<playfieldcolorL0469
   5884  337c		       8d 59 10 	      STA	PARAMETER
   5885  337f		       a9 65		      LDA	#((>playfieldcolorL0469) & $0f) | (((>playfieldcolorL0469) / 2) & $70)
   5886  3381		       8d 59 10 	      STA	PARAMETER
   5887  3384		       a9 00		      LDA	#0
   5888  3386		       8d 59 10 	      STA	PARAMETER
   5889  3389		       a9 58		      LDA	#88
   5890  338b		       8d 59 10 	      STA	PARAMETER
   5891  338e		       a9 01		      LDA	#1
   5892  3390		       8d 5a 10 	      STA	CALLFUNCTION
   5893  3393				   .L0470		;  return
   5894  3393
   5895  3393		       ba		      tsx
   5896  3394		       b5 02		      lda	2,x	; check return address
   5897  3396		       49 53		      eor	#(>*)	; vs. current PCH
   5898  3398		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5899  339a		       f0 03		      beq	*+5	; if equal, do normal return
   5900  339c		       4c e0 df 	      JMP	BS_return
   5901  339f		       60		      RTS
   5902  33a0				   .
   5903  33a0							; 
   5904  33a0
   5905  33a0				   .__PFColors6
   5906  33a0							; __PFColors6
   5907  33a0
   5908  33a0				   .L0471		;  NUSIZ5 = $7
   5909  33a0
   5910  33a0		       a9 07		      LDA	#$7
   5911  33a2		       85 b3		      STA	NUSIZ5
   5912  33a4				   .L0472		;  player5x  = LEdge + 7 :  player5y  = 114
   5913  33a4
   5914  33a4		       a9 47		      LDA	#LEdge
   5915  33a6		       18		      CLC
   5916  33a7		       69 07		      ADC	#7
   5917  33a9		       85 94		      STA	player5x
   5918  33ab		       a9 72		      LDA	#114
   5919  33ad		       85 9e		      STA	player5y
   5920  33af				   .L0473		;  pfcolors:
   5921  33af
   5922  33af		       a9 08		      LDA	#<PFCOLS
   5923  33b1		       8d 50 10 	      STA	DF0LOW
   5924  33b4		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5925  33b6		       8d 68 10 	      STA	DF0HI
   5926  33b9		       a9 70		      LDA	#<playfieldcolorL0473
   5927  33bb		       8d 59 10 	      STA	PARAMETER
   5928  33be		       a9 65		      LDA	#((>playfieldcolorL0473) & $0f) | (((>playfieldcolorL0473) / 2) & $70)
   5929  33c0		       8d 59 10 	      STA	PARAMETER
   5930  33c3		       a9 00		      LDA	#0
   5931  33c5		       8d 59 10 	      STA	PARAMETER
   5932  33c8		       a9 58		      LDA	#88
   5933  33ca		       8d 59 10 	      STA	PARAMETER
   5934  33cd		       a9 01		      LDA	#1
   5935  33cf		       8d 5a 10 	      STA	CALLFUNCTION
   5936  33d2				   .L0474		;  return
   5937  33d2
   5938  33d2		       ba		      tsx
   5939  33d3		       b5 02		      lda	2,x	; check return address
   5940  33d5		       49 53		      eor	#(>*)	; vs. current PCH
   5941  33d7		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5942  33d9		       f0 03		      beq	*+5	; if equal, do normal return
   5943  33db		       4c e0 df 	      JMP	BS_return
   5944  33de		       60		      RTS
   5945  33df				   .
   5946  33df							; 
   5947  33df
   5948  33df				   .__PFColors7
   5949  33df							; __PFColors7
   5950  33df
   5951  33df				   .L0475		;  pfcolors:
   5952  33df
   5953  33df		       a9 08		      LDA	#<PFCOLS
   5954  33e1		       8d 50 10 	      STA	DF0LOW
   5955  33e4		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5956  33e6		       8d 68 10 	      STA	DF0HI
   5957  33e9		       a9 c8		      LDA	#<playfieldcolorL0475
   5958  33eb		       8d 59 10 	      STA	PARAMETER
   5959  33ee		       a9 65		      LDA	#((>playfieldcolorL0475) & $0f) | (((>playfieldcolorL0475) / 2) & $70)
   5960  33f0		       8d 59 10 	      STA	PARAMETER
   5961  33f3		       a9 00		      LDA	#0
   5962  33f5		       8d 59 10 	      STA	PARAMETER
   5963  33f8		       a9 58		      LDA	#88
   5964  33fa		       8d 59 10 	      STA	PARAMETER
   5965  33fd		       a9 01		      LDA	#1
   5966  33ff		       8d 5a 10 	      STA	CALLFUNCTION
   5967  3402				   .L0476		;  return
   5968  3402
   5969  3402		       ba		      tsx
   5970  3403		       b5 02		      lda	2,x	; check return address
   5971  3405		       49 54		      eor	#(>*)	; vs. current PCH
   5972  3407		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5973  3409		       f0 03		      beq	*+5	; if equal, do normal return
   5974  340b		       4c e0 df 	      JMP	BS_return
   5975  340e		       60		      RTS
   5976  340f				   .
   5977  340f							; 
   5978  340f
   5979  340f				   .__PFColors8
   5980  340f							; __PFColors8
   5981  340f
   5982  340f				   .L0477		;  pfcolors:
   5983  340f
   5984  340f		       a9 08		      LDA	#<PFCOLS
   5985  3411		       8d 50 10 	      STA	DF0LOW
   5986  3414		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5987  3416		       8d 68 10 	      STA	DF0HI
   5988  3419		       a9 20		      LDA	#<playfieldcolorL0477
   5989  341b		       8d 59 10 	      STA	PARAMETER
   5990  341e		       a9 66		      LDA	#((>playfieldcolorL0477) & $0f) | (((>playfieldcolorL0477) / 2) & $70)
   5991  3420		       8d 59 10 	      STA	PARAMETER
   5992  3423		       a9 00		      LDA	#0
   5993  3425		       8d 59 10 	      STA	PARAMETER
   5994  3428		       a9 58		      LDA	#88
   5995  342a		       8d 59 10 	      STA	PARAMETER
   5996  342d		       a9 01		      LDA	#1
   5997  342f		       8d 5a 10 	      STA	CALLFUNCTION
   5998  3432				   .
   5999  3432							; 
   6000  3432
   6001  3432				   .L0478		;  return
   6002  3432
   6003  3432		       ba		      tsx
   6004  3433		       b5 02		      lda	2,x	; check return address
   6005  3435		       49 54		      eor	#(>*)	; vs. current PCH
   6006  3437		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   6007  3439		       f0 03		      beq	*+5	; if equal, do normal return
   6008  343b		       4c e0 df 	      JMP	BS_return
   6009  343e		       60		      RTS
   6010  343f				   .__PFColors9
   6011  343f							; __PFColors9
   6012  343f
   6013  343f				   .L0479		;  pfcolors:
   6014  343f
   6015  343f		       a9 08		      LDA	#<PFCOLS
   6016  3441		       8d 50 10 	      STA	DF0LOW
   6017  3444		       a9 0a		      LDA	#(>PFCOLS) & $0F
   6018  3446		       8d 68 10 	      STA	DF0HI
   6019  3449		       a9 78		      LDA	#<playfieldcolorL0479
   6020  344b		       8d 59 10 	      STA	PARAMETER
   6021  344e		       a9 66		      LDA	#((>playfieldcolorL0479) & $0f) | (((>playfieldcolorL0479) / 2) & $70)
   6022  3450		       8d 59 10 	      STA	PARAMETER
   6023  3453		       a9 00		      LDA	#0
   6024  3455		       8d 59 10 	      STA	PARAMETER
   6025  3458		       a9 58		      LDA	#88
   6026  345a		       8d 59 10 	      STA	PARAMETER
   6027  345d		       a9 01		      LDA	#1
   6028  345f		       8d 5a 10 	      STA	CALLFUNCTION
   6029  3462				   .L0480		;  return
   6030  3462
   6031  3462		       ba		      tsx
   6032  3463		       b5 02		      lda	2,x	; check return address
   6033  3465		       49 54		      eor	#(>*)	; vs. current PCH
   6034  3467		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   6035  3469		       f0 03		      beq	*+5	; if equal, do normal return
   6036  346b		       4c e0 df 	      JMP	BS_return
   6037  346e		       60		      RTS
   6038  346f				   .
   6039  346f							; 
   6040  346f
   6041  346f				   .__PFColors10
   6042  346f							; __PFColors10
   6043  346f
   6044  346f				   .L0481		;  pfcolors:
   6045  346f
   6046  346f		       a9 08		      LDA	#<PFCOLS
   6047  3471		       8d 50 10 	      STA	DF0LOW
   6048  3474		       a9 0a		      LDA	#(>PFCOLS) & $0F
   6049  3476		       8d 68 10 	      STA	DF0HI
   6050  3479		       a9 d0		      LDA	#<playfieldcolorL0481
   6051  347b		       8d 59 10 	      STA	PARAMETER
   6052  347e		       a9 66		      LDA	#((>playfieldcolorL0481) & $0f) | (((>playfieldcolorL0481) / 2) & $70)
   6053  3480		       8d 59 10 	      STA	PARAMETER
   6054  3483		       a9 00		      LDA	#0
   6055  3485		       8d 59 10 	      STA	PARAMETER
   6056  3488		       a9 58		      LDA	#88
   6057  348a		       8d 59 10 	      STA	PARAMETER
   6058  348d		       a9 01		      LDA	#1
   6059  348f		       8d 5a 10 	      STA	CALLFUNCTION
   6060  3492				   .L0482		;  return
   6061  3492
   6062  3492		       ba		      tsx
   6063  3493		       b5 02		      lda	2,x	; check return address
   6064  3495		       49 54		      eor	#(>*)	; vs. current PCH
   6065  3497		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   6066  3499		       f0 03		      beq	*+5	; if equal, do normal return
   6067  349b		       4c e0 df 	      JMP	BS_return
   6068  349e		       60		      RTS
   6069  349f				   .
   6070  349f							; 
   6071  349f
   6072  349f				   .__Health
   6073  349f							; __Health
   6074  349f
   6075  349f				   .L0483		;  Timer  = 0
   6076  349f
   6077  349f		       a9 00		      LDA	#0
   6078  34a1		       85 e4		      STA	Timer
   6079  34a3				   .L0484		;  Bit5_hit{5} = 1
   6080  34a3
   6081  34a3		       a5 ea		      LDA	Bit5_hit
   6082  34a5		       09 20		      ORA	#32
   6083  34a7		       85 ea		      STA	Bit5_hit
   6084  34a9				   .L0485		;  if Powerup	<  1 then __PowerUp
   6085  34a9
   6086  34a9		       a5 ee		      LDA	Powerup
   6087  34ab		       c9 01		      CMP	#1
   6088  34ad				  -	      if	((* - .__PowerUp) < 127) && ((* - .__PowerUp) > -128)
   6089  34ad				  -	      bcc	.__PowerUp
   6090  34ad					      else
   6091  34ad		       b0 03		      bcs	.6skip__PowerUp
   6092  34af		       4c 76 55 	      jmp	.__PowerUp
   6093  34b2				   .6skip__PowerUp
   6094  34b2					      endif
   6095  34b2				   .L0486		;  if Powerup	>  1 then __BounusFire
   6096  34b2
   6097  34b2		       a9 01		      LDA	#1
   6098  34b4		       c5 ee		      CMP	Powerup
   6099  34b6				  -	      if	((* - .__BounusFire) < 127) && ((* - .__BounusFire) > -128)
   6100  34b6				  -	      bcc	.__BounusFire
   6101  34b6					      else
   6102  34b6		       b0 03		      bcs	.7skip__BounusFire
   6103  34b8		       4c 42 55 	      jmp	.__BounusFire
   6104  34bb				   .7skip__BounusFire
   6105  34bb					      endif
   6106  34bb				   .L0487		;  gosub __P0Explosion bank5
   6107  34bb
   6108  34bb		       85 81		      sta	temp7
   6109  34bd		       a9 54		      lda	#>(ret_point23-1)
   6110  34bf		       48		      pha
   6111  34c0		       a9 d2		      lda	#<(ret_point23-1)
   6112  34c2		       48		      pha
   6113  34c3		       a9 90		      lda	#>(.__P0Explosion-1)
   6114  34c5		       48		      pha
   6115  34c6		       a9 84		      lda	#<(.__P0Explosion-1)
   6116  34c8		       48		      pha
   6117  34c9		       a5 81		      lda	temp7
   6118  34cb		       48		      pha
   6119  34cc		       8a		      txa
   6120  34cd		       48		      pha
   6121  34ce		       a2 05		      ldx	#5
   6122  34d0		       4c ee df 	      jmp	BS_jsr
   6123  34d3				   ret_point23
   6124  34d3				   .L0488		;  PlayerHealth  =  PlayerHealth  +  25
   6125  34d3
   6126  34d3		       a5 d5		      LDA	PlayerHealth
   6127  34d5		       18		      CLC
   6128  34d6		       69 19		      ADC	#25
   6129  34d8		       85 d5		      STA	PlayerHealth
   6130  34da				   .L0489		;  PlayerMissileRate = 5
   6131  34da
   6132  34da		       a9 05		      LDA	#5
   6133  34dc		       85 f0		      STA	PlayerMissileRate
   6134  34de				   .L0490		;  if PlayerHealth  >	80 then PlayerHealth  =  80
   6135  34de
   6136  34de		       a9 50		      LDA	#80
   6137  34e0		       c5 d5		      CMP	PlayerHealth
   6138  34e2		       b0 04		      BCS	.skipL0490
   6139  34e4				   .condpart247
   6140  34e4		       a9 50		      LDA	#80
   6141  34e6		       85 d5		      STA	PlayerHealth
   6142  34e8				   .skipL0490
   6143  34e8				   .L0491		;  Househit = Househit - 1
   6144  34e8
   6145  34e8		       c6 e1		      DEC	Househit
   6146  34ea				   .L0492		;  if Househit  < 2 then Househit  = 1
   6147  34ea
   6148  34ea		       a5 e1		      LDA	Househit
   6149  34ec		       c9 02		      CMP	#2
   6150  34ee		       b0 04		      BCS	.skipL0492
   6151  34f0				   .condpart248
   6152  34f0		       a9 01		      LDA	#1
   6153  34f2		       85 e1		      STA	Househit
   6154  34f4				   .skipL0492
   6155  34f4				   .L0493		;  player4y = 200
   6156  34f4
   6157  34f4		       a9 c8		      LDA	#200
   6158  34f6		       85 9d		      STA	player4y
   6159  34f8				   .L0494		;  Bit2_EnemyMove{2} = 0
   6160  34f8
   6161  34f8		       a5 ea		      LDA	Bit2_EnemyMove
   6162  34fa		       29 fb		      AND	#251
   6163  34fc		       85 ea		      STA	Bit2_EnemyMove
   6164  34fe				   .L0495		;  HealthDrop	=  0
   6165  34fe
   6166  34fe		       a9 00		      LDA	#0
   6167  3500		       85 de		      STA	HealthDrop
   6168  3502				   .L0496		;  Bit1_missleOn{1}  = 0
   6169  3502
   6170  3502		       a5 ea		      LDA	Bit1_missleOn
   6171  3504		       29 fd		      AND	#253
   6172  3506		       85 ea		      STA	Bit1_missleOn
   6173  3508				   .L0497		;  missile0x  =  200  :  missile0y  =	200
   6174  3508
   6175  3508		       a9 c8		      LDA	#200
   6176  350a		       85 82		      STA	missile0x
   6177  350c		       85 bf		      STA	missile0y
   6178  350e				   .L0498		;  gosub __P0Explosion bank5
   6179  350e
   6180  350e		       85 81		      sta	temp7
   6181  3510		       a9 55		      lda	#>(ret_point24-1)
   6182  3512		       48		      pha
   6183  3513		       a9 25		      lda	#<(ret_point24-1)
   6184  3515		       48		      pha
   6185  3516		       a9 90		      lda	#>(.__P0Explosion-1)
   6186  3518		       48		      pha
   6187  3519		       a9 84		      lda	#<(.__P0Explosion-1)
   6188  351b		       48		      pha
   6189  351c		       a5 81		      lda	temp7
   6190  351e		       48		      pha
   6191  351f		       8a		      txa
   6192  3520		       48		      pha
   6193  3521		       a2 05		      ldx	#5
   6194  3523		       4c ee df 	      jmp	BS_jsr
   6195  3526				   ret_point24
   6196  3526				   .L0499		;  Powerup  =	 ( rand & 2 ) 
   6197  3526
   6198  3526							; complex statement detected
   6199  3526		       ad 00 10 	      lda	rand
   6200  3529		       4a		      lsr
   6201  352a				  -	      ifconst	rand16
   6202  352a				  -	      rol	rand16
   6203  352a					      endif
   6204  352a		       90 02		      bcc	*+4
   6205  352c		       49 b4		      eor	#$B4
   6206  352e		       8d 00 10 	      sta	rand
   6207  3531				  -	      ifconst	rand16
   6208  3531				  -	      eor	rand16
   6209  3531					      endif
   6210  3531		       29 02		      AND	#2
   6211  3533		       85 ee		      STA	Powerup
   6212  3535				   .L0500		;  return
   6213  3535
   6214  3535		       ba		      tsx
   6215  3536		       b5 02		      lda	2,x	; check return address
   6216  3538		       49 55		      eor	#(>*)	; vs. current PCH
   6217  353a		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   6218  353c		       f0 03		      beq	*+5	; if equal, do normal return
   6219  353e		       4c e0 df 	      JMP	BS_return
   6220  3541		       60		      RTS
   6221  3542				   .
   6222  3542							; 
   6223  3542
   6224  3542				   .__BounusFire
   6225  3542							; __BounusFire
   6226  3542
   6227  3542				   .L0501		;  PlayerMissileRate = 10
   6228  3542
   6229  3542		       a9 0a		      LDA	#10
   6230  3544		       85 f0		      STA	PlayerMissileRate
   6231  3546				   .L0502		;  HealthDrop	=  0
   6232  3546
   6233  3546		       a9 00		      LDA	#0
   6234  3548		       85 de		      STA	HealthDrop
   6235  354a				   .L0503		;  Bit1_missleOn{1}  = 0
   6236  354a
   6237  354a		       a5 ea		      LDA	Bit1_missleOn
   6238  354c		       29 fd		      AND	#253
   6239  354e		       85 ea		      STA	Bit1_missleOn
   6240  3550				   .L0504		;  missile0x  =  200  :  missile0y  =	200
   6241  3550
   6242  3550		       a9 c8		      LDA	#200
   6243  3552		       85 82		      STA	missile0x
   6244  3554		       85 bf		      STA	missile0y
   6245  3556				   .L0505		;  player4y = 200
   6246  3556
   6247  3556		       a9 c8		      LDA	#200
   6248  3558		       85 9d		      STA	player4y
   6249  355a				   .L0506		;  Powerup  =	 ( rand & 2 ) 
   6250  355a
   6251  355a							; complex statement detected
   6252  355a		       ad 00 10 	      lda	rand
   6253  355d		       4a		      lsr
   6254  355e				  -	      ifconst	rand16
   6255  355e				  -	      rol	rand16
   6256  355e					      endif
   6257  355e		       90 02		      bcc	*+4
   6258  3560		       49 b4		      eor	#$B4
   6259  3562		       8d 00 10 	      sta	rand
   6260  3565				  -	      ifconst	rand16
   6261  3565				  -	      eor	rand16
   6262  3565					      endif
   6263  3565		       29 02		      AND	#2
   6264  3567		       85 ee		      STA	Powerup
   6265  3569				   .L0507		;  return
   6266  3569
   6267  3569		       ba		      tsx
   6268  356a		       b5 02		      lda	2,x	; check return address
   6269  356c		       49 55		      eor	#(>*)	; vs. current PCH
   6270  356e		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   6271  3570		       f0 03		      beq	*+5	; if equal, do normal return
   6272  3572		       4c e0 df 	      JMP	BS_return
   6273  3575		       60		      RTS
   6274  3576				   .
   6275  3576							; 
   6276  3576
   6277  3576				   .__PowerUp
   6278  3576							; __PowerUp
   6279  3576
   6280  3576				   .L0508		;  gosub __P0Explosion bank5
   6281  3576
   6282  3576		       85 81		      sta	temp7
   6283  3578		       a9 55		      lda	#>(ret_point25-1)
   6284  357a		       48		      pha
   6285  357b		       a9 8d		      lda	#<(ret_point25-1)
   6286  357d		       48		      pha
   6287  357e		       a9 90		      lda	#>(.__P0Explosion-1)
   6288  3580		       48		      pha
   6289  3581		       a9 84		      lda	#<(.__P0Explosion-1)
   6290  3583		       48		      pha
   6291  3584		       a5 81		      lda	temp7
   6292  3586		       48		      pha
   6293  3587		       8a		      txa
   6294  3588		       48		      pha
   6295  3589		       a2 05		      ldx	#5
   6296  358b		       4c ee df 	      jmp	BS_jsr
   6297  358e				   ret_point25
   6298  358e				   .L0509		;  PlayerMissileRate = 5
   6299  358e
   6300  358e		       a9 05		      LDA	#5
   6301  3590		       85 f0		      STA	PlayerMissileRate
   6302  3592				   .L0510		;  player1y  = 200
   6303  3592
   6304  3592		       a9 c8		      LDA	#200
   6305  3594		       85 9a		      STA	player1y
   6306  3596				   .L0511		;  player2y  = 200
   6307  3596
   6308  3596		       a9 c8		      LDA	#200
   6309  3598		       85 9b		      STA	player2y
   6310  359a				   .L0512		;  player3y  =  200
   6311  359a
   6312  359a		       a9 c8		      LDA	#200
   6313  359c		       85 9c		      STA	player3y
   6314  359e				   .L0513		;  player4y = 200
   6315  359e
   6316  359e		       a9 c8		      LDA	#200
   6317  35a0		       85 9d		      STA	player4y
   6318  35a2				   .L0514		;  Bit2_EnemyMove{2} = 0
   6319  35a2
   6320  35a2		       a5 ea		      LDA	Bit2_EnemyMove
   6321  35a4		       29 fb		      AND	#251
   6322  35a6		       85 ea		      STA	Bit2_EnemyMove
   6323  35a8				   .L0515		;  HealthDrop	=  0
   6324  35a8
   6325  35a8		       a9 00		      LDA	#0
   6326  35aa		       85 de		      STA	HealthDrop
   6327  35ac				   .L0516		;  Bit5_hit{5} = 1
   6328  35ac
   6329  35ac		       a5 ea		      LDA	Bit5_hit
   6330  35ae		       09 20		      ORA	#32
   6331  35b0		       85 ea		      STA	Bit5_hit
   6332  35b2				   .L0517		;  Bit1_missleOn{1}  = 0
   6333  35b2
   6334  35b2		       a5 ea		      LDA	Bit1_missleOn
   6335  35b4		       29 fd		      AND	#253
   6336  35b6		       85 ea		      STA	Bit1_missleOn
   6337  35b8				   .L0518		;  missile0x  =  200  :  missile0y  =	200
   6338  35b8
   6339  35b8		       a9 c8		      LDA	#200
   6340  35ba		       85 82		      STA	missile0x
   6341  35bc		       85 bf		      STA	missile0y
   6342  35be				   .L0519		;  Powerup  =	 ( rand & 2 ) 
   6343  35be
   6344  35be							; complex statement detected
   6345  35be		       ad 00 10 	      lda	rand
   6346  35c1		       4a		      lsr
   6347  35c2				  -	      ifconst	rand16
   6348  35c2				  -	      rol	rand16
   6349  35c2					      endif
   6350  35c2		       90 02		      bcc	*+4
   6351  35c4		       49 b4		      eor	#$B4
   6352  35c6		       8d 00 10 	      sta	rand
   6353  35c9				  -	      ifconst	rand16
   6354  35c9				  -	      eor	rand16
   6355  35c9					      endif
   6356  35c9		       29 02		      AND	#2
   6357  35cb		       85 ee		      STA	Powerup
   6358  35cd				   .
   6359  35cd							; 
   6360  35cd
   6361  35cd				   .L0520		;  bkcolors:
   6362  35cd
   6363  35cd		       a9 a5		      LDA	#<BKCOLS
   6364  35cf		       8d 50 10 	      STA	DF0LOW
   6365  35d2		       a9 0b		      LDA	#(>BKCOLS) & $0F
   6366  35d4		       8d 68 10 	      STA	DF0HI
   6367  35d7		       a9 28		      LDA	#<backgroundcolorL0520
   6368  35d9		       8d 59 10 	      STA	PARAMETER
   6369  35dc		       a9 67		      LDA	#((>backgroundcolorL0520) & $0f) | (((>backgroundcolorL0520) / 2) & $70)
   6370  35de		       8d 59 10 	      STA	PARAMETER
   6371  35e1		       a9 00		      LDA	#0
   6372  35e3		       8d 59 10 	      STA	PARAMETER
   6373  35e6		       a9 58		      LDA	#88
   6374  35e8		       8d 59 10 	      STA	PARAMETER
   6375  35eb		       a9 01		      LDA	#1
   6376  35ed		       8d 5a 10 	      STA	CALLFUNCTION
   6377  35f0				   .L0521		;  gosub __P0Explosion bank5
   6378  35f0
   6379  35f0		       85 81		      sta	temp7
   6380  35f2		       a9 56		      lda	#>(ret_point26-1)
   6381  35f4		       48		      pha
   6382  35f5		       a9 07		      lda	#<(ret_point26-1)
   6383  35f7		       48		      pha
   6384  35f8		       a9 90		      lda	#>(.__P0Explosion-1)
   6385  35fa		       48		      pha
   6386  35fb		       a9 84		      lda	#<(.__P0Explosion-1)
   6387  35fd		       48		      pha
   6388  35fe		       a5 81		      lda	temp7
   6389  3600		       48		      pha
   6390  3601		       8a		      txa
   6391  3602		       48		      pha
   6392  3603		       a2 05		      ldx	#5
   6393  3605		       4c ee df 	      jmp	BS_jsr
   6394  3608				   ret_point26
   6395  3608				   .L0522		;  Bit5_hit{5} = 0
   6396  3608
   6397  3608		       a5 ea		      LDA	Bit5_hit
   6398  360a		       29 df		      AND	#223
   6399  360c		       85 ea		      STA	Bit5_hit
   6400  360e				   .L0523		;  return
   6401  360e
   6402  360e		       ba		      tsx
   6403  360f		       b5 02		      lda	2,x	; check return address
   6404  3611		       49 56		      eor	#(>*)	; vs. current PCH
   6405  3613		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   6406  3615		       f0 03		      beq	*+5	; if equal, do normal return
   6407  3617		       4c e0 df 	      JMP	BS_return
   6408  361a		       60		      RTS
   6409  361b				   .
   6410  361b							; 
   6411  361b
   6412  361b				   .L0524		;  bank 4
   6413  361b
   6414  361b					      if	ECHO3
      2489 bytes of ROM space left in bank 3
   6415  361b					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
   6416  361b					      endif
   6417  361b		       00 01	   ECHO3      =	1
   6418  3fd4					      ORG	$3FF4-bscode_length
   6419  3fd4					      RORG	$5FF4-bscode_length
   6420  3fd4		       a2 ff	   start_bank3 ldx	#$ff
   6421  3fd6					      ifconst	FASTFETCH	; using DPC+
   6422  3fd6		       8e 58 10 	      stx	FASTFETCH
   6423  3fd9					      endif
   6424  3fd9		       9a		      txs
   6425  3fda				  -	      if	bankswitch == 64
   6426  3fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   6427  3fda					      else
   6428  3fda		       a9 18		      lda	#>(start-1)
   6429  3fdc					      endif
   6430  3fdc		       48		      pha
   6431  3fdd		       a9 e3		      lda	#<(start-1)
   6432  3fdf		       48		      pha
   6433  3fe0		       48		      pha
   6434  3fe1		       8a		      txa
   6435  3fe2		       48		      pha
   6436  3fe3		       ba		      tsx
   6437  3fe4					      if	bankswitch != 64
   6438  3fe4		       b5 04		      lda	4,x	; get high byte of return address
   6439  3fe6		       2a		      rol
   6440  3fe7		       2a		      rol
   6441  3fe8		       2a		      rol
   6442  3fe9		       2a		      rol
   6443  3fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   6444  3fec		       aa		      tax
   6445  3fed		       e8		      inx
   6446  3fee				  -	      else
   6447  3fee				  -	      lda	4,x	; get high byte of return address
   6448  3fee				  -	      tay
   6449  3fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   6450  3fee				  -	      sta	4,x
   6451  3fee				  -	      tya
   6452  3fee				  -	      lsr
   6453  3fee				  -	      lsr
   6454  3fee				  -	      lsr
   6455  3fee				  -	      lsr
   6456  3fee				  -	      tax
   6457  3fee				  -	      inx
   6458  3fee					      endif
   6459  3fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   6460  3ff1		       68		      pla
   6461  3ff2		       aa		      tax
   6462  3ff3		       68		      pla
   6463  3ff4		       60		      rts
   6464  3ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   6465  3ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   6466  3ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   6467  3ff5					      endif
   6468  3ffc					      ORG	$3FFC
   6469  3ffc					      RORG	$5FFC
   6470  3ffc		       d4 5f		      .word.w	(start_bank3 & $ffff)
   6471  3ffe		       d4 5f		      .word.w	(start_bank3 & $ffff)
   6472  4000					      ORG	$4000
   6473  4000					      RORG	$7000
   6474  4000					      repeat	129
   6475  4000		       00		      .byte.b	0
   6474  4000					      repend
   6475  4001		       00		      .byte.b	0
   6474  4001					      repend
   6475  4002		       00		      .byte.b	0
   6474  4002					      repend
   6475  4003		       00		      .byte.b	0
   6474  4003					      repend
   6475  4004		       00		      .byte.b	0
   6474  4004					      repend
   6475  4005		       00		      .byte.b	0
   6474  4005					      repend
   6475  4006		       00		      .byte.b	0
   6474  4006					      repend
   6475  4007		       00		      .byte.b	0
   6474  4007					      repend
   6475  4008		       00		      .byte.b	0
   6474  4008					      repend
   6475  4009		       00		      .byte.b	0
   6474  4009					      repend
   6475  400a		       00		      .byte.b	0
   6474  400a					      repend
   6475  400b		       00		      .byte.b	0
   6474  400b					      repend
   6475  400c		       00		      .byte.b	0
   6474  400c					      repend
   6475  400d		       00		      .byte.b	0
   6474  400d					      repend
   6475  400e		       00		      .byte.b	0
   6474  400e					      repend
   6475  400f		       00		      .byte.b	0
   6474  400f					      repend
   6475  4010		       00		      .byte.b	0
   6474  4010					      repend
   6475  4011		       00		      .byte.b	0
   6474  4011					      repend
   6475  4012		       00		      .byte.b	0
   6474  4012					      repend
   6475  4013		       00		      .byte.b	0
   6474  4013					      repend
   6475  4014		       00		      .byte.b	0
   6474  4014					      repend
   6475  4015		       00		      .byte.b	0
   6474  4015					      repend
   6475  4016		       00		      .byte.b	0
   6474  4016					      repend
   6475  4017		       00		      .byte.b	0
   6474  4017					      repend
   6475  4018		       00		      .byte.b	0
   6474  4018					      repend
   6475  4019		       00		      .byte.b	0
   6474  4019					      repend
   6475  401a		       00		      .byte.b	0
   6474  401a					      repend
   6475  401b		       00		      .byte.b	0
   6474  401b					      repend
   6475  401c		       00		      .byte.b	0
   6474  401c					      repend
   6475  401d		       00		      .byte.b	0
   6474  401d					      repend
   6475  401e		       00		      .byte.b	0
   6474  401e					      repend
   6475  401f		       00		      .byte.b	0
   6474  401f					      repend
   6475  4020		       00		      .byte.b	0
   6474  4020					      repend
   6475  4021		       00		      .byte.b	0
   6474  4021					      repend
   6475  4022		       00		      .byte.b	0
   6474  4022					      repend
   6475  4023		       00		      .byte.b	0
   6474  4023					      repend
   6475  4024		       00		      .byte.b	0
   6474  4024					      repend
   6475  4025		       00		      .byte.b	0
   6474  4025					      repend
   6475  4026		       00		      .byte.b	0
   6474  4026					      repend
   6475  4027		       00		      .byte.b	0
   6474  4027					      repend
   6475  4028		       00		      .byte.b	0
   6474  4028					      repend
   6475  4029		       00		      .byte.b	0
   6474  4029					      repend
   6475  402a		       00		      .byte.b	0
   6474  402a					      repend
   6475  402b		       00		      .byte.b	0
   6474  402b					      repend
   6475  402c		       00		      .byte.b	0
   6474  402c					      repend
   6475  402d		       00		      .byte.b	0
   6474  402d					      repend
   6475  402e		       00		      .byte.b	0
   6474  402e					      repend
   6475  402f		       00		      .byte.b	0
   6474  402f					      repend
   6475  4030		       00		      .byte.b	0
   6474  4030					      repend
   6475  4031		       00		      .byte.b	0
   6474  4031					      repend
   6475  4032		       00		      .byte.b	0
   6474  4032					      repend
   6475  4033		       00		      .byte.b	0
   6474  4033					      repend
   6475  4034		       00		      .byte.b	0
   6474  4034					      repend
   6475  4035		       00		      .byte.b	0
   6474  4035					      repend
   6475  4036		       00		      .byte.b	0
   6474  4036					      repend
   6475  4037		       00		      .byte.b	0
   6474  4037					      repend
   6475  4038		       00		      .byte.b	0
   6474  4038					      repend
   6475  4039		       00		      .byte.b	0
   6474  4039					      repend
   6475  403a		       00		      .byte.b	0
   6474  403a					      repend
   6475  403b		       00		      .byte.b	0
   6474  403b					      repend
   6475  403c		       00		      .byte.b	0
   6474  403c					      repend
   6475  403d		       00		      .byte.b	0
   6474  403d					      repend
   6475  403e		       00		      .byte.b	0
   6474  403e					      repend
   6475  403f		       00		      .byte.b	0
   6474  403f					      repend
   6475  4040		       00		      .byte.b	0
   6474  4040					      repend
   6475  4041		       00		      .byte.b	0
   6474  4041					      repend
   6475  4042		       00		      .byte.b	0
   6474  4042					      repend
   6475  4043		       00		      .byte.b	0
   6474  4043					      repend
   6475  4044		       00		      .byte.b	0
   6474  4044					      repend
   6475  4045		       00		      .byte.b	0
   6474  4045					      repend
   6475  4046		       00		      .byte.b	0
   6474  4046					      repend
   6475  4047		       00		      .byte.b	0
   6474  4047					      repend
   6475  4048		       00		      .byte.b	0
   6474  4048					      repend
   6475  4049		       00		      .byte.b	0
   6474  4049					      repend
   6475  404a		       00		      .byte.b	0
   6474  404a					      repend
   6475  404b		       00		      .byte.b	0
   6474  404b					      repend
   6475  404c		       00		      .byte.b	0
   6474  404c					      repend
   6475  404d		       00		      .byte.b	0
   6474  404d					      repend
   6475  404e		       00		      .byte.b	0
   6474  404e					      repend
   6475  404f		       00		      .byte.b	0
   6474  404f					      repend
   6475  4050		       00		      .byte.b	0
   6474  4050					      repend
   6475  4051		       00		      .byte.b	0
   6474  4051					      repend
   6475  4052		       00		      .byte.b	0
   6474  4052					      repend
   6475  4053		       00		      .byte.b	0
   6474  4053					      repend
   6475  4054		       00		      .byte.b	0
   6474  4054					      repend
   6475  4055		       00		      .byte.b	0
   6474  4055					      repend
   6475  4056		       00		      .byte.b	0
   6474  4056					      repend
   6475  4057		       00		      .byte.b	0
   6474  4057					      repend
   6475  4058		       00		      .byte.b	0
   6474  4058					      repend
   6475  4059		       00		      .byte.b	0
   6474  4059					      repend
   6475  405a		       00		      .byte.b	0
   6474  405a					      repend
   6475  405b		       00		      .byte.b	0
   6474  405b					      repend
   6475  405c		       00		      .byte.b	0
   6474  405c					      repend
   6475  405d		       00		      .byte.b	0
   6474  405d					      repend
   6475  405e		       00		      .byte.b	0
   6474  405e					      repend
   6475  405f		       00		      .byte.b	0
   6474  405f					      repend
   6475  4060		       00		      .byte.b	0
   6474  4060					      repend
   6475  4061		       00		      .byte.b	0
   6474  4061					      repend
   6475  4062		       00		      .byte.b	0
   6474  4062					      repend
   6475  4063		       00		      .byte.b	0
   6474  4063					      repend
   6475  4064		       00		      .byte.b	0
   6474  4064					      repend
   6475  4065		       00		      .byte.b	0
   6474  4065					      repend
   6475  4066		       00		      .byte.b	0
   6474  4066					      repend
   6475  4067		       00		      .byte.b	0
   6474  4067					      repend
   6475  4068		       00		      .byte.b	0
   6474  4068					      repend
   6475  4069		       00		      .byte.b	0
   6474  4069					      repend
   6475  406a		       00		      .byte.b	0
   6474  406a					      repend
   6475  406b		       00		      .byte.b	0
   6474  406b					      repend
   6475  406c		       00		      .byte.b	0
   6474  406c					      repend
   6475  406d		       00		      .byte.b	0
   6474  406d					      repend
   6475  406e		       00		      .byte.b	0
   6474  406e					      repend
   6475  406f		       00		      .byte.b	0
   6474  406f					      repend
   6475  4070		       00		      .byte.b	0
   6474  4070					      repend
   6475  4071		       00		      .byte.b	0
   6474  4071					      repend
   6475  4072		       00		      .byte.b	0
   6474  4072					      repend
   6475  4073		       00		      .byte.b	0
   6474  4073					      repend
   6475  4074		       00		      .byte.b	0
   6474  4074					      repend
   6475  4075		       00		      .byte.b	0
   6474  4075					      repend
   6475  4076		       00		      .byte.b	0
   6474  4076					      repend
   6475  4077		       00		      .byte.b	0
   6474  4077					      repend
   6475  4078		       00		      .byte.b	0
   6474  4078					      repend
   6475  4079		       00		      .byte.b	0
   6474  4079					      repend
   6475  407a		       00		      .byte.b	0
   6474  407a					      repend
   6475  407b		       00		      .byte.b	0
   6474  407b					      repend
   6475  407c		       00		      .byte.b	0
   6474  407c					      repend
   6475  407d		       00		      .byte.b	0
   6474  407d					      repend
   6475  407e		       00		      .byte.b	0
   6474  407e					      repend
   6475  407f		       00		      .byte.b	0
   6474  407f					      repend
   6475  4080		       00		      .byte.b	0
   6476  4081					      repend
   6477  4081				   .L0525		;  temp1 = temp1
   6478  4081
   6479  4081		       a5 cb		      LDA	temp1
   6480  4083		       85 cb		      STA	temp1
   6481  4085				   .
   6482  4085							; 
   6483  4085
   6484  4085				   .__FrameAnimation
   6485  4085							; __FrameAnimation
   6486  4085
   6487  4085				   .
   6488  4085							; 
   6489  4085
   6490  4085				   .L0526		;  bkcolors:
   6491  4085
   6492  4085		       a9 a5		      LDA	#<BKCOLS
   6493  4087		       8d 50 10 	      STA	DF0LOW
   6494  408a		       a9 0b		      LDA	#(>BKCOLS) & $0F
   6495  408c		       8d 68 10 	      STA	DF0HI
   6496  408f		       a9 80		      LDA	#<backgroundcolorL0526
   6497  4091		       8d 59 10 	      STA	PARAMETER
   6498  4094		       a9 67		      LDA	#((>backgroundcolorL0526) & $0f) | (((>backgroundcolorL0526) / 2) & $70)
   6499  4096		       8d 59 10 	      STA	PARAMETER
   6500  4099		       a9 00		      LDA	#0
   6501  409b		       8d 59 10 	      STA	PARAMETER
   6502  409e		       a9 58		      LDA	#88
   6503  40a0		       8d 59 10 	      STA	PARAMETER
   6504  40a3		       a9 01		      LDA	#1
   6505  40a5		       8d 5a 10 	      STA	CALLFUNCTION
   6506  40a8				   .__p0Frames
   6507  40a8							; __p0Frames
   6508  40a8
   6509  40a8				   .L0527		;  if !Bit1_missleOn{1} then if joy0fire then goto __p0Fire
   6510  40a8
   6511  40a8		       a5 ea		      LDA	Bit1_missleOn
   6512  40aa		       29 02		      AND	#2
   6513  40ac		       d0 07		      BNE	.skipL0527
   6514  40ae				   .condpart249
   6515  40ae		       24 0c		      bit	INPT4
   6516  40b0		       30 03		      BMI	.skip249then
   6517  40b2				   .condpart250
   6518  40b2		       4c dc 70 	      jmp	.__p0Fire
   6519  40b5
   6520  40b5				   .skip249then
   6521  40b5				   .skipL0527
   6522  40b5				   .L0528		;  if joy0left then goto __P0BlockLeft
   6523  40b5
   6524  40b5		       2c 80 02 	      bit	SWCHA
   6525  40b8		       70 03		      BVS	.skipL0528
   6526  40ba				   .condpart251
   6527  40ba		       4c f3 70 	      jmp	.__P0BlockLeft
   6528  40bd
   6529  40bd				   .skipL0528
   6530  40bd				   .L0529		;  if joy0right then goto __P0BlockRigth
   6531  40bd
   6532  40bd		       2c 80 02 	      bit	SWCHA
   6533  40c0		       30 03		      BMI	.skipL0529
   6534  40c2				   .condpart252
   6535  40c2		       4c 0a 71 	      jmp	.__P0BlockRigth
   6536  40c5
   6537  40c5				   .skipL0529
   6538  40c5				   .L0530		;  player0:
   6539  40c5
   6540  40c5		       a2 d8		      LDX	#<playerL0530_0
   6541  40c7		       86 bd		      STX	player0pointerlo
   6542  40c9		       a9 67		      LDA	#((>playerL0530_0) & $0f) | (((>playerL0530_0) / 2) & $70)
   6543  40cb		       85 be		      STA	player0pointerhi
   6544  40cd		       a9 0f		      LDA	#15
   6545  40cf		       85 a5		      STA	player0height
   6546  40d1				   .L0531		;  player0color:
   6547  40d1
   6548  40d1		       a2 e7		      LDX	#<playercolorL0531_0
   6549  40d3		       86 a3		      STX	player0color
   6550  40d5		       a9 67		      LDA	#((>playercolorL0531_0) & $0f) | (((>playercolorL0531_0) / 2) & $70)
   6551  40d7		       85 a4		      STA	player0color+1
   6552  40d9				   .L0532		;  goto __p0Damagecolors
   6553  40d9
   6554  40d9		       4c 1e 71 	      jmp	.__p0Damagecolors
   6555  40dc
   6556  40dc				   .
   6557  40dc							; 
   6558  40dc
   6559  40dc				   .__p0Fire
   6560  40dc							; __p0Fire
   6561  40dc
   6562  40dc				   .L0533		;  player0:
   6563  40dc
   6564  40dc		       a2 f6		      LDX	#<playerL0533_0
   6565  40de		       86 bd		      STX	player0pointerlo
   6566  40e0		       a9 67		      LDA	#((>playerL0533_0) & $0f) | (((>playerL0533_0) / 2) & $70)
   6567  40e2		       85 be		      STA	player0pointerhi
   6568  40e4		       a9 0f		      LDA	#15
   6569  40e6		       85 a5		      STA	player0height
   6570  40e8				   .L0534		;  player0color:
   6571  40e8
   6572  40e8		       a2 05		      LDX	#<playercolorL0534_0
   6573  40ea		       86 a3		      STX	player0color
   6574  40ec		       a9 68		      LDA	#((>playercolorL0534_0) & $0f) | (((>playercolorL0534_0) / 2) & $70)
   6575  40ee		       85 a4		      STA	player0color+1
   6576  40f0				   .L0535		;  goto __p0Damagecolors
   6577  40f0
   6578  40f0		       4c 1e 71 	      jmp	.__p0Damagecolors
   6579  40f3
   6580  40f3				   .__P0BlockLeft
   6581  40f3							; __P0BlockLeft
   6582  40f3
   6583  40f3				   .L0536		;  player0:
   6584  40f3
   6585  40f3		       a2 14		      LDX	#<playerL0536_0
   6586  40f5		       86 bd		      STX	player0pointerlo
   6587  40f7		       a9 68		      LDA	#((>playerL0536_0) & $0f) | (((>playerL0536_0) / 2) & $70)
   6588  40f9		       85 be		      STA	player0pointerhi
   6589  40fb		       a9 0f		      LDA	#15
   6590  40fd		       85 a5		      STA	player0height
   6591  40ff				   .L0537		;  player0color:
   6592  40ff
   6593  40ff		       a2 23		      LDX	#<playercolorL0537_0
   6594  4101		       86 a3		      STX	player0color
   6595  4103		       a9 68		      LDA	#((>playercolorL0537_0) & $0f) | (((>playercolorL0537_0) / 2) & $70)
   6596  4105		       85 a4		      STA	player0color+1
   6597  4107				   .L0538		;  goto __p0Damagecolors
   6598  4107
   6599  4107		       4c 1e 71 	      jmp	.__p0Damagecolors
   6600  410a
   6601  410a				   .
   6602  410a							; 
   6603  410a
   6604  410a				   .__P0BlockRigth
   6605  410a							; __P0BlockRigth
   6606  410a
   6607  410a				   .L0539		;  player0:
   6608  410a
   6609  410a		       a2 32		      LDX	#<playerL0539_0
   6610  410c		       86 bd		      STX	player0pointerlo
   6611  410e		       a9 68		      LDA	#((>playerL0539_0) & $0f) | (((>playerL0539_0) / 2) & $70)
   6612  4110		       85 be		      STA	player0pointerhi
   6613  4112		       a9 0f		      LDA	#15
   6614  4114		       85 a5		      STA	player0height
   6615  4116				   .L0540		;  player0color:
   6616  4116
   6617  4116		       a2 41		      LDX	#<playercolorL0540_0
   6618  4118		       86 a3		      STX	player0color
   6619  411a		       a9 68		      LDA	#((>playercolorL0540_0) & $0f) | (((>playercolorL0540_0) / 2) & $70)
   6620  411c		       85 a4		      STA	player0color+1
   6621  411e				   .
   6622  411e							; 
   6623  411e
   6624  411e				   .__p0Damagecolors
   6625  411e							; __p0Damagecolors
   6626  411e
   6627  411e				   .
   6628  411e							; 
   6629  411e
   6630  411e				   .L0541		;  if PlayerDamage  = 1  &&  EnemyHit	<  1 then player0color:
   6631  411e
   6632  411e		       a5 dd		      LDA	PlayerDamage
   6633  4120		       c9 01		      CMP	#1
   6634  4122		       d0 0e		      BNE	.skipL0541
   6635  4124				   .condpart253
   6636  4124		       a5 d9		      LDA	EnemyHit
   6637  4126		       c9 01		      CMP	#1
   6638  4128		       b0 08		      BCS	.skip253then
   6639  412a				   .condpart254
   6640  412a		       a2 50		      LDX	#<playercolor254then_0
   6641  412c		       86 a3		      STX	player0color
   6642  412e		       a9 68		      LDA	#((>playercolor254then_0) & $0f) | (((>playercolor254then_0) / 2) & $70)
   6643  4130		       85 a4		      STA	player0color+1
   6644  4132				   .skip253then
   6645  4132				   .skipL0541
   6646  4132				   .
   6647  4132							; 
   6648  4132
   6649  4132				   .L0542		;  if PlayerDamage  = 2 then player0color:
   6650  4132
   6651  4132		       a5 dd		      LDA	PlayerDamage
   6652  4134		       c9 02		      CMP	#2
   6653  4136		       d0 08		      BNE	.skipL0542
   6654  4138				   .condpart255
   6655  4138		       a2 60		      LDX	#<playercolor255then_0
   6656  413a		       86 a3		      STX	player0color
   6657  413c		       a9 68		      LDA	#((>playercolor255then_0) & $0f) | (((>playercolor255then_0) / 2) & $70)
   6658  413e		       85 a4		      STA	player0color+1
   6659  4140				   .skipL0542
   6660  4140				   .
   6661  4140							; 
   6662  4140
   6663  4140				   .L0543		;  if frame  =  10  &&  EnemyHit  <  1 then player2:
   6664  4140
   6665  4140		       a5 d6		      LDA	frame
   6666  4142		       c9 0a		      CMP	#10
   6667  4144		       d0 1e		      BNE	.skipL0543
   6668  4146				   .condpart256
   6669  4146		       a5 d9		      LDA	EnemyHit
   6670  4148		       c9 01		      CMP	#1
   6671  414a		       b0 18		      BCS	.skip256then
   6672  414c				   .condpart257
   6673  414c		       a9 e4		      lda	#<(playerpointers+2)
   6674  414e		       8d 50 10 	      sta	DF0LOW
   6675  4151		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   6676  4153		       8d 68 10 	      sta	DF0HI
   6677  4156		       a2 72		      LDX	#<player257then_2
   6678  4158		       8e 78 10 	      STX	DF0WRITE
   6679  415b		       a9 68		      LDA	#((>player257then_2) & $0f) | (((>player257then_2) / 2) & $70)
   6680  415d		       8d 78 10 	      STA	DF0WRITE
   6681  4160		       a9 08		      LDA	#8
   6682  4162		       85 a7		      STA	player2height
   6683  4164				   .skip256then
   6684  4164				   .skipL0543
   6685  4164				   .L0544		;  if frame  =  10  &&  EnemyHit  =  2 then player2:
   6686  4164
   6687  4164		       a5 d6		      LDA	frame
   6688  4166		       c9 0a		      CMP	#10
   6689  4168		       d0 1e		      BNE	.skipL0544
   6690  416a				   .condpart258
   6691  416a		       a5 d9		      LDA	EnemyHit
   6692  416c		       c9 02		      CMP	#2
   6693  416e		       d0 18		      BNE	.skip258then
   6694  4170				   .condpart259
   6695  4170		       a9 e4		      lda	#<(playerpointers+2)
   6696  4172		       8d 50 10 	      sta	DF0LOW
   6697  4175		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   6698  4177		       8d 68 10 	      sta	DF0HI
   6699  417a		       a2 7a		      LDX	#<player259then_2
   6700  417c		       8e 78 10 	      STX	DF0WRITE
   6701  417f		       a9 68		      LDA	#((>player259then_2) & $0f) | (((>player259then_2) / 2) & $70)
   6702  4181		       8d 78 10 	      STA	DF0WRITE
   6703  4184		       a9 08		      LDA	#8
   6704  4186		       85 a7		      STA	player2height
   6705  4188				   .skip258then
   6706  4188				   .skipL0544
   6707  4188				   .L0545		;  if frame  =  10  &&  EnemyHit  <  1 then player3:
   6708  4188
   6709  4188		       a5 d6		      LDA	frame
   6710  418a		       c9 0a		      CMP	#10
   6711  418c		       d0 1e		      BNE	.skipL0545
   6712  418e				   .condpart260
   6713  418e		       a5 d9		      LDA	EnemyHit
   6714  4190		       c9 01		      CMP	#1
   6715  4192		       b0 18		      BCS	.skip260then
   6716  4194				   .condpart261
   6717  4194		       a9 e6		      lda	#<(playerpointers+4)
   6718  4196		       8d 50 10 	      sta	DF0LOW
   6719  4199		       a9 01		      lda	#(>(playerpointers+4)) & $0F
   6720  419b		       8d 68 10 	      sta	DF0HI
   6721  419e		       a2 82		      LDX	#<player261then_3
   6722  41a0		       8e 78 10 	      STX	DF0WRITE
   6723  41a3		       a9 68		      LDA	#((>player261then_3) & $0f) | (((>player261then_3) / 2) & $70)
   6724  41a5		       8d 78 10 	      STA	DF0WRITE
   6725  41a8		       a9 08		      LDA	#8
   6726  41aa		       85 a8		      STA	player3height
   6727  41ac				   .skip260then
   6728  41ac				   .skipL0545
   6729  41ac				   .L0546		;  if frame  =  10  &&  EnemyHit  = 3 then player3:
   6730  41ac
   6731  41ac		       a5 d6		      LDA	frame
   6732  41ae		       c9 0a		      CMP	#10
   6733  41b0		       d0 1e		      BNE	.skipL0546
   6734  41b2				   .condpart262
   6735  41b2		       a5 d9		      LDA	EnemyHit
   6736  41b4		       c9 03		      CMP	#3
   6737  41b6		       d0 18		      BNE	.skip262then
   6738  41b8				   .condpart263
   6739  41b8		       a9 e6		      lda	#<(playerpointers+4)
   6740  41ba		       8d 50 10 	      sta	DF0LOW
   6741  41bd		       a9 01		      lda	#(>(playerpointers+4)) & $0F
   6742  41bf		       8d 68 10 	      sta	DF0HI
   6743  41c2		       a2 8a		      LDX	#<player263then_3
   6744  41c4		       8e 78 10 	      STX	DF0WRITE
   6745  41c7		       a9 68		      LDA	#((>player263then_3) & $0f) | (((>player263then_3) / 2) & $70)
   6746  41c9		       8d 78 10 	      STA	DF0WRITE
   6747  41cc		       a9 08		      LDA	#8
   6748  41ce		       85 a8		      STA	player3height
   6749  41d0				   .skip262then
   6750  41d0				   .skipL0546
   6751  41d0				   .L0547		;  if frame  =  10  &&  EnemyHit  <  1 then player1:
   6752  41d0
   6753  41d0		       a5 d6		      LDA	frame
   6754  41d2		       c9 0a		      CMP	#10
   6755  41d4		       d0 1e		      BNE	.skipL0547
   6756  41d6				   .condpart264
   6757  41d6		       a5 d9		      LDA	EnemyHit
   6758  41d8		       c9 01		      CMP	#1
   6759  41da		       b0 18		      BCS	.skip264then
   6760  41dc				   .condpart265
   6761  41dc		       a9 e2		      lda	#<(playerpointers+0)
   6762  41de		       8d 50 10 	      sta	DF0LOW
   6763  41e1		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   6764  41e3		       8d 68 10 	      sta	DF0HI
   6765  41e6		       a2 92		      LDX	#<player265then_1
   6766  41e8		       8e 78 10 	      STX	DF0WRITE
   6767  41eb		       a9 68		      LDA	#((>player265then_1) & $0f) | (((>player265then_1) / 2) & $70)
   6768  41ed		       8d 78 10 	      STA	DF0WRITE
   6769  41f0		       a9 08		      LDA	#8
   6770  41f2		       85 a6		      STA	player1height
   6771  41f4				   .skip264then
   6772  41f4				   .skipL0547
   6773  41f4				   .L0548		;  if frame  =  10  &&  EnemyHit  =  1 then player1:
   6774  41f4
   6775  41f4		       a5 d6		      LDA	frame
   6776  41f6		       c9 0a		      CMP	#10
   6777  41f8		       d0 1e		      BNE	.skipL0548
   6778  41fa				   .condpart266
   6779  41fa		       a5 d9		      LDA	EnemyHit
   6780  41fc		       c9 01		      CMP	#1
   6781  41fe		       d0 18		      BNE	.skip266then
   6782  4200				   .condpart267
   6783  4200		       a9 e2		      lda	#<(playerpointers+0)
   6784  4202		       8d 50 10 	      sta	DF0LOW
   6785  4205		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   6786  4207		       8d 68 10 	      sta	DF0HI
   6787  420a		       a2 9a		      LDX	#<player267then_1
   6788  420c		       8e 78 10 	      STX	DF0WRITE
   6789  420f		       a9 68		      LDA	#((>player267then_1) & $0f) | (((>player267then_1) / 2) & $70)
   6790  4211		       8d 78 10 	      STA	DF0WRITE
   6791  4214		       a9 08		      LDA	#8
   6792  4216		       85 a6		      STA	player1height
   6793  4218				   .skip266then
   6794  4218				   .skipL0548
   6795  4218				   .L0549		;  if frame  =  10 then player2color:
   6796  4218
   6797  4218		       a5 d6		      LDA	frame
   6798  421a		       c9 0a		      CMP	#10
   6799  421c		       d0 14		      BNE	.skipL0549
   6800  421e				   .condpart268
   6801  421e		       a9 f6		      lda	#<(playerpointers+20)
   6802  4220		       8d 50 10 	      sta	DF0LOW
   6803  4223		       a9 01		      lda	#(>(playerpointers+20)) & $0F
   6804  4225		       8d 68 10 	      sta	DF0HI
   6805  4228		       a2 a2		      LDX	#<playercolor268then_2
   6806  422a		       8e 78 10 	      STX	DF0WRITE
   6807  422d		       a9 68		      LDA	#((>playercolor268then_2) & $0f) | (((>playercolor268then_2) / 2) & $70)
   6808  422f		       8d 78 10 	      STA	DF0WRITE
   6809  4232				   .skipL0549
   6810  4232				   .L0550		;  if frame  =  10 then player3color:
   6811  4232
   6812  4232		       a5 d6		      LDA	frame
   6813  4234		       c9 0a		      CMP	#10
   6814  4236		       d0 14		      BNE	.skipL0550
   6815  4238				   .condpart269
   6816  4238		       a9 f8		      lda	#<(playerpointers+22)
   6817  423a		       8d 50 10 	      sta	DF0LOW
   6818  423d		       a9 01		      lda	#(>(playerpointers+22)) & $0F
   6819  423f		       8d 68 10 	      sta	DF0HI
   6820  4242		       a2 aa		      LDX	#<playercolor269then_3
   6821  4244		       8e 78 10 	      STX	DF0WRITE
   6822  4247		       a9 68		      LDA	#((>playercolor269then_3) & $0f) | (((>playercolor269then_3) / 2) & $70)
   6823  4249		       8d 78 10 	      STA	DF0WRITE
   6824  424c				   .skipL0550
   6825  424c				   .L0551		;  if frame  =  10 then player1color:
   6826  424c
   6827  424c		       a5 d6		      LDA	frame
   6828  424e		       c9 0a		      CMP	#10
   6829  4250		       d0 14		      BNE	.skipL0551
   6830  4252				   .condpart270
   6831  4252		       a9 f4		      lda	#<(playerpointers+18)
   6832  4254		       8d 50 10 	      sta	DF0LOW
   6833  4257		       a9 01		      lda	#(>(playerpointers+18)) & $0F
   6834  4259		       8d 68 10 	      sta	DF0HI
   6835  425c		       a2 b2		      LDX	#<playercolor270then_1
   6836  425e		       8e 78 10 	      STX	DF0WRITE
   6837  4261		       a9 68		      LDA	#((>playercolor270then_1) & $0f) | (((>playercolor270then_1) / 2) & $70)
   6838  4263		       8d 78 10 	      STA	DF0WRITE
   6839  4266				   .skipL0551
   6840  4266				   .L0552		;  if frame  =  20  &&  EnemyHit  <  1 then player2:
   6841  4266
   6842  4266		       a5 d6		      LDA	frame
   6843  4268		       c9 14		      CMP	#20
   6844  426a		       d0 1e		      BNE	.skipL0552
   6845  426c				   .condpart271
   6846  426c		       a5 d9		      LDA	EnemyHit
   6847  426e		       c9 01		      CMP	#1
   6848  4270		       b0 18		      BCS	.skip271then
   6849  4272				   .condpart272
   6850  4272		       a9 e4		      lda	#<(playerpointers+2)
   6851  4274		       8d 50 10 	      sta	DF0LOW
   6852  4277		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   6853  4279		       8d 68 10 	      sta	DF0HI
   6854  427c		       a2 ba		      LDX	#<player272then_2
   6855  427e		       8e 78 10 	      STX	DF0WRITE
   6856  4281		       a9 68		      LDA	#((>player272then_2) & $0f) | (((>player272then_2) / 2) & $70)
   6857  4283		       8d 78 10 	      STA	DF0WRITE
   6858  4286		       a9 08		      LDA	#8
   6859  4288		       85 a7		      STA	player2height
   6860  428a				   .skip271then
   6861  428a				   .skipL0552
   6862  428a				   .L0553		;  if frame  =  20  &&  EnemyHit  = 2 then player2:
   6863  428a
   6864  428a		       a5 d6		      LDA	frame
   6865  428c		       c9 14		      CMP	#20
   6866  428e		       d0 1e		      BNE	.skipL0553
   6867  4290				   .condpart273
   6868  4290		       a5 d9		      LDA	EnemyHit
   6869  4292		       c9 02		      CMP	#2
   6870  4294		       d0 18		      BNE	.skip273then
   6871  4296				   .condpart274
   6872  4296		       a9 e4		      lda	#<(playerpointers+2)
   6873  4298		       8d 50 10 	      sta	DF0LOW
   6874  429b		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   6875  429d		       8d 68 10 	      sta	DF0HI
   6876  42a0		       a2 c2		      LDX	#<player274then_2
   6877  42a2		       8e 78 10 	      STX	DF0WRITE
   6878  42a5		       a9 68		      LDA	#((>player274then_2) & $0f) | (((>player274then_2) / 2) & $70)
   6879  42a7		       8d 78 10 	      STA	DF0WRITE
   6880  42aa		       a9 08		      LDA	#8
   6881  42ac		       85 a7		      STA	player2height
   6882  42ae				   .skip273then
   6883  42ae				   .skipL0553
   6884  42ae				   .L0554		;  if frame  =  20  &&  EnemyHit  <  1 then player3:
   6885  42ae
   6886  42ae		       a5 d6		      LDA	frame
   6887  42b0		       c9 14		      CMP	#20
   6888  42b2		       d0 1e		      BNE	.skipL0554
   6889  42b4				   .condpart275
   6890  42b4		       a5 d9		      LDA	EnemyHit
   6891  42b6		       c9 01		      CMP	#1
   6892  42b8		       b0 18		      BCS	.skip275then
   6893  42ba				   .condpart276
   6894  42ba		       a9 e6		      lda	#<(playerpointers+4)
   6895  42bc		       8d 50 10 	      sta	DF0LOW
   6896  42bf		       a9 01		      lda	#(>(playerpointers+4)) & $0F
   6897  42c1		       8d 68 10 	      sta	DF0HI
   6898  42c4		       a2 ca		      LDX	#<player276then_3
   6899  42c6		       8e 78 10 	      STX	DF0WRITE
   6900  42c9		       a9 68		      LDA	#((>player276then_3) & $0f) | (((>player276then_3) / 2) & $70)
   6901  42cb		       8d 78 10 	      STA	DF0WRITE
   6902  42ce		       a9 08		      LDA	#8
   6903  42d0		       85 a8		      STA	player3height
   6904  42d2				   .skip275then
   6905  42d2				   .skipL0554
   6906  42d2				   .L0555		;  if frame  =  20  &&  EnemyHit  = 3 then player3:
   6907  42d2
   6908  42d2		       a5 d6		      LDA	frame
   6909  42d4		       c9 14		      CMP	#20
   6910  42d6		       d0 1e		      BNE	.skipL0555
   6911  42d8				   .condpart277
   6912  42d8		       a5 d9		      LDA	EnemyHit
   6913  42da		       c9 03		      CMP	#3
   6914  42dc		       d0 18		      BNE	.skip277then
   6915  42de				   .condpart278
   6916  42de		       a9 e6		      lda	#<(playerpointers+4)
   6917  42e0		       8d 50 10 	      sta	DF0LOW
   6918  42e3		       a9 01		      lda	#(>(playerpointers+4)) & $0F
   6919  42e5		       8d 68 10 	      sta	DF0HI
   6920  42e8		       a2 d2		      LDX	#<player278then_3
   6921  42ea		       8e 78 10 	      STX	DF0WRITE
   6922  42ed		       a9 68		      LDA	#((>player278then_3) & $0f) | (((>player278then_3) / 2) & $70)
   6923  42ef		       8d 78 10 	      STA	DF0WRITE
   6924  42f2		       a9 08		      LDA	#8
   6925  42f4		       85 a8		      STA	player3height
   6926  42f6				   .skip277then
   6927  42f6				   .skipL0555
   6928  42f6				   .L0556		;  if frame  =  20  &&  EnemyHit  <  1 then player1:
   6929  42f6
   6930  42f6		       a5 d6		      LDA	frame
   6931  42f8		       c9 14		      CMP	#20
   6932  42fa		       d0 1e		      BNE	.skipL0556
   6933  42fc				   .condpart279
   6934  42fc		       a5 d9		      LDA	EnemyHit
   6935  42fe		       c9 01		      CMP	#1
   6936  4300		       b0 18		      BCS	.skip279then
   6937  4302				   .condpart280
   6938  4302		       a9 e2		      lda	#<(playerpointers+0)
   6939  4304		       8d 50 10 	      sta	DF0LOW
   6940  4307		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   6941  4309		       8d 68 10 	      sta	DF0HI
   6942  430c		       a2 da		      LDX	#<player280then_1
   6943  430e		       8e 78 10 	      STX	DF0WRITE
   6944  4311		       a9 68		      LDA	#((>player280then_1) & $0f) | (((>player280then_1) / 2) & $70)
   6945  4313		       8d 78 10 	      STA	DF0WRITE
   6946  4316		       a9 08		      LDA	#8
   6947  4318		       85 a6		      STA	player1height
   6948  431a				   .skip279then
   6949  431a				   .skipL0556
   6950  431a				   .L0557		;  if frame  =  20  &&  EnemyHit  =  1 then player1:
   6951  431a
   6952  431a		       a5 d6		      LDA	frame
   6953  431c		       c9 14		      CMP	#20
   6954  431e		       d0 1e		      BNE	.skipL0557
   6955  4320				   .condpart281
   6956  4320		       a5 d9		      LDA	EnemyHit
   6957  4322		       c9 01		      CMP	#1
   6958  4324		       d0 18		      BNE	.skip281then
   6959  4326				   .condpart282
   6960  4326		       a9 e2		      lda	#<(playerpointers+0)
   6961  4328		       8d 50 10 	      sta	DF0LOW
   6962  432b		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   6963  432d		       8d 68 10 	      sta	DF0HI
   6964  4330		       a2 e2		      LDX	#<player282then_1
   6965  4332		       8e 78 10 	      STX	DF0WRITE
   6966  4335		       a9 68		      LDA	#((>player282then_1) & $0f) | (((>player282then_1) / 2) & $70)
   6967  4337		       8d 78 10 	      STA	DF0WRITE
   6968  433a		       a9 08		      LDA	#8
   6969  433c		       85 a6		      STA	player1height
   6970  433e				   .skip281then
   6971  433e				   .skipL0557
   6972  433e				   .L0558		;  if frame  =  20 then player2color:
   6973  433e
   6974  433e		       a5 d6		      LDA	frame
   6975  4340		       c9 14		      CMP	#20
   6976  4342		       d0 14		      BNE	.skipL0558
   6977  4344				   .condpart283
   6978  4344		       a9 f6		      lda	#<(playerpointers+20)
   6979  4346		       8d 50 10 	      sta	DF0LOW
   6980  4349		       a9 01		      lda	#(>(playerpointers+20)) & $0F
   6981  434b		       8d 68 10 	      sta	DF0HI
   6982  434e		       a2 ea		      LDX	#<playercolor283then_2
   6983  4350		       8e 78 10 	      STX	DF0WRITE
   6984  4353		       a9 68		      LDA	#((>playercolor283then_2) & $0f) | (((>playercolor283then_2) / 2) & $70)
   6985  4355		       8d 78 10 	      STA	DF0WRITE
   6986  4358				   .skipL0558
   6987  4358				   .L0559		;  if frame  =  20 then player3color:
   6988  4358
   6989  4358		       a5 d6		      LDA	frame
   6990  435a		       c9 14		      CMP	#20
   6991  435c		       d0 14		      BNE	.skipL0559
   6992  435e				   .condpart284
   6993  435e		       a9 f8		      lda	#<(playerpointers+22)
   6994  4360		       8d 50 10 	      sta	DF0LOW
   6995  4363		       a9 01		      lda	#(>(playerpointers+22)) & $0F
   6996  4365		       8d 68 10 	      sta	DF0HI
   6997  4368		       a2 f2		      LDX	#<playercolor284then_3
   6998  436a		       8e 78 10 	      STX	DF0WRITE
   6999  436d		       a9 68		      LDA	#((>playercolor284then_3) & $0f) | (((>playercolor284then_3) / 2) & $70)
   7000  436f		       8d 78 10 	      STA	DF0WRITE
   7001  4372				   .skipL0559
   7002  4372				   .L0560		;  if frame  =  20 then player1color:
   7003  4372
   7004  4372		       a5 d6		      LDA	frame
   7005  4374		       c9 14		      CMP	#20
   7006  4376		       d0 14		      BNE	.skipL0560
   7007  4378				   .condpart285
   7008  4378		       a9 f4		      lda	#<(playerpointers+18)
   7009  437a		       8d 50 10 	      sta	DF0LOW
   7010  437d		       a9 01		      lda	#(>(playerpointers+18)) & $0F
   7011  437f		       8d 68 10 	      sta	DF0HI
   7012  4382		       a2 fa		      LDX	#<playercolor285then_1
   7013  4384		       8e 78 10 	      STX	DF0WRITE
   7014  4387		       a9 68		      LDA	#((>playercolor285then_1) & $0f) | (((>playercolor285then_1) / 2) & $70)
   7015  4389		       8d 78 10 	      STA	DF0WRITE
   7016  438c				   .skipL0560
   7017  438c				   .L0561		;  if frame  =  30  &&  EnemyHit  <  1 then player2:
   7018  438c
   7019  438c		       a5 d6		      LDA	frame
   7020  438e		       c9 1e		      CMP	#30
   7021  4390		       d0 1e		      BNE	.skipL0561
   7022  4392				   .condpart286
   7023  4392		       a5 d9		      LDA	EnemyHit
   7024  4394		       c9 01		      CMP	#1
   7025  4396		       b0 18		      BCS	.skip286then
   7026  4398				   .condpart287
   7027  4398		       a9 e4		      lda	#<(playerpointers+2)
   7028  439a		       8d 50 10 	      sta	DF0LOW
   7029  439d		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   7030  439f		       8d 68 10 	      sta	DF0HI
   7031  43a2		       a2 02		      LDX	#<player287then_2
   7032  43a4		       8e 78 10 	      STX	DF0WRITE
   7033  43a7		       a9 69		      LDA	#((>player287then_2) & $0f) | (((>player287then_2) / 2) & $70)
   7034  43a9		       8d 78 10 	      STA	DF0WRITE
   7035  43ac		       a9 08		      LDA	#8
   7036  43ae		       85 a7		      STA	player2height
   7037  43b0				   .skip286then
   7038  43b0				   .skipL0561
   7039  43b0				   .L0562		;  if frame  =  30  &&  EnemyHit  =  2 then player2:
   7040  43b0
   7041  43b0		       a5 d6		      LDA	frame
   7042  43b2		       c9 1e		      CMP	#30
   7043  43b4		       d0 1e		      BNE	.skipL0562
   7044  43b6				   .condpart288
   7045  43b6		       a5 d9		      LDA	EnemyHit
   7046  43b8		       c9 02		      CMP	#2
   7047  43ba		       d0 18		      BNE	.skip288then
   7048  43bc				   .condpart289
   7049  43bc		       a9 e4		      lda	#<(playerpointers+2)
   7050  43be		       8d 50 10 	      sta	DF0LOW
   7051  43c1		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   7052  43c3		       8d 68 10 	      sta	DF0HI
   7053  43c6		       a2 0a		      LDX	#<player289then_2
   7054  43c8		       8e 78 10 	      STX	DF0WRITE
   7055  43cb		       a9 69		      LDA	#((>player289then_2) & $0f) | (((>player289then_2) / 2) & $70)
   7056  43cd		       8d 78 10 	      STA	DF0WRITE
   7057  43d0		       a9 08		      LDA	#8
   7058  43d2		       85 a7		      STA	player2height
   7059  43d4				   .skip288then
   7060  43d4				   .skipL0562
   7061  43d4				   .L0563		;  if frame  =  30 then player3:
   7062  43d4
   7063  43d4		       a5 d6		      LDA	frame
   7064  43d6		       c9 1e		      CMP	#30
   7065  43d8		       d0 18		      BNE	.skipL0563
   7066  43da				   .condpart290
   7067  43da		       a9 e6		      lda	#<(playerpointers+4)
   7068  43dc		       8d 50 10 	      sta	DF0LOW
   7069  43df		       a9 01		      lda	#(>(playerpointers+4)) & $0F
   7070  43e1		       8d 68 10 	      sta	DF0HI
   7071  43e4		       a2 12		      LDX	#<player290then_3
   7072  43e6		       8e 78 10 	      STX	DF0WRITE
   7073  43e9		       a9 69		      LDA	#((>player290then_3) & $0f) | (((>player290then_3) / 2) & $70)
   7074  43eb		       8d 78 10 	      STA	DF0WRITE
   7075  43ee		       a9 08		      LDA	#8
   7076  43f0		       85 a8		      STA	player3height
   7077  43f2				   .skipL0563
   7078  43f2				   .L0564		;  if frame  =  30  &&  EnemyHit  <  1 then player1:
   7079  43f2
   7080  43f2		       a5 d6		      LDA	frame
   7081  43f4		       c9 1e		      CMP	#30
   7082  43f6		       d0 1e		      BNE	.skipL0564
   7083  43f8				   .condpart291
   7084  43f8		       a5 d9		      LDA	EnemyHit
   7085  43fa		       c9 01		      CMP	#1
   7086  43fc		       b0 18		      BCS	.skip291then
   7087  43fe				   .condpart292
   7088  43fe		       a9 e2		      lda	#<(playerpointers+0)
   7089  4400		       8d 50 10 	      sta	DF0LOW
   7090  4403		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   7091  4405		       8d 68 10 	      sta	DF0HI
   7092  4408		       a2 1a		      LDX	#<player292then_1
   7093  440a		       8e 78 10 	      STX	DF0WRITE
   7094  440d		       a9 69		      LDA	#((>player292then_1) & $0f) | (((>player292then_1) / 2) & $70)
   7095  440f		       8d 78 10 	      STA	DF0WRITE
   7096  4412		       a9 08		      LDA	#8
   7097  4414		       85 a6		      STA	player1height
   7098  4416				   .skip291then
   7099  4416				   .skipL0564
   7100  4416				   .L0565		;  if frame  =  30  &&  EnemyHit  =  1 then player1:
   7101  4416
   7102  4416		       a5 d6		      LDA	frame
   7103  4418		       c9 1e		      CMP	#30
   7104  441a		       d0 1e		      BNE	.skipL0565
   7105  441c				   .condpart293
   7106  441c		       a5 d9		      LDA	EnemyHit
   7107  441e		       c9 01		      CMP	#1
   7108  4420		       d0 18		      BNE	.skip293then
   7109  4422				   .condpart294
   7110  4422		       a9 e2		      lda	#<(playerpointers+0)
   7111  4424		       8d 50 10 	      sta	DF0LOW
   7112  4427		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   7113  4429		       8d 68 10 	      sta	DF0HI
   7114  442c		       a2 22		      LDX	#<player294then_1
   7115  442e		       8e 78 10 	      STX	DF0WRITE
   7116  4431		       a9 69		      LDA	#((>player294then_1) & $0f) | (((>player294then_1) / 2) & $70)
   7117  4433		       8d 78 10 	      STA	DF0WRITE
   7118  4436		       a9 08		      LDA	#8
   7119  4438		       85 a6		      STA	player1height
   7120  443a				   .skip293then
   7121  443a				   .skipL0565
   7122  443a				   .L0566		;  if frame  =  30 then player2color:
   7123  443a
   7124  443a		       a5 d6		      LDA	frame
   7125  443c		       c9 1e		      CMP	#30
   7126  443e		       d0 14		      BNE	.skipL0566
   7127  4440				   .condpart295
   7128  4440		       a9 f6		      lda	#<(playerpointers+20)
   7129  4442		       8d 50 10 	      sta	DF0LOW
   7130  4445		       a9 01		      lda	#(>(playerpointers+20)) & $0F
   7131  4447		       8d 68 10 	      sta	DF0HI
   7132  444a		       a2 2a		      LDX	#<playercolor295then_2
   7133  444c		       8e 78 10 	      STX	DF0WRITE
   7134  444f		       a9 69		      LDA	#((>playercolor295then_2) & $0f) | (((>playercolor295then_2) / 2) & $70)
   7135  4451		       8d 78 10 	      STA	DF0WRITE
   7136  4454				   .skipL0566
   7137  4454				   .L0567		;  if frame  =  30 then player3color:
   7138  4454
   7139  4454		       a5 d6		      LDA	frame
   7140  4456		       c9 1e		      CMP	#30
   7141  4458		       d0 14		      BNE	.skipL0567
   7142  445a				   .condpart296
   7143  445a		       a9 f8		      lda	#<(playerpointers+22)
   7144  445c		       8d 50 10 	      sta	DF0LOW
   7145  445f		       a9 01		      lda	#(>(playerpointers+22)) & $0F
   7146  4461		       8d 68 10 	      sta	DF0HI
   7147  4464		       a2 32		      LDX	#<playercolor296then_3
   7148  4466		       8e 78 10 	      STX	DF0WRITE
   7149  4469		       a9 69		      LDA	#((>playercolor296then_3) & $0f) | (((>playercolor296then_3) / 2) & $70)
   7150  446b		       8d 78 10 	      STA	DF0WRITE
   7151  446e				   .skipL0567
   7152  446e				   .L0568		;  if frame  =  30 then player1color:
   7153  446e
   7154  446e		       a5 d6		      LDA	frame
   7155  4470		       c9 1e		      CMP	#30
   7156  4472		       d0 14		      BNE	.skipL0568
   7157  4474				   .condpart297
   7158  4474		       a9 f4		      lda	#<(playerpointers+18)
   7159  4476		       8d 50 10 	      sta	DF0LOW
   7160  4479		       a9 01		      lda	#(>(playerpointers+18)) & $0F
   7161  447b		       8d 68 10 	      sta	DF0HI
   7162  447e		       a2 3a		      LDX	#<playercolor297then_1
   7163  4480		       8e 78 10 	      STX	DF0WRITE
   7164  4483		       a9 69		      LDA	#((>playercolor297then_1) & $0f) | (((>playercolor297then_1) / 2) & $70)
   7165  4485		       8d 78 10 	      STA	DF0WRITE
   7166  4488				   .skipL0568
   7167  4488				   .__Fire_Animation
   7168  4488							; __Fire_Animation
   7169  4488
   7170  4488				   .L0569		;  if f  =  10 then player5:
   7171  4488
   7172  4488		       a5 d6		      LDA	f
   7173  448a		       c9 0a		      CMP	#10
   7174  448c		       d0 18		      BNE	.skipL0569
   7175  448e				   .condpart298
   7176  448e		       a9 ea		      lda	#<(playerpointers+8)
   7177  4490		       8d 50 10 	      sta	DF0LOW
   7178  4493		       a9 01		      lda	#(>(playerpointers+8)) & $0F
   7179  4495		       8d 68 10 	      sta	DF0HI
   7180  4498		       a2 42		      LDX	#<player298then_5
   7181  449a		       8e 78 10 	      STX	DF0WRITE
   7182  449d		       a9 69		      LDA	#((>player298then_5) & $0f) | (((>player298then_5) / 2) & $70)
   7183  449f		       8d 78 10 	      STA	DF0WRITE
   7184  44a2		       a9 08		      LDA	#8
   7185  44a4		       85 aa		      STA	player5height
   7186  44a6				   .skipL0569
   7187  44a6				   .
   7188  44a6							; 
   7189  44a6
   7190  44a6				   .L0570		;  if f  =  10 then player5color:
   7191  44a6
   7192  44a6		       a5 d6		      LDA	f
   7193  44a8		       c9 0a		      CMP	#10
   7194  44aa		       d0 14		      BNE	.skipL0570
   7195  44ac				   .condpart299
   7196  44ac		       a9 fc		      lda	#<(playerpointers+26)
   7197  44ae		       8d 50 10 	      sta	DF0LOW
   7198  44b1		       a9 01		      lda	#(>(playerpointers+26)) & $0F
   7199  44b3		       8d 68 10 	      sta	DF0HI
   7200  44b6		       a2 4a		      LDX	#<playercolor299then_5
   7201  44b8		       8e 78 10 	      STX	DF0WRITE
   7202  44bb		       a9 69		      LDA	#((>playercolor299then_5) & $0f) | (((>playercolor299then_5) / 2) & $70)
   7203  44bd		       8d 78 10 	      STA	DF0WRITE
   7204  44c0				   .skipL0570
   7205  44c0				   .L0571		;  if f  =  20 then player5:
   7206  44c0
   7207  44c0		       a5 d6		      LDA	f
   7208  44c2		       c9 14		      CMP	#20
   7209  44c4		       d0 18		      BNE	.skipL0571
   7210  44c6				   .condpart300
   7211  44c6		       a9 ea		      lda	#<(playerpointers+8)
   7212  44c8		       8d 50 10 	      sta	DF0LOW
   7213  44cb		       a9 01		      lda	#(>(playerpointers+8)) & $0F
   7214  44cd		       8d 68 10 	      sta	DF0HI
   7215  44d0		       a2 52		      LDX	#<player300then_5
   7216  44d2		       8e 78 10 	      STX	DF0WRITE
   7217  44d5		       a9 69		      LDA	#((>player300then_5) & $0f) | (((>player300then_5) / 2) & $70)
   7218  44d7		       8d 78 10 	      STA	DF0WRITE
   7219  44da		       a9 08		      LDA	#8
   7220  44dc		       85 aa		      STA	player5height
   7221  44de				   .skipL0571
   7222  44de				   .L0572		;  if f  =  20 then player5color:
   7223  44de
   7224  44de		       a5 d6		      LDA	f
   7225  44e0		       c9 14		      CMP	#20
   7226  44e2		       d0 14		      BNE	.skipL0572
   7227  44e4				   .condpart301
   7228  44e4		       a9 fc		      lda	#<(playerpointers+26)
   7229  44e6		       8d 50 10 	      sta	DF0LOW
   7230  44e9		       a9 01		      lda	#(>(playerpointers+26)) & $0F
   7231  44eb		       8d 68 10 	      sta	DF0HI
   7232  44ee		       a2 5a		      LDX	#<playercolor301then_5
   7233  44f0		       8e 78 10 	      STX	DF0WRITE
   7234  44f3		       a9 69		      LDA	#((>playercolor301then_5) & $0f) | (((>playercolor301then_5) / 2) & $70)
   7235  44f5		       8d 78 10 	      STA	DF0WRITE
   7236  44f8				   .skipL0572
   7237  44f8				   .L0573		;  if f  =  30 then player5:
   7238  44f8
   7239  44f8		       a5 d6		      LDA	f
   7240  44fa		       c9 1e		      CMP	#30
   7241  44fc		       d0 18		      BNE	.skipL0573
   7242  44fe				   .condpart302
   7243  44fe		       a9 ea		      lda	#<(playerpointers+8)
   7244  4500		       8d 50 10 	      sta	DF0LOW
   7245  4503		       a9 01		      lda	#(>(playerpointers+8)) & $0F
   7246  4505		       8d 68 10 	      sta	DF0HI
   7247  4508		       a2 62		      LDX	#<player302then_5
   7248  450a		       8e 78 10 	      STX	DF0WRITE
   7249  450d		       a9 69		      LDA	#((>player302then_5) & $0f) | (((>player302then_5) / 2) & $70)
   7250  450f		       8d 78 10 	      STA	DF0WRITE
   7251  4512		       a9 08		      LDA	#8
   7252  4514		       85 aa		      STA	player5height
   7253  4516				   .skipL0573
   7254  4516				   .L0574		;  if f  =  30 then player5color:
   7255  4516
   7256  4516		       a5 d6		      LDA	f
   7257  4518		       c9 1e		      CMP	#30
   7258  451a		       d0 14		      BNE	.skipL0574
   7259  451c				   .condpart303
   7260  451c		       a9 fc		      lda	#<(playerpointers+26)
   7261  451e		       8d 50 10 	      sta	DF0LOW
   7262  4521		       a9 01		      lda	#(>(playerpointers+26)) & $0F
   7263  4523		       8d 68 10 	      sta	DF0HI
   7264  4526		       a2 6a		      LDX	#<playercolor303then_5
   7265  4528		       8e 78 10 	      STX	DF0WRITE
   7266  452b		       a9 69		      LDA	#((>playercolor303then_5) & $0f) | (((>playercolor303then_5) / 2) & $70)
   7267  452d		       8d 78 10 	      STA	DF0WRITE
   7268  4530				   .skipL0574
   7269  4530				   .L0575		;  if frame  >  0  &&	Powerup  =  1 then player4:
   7270  4530
   7271  4530		       a9 00		      LDA	#0
   7272  4532		       c5 d6		      CMP	frame
   7273  4534		       b0 1e		      BCS	.skipL0575
   7274  4536				   .condpart304
   7275  4536		       a5 ee		      LDA	Powerup
   7276  4538		       c9 01		      CMP	#1
   7277  453a		       d0 18		      BNE	.skip304then
   7278  453c				   .condpart305
   7279  453c		       a9 e8		      lda	#<(playerpointers+6)
   7280  453e		       8d 50 10 	      sta	DF0LOW
   7281  4541		       a9 01		      lda	#(>(playerpointers+6)) & $0F
   7282  4543		       8d 68 10 	      sta	DF0HI
   7283  4546		       a2 72		      LDX	#<player305then_4
   7284  4548		       8e 78 10 	      STX	DF0WRITE
   7285  454b		       a9 69		      LDA	#((>player305then_4) & $0f) | (((>player305then_4) / 2) & $70)
   7286  454d		       8d 78 10 	      STA	DF0WRITE
   7287  4550		       a9 09		      LDA	#9
   7288  4552		       85 a9		      STA	player4height
   7289  4554				   .skip304then
   7290  4554				   .skipL0575
   7291  4554				   .L0576		;  if frame  > 0  &&  Powerup	=  1 then player4color:
   7292  4554
   7293  4554		       a9 00		      LDA	#0
   7294  4556		       c5 d6		      CMP	frame
   7295  4558		       b0 1a		      BCS	.skipL0576
   7296  455a				   .condpart306
   7297  455a		       a5 ee		      LDA	Powerup
   7298  455c		       c9 01		      CMP	#1
   7299  455e		       d0 14		      BNE	.skip306then
   7300  4560				   .condpart307
   7301  4560		       a9 fa		      lda	#<(playerpointers+24)
   7302  4562		       8d 50 10 	      sta	DF0LOW
   7303  4565		       a9 01		      lda	#(>(playerpointers+24)) & $0F
   7304  4567		       8d 68 10 	      sta	DF0HI
   7305  456a		       a2 7b		      LDX	#<playercolor307then_4
   7306  456c		       8e 78 10 	      STX	DF0WRITE
   7307  456f		       a9 69		      LDA	#((>playercolor307then_4) & $0f) | (((>playercolor307then_4) / 2) & $70)
   7308  4571		       8d 78 10 	      STA	DF0WRITE
   7309  4574				   .skip306then
   7310  4574				   .skipL0576
   7311  4574				   .
   7312  4574							; 
   7313  4574
   7314  4574				   .L0577		;  if frame  <  16  &&  Powerup  = 2 then player4:
   7315  4574
   7316  4574		       a5 d6		      LDA	frame
   7317  4576		       c9 10		      CMP	#16
   7318  4578		       b0 1e		      BCS	.skipL0577
   7319  457a				   .condpart308
   7320  457a		       a5 ee		      LDA	Powerup
   7321  457c		       c9 02		      CMP	#2
   7322  457e		       d0 18		      BNE	.skip308then
   7323  4580				   .condpart309
   7324  4580		       a9 e8		      lda	#<(playerpointers+6)
   7325  4582		       8d 50 10 	      sta	DF0LOW
   7326  4585		       a9 01		      lda	#(>(playerpointers+6)) & $0F
   7327  4587		       8d 68 10 	      sta	DF0HI
   7328  458a		       a2 84		      LDX	#<player309then_4
   7329  458c		       8e 78 10 	      STX	DF0WRITE
   7330  458f		       a9 69		      LDA	#((>player309then_4) & $0f) | (((>player309then_4) / 2) & $70)
   7331  4591		       8d 78 10 	      STA	DF0WRITE
   7332  4594		       a9 09		      LDA	#9
   7333  4596		       85 a9		      STA	player4height
   7334  4598				   .skip308then
   7335  4598				   .skipL0577
   7336  4598				   .
   7337  4598							; 
   7338  4598
   7339  4598				   .L0578		;  if frame  < 16  &&	Powerup  = 2 then player4color:
   7340  4598
   7341  4598		       a5 d6		      LDA	frame
   7342  459a		       c9 10		      CMP	#16
   7343  459c		       b0 1a		      BCS	.skipL0578
   7344  459e				   .condpart310
   7345  459e		       a5 ee		      LDA	Powerup
   7346  45a0		       c9 02		      CMP	#2
   7347  45a2		       d0 14		      BNE	.skip310then
   7348  45a4				   .condpart311
   7349  45a4		       a9 fa		      lda	#<(playerpointers+24)
   7350  45a6		       8d 50 10 	      sta	DF0LOW
   7351  45a9		       a9 01		      lda	#(>(playerpointers+24)) & $0F
   7352  45ab		       8d 68 10 	      sta	DF0HI
   7353  45ae		       a2 8d		      LDX	#<playercolor311then_4
   7354  45b0		       8e 78 10 	      STX	DF0WRITE
   7355  45b3		       a9 69		      LDA	#((>playercolor311then_4) & $0f) | (((>playercolor311then_4) / 2) & $70)
   7356  45b5		       8d 78 10 	      STA	DF0WRITE
   7357  45b8				   .skip310then
   7358  45b8				   .skipL0578
   7359  45b8				   .
   7360  45b8							; 
   7361  45b8
   7362  45b8				   .L0579		;  if frame  > 15  &&	Powerup  = 2 then player4color:
   7363  45b8
   7364  45b8		       a9 0f		      LDA	#15
   7365  45ba		       c5 d6		      CMP	frame
   7366  45bc		       b0 1a		      BCS	.skipL0579
   7367  45be				   .condpart312
   7368  45be		       a5 ee		      LDA	Powerup
   7369  45c0		       c9 02		      CMP	#2
   7370  45c2		       d0 14		      BNE	.skip312then
   7371  45c4				   .condpart313
   7372  45c4		       a9 fa		      lda	#<(playerpointers+24)
   7373  45c6		       8d 50 10 	      sta	DF0LOW
   7374  45c9		       a9 01		      lda	#(>(playerpointers+24)) & $0F
   7375  45cb		       8d 68 10 	      sta	DF0HI
   7376  45ce		       a2 96		      LDX	#<playercolor313then_4
   7377  45d0		       8e 78 10 	      STX	DF0WRITE
   7378  45d3		       a9 69		      LDA	#((>playercolor313then_4) & $0f) | (((>playercolor313then_4) / 2) & $70)
   7379  45d5		       8d 78 10 	      STA	DF0WRITE
   7380  45d8				   .skip312then
   7381  45d8				   .skipL0579
   7382  45d8				   .
   7383  45d8							; 
   7384  45d8
   7385  45d8				   .L0580		;  if frame  >  0  &&	Powerup  <  1 then player4:
   7386  45d8
   7387  45d8		       a9 00		      LDA	#0
   7388  45da		       c5 d6		      CMP	frame
   7389  45dc		       b0 1e		      BCS	.skipL0580
   7390  45de				   .condpart314
   7391  45de		       a5 ee		      LDA	Powerup
   7392  45e0		       c9 01		      CMP	#1
   7393  45e2		       b0 18		      BCS	.skip314then
   7394  45e4				   .condpart315
   7395  45e4		       a9 e8		      lda	#<(playerpointers+6)
   7396  45e6		       8d 50 10 	      sta	DF0LOW
   7397  45e9		       a9 01		      lda	#(>(playerpointers+6)) & $0F
   7398  45eb		       8d 68 10 	      sta	DF0HI
   7399  45ee		       a2 9f		      LDX	#<player315then_4
   7400  45f0		       8e 78 10 	      STX	DF0WRITE
   7401  45f3		       a9 69		      LDA	#((>player315then_4) & $0f) | (((>player315then_4) / 2) & $70)
   7402  45f5		       8d 78 10 	      STA	DF0WRITE
   7403  45f8		       a9 09		      LDA	#9
   7404  45fa		       85 a9		      STA	player4height
   7405  45fc				   .skip314then
   7406  45fc				   .skipL0580
   7407  45fc				   .L0581		;  if frame  <  16  &&  Powerup  <  1 then player4color:
   7408  45fc
   7409  45fc		       a5 d6		      LDA	frame
   7410  45fe		       c9 10		      CMP	#16
   7411  4600		       b0 1a		      BCS	.skipL0581
   7412  4602				   .condpart316
   7413  4602		       a5 ee		      LDA	Powerup
   7414  4604		       c9 01		      CMP	#1
   7415  4606		       b0 14		      BCS	.skip316then
   7416  4608				   .condpart317
   7417  4608		       a9 fa		      lda	#<(playerpointers+24)
   7418  460a		       8d 50 10 	      sta	DF0LOW
   7419  460d		       a9 01		      lda	#(>(playerpointers+24)) & $0F
   7420  460f		       8d 68 10 	      sta	DF0HI
   7421  4612		       a2 a8		      LDX	#<playercolor317then_4
   7422  4614		       8e 78 10 	      STX	DF0WRITE
   7423  4617		       a9 69		      LDA	#((>playercolor317then_4) & $0f) | (((>playercolor317then_4) / 2) & $70)
   7424  4619		       8d 78 10 	      STA	DF0WRITE
   7425  461c				   .skip316then
   7426  461c				   .skipL0581
   7427  461c				   .
   7428  461c							; 
   7429  461c
   7430  461c				   .L0582		;  if frame  > 15  &&	Powerup  <  1 then player4color:
   7431  461c
   7432  461c		       a9 0f		      LDA	#15
   7433  461e		       c5 d6		      CMP	frame
   7434  4620		       b0 1a		      BCS	.skipL0582
   7435  4622				   .condpart318
   7436  4622		       a5 ee		      LDA	Powerup
   7437  4624		       c9 01		      CMP	#1
   7438  4626		       b0 14		      BCS	.skip318then
   7439  4628				   .condpart319
   7440  4628		       a9 fa		      lda	#<(playerpointers+24)
   7441  462a		       8d 50 10 	      sta	DF0LOW
   7442  462d		       a9 01		      lda	#(>(playerpointers+24)) & $0F
   7443  462f		       8d 68 10 	      sta	DF0HI
   7444  4632		       a2 b1		      LDX	#<playercolor319then_4
   7445  4634		       8e 78 10 	      STX	DF0WRITE
   7446  4637		       a9 69		      LDA	#((>playercolor319then_4) & $0f) | (((>playercolor319then_4) / 2) & $70)
   7447  4639		       8d 78 10 	      STA	DF0WRITE
   7448  463c				   .skip318then
   7449  463c				   .skipL0582
   7450  463c				   .
   7451  463c							; 
   7452  463c
   7453  463c				   .L0583		;  if frame  >=  30  &&  EnemyHit  = 1 then player1y = 200  :	EnemyHit  = 0
   7454  463c
   7455  463c		       a5 d6		      LDA	frame
   7456  463e		       c9 1e		      CMP	#30
   7457  4640		       90 0e		      BCC	.skipL0583
   7458  4642				   .condpart320
   7459  4642		       a5 d9		      LDA	EnemyHit
   7460  4644		       c9 01		      CMP	#1
   7461  4646		       d0 08		      BNE	.skip320then
   7462  4648				   .condpart321
   7463  4648		       a9 c8		      LDA	#200
   7464  464a		       85 9a		      STA	player1y
   7465  464c		       a9 00		      LDA	#0
   7466  464e		       85 d9		      STA	EnemyHit
   7467  4650				   .skip320then
   7468  4650				   .skipL0583
   7469  4650				   .L0584		;  if frame  >=  30  &&  EnemyHit  = 2 then player2y = 200  :	EnemyHit  = 0
   7470  4650
   7471  4650		       a5 d6		      LDA	frame
   7472  4652		       c9 1e		      CMP	#30
   7473  4654		       90 0e		      BCC	.skipL0584
   7474  4656				   .condpart322
   7475  4656		       a5 d9		      LDA	EnemyHit
   7476  4658		       c9 02		      CMP	#2
   7477  465a		       d0 08		      BNE	.skip322then
   7478  465c				   .condpart323
   7479  465c		       a9 c8		      LDA	#200
   7480  465e		       85 9b		      STA	player2y
   7481  4660		       a9 00		      LDA	#0
   7482  4662		       85 d9		      STA	EnemyHit
   7483  4664				   .skip322then
   7484  4664				   .skipL0584
   7485  4664				   .L0585		;  if frame  >=  30  &&  EnemyHit  = 3 then player3y = 200  :	EnemyHit  = 0
   7486  4664
   7487  4664		       a5 d6		      LDA	frame
   7488  4666		       c9 1e		      CMP	#30
   7489  4668		       90 0e		      BCC	.skipL0585
   7490  466a				   .condpart324
   7491  466a		       a5 d9		      LDA	EnemyHit
   7492  466c		       c9 03		      CMP	#3
   7493  466e		       d0 08		      BNE	.skip324then
   7494  4670				   .condpart325
   7495  4670		       a9 c8		      LDA	#200
   7496  4672		       85 9c		      STA	player3y
   7497  4674		       a9 00		      LDA	#0
   7498  4676		       85 d9		      STA	EnemyHit
   7499  4678				   .skip324then
   7500  4678				   .skipL0585
   7501  4678				   .L0586		;  if frame  >= 30 then frame	= 0  :	PlayerDamage = 0
   7502  4678
   7503  4678		       a5 d6		      LDA	frame
   7504  467a		       c9 1e		      CMP	#30
   7505  467c		       90 06		      BCC	.skipL0586
   7506  467e				   .condpart326
   7507  467e		       a9 00		      LDA	#0
   7508  4680		       85 d6		      STA	frame
   7509  4682		       85 dd		      STA	PlayerDamage
   7510  4684				   .skipL0586
   7511  4684				   .L0587		;  if joy0right then REFP0  =	0
   7512  4684
   7513  4684		       2c 80 02 	      bit	SWCHA
   7514  4687		       30 04		      BMI	.skipL0587
   7515  4689				   .condpart327
   7516  4689		       a9 00		      LDA	#0
   7517  468b		       85 0b		      STA	REFP0
   7518  468d				   .skipL0587
   7519  468d				   .L0588		;  if joy0left then REFP0  =  8
   7520  468d
   7521  468d		       2c 80 02 	      bit	SWCHA
   7522  4690		       70 04		      BVS	.skipL0588
   7523  4692				   .condpart328
   7524  4692		       a9 08		      LDA	#8
   7525  4694		       85 0b		      STA	REFP0
   7526  4696				   .skipL0588
   7527  4696				   .L0589		;  return
   7528  4696
   7529  4696		       ba		      tsx
   7530  4697		       b5 02		      lda	2,x	; check return address
   7531  4699		       49 76		      eor	#(>*)	; vs. current PCH
   7532  469b		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   7533  469d		       f0 03		      beq	*+5	; if equal, do normal return
   7534  469f		       4c e0 df 	      JMP	BS_return
   7535  46a2		       60		      RTS
   7536  46a3				   .
   7537  46a3							; 
   7538  46a3
   7539  46a3				   .__GameOver
   7540  46a3							; __GameOver
   7541  46a3
   7542  46a3				   .L0590		;  Bit4_gameover{4}  =  1
   7543  46a3
   7544  46a3		       a5 ea		      LDA	Bit4_gameover
   7545  46a5		       09 10		      ORA	#16
   7546  46a7		       85 ea		      STA	Bit4_gameover
   7547  46a9				   .L0591		;  Househit  = 1
   7548  46a9
   7549  46a9		       a9 01		      LDA	#1
   7550  46ab		       85 e1		      STA	Househit
   7551  46ad				   .L0592		;  missile0y  = 200 :	missile1y = 200
   7552  46ad
   7553  46ad		       a9 c8		      LDA	#200
   7554  46af		       85 bf		      STA	missile0y
   7555  46b1		       85 c0		      STA	missile1y
   7556  46b3				   .L0593		;  player0y  = 200
   7557  46b3
   7558  46b3		       a9 c8		      LDA	#200
   7559  46b5		       85 99		      STA	player0y
   7560  46b7				   .L0594		;  player1y = 200
   7561  46b7
   7562  46b7		       a9 c8		      LDA	#200
   7563  46b9		       85 9a		      STA	player1y
   7564  46bb				   .L0595		;  player2y = 200
   7565  46bb
   7566  46bb		       a9 c8		      LDA	#200
   7567  46bd		       85 9b		      STA	player2y
   7568  46bf				   .L0596		;  player3y = 200
   7569  46bf
   7570  46bf		       a9 c8		      LDA	#200
   7571  46c1		       85 9c		      STA	player3y
   7572  46c3				   .L0597		;  player4y = 200
   7573  46c3
   7574  46c3		       a9 c8		      LDA	#200
   7575  46c5		       85 9d		      STA	player4y
   7576  46c7				   .L0598		;  player5y = 200
   7577  46c7
   7578  46c7		       a9 c8		      LDA	#200
   7579  46c9		       85 9e		      STA	player5y
   7580  46cb				   .L0599		;  player6y = 200
   7581  46cb
   7582  46cb		       a9 c8		      LDA	#200
   7583  46cd		       85 9f		      STA	player6y
   7584  46cf				   .L0600		;  player7y  = 200
   7585  46cf
   7586  46cf		       a9 c8		      LDA	#200
   7587  46d1		       85 a0		      STA	player7y
   7588  46d3				   .L0601		;  player1x  = 20  :  player1y  =  40
   7589  46d3
   7590  46d3		       a9 14		      LDA	#20
   7591  46d5		       85 90		      STA	player1x
   7592  46d7		       a9 28		      LDA	#40
   7593  46d9		       85 9a		      STA	player1y
   7594  46db				   .L0602		;  player2x  = 20  :  player2y  =  70
   7595  46db
   7596  46db		       a9 14		      LDA	#20
   7597  46dd		       85 91		      STA	player2x
   7598  46df		       a9 46		      LDA	#70
   7599  46e1		       85 9b		      STA	player2y
   7600  46e3				   .L0603		;  player3x  = 20  :  player3y  =  100
   7601  46e3
   7602  46e3		       a9 14		      LDA	#20
   7603  46e5		       85 92		      STA	player3x
   7604  46e7		       a9 64		      LDA	#100
   7605  46e9		       85 9c		      STA	player3y
   7606  46eb				   .L0604		;  Powerup  =	 ( rand & 2 ) 
   7607  46eb
   7608  46eb							; complex statement detected
   7609  46eb		       ad 00 10 	      lda	rand
   7610  46ee		       4a		      lsr
   7611  46ef				  -	      ifconst	rand16
   7612  46ef				  -	      rol	rand16
   7613  46ef					      endif
   7614  46ef		       90 02		      bcc	*+4
   7615  46f1		       49 b4		      eor	#$B4
   7616  46f3		       8d 00 10 	      sta	rand
   7617  46f6				  -	      ifconst	rand16
   7618  46f6				  -	      eor	rand16
   7619  46f6					      endif
   7620  46f6		       29 02		      AND	#2
   7621  46f8		       85 ee		      STA	Powerup
   7622  46fa				   .L0605		;  player4x = 150  :  player4y  = 120
   7623  46fa
   7624  46fa		       a9 96		      LDA	#150
   7625  46fc		       85 93		      STA	player4x
   7626  46fe		       a9 78		      LDA	#120
   7627  4700		       85 9d		      STA	player4y
   7628  4702				   .
   7629  4702							; 
   7630  4702
   7631  4702				   .L0606		;  if Bit4_gameover{4} then if !Ch0_Sound then Ch0_Sound  =  1  :  Ch0_Duration  =  30
   7632  4702
   7633  4702		       a5 ea		      LDA	Bit4_gameover
   7634  4704		       29 10		      AND	#16
   7635  4706		       f0 0c		      BEQ	.skipL0606
   7636  4708				   .condpart329
   7637  4708		       a5 e7		      LDA	Ch0_Sound
   7638  470a		       d0 08		      BNE	.skip329then
   7639  470c				   .condpart330
   7640  470c		       a9 01		      LDA	#1
   7641  470e		       85 e7		      STA	Ch0_Sound
   7642  4710		       a9 1e		      LDA	#30
   7643  4712		       85 e8		      STA	Ch0_Duration
   7644  4714				   .skip329then
   7645  4714				   .skipL0606
   7646  4714				   .L0607		;  if !Ch0_Sound then goto __End__Skip_Ch_0
   7647  4714
   7648  4714		       a5 e7		      LDA	Ch0_Sound
   7649  4716		       d0 03		      BNE	.skipL0607
   7650  4718				   .condpart331
   7651  4718		       4c 5b 77 	      jmp	.__End__Skip_Ch_0
   7652  471b
   7653  471b				   .skipL0607
   7654  471b				   .L0608		;  Ch0_Duration  =  Ch0_Duration  -  1
   7655  471b
   7656  471b		       c6 e8		      DEC	Ch0_Duration
   7657  471d				   .L0609		;  if !Ch0_Duration then goto __End__Clear_Ch_0
   7658  471d
   7659  471d		       a5 e8		      LDA	Ch0_Duration
   7660  471f		       d0 03		      BNE	.skipL0609
   7661  4721				   .condpart332
   7662  4721		       4c 51 77 	      jmp	.__End__Clear_Ch_0
   7663  4724
   7664  4724				   .skipL0609
   7665  4724				   .L0610		;  if Ch0_Sound  <>  1 then goto __End__Skip_Ch0_Sound_001
   7666  4724
   7667  4724		       a5 e7		      LDA	Ch0_Sound
   7668  4726		       c9 01		      CMP	#1
   7669  4728		       f0 03		      BEQ	.skipL0610
   7670  472a				   .condpart333
   7671  472a		       4c 4e 77 	      jmp	.__End__Skip_Ch0_Sound_001
   7672  472d
   7673  472d				   .skipL0610
   7674  472d				   .L0611		;  AUDC0  =  6  :  AUDV0  =  2  :  AUDF0  =  12
   7675  472d
   7676  472d		       a9 06		      LDA	#6
   7677  472f		       85 15		      STA	AUDC0
   7678  4731		       a9 02		      LDA	#2
   7679  4733		       85 19		      STA	AUDV0
   7680  4735		       a9 0c		      LDA	#12
   7681  4737		       85 17		      STA	AUDF0
   7682  4739				   .L0612		;  if Ch0_Duration  <	15 then AUDC0  =  6  :	AUDV0  =  1  :	AUDF0  =  6
   7683  4739
   7684  4739		       a5 e8		      LDA	Ch0_Duration
   7685  473b		       c9 0f		      CMP	#15
   7686  473d		       b0 0c		      BCS	.skipL0612
   7687  473f				   .condpart334
   7688  473f		       a9 06		      LDA	#6
   7689  4741		       85 15		      STA	AUDC0
   7690  4743		       a9 01		      LDA	#1
   7691  4745		       85 19		      STA	AUDV0
   7692  4747		       a9 06		      LDA	#6
   7693  4749		       85 17		      STA	AUDF0
   7694  474b				   .skipL0612
   7695  474b				   .L0613		;  goto __End__Skip_Ch_0
   7696  474b
   7697  474b		       4c 5b 77 	      jmp	.__End__Skip_Ch_0
   7698  474e
   7699  474e				   .__End__Skip_Ch0_Sound_001
   7700  474e							; __End__Skip_Ch0_Sound_001
   7701  474e
   7702  474e				   .L0614		;  goto __End__Skip_Ch_0
   7703  474e
   7704  474e		       4c 5b 77 	      jmp	.__End__Skip_Ch_0
   7705  4751
   7706  4751				   .__End__Clear_Ch_0
   7707  4751							; __End__Clear_Ch_0
   7708  4751
   7709  4751				   .L0615		;  Ch0_Sound  =  0  :	AUDV0  =  0 :  AUDC0 = 0 :  AUDF0  = 0
   7710  4751
   7711  4751		       a9 00		      LDA	#0
   7712  4753		       85 e7		      STA	Ch0_Sound
   7713  4755		       85 19		      STA	AUDV0
   7714  4757		       85 15		      STA	AUDC0
   7715  4759		       85 17		      STA	AUDF0
   7716  475b				   .
   7717  475b							; 
   7718  475b
   7719  475b				   .__End__Skip_Ch_0
   7720  475b							; __End__Skip_Ch_0
   7721  475b
   7722  475b				   .L0616		;  playfield:
   7723  475b
   7724  475b		       a0 58		      ldy	#88
   7725  475d		       a9 ba		      LDA	#<PF_data2
   7726  475f		       a2 69		      LDX	#((>PF_data2) & $0f) | (((>PF_data2) / 2) & $70)
   7727  4761		       85 81		      sta	temp7
   7728  4763		       a9 77		      lda	#>(ret_point27-1)
   7729  4765		       48		      pha
   7730  4766		       a9 78		      lda	#<(ret_point27-1)
   7731  4768		       48		      pha
   7732  4769		       a9 1e		      lda	#>(pfsetup-1)
   7733  476b		       48		      pha
   7734  476c		       a9 8c		      lda	#<(pfsetup-1)
   7735  476e		       48		      pha
   7736  476f		       a5 81		      lda	temp7
   7737  4771		       48		      pha
   7738  4772		       8a		      txa
   7739  4773		       48		      pha
   7740  4774		       a2 01		      ldx	#1
   7741  4776		       4c ee df 	      jmp	BS_jsr
   7742  4779				   ret_point27
   7743  4779				   .
   7744  4779							; 
   7745  4779
   7746  4779				   .L0617		;  pfcolors:
   7747  4779
   7748  4779		       a9 08		      LDA	#<PFCOLS
   7749  477b		       8d 50 10 	      STA	DF0LOW
   7750  477e		       a9 0a		      LDA	#(>PFCOLS) & $0F
   7751  4780		       8d 68 10 	      STA	DF0HI
   7752  4783		       a9 1a		      LDA	#<playfieldcolorL0617
   7753  4785		       8d 59 10 	      STA	PARAMETER
   7754  4788		       a9 6b		      LDA	#((>playfieldcolorL0617) & $0f) | (((>playfieldcolorL0617) / 2) & $70)
   7755  478a		       8d 59 10 	      STA	PARAMETER
   7756  478d		       a9 00		      LDA	#0
   7757  478f		       8d 59 10 	      STA	PARAMETER
   7758  4792		       a9 58		      LDA	#88
   7759  4794		       8d 59 10 	      STA	PARAMETER
   7760  4797		       a9 01		      LDA	#1
   7761  4799		       8d 5a 10 	      STA	CALLFUNCTION
   7762  479c				   .L0618		;  return
   7763  479c
   7764  479c		       ba		      tsx
   7765  479d		       b5 02		      lda	2,x	; check return address
   7766  479f		       49 77		      eor	#(>*)	; vs. current PCH
   7767  47a1		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   7768  47a3		       f0 03		      beq	*+5	; if equal, do normal return
   7769  47a5		       4c e0 df 	      JMP	BS_return
   7770  47a8		       60		      RTS
   7771  47a9				   .
   7772  47a9							; 
   7773  47a9
   7774  47a9				   .L0619		;  bank 5
   7775  47a9
   7776  47a9					      if	ECHO4
      2091 bytes of ROM space left in bank 4
   7777  47a9					      echo	"    ",[(start_bank4 - *)]d , "bytes of ROM space left in bank 4")
   7778  47a9					      endif
   7779  47a9		       00 01	   ECHO4      =	1
   7780  4fd4					      ORG	$4FF4-bscode_length
   7781  4fd4					      RORG	$7FF4-bscode_length
   7782  4fd4		       a2 ff	   start_bank4 ldx	#$ff
   7783  4fd6					      ifconst	FASTFETCH	; using DPC+
   7784  4fd6		       8e 58 10 	      stx	FASTFETCH
   7785  4fd9					      endif
   7786  4fd9		       9a		      txs
   7787  4fda				  -	      if	bankswitch == 64
   7788  4fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   7789  4fda					      else
   7790  4fda		       a9 18		      lda	#>(start-1)
   7791  4fdc					      endif
   7792  4fdc		       48		      pha
   7793  4fdd		       a9 e3		      lda	#<(start-1)
   7794  4fdf		       48		      pha
   7795  4fe0		       48		      pha
   7796  4fe1		       8a		      txa
   7797  4fe2		       48		      pha
   7798  4fe3		       ba		      tsx
   7799  4fe4					      if	bankswitch != 64
   7800  4fe4		       b5 04		      lda	4,x	; get high byte of return address
   7801  4fe6		       2a		      rol
   7802  4fe7		       2a		      rol
   7803  4fe8		       2a		      rol
   7804  4fe9		       2a		      rol
   7805  4fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   7806  4fec		       aa		      tax
   7807  4fed		       e8		      inx
   7808  4fee				  -	      else
   7809  4fee				  -	      lda	4,x	; get high byte of return address
   7810  4fee				  -	      tay
   7811  4fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   7812  4fee				  -	      sta	4,x
   7813  4fee				  -	      tya
   7814  4fee				  -	      lsr
   7815  4fee				  -	      lsr
   7816  4fee				  -	      lsr
   7817  4fee				  -	      lsr
   7818  4fee				  -	      tax
   7819  4fee				  -	      inx
   7820  4fee					      endif
   7821  4fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   7822  4ff1		       68		      pla
   7823  4ff2		       aa		      tax
   7824  4ff3		       68		      pla
   7825  4ff4		       60		      rts
   7826  4ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   7827  4ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   7828  4ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   7829  4ff5					      endif
   7830  4ffc					      ORG	$4FFC
   7831  4ffc					      RORG	$7FFC
   7832  4ffc		       d4 7f		      .word.w	(start_bank4 & $ffff)
   7833  4ffe		       d4 7f		      .word.w	(start_bank4 & $ffff)
   7834  5000					      ORG	$5000
   7835  5000					      RORG	$9000
   7836  5000					      repeat	129
   7837  5000		       00		      .byte.b	0
   7836  5000					      repend
   7837  5001		       00		      .byte.b	0
   7836  5001					      repend
   7837  5002		       00		      .byte.b	0
   7836  5002					      repend
   7837  5003		       00		      .byte.b	0
   7836  5003					      repend
   7837  5004		       00		      .byte.b	0
   7836  5004					      repend
   7837  5005		       00		      .byte.b	0
   7836  5005					      repend
   7837  5006		       00		      .byte.b	0
   7836  5006					      repend
   7837  5007		       00		      .byte.b	0
   7836  5007					      repend
   7837  5008		       00		      .byte.b	0
   7836  5008					      repend
   7837  5009		       00		      .byte.b	0
   7836  5009					      repend
   7837  500a		       00		      .byte.b	0
   7836  500a					      repend
   7837  500b		       00		      .byte.b	0
   7836  500b					      repend
   7837  500c		       00		      .byte.b	0
   7836  500c					      repend
   7837  500d		       00		      .byte.b	0
   7836  500d					      repend
   7837  500e		       00		      .byte.b	0
   7836  500e					      repend
   7837  500f		       00		      .byte.b	0
   7836  500f					      repend
   7837  5010		       00		      .byte.b	0
   7836  5010					      repend
   7837  5011		       00		      .byte.b	0
   7836  5011					      repend
   7837  5012		       00		      .byte.b	0
   7836  5012					      repend
   7837  5013		       00		      .byte.b	0
   7836  5013					      repend
   7837  5014		       00		      .byte.b	0
   7836  5014					      repend
   7837  5015		       00		      .byte.b	0
   7836  5015					      repend
   7837  5016		       00		      .byte.b	0
   7836  5016					      repend
   7837  5017		       00		      .byte.b	0
   7836  5017					      repend
   7837  5018		       00		      .byte.b	0
   7836  5018					      repend
   7837  5019		       00		      .byte.b	0
   7836  5019					      repend
   7837  501a		       00		      .byte.b	0
   7836  501a					      repend
   7837  501b		       00		      .byte.b	0
   7836  501b					      repend
   7837  501c		       00		      .byte.b	0
   7836  501c					      repend
   7837  501d		       00		      .byte.b	0
   7836  501d					      repend
   7837  501e		       00		      .byte.b	0
   7836  501e					      repend
   7837  501f		       00		      .byte.b	0
   7836  501f					      repend
   7837  5020		       00		      .byte.b	0
   7836  5020					      repend
   7837  5021		       00		      .byte.b	0
   7836  5021					      repend
   7837  5022		       00		      .byte.b	0
   7836  5022					      repend
   7837  5023		       00		      .byte.b	0
   7836  5023					      repend
   7837  5024		       00		      .byte.b	0
   7836  5024					      repend
   7837  5025		       00		      .byte.b	0
   7836  5025					      repend
   7837  5026		       00		      .byte.b	0
   7836  5026					      repend
   7837  5027		       00		      .byte.b	0
   7836  5027					      repend
   7837  5028		       00		      .byte.b	0
   7836  5028					      repend
   7837  5029		       00		      .byte.b	0
   7836  5029					      repend
   7837  502a		       00		      .byte.b	0
   7836  502a					      repend
   7837  502b		       00		      .byte.b	0
   7836  502b					      repend
   7837  502c		       00		      .byte.b	0
   7836  502c					      repend
   7837  502d		       00		      .byte.b	0
   7836  502d					      repend
   7837  502e		       00		      .byte.b	0
   7836  502e					      repend
   7837  502f		       00		      .byte.b	0
   7836  502f					      repend
   7837  5030		       00		      .byte.b	0
   7836  5030					      repend
   7837  5031		       00		      .byte.b	0
   7836  5031					      repend
   7837  5032		       00		      .byte.b	0
   7836  5032					      repend
   7837  5033		       00		      .byte.b	0
   7836  5033					      repend
   7837  5034		       00		      .byte.b	0
   7836  5034					      repend
   7837  5035		       00		      .byte.b	0
   7836  5035					      repend
   7837  5036		       00		      .byte.b	0
   7836  5036					      repend
   7837  5037		       00		      .byte.b	0
   7836  5037					      repend
   7837  5038		       00		      .byte.b	0
   7836  5038					      repend
   7837  5039		       00		      .byte.b	0
   7836  5039					      repend
   7837  503a		       00		      .byte.b	0
   7836  503a					      repend
   7837  503b		       00		      .byte.b	0
   7836  503b					      repend
   7837  503c		       00		      .byte.b	0
   7836  503c					      repend
   7837  503d		       00		      .byte.b	0
   7836  503d					      repend
   7837  503e		       00		      .byte.b	0
   7836  503e					      repend
   7837  503f		       00		      .byte.b	0
   7836  503f					      repend
   7837  5040		       00		      .byte.b	0
   7836  5040					      repend
   7837  5041		       00		      .byte.b	0
   7836  5041					      repend
   7837  5042		       00		      .byte.b	0
   7836  5042					      repend
   7837  5043		       00		      .byte.b	0
   7836  5043					      repend
   7837  5044		       00		      .byte.b	0
   7836  5044					      repend
   7837  5045		       00		      .byte.b	0
   7836  5045					      repend
   7837  5046		       00		      .byte.b	0
   7836  5046					      repend
   7837  5047		       00		      .byte.b	0
   7836  5047					      repend
   7837  5048		       00		      .byte.b	0
   7836  5048					      repend
   7837  5049		       00		      .byte.b	0
   7836  5049					      repend
   7837  504a		       00		      .byte.b	0
   7836  504a					      repend
   7837  504b		       00		      .byte.b	0
   7836  504b					      repend
   7837  504c		       00		      .byte.b	0
   7836  504c					      repend
   7837  504d		       00		      .byte.b	0
   7836  504d					      repend
   7837  504e		       00		      .byte.b	0
   7836  504e					      repend
   7837  504f		       00		      .byte.b	0
   7836  504f					      repend
   7837  5050		       00		      .byte.b	0
   7836  5050					      repend
   7837  5051		       00		      .byte.b	0
   7836  5051					      repend
   7837  5052		       00		      .byte.b	0
   7836  5052					      repend
   7837  5053		       00		      .byte.b	0
   7836  5053					      repend
   7837  5054		       00		      .byte.b	0
   7836  5054					      repend
   7837  5055		       00		      .byte.b	0
   7836  5055					      repend
   7837  5056		       00		      .byte.b	0
   7836  5056					      repend
   7837  5057		       00		      .byte.b	0
   7836  5057					      repend
   7837  5058		       00		      .byte.b	0
   7836  5058					      repend
   7837  5059		       00		      .byte.b	0
   7836  5059					      repend
   7837  505a		       00		      .byte.b	0
   7836  505a					      repend
   7837  505b		       00		      .byte.b	0
   7836  505b					      repend
   7837  505c		       00		      .byte.b	0
   7836  505c					      repend
   7837  505d		       00		      .byte.b	0
   7836  505d					      repend
   7837  505e		       00		      .byte.b	0
   7836  505e					      repend
   7837  505f		       00		      .byte.b	0
   7836  505f					      repend
   7837  5060		       00		      .byte.b	0
   7836  5060					      repend
   7837  5061		       00		      .byte.b	0
   7836  5061					      repend
   7837  5062		       00		      .byte.b	0
   7836  5062					      repend
   7837  5063		       00		      .byte.b	0
   7836  5063					      repend
   7837  5064		       00		      .byte.b	0
   7836  5064					      repend
   7837  5065		       00		      .byte.b	0
   7836  5065					      repend
   7837  5066		       00		      .byte.b	0
   7836  5066					      repend
   7837  5067		       00		      .byte.b	0
   7836  5067					      repend
   7837  5068		       00		      .byte.b	0
   7836  5068					      repend
   7837  5069		       00		      .byte.b	0
   7836  5069					      repend
   7837  506a		       00		      .byte.b	0
   7836  506a					      repend
   7837  506b		       00		      .byte.b	0
   7836  506b					      repend
   7837  506c		       00		      .byte.b	0
   7836  506c					      repend
   7837  506d		       00		      .byte.b	0
   7836  506d					      repend
   7837  506e		       00		      .byte.b	0
   7836  506e					      repend
   7837  506f		       00		      .byte.b	0
   7836  506f					      repend
   7837  5070		       00		      .byte.b	0
   7836  5070					      repend
   7837  5071		       00		      .byte.b	0
   7836  5071					      repend
   7837  5072		       00		      .byte.b	0
   7836  5072					      repend
   7837  5073		       00		      .byte.b	0
   7836  5073					      repend
   7837  5074		       00		      .byte.b	0
   7836  5074					      repend
   7837  5075		       00		      .byte.b	0
   7836  5075					      repend
   7837  5076		       00		      .byte.b	0
   7836  5076					      repend
   7837  5077		       00		      .byte.b	0
   7836  5077					      repend
   7837  5078		       00		      .byte.b	0
   7836  5078					      repend
   7837  5079		       00		      .byte.b	0
   7836  5079					      repend
   7837  507a		       00		      .byte.b	0
   7836  507a					      repend
   7837  507b		       00		      .byte.b	0
   7836  507b					      repend
   7837  507c		       00		      .byte.b	0
   7836  507c					      repend
   7837  507d		       00		      .byte.b	0
   7836  507d					      repend
   7837  507e		       00		      .byte.b	0
   7836  507e					      repend
   7837  507f		       00		      .byte.b	0
   7836  507f					      repend
   7837  5080		       00		      .byte.b	0
   7838  5081					      repend
   7839  5081				   .L0620		;  temp1 = temp1
   7840  5081
   7841  5081		       a5 cb		      LDA	temp1
   7842  5083		       85 cb		      STA	temp1
   7843  5085				   .
   7844  5085							; 
   7845  5085
   7846  5085				   .
   7847  5085							; 
   7848  5085
   7849  5085				   .__P0Explosion
   7850  5085							; __P0Explosion
   7851  5085
   7852  5085				   .L0621		;  PlayerDamage  =  1
   7853  5085
   7854  5085		       a9 01		      LDA	#1
   7855  5087		       85 dd		      STA	PlayerDamage
   7856  5089				   .L0622		;  if Bit3_ShootorNot{3}  &&  !Ch1_Sound then Ch1_Sound  =  1	:  Ch1_Duration  =  25
   7857  5089
   7858  5089		       a5 ea		      LDA	Bit3_ShootorNot
   7859  508b		       29 08		      AND	#8
   7860  508d		       f0 0c		      BEQ	.skipL0622
   7861  508f				   .condpart335
   7862  508f		       a5 da		      LDA	Ch1_Sound
   7863  5091		       d0 08		      BNE	.skip335then
   7864  5093				   .condpart336
   7865  5093		       a9 01		      LDA	#1
   7866  5095		       85 da		      STA	Ch1_Sound
   7867  5097		       a9 19		      LDA	#25
   7868  5099		       85 db		      STA	Ch1_Duration
   7869  509b				   .skip335then
   7870  509b				   .skipL0622
   7871  509b				   .L0623		;  if !Ch1_Sound then goto __P0Exp_Skip_Ch_1
   7872  509b
   7873  509b		       a5 da		      LDA	Ch1_Sound
   7874  509d		       d0 03		      BNE	.skipL0623
   7875  509f				   .condpart337
   7876  509f		       4c ea 90 	      jmp	.__P0Exp_Skip_Ch_1
   7877  50a2
   7878  50a2				   .skipL0623
   7879  50a2				   .L0624		;  Ch1_Duration  =  Ch1_Duration  -  1
   7880  50a2
   7881  50a2		       c6 db		      DEC	Ch1_Duration
   7882  50a4				   .L0625		;  if !Ch1_Duration then goto __P0Exp_Clear_Ch_1
   7883  50a4
   7884  50a4		       a5 db		      LDA	Ch1_Duration
   7885  50a6		       d0 03		      BNE	.skipL0625
   7886  50a8				   .condpart338
   7887  50a8		       4c ea 90 	      jmp	.__P0Exp_Clear_Ch_1
   7888  50ab
   7889  50ab				   .skipL0625
   7890  50ab				   .L0626		;  if Ch1_Sound  <>  1 then goto __P0Exp_Skip_Ch0_Sound_001
   7891  50ab
   7892  50ab		       a5 da		      LDA	Ch1_Sound
   7893  50ad		       c9 01		      CMP	#1
   7894  50af		       f0 03		      BEQ	.skipL0626
   7895  50b1				   .condpart339
   7896  50b1		       4c e7 90 	      jmp	.__P0Exp_Skip_Ch0_Sound_001
   7897  50b4
   7898  50b4				   .skipL0626
   7899  50b4				   .L0627		;  AUDC1  =  9  :  AUDV1  =  6  :  AUDF1  =  14
   7900  50b4
   7901  50b4		       a9 09		      LDA	#9
   7902  50b6		       85 16		      STA	AUDC1
   7903  50b8		       a9 06		      LDA	#6
   7904  50ba		       85 1a		      STA	AUDV1
   7905  50bc		       a9 0e		      LDA	#14
   7906  50be		       85 18		      STA	AUDF1
   7907  50c0				   .L0628		;  if Ch1_Duration  <	15 then AUDC1  =  9  :	AUDV1  =  4  :	AUDF1  =  24
   7908  50c0
   7909  50c0		       a5 db		      LDA	Ch1_Duration
   7910  50c2		       c9 0f		      CMP	#15
   7911  50c4		       b0 0c		      BCS	.skipL0628
   7912  50c6				   .condpart340
   7913  50c6		       a9 09		      LDA	#9
   7914  50c8		       85 16		      STA	AUDC1
   7915  50ca		       a9 04		      LDA	#4
   7916  50cc		       85 1a		      STA	AUDV1
   7917  50ce		       a9 18		      LDA	#24
   7918  50d0		       85 18		      STA	AUDF1
   7919  50d2				   .skipL0628
   7920  50d2				   .L0629		;  if Ch1_Duration  <	5 then AUDC1  =  9  :  AUDV1  =  1  :  AUDF1  =  16
   7921  50d2
   7922  50d2		       a5 db		      LDA	Ch1_Duration
   7923  50d4		       c9 05		      CMP	#5
   7924  50d6		       b0 0c		      BCS	.skipL0629
   7925  50d8				   .condpart341
   7926  50d8		       a9 09		      LDA	#9
   7927  50da		       85 16		      STA	AUDC1
   7928  50dc		       a9 01		      LDA	#1
   7929  50de		       85 1a		      STA	AUDV1
   7930  50e0		       a9 10		      LDA	#16
   7931  50e2		       85 18		      STA	AUDF1
   7932  50e4				   .skipL0629
   7933  50e4				   .L0630		;  goto __P0Exp_Skip_Ch_1
   7934  50e4
   7935  50e4		       4c ea 90 	      jmp	.__P0Exp_Skip_Ch_1
   7936  50e7
   7937  50e7				   .__P0Exp_Skip_Ch0_Sound_001
   7938  50e7							; __P0Exp_Skip_Ch0_Sound_001
   7939  50e7
   7940  50e7				   .L0631		;  goto __P0Exp_Skip_Ch_1
   7941  50e7
   7942  50e7		       4c ea 90 	      jmp	.__P0Exp_Skip_Ch_1
   7943  50ea
   7944  50ea				   .__P0Exp_Clear_Ch_1
   7945  50ea							; __P0Exp_Clear_Ch_1
   7946  50ea
   7947  50ea				   .__P0Exp_Skip_Ch_1
   7948  50ea							; __P0Exp_Skip_Ch_1
   7949  50ea
   7950  50ea				   .
   7951  50ea							; 
   7952  50ea
   7953  50ea				   .L0632		;  return
   7954  50ea
   7955  50ea		       ba		      tsx
   7956  50eb		       b5 02		      lda	2,x	; check return address
   7957  50ed		       49 90		      eor	#(>*)	; vs. current PCH
   7958  50ef		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   7959  50f1		       f0 03		      beq	*+5	; if equal, do normal return
   7960  50f3		       4c e0 df 	      JMP	BS_return
   7961  50f6		       60		      RTS
   7962  50f7				   .
   7963  50f7							; 
   7964  50f7
   7965  50f7				   .L0633		;  bank 6
   7966  50f7
   7967  50f7					      if	ECHO5
      3805 bytes of ROM space left in bank 5
   7968  50f7					      echo	"    ",[(start_bank5 - *)]d , "bytes of ROM space left in bank 5")
   7969  50f7					      endif
   7970  50f7		       00 01	   ECHO5      =	1
   7971  5fd4					      ORG	$5FF4-bscode_length
   7972  5fd4					      RORG	$9FF4-bscode_length
   7973  5fd4		       a2 ff	   start_bank5 ldx	#$ff
   7974  5fd6					      ifconst	FASTFETCH	; using DPC+
   7975  5fd6		       8e 58 10 	      stx	FASTFETCH
   7976  5fd9					      endif
   7977  5fd9		       9a		      txs
   7978  5fda				  -	      if	bankswitch == 64
   7979  5fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   7980  5fda					      else
   7981  5fda		       a9 18		      lda	#>(start-1)
   7982  5fdc					      endif
   7983  5fdc		       48		      pha
   7984  5fdd		       a9 e3		      lda	#<(start-1)
   7985  5fdf		       48		      pha
   7986  5fe0		       48		      pha
   7987  5fe1		       8a		      txa
   7988  5fe2		       48		      pha
   7989  5fe3		       ba		      tsx
   7990  5fe4					      if	bankswitch != 64
   7991  5fe4		       b5 04		      lda	4,x	; get high byte of return address
   7992  5fe6		       2a		      rol
   7993  5fe7		       2a		      rol
   7994  5fe8		       2a		      rol
   7995  5fe9		       2a		      rol
   7996  5fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   7997  5fec		       aa		      tax
   7998  5fed		       e8		      inx
   7999  5fee				  -	      else
   8000  5fee				  -	      lda	4,x	; get high byte of return address
   8001  5fee				  -	      tay
   8002  5fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   8003  5fee				  -	      sta	4,x
   8004  5fee				  -	      tya
   8005  5fee				  -	      lsr
   8006  5fee				  -	      lsr
   8007  5fee				  -	      lsr
   8008  5fee				  -	      lsr
   8009  5fee				  -	      tax
   8010  5fee				  -	      inx
   8011  5fee					      endif
   8012  5fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   8013  5ff1		       68		      pla
   8014  5ff2		       aa		      tax
   8015  5ff3		       68		      pla
   8016  5ff4		       60		      rts
   8017  5ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   8018  5ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   8019  5ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   8020  5ff5					      endif
   8021  5ffc					      ORG	$5FFC
   8022  5ffc					      RORG	$9FFC
   8023  5ffc		       d4 9f		      .word.w	(start_bank5 & $ffff)
   8024  5ffe		       d4 9f		      .word.w	(start_bank5 & $ffff)
   8025  6000					      ORG	$6000
   8026  6000					      RORG	$B000
   8027  6000					      repeat	129
   8028  6000		       00		      .byte.b	0
   8027  6000					      repend
   8028  6001		       00		      .byte.b	0
   8027  6001					      repend
   8028  6002		       00		      .byte.b	0
   8027  6002					      repend
   8028  6003		       00		      .byte.b	0
   8027  6003					      repend
   8028  6004		       00		      .byte.b	0
   8027  6004					      repend
   8028  6005		       00		      .byte.b	0
   8027  6005					      repend
   8028  6006		       00		      .byte.b	0
   8027  6006					      repend
   8028  6007		       00		      .byte.b	0
   8027  6007					      repend
   8028  6008		       00		      .byte.b	0
   8027  6008					      repend
   8028  6009		       00		      .byte.b	0
   8027  6009					      repend
   8028  600a		       00		      .byte.b	0
   8027  600a					      repend
   8028  600b		       00		      .byte.b	0
   8027  600b					      repend
   8028  600c		       00		      .byte.b	0
   8027  600c					      repend
   8028  600d		       00		      .byte.b	0
   8027  600d					      repend
   8028  600e		       00		      .byte.b	0
   8027  600e					      repend
   8028  600f		       00		      .byte.b	0
   8027  600f					      repend
   8028  6010		       00		      .byte.b	0
   8027  6010					      repend
   8028  6011		       00		      .byte.b	0
   8027  6011					      repend
   8028  6012		       00		      .byte.b	0
   8027  6012					      repend
   8028  6013		       00		      .byte.b	0
   8027  6013					      repend
   8028  6014		       00		      .byte.b	0
   8027  6014					      repend
   8028  6015		       00		      .byte.b	0
   8027  6015					      repend
   8028  6016		       00		      .byte.b	0
   8027  6016					      repend
   8028  6017		       00		      .byte.b	0
   8027  6017					      repend
   8028  6018		       00		      .byte.b	0
   8027  6018					      repend
   8028  6019		       00		      .byte.b	0
   8027  6019					      repend
   8028  601a		       00		      .byte.b	0
   8027  601a					      repend
   8028  601b		       00		      .byte.b	0
   8027  601b					      repend
   8028  601c		       00		      .byte.b	0
   8027  601c					      repend
   8028  601d		       00		      .byte.b	0
   8027  601d					      repend
   8028  601e		       00		      .byte.b	0
   8027  601e					      repend
   8028  601f		       00		      .byte.b	0
   8027  601f					      repend
   8028  6020		       00		      .byte.b	0
   8027  6020					      repend
   8028  6021		       00		      .byte.b	0
   8027  6021					      repend
   8028  6022		       00		      .byte.b	0
   8027  6022					      repend
   8028  6023		       00		      .byte.b	0
   8027  6023					      repend
   8028  6024		       00		      .byte.b	0
   8027  6024					      repend
   8028  6025		       00		      .byte.b	0
   8027  6025					      repend
   8028  6026		       00		      .byte.b	0
   8027  6026					      repend
   8028  6027		       00		      .byte.b	0
   8027  6027					      repend
   8028  6028		       00		      .byte.b	0
   8027  6028					      repend
   8028  6029		       00		      .byte.b	0
   8027  6029					      repend
   8028  602a		       00		      .byte.b	0
   8027  602a					      repend
   8028  602b		       00		      .byte.b	0
   8027  602b					      repend
   8028  602c		       00		      .byte.b	0
   8027  602c					      repend
   8028  602d		       00		      .byte.b	0
   8027  602d					      repend
   8028  602e		       00		      .byte.b	0
   8027  602e					      repend
   8028  602f		       00		      .byte.b	0
   8027  602f					      repend
   8028  6030		       00		      .byte.b	0
   8027  6030					      repend
   8028  6031		       00		      .byte.b	0
   8027  6031					      repend
   8028  6032		       00		      .byte.b	0
   8027  6032					      repend
   8028  6033		       00		      .byte.b	0
   8027  6033					      repend
   8028  6034		       00		      .byte.b	0
   8027  6034					      repend
   8028  6035		       00		      .byte.b	0
   8027  6035					      repend
   8028  6036		       00		      .byte.b	0
   8027  6036					      repend
   8028  6037		       00		      .byte.b	0
   8027  6037					      repend
   8028  6038		       00		      .byte.b	0
   8027  6038					      repend
   8028  6039		       00		      .byte.b	0
   8027  6039					      repend
   8028  603a		       00		      .byte.b	0
   8027  603a					      repend
   8028  603b		       00		      .byte.b	0
   8027  603b					      repend
   8028  603c		       00		      .byte.b	0
   8027  603c					      repend
   8028  603d		       00		      .byte.b	0
   8027  603d					      repend
   8028  603e		       00		      .byte.b	0
   8027  603e					      repend
   8028  603f		       00		      .byte.b	0
   8027  603f					      repend
   8028  6040		       00		      .byte.b	0
   8027  6040					      repend
   8028  6041		       00		      .byte.b	0
   8027  6041					      repend
   8028  6042		       00		      .byte.b	0
   8027  6042					      repend
   8028  6043		       00		      .byte.b	0
   8027  6043					      repend
   8028  6044		       00		      .byte.b	0
   8027  6044					      repend
   8028  6045		       00		      .byte.b	0
   8027  6045					      repend
   8028  6046		       00		      .byte.b	0
   8027  6046					      repend
   8028  6047		       00		      .byte.b	0
   8027  6047					      repend
   8028  6048		       00		      .byte.b	0
   8027  6048					      repend
   8028  6049		       00		      .byte.b	0
   8027  6049					      repend
   8028  604a		       00		      .byte.b	0
   8027  604a					      repend
   8028  604b		       00		      .byte.b	0
   8027  604b					      repend
   8028  604c		       00		      .byte.b	0
   8027  604c					      repend
   8028  604d		       00		      .byte.b	0
   8027  604d					      repend
   8028  604e		       00		      .byte.b	0
   8027  604e					      repend
   8028  604f		       00		      .byte.b	0
   8027  604f					      repend
   8028  6050		       00		      .byte.b	0
   8027  6050					      repend
   8028  6051		       00		      .byte.b	0
   8027  6051					      repend
   8028  6052		       00		      .byte.b	0
   8027  6052					      repend
   8028  6053		       00		      .byte.b	0
   8027  6053					      repend
   8028  6054		       00		      .byte.b	0
   8027  6054					      repend
   8028  6055		       00		      .byte.b	0
   8027  6055					      repend
   8028  6056		       00		      .byte.b	0
   8027  6056					      repend
   8028  6057		       00		      .byte.b	0
   8027  6057					      repend
   8028  6058		       00		      .byte.b	0
   8027  6058					      repend
   8028  6059		       00		      .byte.b	0
   8027  6059					      repend
   8028  605a		       00		      .byte.b	0
   8027  605a					      repend
   8028  605b		       00		      .byte.b	0
   8027  605b					      repend
   8028  605c		       00		      .byte.b	0
   8027  605c					      repend
   8028  605d		       00		      .byte.b	0
   8027  605d					      repend
   8028  605e		       00		      .byte.b	0
   8027  605e					      repend
   8028  605f		       00		      .byte.b	0
   8027  605f					      repend
   8028  6060		       00		      .byte.b	0
   8027  6060					      repend
   8028  6061		       00		      .byte.b	0
   8027  6061					      repend
   8028  6062		       00		      .byte.b	0
   8027  6062					      repend
   8028  6063		       00		      .byte.b	0
   8027  6063					      repend
   8028  6064		       00		      .byte.b	0
   8027  6064					      repend
   8028  6065		       00		      .byte.b	0
   8027  6065					      repend
   8028  6066		       00		      .byte.b	0
   8027  6066					      repend
   8028  6067		       00		      .byte.b	0
   8027  6067					      repend
   8028  6068		       00		      .byte.b	0
   8027  6068					      repend
   8028  6069		       00		      .byte.b	0
   8027  6069					      repend
   8028  606a		       00		      .byte.b	0
   8027  606a					      repend
   8028  606b		       00		      .byte.b	0
   8027  606b					      repend
   8028  606c		       00		      .byte.b	0
   8027  606c					      repend
   8028  606d		       00		      .byte.b	0
   8027  606d					      repend
   8028  606e		       00		      .byte.b	0
   8027  606e					      repend
   8028  606f		       00		      .byte.b	0
   8027  606f					      repend
   8028  6070		       00		      .byte.b	0
   8027  6070					      repend
   8028  6071		       00		      .byte.b	0
   8027  6071					      repend
   8028  6072		       00		      .byte.b	0
   8027  6072					      repend
   8028  6073		       00		      .byte.b	0
   8027  6073					      repend
   8028  6074		       00		      .byte.b	0
   8027  6074					      repend
   8028  6075		       00		      .byte.b	0
   8027  6075					      repend
   8028  6076		       00		      .byte.b	0
   8027  6076					      repend
   8028  6077		       00		      .byte.b	0
   8027  6077					      repend
   8028  6078		       00		      .byte.b	0
   8027  6078					      repend
   8028  6079		       00		      .byte.b	0
   8027  6079					      repend
   8028  607a		       00		      .byte.b	0
   8027  607a					      repend
   8028  607b		       00		      .byte.b	0
   8027  607b					      repend
   8028  607c		       00		      .byte.b	0
   8027  607c					      repend
   8028  607d		       00		      .byte.b	0
   8027  607d					      repend
   8028  607e		       00		      .byte.b	0
   8027  607e					      repend
   8028  607f		       00		      .byte.b	0
   8027  607f					      repend
   8028  6080		       00		      .byte.b	0
   8029  6081					      repend
   8030  6081				   .L0634		;  temp1 = temp1
   8031  6081
   8032  6081		       a5 cb		      LDA	temp1
   8033  6083		       85 cb		      STA	temp1
   8034  6085				   .
   8035  6085							; 
   8036  6085
   8037  6085				   .__Titlesceen
   8038  6085							; __Titlesceen
   8039  6085
   8040  6085				   .L0635		;  drop = 0
   8041  6085
   8042  6085		       a9 00		      LDA	#0
   8043  6087		       85 d1		      STA	drop
   8044  6089				   .L0636		;  asm
   8045  6089
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 3
      0  6089					      include	"titlescreen/asm/titlescreen.asm"
      1  6089
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 3
      0  6089					      include	"titlescreen/asm/layoutmacros.asm"
      1  6089
      2  6089							; the macro's used in the "titlescreen_layout.asm" file
      3  6089
      4  6089					      MAC	draw_96x2_1
      5  6089				   mk_96x2_1_on =	1
      6  6089					      jsr	draw_bmp_96x2_1
      7  6089					      ENDM
      8  6089
      9  6089					      MAC	draw_96x2_2
     10  6089				   mk_96x2_2_on =	1
     11  6089					      jsr	draw_bmp_96x2_2
     12  6089					      ENDM
     13  6089
     14  6089					      MAC	draw_96x2_3
     15  6089				   mk_96x2_3_on =	1
     16  6089					      jsr	draw_bmp_96x2_3
     17  6089					      ENDM
     18  6089
     19  6089					      MAC	draw_96x2_4
     20  6089				   mk_96x2_4_on =	1
     21  6089					      jsr	draw_bmp_96x2_4
     22  6089					      ENDM
     23  6089
     24  6089					      MAC	draw_96x2_5
     25  6089				   mk_96x2_5_on =	1
     26  6089					      jsr	draw_bmp_96x2_5
     27  6089					      ENDM
     28  6089
     29  6089					      MAC	draw_96x2_6
     30  6089				   mk_96x2_6_on =	1
     31  6089					      jsr	draw_bmp_96x2_6
     32  6089					      ENDM
     33  6089
     34  6089					      MAC	draw_96x2_7
     35  6089				   mk_96x2_7_on =	1
     36  6089					      jsr	draw_bmp_96x2_7
     37  6089					      ENDM
     38  6089
     39  6089					      MAC	draw_96x2_8
     40  6089				   mk_96x2_8_on =	1
     41  6089					      jsr	draw_bmp_96x2_8
     42  6089					      ENDM
     43  6089
     44  6089					      MAC	draw_48x1_1
     45  6089				   mk_48x1_X_on =	1
     46  6089				   mk_48x1_1_on =	1
     47  6089					      jsr	draw_bmp_48x1_1
     48  6089					      ENDM
     49  6089
     50  6089					      MAC	draw_48x1_2
     51  6089				   mk_48x1_X_on =	1
     52  6089				   mk_48x1_2_on =	1
     53  6089					      jsr	draw_bmp_48x1_2
     54  6089					      ENDM
     55  6089
     56  6089					      MAC	draw_48x1_3
     57  6089				   mk_48x1_X_on =	1
     58  6089				   mk_48x1_3_on =	1
     59  6089					      jsr	draw_bmp_48x1_3
     60  6089					      ENDM
     61  6089
     62  6089					      MAC	draw_48x1_4
     63  6089				   mk_48x1_X_on =	1
     64  6089				   mk_48x1_4_on =	1
     65  6089					      jsr	draw_bmp_48x1_4
     66  6089					      ENDM
     67  6089
     68  6089					      MAC	draw_48x1_5
     69  6089				   mk_48x1_X_on =	1
     70  6089				   mk_48x1_5_on =	1
     71  6089					      jsr	draw_bmp_48x1_5
     72  6089					      ENDM
     73  6089
     74  6089					      MAC	draw_48x1_6
     75  6089				   mk_48x1_X_on =	1
     76  6089				   mk_48x1_6_on =	1
     77  6089					      jsr	draw_bmp_48x1_6
     78  6089					      ENDM
     79  6089
     80  6089					      MAC	draw_48x1_7
     81  6089				   mk_48x1_X_on =	1
     82  6089				   mk_48x1_7_on =	1
     83  6089					      jsr	draw_bmp_48x1_7
     84  6089					      ENDM
     85  6089
     86  6089					      MAC	draw_48x1_8
     87  6089				   mk_48x1_X_on =	1
     88  6089				   mk_48x1_8_on =	1
     89  6089					      jsr	draw_bmp_48x1_8
     90  6089					      ENDM
     91  6089
     92  6089
     93  6089					      MAC	draw_48x2_1
     94  6089				   mk_48x2_X_on =	1
     95  6089				   mk_48x2_1_on =	1
     96  6089					      jsr	draw_bmp_48x2_1
     97  6089					      ENDM
     98  6089
     99  6089					      MAC	draw_48x2_2
    100  6089				   mk_48x2_X_on =	1
    101  6089				   mk_48x2_2_on =	1
    102  6089					      jsr	draw_bmp_48x2_2
    103  6089					      ENDM
    104  6089
    105  6089					      MAC	draw_48x2_3
    106  6089				   mk_48x2_X_on =	1
    107  6089				   mk_48x2_3_on =	1
    108  6089					      jsr	draw_bmp_48x2_3
    109  6089					      ENDM
    110  6089
    111  6089					      MAC	draw_48x2_4
    112  6089				   mk_48x2_X_on =	1
    113  6089				   mk_48x2_4_on =	1
    114  6089					      jsr	draw_bmp_48x2_4
    115  6089					      ENDM
    116  6089
    117  6089					      MAC	draw_48x2_5
    118  6089				   mk_48x2_X_on =	1
    119  6089				   mk_48x2_5_on =	1
    120  6089					      jsr	draw_bmp_48x2_5
    121  6089					      ENDM
    122  6089
    123  6089					      MAC	draw_48x2_6
    124  6089				   mk_48x2_X_on =	1
    125  6089				   mk_48x2_6_on =	1
    126  6089					      jsr	draw_bmp_48x2_6
    127  6089					      ENDM
    128  6089
    129  6089					      MAC	draw_48x2_7
    130  6089				   mk_48x2_X_on =	1
    131  6089				   mk_48x2_7_on =	1
    132  6089					      jsr	draw_bmp_48x2_7
    133  6089					      ENDM
    134  6089
    135  6089					      MAC	draw_48x2_8
    136  6089				   mk_48x2_X_on =	1
    137  6089				   mk_48x2_8_on =	1
    138  6089					      jsr	draw_bmp_48x2_8
    139  6089					      ENDM
    140  6089
    141  6089					      MAC	draw_player
    142  6089				   mk_player_on =	1
    143  6089					      jsr	draw_player_display
    144  6089					      ENDM
    145  6089
    146  6089					      MAC	draw_score
    147  6089				   mk_score_on =	1
    148  6089				   mk_48x1_X_on =	1
    149  6089					      jsr	draw_score_display
    150  6089					      ENDM
    151  6089
    152  6089					      MAC	draw_gameselect
    153  6089				   mk_gameselect_on =	1
    154  6089				   mk_48x1_X_on =	1
    155  6089					      jsr	draw_gameselect_display
    156  6089					      ENDM
    157  6089
    158  6089					      MAC	draw_space
    159  6089					      ldy	#{1}
    160  6089				   .loop
    161  6089					      sta	WSYNC
    162  6089					      dey
    163  6089					      bne	.loop
    164  6089					      ENDM
    165  6089
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/asm/dpcfix.asm LEVEL 3 PASS 3
      0  6089					      include	"titlescreen/asm/dpcfix.asm"
      1  6089							; reassign variables that DPC+ doesn't have
      2  6089
      3  6089				  -	      ifnconst	aux2
      4  6089				  -aux2       =	player2x
      5  6089					      endif
      6  6089				  -	      ifnconst	aux4
      7  6089				  -aux4       =	player4x
      8  6089					      endif
      9  6089				  -	      ifnconst	aux5
     10  6089				  -aux5       =	player5x
     11  6089					      endif
     12  6089				  -	      ifnconst	aux6
     13  6089				  -aux6       =	player6x
     14  6089					      endif
     15  6089
     16  6089				  -	      ifnconst	player0pointer
     17  6089				  -player0pointer =	player2y
     18  6089					      endif
     19  6089				  -	      ifnconst	player1pointer
     20  6089				  -player1pointer =	player2height	; to player3height
     21  6089					      endif
     22  6089				  -	      ifnconst	player1color
     23  6089				  -player1color =	player4height	; to player5height
     24  6089					      endif
     25  6089				  -	      ifnconst	scorepointers
     26  6089				  -scorepointers =	player6height	; to NUSIZ8
     27  6089					      endif
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 3
      0  6089					      include	"titlescreen/titlescreen_layout.asm"
      1  6089
      2  6089							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  6089							; in the order they were listed.
      4  6089							;
      5  6089							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  6089							; it won't use any rom space.
      7  6089
      8  6089					      MAC	titlescreenlayout
      9  6089					      draw_96x2_1
     10  6089					      draw_48x1_1
     11  6089					      draw_96x2_2
     12  6089					      draw_96x2_4
     13  6089					      draw_96x2_5
     14  6089					      draw_space	2
     15  6089					      draw_gameselect
     16  6089					      draw_score
     17  6089					      ENDM
     18  6089
     19  6089							; minikernel choices are:
     20  6089							;
     21  6089							; draw_48x1_1, draw_48x1_2, draw_48x1_3
     22  6089							;	The first, second, and third 48-wide single-line bitmap minikernels
     23  6089							;
     24  6089							; draw_48x2_1, draw_48x2_2, draw_48x2_3
     25  6089							;	The first, second, and third 48-wide double-line bitmap minikernels
     26  6089							;
     27  6089							; draw_96x2_1, draw_96x2_2, draw_96x2_3
     28  6089							;	The first, second, and third 96-wide double-line bitmap minikernels
     29  6089							;
     30  6089							; draw_gameselect
     31  6089							;	The game selection display minikernel
     32  6089							;
     33  6089							; draw_score
     34  6089							;	A minikernel that draws the score
     35  6089							;
     36  6089							; draw_space 10
     37  6089							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      5  6089
      6  6089				   .titledrawscreen
      7  6089				   title_eat_overscan
      8  6089							;bB runs in overscan. Wait for the overscan to run out...
      9  6089		       18		      clc
     10  608a		       ad 84 02 	      lda	INTIM
     11  608d		       30 fa		      bmi	title_eat_overscan
     12  608f		       4c 92 b0 	      jmp	title_do_vertical_sync
     13  6092
     14  6092				   title_do_vertical_sync
     15  6092		       a9 02		      lda	#2
     16  6094		       85 02		      sta	WSYNC	;one line with VSYNC
     17  6096		       85 00		      sta	VSYNC	;enable VSYNC
     18  6098		       85 02		      sta	WSYNC	;one line with VSYNC
     19  609a		       85 02		      sta	WSYNC	;one line with VSYNC
     20  609c		       a9 00		      lda	#0
     21  609e		       85 02		      sta	WSYNC	;one line with VSYNC
     22  60a0		       85 00		      sta	VSYNC	;turn off VSYNC
     23  60a2
     24  60a2							;lda #42+128
     25  60a2				  -	      ifnconst	vblank_time
     26  60a2				  -	      lda	#42+128
     27  60a2					      else
     28  60a2		       a9 ab		      lda	#vblank_time+128
     29  60a4					      endif
     30  60a4
     31  60a4		       8d 96 02 	      sta	TIM64T
     32  60a7
     33  60a7		       00 82	   titleframe =	missile0x
     34  60a7		       e6 82		      inc	titleframe	; increment the frame counter
     35  60a9
     36  60a9				  -	      ifconst	.title_vblank
     37  60a9				  -	      jsr	.title_vblank
     38  60a9					      endif
     39  60a9
     40  60a9				   title_vblank_loop
     41  60a9		       ad 84 02 	      lda	INTIM
     42  60ac		       30 fb		      bmi	title_vblank_loop
     43  60ae		       a9 00		      lda	#0
     44  60b0		       85 02		      sta	WSYNC
     45  60b2		       85 01		      sta	VBLANK
     46  60b4		       85 1d		      sta	ENAM0
     47  60b6		       85 1f		      sta	ENABL
     48  60b8
     49  60b8				   title_playfield
     50  60b8
     51  60b8							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     52  60b8
     53  60b8		       a9 e6		      lda	#230
     54  60ba		       8d 96 02 	      sta	TIM64T
     55  60bd
     56  60bd		       a9 01		      lda	#1
     57  60bf		       85 0a		      sta	CTRLPF
     58  60c1		       18		      clc
     59  60c2
     60  60c2		       a9 00		      lda	#0
     61  60c4		       85 0b		      sta	REFP0
     62  60c6		       85 0c		      sta	REFP1
     63  60c8		       85 02		      sta	WSYNC
     64  60ca		       ad 16 b1 	      lda	titlescreencolor
     65  60cd		       85 09		      sta	COLUBK
     66  60cf
      0  60cf					      titlescreenlayout
      0  60cf					      draw_96x2_1
      1  60cf		       00 01	   mk_96x2_1_on =	1
      2  60cf		       20 da b1 	      jsr	draw_bmp_96x2_1
      0  60d2					      draw_48x1_1
      1  60d2		       00 01	   mk_48x1_X_on =	1
      2  60d2		       00 01	   mk_48x1_1_on =	1
      3  60d2		       20 17 b1 	      jsr	draw_bmp_48x1_1
      0  60d5					      draw_96x2_2
      1  60d5		       00 01	   mk_96x2_2_on =	1
      2  60d5		       20 71 b3 	      jsr	draw_bmp_96x2_2
      0  60d8					      draw_96x2_4
      1  60d8		       00 01	   mk_96x2_4_on =	1
      2  60d8		       20 71 b5 	      jsr	draw_bmp_96x2_4
      0  60db					      draw_96x2_5
      1  60db		       00 01	   mk_96x2_5_on =	1
      2  60db		       20 71 b7 	      jsr	draw_bmp_96x2_5
      0  60de					      draw_space	2
      1  60de		       a0 02		      ldy	#2
      2  60e0				   .loop
      3  60e0		       85 02		      sta	WSYNC
      4  60e2		       88		      dey
      5  60e3		       d0 fb		      bne	.loop
      0  60e5					      draw_gameselect
      1  60e5		       00 01	   mk_gameselect_on =	1
      2  60e5		       00 01	   mk_48x1_X_on =	1
      3  60e5		       20 53 ba 	      jsr	draw_gameselect_display
      0  60e8					      draw_score
      1  60e8		       00 01	   mk_score_on =	1
      2  60e8		       00 01	   mk_48x1_X_on =	1
      3  60e8		       20 71 b9 	      jsr	draw_score_display
     68  60eb
     69  60eb		       4c c9 ba 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     70  60ee
------- FILE titlescreen/asm/position48.asm LEVEL 3 PASS 3
      0  60ee					      include	"titlescreen/asm/position48.asm"
      1  60ee
      2  60ee				   position48
      3  60ee
      4  60ee							;postion P0 and P1
      5  60ee
      6  60ee		       85 02		      sta	WSYNC
      7  60f0
      8  60f0		       a9 90		      lda	#$90	;2
      9  60f2		       85 20		      sta	HMP0	;3
     10  60f4		       a9 a0		      lda	#$A0	;2
     11  60f6		       85 21		      sta	HMP1	;3
     12  60f8
     13  60f8		       e6 cb		      inc	temp1
     14  60fa		       c6 cb		      dec	temp1
     15  60fc		       e6 cb		      inc	temp1
     16  60fe		       c6 cb		      dec	temp1
     17  6100		       e6 cb		      inc	temp1
      0  6102					      sleep	2
      1  6102				   .CYCLES    SET	2
      2  6102
      3  6102				  -	      IF	.CYCLES < 2
      4  6102				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6102				  -	      ERR
      6  6102					      ENDIF
      7  6102
      8  6102				  -	      IF	.CYCLES & 1
      9  6102				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6102				  -	      nop	0
     11  6102				  -	      ELSE
     12  6102				  -	      bit	VSYNC
     13  6102				  -	      ENDIF
     14  6102				  -.CYCLES    SET	.CYCLES - 3
     15  6102					      ENDIF
     16  6102
     17  6102					      REPEAT	.CYCLES / 2
     18  6102		       ea		      nop
     19  6103					      REPEND
     19  6103		       85 10		      sta	RESP0	;  +3
     20  6105		       85 11		      sta	RESP1	;  +3
     21  6107		       c6 cb		      dec	temp1	;  +5
     22  6109		       e6 cb		      inc	temp1	;  +5
     23  610b		       c6 cb		      dec	temp1	;  +5
     24  610d		       e6 cb		      inc	temp1	;  +5
     25  610f		       c6 cb		      dec	temp1	;  +5
      0  6111					      sleep	3
      1  6111				   .CYCLES    SET	3
      2  6111
      3  6111				  -	      IF	.CYCLES < 2
      4  6111				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6111				  -	      ERR
      6  6111					      ENDIF
      7  6111
      8  6111					      IF	.CYCLES & 1
      9  6111					      IFNCONST	NO_ILLEGAL_OPCODES
     10  6111		       04 00		      nop	0
     11  6113				  -	      ELSE
     12  6113				  -	      bit	VSYNC
     13  6113					      ENDIF
     14  6113				   .CYCLES    SET	.CYCLES - 3
     15  6113					      ENDIF
     16  6113
     17  6113				  -	      REPEAT	.CYCLES / 2
     18  6113				  -	      nop
     19  6113					      REPEND
     27  6113		       85 2a		      sta	HMOVE	; +76
     28  6115		       60		      RTS
     29  6116
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 3
      0  6116					      include	"titlescreen/titlescreen_color.asm"
      1  6116							; This is where the titlescreen background color gets set.
      2  6116							; You can also do a "dim titlescreencolor=[letter]" in bB
      3  6116							; if you want to change the color on the fly.
      4  6116
      5  6116				  -	      ifnconst	titlescreencolor
      6  6116				  -titlescreencolor
      7  6116					      endif
      8  6116		       00		      .byte.b	$00
      9  6117
------- FILE titlescreen/asm/titlescreen.asm
     73  6117
     74  6117					      ifconst	mk_48x1_1_on
------- FILE titlescreen/asm/48x1_1_kernel.asm LEVEL 3 PASS 3
      0  6117					      include	"titlescreen/asm/48x1_1_kernel.asm"
      1  6117
      2  6117				   draw_bmp_48x1_1
      3  6117
      4  6117		       a9 00		      lda	#0
      5  6119		       85 1b		      sta	GRP0
      6  611b		       85 1c		      sta	GRP1
      7  611d
      8  611d		       a0 0b		      ldy	#11
      9  611f				   bmp_48x1_1_pointersetup
     10  611f		       b9 53 b1 	      lda	bmp_48x1_1_values,y
     11  6122		       99 ab 00 	      sta	scorepointers,y
     12  6125		       88		      dey
     13  6126		       b9 53 b1 	      lda	bmp_48x1_1_values,y
     14  6129				  -	      ifconst	bmp_48x1_1_index
     15  6129				  -	      sec
     16  6129				  -	      sbc	bmp_48x1_1_index
     17  6129					      endif
     18  6129		       99 ab 00 	      sta	scorepointers,y
     19  612c		       88		      dey
     20  612d		       10 f0		      bpl	bmp_48x1_1_pointersetup
     21  612f
     22  612f		       a0 31		      ldy	(#bmp_48x1_1_window-1)
     23  6131		       84 91		      sty	aux2
     24  6133
     25  6133					      ifconst	bmp_48x1_1_background
     26  6133		       ad ef ba 	      lda	bmp_48x1_1_background
     27  6136				  -	      else
     28  6136				  -	      lda	titlescreencolor
     29  6136					      endif
     30  6136		       85 c7		      sta	aux4
     31  6138
     32  6138		       ad f0 ba 	      lda	bmp_48x1_1_color
     33  613b		       85 06		      sta	COLUP0	;3
     34  613d		       85 07		      sta	COLUP1	;3
     35  613f		       85 2b		      sta	HMCLR	;3
     36  6141
     37  6141		       ad 16 b1 	      lda	titlescreencolor
     38  6144		       85 08		      sta	COLUPF
     39  6146
     40  6146					      ifconst	bmp_48x1_1_PF1
     41  6146		       ad ed ba 	      lda	bmp_48x1_1_PF1
     42  6149				  -	      else
     43  6149				  -	      lda	#0
     44  6149				  -	      nop
     45  6149					      endif
     46  6149		       85 0e		      sta	PF1
     47  614b
     48  614b					      ifconst	bmp_48x1_1_PF2
     49  614b		       ad ee ba 	      lda	bmp_48x1_1_PF2
     50  614e				  -	      else
     51  614e				  -	      lda	#0
     52  614e				  -	      nop
     53  614e					      endif
     54  614e		       85 0f		      sta	PF2
     55  6150
     56  6150		       4c 5f b1 	      jmp	draw_bmp_48x1_X	; the common 1lk bitmap minikernel
     57  6153
     58  6153				   bmp_48x1_1_values
     59  6153		       00 bb		      .word.w	(bmp_48x1_1_00+#bmp_48x1_1_height-#bmp_48x1_1_window)
     60  6155		       32 bb		      .word.w	(bmp_48x1_1_01+#bmp_48x1_1_height-#bmp_48x1_1_window)
     61  6157		       64 bb		      .word.w	(bmp_48x1_1_02+#bmp_48x1_1_height-#bmp_48x1_1_window)
     62  6159		       96 bb		      .word.w	(bmp_48x1_1_03+#bmp_48x1_1_height-#bmp_48x1_1_window)
     63  615b		       c8 bb		      .word.w	(bmp_48x1_1_04+#bmp_48x1_1_height-#bmp_48x1_1_window)
     64  615d		       00 bc		      .word.w	(bmp_48x1_1_05+#bmp_48x1_1_height-#bmp_48x1_1_window)
     65  615f
------- FILE titlescreen/asm/titlescreen.asm
     76  615f					      endif		;mk_48x1_1_on
     77  615f
     78  615f				  -	      ifconst	mk_48x1_2_on
     79  615f				  -	      include	"titlescreen/asm/48x1_2_kernel.asm"
     80  615f					      endif		;mk_48x1_2_on
     81  615f
     82  615f				  -	      ifconst	mk_48x1_3_on
     83  615f				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  615f					      endif		;mk_48x1_3_on
     85  615f
     86  615f				  -	      ifconst	mk_48x1_4_on
     87  615f				  -	      include	"titlescreen/asm/48x1_4_kernel.asm"
     88  615f					      endif		;mk_48x1_4_on
     89  615f
     90  615f				  -	      ifconst	mk_48x1_5_on
     91  615f				  -	      include	"titlescreen/asm/48x1_5_kernel.asm"
     92  615f					      endif		;mk_48x1_5_on
     93  615f
     94  615f				  -	      ifconst	mk_48x1_6_on
     95  615f				  -	      include	"titlescreen/asm/48x1_6_kernel.asm"
     96  615f					      endif		;mk_48x1_6_on
     97  615f
     98  615f				  -	      ifconst	mk_48x1_7_on
     99  615f				  -	      include	"titlescreen/asm/48x1_7_kernel.asm"
    100  615f					      endif		;mk_48x1_7_on
    101  615f
    102  615f				  -	      ifconst	mk_48x1_8_on
    103  615f				  -	      include	"titlescreen/asm/48x1_8_kernel.asm"
    104  615f					      endif		;mk_48x1_8_on
    105  615f
    106  615f				  -	      ifconst	mk_48x2_1_on
    107  615f				  -	      include	"titlescreen/asm/48x2_1_kernel.asm"
    108  615f					      endif		;mk_48x2_1_on
    109  615f
    110  615f				  -	      ifconst	mk_48x2_2_on
    111  615f				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
    112  615f					      endif		;mk_48x2_2_on
    113  615f
    114  615f				  -	      ifconst	mk_48x2_3_on
    115  615f				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
    116  615f					      endif		;mk_48x2_3_on
    117  615f
    118  615f				  -	      ifconst	mk_48x2_4_on
    119  615f				  -	      include	"titlescreen/asm/48x2_4_kernel.asm"
    120  615f					      endif		;mk_48x2_4_on
    121  615f
    122  615f				  -	      ifconst	mk_48x2_5_on
    123  615f				  -	      include	"titlescreen/asm/48x2_5_kernel.asm"
    124  615f					      endif		;mk_48x2_5_on
    125  615f
    126  615f				  -	      ifconst	mk_48x2_6_on
    127  615f				  -	      include	"titlescreen/asm/48x2_6_kernel.asm"
    128  615f					      endif		;mk_48x2_6_on
    129  615f
    130  615f				  -	      ifconst	mk_48x2_7_on
    131  615f				  -	      include	"titlescreen/asm/48x2_7_kernel.asm"
    132  615f					      endif		;mk_48x2_7_on
    133  615f
    134  615f				  -	      ifconst	mk_48x2_8_on
    135  615f				  -	      include	"titlescreen/asm/48x2_8_kernel.asm"
    136  615f					      endif		;mk_48x2_8_on
    137  615f
    138  615f					      ifconst	mk_48x1_X_on
------- FILE titlescreen/asm/48x1_X_kernel.asm LEVEL 3 PASS 3
      0  615f					      include	"titlescreen/asm/48x1_X_kernel.asm"
      1  615f				   draw_bmp_48x1_X
      2  615f
      3  615f		       a9 03		      lda	#3
      4  6161		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      5  6163		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
      6  6165
      7  6165		       ba		      tsx
      8  6166		       86 f6		      stx	stack1	;save the stack pointer
      9  6168
     10  6168		       20 ee b0 	      jsr	position48
     11  616b
     12  616b		       a9 03		      lda	#3	;2
     13  616d		       85 25		      sta	VDELP0	;3
     14  616f		       85 26		      sta	VDELP1	;3
     15  6171
     16  6171		       a9 01		      lda	#1	;2
     17  6173		       85 0a		      sta	CTRLPF	;3
     18  6175
     19  6175							;enough cycles have passed for the HMOV, so we can clear HMCLR
     20  6175		       85 2b		      sta	HMCLR
     21  6177
     22  6177		       85 02		      sta	WSYNC
     23  6179
     24  6179		       e6 cb		      inc	temp1	;5
     25  617b		       c6 cb		      dec	temp1	;5
     26  617d		       e6 cb		      inc	temp1	;5
     27  617f		       c6 cb		      dec	temp1	;5
     28  6181		       e6 cb		      inc	temp1	;5
     29  6183		       c6 cb		      dec	temp1	;5
     30  6185		       e6 cb		      inc	temp1	;5
     31  6187		       c6 cb		      dec	temp1	;5
     32  6189		       e6 cb		      inc	temp1	;5
     33  618b		       c6 cb		      dec	temp1	;5
     34  618d
      0  618d					      sleep	5
      1  618d				   .CYCLES    SET	5
      2  618d
      3  618d				  -	      IF	.CYCLES < 2
      4  618d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  618d				  -	      ERR
      6  618d					      ENDIF
      7  618d
      8  618d					      IF	.CYCLES & 1
      9  618d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  618d		       04 00		      nop	0
     11  618f				  -	      ELSE
     12  618f				  -	      bit	VSYNC
     13  618f					      ENDIF
     14  618f				   .CYCLES    SET	.CYCLES - 3
     15  618f					      ENDIF
     16  618f
     17  618f					      REPEAT	.CYCLES / 2
     18  618f		       ea		      nop
     19  6190					      REPEND
     36  6190
     37  6190		       c8		      iny
     38  6191
     39  6191		       4c 94 b1 	      jmp	pf48x1_X_loop_entry
     40  6194
     41  6194				  -	      if	>. != >[.+$2a]
     42  6194				  -	      align	256
     43  6194					      endif
     44  6194
     45  6194				   pf48x1_X_loop_entry
     46  6194				   pf48x1_X_loop
     47  6194		       88		      dey		;2
     48  6195		       84 91		      sty	aux2	;3
     49  6197		       b1 ab		      lda	(scorepointers+0),y	;5
     50  6199		       85 1b		      sta	GRP0	;3
     51  619b
     52  619b		       b1 ad		      lda	(scorepointers+2),y	;5
     53  619d		       85 1c		      sta	GRP1	;3
     54  619f		       b1 af		      lda	(scorepointers+4),y	;5
     55  61a1		       85 1b		      sta	GRP0	;3
     56  61a3
      0  61a3					      sleep	2	; I could make this indirect, if we want to burn more rom
      1  61a3				   .CYCLES    SET	2
      2  61a3
      3  61a3				  -	      IF	.CYCLES < 2
      4  61a3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  61a3				  -	      ERR
      6  61a3					      ENDIF
      7  61a3
      8  61a3				  -	      IF	.CYCLES & 1
      9  61a3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  61a3				  -	      nop	0
     11  61a3				  -	      ELSE
     12  61a3				  -	      bit	VSYNC
     13  61a3				  -	      ENDIF
     14  61a3				  -.CYCLES    SET	.CYCLES - 3
     15  61a3					      ENDIF
     16  61a3
     17  61a3					      REPEAT	.CYCLES / 2
     18  61a3		       ea		      nop
     19  61a4					      REPEND
     58  61a4		       a5 c7		      lda	aux4	;3
     59  61a6		       85 08		      sta	COLUPF	;3 this is a big fat waste...
     60  61a8
     61  61a8		       b3 b5		      lax	(scorepointers+10),y	;5
     62  61aa		       b1 b3		      lda	(scorepointers+8),y	;5
     63  61ac		       85 f7		      sta	stack2	;3
     64  61ae		       b1 b1		      lda	(scorepointers+6),y	;5
     65  61b0		       a4 f7		      ldy	stack2	;3
     66  61b2
     67  61b2		       85 1c		      sta	GRP1	;3
     68  61b4		       84 1b		      sty	GRP0	;3
     69  61b6		       86 1c		      stx	GRP1	;3
     70  61b8		       84 1b		      sty	GRP0	;3
     71  61ba
     72  61ba		       a4 91		      ldy	aux2	;3
     73  61bc		       d0 d6		      bne	pf48x1_X_loop	;2/3
     74  61be
     75  61be				   pf48x1_X_codeend
     76  61be							;echo "critical code in 48x1 is ",(pf48x1_X_codeend-pf48x1_X_loop), " bytes long."
     77  61be
     78  61be		       a9 00		      lda	#0
     79  61c0		       85 1b		      sta	GRP0
     80  61c2		       85 1c		      sta	GRP1
     81  61c4		       85 1b		      sta	GRP0
     82  61c6		       85 1c		      sta	GRP1
     83  61c8		       85 1f		      sta	ENABL
     84  61ca		       85 1d		      sta	ENAM0
     85  61cc		       85 25		      sta	VDELP0
     86  61ce		       85 26		      sta	VDELP1
     87  61d0		       85 0d		      sta	PF0
     88  61d2		       85 0e		      sta	PF1
     89  61d4		       85 0f		      sta	PF2
     90  61d6
     91  61d6		       a6 f6		      ldx	stack1	;restore the stack pointer
     92  61d8		       9a		      txs
     93  61d9		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    140  61da					      endif		;mk_48x1_X_on
    141  61da
    142  61da				  -	      ifconst	mk_48x2_X_on
    143  61da				  -	      include	"titlescreen/asm/48x2_X_kernel.asm"
    144  61da					      endif		;mk_48x2_X_on
    145  61da
    146  61da
    147  61da					      ifconst	mk_96x2_1_on
------- FILE titlescreen/asm/96x2_1_kernel.asm LEVEL 3 PASS 3
      0  61da					      include	"titlescreen/asm/96x2_1_kernel.asm"
      1  61da				   draw_bmp_96x2_1
      2  61da
      3  61da				  -	      ifconst	bmp_96x2_1_index
      4  61da				  -	      lda	#(bmp_96x2_1_height-1)
      5  61da				  -	      sec
      6  61da				  -	      sbc	bmp_96x2_1_index
      7  61da				  -	      tay
      8  61da				  -	      sbc	#bmp_96x2_1_window
      9  61da				  -	      sta	temp1
     10  61da					      else
     11  61da		       a0 13		      ldy	#(bmp_96x2_1_window-1)
     12  61dc		       a9 ff		      lda	#255
     13  61de		       85 cb		      sta	temp1
     14  61e0					      endif
     15  61e0
     16  61e0		       a9 03		      lda	#3
     17  61e2		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  61e4		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  61e6		       a9 00		      lda	#0
     20  61e8
     21  61e8		       b9 33 bc 	      lda	bmp_96x2_1_colors,y	;4
     22  61eb				  -	      ifconst	bmp_96x2_1_fade
     23  61eb				  -	      and	bmp_96x2_1_fade
     24  61eb					      endif
     25  61eb		       85 06		      sta	COLUP0	;3
     26  61ed		       85 07		      sta	COLUP1	;3
     27  61ef		       85 2b		      sta	HMCLR	;3
     28  61f1
     29  61f1		       a5 82		      lda	titleframe
     30  61f3		       29 01		      and	#1
     31  61f5		       f0 03		      beq	jmp_pf96x2_1_frame0
     32  61f7		       4c a1 b2 	      jmp	pf96x2_1_frame1
     33  61fa				   jmp_pf96x2_1_frame0
     34  61fa		       4c fd b1 	      jmp	pf96x2_1_frame0
     35  61fd
     36  61fd				   pf96x2_1_frame0
     37  61fd							;postion P0 and P1
     38  61fd		       85 02		      sta	WSYNC
     39  61ff		       a9 e0		      lda	#%11100000
     40  6201		       85 20		      sta	HMP0
     41  6203		       a9 10		      lda	#%00010000
     42  6205		       85 21		      sta	HMP1
     43  6207		       85 02		      sta	WSYNC
      0  6209					      sleep	28
      1  6209				   .CYCLES    SET	28
      2  6209
      3  6209				  -	      IF	.CYCLES < 2
      4  6209				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6209				  -	      ERR
      6  6209					      ENDIF
      7  6209
      8  6209				  -	      IF	.CYCLES & 1
      9  6209				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6209				  -	      nop	0
     11  6209				  -	      ELSE
     12  6209				  -	      bit	VSYNC
     13  6209				  -	      ENDIF
     14  6209				  -.CYCLES    SET	.CYCLES - 3
     15  6209					      ENDIF
     16  6209
     17  6209					      REPEAT	.CYCLES / 2
     18  6209		       ea		      nop
     17  6209					      REPEND
     18  620a		       ea		      nop
     17  620a					      REPEND
     18  620b		       ea		      nop
     17  620b					      REPEND
     18  620c		       ea		      nop
     17  620c					      REPEND
     18  620d		       ea		      nop
     17  620d					      REPEND
     18  620e		       ea		      nop
     17  620e					      REPEND
     18  620f		       ea		      nop
     17  620f					      REPEND
     18  6210		       ea		      nop
     17  6210					      REPEND
     18  6211		       ea		      nop
     17  6211					      REPEND
     18  6212		       ea		      nop
     17  6212					      REPEND
     18  6213		       ea		      nop
     17  6213					      REPEND
     18  6214		       ea		      nop
     17  6214					      REPEND
     18  6215		       ea		      nop
     17  6215					      REPEND
     18  6216		       ea		      nop
     19  6217					      REPEND
     45  6217		       85 10		      sta	RESP0
      0  6219					      sleep	14
      1  6219				   .CYCLES    SET	14
      2  6219
      3  6219				  -	      IF	.CYCLES < 2
      4  6219				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6219				  -	      ERR
      6  6219					      ENDIF
      7  6219
      8  6219				  -	      IF	.CYCLES & 1
      9  6219				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6219				  -	      nop	0
     11  6219				  -	      ELSE
     12  6219				  -	      bit	VSYNC
     13  6219				  -	      ENDIF
     14  6219				  -.CYCLES    SET	.CYCLES - 3
     15  6219					      ENDIF
     16  6219
     17  6219					      REPEAT	.CYCLES / 2
     18  6219		       ea		      nop
     17  6219					      REPEND
     18  621a		       ea		      nop
     17  621a					      REPEND
     18  621b		       ea		      nop
     17  621b					      REPEND
     18  621c		       ea		      nop
     17  621c					      REPEND
     18  621d		       ea		      nop
     17  621d					      REPEND
     18  621e		       ea		      nop
     17  621e					      REPEND
     18  621f		       ea		      nop
     19  6220					      REPEND
     47  6220		       85 11		      sta	RESP1
     48  6222		       85 02		      sta	WSYNC
     49  6224		       85 2a		      sta	HMOVE
     50  6226
     51  6226		       85 02		      sta	WSYNC
     52  6228		       85 2b		      sta	HMCLR
     53  622a		       85 02		      sta	WSYNC
     54  622c
      0  622c					      sleep	4
      1  622c				   .CYCLES    SET	4
      2  622c
      3  622c				  -	      IF	.CYCLES < 2
      4  622c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  622c				  -	      ERR
      6  622c					      ENDIF
      7  622c
      8  622c				  -	      IF	.CYCLES & 1
      9  622c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  622c				  -	      nop	0
     11  622c				  -	      ELSE
     12  622c				  -	      bit	VSYNC
     13  622c				  -	      ENDIF
     14  622c				  -.CYCLES    SET	.CYCLES - 3
     15  622c					      ENDIF
     16  622c
     17  622c					      REPEAT	.CYCLES / 2
     18  622c		       ea		      nop
     17  622c					      REPEND
     18  622d		       ea		      nop
     19  622e					      REPEND
     56  622e		       4c 31 b2 	      jmp	pfline_96x2_1_frame0
     57  6231							;align so our branch doesn't unexpectedly cross a page...
     58  6231				  -	      if	>. != >[.+$70]
     59  6231				  -	      align	256
     60  6231					      endif
     61  6231
     62  6231				   pfline_96x2_1_frame0
     63  6231		       a9 80		      lda	#$80	;2
     64  6233		       85 20		      sta	HMP0	;3
     65  6235		       85 21		      sta	HMP1	;3
     66  6237
     67  6237		       b9 bf bc 	      lda	bmp_96x2_1_06,y	;4
     68  623a		       85 1c		      sta	GRP1	;3
     69  623c
     70  623c		       b9 47 bc 	      lda	bmp_96x2_1_00,y
     71  623f		       85 1b		      sta	GRP0
     72  6241		       b9 6f bc 	      lda	bmp_96x2_1_02,y
     73  6244		       85 1b		      sta	GRP0
     74  6246		       b9 97 bc 	      lda	bmp_96x2_1_04,y
     75  6249		       85 1b		      sta	GRP0
     76  624b
      0  624b					      sleep	2
      1  624b				   .CYCLES    SET	2
      2  624b
      3  624b				  -	      IF	.CYCLES < 2
      4  624b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  624b				  -	      ERR
      6  624b					      ENDIF
      7  624b
      8  624b				  -	      IF	.CYCLES & 1
      9  624b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  624b				  -	      nop	0
     11  624b				  -	      ELSE
     12  624b				  -	      bit	VSYNC
     13  624b				  -	      ENDIF
     14  624b				  -.CYCLES    SET	.CYCLES - 3
     15  624b					      ENDIF
     16  624b
     17  624b					      REPEAT	.CYCLES / 2
     18  624b		       ea		      nop
     19  624c					      REPEND
     78  624c
     79  624c		       b9 e7 bc 	      lda	bmp_96x2_1_08,y
     80  624f		       85 1c		      sta	GRP1
     81  6251		       b9 14 bd 	      lda	bmp_96x2_1_10,y
     82  6254		       85 1c		      sta	GRP1
     83  6256
     84  6256		       b9 5b bc 	      lda	bmp_96x2_1_01,y
     85  6259		       85 1b		      sta	GRP0
     86  625b
      0  625b					      sleep	8
      1  625b				   .CYCLES    SET	8
      2  625b
      3  625b				  -	      IF	.CYCLES < 2
      4  625b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  625b				  -	      ERR
      6  625b					      ENDIF
      7  625b
      8  625b				  -	      IF	.CYCLES & 1
      9  625b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  625b				  -	      nop	0
     11  625b				  -	      ELSE
     12  625b				  -	      bit	VSYNC
     13  625b				  -	      ENDIF
     14  625b				  -.CYCLES    SET	.CYCLES - 3
     15  625b					      ENDIF
     16  625b
     17  625b					      REPEAT	.CYCLES / 2
     18  625b		       ea		      nop
     17  625b					      REPEND
     18  625c		       ea		      nop
     17  625c					      REPEND
     18  625d		       ea		      nop
     17  625d					      REPEND
     18  625e		       ea		      nop
     19  625f					      REPEND
     88  625f
     89  625f							;sta WSYNC	;=0
     90  625f		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  6261
     92  6261		       b9 32 bc 	      lda	bmp_96x2_1_colors-1,y	;4 - get the title color early and store it for later
     93  6264				  -	      ifconst	bmp_96x2_1_fade
     94  6264				  -	      and	bmp_96x2_1_fade
     95  6264					      else
      0  6264					      sleep	3
      1  6264				   .CYCLES    SET	3
      2  6264
      3  6264				  -	      IF	.CYCLES < 2
      4  6264				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6264				  -	      ERR
      6  6264					      ENDIF
      7  6264
      8  6264					      IF	.CYCLES & 1
      9  6264					      IFNCONST	NO_ILLEGAL_OPCODES
     10  6264		       04 00		      nop	0
     11  6266				  -	      ELSE
     12  6266				  -	      bit	VSYNC
     13  6266					      ENDIF
     14  6266				   .CYCLES    SET	.CYCLES - 3
     15  6266					      ENDIF
     16  6266
     17  6266				  -	      REPEAT	.CYCLES / 2
     18  6266				  -	      nop
     19  6266					      REPEND
     97  6266					      endif
     98  6266		       aa		      tax
     99  6267
    100  6267		       a9 00		      lda	#0	;2
    101  6269		       85 20		      sta	HMP0	;3
    102  626b		       85 21		      sta	HMP1	;3
    103  626d
      0  626d					      sleep	7
      1  626d				   .CYCLES    SET	7
      2  626d
      3  626d				  -	      IF	.CYCLES < 2
      4  626d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  626d				  -	      ERR
      6  626d					      ENDIF
      7  626d
      8  626d					      IF	.CYCLES & 1
      9  626d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  626d		       04 00		      nop	0
     11  626f				  -	      ELSE
     12  626f				  -	      bit	VSYNC
     13  626f					      ENDIF
     14  626f				   .CYCLES    SET	.CYCLES - 3
     15  626f					      ENDIF
     16  626f
     17  626f					      REPEAT	.CYCLES / 2
     18  626f		       ea		      nop
     17  626f					      REPEND
     18  6270		       ea		      nop
     19  6271					      REPEND
    105  6271
    106  6271		       b9 d3 bc 	      lda	bmp_96x2_1_07,y
    107  6274		       85 1c		      sta	GRP1
    108  6276
    109  6276		       b9 83 bc 	      lda	bmp_96x2_1_03,y	;5
    110  6279		       85 1b		      sta	GRP0	;3 =  8
    111  627b		       b9 ab bc 	      lda	bmp_96x2_1_05,y	;5
    112  627e		       85 1b		      sta	GRP0	;3 =  8
    113  6280
      0  6280					      sleep	2
      1  6280				   .CYCLES    SET	2
      2  6280
      3  6280				  -	      IF	.CYCLES < 2
      4  6280				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6280				  -	      ERR
      6  6280					      ENDIF
      7  6280
      8  6280				  -	      IF	.CYCLES & 1
      9  6280				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6280				  -	      nop	0
     11  6280				  -	      ELSE
     12  6280				  -	      bit	VSYNC
     13  6280				  -	      ENDIF
     14  6280				  -.CYCLES    SET	.CYCLES - 3
     15  6280					      ENDIF
     16  6280
     17  6280					      REPEAT	.CYCLES / 2
     18  6280		       ea		      nop
     19  6281					      REPEND
    115  6281
    116  6281		       b9 00 bd 	      lda	bmp_96x2_1_09,y	;5
    117  6284		       85 1c		      sta	GRP1	;3 =  8
    118  6286		       b9 28 bd 	      lda	bmp_96x2_1_11,y	;5
    119  6289		       85 1c		      sta	GRP1	;3 =  8
    120  628b
      0  628b					      sleep	2
      1  628b				   .CYCLES    SET	2
      2  628b
      3  628b				  -	      IF	.CYCLES < 2
      4  628b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  628b				  -	      ERR
      6  628b					      ENDIF
      7  628b
      8  628b				  -	      IF	.CYCLES & 1
      9  628b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  628b				  -	      nop	0
     11  628b				  -	      ELSE
     12  628b				  -	      bit	VSYNC
     13  628b				  -	      ENDIF
     14  628b				  -.CYCLES    SET	.CYCLES - 3
     15  628b					      ENDIF
     16  628b
     17  628b					      REPEAT	.CYCLES / 2
     18  628b		       ea		      nop
     19  628c					      REPEND
    122  628c		       86 07		      stx	COLUP1
    123  628e		       86 06		      stx	COLUP0
    124  6290
    125  6290		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  6292					      sleep	2
      1  6292				   .CYCLES    SET	2
      2  6292
      3  6292				  -	      IF	.CYCLES < 2
      4  6292				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6292				  -	      ERR
      6  6292					      ENDIF
      7  6292
      8  6292				  -	      IF	.CYCLES & 1
      9  6292				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6292				  -	      nop	0
     11  6292				  -	      ELSE
     12  6292				  -	      bit	VSYNC
     13  6292				  -	      ENDIF
     14  6292				  -.CYCLES    SET	.CYCLES - 3
     15  6292					      ENDIF
     16  6292
     17  6292					      REPEAT	.CYCLES / 2
     18  6292		       ea		      nop
     19  6293					      REPEND
    127  6293		       88		      dey
    128  6294
    129  6294		       c4 cb		      cpy	temp1	;3
    130  6296		       d0 99		      bne	pfline_96x2_1_frame0	;2/3
    131  6298
    132  6298				   pf96x2_1_0codeend
    133  6298							;echo "critical code #1 in 96x2_1 is ",(pf96x2_1_0codeend-pfline_96x2_1_frame0), " bytes long."
    134  6298
    135  6298		       a9 00		      lda	#0
    136  629a		       85 1b		      sta	GRP0
    137  629c		       85 1c		      sta	GRP1
    138  629e		       4c 6e b3 	      jmp	pfdone_96x2_1
    139  62a1
    140  62a1
    141  62a1				   pf96x2_1_frame1
    142  62a1
    143  62a1							;postion P0 and P1
    144  62a1		       85 02		      sta	WSYNC
    145  62a3		       a9 20		      lda	#%00100000
    146  62a5		       85 20		      sta	HMP0
    147  62a7		       a9 00		      lda	#0
    148  62a9		       a9 f0		      lda	#%11110000
    149  62ab		       85 21		      sta	HMP1
    150  62ad		       85 02		      sta	WSYNC
      0  62af					      sleep	32
      1  62af				   .CYCLES    SET	32
      2  62af
      3  62af				  -	      IF	.CYCLES < 2
      4  62af				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  62af				  -	      ERR
      6  62af					      ENDIF
      7  62af
      8  62af				  -	      IF	.CYCLES & 1
      9  62af				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  62af				  -	      nop	0
     11  62af				  -	      ELSE
     12  62af				  -	      bit	VSYNC
     13  62af				  -	      ENDIF
     14  62af				  -.CYCLES    SET	.CYCLES - 3
     15  62af					      ENDIF
     16  62af
     17  62af					      REPEAT	.CYCLES / 2
     18  62af		       ea		      nop
     17  62af					      REPEND
     18  62b0		       ea		      nop
     17  62b0					      REPEND
     18  62b1		       ea		      nop
     17  62b1					      REPEND
     18  62b2		       ea		      nop
     17  62b2					      REPEND
     18  62b3		       ea		      nop
     17  62b3					      REPEND
     18  62b4		       ea		      nop
     17  62b4					      REPEND
     18  62b5		       ea		      nop
     17  62b5					      REPEND
     18  62b6		       ea		      nop
     17  62b6					      REPEND
     18  62b7		       ea		      nop
     17  62b7					      REPEND
     18  62b8		       ea		      nop
     17  62b8					      REPEND
     18  62b9		       ea		      nop
     17  62b9					      REPEND
     18  62ba		       ea		      nop
     17  62ba					      REPEND
     18  62bb		       ea		      nop
     17  62bb					      REPEND
     18  62bc		       ea		      nop
     17  62bc					      REPEND
     18  62bd		       ea		      nop
     17  62bd					      REPEND
     18  62be		       ea		      nop
     19  62bf					      REPEND
    152  62bf		       85 10		      sta	RESP0
      0  62c1					      sleep	12
      1  62c1				   .CYCLES    SET	12
      2  62c1
      3  62c1				  -	      IF	.CYCLES < 2
      4  62c1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  62c1				  -	      ERR
      6  62c1					      ENDIF
      7  62c1
      8  62c1				  -	      IF	.CYCLES & 1
      9  62c1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  62c1				  -	      nop	0
     11  62c1				  -	      ELSE
     12  62c1				  -	      bit	VSYNC
     13  62c1				  -	      ENDIF
     14  62c1				  -.CYCLES    SET	.CYCLES - 3
     15  62c1					      ENDIF
     16  62c1
     17  62c1					      REPEAT	.CYCLES / 2
     18  62c1		       ea		      nop
     17  62c1					      REPEND
     18  62c2		       ea		      nop
     17  62c2					      REPEND
     18  62c3		       ea		      nop
     17  62c3					      REPEND
     18  62c4		       ea		      nop
     17  62c4					      REPEND
     18  62c5		       ea		      nop
     17  62c5					      REPEND
     18  62c6		       ea		      nop
     19  62c7					      REPEND
    154  62c7		       85 11		      sta	RESP1
    155  62c9		       85 02		      sta	WSYNC
    156  62cb		       85 2a		      sta	HMOVE
    157  62cd
    158  62cd		       85 02		      sta	WSYNC
    159  62cf		       85 2b		      sta	HMCLR
    160  62d1
    161  62d1
    162  62d1
    163  62d1		       85 02		      sta	WSYNC
      0  62d3					      sleep	3
      1  62d3				   .CYCLES    SET	3
      2  62d3
      3  62d3				  -	      IF	.CYCLES < 2
      4  62d3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  62d3				  -	      ERR
      6  62d3					      ENDIF
      7  62d3
      8  62d3					      IF	.CYCLES & 1
      9  62d3					      IFNCONST	NO_ILLEGAL_OPCODES
     10  62d3		       04 00		      nop	0
     11  62d5				  -	      ELSE
     12  62d5				  -	      bit	VSYNC
     13  62d5					      ENDIF
     14  62d5				   .CYCLES    SET	.CYCLES - 3
     15  62d5					      ENDIF
     16  62d5
     17  62d5				  -	      REPEAT	.CYCLES / 2
     18  62d5				  -	      nop
     19  62d5					      REPEND
    165  62d5		       4c 00 b3 	      jmp	pfline_96x2_1_frame1
    166  62d8
    167  62d8							;align so our branch doesn't unexpectedly cross a page...
    168  62d8					      if	>. != >[.+$70]
    169  6300		       00 00 00 00*	      align	256
    170  6300					      endif
    171  6300
    172  6300				   pfline_96x2_1_frame1
    173  6300
    174  6300		       85 2a		      sta	HMOVE
    175  6302
    176  6302		       b9 d3 bc 	      lda	bmp_96x2_1_07,y	;4
    177  6305		       85 1c		      sta	GRP1	;3
    178  6307
    179  6307		       a9 00		      lda	#$0	;2
    180  6309		       85 20		      sta	HMP0	;3
    181  630b		       85 21		      sta	HMP1	;3
    182  630d
    183  630d		       b9 5b bc 	      lda	bmp_96x2_1_01,y
    184  6310		       8d 1b 00 	      sta.w	GRP0
    185  6313		       b9 83 bc 	      lda	bmp_96x2_1_03,y
    186  6316		       85 1b		      sta	GRP0
    187  6318		       b9 ab bc 	      lda	bmp_96x2_1_05,y
    188  631b		       85 1b		      sta	GRP0
    189  631d
      0  631d					      sleep	2
      1  631d				   .CYCLES    SET	2
      2  631d
      3  631d				  -	      IF	.CYCLES < 2
      4  631d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  631d				  -	      ERR
      6  631d					      ENDIF
      7  631d
      8  631d				  -	      IF	.CYCLES & 1
      9  631d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  631d				  -	      nop	0
     11  631d				  -	      ELSE
     12  631d				  -	      bit	VSYNC
     13  631d				  -	      ENDIF
     14  631d				  -.CYCLES    SET	.CYCLES - 3
     15  631d					      ENDIF
     16  631d
     17  631d					      REPEAT	.CYCLES / 2
     18  631d		       ea		      nop
     19  631e					      REPEND
    191  631e
    192  631e		       b9 00 bd 	      lda	bmp_96x2_1_09,y
    193  6321		       85 1c		      sta	GRP1
    194  6323		       b9 28 bd 	      lda	bmp_96x2_1_11,y
    195  6326		       85 1c		      sta	GRP1
    196  6328
    197  6328		       b9 47 bc 	      lda	bmp_96x2_1_00,y
    198  632b		       85 1b		      sta	GRP0
    199  632d
    200  632d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    201  6330
    202  6330							;sta WSYNC	;=0 -----------------------------------------
    203  6330
    204  6330		       b9 bf bc 	      lda	bmp_96x2_1_06,y
    205  6333		       85 1c		      sta	GRP1
    206  6335
      0  6335					      sleep	8
      1  6335				   .CYCLES    SET	8
      2  6335
      3  6335				  -	      IF	.CYCLES < 2
      4  6335				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6335				  -	      ERR
      6  6335					      ENDIF
      7  6335
      8  6335				  -	      IF	.CYCLES & 1
      9  6335				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6335				  -	      nop	0
     11  6335				  -	      ELSE
     12  6335				  -	      bit	VSYNC
     13  6335				  -	      ENDIF
     14  6335				  -.CYCLES    SET	.CYCLES - 3
     15  6335					      ENDIF
     16  6335
     17  6335					      REPEAT	.CYCLES / 2
     18  6335		       ea		      nop
     17  6335					      REPEND
     18  6336		       ea		      nop
     17  6336					      REPEND
     18  6337		       ea		      nop
     17  6337					      REPEND
     18  6338		       ea		      nop
     19  6339					      REPEND
    208  6339
    209  6339		       b9 32 bc 	      lda	bmp_96x2_1_colors-1,y	;get the title color early and store it for later
    210  633c		       aa		      tax		;2
    211  633d
      0  633d					      sleep	3
      1  633d				   .CYCLES    SET	3
      2  633d
      3  633d				  -	      IF	.CYCLES < 2
      4  633d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  633d				  -	      ERR
      6  633d					      ENDIF
      7  633d
      8  633d					      IF	.CYCLES & 1
      9  633d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  633d		       04 00		      nop	0
     11  633f				  -	      ELSE
     12  633f				  -	      bit	VSYNC
     13  633f					      ENDIF
     14  633f				   .CYCLES    SET	.CYCLES - 3
     15  633f					      ENDIF
     16  633f
     17  633f				  -	      REPEAT	.CYCLES / 2
     18  633f				  -	      nop
     19  633f					      REPEND
    213  633f
    214  633f		       a9 80		      lda	#$80	;2
    215  6341		       85 20		      sta	HMP0	;3
    216  6343		       85 21		      sta	HMP1	;3
    217  6345
    218  6345
    219  6345		       b9 6f bc 	      lda	bmp_96x2_1_02,y	;5
    220  6348		       85 1b		      sta	GRP0	;3 =  8
    221  634a
    222  634a		       b9 97 bc 	      lda	bmp_96x2_1_04,y	;5
    223  634d		       85 1b		      sta	GRP0	;3 =  8
    224  634f
      0  634f					      sleep	2
      1  634f				   .CYCLES    SET	2
      2  634f
      3  634f				  -	      IF	.CYCLES < 2
      4  634f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  634f				  -	      ERR
      6  634f					      ENDIF
      7  634f
      8  634f				  -	      IF	.CYCLES & 1
      9  634f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  634f				  -	      nop	0
     11  634f				  -	      ELSE
     12  634f				  -	      bit	VSYNC
     13  634f				  -	      ENDIF
     14  634f				  -.CYCLES    SET	.CYCLES - 3
     15  634f					      ENDIF
     16  634f
     17  634f					      REPEAT	.CYCLES / 2
     18  634f		       ea		      nop
     19  6350					      REPEND
    226  6350
    227  6350		       b9 e7 bc 	      lda	bmp_96x2_1_08,y	;5
    228  6353		       85 1c		      sta	GRP1	;3 =  8
    229  6355
    230  6355		       b9 14 bd 	      lda	bmp_96x2_1_10,y	;5
    231  6358		       85 1c		      sta	GRP1	;3 =  8
    232  635a
      0  635a					      sleep	4
      1  635a				   .CYCLES    SET	4
      2  635a
      3  635a				  -	      IF	.CYCLES < 2
      4  635a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  635a				  -	      ERR
      6  635a					      ENDIF
      7  635a
      8  635a				  -	      IF	.CYCLES & 1
      9  635a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  635a				  -	      nop	0
     11  635a				  -	      ELSE
     12  635a				  -	      bit	VSYNC
     13  635a				  -	      ENDIF
     14  635a				  -.CYCLES    SET	.CYCLES - 3
     15  635a					      ENDIF
     16  635a
     17  635a					      REPEAT	.CYCLES / 2
     18  635a		       ea		      nop
     17  635a					      REPEND
     18  635b		       ea		      nop
     19  635c					      REPEND
    234  635c
    235  635c		       88		      dey
    236  635d
    237  635d		       8a		      txa
    238  635e				  -	      ifconst	bmp_96x2_1_fade
    239  635e				  -	      and	bmp_96x2_1_fade
    240  635e					      else
      0  635e					      sleep	3
      1  635e				   .CYCLES    SET	3
      2  635e
      3  635e				  -	      IF	.CYCLES < 2
      4  635e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  635e				  -	      ERR
      6  635e					      ENDIF
      7  635e
      8  635e					      IF	.CYCLES & 1
      9  635e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  635e		       04 00		      nop	0
     11  6360				  -	      ELSE
     12  6360				  -	      bit	VSYNC
     13  6360					      ENDIF
     14  6360				   .CYCLES    SET	.CYCLES - 3
     15  6360					      ENDIF
     16  6360
     17  6360				  -	      REPEAT	.CYCLES / 2
     18  6360				  -	      nop
     19  6360					      REPEND
    242  6360					      endif
    243  6360		       85 07		      sta	COLUP1	;3
    244  6362		       85 06		      sta	COLUP0	;3
    245  6364
    246  6364		       c4 cb		      cpy	temp1	;2
    247  6366		       d0 98		      bne	pfline_96x2_1_frame1	;2/3
    248  6368
    249  6368				   pf96x2_1_1codeend
    250  6368							;echo "critical code #2 in 96x2_1 is ",(pf96x2_1_1codeend-pfline_96x2_1_frame1), " bytes long."
    251  6368
    252  6368		       a9 00		      lda	#0
    253  636a		       85 1b		      sta	GRP0
    254  636c		       85 1c		      sta	GRP1
    255  636e
    256  636e				   pfdone_96x2_1
    257  636e		       85 02		      sta	WSYNC	; debug
    258  6370
    259  6370		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    149  6371					      endif		;mk_96x2_1_on
    150  6371
    151  6371					      ifconst	mk_96x2_2_on
------- FILE titlescreen/asm/96x2_2_kernel.asm LEVEL 3 PASS 3
      0  6371					      include	"titlescreen/asm/96x2_2_kernel.asm"
      1  6371				   draw_bmp_96x2_2
      2  6371
      3  6371				  -	      ifconst	bmp_96x2_2_index
      4  6371				  -	      lda	#(bmp_96x2_2_height-1)
      5  6371				  -	      sec
      6  6371				  -	      sbc	bmp_96x2_2_index
      7  6371				  -	      tay
      8  6371				  -	      sbc	#bmp_96x2_2_window
      9  6371				  -	      sta	temp1
     10  6371					      else
     11  6371		       a0 04		      ldy	#(bmp_96x2_2_window-1)
     12  6373		       a9 ff		      lda	#255
     13  6375		       85 cb		      sta	temp1
     14  6377					      endif
     15  6377
     16  6377		       a9 03		      lda	#3
     17  6379		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  637b		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  637d		       a9 00		      lda	#0
     20  637f
     21  637f		       b9 3d bd 	      lda	bmp_96x2_2_colors,y	;4
     22  6382				  -	      ifconst	bmp_96x2_2_fade
     23  6382				  -	      and	bmp_96x2_2_fade
     24  6382					      endif
     25  6382		       85 06		      sta	COLUP0	;3
     26  6384		       85 07		      sta	COLUP1	;3
     27  6386		       85 2b		      sta	HMCLR	;3
     28  6388
     29  6388		       a5 82		      lda	titleframe
     30  638a		       29 01		      and	#1
     31  638c		       f0 03		      beq	jmp_pf96x2_2_frame0
     32  638e		       4c 70 b4 	      jmp	pf96x2_2_frame1
     33  6391				   jmp_pf96x2_2_frame0
     34  6391		       4c 94 b3 	      jmp	pf96x2_2_frame0
     35  6394
     36  6394				   pf96x2_2_frame0
     37  6394							;postion P0 and P1
     38  6394		       85 02		      sta	WSYNC
     39  6396		       a9 e0		      lda	#%11100000
     40  6398		       85 20		      sta	HMP0
     41  639a		       a9 10		      lda	#%00010000
     42  639c		       85 21		      sta	HMP1
     43  639e		       85 02		      sta	WSYNC
      0  63a0					      sleep	28
      1  63a0				   .CYCLES    SET	28
      2  63a0
      3  63a0				  -	      IF	.CYCLES < 2
      4  63a0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  63a0				  -	      ERR
      6  63a0					      ENDIF
      7  63a0
      8  63a0				  -	      IF	.CYCLES & 1
      9  63a0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  63a0				  -	      nop	0
     11  63a0				  -	      ELSE
     12  63a0				  -	      bit	VSYNC
     13  63a0				  -	      ENDIF
     14  63a0				  -.CYCLES    SET	.CYCLES - 3
     15  63a0					      ENDIF
     16  63a0
     17  63a0					      REPEAT	.CYCLES / 2
     18  63a0		       ea		      nop
     17  63a0					      REPEND
     18  63a1		       ea		      nop
     17  63a1					      REPEND
     18  63a2		       ea		      nop
     17  63a2					      REPEND
     18  63a3		       ea		      nop
     17  63a3					      REPEND
     18  63a4		       ea		      nop
     17  63a4					      REPEND
     18  63a5		       ea		      nop
     17  63a5					      REPEND
     18  63a6		       ea		      nop
     17  63a6					      REPEND
     18  63a7		       ea		      nop
     17  63a7					      REPEND
     18  63a8		       ea		      nop
     17  63a8					      REPEND
     18  63a9		       ea		      nop
     17  63a9					      REPEND
     18  63aa		       ea		      nop
     17  63aa					      REPEND
     18  63ab		       ea		      nop
     17  63ab					      REPEND
     18  63ac		       ea		      nop
     17  63ac					      REPEND
     18  63ad		       ea		      nop
     19  63ae					      REPEND
     45  63ae		       85 10		      sta	RESP0
      0  63b0					      sleep	14
      1  63b0				   .CYCLES    SET	14
      2  63b0
      3  63b0				  -	      IF	.CYCLES < 2
      4  63b0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  63b0				  -	      ERR
      6  63b0					      ENDIF
      7  63b0
      8  63b0				  -	      IF	.CYCLES & 1
      9  63b0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  63b0				  -	      nop	0
     11  63b0				  -	      ELSE
     12  63b0				  -	      bit	VSYNC
     13  63b0				  -	      ENDIF
     14  63b0				  -.CYCLES    SET	.CYCLES - 3
     15  63b0					      ENDIF
     16  63b0
     17  63b0					      REPEAT	.CYCLES / 2
     18  63b0		       ea		      nop
     17  63b0					      REPEND
     18  63b1		       ea		      nop
     17  63b1					      REPEND
     18  63b2		       ea		      nop
     17  63b2					      REPEND
     18  63b3		       ea		      nop
     17  63b3					      REPEND
     18  63b4		       ea		      nop
     17  63b4					      REPEND
     18  63b5		       ea		      nop
     17  63b5					      REPEND
     18  63b6		       ea		      nop
     19  63b7					      REPEND
     47  63b7		       85 11		      sta	RESP1
     48  63b9		       85 02		      sta	WSYNC
     49  63bb		       85 2a		      sta	HMOVE
     50  63bd
     51  63bd		       85 02		      sta	WSYNC
     52  63bf		       85 2b		      sta	HMCLR
     53  63c1		       85 02		      sta	WSYNC
     54  63c3
      0  63c3					      sleep	4
      1  63c3				   .CYCLES    SET	4
      2  63c3
      3  63c3				  -	      IF	.CYCLES < 2
      4  63c3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  63c3				  -	      ERR
      6  63c3					      ENDIF
      7  63c3
      8  63c3				  -	      IF	.CYCLES & 1
      9  63c3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  63c3				  -	      nop	0
     11  63c3				  -	      ELSE
     12  63c3				  -	      bit	VSYNC
     13  63c3				  -	      ENDIF
     14  63c3				  -.CYCLES    SET	.CYCLES - 3
     15  63c3					      ENDIF
     16  63c3
     17  63c3					      REPEAT	.CYCLES / 2
     18  63c3		       ea		      nop
     17  63c3					      REPEND
     18  63c4		       ea		      nop
     19  63c5					      REPEND
     56  63c5		       4c 00 b4 	      jmp	pfline_96x2_2_frame0
     57  63c8							;align so our branch doesn't unexpectedly cross a page...
     58  63c8					      if	>. != >[.+$70]
     59  6400		       00 00 00 00*	      align	256
     60  6400					      endif
     61  6400
     62  6400				   pfline_96x2_2_frame0
     63  6400		       a9 80		      lda	#$80	;2
     64  6402		       85 20		      sta	HMP0	;3
     65  6404		       85 21		      sta	HMP1	;3
     66  6406
     67  6406		       b9 60 bd 	      lda	bmp_96x2_2_06,y	;4
     68  6409		       85 1c		      sta	GRP1	;3
     69  640b
     70  640b		       b9 42 bd 	      lda	bmp_96x2_2_00,y
     71  640e		       85 1b		      sta	GRP0
     72  6410		       b9 4c bd 	      lda	bmp_96x2_2_02,y
     73  6413		       85 1b		      sta	GRP0
     74  6415		       b9 56 bd 	      lda	bmp_96x2_2_04,y
     75  6418		       85 1b		      sta	GRP0
     76  641a
      0  641a					      sleep	2
      1  641a				   .CYCLES    SET	2
      2  641a
      3  641a				  -	      IF	.CYCLES < 2
      4  641a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  641a				  -	      ERR
      6  641a					      ENDIF
      7  641a
      8  641a				  -	      IF	.CYCLES & 1
      9  641a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  641a				  -	      nop	0
     11  641a				  -	      ELSE
     12  641a				  -	      bit	VSYNC
     13  641a				  -	      ENDIF
     14  641a				  -.CYCLES    SET	.CYCLES - 3
     15  641a					      ENDIF
     16  641a
     17  641a					      REPEAT	.CYCLES / 2
     18  641a		       ea		      nop
     19  641b					      REPEND
     78  641b
     79  641b		       b9 6a bd 	      lda	bmp_96x2_2_08,y
     80  641e		       85 1c		      sta	GRP1
     81  6420		       b9 74 bd 	      lda	bmp_96x2_2_10,y
     82  6423		       85 1c		      sta	GRP1
     83  6425
     84  6425		       b9 47 bd 	      lda	bmp_96x2_2_01,y
     85  6428		       85 1b		      sta	GRP0
     86  642a
      0  642a					      sleep	8
      1  642a				   .CYCLES    SET	8
      2  642a
      3  642a				  -	      IF	.CYCLES < 2
      4  642a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  642a				  -	      ERR
      6  642a					      ENDIF
      7  642a
      8  642a				  -	      IF	.CYCLES & 1
      9  642a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  642a				  -	      nop	0
     11  642a				  -	      ELSE
     12  642a				  -	      bit	VSYNC
     13  642a				  -	      ENDIF
     14  642a				  -.CYCLES    SET	.CYCLES - 3
     15  642a					      ENDIF
     16  642a
     17  642a					      REPEAT	.CYCLES / 2
     18  642a		       ea		      nop
     17  642a					      REPEND
     18  642b		       ea		      nop
     17  642b					      REPEND
     18  642c		       ea		      nop
     17  642c					      REPEND
     18  642d		       ea		      nop
     19  642e					      REPEND
     88  642e
     89  642e							;sta WSYNC	;=0
     90  642e		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  6430
     92  6430		       b9 3c bd 	      lda	bmp_96x2_2_colors-1,y	;4 - get the title color early and store it for later
     93  6433				  -	      ifconst	bmp_96x2_2_fade
     94  6433				  -	      and	bmp_96x2_2_fade
     95  6433					      else
      0  6433					      sleep	3
      1  6433				   .CYCLES    SET	3
      2  6433
      3  6433				  -	      IF	.CYCLES < 2
      4  6433				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6433				  -	      ERR
      6  6433					      ENDIF
      7  6433
      8  6433					      IF	.CYCLES & 1
      9  6433					      IFNCONST	NO_ILLEGAL_OPCODES
     10  6433		       04 00		      nop	0
     11  6435				  -	      ELSE
     12  6435				  -	      bit	VSYNC
     13  6435					      ENDIF
     14  6435				   .CYCLES    SET	.CYCLES - 3
     15  6435					      ENDIF
     16  6435
     17  6435				  -	      REPEAT	.CYCLES / 2
     18  6435				  -	      nop
     19  6435					      REPEND
     97  6435					      endif
     98  6435		       aa		      tax
     99  6436
    100  6436		       a9 00		      lda	#0	;2
    101  6438		       85 20		      sta	HMP0	;3
    102  643a		       85 21		      sta	HMP1	;3
    103  643c
      0  643c					      sleep	7
      1  643c				   .CYCLES    SET	7
      2  643c
      3  643c				  -	      IF	.CYCLES < 2
      4  643c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  643c				  -	      ERR
      6  643c					      ENDIF
      7  643c
      8  643c					      IF	.CYCLES & 1
      9  643c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  643c		       04 00		      nop	0
     11  643e				  -	      ELSE
     12  643e				  -	      bit	VSYNC
     13  643e					      ENDIF
     14  643e				   .CYCLES    SET	.CYCLES - 3
     15  643e					      ENDIF
     16  643e
     17  643e					      REPEAT	.CYCLES / 2
     18  643e		       ea		      nop
     17  643e					      REPEND
     18  643f		       ea		      nop
     19  6440					      REPEND
    105  6440
    106  6440		       b9 65 bd 	      lda	bmp_96x2_2_07,y
    107  6443		       85 1c		      sta	GRP1
    108  6445
    109  6445		       b9 51 bd 	      lda	bmp_96x2_2_03,y	;5
    110  6448		       85 1b		      sta	GRP0	;3 =  8
    111  644a		       b9 5b bd 	      lda	bmp_96x2_2_05,y	;5
    112  644d		       85 1b		      sta	GRP0	;3 =  8
    113  644f
      0  644f					      sleep	2
      1  644f				   .CYCLES    SET	2
      2  644f
      3  644f				  -	      IF	.CYCLES < 2
      4  644f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  644f				  -	      ERR
      6  644f					      ENDIF
      7  644f
      8  644f				  -	      IF	.CYCLES & 1
      9  644f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  644f				  -	      nop	0
     11  644f				  -	      ELSE
     12  644f				  -	      bit	VSYNC
     13  644f				  -	      ENDIF
     14  644f				  -.CYCLES    SET	.CYCLES - 3
     15  644f					      ENDIF
     16  644f
     17  644f					      REPEAT	.CYCLES / 2
     18  644f		       ea		      nop
     19  6450					      REPEND
    115  6450
    116  6450		       b9 6f bd 	      lda	bmp_96x2_2_09,y	;5
    117  6453		       85 1c		      sta	GRP1	;3 =  8
    118  6455		       b9 75 bd 	      lda	bmp_96x2_2_11,y	;5
    119  6458		       85 1c		      sta	GRP1	;3 =  8
    120  645a
      0  645a					      sleep	2
      1  645a				   .CYCLES    SET	2
      2  645a
      3  645a				  -	      IF	.CYCLES < 2
      4  645a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  645a				  -	      ERR
      6  645a					      ENDIF
      7  645a
      8  645a				  -	      IF	.CYCLES & 1
      9  645a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  645a				  -	      nop	0
     11  645a				  -	      ELSE
     12  645a				  -	      bit	VSYNC
     13  645a				  -	      ENDIF
     14  645a				  -.CYCLES    SET	.CYCLES - 3
     15  645a					      ENDIF
     16  645a
     17  645a					      REPEAT	.CYCLES / 2
     18  645a		       ea		      nop
     19  645b					      REPEND
    122  645b		       86 07		      stx	COLUP1
    123  645d		       86 06		      stx	COLUP0
    124  645f
    125  645f
    126  645f		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  6461					      sleep	2
      1  6461				   .CYCLES    SET	2
      2  6461
      3  6461				  -	      IF	.CYCLES < 2
      4  6461				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6461				  -	      ERR
      6  6461					      ENDIF
      7  6461
      8  6461				  -	      IF	.CYCLES & 1
      9  6461				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6461				  -	      nop	0
     11  6461				  -	      ELSE
     12  6461				  -	      bit	VSYNC
     13  6461				  -	      ENDIF
     14  6461				  -.CYCLES    SET	.CYCLES - 3
     15  6461					      ENDIF
     16  6461
     17  6461					      REPEAT	.CYCLES / 2
     18  6461		       ea		      nop
     19  6462					      REPEND
    128  6462		       88		      dey
    129  6463
    130  6463		       c4 cb		      cpy	temp1	;3
    131  6465		       d0 99		      bne	pfline_96x2_2_frame0	;2/3
    132  6467
    133  6467				   pf96x2_2_0codeend
    134  6467							;echo "critical code #1 in 96x2_2 is ",(pf96x2_2_0codeend-pfline_96x2_2_frame0), " bytes long."
    135  6467
    136  6467		       a9 00		      lda	#0
    137  6469		       85 1b		      sta	GRP0
    138  646b		       85 1c		      sta	GRP1
    139  646d		       4c 6e b5 	      jmp	pfdone_96x2_2
    140  6470
    141  6470
    142  6470				   pf96x2_2_frame1
    143  6470
    144  6470							;postion P0 and P1
    145  6470		       85 02		      sta	WSYNC
    146  6472		       a9 20		      lda	#%00100000
    147  6474		       85 20		      sta	HMP0
    148  6476		       a9 00		      lda	#0
    149  6478		       a9 f0		      lda	#%11110000
    150  647a		       85 21		      sta	HMP1
    151  647c		       85 02		      sta	WSYNC
      0  647e					      sleep	32
      1  647e				   .CYCLES    SET	32
      2  647e
      3  647e				  -	      IF	.CYCLES < 2
      4  647e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  647e				  -	      ERR
      6  647e					      ENDIF
      7  647e
      8  647e				  -	      IF	.CYCLES & 1
      9  647e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  647e				  -	      nop	0
     11  647e				  -	      ELSE
     12  647e				  -	      bit	VSYNC
     13  647e				  -	      ENDIF
     14  647e				  -.CYCLES    SET	.CYCLES - 3
     15  647e					      ENDIF
     16  647e
     17  647e					      REPEAT	.CYCLES / 2
     18  647e		       ea		      nop
     17  647e					      REPEND
     18  647f		       ea		      nop
     17  647f					      REPEND
     18  6480		       ea		      nop
     17  6480					      REPEND
     18  6481		       ea		      nop
     17  6481					      REPEND
     18  6482		       ea		      nop
     17  6482					      REPEND
     18  6483		       ea		      nop
     17  6483					      REPEND
     18  6484		       ea		      nop
     17  6484					      REPEND
     18  6485		       ea		      nop
     17  6485					      REPEND
     18  6486		       ea		      nop
     17  6486					      REPEND
     18  6487		       ea		      nop
     17  6487					      REPEND
     18  6488		       ea		      nop
     17  6488					      REPEND
     18  6489		       ea		      nop
     17  6489					      REPEND
     18  648a		       ea		      nop
     17  648a					      REPEND
     18  648b		       ea		      nop
     17  648b					      REPEND
     18  648c		       ea		      nop
     17  648c					      REPEND
     18  648d		       ea		      nop
     19  648e					      REPEND
    153  648e		       85 10		      sta	RESP0
      0  6490					      sleep	12
      1  6490				   .CYCLES    SET	12
      2  6490
      3  6490				  -	      IF	.CYCLES < 2
      4  6490				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6490				  -	      ERR
      6  6490					      ENDIF
      7  6490
      8  6490				  -	      IF	.CYCLES & 1
      9  6490				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6490				  -	      nop	0
     11  6490				  -	      ELSE
     12  6490				  -	      bit	VSYNC
     13  6490				  -	      ENDIF
     14  6490				  -.CYCLES    SET	.CYCLES - 3
     15  6490					      ENDIF
     16  6490
     17  6490					      REPEAT	.CYCLES / 2
     18  6490		       ea		      nop
     17  6490					      REPEND
     18  6491		       ea		      nop
     17  6491					      REPEND
     18  6492		       ea		      nop
     17  6492					      REPEND
     18  6493		       ea		      nop
     17  6493					      REPEND
     18  6494		       ea		      nop
     17  6494					      REPEND
     18  6495		       ea		      nop
     19  6496					      REPEND
    155  6496		       85 11		      sta	RESP1
    156  6498		       85 02		      sta	WSYNC
    157  649a		       85 2a		      sta	HMOVE
    158  649c
    159  649c		       85 02		      sta	WSYNC
    160  649e		       85 2b		      sta	HMCLR
    161  64a0
    162  64a0
    163  64a0
    164  64a0		       85 02		      sta	WSYNC
      0  64a2					      sleep	3
      1  64a2				   .CYCLES    SET	3
      2  64a2
      3  64a2				  -	      IF	.CYCLES < 2
      4  64a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  64a2				  -	      ERR
      6  64a2					      ENDIF
      7  64a2
      8  64a2					      IF	.CYCLES & 1
      9  64a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  64a2		       04 00		      nop	0
     11  64a4				  -	      ELSE
     12  64a4				  -	      bit	VSYNC
     13  64a4					      ENDIF
     14  64a4				   .CYCLES    SET	.CYCLES - 3
     15  64a4					      ENDIF
     16  64a4
     17  64a4				  -	      REPEAT	.CYCLES / 2
     18  64a4				  -	      nop
     19  64a4					      REPEND
    166  64a4		       4c 00 b5 	      jmp	pfline_96x2_2_frame1
    167  64a7
    168  64a7							;align so our branch doesn't unexpectedly cross a page...
    169  64a7					      if	>. != >[.+$70]
    170  6500		       00 00 00 00*	      align	256
    171  6500					      endif
    172  6500
    173  6500				   pfline_96x2_2_frame1
    174  6500
    175  6500		       85 2a		      sta	HMOVE
    176  6502
    177  6502		       b9 65 bd 	      lda	bmp_96x2_2_07,y	;4
    178  6505		       85 1c		      sta	GRP1	;3
    179  6507
    180  6507		       a9 00		      lda	#$0	;2
    181  6509		       85 20		      sta	HMP0	;3
    182  650b		       85 21		      sta	HMP1	;3
    183  650d
    184  650d		       b9 47 bd 	      lda	bmp_96x2_2_01,y
    185  6510		       8d 1b 00 	      sta.w	GRP0
    186  6513		       b9 51 bd 	      lda	bmp_96x2_2_03,y
    187  6516		       85 1b		      sta	GRP0
    188  6518		       b9 5b bd 	      lda	bmp_96x2_2_05,y
    189  651b		       85 1b		      sta	GRP0
    190  651d
      0  651d					      sleep	2
      1  651d				   .CYCLES    SET	2
      2  651d
      3  651d				  -	      IF	.CYCLES < 2
      4  651d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  651d				  -	      ERR
      6  651d					      ENDIF
      7  651d
      8  651d				  -	      IF	.CYCLES & 1
      9  651d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  651d				  -	      nop	0
     11  651d				  -	      ELSE
     12  651d				  -	      bit	VSYNC
     13  651d				  -	      ENDIF
     14  651d				  -.CYCLES    SET	.CYCLES - 3
     15  651d					      ENDIF
     16  651d
     17  651d					      REPEAT	.CYCLES / 2
     18  651d		       ea		      nop
     19  651e					      REPEND
    192  651e
    193  651e		       b9 6f bd 	      lda	bmp_96x2_2_09,y
    194  6521		       85 1c		      sta	GRP1
    195  6523		       b9 75 bd 	      lda	bmp_96x2_2_11,y
    196  6526		       85 1c		      sta	GRP1
    197  6528
    198  6528		       b9 42 bd 	      lda	bmp_96x2_2_00,y
    199  652b		       85 1b		      sta	GRP0
    200  652d
    201  652d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    202  6530
    203  6530							;sta WSYNC	;=0 -----------------------------------------
    204  6530
    205  6530		       b9 60 bd 	      lda	bmp_96x2_2_06,y
    206  6533		       85 1c		      sta	GRP1
    207  6535
      0  6535					      sleep	8
      1  6535				   .CYCLES    SET	8
      2  6535
      3  6535				  -	      IF	.CYCLES < 2
      4  6535				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6535				  -	      ERR
      6  6535					      ENDIF
      7  6535
      8  6535				  -	      IF	.CYCLES & 1
      9  6535				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6535				  -	      nop	0
     11  6535				  -	      ELSE
     12  6535				  -	      bit	VSYNC
     13  6535				  -	      ENDIF
     14  6535				  -.CYCLES    SET	.CYCLES - 3
     15  6535					      ENDIF
     16  6535
     17  6535					      REPEAT	.CYCLES / 2
     18  6535		       ea		      nop
     17  6535					      REPEND
     18  6536		       ea		      nop
     17  6536					      REPEND
     18  6537		       ea		      nop
     17  6537					      REPEND
     18  6538		       ea		      nop
     19  6539					      REPEND
    209  6539
    210  6539		       b9 3c bd 	      lda	bmp_96x2_2_colors-1,y	;get the title color early and store it for later
    211  653c		       aa		      tax		;2
    212  653d
      0  653d					      sleep	3
      1  653d				   .CYCLES    SET	3
      2  653d
      3  653d				  -	      IF	.CYCLES < 2
      4  653d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  653d				  -	      ERR
      6  653d					      ENDIF
      7  653d
      8  653d					      IF	.CYCLES & 1
      9  653d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  653d		       04 00		      nop	0
     11  653f				  -	      ELSE
     12  653f				  -	      bit	VSYNC
     13  653f					      ENDIF
     14  653f				   .CYCLES    SET	.CYCLES - 3
     15  653f					      ENDIF
     16  653f
     17  653f				  -	      REPEAT	.CYCLES / 2
     18  653f				  -	      nop
     19  653f					      REPEND
    214  653f
    215  653f		       a9 80		      lda	#$80	;2
    216  6541		       85 20		      sta	HMP0	;3
    217  6543		       85 21		      sta	HMP1	;3
    218  6545
    219  6545
    220  6545		       b9 4c bd 	      lda	bmp_96x2_2_02,y	;5
    221  6548		       85 1b		      sta	GRP0	;3 =  8
    222  654a
    223  654a		       b9 56 bd 	      lda	bmp_96x2_2_04,y	;5
    224  654d		       85 1b		      sta	GRP0	;3 =  8
    225  654f
      0  654f					      sleep	2
      1  654f				   .CYCLES    SET	2
      2  654f
      3  654f				  -	      IF	.CYCLES < 2
      4  654f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  654f				  -	      ERR
      6  654f					      ENDIF
      7  654f
      8  654f				  -	      IF	.CYCLES & 1
      9  654f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  654f				  -	      nop	0
     11  654f				  -	      ELSE
     12  654f				  -	      bit	VSYNC
     13  654f				  -	      ENDIF
     14  654f				  -.CYCLES    SET	.CYCLES - 3
     15  654f					      ENDIF
     16  654f
     17  654f					      REPEAT	.CYCLES / 2
     18  654f		       ea		      nop
     19  6550					      REPEND
    227  6550
    228  6550		       b9 6a bd 	      lda	bmp_96x2_2_08,y	;5
    229  6553		       85 1c		      sta	GRP1	;3 =  8
    230  6555
    231  6555		       b9 74 bd 	      lda	bmp_96x2_2_10,y	;5
    232  6558		       85 1c		      sta	GRP1	;3 =  8
    233  655a
      0  655a					      sleep	4
      1  655a				   .CYCLES    SET	4
      2  655a
      3  655a				  -	      IF	.CYCLES < 2
      4  655a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  655a				  -	      ERR
      6  655a					      ENDIF
      7  655a
      8  655a				  -	      IF	.CYCLES & 1
      9  655a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  655a				  -	      nop	0
     11  655a				  -	      ELSE
     12  655a				  -	      bit	VSYNC
     13  655a				  -	      ENDIF
     14  655a				  -.CYCLES    SET	.CYCLES - 3
     15  655a					      ENDIF
     16  655a
     17  655a					      REPEAT	.CYCLES / 2
     18  655a		       ea		      nop
     17  655a					      REPEND
     18  655b		       ea		      nop
     19  655c					      REPEND
    235  655c
    236  655c		       88		      dey
    237  655d
    238  655d		       8a		      txa
    239  655e				  -	      ifconst	bmp_96x2_2_fade
    240  655e				  -	      and	bmp_96x2_2_fade
    241  655e					      else
      0  655e					      sleep	3
      1  655e				   .CYCLES    SET	3
      2  655e
      3  655e				  -	      IF	.CYCLES < 2
      4  655e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  655e				  -	      ERR
      6  655e					      ENDIF
      7  655e
      8  655e					      IF	.CYCLES & 1
      9  655e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  655e		       04 00		      nop	0
     11  6560				  -	      ELSE
     12  6560				  -	      bit	VSYNC
     13  6560					      ENDIF
     14  6560				   .CYCLES    SET	.CYCLES - 3
     15  6560					      ENDIF
     16  6560
     17  6560				  -	      REPEAT	.CYCLES / 2
     18  6560				  -	      nop
     19  6560					      REPEND
    243  6560					      endif
    244  6560		       85 07		      sta	COLUP1	;3
    245  6562		       85 06		      sta	COLUP0	;3
    246  6564
    247  6564		       c4 cb		      cpy	temp1	;2
    248  6566		       d0 98		      bne	pfline_96x2_2_frame1	;2/3
    249  6568
    250  6568				   pf96x2_2_1codeend
    251  6568							;echo "critical code #2 in 96x2_2 is ",(pf96x2_2_1codeend-pfline_96x2_2_frame1), " bytes long."
    252  6568
    253  6568		       a9 00		      lda	#0
    254  656a		       85 1b		      sta	GRP0
    255  656c		       85 1c		      sta	GRP1
    256  656e
    257  656e				   pfdone_96x2_2
    258  656e		       85 02		      sta	WSYNC	; debug
    259  6570
    260  6570		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    153  6571					      endif		;mk_96x2_2_on
    154  6571
    155  6571				  -	      ifconst	mk_96x2_3_on
    156  6571				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    157  6571					      endif		;mk_96x2_3_on
    158  6571
    159  6571					      ifconst	mk_96x2_4_on
------- FILE titlescreen/asm/96x2_4_kernel.asm LEVEL 3 PASS 3
      0  6571					      include	"titlescreen/asm/96x2_4_kernel.asm"
      1  6571				   draw_bmp_96x2_4
      2  6571
      3  6571				  -	      ifconst	bmp_96x2_4_index
      4  6571				  -	      lda	#(bmp_96x2_4_height-1)
      5  6571				  -	      sec
      6  6571				  -	      sbc	bmp_96x2_4_index
      7  6571				  -	      tay
      8  6571				  -	      sbc	#bmp_96x2_4_window
      9  6571				  -	      sta	temp1
     10  6571					      else
     11  6571		       a0 04		      ldy	#(bmp_96x2_4_window-1)
     12  6573		       a9 ff		      lda	#255
     13  6575		       85 cb		      sta	temp1
     14  6577					      endif
     15  6577
     16  6577		       a9 03		      lda	#3
     17  6579		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  657b		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  657d		       a9 00		      lda	#0
     20  657f
     21  657f		       b9 7b bd 	      lda	bmp_96x2_4_colors,y	;4
     22  6582				  -	      ifconst	bmp_96x2_4_fade
     23  6582				  -	      and	bmp_96x2_4_fade
     24  6582					      endif
     25  6582		       85 06		      sta	COLUP0	;3
     26  6584		       85 07		      sta	COLUP1	;3
     27  6586		       85 2b		      sta	HMCLR	;3
     28  6588
     29  6588		       a5 82		      lda	titleframe
     30  658a		       29 01		      and	#1
     31  658c		       f0 03		      beq	jmp_pf96x2_4_frame0
     32  658e		       4c 70 b6 	      jmp	pf96x2_4_frame1
     33  6591				   jmp_pf96x2_4_frame0
     34  6591		       4c 94 b5 	      jmp	pf96x2_4_frame0
     35  6594
     36  6594				   pf96x2_4_frame0
     37  6594							;postion P0 and P1
     38  6594		       85 02		      sta	WSYNC
     39  6596		       a9 e0		      lda	#%11100000
     40  6598		       85 20		      sta	HMP0
     41  659a		       a9 10		      lda	#%00010000
     42  659c		       85 21		      sta	HMP1
     43  659e		       85 02		      sta	WSYNC
      0  65a0					      sleep	28
      1  65a0				   .CYCLES    SET	28
      2  65a0
      3  65a0				  -	      IF	.CYCLES < 2
      4  65a0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  65a0				  -	      ERR
      6  65a0					      ENDIF
      7  65a0
      8  65a0				  -	      IF	.CYCLES & 1
      9  65a0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  65a0				  -	      nop	0
     11  65a0				  -	      ELSE
     12  65a0				  -	      bit	VSYNC
     13  65a0				  -	      ENDIF
     14  65a0				  -.CYCLES    SET	.CYCLES - 3
     15  65a0					      ENDIF
     16  65a0
     17  65a0					      REPEAT	.CYCLES / 2
     18  65a0		       ea		      nop
     17  65a0					      REPEND
     18  65a1		       ea		      nop
     17  65a1					      REPEND
     18  65a2		       ea		      nop
     17  65a2					      REPEND
     18  65a3		       ea		      nop
     17  65a3					      REPEND
     18  65a4		       ea		      nop
     17  65a4					      REPEND
     18  65a5		       ea		      nop
     17  65a5					      REPEND
     18  65a6		       ea		      nop
     17  65a6					      REPEND
     18  65a7		       ea		      nop
     17  65a7					      REPEND
     18  65a8		       ea		      nop
     17  65a8					      REPEND
     18  65a9		       ea		      nop
     17  65a9					      REPEND
     18  65aa		       ea		      nop
     17  65aa					      REPEND
     18  65ab		       ea		      nop
     17  65ab					      REPEND
     18  65ac		       ea		      nop
     17  65ac					      REPEND
     18  65ad		       ea		      nop
     19  65ae					      REPEND
     45  65ae		       85 10		      sta	RESP0
      0  65b0					      sleep	14
      1  65b0				   .CYCLES    SET	14
      2  65b0
      3  65b0				  -	      IF	.CYCLES < 2
      4  65b0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  65b0				  -	      ERR
      6  65b0					      ENDIF
      7  65b0
      8  65b0				  -	      IF	.CYCLES & 1
      9  65b0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  65b0				  -	      nop	0
     11  65b0				  -	      ELSE
     12  65b0				  -	      bit	VSYNC
     13  65b0				  -	      ENDIF
     14  65b0				  -.CYCLES    SET	.CYCLES - 3
     15  65b0					      ENDIF
     16  65b0
     17  65b0					      REPEAT	.CYCLES / 2
     18  65b0		       ea		      nop
     17  65b0					      REPEND
     18  65b1		       ea		      nop
     17  65b1					      REPEND
     18  65b2		       ea		      nop
     17  65b2					      REPEND
     18  65b3		       ea		      nop
     17  65b3					      REPEND
     18  65b4		       ea		      nop
     17  65b4					      REPEND
     18  65b5		       ea		      nop
     17  65b5					      REPEND
     18  65b6		       ea		      nop
     19  65b7					      REPEND
     47  65b7		       85 11		      sta	RESP1
     48  65b9		       85 02		      sta	WSYNC
     49  65bb		       85 2a		      sta	HMOVE
     50  65bd
     51  65bd		       85 02		      sta	WSYNC
     52  65bf		       85 2b		      sta	HMCLR
     53  65c1		       85 02		      sta	WSYNC
     54  65c3
      0  65c3					      sleep	4
      1  65c3				   .CYCLES    SET	4
      2  65c3
      3  65c3				  -	      IF	.CYCLES < 2
      4  65c3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  65c3				  -	      ERR
      6  65c3					      ENDIF
      7  65c3
      8  65c3				  -	      IF	.CYCLES & 1
      9  65c3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  65c3				  -	      nop	0
     11  65c3				  -	      ELSE
     12  65c3				  -	      bit	VSYNC
     13  65c3				  -	      ENDIF
     14  65c3				  -.CYCLES    SET	.CYCLES - 3
     15  65c3					      ENDIF
     16  65c3
     17  65c3					      REPEAT	.CYCLES / 2
     18  65c3		       ea		      nop
     17  65c3					      REPEND
     18  65c4		       ea		      nop
     19  65c5					      REPEND
     56  65c5		       4c 00 b6 	      jmp	pfline_96x2_4_frame0
     57  65c8							;align so our branch doesn't unexpectedly cross a page...
     58  65c8					      if	>. != >[.+$70]
     59  6600		       00 00 00 00*	      align	256
     60  6600					      endif
     61  6600
     62  6600				   pfline_96x2_4_frame0
     63  6600		       a9 80		      lda	#$80	;2
     64  6602		       85 20		      sta	HMP0	;3
     65  6604		       85 21		      sta	HMP1	;3
     66  6606
     67  6606		       b9 9e bd 	      lda	bmp_96x2_4_06,y	;4
     68  6609		       85 1c		      sta	GRP1	;3
     69  660b
     70  660b		       b9 80 bd 	      lda	bmp_96x2_4_00,y
     71  660e		       85 1b		      sta	GRP0
     72  6610		       b9 8a bd 	      lda	bmp_96x2_4_02,y
     73  6613		       85 1b		      sta	GRP0
     74  6615		       b9 94 bd 	      lda	bmp_96x2_4_04,y
     75  6618		       85 1b		      sta	GRP0
     76  661a
      0  661a					      sleep	2
      1  661a				   .CYCLES    SET	2
      2  661a
      3  661a				  -	      IF	.CYCLES < 2
      4  661a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  661a				  -	      ERR
      6  661a					      ENDIF
      7  661a
      8  661a				  -	      IF	.CYCLES & 1
      9  661a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  661a				  -	      nop	0
     11  661a				  -	      ELSE
     12  661a				  -	      bit	VSYNC
     13  661a				  -	      ENDIF
     14  661a				  -.CYCLES    SET	.CYCLES - 3
     15  661a					      ENDIF
     16  661a
     17  661a					      REPEAT	.CYCLES / 2
     18  661a		       ea		      nop
     19  661b					      REPEND
     78  661b
     79  661b		       b9 a8 bd 	      lda	bmp_96x2_4_08,y
     80  661e		       85 1c		      sta	GRP1
     81  6620		       b9 b2 bd 	      lda	bmp_96x2_4_10,y
     82  6623		       85 1c		      sta	GRP1
     83  6625
     84  6625		       b9 85 bd 	      lda	bmp_96x2_4_01,y
     85  6628		       85 1b		      sta	GRP0
     86  662a
      0  662a					      sleep	8
      1  662a				   .CYCLES    SET	8
      2  662a
      3  662a				  -	      IF	.CYCLES < 2
      4  662a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  662a				  -	      ERR
      6  662a					      ENDIF
      7  662a
      8  662a				  -	      IF	.CYCLES & 1
      9  662a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  662a				  -	      nop	0
     11  662a				  -	      ELSE
     12  662a				  -	      bit	VSYNC
     13  662a				  -	      ENDIF
     14  662a				  -.CYCLES    SET	.CYCLES - 3
     15  662a					      ENDIF
     16  662a
     17  662a					      REPEAT	.CYCLES / 2
     18  662a		       ea		      nop
     17  662a					      REPEND
     18  662b		       ea		      nop
     17  662b					      REPEND
     18  662c		       ea		      nop
     17  662c					      REPEND
     18  662d		       ea		      nop
     19  662e					      REPEND
     88  662e
     89  662e							;sta WSYNC	;=0
     90  662e		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  6630
     92  6630		       b9 7a bd 	      lda	bmp_96x2_4_colors-1,y	;4 - get the title color early and store it for later
     93  6633				  -	      ifconst	bmp_96x2_4_fade
     94  6633				  -	      and	bmp_96x2_4_fade
     95  6633					      else
      0  6633					      sleep	3
      1  6633				   .CYCLES    SET	3
      2  6633
      3  6633				  -	      IF	.CYCLES < 2
      4  6633				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6633				  -	      ERR
      6  6633					      ENDIF
      7  6633
      8  6633					      IF	.CYCLES & 1
      9  6633					      IFNCONST	NO_ILLEGAL_OPCODES
     10  6633		       04 00		      nop	0
     11  6635				  -	      ELSE
     12  6635				  -	      bit	VSYNC
     13  6635					      ENDIF
     14  6635				   .CYCLES    SET	.CYCLES - 3
     15  6635					      ENDIF
     16  6635
     17  6635				  -	      REPEAT	.CYCLES / 2
     18  6635				  -	      nop
     19  6635					      REPEND
     97  6635					      endif
     98  6635		       aa		      tax
     99  6636
    100  6636		       a9 00		      lda	#0	;2
    101  6638		       85 20		      sta	HMP0	;3
    102  663a		       85 21		      sta	HMP1	;3
    103  663c
      0  663c					      sleep	7
      1  663c				   .CYCLES    SET	7
      2  663c
      3  663c				  -	      IF	.CYCLES < 2
      4  663c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  663c				  -	      ERR
      6  663c					      ENDIF
      7  663c
      8  663c					      IF	.CYCLES & 1
      9  663c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  663c		       04 00		      nop	0
     11  663e				  -	      ELSE
     12  663e				  -	      bit	VSYNC
     13  663e					      ENDIF
     14  663e				   .CYCLES    SET	.CYCLES - 3
     15  663e					      ENDIF
     16  663e
     17  663e					      REPEAT	.CYCLES / 2
     18  663e		       ea		      nop
     17  663e					      REPEND
     18  663f		       ea		      nop
     19  6640					      REPEND
    105  6640
    106  6640		       b9 a3 bd 	      lda	bmp_96x2_4_07,y
    107  6643		       85 1c		      sta	GRP1
    108  6645
    109  6645		       b9 8f bd 	      lda	bmp_96x2_4_03,y	;5
    110  6648		       85 1b		      sta	GRP0	;3 =  8
    111  664a		       b9 99 bd 	      lda	bmp_96x2_4_05,y	;5
    112  664d		       85 1b		      sta	GRP0	;3 =  8
    113  664f
      0  664f					      sleep	2
      1  664f				   .CYCLES    SET	2
      2  664f
      3  664f				  -	      IF	.CYCLES < 2
      4  664f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  664f				  -	      ERR
      6  664f					      ENDIF
      7  664f
      8  664f				  -	      IF	.CYCLES & 1
      9  664f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  664f				  -	      nop	0
     11  664f				  -	      ELSE
     12  664f				  -	      bit	VSYNC
     13  664f				  -	      ENDIF
     14  664f				  -.CYCLES    SET	.CYCLES - 3
     15  664f					      ENDIF
     16  664f
     17  664f					      REPEAT	.CYCLES / 2
     18  664f		       ea		      nop
     19  6650					      REPEND
    115  6650
    116  6650		       b9 ad bd 	      lda	bmp_96x2_4_09,y	;5
    117  6653		       85 1c		      sta	GRP1	;3 =  8
    118  6655		       b9 b7 bd 	      lda	bmp_96x2_4_11,y	;5
    119  6658		       85 1c		      sta	GRP1	;3 =  8
    120  665a
      0  665a					      sleep	2
      1  665a				   .CYCLES    SET	2
      2  665a
      3  665a				  -	      IF	.CYCLES < 2
      4  665a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  665a				  -	      ERR
      6  665a					      ENDIF
      7  665a
      8  665a				  -	      IF	.CYCLES & 1
      9  665a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  665a				  -	      nop	0
     11  665a				  -	      ELSE
     12  665a				  -	      bit	VSYNC
     13  665a				  -	      ENDIF
     14  665a				  -.CYCLES    SET	.CYCLES - 3
     15  665a					      ENDIF
     16  665a
     17  665a					      REPEAT	.CYCLES / 2
     18  665a		       ea		      nop
     19  665b					      REPEND
    122  665b		       86 07		      stx	COLUP1
    123  665d		       86 06		      stx	COLUP0
    124  665f
    125  665f
    126  665f		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  6661					      sleep	2
      1  6661				   .CYCLES    SET	2
      2  6661
      3  6661				  -	      IF	.CYCLES < 2
      4  6661				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6661				  -	      ERR
      6  6661					      ENDIF
      7  6661
      8  6661				  -	      IF	.CYCLES & 1
      9  6661				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6661				  -	      nop	0
     11  6661				  -	      ELSE
     12  6661				  -	      bit	VSYNC
     13  6661				  -	      ENDIF
     14  6661				  -.CYCLES    SET	.CYCLES - 3
     15  6661					      ENDIF
     16  6661
     17  6661					      REPEAT	.CYCLES / 2
     18  6661		       ea		      nop
     19  6662					      REPEND
    128  6662		       88		      dey
    129  6663
    130  6663		       c4 cb		      cpy	temp1	;3
    131  6665		       d0 99		      bne	pfline_96x2_4_frame0	;2/3
    132  6667
    133  6667				   pf96x2_4_0codeend
    134  6667							;echo "critical code #1 in 96x2_4 is ",(pf96x2_4_0codeend-pfline_96x2_4_frame0), " bytes long."
    135  6667
    136  6667		       a9 00		      lda	#0
    137  6669		       85 1b		      sta	GRP0
    138  666b		       85 1c		      sta	GRP1
    139  666d		       4c 6e b7 	      jmp	pfdone_96x2_4
    140  6670
    141  6670
    142  6670				   pf96x2_4_frame1
    143  6670
    144  6670							;postion P0 and P1
    145  6670		       85 02		      sta	WSYNC
    146  6672		       a9 20		      lda	#%00100000
    147  6674		       85 20		      sta	HMP0
    148  6676		       a9 00		      lda	#0
    149  6678		       a9 f0		      lda	#%11110000
    150  667a		       85 21		      sta	HMP1
    151  667c		       85 02		      sta	WSYNC
      0  667e					      sleep	32
      1  667e				   .CYCLES    SET	32
      2  667e
      3  667e				  -	      IF	.CYCLES < 2
      4  667e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  667e				  -	      ERR
      6  667e					      ENDIF
      7  667e
      8  667e				  -	      IF	.CYCLES & 1
      9  667e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  667e				  -	      nop	0
     11  667e				  -	      ELSE
     12  667e				  -	      bit	VSYNC
     13  667e				  -	      ENDIF
     14  667e				  -.CYCLES    SET	.CYCLES - 3
     15  667e					      ENDIF
     16  667e
     17  667e					      REPEAT	.CYCLES / 2
     18  667e		       ea		      nop
     17  667e					      REPEND
     18  667f		       ea		      nop
     17  667f					      REPEND
     18  6680		       ea		      nop
     17  6680					      REPEND
     18  6681		       ea		      nop
     17  6681					      REPEND
     18  6682		       ea		      nop
     17  6682					      REPEND
     18  6683		       ea		      nop
     17  6683					      REPEND
     18  6684		       ea		      nop
     17  6684					      REPEND
     18  6685		       ea		      nop
     17  6685					      REPEND
     18  6686		       ea		      nop
     17  6686					      REPEND
     18  6687		       ea		      nop
     17  6687					      REPEND
     18  6688		       ea		      nop
     17  6688					      REPEND
     18  6689		       ea		      nop
     17  6689					      REPEND
     18  668a		       ea		      nop
     17  668a					      REPEND
     18  668b		       ea		      nop
     17  668b					      REPEND
     18  668c		       ea		      nop
     17  668c					      REPEND
     18  668d		       ea		      nop
     19  668e					      REPEND
    153  668e		       85 10		      sta	RESP0
      0  6690					      sleep	12
      1  6690				   .CYCLES    SET	12
      2  6690
      3  6690				  -	      IF	.CYCLES < 2
      4  6690				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6690				  -	      ERR
      6  6690					      ENDIF
      7  6690
      8  6690				  -	      IF	.CYCLES & 1
      9  6690				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6690				  -	      nop	0
     11  6690				  -	      ELSE
     12  6690				  -	      bit	VSYNC
     13  6690				  -	      ENDIF
     14  6690				  -.CYCLES    SET	.CYCLES - 3
     15  6690					      ENDIF
     16  6690
     17  6690					      REPEAT	.CYCLES / 2
     18  6690		       ea		      nop
     17  6690					      REPEND
     18  6691		       ea		      nop
     17  6691					      REPEND
     18  6692		       ea		      nop
     17  6692					      REPEND
     18  6693		       ea		      nop
     17  6693					      REPEND
     18  6694		       ea		      nop
     17  6694					      REPEND
     18  6695		       ea		      nop
     19  6696					      REPEND
    155  6696		       85 11		      sta	RESP1
    156  6698		       85 02		      sta	WSYNC
    157  669a		       85 2a		      sta	HMOVE
    158  669c
    159  669c		       85 02		      sta	WSYNC
    160  669e		       85 2b		      sta	HMCLR
    161  66a0
    162  66a0
    163  66a0
    164  66a0		       85 02		      sta	WSYNC
      0  66a2					      sleep	3
      1  66a2				   .CYCLES    SET	3
      2  66a2
      3  66a2				  -	      IF	.CYCLES < 2
      4  66a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  66a2				  -	      ERR
      6  66a2					      ENDIF
      7  66a2
      8  66a2					      IF	.CYCLES & 1
      9  66a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  66a2		       04 00		      nop	0
     11  66a4				  -	      ELSE
     12  66a4				  -	      bit	VSYNC
     13  66a4					      ENDIF
     14  66a4				   .CYCLES    SET	.CYCLES - 3
     15  66a4					      ENDIF
     16  66a4
     17  66a4				  -	      REPEAT	.CYCLES / 2
     18  66a4				  -	      nop
     19  66a4					      REPEND
    166  66a4		       4c 00 b7 	      jmp	pfline_96x2_4_frame1
    167  66a7
    168  66a7							;align so our branch doesn't unexpectedly cross a page...
    169  66a7					      if	>. != >[.+$70]
    170  6700		       00 00 00 00*	      align	256
    171  6700					      endif
    172  6700
    173  6700				   pfline_96x2_4_frame1
    174  6700
    175  6700		       85 2a		      sta	HMOVE
    176  6702
    177  6702		       b9 a3 bd 	      lda	bmp_96x2_4_07,y	;4
    178  6705		       85 1c		      sta	GRP1	;3
    179  6707
    180  6707		       a9 00		      lda	#$0	;2
    181  6709		       85 20		      sta	HMP0	;3
    182  670b		       85 21		      sta	HMP1	;3
    183  670d
    184  670d		       b9 85 bd 	      lda	bmp_96x2_4_01,y
    185  6710		       8d 1b 00 	      sta.w	GRP0
    186  6713		       b9 8f bd 	      lda	bmp_96x2_4_03,y
    187  6716		       85 1b		      sta	GRP0
    188  6718		       b9 99 bd 	      lda	bmp_96x2_4_05,y
    189  671b		       85 1b		      sta	GRP0
    190  671d
      0  671d					      sleep	2
      1  671d				   .CYCLES    SET	2
      2  671d
      3  671d				  -	      IF	.CYCLES < 2
      4  671d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  671d				  -	      ERR
      6  671d					      ENDIF
      7  671d
      8  671d				  -	      IF	.CYCLES & 1
      9  671d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  671d				  -	      nop	0
     11  671d				  -	      ELSE
     12  671d				  -	      bit	VSYNC
     13  671d				  -	      ENDIF
     14  671d				  -.CYCLES    SET	.CYCLES - 3
     15  671d					      ENDIF
     16  671d
     17  671d					      REPEAT	.CYCLES / 2
     18  671d		       ea		      nop
     19  671e					      REPEND
    192  671e
    193  671e		       b9 ad bd 	      lda	bmp_96x2_4_09,y
    194  6721		       85 1c		      sta	GRP1
    195  6723		       b9 b7 bd 	      lda	bmp_96x2_4_11,y
    196  6726		       85 1c		      sta	GRP1
    197  6728
    198  6728		       b9 80 bd 	      lda	bmp_96x2_4_00,y
    199  672b		       85 1b		      sta	GRP0
    200  672d
    201  672d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    202  6730
    203  6730							;sta WSYNC	;=0 -----------------------------------------
    204  6730
    205  6730		       b9 9e bd 	      lda	bmp_96x2_4_06,y
    206  6733		       85 1c		      sta	GRP1
    207  6735
      0  6735					      sleep	8
      1  6735				   .CYCLES    SET	8
      2  6735
      3  6735				  -	      IF	.CYCLES < 2
      4  6735				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6735				  -	      ERR
      6  6735					      ENDIF
      7  6735
      8  6735				  -	      IF	.CYCLES & 1
      9  6735				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6735				  -	      nop	0
     11  6735				  -	      ELSE
     12  6735				  -	      bit	VSYNC
     13  6735				  -	      ENDIF
     14  6735				  -.CYCLES    SET	.CYCLES - 3
     15  6735					      ENDIF
     16  6735
     17  6735					      REPEAT	.CYCLES / 2
     18  6735		       ea		      nop
     17  6735					      REPEND
     18  6736		       ea		      nop
     17  6736					      REPEND
     18  6737		       ea		      nop
     17  6737					      REPEND
     18  6738		       ea		      nop
     19  6739					      REPEND
    209  6739
    210  6739		       b9 7a bd 	      lda	bmp_96x2_4_colors-1,y	;get the title color early and store it for later
    211  673c		       aa		      tax		;2
    212  673d
      0  673d					      sleep	3
      1  673d				   .CYCLES    SET	3
      2  673d
      3  673d				  -	      IF	.CYCLES < 2
      4  673d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  673d				  -	      ERR
      6  673d					      ENDIF
      7  673d
      8  673d					      IF	.CYCLES & 1
      9  673d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  673d		       04 00		      nop	0
     11  673f				  -	      ELSE
     12  673f				  -	      bit	VSYNC
     13  673f					      ENDIF
     14  673f				   .CYCLES    SET	.CYCLES - 3
     15  673f					      ENDIF
     16  673f
     17  673f				  -	      REPEAT	.CYCLES / 2
     18  673f				  -	      nop
     19  673f					      REPEND
    214  673f
    215  673f		       a9 80		      lda	#$80	;2
    216  6741		       85 20		      sta	HMP0	;3
    217  6743		       85 21		      sta	HMP1	;3
    218  6745
    219  6745
    220  6745		       b9 8a bd 	      lda	bmp_96x2_4_02,y	;5
    221  6748		       85 1b		      sta	GRP0	;3 =  8
    222  674a
    223  674a		       b9 94 bd 	      lda	bmp_96x2_4_04,y	;5
    224  674d		       85 1b		      sta	GRP0	;3 =  8
    225  674f
      0  674f					      sleep	2
      1  674f				   .CYCLES    SET	2
      2  674f
      3  674f				  -	      IF	.CYCLES < 2
      4  674f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  674f				  -	      ERR
      6  674f					      ENDIF
      7  674f
      8  674f				  -	      IF	.CYCLES & 1
      9  674f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  674f				  -	      nop	0
     11  674f				  -	      ELSE
     12  674f				  -	      bit	VSYNC
     13  674f				  -	      ENDIF
     14  674f				  -.CYCLES    SET	.CYCLES - 3
     15  674f					      ENDIF
     16  674f
     17  674f					      REPEAT	.CYCLES / 2
     18  674f		       ea		      nop
     19  6750					      REPEND
    227  6750
    228  6750		       b9 a8 bd 	      lda	bmp_96x2_4_08,y	;5
    229  6753		       85 1c		      sta	GRP1	;3 =  8
    230  6755
    231  6755		       b9 b2 bd 	      lda	bmp_96x2_4_10,y	;5
    232  6758		       85 1c		      sta	GRP1	;3 =  8
    233  675a
      0  675a					      sleep	4
      1  675a				   .CYCLES    SET	4
      2  675a
      3  675a				  -	      IF	.CYCLES < 2
      4  675a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  675a				  -	      ERR
      6  675a					      ENDIF
      7  675a
      8  675a				  -	      IF	.CYCLES & 1
      9  675a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  675a				  -	      nop	0
     11  675a				  -	      ELSE
     12  675a				  -	      bit	VSYNC
     13  675a				  -	      ENDIF
     14  675a				  -.CYCLES    SET	.CYCLES - 3
     15  675a					      ENDIF
     16  675a
     17  675a					      REPEAT	.CYCLES / 2
     18  675a		       ea		      nop
     17  675a					      REPEND
     18  675b		       ea		      nop
     19  675c					      REPEND
    235  675c
    236  675c		       88		      dey
    237  675d
    238  675d		       8a		      txa
    239  675e				  -	      ifconst	bmp_96x2_4_fade
    240  675e				  -	      and	bmp_96x2_4_fade
    241  675e					      else
      0  675e					      sleep	3
      1  675e				   .CYCLES    SET	3
      2  675e
      3  675e				  -	      IF	.CYCLES < 2
      4  675e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  675e				  -	      ERR
      6  675e					      ENDIF
      7  675e
      8  675e					      IF	.CYCLES & 1
      9  675e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  675e		       04 00		      nop	0
     11  6760				  -	      ELSE
     12  6760				  -	      bit	VSYNC
     13  6760					      ENDIF
     14  6760				   .CYCLES    SET	.CYCLES - 3
     15  6760					      ENDIF
     16  6760
     17  6760				  -	      REPEAT	.CYCLES / 2
     18  6760				  -	      nop
     19  6760					      REPEND
    243  6760					      endif
    244  6760		       85 07		      sta	COLUP1	;3
    245  6762		       85 06		      sta	COLUP0	;3
    246  6764
    247  6764		       c4 cb		      cpy	temp1	;2
    248  6766		       d0 98		      bne	pfline_96x2_4_frame1	;2/3
    249  6768
    250  6768				   pf96x2_4_1codeend
    251  6768							;echo "critical code #2 in 96x2_4 is ",(pf96x2_4_1codeend-pfline_96x2_4_frame1), " bytes long."
    252  6768
    253  6768		       a9 00		      lda	#0
    254  676a		       85 1b		      sta	GRP0
    255  676c		       85 1c		      sta	GRP1
    256  676e
    257  676e				   pfdone_96x2_4
    258  676e		       85 02		      sta	WSYNC	; debug
    259  6770
    260  6770		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    161  6771					      endif		;mk_96x2_4_on
    162  6771
    163  6771					      ifconst	mk_96x2_5_on
------- FILE titlescreen/asm/96x2_5_kernel.asm LEVEL 3 PASS 3
      0  6771					      include	"titlescreen/asm/96x2_5_kernel.asm"
      1  6771				   draw_bmp_96x2_5
      2  6771
      3  6771				  -	      ifconst	bmp_96x2_5_index
      4  6771				  -	      lda	#(bmp_96x2_5_height-1)
      5  6771				  -	      sec
      6  6771				  -	      sbc	bmp_96x2_5_index
      7  6771				  -	      tay
      8  6771				  -	      sbc	#bmp_96x2_5_window
      9  6771				  -	      sta	temp1
     10  6771					      else
     11  6771		       a0 04		      ldy	#(bmp_96x2_5_window-1)
     12  6773		       a9 ff		      lda	#255
     13  6775		       85 cb		      sta	temp1
     14  6777					      endif
     15  6777
     16  6777		       a9 03		      lda	#3
     17  6779		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  677b		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  677d		       a9 00		      lda	#0
     20  677f
     21  677f		       b9 bd bd 	      lda	bmp_96x2_5_colors,y	;4
     22  6782				  -	      ifconst	bmp_96x2_5_fade
     23  6782				  -	      and	bmp_96x2_5_fade
     24  6782					      endif
     25  6782		       85 06		      sta	COLUP0	;3
     26  6784		       85 07		      sta	COLUP1	;3
     27  6786		       85 2b		      sta	HMCLR	;3
     28  6788
     29  6788		       a5 82		      lda	titleframe
     30  678a		       29 01		      and	#1
     31  678c		       f0 03		      beq	jmp_pf96x2_5_frame0
     32  678e		       4c 70 b8 	      jmp	pf96x2_5_frame1
     33  6791				   jmp_pf96x2_5_frame0
     34  6791		       4c 94 b7 	      jmp	pf96x2_5_frame0
     35  6794
     36  6794				   pf96x2_5_frame0
     37  6794							;postion P0 and P1
     38  6794		       85 02		      sta	WSYNC
     39  6796		       a9 e0		      lda	#%11100000
     40  6798		       85 20		      sta	HMP0
     41  679a		       a9 10		      lda	#%00010000
     42  679c		       85 21		      sta	HMP1
     43  679e		       85 02		      sta	WSYNC
      0  67a0					      sleep	28
      1  67a0				   .CYCLES    SET	28
      2  67a0
      3  67a0				  -	      IF	.CYCLES < 2
      4  67a0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  67a0				  -	      ERR
      6  67a0					      ENDIF
      7  67a0
      8  67a0				  -	      IF	.CYCLES & 1
      9  67a0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  67a0				  -	      nop	0
     11  67a0				  -	      ELSE
     12  67a0				  -	      bit	VSYNC
     13  67a0				  -	      ENDIF
     14  67a0				  -.CYCLES    SET	.CYCLES - 3
     15  67a0					      ENDIF
     16  67a0
     17  67a0					      REPEAT	.CYCLES / 2
     18  67a0		       ea		      nop
     17  67a0					      REPEND
     18  67a1		       ea		      nop
     17  67a1					      REPEND
     18  67a2		       ea		      nop
     17  67a2					      REPEND
     18  67a3		       ea		      nop
     17  67a3					      REPEND
     18  67a4		       ea		      nop
     17  67a4					      REPEND
     18  67a5		       ea		      nop
     17  67a5					      REPEND
     18  67a6		       ea		      nop
     17  67a6					      REPEND
     18  67a7		       ea		      nop
     17  67a7					      REPEND
     18  67a8		       ea		      nop
     17  67a8					      REPEND
     18  67a9		       ea		      nop
     17  67a9					      REPEND
     18  67aa		       ea		      nop
     17  67aa					      REPEND
     18  67ab		       ea		      nop
     17  67ab					      REPEND
     18  67ac		       ea		      nop
     17  67ac					      REPEND
     18  67ad		       ea		      nop
     19  67ae					      REPEND
     45  67ae		       85 10		      sta	RESP0
      0  67b0					      sleep	14
      1  67b0				   .CYCLES    SET	14
      2  67b0
      3  67b0				  -	      IF	.CYCLES < 2
      4  67b0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  67b0				  -	      ERR
      6  67b0					      ENDIF
      7  67b0
      8  67b0				  -	      IF	.CYCLES & 1
      9  67b0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  67b0				  -	      nop	0
     11  67b0				  -	      ELSE
     12  67b0				  -	      bit	VSYNC
     13  67b0				  -	      ENDIF
     14  67b0				  -.CYCLES    SET	.CYCLES - 3
     15  67b0					      ENDIF
     16  67b0
     17  67b0					      REPEAT	.CYCLES / 2
     18  67b0		       ea		      nop
     17  67b0					      REPEND
     18  67b1		       ea		      nop
     17  67b1					      REPEND
     18  67b2		       ea		      nop
     17  67b2					      REPEND
     18  67b3		       ea		      nop
     17  67b3					      REPEND
     18  67b4		       ea		      nop
     17  67b4					      REPEND
     18  67b5		       ea		      nop
     17  67b5					      REPEND
     18  67b6		       ea		      nop
     19  67b7					      REPEND
     47  67b7		       85 11		      sta	RESP1
     48  67b9		       85 02		      sta	WSYNC
     49  67bb		       85 2a		      sta	HMOVE
     50  67bd
     51  67bd		       85 02		      sta	WSYNC
     52  67bf		       85 2b		      sta	HMCLR
     53  67c1		       85 02		      sta	WSYNC
     54  67c3
      0  67c3					      sleep	4
      1  67c3				   .CYCLES    SET	4
      2  67c3
      3  67c3				  -	      IF	.CYCLES < 2
      4  67c3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  67c3				  -	      ERR
      6  67c3					      ENDIF
      7  67c3
      8  67c3				  -	      IF	.CYCLES & 1
      9  67c3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  67c3				  -	      nop	0
     11  67c3				  -	      ELSE
     12  67c3				  -	      bit	VSYNC
     13  67c3				  -	      ENDIF
     14  67c3				  -.CYCLES    SET	.CYCLES - 3
     15  67c3					      ENDIF
     16  67c3
     17  67c3					      REPEAT	.CYCLES / 2
     18  67c3		       ea		      nop
     17  67c3					      REPEND
     18  67c4		       ea		      nop
     19  67c5					      REPEND
     56  67c5		       4c 00 b8 	      jmp	pfline_96x2_5_frame0
     57  67c8							;align so our branch doesn't unexpectedly cross a page...
     58  67c8					      if	>. != >[.+$70]
     59  6800		       00 00 00 00*	      align	256
     60  6800					      endif
     61  6800
     62  6800				   pfline_96x2_5_frame0
     63  6800		       a9 80		      lda	#$80	;2
     64  6802		       85 20		      sta	HMP0	;3
     65  6804		       85 21		      sta	HMP1	;3
     66  6806
     67  6806		       b9 e0 bd 	      lda	bmp_96x2_5_06,y	;4
     68  6809		       85 1c		      sta	GRP1	;3
     69  680b
     70  680b		       b9 c2 bd 	      lda	bmp_96x2_5_00,y
     71  680e		       85 1b		      sta	GRP0
     72  6810		       b9 cc bd 	      lda	bmp_96x2_5_02,y
     73  6813		       85 1b		      sta	GRP0
     74  6815		       b9 d6 bd 	      lda	bmp_96x2_5_04,y
     75  6818		       85 1b		      sta	GRP0
     76  681a
      0  681a					      sleep	2
      1  681a				   .CYCLES    SET	2
      2  681a
      3  681a				  -	      IF	.CYCLES < 2
      4  681a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  681a				  -	      ERR
      6  681a					      ENDIF
      7  681a
      8  681a				  -	      IF	.CYCLES & 1
      9  681a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  681a				  -	      nop	0
     11  681a				  -	      ELSE
     12  681a				  -	      bit	VSYNC
     13  681a				  -	      ENDIF
     14  681a				  -.CYCLES    SET	.CYCLES - 3
     15  681a					      ENDIF
     16  681a
     17  681a					      REPEAT	.CYCLES / 2
     18  681a		       ea		      nop
     19  681b					      REPEND
     78  681b
     79  681b		       b9 ea bd 	      lda	bmp_96x2_5_08,y
     80  681e		       85 1c		      sta	GRP1
     81  6820		       b9 f4 bd 	      lda	bmp_96x2_5_10,y
     82  6823		       85 1c		      sta	GRP1
     83  6825
     84  6825		       b9 c7 bd 	      lda	bmp_96x2_5_01,y
     85  6828		       85 1b		      sta	GRP0
     86  682a
      0  682a					      sleep	8
      1  682a				   .CYCLES    SET	8
      2  682a
      3  682a				  -	      IF	.CYCLES < 2
      4  682a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  682a				  -	      ERR
      6  682a					      ENDIF
      7  682a
      8  682a				  -	      IF	.CYCLES & 1
      9  682a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  682a				  -	      nop	0
     11  682a				  -	      ELSE
     12  682a				  -	      bit	VSYNC
     13  682a				  -	      ENDIF
     14  682a				  -.CYCLES    SET	.CYCLES - 3
     15  682a					      ENDIF
     16  682a
     17  682a					      REPEAT	.CYCLES / 2
     18  682a		       ea		      nop
     17  682a					      REPEND
     18  682b		       ea		      nop
     17  682b					      REPEND
     18  682c		       ea		      nop
     17  682c					      REPEND
     18  682d		       ea		      nop
     19  682e					      REPEND
     88  682e
     89  682e							;sta WSYNC	;=0
     90  682e		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  6830
     92  6830		       b9 bc bd 	      lda	bmp_96x2_5_colors-1,y	;4 - get the title color early and store it for later
     93  6833				  -	      ifconst	bmp_96x2_5_fade
     94  6833				  -	      and	bmp_96x2_5_fade
     95  6833					      else
      0  6833					      sleep	3
      1  6833				   .CYCLES    SET	3
      2  6833
      3  6833				  -	      IF	.CYCLES < 2
      4  6833				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6833				  -	      ERR
      6  6833					      ENDIF
      7  6833
      8  6833					      IF	.CYCLES & 1
      9  6833					      IFNCONST	NO_ILLEGAL_OPCODES
     10  6833		       04 00		      nop	0
     11  6835				  -	      ELSE
     12  6835				  -	      bit	VSYNC
     13  6835					      ENDIF
     14  6835				   .CYCLES    SET	.CYCLES - 3
     15  6835					      ENDIF
     16  6835
     17  6835				  -	      REPEAT	.CYCLES / 2
     18  6835				  -	      nop
     19  6835					      REPEND
     97  6835					      endif
     98  6835		       aa		      tax
     99  6836
    100  6836		       a9 00		      lda	#0	;2
    101  6838		       85 20		      sta	HMP0	;3
    102  683a		       85 21		      sta	HMP1	;3
    103  683c
      0  683c					      sleep	7
      1  683c				   .CYCLES    SET	7
      2  683c
      3  683c				  -	      IF	.CYCLES < 2
      4  683c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  683c				  -	      ERR
      6  683c					      ENDIF
      7  683c
      8  683c					      IF	.CYCLES & 1
      9  683c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  683c		       04 00		      nop	0
     11  683e				  -	      ELSE
     12  683e				  -	      bit	VSYNC
     13  683e					      ENDIF
     14  683e				   .CYCLES    SET	.CYCLES - 3
     15  683e					      ENDIF
     16  683e
     17  683e					      REPEAT	.CYCLES / 2
     18  683e		       ea		      nop
     17  683e					      REPEND
     18  683f		       ea		      nop
     19  6840					      REPEND
    105  6840
    106  6840		       b9 e5 bd 	      lda	bmp_96x2_5_07,y
    107  6843		       85 1c		      sta	GRP1
    108  6845
    109  6845		       b9 d1 bd 	      lda	bmp_96x2_5_03,y	;5
    110  6848		       85 1b		      sta	GRP0	;3 =  8
    111  684a		       b9 db bd 	      lda	bmp_96x2_5_05,y	;5
    112  684d		       85 1b		      sta	GRP0	;3 =  8
    113  684f
      0  684f					      sleep	2
      1  684f				   .CYCLES    SET	2
      2  684f
      3  684f				  -	      IF	.CYCLES < 2
      4  684f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  684f				  -	      ERR
      6  684f					      ENDIF
      7  684f
      8  684f				  -	      IF	.CYCLES & 1
      9  684f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  684f				  -	      nop	0
     11  684f				  -	      ELSE
     12  684f				  -	      bit	VSYNC
     13  684f				  -	      ENDIF
     14  684f				  -.CYCLES    SET	.CYCLES - 3
     15  684f					      ENDIF
     16  684f
     17  684f					      REPEAT	.CYCLES / 2
     18  684f		       ea		      nop
     19  6850					      REPEND
    115  6850
    116  6850		       b9 ef bd 	      lda	bmp_96x2_5_09,y	;5
    117  6853		       85 1c		      sta	GRP1	;3 =  8
    118  6855		       b9 f9 bd 	      lda	bmp_96x2_5_11,y	;5
    119  6858		       85 1c		      sta	GRP1	;3 =  8
    120  685a
      0  685a					      sleep	2
      1  685a				   .CYCLES    SET	2
      2  685a
      3  685a				  -	      IF	.CYCLES < 2
      4  685a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  685a				  -	      ERR
      6  685a					      ENDIF
      7  685a
      8  685a				  -	      IF	.CYCLES & 1
      9  685a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  685a				  -	      nop	0
     11  685a				  -	      ELSE
     12  685a				  -	      bit	VSYNC
     13  685a				  -	      ENDIF
     14  685a				  -.CYCLES    SET	.CYCLES - 3
     15  685a					      ENDIF
     16  685a
     17  685a					      REPEAT	.CYCLES / 2
     18  685a		       ea		      nop
     19  685b					      REPEND
    122  685b		       86 07		      stx	COLUP1
    123  685d		       86 06		      stx	COLUP0
    124  685f
    125  685f
    126  685f		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  6861					      sleep	2
      1  6861				   .CYCLES    SET	2
      2  6861
      3  6861				  -	      IF	.CYCLES < 2
      4  6861				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6861				  -	      ERR
      6  6861					      ENDIF
      7  6861
      8  6861				  -	      IF	.CYCLES & 1
      9  6861				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6861				  -	      nop	0
     11  6861				  -	      ELSE
     12  6861				  -	      bit	VSYNC
     13  6861				  -	      ENDIF
     14  6861				  -.CYCLES    SET	.CYCLES - 3
     15  6861					      ENDIF
     16  6861
     17  6861					      REPEAT	.CYCLES / 2
     18  6861		       ea		      nop
     19  6862					      REPEND
    128  6862		       88		      dey
    129  6863
    130  6863		       c4 cb		      cpy	temp1	;3
    131  6865		       d0 99		      bne	pfline_96x2_5_frame0	;2/3
    132  6867
    133  6867				   pf96x2_5_0codeend
    134  6867							;echo "critical code #1 in 96x2_5 is ",(pf96x2_5_0codeend-pfline_96x2_5_frame0), " bytes long."
    135  6867
    136  6867		       a9 00		      lda	#0
    137  6869		       85 1b		      sta	GRP0
    138  686b		       85 1c		      sta	GRP1
    139  686d		       4c 6e b9 	      jmp	pfdone_96x2_5
    140  6870
    141  6870
    142  6870				   pf96x2_5_frame1
    143  6870
    144  6870							;postion P0 and P1
    145  6870		       85 02		      sta	WSYNC
    146  6872		       a9 20		      lda	#%00100000
    147  6874		       85 20		      sta	HMP0
    148  6876		       a9 00		      lda	#0
    149  6878		       a9 f0		      lda	#%11110000
    150  687a		       85 21		      sta	HMP1
    151  687c		       85 02		      sta	WSYNC
      0  687e					      sleep	32
      1  687e				   .CYCLES    SET	32
      2  687e
      3  687e				  -	      IF	.CYCLES < 2
      4  687e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  687e				  -	      ERR
      6  687e					      ENDIF
      7  687e
      8  687e				  -	      IF	.CYCLES & 1
      9  687e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  687e				  -	      nop	0
     11  687e				  -	      ELSE
     12  687e				  -	      bit	VSYNC
     13  687e				  -	      ENDIF
     14  687e				  -.CYCLES    SET	.CYCLES - 3
     15  687e					      ENDIF
     16  687e
     17  687e					      REPEAT	.CYCLES / 2
     18  687e		       ea		      nop
     17  687e					      REPEND
     18  687f		       ea		      nop
     17  687f					      REPEND
     18  6880		       ea		      nop
     17  6880					      REPEND
     18  6881		       ea		      nop
     17  6881					      REPEND
     18  6882		       ea		      nop
     17  6882					      REPEND
     18  6883		       ea		      nop
     17  6883					      REPEND
     18  6884		       ea		      nop
     17  6884					      REPEND
     18  6885		       ea		      nop
     17  6885					      REPEND
     18  6886		       ea		      nop
     17  6886					      REPEND
     18  6887		       ea		      nop
     17  6887					      REPEND
     18  6888		       ea		      nop
     17  6888					      REPEND
     18  6889		       ea		      nop
     17  6889					      REPEND
     18  688a		       ea		      nop
     17  688a					      REPEND
     18  688b		       ea		      nop
     17  688b					      REPEND
     18  688c		       ea		      nop
     17  688c					      REPEND
     18  688d		       ea		      nop
     19  688e					      REPEND
    153  688e		       85 10		      sta	RESP0
      0  6890					      sleep	12
      1  6890				   .CYCLES    SET	12
      2  6890
      3  6890				  -	      IF	.CYCLES < 2
      4  6890				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6890				  -	      ERR
      6  6890					      ENDIF
      7  6890
      8  6890				  -	      IF	.CYCLES & 1
      9  6890				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6890				  -	      nop	0
     11  6890				  -	      ELSE
     12  6890				  -	      bit	VSYNC
     13  6890				  -	      ENDIF
     14  6890				  -.CYCLES    SET	.CYCLES - 3
     15  6890					      ENDIF
     16  6890
     17  6890					      REPEAT	.CYCLES / 2
     18  6890		       ea		      nop
     17  6890					      REPEND
     18  6891		       ea		      nop
     17  6891					      REPEND
     18  6892		       ea		      nop
     17  6892					      REPEND
     18  6893		       ea		      nop
     17  6893					      REPEND
     18  6894		       ea		      nop
     17  6894					      REPEND
     18  6895		       ea		      nop
     19  6896					      REPEND
    155  6896		       85 11		      sta	RESP1
    156  6898		       85 02		      sta	WSYNC
    157  689a		       85 2a		      sta	HMOVE
    158  689c
    159  689c		       85 02		      sta	WSYNC
    160  689e		       85 2b		      sta	HMCLR
    161  68a0
    162  68a0
    163  68a0
    164  68a0		       85 02		      sta	WSYNC
      0  68a2					      sleep	3
      1  68a2				   .CYCLES    SET	3
      2  68a2
      3  68a2				  -	      IF	.CYCLES < 2
      4  68a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  68a2				  -	      ERR
      6  68a2					      ENDIF
      7  68a2
      8  68a2					      IF	.CYCLES & 1
      9  68a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  68a2		       04 00		      nop	0
     11  68a4				  -	      ELSE
     12  68a4				  -	      bit	VSYNC
     13  68a4					      ENDIF
     14  68a4				   .CYCLES    SET	.CYCLES - 3
     15  68a4					      ENDIF
     16  68a4
     17  68a4				  -	      REPEAT	.CYCLES / 2
     18  68a4				  -	      nop
     19  68a4					      REPEND
    166  68a4		       4c 00 b9 	      jmp	pfline_96x2_5_frame1
    167  68a7
    168  68a7							;align so our branch doesn't unexpectedly cross a page...
    169  68a7					      if	>. != >[.+$70]
    170  6900		       00 00 00 00*	      align	256
    171  6900					      endif
    172  6900
    173  6900				   pfline_96x2_5_frame1
    174  6900
    175  6900		       85 2a		      sta	HMOVE
    176  6902
    177  6902		       b9 e5 bd 	      lda	bmp_96x2_5_07,y	;4
    178  6905		       85 1c		      sta	GRP1	;3
    179  6907
    180  6907		       a9 00		      lda	#$0	;2
    181  6909		       85 20		      sta	HMP0	;3
    182  690b		       85 21		      sta	HMP1	;3
    183  690d
    184  690d		       b9 c7 bd 	      lda	bmp_96x2_5_01,y
    185  6910		       8d 1b 00 	      sta.w	GRP0
    186  6913		       b9 d1 bd 	      lda	bmp_96x2_5_03,y
    187  6916		       85 1b		      sta	GRP0
    188  6918		       b9 db bd 	      lda	bmp_96x2_5_05,y
    189  691b		       85 1b		      sta	GRP0
    190  691d
      0  691d					      sleep	2
      1  691d				   .CYCLES    SET	2
      2  691d
      3  691d				  -	      IF	.CYCLES < 2
      4  691d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  691d				  -	      ERR
      6  691d					      ENDIF
      7  691d
      8  691d				  -	      IF	.CYCLES & 1
      9  691d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  691d				  -	      nop	0
     11  691d				  -	      ELSE
     12  691d				  -	      bit	VSYNC
     13  691d				  -	      ENDIF
     14  691d				  -.CYCLES    SET	.CYCLES - 3
     15  691d					      ENDIF
     16  691d
     17  691d					      REPEAT	.CYCLES / 2
     18  691d		       ea		      nop
     19  691e					      REPEND
    192  691e
    193  691e		       b9 ef bd 	      lda	bmp_96x2_5_09,y
    194  6921		       85 1c		      sta	GRP1
    195  6923		       b9 f9 bd 	      lda	bmp_96x2_5_11,y
    196  6926		       85 1c		      sta	GRP1
    197  6928
    198  6928		       b9 c2 bd 	      lda	bmp_96x2_5_00,y
    199  692b		       85 1b		      sta	GRP0
    200  692d
    201  692d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    202  6930
    203  6930							;sta WSYNC	;=0 -----------------------------------------
    204  6930
    205  6930		       b9 e0 bd 	      lda	bmp_96x2_5_06,y
    206  6933		       85 1c		      sta	GRP1
    207  6935
      0  6935					      sleep	8
      1  6935				   .CYCLES    SET	8
      2  6935
      3  6935				  -	      IF	.CYCLES < 2
      4  6935				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6935				  -	      ERR
      6  6935					      ENDIF
      7  6935
      8  6935				  -	      IF	.CYCLES & 1
      9  6935				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6935				  -	      nop	0
     11  6935				  -	      ELSE
     12  6935				  -	      bit	VSYNC
     13  6935				  -	      ENDIF
     14  6935				  -.CYCLES    SET	.CYCLES - 3
     15  6935					      ENDIF
     16  6935
     17  6935					      REPEAT	.CYCLES / 2
     18  6935		       ea		      nop
     17  6935					      REPEND
     18  6936		       ea		      nop
     17  6936					      REPEND
     18  6937		       ea		      nop
     17  6937					      REPEND
     18  6938		       ea		      nop
     19  6939					      REPEND
    209  6939
    210  6939		       b9 bc bd 	      lda	bmp_96x2_5_colors-1,y	;get the title color early and store it for later
    211  693c		       aa		      tax		;2
    212  693d
      0  693d					      sleep	3
      1  693d				   .CYCLES    SET	3
      2  693d
      3  693d				  -	      IF	.CYCLES < 2
      4  693d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  693d				  -	      ERR
      6  693d					      ENDIF
      7  693d
      8  693d					      IF	.CYCLES & 1
      9  693d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  693d		       04 00		      nop	0
     11  693f				  -	      ELSE
     12  693f				  -	      bit	VSYNC
     13  693f					      ENDIF
     14  693f				   .CYCLES    SET	.CYCLES - 3
     15  693f					      ENDIF
     16  693f
     17  693f				  -	      REPEAT	.CYCLES / 2
     18  693f				  -	      nop
     19  693f					      REPEND
    214  693f
    215  693f		       a9 80		      lda	#$80	;2
    216  6941		       85 20		      sta	HMP0	;3
    217  6943		       85 21		      sta	HMP1	;3
    218  6945
    219  6945
    220  6945		       b9 cc bd 	      lda	bmp_96x2_5_02,y	;5
    221  6948		       85 1b		      sta	GRP0	;3 =  8
    222  694a
    223  694a		       b9 d6 bd 	      lda	bmp_96x2_5_04,y	;5
    224  694d		       85 1b		      sta	GRP0	;3 =  8
    225  694f
      0  694f					      sleep	2
      1  694f				   .CYCLES    SET	2
      2  694f
      3  694f				  -	      IF	.CYCLES < 2
      4  694f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  694f				  -	      ERR
      6  694f					      ENDIF
      7  694f
      8  694f				  -	      IF	.CYCLES & 1
      9  694f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  694f				  -	      nop	0
     11  694f				  -	      ELSE
     12  694f				  -	      bit	VSYNC
     13  694f				  -	      ENDIF
     14  694f				  -.CYCLES    SET	.CYCLES - 3
     15  694f					      ENDIF
     16  694f
     17  694f					      REPEAT	.CYCLES / 2
     18  694f		       ea		      nop
     19  6950					      REPEND
    227  6950
    228  6950		       b9 ea bd 	      lda	bmp_96x2_5_08,y	;5
    229  6953		       85 1c		      sta	GRP1	;3 =  8
    230  6955
    231  6955		       b9 f4 bd 	      lda	bmp_96x2_5_10,y	;5
    232  6958		       85 1c		      sta	GRP1	;3 =  8
    233  695a
      0  695a					      sleep	4
      1  695a				   .CYCLES    SET	4
      2  695a
      3  695a				  -	      IF	.CYCLES < 2
      4  695a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  695a				  -	      ERR
      6  695a					      ENDIF
      7  695a
      8  695a				  -	      IF	.CYCLES & 1
      9  695a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  695a				  -	      nop	0
     11  695a				  -	      ELSE
     12  695a				  -	      bit	VSYNC
     13  695a				  -	      ENDIF
     14  695a				  -.CYCLES    SET	.CYCLES - 3
     15  695a					      ENDIF
     16  695a
     17  695a					      REPEAT	.CYCLES / 2
     18  695a		       ea		      nop
     17  695a					      REPEND
     18  695b		       ea		      nop
     19  695c					      REPEND
    235  695c
    236  695c		       88		      dey
    237  695d
    238  695d		       8a		      txa
    239  695e				  -	      ifconst	bmp_96x2_5_fade
    240  695e				  -	      and	bmp_96x2_5_fade
    241  695e					      else
      0  695e					      sleep	3
      1  695e				   .CYCLES    SET	3
      2  695e
      3  695e				  -	      IF	.CYCLES < 2
      4  695e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  695e				  -	      ERR
      6  695e					      ENDIF
      7  695e
      8  695e					      IF	.CYCLES & 1
      9  695e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  695e		       04 00		      nop	0
     11  6960				  -	      ELSE
     12  6960				  -	      bit	VSYNC
     13  6960					      ENDIF
     14  6960				   .CYCLES    SET	.CYCLES - 3
     15  6960					      ENDIF
     16  6960
     17  6960				  -	      REPEAT	.CYCLES / 2
     18  6960				  -	      nop
     19  6960					      REPEND
    243  6960					      endif
    244  6960		       85 07		      sta	COLUP1	;3
    245  6962		       85 06		      sta	COLUP0	;3
    246  6964
    247  6964		       c4 cb		      cpy	temp1	;2
    248  6966		       d0 98		      bne	pfline_96x2_5_frame1	;2/3
    249  6968
    250  6968				   pf96x2_5_1codeend
    251  6968							;echo "critical code #2 in 96x2_5 is ",(pf96x2_5_1codeend-pfline_96x2_5_frame1), " bytes long."
    252  6968
    253  6968		       a9 00		      lda	#0
    254  696a		       85 1b		      sta	GRP0
    255  696c		       85 1c		      sta	GRP1
    256  696e
    257  696e				   pfdone_96x2_5
    258  696e		       85 02		      sta	WSYNC	; debug
    259  6970
    260  6970		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    165  6971					      endif		;mk_96x2_5_on
    166  6971
    167  6971				  -	      ifconst	mk_96x2_6_on
    168  6971				  -	      include	"titlescreen/asm/96x2_6_kernel.asm"
    169  6971					      endif		;mk_96x2_6_on
    170  6971
    171  6971				  -	      ifconst	mk_96x2_7_on
    172  6971				  -	      include	"titlescreen/asm/96x2_7_kernel.asm"
    173  6971					      endif		;mk_96x2_7_on
    174  6971
    175  6971				  -	      ifconst	mk_96x2_8_on
    176  6971				  -	      include	"titlescreen/asm/96x2_8_kernel.asm"
    177  6971					      endif		;mk_96x2_8_on
    178  6971
    179  6971					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 3
      0  6971					      include	"titlescreen/asm/score_kernel.asm"
      1  6971							; The batari Basic score kernel
      2  6971							; This minikernel is not under the same license as the rest of the
      3  6971							; titlescreen code. Refer to the bB license before you use this in
      4  6971							; a non-bB program.
      5  6971
      6  6971				   draw_score_display
      7  6971
      8  6971		       a7 b8		      lax	score+0
      9  6973		       20 43 ba 	      jsr	miniscorepointerset
     10  6976		       84 b3		      sty	scorepointers+8
     11  6978		       86 ab		      stx	scorepointers+0
     12  697a		       a7 b9		      lax	score+1
     13  697c		       20 43 ba 	      jsr	miniscorepointerset
     14  697f		       84 af		      sty	scorepointers+4
     15  6981		       86 b1		      stx	scorepointers+6
     16  6983		       a7 ba		      lax	score+2
     17  6985		       20 43 ba 	      jsr	miniscorepointerset
     18  6988		       84 b5		      sty	scorepointers+10
     19  698a		       86 ad		      stx	scorepointers+2
     20  698c
     21  698c		       85 2b		      sta	HMCLR
     22  698e		       ba		      tsx
     23  698f		       86 f6		      stx	stack1
     24  6991							;ldx #$20
     25  6991		       a2 60		      ldx	#$60
     26  6993		       86 20		      stx	HMP0
     27  6995
     28  6995		       a2 00		      ldx	#0
     29  6997		       85 02		      sta	WSYNC	;   0
     30  6999		       86 1b		      STx	GRP0	; 3 3
     31  699b		       86 1c		      STx	GRP1	; 3 6 seems to be needed because of vdel
     32  699d
      0  699d					      sleep	7	; 7 13
      1  699d				   .CYCLES    SET	7
      2  699d
      3  699d				  -	      IF	.CYCLES < 2
      4  699d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  699d				  -	      ERR
      6  699d					      ENDIF
      7  699d
      8  699d					      IF	.CYCLES & 1
      9  699d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  699d		       04 00		      nop	0
     11  699f				  -	      ELSE
     12  699f				  -	      bit	VSYNC
     13  699f					      ENDIF
     14  699f				   .CYCLES    SET	.CYCLES - 3
     15  699f					      ENDIF
     16  699f
     17  699f					      REPEAT	.CYCLES / 2
     18  699f		       ea		      nop
     17  699f					      REPEND
     18  69a0		       ea		      nop
     19  69a1					      REPEND
     34  69a1
     35  69a1		       a9 be		      lda	#>miniscoretable	; 2 15
     36  69a3		       95 ac		      sta	scorepointers+1,x	; 4 19
     37  69a5		       95 ae		      sta	scorepointers+3,x	; 4 23
     38  69a7		       95 b0		      sta	scorepointers+5,x	; 4 27
     39  69a9		       95 b2		      sta	scorepointers+7,x	; 4 31
     40  69ab		       95 b4		      sta	scorepointers+9,x	; 4 35
     41  69ad		       95 b6		      sta	scorepointers+11,x	; 4 39
     42  69af
     43  69af		       a0 07		      LDY	#7	; 2 41
     44  69b1		       85 10		      STA	RESP0	; 3 44
     45  69b3		       85 11		      STA	RESP1	; 3 47
     46  69b5
     47  69b5		       a9 03		      LDA	#$03	; 2 49
     48  69b7		       85 04		      STA	NUSIZ0	; 3 52
     49  69b9		       95 05		      STA	NUSIZ1,x	; 4 56
     50  69bb		       85 25		      STA	VDELP0	; 3 59
     51  69bd		       85 26		      STA	VDELP1	; 3 62
     52  69bf							;LDA #$30		; 2 64
     53  69bf		       a9 70		      LDA	#$70	; 2 64
     54  69c1		       85 21		      STA	HMP1	; 3 67
     55  69c3		       a5 eb		      LDA	scorecolor	; 3 70
     56  69c5		       85 2a		      STA	HMOVE	; cycle 73 ?
     57  69c7				  -	      ifconst	score_kernel_fade
     58  69c7				  -	      and	score_kernel_fade
     59  69c7					      endif
     60  69c7
     61  69c7		       85 06		      STA	COLUP0
     62  69c9		       85 07		      STA	COLUP1
     63  69cb				  -	      ifconst	scorefade
     64  69cb				  -	      STA	stack2	; scorefade
     65  69cb					      endif
     66  69cb		       b1 ab		      lda	(scorepointers),y
     67  69cd		       85 1b		      sta	GRP0
     68  69cf		       b1 b3		      lda	(scorepointers+8),y
     69  69d1		       85 02		      sta	WSYNC
      0  69d3					      sleep	2
      1  69d3				   .CYCLES    SET	2
      2  69d3
      3  69d3				  -	      IF	.CYCLES < 2
      4  69d3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  69d3				  -	      ERR
      6  69d3					      ENDIF
      7  69d3
      8  69d3				  -	      IF	.CYCLES & 1
      9  69d3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  69d3				  -	      nop	0
     11  69d3				  -	      ELSE
     12  69d3				  -	      bit	VSYNC
     13  69d3				  -	      ENDIF
     14  69d3				  -.CYCLES    SET	.CYCLES - 3
     15  69d3					      ENDIF
     16  69d3
     17  69d3					      REPEAT	.CYCLES / 2
     18  69d3		       ea		      nop
     19  69d4					      REPEND
     71  69d4		       4c 0b ba 	      jmp	beginscoreloop
     72  69d7
     73  69d7					      if	((<*)>$28)
     74  6a00		       00 00 00 00*	      align	256	; kludge that potentially wastes space!  should be fixed!
     75  6a00					      endif
     76  6a00
     77  6a00				   scoreloop2
     78  6a00				  -	      ifconst	scorefade
     79  6a00				  -	      lda	stack2
     80  6a00				  -	      sta	COLUP0
     81  6a00				  -	      sta	COLUP1
     82  6a00					      else
      0  6a00					      sleep	9
      1  6a00				   .CYCLES    SET	9
      2  6a00
      3  6a00				  -	      IF	.CYCLES < 2
      4  6a00				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6a00				  -	      ERR
      6  6a00					      ENDIF
      7  6a00
      8  6a00					      IF	.CYCLES & 1
      9  6a00					      IFNCONST	NO_ILLEGAL_OPCODES
     10  6a00		       04 00		      nop	0
     11  6a02				  -	      ELSE
     12  6a02				  -	      bit	VSYNC
     13  6a02					      ENDIF
     14  6a02				   .CYCLES    SET	.CYCLES - 3
     15  6a02					      ENDIF
     16  6a02
     17  6a02					      REPEAT	.CYCLES / 2
     18  6a02		       ea		      nop
     17  6a02					      REPEND
     18  6a03		       ea		      nop
     17  6a03					      REPEND
     18  6a04		       ea		      nop
     19  6a05					      REPEND
     84  6a05					      endif
     85  6a05		       b1 ab		      lda	(scorepointers),y	;+5  68  204
     86  6a07		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     87  6a09		       b1 b3		      lda	(scorepointers+$8),y	;+5   5   15
     88  6a0b							; cycle 0
     89  6a0b				   beginscoreloop
     90  6a0b		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
     91  6a0d		       b1 b1		      lda	(scorepointers+$6),y	;+5  13   39
     92  6a0f		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
     93  6a11		       b3 ad		      lax	(scorepointers+$2),y	;+5  29   87
     94  6a13		       9a		      txs
     95  6a14		       b3 af		      lax	(scorepointers+$4),y	;+5  36  108
     96  6a16
     97  6a16				  -	      ifconst	scorefade
     98  6a16				  -	      dec	stack2
     99  6a16					      else
      0  6a16					      sleep	5
      1  6a16				   .CYCLES    SET	5
      2  6a16
      3  6a16				  -	      IF	.CYCLES < 2
      4  6a16				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6a16				  -	      ERR
      6  6a16					      ENDIF
      7  6a16
      8  6a16					      IF	.CYCLES & 1
      9  6a16					      IFNCONST	NO_ILLEGAL_OPCODES
     10  6a16		       04 00		      nop	0
     11  6a18				  -	      ELSE
     12  6a18				  -	      bit	VSYNC
     13  6a18					      ENDIF
     14  6a18				   .CYCLES    SET	.CYCLES - 3
     15  6a18					      ENDIF
     16  6a18
     17  6a18					      REPEAT	.CYCLES / 2
     18  6a18		       ea		      nop
     19  6a19					      REPEND
    101  6a19					      endif
      0  6a19					      sleep	2
      1  6a19				   .CYCLES    SET	2
      2  6a19
      3  6a19				  -	      IF	.CYCLES < 2
      4  6a19				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6a19				  -	      ERR
      6  6a19					      ENDIF
      7  6a19
      8  6a19				  -	      IF	.CYCLES & 1
      9  6a19				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6a19				  -	      nop	0
     11  6a19				  -	      ELSE
     12  6a19				  -	      bit	VSYNC
     13  6a19				  -	      ENDIF
     14  6a19				  -.CYCLES    SET	.CYCLES - 3
     15  6a19					      ENDIF
     16  6a19
     17  6a19					      REPEAT	.CYCLES / 2
     18  6a19		       ea		      nop
     19  6a1a					      REPEND
    103  6a1a
    104  6a1a		       b1 b5		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    105  6a1c		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    106  6a1e		       ba		      tsx
    107  6a1f		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    108  6a21		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    109  6a23
    110  6a23		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    111  6a25		       88		      dey
    112  6a26		       10 d8		      bpl	scoreloop2	;+2  60  180
    113  6a28				   scoreloop2end
    114  6a28
    115  6a28							;echo "critical size: ",(scoreloop2end-scoreloop2)
    116  6a28
    117  6a28
    118  6a28		       a6 f6		      ldx	stack1
    119  6a2a		       9a		      txs
    120  6a2b
    121  6a2b		       a9 00		      LDA	#0
    122  6a2d		       85 0e		      sta	PF1
    123  6a2f		       85 1b		      STA	GRP0
    124  6a31		       85 1c		      STA	GRP1
    125  6a33		       85 25		      STA	VDELP0
    126  6a35		       85 26		      STA	VDELP1
    127  6a37		       85 04		      STA	NUSIZ0
    128  6a39		       85 05		      STA	NUSIZ1
    129  6a3b
    130  6a3b							; clear out the score pointers in case they're stolen DPC variables...
    131  6a3b		       a2 0b		      ldx	#11
    132  6a3d				   clearscoreploop
    133  6a3d		       95 ab		      sta	scorepointers,x
    134  6a3f		       ca		      dex
    135  6a40		       10 fb		      bpl	clearscoreploop
    136  6a42
    137  6a42
    138  6a42							;;ldy temp3
    139  6a42							;ldy scorepointers+8
    140  6a42							;sty scorepointers+3
    141  6a42
    142  6a42							;;ldy temp5
    143  6a42							;ldy scorepointers+10
    144  6a42							;sty scorepointers+5
    145  6a42		       60		      rts
    146  6a43
    147  6a43				   miniscorepointerset
    148  6a43		       29 0f		      and	#$0F
    149  6a45		       0a		      asl
    150  6a46		       0a		      asl
    151  6a47		       0a		      asl
    152  6a48		       69 00		      adc	#<miniscoretable
    153  6a4a		       a8		      tay
    154  6a4b		       8a		      txa
    155  6a4c		       29 f0		      and	#$F0
    156  6a4e		       4a		      lsr
    157  6a4f		       69 00		      adc	#<miniscoretable
    158  6a51		       aa		      tax
    159  6a52		       60		      rts
    160  6a53
------- FILE titlescreen/asm/titlescreen.asm
    181  6a53					      endif		;mk_score_on
    182  6a53
    183  6a53					      ifconst	mk_gameselect_on
------- FILE titlescreen/asm/gameselect_kernel.asm LEVEL 3 PASS 3
      0  6a53					      include	"titlescreen/asm/gameselect_kernel.asm"
      1  6a53
      2  6a53				   draw_gameselect_display
      3  6a53		       a9 00		      lda	#0
      4  6a55		       85 1b		      sta	GRP0
      5  6a57		       85 1c		      sta	GRP1
      6  6a59
      7  6a59		       a0 04		      ldy	#4
      8  6a5b		       84 91		      sty	aux2
      9  6a5d
     10  6a5d		       ad 50 be 	      lda	bmp_gameselect_color
     11  6a60		       85 06		      sta	COLUP0
     12  6a62		       85 07		      sta	COLUP1
     13  6a64
     14  6a64							;change gamenumber to a BCD number and stick it in temp5
     15  6a64		       a5 e5		      lda	gamenumber
     16  6a66		       85 cd		      sta	temp3
     17  6a68		       a9 00		      lda	#0
     18  6a6a		       85 ce		      sta	temp4
     19  6a6c		       a2 08		      ldx	#8
     20  6a6e		       18		      clc
     21  6a6f		       f8		      sed
     22  6a70				   converttobcd
     23  6a70		       06 cd		      asl	temp3
     24  6a72		       a5 ce		      lda	temp4
     25  6a74		       65 ce		      adc	temp4
     26  6a76		       85 ce		      sta	temp4
     27  6a78		       ca		      dex
     28  6a79		       d0 f5		      bne	converttobcd
     29  6a7b		       d8		      cld
     30  6a7c
     31  6a7c		       a5 ce		      lda	temp4
     32  6a7e		       29 0f		      and	#$0f
     33  6a80		       85 cd		      sta	temp3
     34  6a82		       0a		      asl
     35  6a83		       0a		      asl
     36  6a84		       18		      clc
     37  6a85		       65 cd		      adc	temp3	; *5
     38  6a87		       18		      clc
     39  6a88		       69 65		      adc	#<(font_gameselect_img)
     40  6a8a		       85 b5		      sta	scorepointers+10
     41  6a8c
     42  6a8c		       a5 ce		      lda	temp4
     43  6a8e		       29 f0		      and	#$f0
     44  6a90		       4a		      lsr
     45  6a91		       4a		      lsr
     46  6a92		       85 cd		      sta	temp3
     47  6a94		       4a		      lsr
     48  6a95		       4a		      lsr
     49  6a96		       18		      clc
     50  6a97		       65 cd		      adc	temp3	; *5
     51  6a99		       18		      clc
     52  6a9a		       69 65		      adc	#<(font_gameselect_img)
     53  6a9c		       85 b3		      sta	scorepointers+8
     54  6a9e
     55  6a9e
     56  6a9e							;setup score pointers to point at my bitmap slices instead
     57  6a9e		       a9 51		      lda	#<(bmp_gameselect_CHAR0)
     58  6aa0		       85 ab		      sta	scorepointers+0
     59  6aa2		       a9 be		      lda	#>(bmp_gameselect_CHAR0)
     60  6aa4		       85 ac		      sta	scorepointers+1
     61  6aa6		       a9 56		      lda	#<(bmp_gameselect_CHAR1)
     62  6aa8		       85 ad		      sta	scorepointers+2
     63  6aaa		       a9 be		      lda	#>(bmp_gameselect_CHAR1)
     64  6aac		       85 ae		      sta	scorepointers+3
     65  6aae		       a9 5b		      lda	#<(bmp_gameselect_CHAR2)
     66  6ab0		       85 af		      sta	scorepointers+4
     67  6ab2		       a9 be		      lda	#>(bmp_gameselect_CHAR2)
     68  6ab4		       85 b0		      sta	scorepointers+5
     69  6ab6		       a9 60		      lda	#<(bmp_gameselect_CHAR3)
     70  6ab8		       85 b1		      sta	scorepointers+6
     71  6aba		       a9 be		      lda	#>(bmp_gameselect_CHAR3)
     72  6abc		       85 b2		      sta	scorepointers+7
     73  6abe
     74  6abe		       a9 be		      lda	#>(font_gameselect_img)
     75  6ac0		       85 b4		      sta	scorepointers+9
     76  6ac2
     77  6ac2		       a9 be		      lda	#>(font_gameselect_img)
     78  6ac4		       85 b6		      sta	scorepointers+11
     79  6ac6
     80  6ac6		       4c 5f b1 	      jmp	draw_bmp_48x1_X
------- FILE titlescreen/asm/titlescreen.asm
    185  6ac9					      endif		;mk_gameselect_on
    186  6ac9
    187  6ac9				   PFWAIT
    188  6ac9		       ad 84 02 	      lda	INTIM
    189  6acc		       d0 fb		      bne	PFWAIT
    190  6ace		       85 02		      sta	WSYNC
    191  6ad0
    192  6ad0				   OVERSCAN
    193  6ad0				  -	      ifnconst	overscan_time
    194  6ad0				  -	      lda	#34+128
    195  6ad0					      else
    196  6ad0		       a9 a0		      lda	#overscan_time+128-5
    197  6ad2					      endif
    198  6ad2		       8d 96 02 	      sta	TIM64T
    199  6ad5
    200  6ad5							;fix height variables we borrowed, so DPC doesn't crash on drawscreen...
    201  6ad5					      ifconst	player9height
    202  6ad5		       a0 08		      ldy	#8
    203  6ad7		       a9 00		      lda	#0
    204  6ad9		       85 a5		      sta	player0height
    205  6adb				   .playerheightfixloop
    206  6adb		       99 a6 00 	      sta	player1height,y
    207  6ade					      ifconst	_NUSIZ1
    208  6ade		       99 af 00 	      sta	_NUSIZ1,y
    209  6ae1					      endif
    210  6ae1		       88		      dey
    211  6ae2		       10 f7		      bpl	.playerheightfixloop
    212  6ae4					      endif
    213  6ae4
    214  6ae4		       a9 c2		      lda	#%11000010
    215  6ae6		       85 02		      sta	WSYNC
    216  6ae8		       85 01		      sta	VBLANK
      0  6aea					      RETURN
      1  6aea				  -	      ifnconst	bankswitch
      2  6aea				  -	      rts
      3  6aea					      else
      4  6aea		       4c e0 df 	      jmp	BS_return
      5  6aed					      endif
    218  6aed
    219  6aed					      ifconst	mk_48x1_1_on
------- FILE titlescreen/48x1_1_image.asm LEVEL 3 PASS 3
      0  6aed					      include	"titlescreen/48x1_1_image.asm"
      1  6aed
      2  6aed							;*** The height of the displayed data...
      3  6aed		       00 32	   bmp_48x1_1_window =	50
      4  6aed
      5  6aed							;*** The height of the bitmap data. This can be larger than
      6  6aed							;*** the displayed data height, if you're scrolling or animating
      7  6aed							;*** the data...
      8  6aed		       00 32	   bmp_48x1_1_height =	50
      9  6aed
     10  6aed				  -	      ifnconst	bmp_48x1_1_PF1
     11  6aed				  -bmp_48x1_1_PF1
     12  6aed					      endif
     13  6aed		       00		      BYTE.b	%00000000
     14  6aee				  -	      ifnconst	bmp_48x1_1_PF2
     15  6aee				  -bmp_48x1_1_PF2
     16  6aee					      endif
     17  6aee		       00		      BYTE.b	%00000000
     18  6aef				  -	      ifnconst	bmp_48x1_1_background
     19  6aef				  -bmp_48x1_1_background
     20  6aef					      endif
     21  6aef		       c2		      BYTE.b	$c2
     22  6af0
     23  6af0				  -	      ifnconst	bmp_48x1_1_color
     24  6af0				  -bmp_48x1_1_color
     25  6af0					      endif
     26  6af0							; *** this is the bitmap color. If you want to change it in a
     27  6af0							; *** variable instead, dim one in bB called "bmp_48x1_1_color"
     28  6af0		       c6		      .byte.b	$C6
     29  6af1
     30  6af1
     31  6af1					      if	>. != >[.+bmp_48x1_1_height]
     32  6b00		       00 00 00 00*	      align	256
     33  6b00					      endif
     34  6b00
     35  6b00				   bmp_48x1_1_00
     36  6b00							; *** replace this block with your bimap_00 data block...
     37  6b00		       00		      BYTE.b	%00000000
     38  6b01		       00		      BYTE.b	%00000000
     39  6b02		       01		      BYTE.b	%00000001
     40  6b03		       03		      BYTE.b	%00000011
     41  6b04		       07		      BYTE.b	%00000111
     42  6b05		       07		      BYTE.b	%00000111
     43  6b06		       0f		      BYTE.b	%00001111
     44  6b07		       1f		      BYTE.b	%00011111
     45  6b08		       1f		      BYTE.b	%00011111
     46  6b09		       1f		      BYTE.b	%00011111
     47  6b0a		       3f		      BYTE.b	%00111111
     48  6b0b		       3f		      BYTE.b	%00111111
     49  6b0c		       3f		      BYTE.b	%00111111
     50  6b0d		       3f		      BYTE.b	%00111111
     51  6b0e		       7f		      BYTE.b	%01111111
     52  6b0f		       7f		      BYTE.b	%01111111
     53  6b10		       7f		      BYTE.b	%01111111
     54  6b11		       7f		      BYTE.b	%01111111
     55  6b12		       7f		      BYTE.b	%01111111
     56  6b13		       7f		      BYTE.b	%01111111
     57  6b14		       7f		      BYTE.b	%01111111
     58  6b15		       7f		      BYTE.b	%01111111
     59  6b16		       7f		      BYTE.b	%01111111
     60  6b17		       7f		      BYTE.b	%01111111
     61  6b18		       7f		      BYTE.b	%01111111
     62  6b19		       7f		      BYTE.b	%01111111
     63  6b1a		       7f		      BYTE.b	%01111111
     64  6b1b		       3f		      BYTE.b	%00111111
     65  6b1c		       3f		      BYTE.b	%00111111
     66  6b1d		       3f		      BYTE.b	%00111111
     67  6b1e		       3f		      BYTE.b	%00111111
     68  6b1f		       1f		      BYTE.b	%00011111
     69  6b20		       1f		      BYTE.b	%00011111
     70  6b21		       1f		      BYTE.b	%00011111
     71  6b22		       0f		      BYTE.b	%00001111
     72  6b23		       0f		      BYTE.b	%00001111
     73  6b24		       07		      BYTE.b	%00000111
     74  6b25		       03		      BYTE.b	%00000011
     75  6b26		       01		      BYTE.b	%00000001
     76  6b27		       00		      BYTE.b	%00000000
     77  6b28		       00		      BYTE.b	%00000000
     78  6b29		       00		      BYTE.b	%00000000
     79  6b2a		       00		      BYTE.b	%00000000
     80  6b2b		       00		      BYTE.b	%00000000
     81  6b2c		       00		      BYTE.b	%00000000
     82  6b2d		       00		      BYTE.b	%00000000
     83  6b2e		       00		      BYTE.b	%00000000
     84  6b2f		       00		      BYTE.b	%00000000
     85  6b30		       00		      BYTE.b	%00000000
     86  6b31		       00		      BYTE.b	%00000000
     87  6b32
     88  6b32
     89  6b32
     90  6b32				  -	      if	>. != >[.+bmp_48x1_1_height]
     91  6b32				  -	      align	256
     92  6b32					      endif
     93  6b32
     94  6b32
     95  6b32				   bmp_48x1_1_01
     96  6b32							; *** replace this block with your bimap_01 data block...
     97  6b32		       00		      BYTE.b	%00000000
     98  6b33		       20		      BYTE.b	%00100000
     99  6b34		       f8		      BYTE.b	%11111000
    100  6b35		       fc		      BYTE.b	%11111100
    101  6b36		       fe		      BYTE.b	%11111110
    102  6b37		       ff		      BYTE.b	%11111111
    103  6b38		       ff		      BYTE.b	%11111111
    104  6b39		       ff		      BYTE.b	%11111111
    105  6b3a		       ff		      BYTE.b	%11111111
    106  6b3b		       ff		      BYTE.b	%11111111
    107  6b3c		       ff		      BYTE.b	%11111111
    108  6b3d		       ff		      BYTE.b	%11111111
    109  6b3e		       ff		      BYTE.b	%11111111
    110  6b3f		       ff		      BYTE.b	%11111111
    111  6b40		       ff		      BYTE.b	%11111111
    112  6b41		       ff		      BYTE.b	%11111111
    113  6b42		       ff		      BYTE.b	%11111111
    114  6b43		       ff		      BYTE.b	%11111111
    115  6b44		       ff		      BYTE.b	%11111111
    116  6b45		       ff		      BYTE.b	%11111111
    117  6b46		       ff		      BYTE.b	%11111111
    118  6b47		       ff		      BYTE.b	%11111111
    119  6b48		       ff		      BYTE.b	%11111111
    120  6b49		       ff		      BYTE.b	%11111111
    121  6b4a		       ff		      BYTE.b	%11111111
    122  6b4b		       ff		      BYTE.b	%11111111
    123  6b4c		       ff		      BYTE.b	%11111111
    124  6b4d		       ff		      BYTE.b	%11111111
    125  6b4e		       ff		      BYTE.b	%11111111
    126  6b4f		       ff		      BYTE.b	%11111111
    127  6b50		       ff		      BYTE.b	%11111111
    128  6b51		       ff		      BYTE.b	%11111111
    129  6b52		       ff		      BYTE.b	%11111111
    130  6b53		       ff		      BYTE.b	%11111111
    131  6b54		       ff		      BYTE.b	%11111111
    132  6b55		       ff		      BYTE.b	%11111111
    133  6b56		       fe		      BYTE.b	%11111110
    134  6b57		       f8		      BYTE.b	%11111000
    135  6b58		       68		      BYTE.b	%01101000
    136  6b59		       60		      BYTE.b	%01100000
    137  6b5a		       00		      BYTE.b	%00000000
    138  6b5b		       00		      BYTE.b	%00000000
    139  6b5c		       00		      BYTE.b	%00000000
    140  6b5d		       00		      BYTE.b	%00000000
    141  6b5e		       00		      BYTE.b	%00000000
    142  6b5f		       00		      BYTE.b	%00000000
    143  6b60		       00		      BYTE.b	%00000000
    144  6b61		       00		      BYTE.b	%00000000
    145  6b62		       00		      BYTE.b	%00000000
    146  6b63		       00		      BYTE.b	%00000000
    147  6b64
    148  6b64
    149  6b64
    150  6b64				  -	      if	>. != >[.+bmp_48x1_1_height]
    151  6b64				  -	      align	256
    152  6b64					      endif
    153  6b64
    154  6b64
    155  6b64				   bmp_48x1_1_02
    156  6b64							; *** replace this block with your bimap_02 data block...
    157  6b64		       00		      BYTE.b	%00000000
    158  6b65		       00		      BYTE.b	%00000000
    159  6b66		       00		      BYTE.b	%00000000
    160  6b67		       00		      BYTE.b	%00000000
    161  6b68		       00		      BYTE.b	%00000000
    162  6b69		       00		      BYTE.b	%00000000
    163  6b6a		       00		      BYTE.b	%00000000
    164  6b6b		       80		      BYTE.b	%10000000
    165  6b6c		       80		      BYTE.b	%10000000
    166  6b6d		       c0		      BYTE.b	%11000000
    167  6b6e		       c0		      BYTE.b	%11000000
    168  6b6f		       c0		      BYTE.b	%11000000
    169  6b70		       c0		      BYTE.b	%11000000
    170  6b71		       e0		      BYTE.b	%11100000
    171  6b72		       e0		      BYTE.b	%11100000
    172  6b73		       e0		      BYTE.b	%11100000
    173  6b74		       e0		      BYTE.b	%11100000
    174  6b75		       e0		      BYTE.b	%11100000
    175  6b76		       ff		      BYTE.b	%11111111
    176  6b77		       ff		      BYTE.b	%11111111
    177  6b78		       ff		      BYTE.b	%11111111
    178  6b79		       e0		      BYTE.b	%11100000
    179  6b7a		       e0		      BYTE.b	%11100000
    180  6b7b		       e0		      BYTE.b	%11100000
    181  6b7c		       e0		      BYTE.b	%11100000
    182  6b7d		       e0		      BYTE.b	%11100000
    183  6b7e		       e0		      BYTE.b	%11100000
    184  6b7f		       e0		      BYTE.b	%11100000
    185  6b80		       c0		      BYTE.b	%11000000
    186  6b81		       c0		      BYTE.b	%11000000
    187  6b82		       c0		      BYTE.b	%11000000
    188  6b83		       e0		      BYTE.b	%11100000
    189  6b84		       f0		      BYTE.b	%11110000
    190  6b85		       b8		      BYTE.b	%10111000
    191  6b86		       1c		      BYTE.b	%00011100
    192  6b87		       0e		      BYTE.b	%00001110
    193  6b88		       07		      BYTE.b	%00000111
    194  6b89		       03		      BYTE.b	%00000011
    195  6b8a		       01		      BYTE.b	%00000001
    196  6b8b		       01		      BYTE.b	%00000001
    197  6b8c		       01		      BYTE.b	%00000001
    198  6b8d		       01		      BYTE.b	%00000001
    199  6b8e		       01		      BYTE.b	%00000001
    200  6b8f		       00		      BYTE.b	%00000000
    201  6b90		       00		      BYTE.b	%00000000
    202  6b91		       00		      BYTE.b	%00000000
    203  6b92		       00		      BYTE.b	%00000000
    204  6b93		       00		      BYTE.b	%00000000
    205  6b94		       00		      BYTE.b	%00000000
    206  6b95		       00		      BYTE.b	%00000000
    207  6b96
    208  6b96
    209  6b96
    210  6b96				  -	      if	>. != >[.+bmp_48x1_1_height]
    211  6b96				  -	      align	256
    212  6b96					      endif
    213  6b96
    214  6b96
    215  6b96				   bmp_48x1_1_03
    216  6b96							; *** replace this block with your bimap_03 data block...
    217  6b96		       00		      BYTE.b	%00000000
    218  6b97		       00		      BYTE.b	%00000000
    219  6b98		       00		      BYTE.b	%00000000
    220  6b99		       00		      BYTE.b	%00000000
    221  6b9a		       00		      BYTE.b	%00000000
    222  6b9b		       00		      BYTE.b	%00000000
    223  6b9c		       00		      BYTE.b	%00000000
    224  6b9d		       00		      BYTE.b	%00000000
    225  6b9e		       00		      BYTE.b	%00000000
    226  6b9f		       00		      BYTE.b	%00000000
    227  6ba0		       00		      BYTE.b	%00000000
    228  6ba1		       00		      BYTE.b	%00000000
    229  6ba2		       00		      BYTE.b	%00000000
    230  6ba3		       00		      BYTE.b	%00000000
    231  6ba4		       00		      BYTE.b	%00000000
    232  6ba5		       00		      BYTE.b	%00000000
    233  6ba6		       00		      BYTE.b	%00000000
    234  6ba7		       00		      BYTE.b	%00000000
    235  6ba8		       ff		      BYTE.b	%11111111
    236  6ba9		       ff		      BYTE.b	%11111111
    237  6baa		       ff		      BYTE.b	%11111111
    238  6bab		       00		      BYTE.b	%00000000
    239  6bac		       00		      BYTE.b	%00000000
    240  6bad		       00		      BYTE.b	%00000000
    241  6bae		       00		      BYTE.b	%00000000
    242  6baf		       00		      BYTE.b	%00000000
    243  6bb0		       00		      BYTE.b	%00000000
    244  6bb1		       00		      BYTE.b	%00000000
    245  6bb2		       00		      BYTE.b	%00000000
    246  6bb3		       00		      BYTE.b	%00000000
    247  6bb4		       00		      BYTE.b	%00000000
    248  6bb5		       00		      BYTE.b	%00000000
    249  6bb6		       00		      BYTE.b	%00000000
    250  6bb7		       20		      BYTE.b	%00100000
    251  6bb8		       70		      BYTE.b	%01110000
    252  6bb9		       f8		      BYTE.b	%11111000
    253  6bba		       f8		      BYTE.b	%11111000
    254  6bbb		       fc		      BYTE.b	%11111100
    255  6bbc		       fc		      BYTE.b	%11111100
    256  6bbd		       fc		      BYTE.b	%11111100
    257  6bbe		       fc		      BYTE.b	%11111100
    258  6bbf		       fc		      BYTE.b	%11111100
    259  6bc0		       fc		      BYTE.b	%11111100
    260  6bc1		       fc		      BYTE.b	%11111100
    261  6bc2		       f8		      BYTE.b	%11111000
    262  6bc3		       f8		      BYTE.b	%11111000
    263  6bc4		       70		      BYTE.b	%01110000
    264  6bc5		       00		      BYTE.b	%00000000
    265  6bc6		       00		      BYTE.b	%00000000
    266  6bc7		       00		      BYTE.b	%00000000
    267  6bc8
    268  6bc8
    269  6bc8
    270  6bc8				  -	      if	>. != >[.+bmp_48x1_1_height]
    271  6bc8				  -	      align	256
    272  6bc8					      endif
    273  6bc8
    274  6bc8
    275  6bc8				   bmp_48x1_1_04
    276  6bc8							; *** replace this block with your bimap_04 data block...
    277  6bc8		       00		      BYTE.b	%00000000
    278  6bc9		       00		      BYTE.b	%00000000
    279  6bca		       00		      BYTE.b	%00000000
    280  6bcb		       00		      BYTE.b	%00000000
    281  6bcc		       00		      BYTE.b	%00000000
    282  6bcd		       00		      BYTE.b	%00000000
    283  6bce		       03		      BYTE.b	%00000011
    284  6bcf		       07		      BYTE.b	%00000111
    285  6bd0		       0f		      BYTE.b	%00001111
    286  6bd1		       1f		      BYTE.b	%00011111
    287  6bd2		       1f		      BYTE.b	%00011111
    288  6bd3		       3f		      BYTE.b	%00111111
    289  6bd4		       3f		      BYTE.b	%00111111
    290  6bd5		       3f		      BYTE.b	%00111111
    291  6bd6		       3f		      BYTE.b	%00111111
    292  6bd7		       3f		      BYTE.b	%00111111
    293  6bd8		       7f		      BYTE.b	%01111111
    294  6bd9		       7f		      BYTE.b	%01111111
    295  6bda		       ff		      BYTE.b	%11111111
    296  6bdb		       ff		      BYTE.b	%11111111
    297  6bdc		       ff		      BYTE.b	%11111111
    298  6bdd		       7f		      BYTE.b	%01111111
    299  6bde		       7f		      BYTE.b	%01111111
    300  6bdf		       7f		      BYTE.b	%01111111
    301  6be0		       3f		      BYTE.b	%00111111
    302  6be1		       3f		      BYTE.b	%00111111
    303  6be2		       3f		      BYTE.b	%00111111
    304  6be3		       3f		      BYTE.b	%00111111
    305  6be4		       1f		      BYTE.b	%00011111
    306  6be5		       1f		      BYTE.b	%00011111
    307  6be6		       0f		      BYTE.b	%00001111
    308  6be7		       0f		      BYTE.b	%00001111
    309  6be8		       07		      BYTE.b	%00000111
    310  6be9		       03		      BYTE.b	%00000011
    311  6bea		       00		      BYTE.b	%00000000
    312  6beb		       00		      BYTE.b	%00000000
    313  6bec		       00		      BYTE.b	%00000000
    314  6bed		       00		      BYTE.b	%00000000
    315  6bee		       00		      BYTE.b	%00000000
    316  6bef		       00		      BYTE.b	%00000000
    317  6bf0		       00		      BYTE.b	%00000000
    318  6bf1		       00		      BYTE.b	%00000000
    319  6bf2		       00		      BYTE.b	%00000000
    320  6bf3		       00		      BYTE.b	%00000000
    321  6bf4		       00		      BYTE.b	%00000000
    322  6bf5		       00		      BYTE.b	%00000000
    323  6bf6		       00		      BYTE.b	%00000000
    324  6bf7		       00		      BYTE.b	%00000000
    325  6bf8		       00		      BYTE.b	%00000000
    326  6bf9		       00		      BYTE.b	%00000000
    327  6bfa
    328  6bfa
    329  6bfa
    330  6bfa					      if	>. != >[.+bmp_48x1_1_height]
    331  6c00		       00 00 00 00*	      align	256
    332  6c00					      endif
    333  6c00
    334  6c00
    335  6c00				   bmp_48x1_1_05
    336  6c00							; *** replace this block with your bimap_05 data block...
    337  6c00		       00		      BYTE.b	%00000000
    338  6c01		       00		      BYTE.b	%00000000
    339  6c02		       00		      BYTE.b	%00000000
    340  6c03		       00		      BYTE.b	%00000000
    341  6c04		       00		      BYTE.b	%00000000
    342  6c05		       00		      BYTE.b	%00000000
    343  6c06		       e0		      BYTE.b	%11100000
    344  6c07		       f0		      BYTE.b	%11110000
    345  6c08		       f0		      BYTE.b	%11110000
    346  6c09		       f8		      BYTE.b	%11111000
    347  6c0a		       f8		      BYTE.b	%11111000
    348  6c0b		       fc		      BYTE.b	%11111100
    349  6c0c		       fc		      BYTE.b	%11111100
    350  6c0d		       fc		      BYTE.b	%11111100
    351  6c0e		       fe		      BYTE.b	%11111110
    352  6c0f		       fe		      BYTE.b	%11111110
    353  6c10		       fe		      BYTE.b	%11111110
    354  6c11		       fe		      BYTE.b	%11111110
    355  6c12		       fe		      BYTE.b	%11111110
    356  6c13		       fe		      BYTE.b	%11111110
    357  6c14		       fe		      BYTE.b	%11111110
    358  6c15		       fe		      BYTE.b	%11111110
    359  6c16		       fe		      BYTE.b	%11111110
    360  6c17		       fe		      BYTE.b	%11111110
    361  6c18		       fe		      BYTE.b	%11111110
    362  6c19		       fc		      BYTE.b	%11111100
    363  6c1a		       fc		      BYTE.b	%11111100
    364  6c1b		       fc		      BYTE.b	%11111100
    365  6c1c		       fc		      BYTE.b	%11111100
    366  6c1d		       f8		      BYTE.b	%11111000
    367  6c1e		       f8		      BYTE.b	%11111000
    368  6c1f		       f0		      BYTE.b	%11110000
    369  6c20		       e0		      BYTE.b	%11100000
    370  6c21		       c0		      BYTE.b	%11000000
    371  6c22		       00		      BYTE.b	%00000000
    372  6c23		       00		      BYTE.b	%00000000
    373  6c24		       00		      BYTE.b	%00000000
    374  6c25		       00		      BYTE.b	%00000000
    375  6c26		       00		      BYTE.b	%00000000
    376  6c27		       00		      BYTE.b	%00000000
    377  6c28		       00		      BYTE.b	%00000000
    378  6c29		       00		      BYTE.b	%00000000
    379  6c2a		       00		      BYTE.b	%00000000
    380  6c2b		       00		      BYTE.b	%00000000
    381  6c2c		       00		      BYTE.b	%00000000
    382  6c2d		       00		      BYTE.b	%00000000
    383  6c2e		       00		      BYTE.b	%00000000
    384  6c2f		       00		      BYTE.b	%00000000
    385  6c30		       00		      BYTE.b	%00000000
    386  6c31		       00		      BYTE.b	%00000000
    387  6c32
    388  6c32
------- FILE titlescreen/asm/titlescreen.asm
    221  6c32					      endif
    222  6c32				  -	      ifconst	mk_48x1_2_on
    223  6c32				  -	      include	"titlescreen/48x1_2_image.asm"
    224  6c32					      endif
    225  6c32				  -	      ifconst	mk_48x1_3_on
    226  6c32				  -	      include	"titlescreen/48x1_3_image.asm"
    227  6c32					      endif
    228  6c32				  -	      ifconst	mk_48x1_4_on
    229  6c32				  -	      include	"titlescreen/48x1_4_image.asm"
    230  6c32					      endif
    231  6c32				  -	      ifconst	mk_48x1_5_on
    232  6c32				  -	      include	"titlescreen/48x1_5_image.asm"
    233  6c32					      endif
    234  6c32				  -	      ifconst	mk_48x1_6_on
    235  6c32				  -	      include	"titlescreen/48x1_6_image.asm"
    236  6c32					      endif
    237  6c32				  -	      ifconst	mk_48x1_7_on
    238  6c32				  -	      include	"titlescreen/48x1_7_image.asm"
    239  6c32					      endif
    240  6c32				  -	      ifconst	mk_48x1_8_on
    241  6c32				  -	      include	"titlescreen/48x1_8_image.asm"
    242  6c32					      endif
    243  6c32
    244  6c32
    245  6c32				  -	      ifconst	mk_48x2_1_on
    246  6c32				  -	      include	"titlescreen/48x2_1_image.asm"
    247  6c32					      endif
    248  6c32				  -	      ifconst	mk_48x2_2_on
    249  6c32				  -	      include	"titlescreen/48x2_2_image.asm"
    250  6c32					      endif
    251  6c32				  -	      ifconst	mk_48x2_3_on
    252  6c32				  -	      include	"titlescreen/48x2_3_image.asm"
    253  6c32					      endif
    254  6c32				  -	      ifconst	mk_48x2_4_on
    255  6c32				  -	      include	"titlescreen/48x2_4_image.asm"
    256  6c32					      endif
    257  6c32				  -	      ifconst	mk_48x2_5_on
    258  6c32				  -	      include	"titlescreen/48x2_5_image.asm"
    259  6c32					      endif
    260  6c32				  -	      ifconst	mk_48x2_6_on
    261  6c32				  -	      include	"titlescreen/48x2_6_image.asm"
    262  6c32					      endif
    263  6c32				  -	      ifconst	mk_48x2_7_on
    264  6c32				  -	      include	"titlescreen/48x2_7_image.asm"
    265  6c32					      endif
    266  6c32
    267  6c32				  -	      ifconst	mk_48x2_8_on
    268  6c32				  -	      include	"titlescreen/48x2_8_image.asm"
    269  6c32					      endif
    270  6c32
    271  6c32
    272  6c32					      ifconst	mk_96x2_1_on
------- FILE titlescreen/96x2_1_image.asm LEVEL 3 PASS 3
      0  6c32					      include	"titlescreen/96x2_1_image.asm"
      1  6c32
      2  6c32
      3  6c32							;*** The height of the displayed data...
      4  6c32		       00 14	   bmp_96x2_1_window =	20
      5  6c32
      6  6c32							;*** The height of the bitmap data. This can be larger than
      7  6c32							;*** the displayed data height, if you're scrolling or animating
      8  6c32							;*** the data...
      9  6c32		       00 14	   bmp_96x2_1_height =	20
     10  6c32
     11  6c32
     12  6c32				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     13  6c32				  -	      align	256
     14  6c32					      endif
     15  6c32		       00		      BYTE.b	$00	; leave this here!
     16  6c33
     17  6c33
     18  6c33							;*** The color of each line in the bitmap, in reverse order...
     19  6c33				   bmp_96x2_1_colors
     20  6c33		       0e		      .byte.b	$0E
     21  6c34		       40		      .byte.b	$40
     22  6c35		       94		      .byte.b	$94
     23  6c36		       94		      .byte.b	$94
     24  6c37		       94		      .byte.b	$94
     25  6c38		       94		      .byte.b	$94
     26  6c39		       94		      .byte.b	$94
     27  6c3a		       94		      .byte.b	$94
     28  6c3b		       94		      .byte.b	$94
     29  6c3c		       94		      .byte.b	$94
     30  6c3d		       94		      .byte.b	$94
     31  6c3e		       94		      .byte.b	$94
     32  6c3f		       94		      .byte.b	$94
     33  6c40		       94		      .byte.b	$94
     34  6c41		       94		      .byte.b	$94
     35  6c42		       94		      .byte.b	$94
     36  6c43		       94		      .byte.b	$94
     37  6c44		       94		      .byte.b	$94
     38  6c45		       94		      .byte.b	$94
     39  6c46		       94		      .byte.b	$94
     40  6c47
     41  6c47
     42  6c47				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     43  6c47				  -	      align	256
     44  6c47					      endif
     45  6c47
     46  6c47
     47  6c47				   bmp_96x2_1_00
     48  6c47							; *** replace this block with your bimap_00 data block...
     49  6c47		       00		      BYTE.b	%00000000
     50  6c48		       00		      BYTE.b	%00000000
     51  6c49		       00		      BYTE.b	%00000000
     52  6c4a		       00		      BYTE.b	%00000000
     53  6c4b		       00		      BYTE.b	%00000000
     54  6c4c		       00		      BYTE.b	%00000000
     55  6c4d		       00		      BYTE.b	%00000000
     56  6c4e		       00		      BYTE.b	%00000000
     57  6c4f		       00		      BYTE.b	%00000000
     58  6c50		       00		      BYTE.b	%00000000
     59  6c51		       00		      BYTE.b	%00000000
     60  6c52		       00		      BYTE.b	%00000000
     61  6c53		       00		      BYTE.b	%00000000
     62  6c54		       00		      BYTE.b	%00000000
     63  6c55		       00		      BYTE.b	%00000000
     64  6c56		       00		      BYTE.b	%00000000
     65  6c57		       00		      BYTE.b	%00000000
     66  6c58		       00		      BYTE.b	%00000000
     67  6c59		       00		      BYTE.b	%00000000
     68  6c5a		       00		      BYTE.b	%00000000
     69  6c5b
     70  6c5b
     71  6c5b
     72  6c5b				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     73  6c5b				  -	      align	256
     74  6c5b					      endif
     75  6c5b
     76  6c5b
     77  6c5b				   bmp_96x2_1_01
     78  6c5b							; *** replace this block with your bimap_01 data block...
     79  6c5b		       00		      BYTE.b	%00000000
     80  6c5c		       00		      BYTE.b	%00000000
     81  6c5d		       00		      BYTE.b	%00000000
     82  6c5e		       0d		      BYTE.b	%00001101
     83  6c5f		       1d		      BYTE.b	%00011101
     84  6c60		       1d		      BYTE.b	%00011101
     85  6c61		       1c		      BYTE.b	%00011100
     86  6c62		       1c		      BYTE.b	%00011100
     87  6c63		       1c		      BYTE.b	%00011100
     88  6c64		       1d		      BYTE.b	%00011101
     89  6c65		       1d		      BYTE.b	%00011101
     90  6c66		       1c		      BYTE.b	%00011100
     91  6c67		       1c		      BYTE.b	%00011100
     92  6c68		       1c		      BYTE.b	%00011100
     93  6c69		       0f		      BYTE.b	%00001111
     94  6c6a		       0f		      BYTE.b	%00001111
     95  6c6b		       03		      BYTE.b	%00000011
     96  6c6c		       00		      BYTE.b	%00000000
     97  6c6d		       00		      BYTE.b	%00000000
     98  6c6e		       00		      BYTE.b	%00000000
     99  6c6f
    100  6c6f
    101  6c6f
    102  6c6f				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    103  6c6f				  -	      align	256
    104  6c6f					      endif
    105  6c6f
    106  6c6f
    107  6c6f				   bmp_96x2_1_02
    108  6c6f							; *** replace this block with your bimap_02 data block...
    109  6c6f		       00		      BYTE.b	%00000000
    110  6c70		       00		      BYTE.b	%00000000
    111  6c71		       00		      BYTE.b	%00000000
    112  6c72		       e1		      BYTE.b	%11100001
    113  6c73		       f1		      BYTE.b	%11110001
    114  6c74		       f9		      BYTE.b	%11111001
    115  6c75		       39		      BYTE.b	%00111001
    116  6c76		       39		      BYTE.b	%00111001
    117  6c77		       39		      BYTE.b	%00111001
    118  6c78		       f1		      BYTE.b	%11110001
    119  6c79		       e1		      BYTE.b	%11100001
    120  6c7a		       71		      BYTE.b	%01110001
    121  6c7b		       71		      BYTE.b	%01110001
    122  6c7c		       71		      BYTE.b	%01110001
    123  6c7d		       f1		      BYTE.b	%11110001
    124  6c7e		       e0		      BYTE.b	%11100000
    125  6c7f		       c0		      BYTE.b	%11000000
    126  6c80		       00		      BYTE.b	%00000000
    127  6c81		       00		      BYTE.b	%00000000
    128  6c82		       00		      BYTE.b	%00000000
    129  6c83
    130  6c83
    131  6c83
    132  6c83				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    133  6c83				  -	      align	256
    134  6c83					      endif
    135  6c83
    136  6c83
    137  6c83				   bmp_96x2_1_03
    138  6c83							; *** replace this block with your bimap_03 data block...
    139  6c83		       00		      BYTE.b	%00000000
    140  6c84		       00		      BYTE.b	%00000000
    141  6c85		       00		      BYTE.b	%00000000
    142  6c86		       83		      BYTE.b	%10000011
    143  6c87		       83		      BYTE.b	%10000011
    144  6c88		       83		      BYTE.b	%10000011
    145  6c89		       83		      BYTE.b	%10000011
    146  6c8a		       83		      BYTE.b	%10000011
    147  6c8b		       8f		      BYTE.b	%10001111
    148  6c8c		       9e		      BYTE.b	%10011110
    149  6c8d		       de		      BYTE.b	%11011110
    150  6c8e		       c7		      BYTE.b	%11000111
    151  6c8f		       c7		      BYTE.b	%11000111
    152  6c90		       c7		      BYTE.b	%11000111
    153  6c91		       ff		      BYTE.b	%11111111
    154  6c92		       fe		      BYTE.b	%11111110
    155  6c93		       38		      BYTE.b	%00111000
    156  6c94		       00		      BYTE.b	%00000000
    157  6c95		       00		      BYTE.b	%00000000
    158  6c96		       00		      BYTE.b	%00000000
    159  6c97
    160  6c97
    161  6c97
    162  6c97				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    163  6c97				  -	      align	256
    164  6c97					      endif
    165  6c97
    166  6c97
    167  6c97				   bmp_96x2_1_04
    168  6c97							; *** replace this block with your bimap_04 data block...
    169  6c97		       00		      BYTE.b	%00000000
    170  6c98		       00		      BYTE.b	%00000000
    171  6c99		       00		      BYTE.b	%00000000
    172  6c9a		       18		      BYTE.b	%00011000
    173  6c9b		       1c		      BYTE.b	%00011100
    174  6c9c		       1c		      BYTE.b	%00011100
    175  6c9d		       1c		      BYTE.b	%00011100
    176  6c9e		       1c		      BYTE.b	%00011100
    177  6c9f		       1d		      BYTE.b	%00011101
    178  6ca0		       1d		      BYTE.b	%00011101
    179  6ca1		       1c		      BYTE.b	%00011100
    180  6ca2		       1c		      BYTE.b	%00011100
    181  6ca3		       1c		      BYTE.b	%00011100
    182  6ca4		       1c		      BYTE.b	%00011100
    183  6ca5		       1f		      BYTE.b	%00011111
    184  6ca6		       0f		      BYTE.b	%00001111
    185  6ca7		       07		      BYTE.b	%00000111
    186  6ca8		       00		      BYTE.b	%00000000
    187  6ca9		       00		      BYTE.b	%00000000
    188  6caa		       00		      BYTE.b	%00000000
    189  6cab
    190  6cab
    191  6cab
    192  6cab				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    193  6cab				  -	      align	256
    194  6cab					      endif
    195  6cab
    196  6cab
    197  6cab				   bmp_96x2_1_05
    198  6cab							; *** replace this block with your bimap_05 data block...
    199  6cab		       00		      BYTE.b	%00000000
    200  6cac		       00		      BYTE.b	%00000000
    201  6cad		       00		      BYTE.b	%00000000
    202  6cae		       38		      BYTE.b	%00111000
    203  6caf		       38		      BYTE.b	%00111000
    204  6cb0		       38		      BYTE.b	%00111000
    205  6cb1		       39		      BYTE.b	%00111001
    206  6cb2		       39		      BYTE.b	%00111001
    207  6cb3		       f9		      BYTE.b	%11111001
    208  6cb4		       f9		      BYTE.b	%11111001
    209  6cb5		       39		      BYTE.b	%00111001
    210  6cb6		       39		      BYTE.b	%00111001
    211  6cb7		       39		      BYTE.b	%00111001
    212  6cb8		       39		      BYTE.b	%00111001
    213  6cb9		       f9		      BYTE.b	%11111001
    214  6cba		       f1		      BYTE.b	%11110001
    215  6cbb		       c1		      BYTE.b	%11000001
    216  6cbc		       00		      BYTE.b	%00000000
    217  6cbd		       00		      BYTE.b	%00000000
    218  6cbe		       00		      BYTE.b	%00000000
    219  6cbf
    220  6cbf
    221  6cbf
    222  6cbf				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    223  6cbf				  -	      align	256
    224  6cbf					      endif
    225  6cbf
    226  6cbf
    227  6cbf				   bmp_96x2_1_06
    228  6cbf							; *** replace this block with your bimap_06 data block...
    229  6cbf		       00		      BYTE.b	%00000000
    230  6cc0		       00		      BYTE.b	%00000000
    231  6cc1		       00		      BYTE.b	%00000000
    232  6cc2		       38		      BYTE.b	%00111000
    233  6cc3		       ff		      BYTE.b	%11111111
    234  6cc4		       ff		      BYTE.b	%11111111
    235  6cc5		       c3		      BYTE.b	%11000011
    236  6cc6		       c3		      BYTE.b	%11000011
    237  6cc7		       c3		      BYTE.b	%11000011
    238  6cc8		       c3		      BYTE.b	%11000011
    239  6cc9		       c3		      BYTE.b	%11000011
    240  6cca		       c3		      BYTE.b	%11000011
    241  6ccb		       c3		      BYTE.b	%11000011
    242  6ccc		       c3		      BYTE.b	%11000011
    243  6ccd		       c3		      BYTE.b	%11000011
    244  6cce		       c3		      BYTE.b	%11000011
    245  6ccf		       c3		      BYTE.b	%11000011
    246  6cd0		       00		      BYTE.b	%00000000
    247  6cd1		       00		      BYTE.b	%00000000
    248  6cd2		       00		      BYTE.b	%00000000
    249  6cd3
    250  6cd3
    251  6cd3
    252  6cd3				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    253  6cd3				  -	      align	256
    254  6cd3					      endif
    255  6cd3
    256  6cd3
    257  6cd3				   bmp_96x2_1_07
    258  6cd3							; *** replace this block with your bimap_07 data block...
    259  6cd3		       00		      BYTE.b	%00000000
    260  6cd4		       00		      BYTE.b	%00000000
    261  6cd5		       00		      BYTE.b	%00000000
    262  6cd6		       70		      BYTE.b	%01110000
    263  6cd7		       fc		      BYTE.b	%11111100
    264  6cd8		       fe		      BYTE.b	%11111110
    265  6cd9		       8e		      BYTE.b	%10001110
    266  6cda		       8e		      BYTE.b	%10001110
    267  6cdb		       8e		      BYTE.b	%10001110
    268  6cdc		       8e		      BYTE.b	%10001110
    269  6cdd		       8e		      BYTE.b	%10001110
    270  6cde		       8e		      BYTE.b	%10001110
    271  6cdf		       8e		      BYTE.b	%10001110
    272  6ce0		       8e		      BYTE.b	%10001110
    273  6ce1		       8e		      BYTE.b	%10001110
    274  6ce2		       8e		      BYTE.b	%10001110
    275  6ce3		       8e		      BYTE.b	%10001110
    276  6ce4		       00		      BYTE.b	%00000000
    277  6ce5		       00		      BYTE.b	%00000000
    278  6ce6		       00		      BYTE.b	%00000000
    279  6ce7
    280  6ce7
    281  6ce7
    282  6ce7				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    283  6ce7				  -	      align	256
    284  6ce7					      endif
    285  6ce7
    286  6ce7
    287  6ce7				   bmp_96x2_1_08
    288  6ce7							; *** replace this block with your bimap_08 data block...
    289  6ce7		       00		      BYTE.b	%00000000
    290  6ce8		       00		      BYTE.b	%00000000
    291  6ce9		       00		      BYTE.b	%00000000
    292  6cea		       77		      BYTE.b	%01110111
    293  6ceb		       77		      BYTE.b	%01110111
    294  6cec		       77		      BYTE.b	%01110111
    295  6ced		       70		      BYTE.b	%01110000
    296  6cee		       70		      BYTE.b	%01110000
    297  6cef		       70		      BYTE.b	%01110000
    298  6cf0		       70		      BYTE.b	%01110000
    299  6cf1		       70		      BYTE.b	%01110000
    300  6cf2		       70		      BYTE.b	%01110000
    301  6cf3		       70		      BYTE.b	%01110000
    302  6cf4		       70		      BYTE.b	%01110000
    303  6cf5		       7f		      BYTE.b	%01111111
    304  6cf6		       7f		      BYTE.b	%01111111
    305  6cf7		       7e		      BYTE.b	%01111110
    306  6cf8		       00		      BYTE.b	%00000000
    307  6cf9		       00		      BYTE.b	%00000000
    308  6cfa		       00		      BYTE.b	%00000000
    309  6cfb
    310  6cfb
    311  6cfb
    312  6cfb					      if	>. != >[.+(bmp_96x2_1_height)]
    313  6d00		       00 00 00 00*	      align	256
    314  6d00					      endif
    315  6d00
    316  6d00
    317  6d00				   bmp_96x2_1_09
    318  6d00							; *** replace this block with your bimap_09 data block...
    319  6d00		       00		      BYTE.b	%00000000
    320  6d01		       00		      BYTE.b	%00000000
    321  6d02		       00		      BYTE.b	%00000000
    322  6d03		       80		      BYTE.b	%10000000
    323  6d04		       c0		      BYTE.b	%11000000
    324  6d05		       e0		      BYTE.b	%11100000
    325  6d06		       f0		      BYTE.b	%11110000
    326  6d07		       78		      BYTE.b	%01111000
    327  6d08		       38		      BYTE.b	%00111000
    328  6d09		       38		      BYTE.b	%00111000
    329  6d0a		       39		      BYTE.b	%00111001
    330  6d0b		       39		      BYTE.b	%00111001
    331  6d0c		       79		      BYTE.b	%01111001
    332  6d0d		       f1		      BYTE.b	%11110001
    333  6d0e		       f1		      BYTE.b	%11110001
    334  6d0f		       c1		      BYTE.b	%11000001
    335  6d10		       01		      BYTE.b	%00000001
    336  6d11		       00		      BYTE.b	%00000000
    337  6d12		       00		      BYTE.b	%00000000
    338  6d13		       00		      BYTE.b	%00000000
    339  6d14
    340  6d14
    341  6d14
    342  6d14				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    343  6d14				  -	      align	256
    344  6d14					      endif
    345  6d14
    346  6d14
    347  6d14				   bmp_96x2_1_10
    348  6d14							; *** replace this block with your bimap_10 data block...
    349  6d14		       00		      BYTE.b	%00000000
    350  6d15		       00		      BYTE.b	%00000000
    351  6d16		       00		      BYTE.b	%00000000
    352  6d17		       38		      BYTE.b	%00111000
    353  6d18		       38		      BYTE.b	%00111000
    354  6d19		       38		      BYTE.b	%00111000
    355  6d1a		       38		      BYTE.b	%00111000
    356  6d1b		       38		      BYTE.b	%00111000
    357  6d1c		       3c		      BYTE.b	%00111100
    358  6d1d		       fe		      BYTE.b	%11111110
    359  6d1e		       ff		      BYTE.b	%11111111
    360  6d1f		       c3		      BYTE.b	%11000011
    361  6d20		       c3		      BYTE.b	%11000011
    362  6d21		       c3		      BYTE.b	%11000011
    363  6d22		       c3		      BYTE.b	%11000011
    364  6d23		       c3		      BYTE.b	%11000011
    365  6d24		       c3		      BYTE.b	%11000011
    366  6d25		       00		      BYTE.b	%00000000
    367  6d26		       00		      BYTE.b	%00000000
    368  6d27		       00		      BYTE.b	%00000000
    369  6d28
    370  6d28
    371  6d28
    372  6d28				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    373  6d28				  -	      align	256
    374  6d28					      endif
    375  6d28
    376  6d28
    377  6d28				   bmp_96x2_1_11
    378  6d28							; *** replace this block with your bimap_11 data block...
    379  6d28		       00		      BYTE.b	%00000000
    380  6d29		       00		      BYTE.b	%00000000
    381  6d2a		       00		      BYTE.b	%00000000
    382  6d2b		       00		      BYTE.b	%00000000
    383  6d2c		       00		      BYTE.b	%00000000
    384  6d2d		       00		      BYTE.b	%00000000
    385  6d2e		       00		      BYTE.b	%00000000
    386  6d2f		       00		      BYTE.b	%00000000
    387  6d30		       00		      BYTE.b	%00000000
    388  6d31		       00		      BYTE.b	%00000000
    389  6d32		       00		      BYTE.b	%00000000
    390  6d33		       00		      BYTE.b	%00000000
    391  6d34		       00		      BYTE.b	%00000000
    392  6d35		       00		      BYTE.b	%00000000
    393  6d36		       00		      BYTE.b	%00000000
    394  6d37		       00		      BYTE.b	%00000000
    395  6d38		       00		      BYTE.b	%00000000
    396  6d39		       00		      BYTE.b	%00000000
    397  6d3a		       00		      BYTE.b	%00000000
    398  6d3b		       00		      BYTE.b	%00000000
    399  6d3c
    400  6d3c
    401  6d3c
------- FILE titlescreen/asm/titlescreen.asm
    274  6d3c					      endif
    275  6d3c					      ifconst	mk_96x2_2_on
------- FILE titlescreen/96x2_2_image.asm LEVEL 3 PASS 3
      0  6d3c					      include	"titlescreen/96x2_2_image.asm"
      1  6d3c
      2  6d3c
      3  6d3c							;*** The height of the displayed data...
      4  6d3c		       00 05	   bmp_96x2_2_window =	5
      5  6d3c
      6  6d3c							;*** The height of the bitmap data. This can be larger than
      7  6d3c							;*** the displayed data height, if you're scrolling or animating
      8  6d3c							;*** the data...
      9  6d3c		       00 05	   bmp_96x2_2_height =	5
     10  6d3c
     11  6d3c
     12  6d3c				  -	      if	>. != >[.+(bmp_96x2_2_height)]
     13  6d3c				  -	      align	256
     14  6d3c					      endif
     15  6d3c		       00		      BYTE.b	$00	; leave this here!
     16  6d3d
     17  6d3d
     18  6d3d							;*** The color of each line in the bitmap, in reverse order...
     19  6d3d				   bmp_96x2_2_colors
     20  6d3d		       40		      .byte.b	$40
     21  6d3e		       40		      .byte.b	$40
     22  6d3f		       40		      .byte.b	$40
     23  6d40		       40		      .byte.b	$40
     24  6d41		       40		      .byte.b	$40
     25  6d42
     26  6d42
     27  6d42
     28  6d42				  -	      if	>. != >[.+(bmp_96x2_2_height)]
     29  6d42				  -	      align	256
     30  6d42					      endif
     31  6d42
     32  6d42				   bmp_96x2_2_00
     33  6d42							; *** replace this block with your bimap_11 data block...
     34  6d42		       00		      BYTE.b	%00000000
     35  6d43		       00		      BYTE.b	%00000000
     36  6d44		       00		      BYTE.b	%00000000
     37  6d45		       00		      BYTE.b	%00000000
     38  6d46		       00		      BYTE.b	%00000000
     39  6d47				  -	      if	>. != >[.+(bmp_96x2_2_height)]
     40  6d47				  -	      align	256
     41  6d47					      endif
     42  6d47
     43  6d47				   bmp_96x2_2_01
     44  6d47							; *** replace this block with your bimap_11 data block...
     45  6d47		       00		      BYTE.b	%00000000
     46  6d48		       00		      BYTE.b	%00000000
     47  6d49		       00		      BYTE.b	%00000000
     48  6d4a		       00		      BYTE.b	%00000000
     49  6d4b		       00		      BYTE.b	%00000000
     50  6d4c				  -	      if	>. != >[.+(bmp_96x2_2_height)]
     51  6d4c				  -	      align	256
     52  6d4c					      endif
     53  6d4c
     54  6d4c				   bmp_96x2_2_02
     55  6d4c							; *** replace this block with your bimap_11 data block...
     56  6d4c		       00		      BYTE.b	%00000000
     57  6d4d		       00		      BYTE.b	%00000000
     58  6d4e		       00		      BYTE.b	%00000000
     59  6d4f		       00		      BYTE.b	%00000000
     60  6d50		       00		      BYTE.b	%00000000
     61  6d51
     62  6d51				  -	      if	>. != >[.+(bmp_96x2_2_height)]
     63  6d51				  -	      align	256
     64  6d51					      endif
     65  6d51
     66  6d51				   bmp_96x2_2_03
     67  6d51							; *** replace this block with your bimap_00 data block...
     68  6d51		       ae		      .byte.b	%10101110	;
     69  6d52		       a8		      .byte.b	%10101000	;
     70  6d53		       e8		      .byte.b	%11101000	;
     71  6d54		       a8		      .byte.b	%10101000	;
     72  6d55		       e8		      .byte.b	%11101000	;
     73  6d56
     74  6d56
     75  6d56
     76  6d56				  -	      if	>. != >[.+(bmp_96x2_2_height)]
     77  6d56				  -	      align	256
     78  6d56					      endif
     79  6d56
     80  6d56
     81  6d56				   bmp_96x2_2_04
     82  6d56							; *** replace this block with your bimap_01 data block...
     83  6d56		       4e		      .byte.b	%01001110	;
     84  6d57		       48		      .byte.b	%01001000	;
     85  6d58		       4c		      .byte.b	%01001100	;
     86  6d59		       48		      .byte.b	%01001000	;
     87  6d5a		       4e		      .byte.b	%01001110	;
     88  6d5b
     89  6d5b
     90  6d5b
     91  6d5b				  -	      if	>. != >[.+(bmp_96x2_2_height)]
     92  6d5b				  -	      align	256
     93  6d5b					      endif
     94  6d5b
     95  6d5b
     96  6d5b				   bmp_96x2_2_05
     97  6d5b							; *** replace this block with your bimap_02 data block...
     98  6d5b		       90		      .byte.b	%10010000	;
     99  6d5c		       b0		      .byte.b	%10110000	;
    100  6d5d		       d0		      .byte.b	%11010000	;
    101  6d5e		       90		      .byte.b	%10010000	;
    102  6d5f		       90		      .byte.b	%10010000	;
    103  6d60
    104  6d60
    105  6d60
    106  6d60				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    107  6d60				  -	      align	256
    108  6d60					      endif
    109  6d60
    110  6d60
    111  6d60				   bmp_96x2_2_06
    112  6d60							; *** replace this block with your bimap_03 data block...
    113  6d60		       a4		      .byte.b	%10100100	;
    114  6d61		       a4		      .byte.b	%10100100	;
    115  6d62		       ac		      .byte.b	%10101100	;
    116  6d63		       b4		      .byte.b	%10110100	;
    117  6d64		       a4		      .byte.b	%10100100	;
    118  6d65
    119  6d65
    120  6d65				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    121  6d65				  -	      align	256
    122  6d65					      endif
    123  6d65
    124  6d65
    125  6d65				   bmp_96x2_2_07
    126  6d65							; *** replace this block with your bimap_04 data block...
    127  6d65		       4a		      .byte.b	%01001010	;
    128  6d66		       aa		      .byte.b	%10101010	;
    129  6d67		       ae		      .byte.b	%10101110	;
    130  6d68		       aa		      .byte.b	%10101010	;
    131  6d69		       ae		      .byte.b	%10101110	;
    132  6d6a
    133  6d6a
    134  6d6a
    135  6d6a				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    136  6d6a				  -	      align	256
    137  6d6a					      endif
    138  6d6a
    139  6d6a
    140  6d6a				   bmp_96x2_2_08
    141  6d6a							; *** replace this block with your bimap_05 data block...
    142  6d6a		       e4		      .byte.b	%11100100	;
    143  6d6b		       24		      .byte.b	%00100100	;
    144  6d6c		       e4		      .byte.b	%11100100	;
    145  6d6d		       84		      .byte.b	%10000100	;
    146  6d6e		       e4		      .byte.b	%11100100	;
    147  6d6f
    148  6d6f
    149  6d6f
    150  6d6f				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    151  6d6f				  -	      align	256
    152  6d6f					      endif
    153  6d6f
    154  6d6f
    155  6d6f				   bmp_96x2_2_09
    156  6d6f							; *** replace this block with your bimap_06 data block...
    157  6d6f		       e9		      .byte.b	%11101001	;
    158  6d70		       a9		      .byte.b	%10101001	;
    159  6d71		       ab		      .byte.b	%10101011	;
    160  6d72		       ad		      .byte.b	%10101101	;
    161  6d73		       e9		      .byte.b	%11101001	;
    162  6d74
    163  6d74
    164  6d74
    165  6d74				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    166  6d74				  -	      align	256
    167  6d74					      endif
    168  6d74
    169  6d74
    170  6d74				   bmp_96x2_2_10
    171  6d74							; *** replace this block with your bimap_07 data block...
    172  6d74		       00		      BYTE.b	%00000000
    173  6d75
    174  6d75
    175  6d75
    176  6d75				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    177  6d75				  -	      align	256
    178  6d75					      endif
    179  6d75
    180  6d75
    181  6d75				   bmp_96x2_2_11
    182  6d75							; *** replace this block with your bimap_08 data block...
    183  6d75		       00		      BYTE.b	%00000000
    184  6d76		       00		      BYTE.b	%00000000
    185  6d77		       00		      BYTE.b	%00000000
    186  6d78		       00		      BYTE.b	%00000000
    187  6d79		       00		      BYTE.b	%00000000
    188  6d7a
    189  6d7a
    190  6d7a
    191  6d7a
    192  6d7a
    193  6d7a
    194  6d7a
    195  6d7a
------- FILE titlescreen/asm/titlescreen.asm
    277  6d7a					      endif
    278  6d7a				  -	      ifconst	mk_96x2_3_on
    279  6d7a				  -	      include	"titlescreen/96x2_3_image.asm"
    280  6d7a					      endif
    281  6d7a					      ifconst	mk_96x2_4_on
------- FILE titlescreen/96x2_4_image.asm LEVEL 3 PASS 3
      0  6d7a					      include	"titlescreen/96x2_4_image.asm"
      1  6d7a
      2  6d7a
      3  6d7a							;*** The height of the displayed data...
      4  6d7a		       00 05	   bmp_96x2_4_window =	5
      5  6d7a
      6  6d7a							;*** The height of the bitmap data. This can be larger than
      7  6d7a							;*** the displayed data height, if you're scrolling or animating
      8  6d7a							;*** the data...
      9  6d7a		       00 05	   bmp_96x2_4_height =	5
     10  6d7a
     11  6d7a
     12  6d7a				  -	      if	>. != >[.+(bmp_96x2_4_height)]
     13  6d7a				  -	      align	256
     14  6d7a					      endif
     15  6d7a		       00		      BYTE.b	$00	; leave this here!
     16  6d7b
     17  6d7b
     18  6d7b							;*** The color of each line in the bitmap, in reverse order...
     19  6d7b				   bmp_96x2_4_colors
     20  6d7b		       c2		      .byte.b	$C2
     21  6d7c		       c2		      .byte.b	$C2
     22  6d7d		       c2		      .byte.b	$C2
     23  6d7e		       c2		      .byte.b	$C2
     24  6d7f		       c2		      .byte.b	$C2
     25  6d80
     26  6d80
     27  6d80				  -	      if	>. != >[.+(bmp_96x2_4_height)]
     28  6d80				  -	      align	256
     29  6d80					      endif
     30  6d80
     31  6d80				   bmp_96x2_4_00
     32  6d80							; *** replace this block with your bimap_09 data block...
     33  6d80
     34  6d80		       00		      .byte.b	%00000000	;
     35  6d81		       00		      .byte.b	%00000000	;
     36  6d82		       00		      .byte.b	%00000000	;
     37  6d83		       00		      .byte.b	%00000000	;
     38  6d84		       00		      .byte.b	%00000000	;
     39  6d85
     40  6d85				  -	      if	>. != >[.+(bmp_96x2_4_height)]
     41  6d85				  -	      align	256
     42  6d85					      endif
     43  6d85				   bmp_96x2_4_01
     44  6d85							; *** replace this block with your bimap_09 data block...
     45  6d85
     46  6d85		       00		      .byte.b	%00000000	;
     47  6d86		       00		      .byte.b	%00000000	;
     48  6d87		       00		      .byte.b	%00000000	;
     49  6d88		       00		      .byte.b	%00000000	;
     50  6d89		       00		      .byte.b	%00000000	;
     51  6d8a
     52  6d8a				  -	      if	>. != >[.+(bmp_96x2_4_height)]
     53  6d8a				  -	      align	256
     54  6d8a					      endif
     55  6d8a
     56  6d8a				   bmp_96x2_4_02
     57  6d8a		       8a		      .byte.b	%10001010	;
     58  6d8b		       8a		      .byte.b	%10001010	;
     59  6d8c		       ec		      .byte.b	%11101100	;
     60  6d8d		       aa		      .byte.b	%10101010	;
     61  6d8e		       ee		      .byte.b	%11101110	;
     62  6d8f
     63  6d8f
     64  6d8f				  -	      if	>. != >[.+(bmp_96x2_4_height)]
     65  6d8f				  -	      align	256
     66  6d8f					      endif
     67  6d8f				   bmp_96x2_4_03
     68  6d8f							; *** replace this block with your bimap_00 data block...
     69  6d8f		       ee		      .byte.b	%11101110	;
     70  6d90		       82		      .byte.b	%10000010	;
     71  6d91		       ce		      .byte.b	%11001110	;
     72  6d92		       88		      .byte.b	%10001000	;
     73  6d93		       ee		      .byte.b	%11101110	;
     74  6d94
     75  6d94
     76  6d94
     77  6d94				  -	      if	>. != >[.+(bmp_96x2_4_height)]
     78  6d94				  -	      align	256
     79  6d94					      endif
     80  6d94
     81  6d94
     82  6d94				   bmp_96x2_4_04
     83  6d94							; *** replace this block with your bimap_01 data block...
     84  6d94		       e0		      .byte.b	%11100000	;
     85  6d95		       20		      .byte.b	%00100000	;
     86  6d96		       e0		      .byte.b	%11100000	;
     87  6d97		       80		      .byte.b	%10000000	;
     88  6d98		       e0		      .byte.b	%11100000	;
     89  6d99
     90  6d99
     91  6d99				  -	      if	>. != >[.+(bmp_96x2_4_height)]
     92  6d99				  -	      align	256
     93  6d99					      endif
     94  6d99
     95  6d99
     96  6d99				   bmp_96x2_4_05
     97  6d99							; *** replace this block with your bimap_02 data block...
     98  6d99		       84		      .byte.b	%10000100	;
     99  6d9a		       84		      .byte.b	%10000100	;
    100  6d9b		       c4		      .byte.b	%11000100	;
    101  6d9c		       84		      .byte.b	%10000100	;
    102  6d9d		       e4		      .byte.b	%11100100	;
    103  6d9e
    104  6d9e
    105  6d9e				  -	      if	>. != >[.+(bmp_96x2_4_height)]
    106  6d9e				  -	      align	256
    107  6d9e					      endif
    108  6d9e
    109  6d9e
    110  6d9e				   bmp_96x2_4_06
    111  6d9e							; *** replace this block with your bimap_03 data block...
    112  6d9e		       ae		      .byte.b	%10101110	;
    113  6d9f		       a8		      .byte.b	%10101000	;
    114  6da0		       cc		      .byte.b	%11001100	;
    115  6da1		       a8		      .byte.b	%10101000	;
    116  6da2		       ee		      .byte.b	%11101110	;
    117  6da3
    118  6da3
    119  6da3
    120  6da3				  -	      if	>. != >[.+(bmp_96x2_4_height)]
    121  6da3				  -	      align	256
    122  6da3					      endif
    123  6da3
    124  6da3
    125  6da3				   bmp_96x2_4_07
    126  6da3							; *** replace this block with your bimap_04 data block...
    127  6da3		       04		      .byte.b	%00000100	;
    128  6da4		       04		      .byte.b	%00000100	;
    129  6da5		       04		      .byte.b	%00000100	;
    130  6da6		       04		      .byte.b	%00000100	;
    131  6da7		       0e		      .byte.b	%00001110	;
    132  6da8
    133  6da8
    134  6da8
    135  6da8				  -	      if	>. != >[.+(bmp_96x2_4_height)]
    136  6da8				  -	      align	256
    137  6da8					      endif
    138  6da8
    139  6da8
    140  6da8				   bmp_96x2_4_08
    141  6da8							; *** replace this block with your bimap_05 data block...
    142  6da8		       e0		      .byte.b	%11100000	;
    143  6da9		       a0		      .byte.b	%10100000	;
    144  6daa		       a0		      .byte.b	%10100000	;
    145  6dab		       a0		      .byte.b	%10100000	;
    146  6dac		       e0		      .byte.b	%11100000	;
    147  6dad
    148  6dad
    149  6dad
    150  6dad				  -	      if	>. != >[.+(bmp_96x2_4_height)]
    151  6dad				  -	      align	256
    152  6dad					      endif
    153  6dad
    154  6dad
    155  6dad				   bmp_96x2_4_09
    156  6dad							; *** replace this block with your bimap_06 data block...
    157  6dad		       8e		      .byte.b	%10001110	;
    158  6dae		       88		      .byte.b	%10001000	;
    159  6daf		       e8		      .byte.b	%11101000	;
    160  6db0		       a8		      .byte.b	%10101000	;
    161  6db1		       e8		      .byte.b	%11101000	;
    162  6db2
    163  6db2
    164  6db2
    165  6db2				  -	      if	>. != >[.+(bmp_96x2_4_height)]
    166  6db2				  -	      align	256
    167  6db2					      endif
    168  6db2
    169  6db2
    170  6db2				   bmp_96x2_4_10
    171  6db2							; *** replace this block with your bimap_07 data block...
    172  6db2		       a4		      .byte.b	%10100100	;
    173  6db3		       a4		      .byte.b	%10100100	;
    174  6db4		       ee		      .byte.b	%11101110	;
    175  6db5		       aa		      .byte.b	%10101010	;
    176  6db6		       ea		      .byte.b	%11101010	;
    177  6db7
    178  6db7
    179  6db7
    180  6db7				  -	      if	>. != >[.+(bmp_96x2_4_height)]
    181  6db7				  -	      align	256
    182  6db7					      endif
    183  6db7
    184  6db7
    185  6db7				   bmp_96x2_4_11
    186  6db7							; *** replace this block with your bimap_08 data block...
    187  6db7
    188  6db7		       00		      .byte.b	%00000000	;
    189  6db8		       00		      .byte.b	%00000000	;
    190  6db9		       00		      .byte.b	%00000000	;
    191  6dba		       00		      .byte.b	%00000000	;
    192  6dbb		       00		      .byte.b	%00000000	;
    193  6dbc
    194  6dbc				  -	      if	>. != >[.+(bmp_96x2_4_height)]
    195  6dbc				  -	      align	256
    196  6dbc					      endif
    197  6dbc
    198  6dbc
    199  6dbc
    200  6dbc
    201  6dbc
    202  6dbc
    203  6dbc
    204  6dbc
    205  6dbc
------- FILE titlescreen/asm/titlescreen.asm
    283  6dbc					      endif
    284  6dbc					      ifconst	mk_96x2_5_on
------- FILE titlescreen/96x2_5_image.asm LEVEL 3 PASS 3
      0  6dbc					      include	"titlescreen/96x2_5_image.asm"
      1  6dbc
      2  6dbc							;*** The height of the displayed data...
      3  6dbc		       00 05	   bmp_96x2_5_window =	5
      4  6dbc
      5  6dbc							;*** The height of the bitmap data. This can be larger than
      6  6dbc							;*** the displayed data height, if you're scrolling or animating
      7  6dbc							;*** the data...
      8  6dbc		       00 05	   bmp_96x2_5_height =	5
      9  6dbc
     10  6dbc
     11  6dbc				  -	      if	>. != >[.+(bmp_96x2_5_height)]
     12  6dbc				  -	      align	256
     13  6dbc					      endif
     14  6dbc		       00		      BYTE.b	$00	; leave this here!
     15  6dbd
     16  6dbd
     17  6dbd							;*** The color of each line in the bitmap, in reverse order...
     18  6dbd				   bmp_96x2_5_colors
     19  6dbd		       9a		      BYTE.b	$9a
     20  6dbe		       7a		      BYTE.b	$7a
     21  6dbf		       5a		      BYTE.b	$5a
     22  6dc0		       3a		      BYTE.b	$3a
     23  6dc1		       1a		      BYTE.b	$1a
     24  6dc2
     25  6dc2
     26  6dc2				  -	      if	>. != >[.+(bmp_96x2_5_height)]
     27  6dc2				  -	      align	256
     28  6dc2					      endif
     29  6dc2
     30  6dc2
     31  6dc2				   bmp_96x2_5_00
     32  6dc2							; *** replace this block with your bimap_11 data block...
     33  6dc2		       00		      BYTE.b	%00000000
     34  6dc3		       00		      BYTE.b	%00000000
     35  6dc4		       00		      BYTE.b	%00000000
     36  6dc5		       00		      BYTE.b	%00000000
     37  6dc6		       00		      BYTE.b	%00000000
     38  6dc7
     39  6dc7				  -	      if	>. != >[.+(bmp_96x2_5_height)]
     40  6dc7				  -	      align	256
     41  6dc7					      endif
     42  6dc7
     43  6dc7				   bmp_96x2_5_01
     44  6dc7							; *** replace this block with your bimap_11 data block...
     45  6dc7		       00		      BYTE.b	%00000000
     46  6dc8		       00		      BYTE.b	%00000000
     47  6dc9		       00		      BYTE.b	%00000000
     48  6dca		       00		      BYTE.b	%00000000
     49  6dcb		       00		      BYTE.b	%00000000
     50  6dcc
     51  6dcc				  -	      if	>. != >[.+(bmp_96x2_5_height)]
     52  6dcc				  -	      align	256
     53  6dcc					      endif
     54  6dcc
     55  6dcc				   bmp_96x2_5_02
     56  6dcc							; *** replace this block with your bimap_11 data block...
     57  6dcc		       00		      BYTE.b	%00000000
     58  6dcd		       00		      BYTE.b	%00000000
     59  6dce		       00		      BYTE.b	%00000000
     60  6dcf		       00		      BYTE.b	%00000000
     61  6dd0		       00		      BYTE.b	%00000000
     62  6dd1
     63  6dd1				  -	      if	>. != >[.+(bmp_96x2_5_height)]
     64  6dd1				  -	      align	256
     65  6dd1					      endif
     66  6dd1
     67  6dd1				   bmp_96x2_5_03
     68  6dd1							; *** replace this block with your bimap_00 data block...
     69  6dd1		       4a		      .byte.b	%01001010	;
     70  6dd2		       4a		      .byte.b	%01001010	;
     71  6dd3		       4e		      .byte.b	%01001110	;
     72  6dd4		       4a		      .byte.b	%01001010	;
     73  6dd5		       e4		      .byte.b	%11100100	;
     74  6dd6
     75  6dd6
     76  6dd6				  -	      if	>. != >[.+(bmp_96x2_5_height)]
     77  6dd6				  -	      align	256
     78  6dd6					      endif
     79  6dd6
     80  6dd6
     81  6dd6				   bmp_96x2_5_04
     82  6dd6							; *** replace this block with your bimap_01 data block...
     83  6dd6		       ea		      .byte.b	%11101010	;
     84  6dd7		       8a		      .byte.b	%10001010	;
     85  6dd8		       4c		      .byte.b	%01001100	;
     86  6dd9		       2a		      .byte.b	%00101010	;
     87  6dda		       ec		      .byte.b	%11101100	;
     88  6ddb
     89  6ddb
     90  6ddb				  -	      if	>. != >[.+(bmp_96x2_5_height)]
     91  6ddb				  -	      align	256
     92  6ddb					      endif
     93  6ddb
     94  6ddb
     95  6ddb				   bmp_96x2_5_05
     96  6ddb							; *** replace this block with your bimap_02 data block...
     97  6ddb		       ee		      .byte.b	%11101110	;
     98  6ddc		       aa		      .byte.b	%10101010	;
     99  6ddd		       aa		      .byte.b	%10101010	;
    100  6dde		       a8		      .byte.b	%10101000	;
    101  6ddf		       ee		      .byte.b	%11101110	;
    102  6de0
    103  6de0
    104  6de0				  -	      if	>. != >[.+(bmp_96x2_5_height)]
    105  6de0				  -	      align	256
    106  6de0					      endif
    107  6de0
    108  6de0
    109  6de0				   bmp_96x2_5_06
    110  6de0							; *** replace this block with your bimap_03 data block...
    111  6de0		       0e		      .byte.b	%00001110	;
    112  6de1		       0a		      .byte.b	%00001010	;
    113  6de2		       0a		      .byte.b	%00001010	;
    114  6de3		       08		      .byte.b	%00001000	;
    115  6de4		       0e		      .byte.b	%00001110	;
    116  6de5
    117  6de5
    118  6de5
    119  6de5				  -	      if	>. != >[.+(bmp_96x2_5_height)]
    120  6de5				  -	      align	256
    121  6de5					      endif
    122  6de5
    123  6de5
    124  6de5				   bmp_96x2_5_07
    125  6de5							; *** replace this block with your bimap_04 data block...
    126  6de5		       aa		      .byte.b	%10101010	;
    127  6de6		       aa		      .byte.b	%10101010	;
    128  6de7		       ea		      .byte.b	%11101010	;
    129  6de8		       ae		      .byte.b	%10101110	;
    130  6de9		       ea		      .byte.b	%11101010	;
    131  6dea
    132  6dea
    133  6dea				  -	      if	>. != >[.+(bmp_96x2_5_height)]
    134  6dea				  -	      align	256
    135  6dea					      endif
    136  6dea
    137  6dea
    138  6dea				   bmp_96x2_5_08
    139  6dea							; *** replace this block with your bimap_05 data block...
    140  6dea		       ee		      .byte.b	%11101110	;
    141  6deb		       82		      .byte.b	%10000010	;
    142  6dec		       ce		      .byte.b	%11001110	;
    143  6ded		       88		      .byte.b	%10001000	;
    144  6dee		       ee		      .byte.b	%11101110	;
    145  6def
    146  6def
    147  6def				  -	      if	>. != >[.+(bmp_96x2_5_height)]
    148  6def				  -	      align	256
    149  6def					      endif
    150  6def
    151  6def
    152  6def				   bmp_96x2_5_09
    153  6def							; *** replace this block with your bimap_06 data block...
    154  6def		       00		      BYTE.b	%00000000
    155  6df0		       00		      BYTE.b	%00000000
    156  6df1		       00		      BYTE.b	%00000000
    157  6df2		       00		      BYTE.b	%00000000
    158  6df3		       00		      BYTE.b	%00000000
    159  6df4
    160  6df4
    161  6df4				  -	      if	>. != >[.+(bmp_96x2_5_height)]
    162  6df4				  -	      align	256
    163  6df4					      endif
    164  6df4
    165  6df4
    166  6df4				   bmp_96x2_5_10
    167  6df4							; *** replace this block with your bimap_07 data block...
    168  6df4		       00		      BYTE.b	%00000000
    169  6df5		       00		      BYTE.b	%00000000
    170  6df6		       00		      BYTE.b	%00000000
    171  6df7		       00		      BYTE.b	%00000000
    172  6df8		       00		      BYTE.b	%00000000
    173  6df9
    174  6df9
    175  6df9				  -	      if	>. != >[.+(bmp_96x2_5_height)]
    176  6df9				  -	      align	256
    177  6df9					      endif
    178  6df9
    179  6df9
    180  6df9				   bmp_96x2_5_11
    181  6df9							; *** replace this block with your bimap_08 data block...
    182  6df9		       00		      BYTE.b	%00000000
    183  6dfa		       00		      BYTE.b	%00000000
    184  6dfb		       00		      BYTE.b	%00000000
    185  6dfc		       00		      BYTE.b	%00000000
    186  6dfd		       00		      BYTE.b	%00000000
    187  6dfe
    188  6dfe
    189  6dfe
------- FILE titlescreen/asm/titlescreen.asm
    286  6dfe					      endif
    287  6dfe				  -	      ifconst	mk_96x2_6_on
    288  6dfe				  -	      include	"titlescreen/96x2_6_image.asm"
    289  6dfe					      endif
    290  6dfe				  -	      ifconst	mk_96x2_7_on
    291  6dfe				  -	      include	"titlescreen/96x2_7_image.asm"
    292  6dfe					      endif
    293  6dfe				  -	      ifconst	mk_96x2_8_on
    294  6dfe				  -	      include	"titlescreen/96x2_8_image.asm"
    295  6dfe					      endif
    296  6dfe
    297  6dfe				  -	      ifconst	mk_player_on
    298  6dfe				  -	      include	"titlescreen/player_image.asm"
    299  6dfe					      endif
    300  6dfe
    301  6dfe					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 3
      0  6dfe					      include	"titlescreen/score_image.asm"
      1  6dfe							; feel free to modify the score graphics - just keep each digit 8 high
      2  6dfe							; if you're looking to want to modify any one font, pick on the
      3  6dfe
      4  6dfe				  -	      ifnconst	scorecolor
      5  6dfe				  -scorecolor
      6  6dfe					      endif
      7  6dfe							; ** change this value for a different scorecolor under DPC+
      8  6dfe							;    for other kernels, just use the scorecolor variable
      9  6dfe		       0f		      .byte.b	$0f
     10  6dff
     11  6dff				  -	      ifnconst	NOFONT
     12  6dff				  -NOFONT     =	0
     13  6dff					      endif
     14  6dff				  -	      ifnconst	STOCK
     15  6dff				  -STOCK      =	1	;_FONTNAME
     16  6dff					      endif
     17  6dff				  -	      ifnconst	NEWCENTURY
     18  6dff				  -NEWCENTURY =	2	;_FONTNAME
     19  6dff					      endif
     20  6dff				  -	      ifnconst	WHIMSEY
     21  6dff				  -WHIMSEY    =	3	;_FONTNAME
     22  6dff					      endif
     23  6dff				  -	      ifnconst	ALARMCLOCK
     24  6dff				  -ALARMCLOCK =	4	;_FONTNAME
     25  6dff					      endif
     26  6dff				  -	      ifnconst	HANDWRITTEN
     27  6dff				  -HANDWRITTEN =	5	;_FONTNAME
     28  6dff					      endif
     29  6dff				  -	      ifnconst	INTERRUPTED
     30  6dff				  -INTERRUPTED =	6	;_FONTNAME
     31  6dff					      endif
     32  6dff				  -	      ifnconst	TINY
     33  6dff				  -TINY       =	7	;_FONTNAME
     34  6dff					      endif
     35  6dff				  -	      ifnconst	RETROPUTER
     36  6dff				  -RETROPUTER =	8	;_FONTNAME
     37  6dff					      endif
     38  6dff				  -	      ifnconst	CURVES
     39  6dff				  -CURVES     =	9	;_FONTNAME
     40  6dff					      endif
     41  6dff				  -	      ifnconst	HUSKY
     42  6dff				  -HUSKY      =	10	;_FONTNAME
     43  6dff					      endif
     44  6dff				  -	      ifnconst	SNAKE
     45  6dff				  -SNAKE      =	11	;_FONTNAME
     46  6dff					      endif
     47  6dff				  -	      ifnconst	PLOK
     48  6dff				  -PLOK       =	13	;_FONTNAME
     49  6dff					      endif
     50  6dff
     51  6dff				  -	      ifnconst	SYMBOLS
     52  6dff				  -SYMBOLS    =	0	;_FONTNAME
     53  6dff					      endif
     54  6dff
     55  6dff							; ### setup some defaults
     56  6dff				  -	      ifnconst	fontstyle
     57  6dff				  -fontstyle  =	STOCK
     58  6dff					      endif
     59  6dff
     60  6dff							;fix up the table alignment, if necessary
     61  6dff					      if	>. != >[.+81]
     62  6e00		       00		      align	256
     63  6e00					      endif
     64  6e00
     65  6e00
     66  6e00				   miniscoretable
     67  6e00
     68  6e00					      if	fontstyle == STOCK
     69  6e00
     70  6e00							;byte %00000000 ; STOCK
     71  6e00
     72  6e00		       3c		      .byte.b	%00111100	; STOCK
     73  6e01		       66		      .byte.b	%01100110	; STOCK
     74  6e02		       66		      .byte.b	%01100110	; STOCK
     75  6e03		       66		      .byte.b	%01100110	; STOCK
     76  6e04		       66		      .byte.b	%01100110	; STOCK
     77  6e05		       66		      .byte.b	%01100110	; STOCK
     78  6e06		       66		      .byte.b	%01100110	; STOCK
     79  6e07		       3c		      .byte.b	%00111100	; STOCK
     80  6e08
     81  6e08							;byte %00000000 ; STOCK
     82  6e08
     83  6e08		       7e		      .byte.b	%01111110	; STOCK
     84  6e09		       18		      .byte.b	%00011000	; STOCK
     85  6e0a		       18		      .byte.b	%00011000	; STOCK
     86  6e0b		       18		      .byte.b	%00011000	; STOCK
     87  6e0c		       18		      .byte.b	%00011000	; STOCK
     88  6e0d		       38		      .byte.b	%00111000	; STOCK
     89  6e0e		       18		      .byte.b	%00011000	; STOCK
     90  6e0f		       08		      .byte.b	%00001000	; STOCK
     91  6e10
     92  6e10							;byte %00000000 ; STOCK
     93  6e10
     94  6e10		       7e		      .byte.b	%01111110	; STOCK
     95  6e11		       60		      .byte.b	%01100000	; STOCK
     96  6e12		       60		      .byte.b	%01100000	; STOCK
     97  6e13		       3c		      .byte.b	%00111100	; STOCK
     98  6e14		       06		      .byte.b	%00000110	; STOCK
     99  6e15		       06		      .byte.b	%00000110	; STOCK
    100  6e16		       46		      .byte.b	%01000110	; STOCK
    101  6e17		       3c		      .byte.b	%00111100	; STOCK
    102  6e18
    103  6e18							;byte %00000000 ; STOCK
    104  6e18
    105  6e18		       3c		      .byte.b	%00111100	; STOCK
    106  6e19		       46		      .byte.b	%01000110	; STOCK
    107  6e1a		       06		      .byte.b	%00000110	; STOCK
    108  6e1b		       06		      .byte.b	%00000110	; STOCK
    109  6e1c		       1c		      .byte.b	%00011100	; STOCK
    110  6e1d		       06		      .byte.b	%00000110	; STOCK
    111  6e1e		       46		      .byte.b	%01000110	; STOCK
    112  6e1f		       3c		      .byte.b	%00111100	; STOCK
    113  6e20
    114  6e20							;byte %00000000 ; STOCK
    115  6e20
    116  6e20		       0c		      .byte.b	%00001100	; STOCK
    117  6e21		       0c		      .byte.b	%00001100	; STOCK
    118  6e22		       7e		      .byte.b	%01111110	; STOCK
    119  6e23		       4c		      .byte.b	%01001100	; STOCK
    120  6e24		       4c		      .byte.b	%01001100	; STOCK
    121  6e25		       2c		      .byte.b	%00101100	; STOCK
    122  6e26		       1c		      .byte.b	%00011100	; STOCK
    123  6e27		       0c		      .byte.b	%00001100	; STOCK
    124  6e28
    125  6e28							;byte %00000000 ; STOCK
    126  6e28
    127  6e28		       3c		      .byte.b	%00111100	; STOCK
    128  6e29		       46		      .byte.b	%01000110	; STOCK
    129  6e2a		       06		      .byte.b	%00000110	; STOCK
    130  6e2b		       06		      .byte.b	%00000110	; STOCK
    131  6e2c		       3c		      .byte.b	%00111100	; STOCK
    132  6e2d		       60		      .byte.b	%01100000	; STOCK
    133  6e2e		       60		      .byte.b	%01100000	; STOCK
    134  6e2f		       7e		      .byte.b	%01111110	; STOCK
    135  6e30
    136  6e30							;byte %00000000 ; STOCK
    137  6e30
    138  6e30		       3c		      .byte.b	%00111100	; STOCK
    139  6e31		       66		      .byte.b	%01100110	; STOCK
    140  6e32		       66		      .byte.b	%01100110	; STOCK
    141  6e33		       66		      .byte.b	%01100110	; STOCK
    142  6e34		       7c		      .byte.b	%01111100	; STOCK
    143  6e35		       60		      .byte.b	%01100000	; STOCK
    144  6e36		       62		      .byte.b	%01100010	; STOCK
    145  6e37		       3c		      .byte.b	%00111100	; STOCK
    146  6e38
    147  6e38							;byte %00000000 ; STOCK
    148  6e38
    149  6e38		       30		      .byte.b	%00110000	; STOCK
    150  6e39		       30		      .byte.b	%00110000	; STOCK
    151  6e3a		       30		      .byte.b	%00110000	; STOCK
    152  6e3b		       18		      .byte.b	%00011000	; STOCK
    153  6e3c		       0c		      .byte.b	%00001100	; STOCK
    154  6e3d		       06		      .byte.b	%00000110	; STOCK
    155  6e3e		       42		      .byte.b	%01000010	; STOCK
    156  6e3f		       3e		      .byte.b	%00111110	; STOCK
    157  6e40
    158  6e40							;byte %00000000 ; STOCK
    159  6e40
    160  6e40		       3c		      .byte.b	%00111100	; STOCK
    161  6e41		       66		      .byte.b	%01100110	; STOCK
    162  6e42		       66		      .byte.b	%01100110	; STOCK
    163  6e43		       66		      .byte.b	%01100110	; STOCK
    164  6e44		       3c		      .byte.b	%00111100	; STOCK
    165  6e45		       66		      .byte.b	%01100110	; STOCK
    166  6e46		       66		      .byte.b	%01100110	; STOCK
    167  6e47		       3c		      .byte.b	%00111100	; STOCK
    168  6e48
    169  6e48							;byte %00000000 ; STOCK
    170  6e48
    171  6e48		       3c		      .byte.b	%00111100	; STOCK
    172  6e49		       46		      .byte.b	%01000110	; STOCK
    173  6e4a		       06		      .byte.b	%00000110	; STOCK
    174  6e4b		       3e		      .byte.b	%00111110	; STOCK
    175  6e4c		       66		      .byte.b	%01100110	; STOCK
    176  6e4d		       66		      .byte.b	%01100110	; STOCK
    177  6e4e		       66		      .byte.b	%01100110	; STOCK
    178  6e4f		       3c		      .byte.b	%00111100	; STOCK
    179  6e50
    180  6e50					      endif		; STOCK
    181  6e50
    182  6e50				  -	      if	fontstyle == NEWCENTURY
    183  6e50				  -			;byte %00000000 ; NEWCENTURY
    184  6e50				  -
    185  6e50				  -	      .byte	%00111100	; NEWCENTURY
    186  6e50				  -	      .byte	%01000010	; NEWCENTURY
    187  6e50				  -	      .byte	%01000010	; NEWCENTURY
    188  6e50				  -	      .byte	%01000010	; NEWCENTURY
    189  6e50				  -	      .byte	%00100100	; NEWCENTURY
    190  6e50				  -	      .byte	%00100100	; NEWCENTURY
    191  6e50				  -	      .byte	%00100100	; NEWCENTURY
    192  6e50				  -	      .byte	%00011000	; NEWCENTURY
    193  6e50				  -
    194  6e50				  -			;byte %00000000 ; NEWCENTURY
    195  6e50				  -
    196  6e50				  -	      .byte	%00001000	; NEWCENTURY
    197  6e50				  -	      .byte	%00001000	; NEWCENTURY
    198  6e50				  -	      .byte	%00001000	; NEWCENTURY
    199  6e50				  -	      .byte	%00001000	; NEWCENTURY
    200  6e50				  -	      .byte	%00001000	; NEWCENTURY
    201  6e50				  -	      .byte	%00001000	; NEWCENTURY
    202  6e50				  -	      .byte	%00001000	; NEWCENTURY
    203  6e50				  -	      .byte	%00001000	; NEWCENTURY
    204  6e50				  -
    205  6e50				  -			;byte %00000000 ; NEWCENTURY
    206  6e50				  -
    207  6e50				  -	      .byte	%01111110	; NEWCENTURY
    208  6e50				  -	      .byte	%01000000	; NEWCENTURY
    209  6e50				  -	      .byte	%01000000	; NEWCENTURY
    210  6e50				  -	      .byte	%00100000	; NEWCENTURY
    211  6e50				  -	      .byte	%00011100	; NEWCENTURY
    212  6e50				  -	      .byte	%00000010	; NEWCENTURY
    213  6e50				  -	      .byte	%00000010	; NEWCENTURY
    214  6e50				  -	      .byte	%00011100	; NEWCENTURY
    215  6e50				  -
    216  6e50				  -			;byte %00000000 ; NEWCENTURY
    217  6e50				  -
    218  6e50				  -	      .byte	%01111100	; NEWCENTURY
    219  6e50				  -	      .byte	%00000010	; NEWCENTURY
    220  6e50				  -	      .byte	%00000010	; NEWCENTURY
    221  6e50				  -	      .byte	%00000010	; NEWCENTURY
    222  6e50				  -	      .byte	%00111100	; NEWCENTURY
    223  6e50				  -	      .byte	%00000010	; NEWCENTURY
    224  6e50				  -	      .byte	%00000010	; NEWCENTURY
    225  6e50				  -	      .byte	%00011100	; NEWCENTURY
    226  6e50				  -
    227  6e50				  -			;byte %00000000 ; NEWCENTURY
    228  6e50				  -
    229  6e50				  -	      .byte	%00000010	; NEWCENTURY
    230  6e50				  -	      .byte	%00000010	; NEWCENTURY
    231  6e50				  -	      .byte	%00000010	; NEWCENTURY
    232  6e50				  -	      .byte	%00111110	; NEWCENTURY
    233  6e50				  -	      .byte	%00100010	; NEWCENTURY
    234  6e50				  -	      .byte	%00100010	; NEWCENTURY
    235  6e50				  -	      .byte	%00010010	; NEWCENTURY
    236  6e50				  -	      .byte	%00010010	; NEWCENTURY
    237  6e50				  -
    238  6e50				  -			;byte %00000000 ; NEWCENTURY
    239  6e50				  -
    240  6e50				  -	      .byte	%01111100	; NEWCENTURY
    241  6e50				  -	      .byte	%00000010	; NEWCENTURY
    242  6e50				  -	      .byte	%00000010	; NEWCENTURY
    243  6e50				  -	      .byte	%00000010	; NEWCENTURY
    244  6e50				  -	      .byte	%01111100	; NEWCENTURY
    245  6e50				  -	      .byte	%01000000	; NEWCENTURY
    246  6e50				  -	      .byte	%01000000	; NEWCENTURY
    247  6e50				  -	      .byte	%01111000	; NEWCENTURY
    248  6e50				  -
    249  6e50				  -			;byte %00000000 ; NEWCENTURY
    250  6e50				  -
    251  6e50				  -	      .byte	%00111100	; NEWCENTURY
    252  6e50				  -	      .byte	%01000010	; NEWCENTURY
    253  6e50				  -	      .byte	%01000010	; NEWCENTURY
    254  6e50				  -	      .byte	%01000010	; NEWCENTURY
    255  6e50				  -	      .byte	%01111100	; NEWCENTURY
    256  6e50				  -	      .byte	%01000000	; NEWCENTURY
    257  6e50				  -	      .byte	%01000000	; NEWCENTURY
    258  6e50				  -	      .byte	%00110000	; NEWCENTURY
    259  6e50				  -
    260  6e50				  -			;byte %00000000 ; NEWCENTURY
    261  6e50				  -
    262  6e50				  -	      .byte	%00010000	; NEWCENTURY
    263  6e50				  -	      .byte	%00010000	; NEWCENTURY
    264  6e50				  -	      .byte	%00001000	; NEWCENTURY
    265  6e50				  -	      .byte	%00001000	; NEWCENTURY
    266  6e50				  -	      .byte	%00000100	; NEWCENTURY
    267  6e50				  -	      .byte	%00000100	; NEWCENTURY
    268  6e50				  -	      .byte	%00000010	; NEWCENTURY
    269  6e50				  -	      .byte	%00011110	; NEWCENTURY
    270  6e50				  -
    271  6e50				  -			;byte %00000000 ; NEWCENTURY
    272  6e50				  -
    273  6e50				  -	      .byte	%00111100	; NEWCENTURY
    274  6e50				  -	      .byte	%01000010	; NEWCENTURY
    275  6e50				  -	      .byte	%01000010	; NEWCENTURY
    276  6e50				  -	      .byte	%01000010	; NEWCENTURY
    277  6e50				  -	      .byte	%00111100	; NEWCENTURY
    278  6e50				  -	      .byte	%00100100	; NEWCENTURY
    279  6e50				  -	      .byte	%00100100	; NEWCENTURY
    280  6e50				  -	      .byte	%00011000	; NEWCENTURY
    281  6e50				  -
    282  6e50				  -			;byte %00000000 ; NEWCENTURY
    283  6e50				  -
    284  6e50				  -	      .byte	%00111100	; NEWCENTURY
    285  6e50				  -	      .byte	%00000010	; NEWCENTURY
    286  6e50				  -	      .byte	%00000010	; NEWCENTURY
    287  6e50				  -	      .byte	%00000010	; NEWCENTURY
    288  6e50				  -	      .byte	%00001110	; NEWCENTURY
    289  6e50				  -	      .byte	%00010010	; NEWCENTURY
    290  6e50				  -	      .byte	%00010010	; NEWCENTURY
    291  6e50				  -	      .byte	%00001100	; NEWCENTURY
    292  6e50				  -
    293  6e50					      endif		; NEWCENTURY
    294  6e50
    295  6e50				  -	      if	fontstyle == WHIMSEY
    296  6e50				  -			;byte %00000000 ; WHIMSEY
    297  6e50				  -
    298  6e50				  -	      .byte	%00111100	; WHIMSEY
    299  6e50				  -	      .byte	%01111110	; WHIMSEY
    300  6e50				  -	      .byte	%01111110	; WHIMSEY
    301  6e50				  -	      .byte	%01111110	; WHIMSEY
    302  6e50				  -	      .byte	%01110110	; WHIMSEY
    303  6e50				  -	      .byte	%01110110	; WHIMSEY
    304  6e50				  -	      .byte	%01110110	; WHIMSEY
    305  6e50				  -	      .byte	%00111100	; WHIMSEY
    306  6e50				  -
    307  6e50				  -			;byte %00000000 ; WHIMSEY
    308  6e50				  -
    309  6e50				  -	      .byte	%01111110	; WHIMSEY
    310  6e50				  -	      .byte	%01111110	; WHIMSEY
    311  6e50				  -	      .byte	%01111110	; WHIMSEY
    312  6e50				  -	      .byte	%00011000	; WHIMSEY
    313  6e50				  -	      .byte	%00011000	; WHIMSEY
    314  6e50				  -	      .byte	%00011000	; WHIMSEY
    315  6e50				  -	      .byte	%01111000	; WHIMSEY
    316  6e50				  -	      .byte	%00011000	; WHIMSEY
    317  6e50				  -
    318  6e50				  -			;byte %00000000 ; WHIMSEY
    319  6e50				  -
    320  6e50				  -	      .byte	%01111110	; WHIMSEY
    321  6e50				  -	      .byte	%01111110	; WHIMSEY
    322  6e50				  -	      .byte	%01111110	; WHIMSEY
    323  6e50				  -	      .byte	%01111000	; WHIMSEY
    324  6e50				  -	      .byte	%00111100	; WHIMSEY
    325  6e50				  -	      .byte	%00001110	; WHIMSEY
    326  6e50				  -	      .byte	%01100110	; WHIMSEY
    327  6e50				  -	      .byte	%00111100	; WHIMSEY
    328  6e50				  -
    329  6e50				  -			;byte %00000000 ; WHIMSEY
    330  6e50				  -
    331  6e50				  -	      .byte	%00111100	; WHIMSEY
    332  6e50				  -	      .byte	%01111110	; WHIMSEY
    333  6e50				  -	      .byte	%01111110	; WHIMSEY
    334  6e50				  -	      .byte	%01101110	; WHIMSEY
    335  6e50				  -	      .byte	%00001110	; WHIMSEY
    336  6e50				  -	      .byte	%00111100	; WHIMSEY
    337  6e50				  -	      .byte	%00011100	; WHIMSEY
    338  6e50				  -	      .byte	%01111110	; WHIMSEY
    339  6e50				  -
    340  6e50				  -			;byte %00000000 ; WHIMSEY
    341  6e50				  -
    342  6e50				  -	      .byte	%00011100	; WHIMSEY
    343  6e50				  -	      .byte	%00011100	; WHIMSEY
    344  6e50				  -	      .byte	%01111110	; WHIMSEY
    345  6e50				  -	      .byte	%01011100	; WHIMSEY
    346  6e50				  -	      .byte	%01011100	; WHIMSEY
    347  6e50				  -	      .byte	%00011100	; WHIMSEY
    348  6e50				  -	      .byte	%00011100	; WHIMSEY
    349  6e50				  -	      .byte	%00011100	; WHIMSEY
    350  6e50				  -
    351  6e50				  -			;byte %00000000 ; WHIMSEY
    352  6e50				  -
    353  6e50				  -	      .byte	%00111100	; WHIMSEY
    354  6e50				  -	      .byte	%01111110	; WHIMSEY
    355  6e50				  -	      .byte	%01111110	; WHIMSEY
    356  6e50				  -	      .byte	%01101110	; WHIMSEY
    357  6e50				  -	      .byte	%00001110	; WHIMSEY
    358  6e50				  -	      .byte	%01111100	; WHIMSEY
    359  6e50				  -	      .byte	%01110000	; WHIMSEY
    360  6e50				  -	      .byte	%01111110	; WHIMSEY
    361  6e50				  -
    362  6e50				  -			;byte %00000000 ; WHIMSEY
    363  6e50				  -
    364  6e50				  -	      .byte	%00111100	; WHIMSEY
    365  6e50				  -	      .byte	%01111110	; WHIMSEY
    366  6e50				  -	      .byte	%01111110	; WHIMSEY
    367  6e50				  -	      .byte	%01110110	; WHIMSEY
    368  6e50				  -	      .byte	%01110110	; WHIMSEY
    369  6e50				  -	      .byte	%01111100	; WHIMSEY
    370  6e50				  -	      .byte	%01110000	; WHIMSEY
    371  6e50				  -	      .byte	%00111110	; WHIMSEY
    372  6e50				  -
    373  6e50				  -			;byte %00000000 ; WHIMSEY
    374  6e50				  -
    375  6e50				  -	      .byte	%01111000	; WHIMSEY
    376  6e50				  -	      .byte	%01111000	; WHIMSEY
    377  6e50				  -	      .byte	%01111000	; WHIMSEY
    378  6e50				  -	      .byte	%00111100	; WHIMSEY
    379  6e50				  -	      .byte	%00011100	; WHIMSEY
    380  6e50				  -	      .byte	%00001110	; WHIMSEY
    381  6e50				  -	      .byte	%00001110	; WHIMSEY
    382  6e50				  -	      .byte	%01111110	; WHIMSEY
    383  6e50				  -
    384  6e50				  -			;byte %00000000 ; WHIMSEY
    385  6e50				  -
    386  6e50				  -	      .byte	%00111100	; WHIMSEY
    387  6e50				  -	      .byte	%01111110	; WHIMSEY
    388  6e50				  -	      .byte	%01111110	; WHIMSEY
    389  6e50				  -	      .byte	%01110110	; WHIMSEY
    390  6e50				  -	      .byte	%01110110	; WHIMSEY
    391  6e50				  -	      .byte	%00111100	; WHIMSEY
    392  6e50				  -	      .byte	%01110110	; WHIMSEY
    393  6e50				  -	      .byte	%00111100	; WHIMSEY
    394  6e50				  -
    395  6e50				  -			;byte %00000000 ; WHIMSEY
    396  6e50				  -
    397  6e50				  -	      .byte	%00111100	; WHIMSEY
    398  6e50				  -	      .byte	%01111110	; WHIMSEY
    399  6e50				  -	      .byte	%01111110	; WHIMSEY
    400  6e50				  -	      .byte	%01110110	; WHIMSEY
    401  6e50				  -	      .byte	%00000110	; WHIMSEY
    402  6e50				  -	      .byte	%00111110	; WHIMSEY
    403  6e50				  -	      .byte	%01110110	; WHIMSEY
    404  6e50				  -	      .byte	%00111100	; WHIMSEY
    405  6e50				  -
    406  6e50					      endif		; WHIMSEY
    407  6e50
    408  6e50				  -	      if	fontstyle == ALARMCLOCK
    409  6e50				  -
    410  6e50				  -			;byte %00000000 ; ALARMCLOCK
    411  6e50				  -
    412  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    413  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    414  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    415  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    416  6e50				  -	      .byte	%00000000	; ALARMCLOCK
    417  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    418  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    419  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    420  6e50				  -
    421  6e50				  -			;byte %00000000 ; ALARMCLOCK
    422  6e50				  -
    423  6e50				  -	      .byte	%00000000	; ALARMCLOCK
    424  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    425  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    426  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    427  6e50				  -	      .byte	%00000000	; ALARMCLOCK
    428  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    429  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    430  6e50				  -	      .byte	%00000000	; ALARMCLOCK
    431  6e50				  -
    432  6e50				  -			;byte %00000000 ; ALARMCLOCK
    433  6e50				  -
    434  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    435  6e50				  -	      .byte	%01000000	; ALARMCLOCK
    436  6e50				  -	      .byte	%01000000	; ALARMCLOCK
    437  6e50				  -	      .byte	%01000000	; ALARMCLOCK
    438  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    439  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    440  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    441  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    442  6e50				  -
    443  6e50				  -			;byte %00000000 ; ALARMCLOCK
    444  6e50				  -
    445  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    446  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    447  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    448  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    449  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    450  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    451  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    452  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    453  6e50				  -
    454  6e50				  -			;byte %00000000 ; ALARMCLOCK
    455  6e50				  -
    456  6e50				  -	      .byte	%00000000	; ALARMCLOCK
    457  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    458  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    459  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    460  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    461  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    462  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    463  6e50				  -	      .byte	%00000000	; ALARMCLOCK
    464  6e50				  -
    465  6e50				  -			;byte %00000000 ; ALARMCLOCK
    466  6e50				  -
    467  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    468  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    469  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    470  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    471  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    472  6e50				  -	      .byte	%01000000	; ALARMCLOCK
    473  6e50				  -	      .byte	%01000000	; ALARMCLOCK
    474  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    475  6e50				  -
    476  6e50				  -			;byte %00000000 ; ALARMCLOCK
    477  6e50				  -
    478  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    479  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    480  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    481  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    482  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    483  6e50				  -	      .byte	%01000000	; ALARMCLOCK
    484  6e50				  -	      .byte	%01000000	; ALARMCLOCK
    485  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    486  6e50				  -
    487  6e50				  -			;byte %00000000 ; ALARMCLOCK
    488  6e50				  -
    489  6e50				  -	      .byte	%00000000	; ALARMCLOCK
    490  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    491  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    492  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    493  6e50				  -	      .byte	%00000000	; ALARMCLOCK
    494  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    495  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    496  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    497  6e50				  -
    498  6e50				  -			;byte %00000000 ; ALARMCLOCK
    499  6e50				  -
    500  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    501  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    502  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    503  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    504  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    505  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    506  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    507  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    508  6e50				  -
    509  6e50				  -			;byte %00000000 ; ALARMCLOCK
    510  6e50				  -
    511  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    512  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    513  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    514  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    515  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    516  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    517  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    518  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    519  6e50				  -
    520  6e50				  -
    521  6e50					      endif		; ALARMCLOCK
    522  6e50
    523  6e50				  -	      if	fontstyle == HANDWRITTEN
    524  6e50				  -
    525  6e50				  -			;byte %00000000 ; HANDWRITTEN
    526  6e50				  -
    527  6e50				  -	      .byte	%00110000	; HANDWRITTEN
    528  6e50				  -	      .byte	%01001000	; HANDWRITTEN
    529  6e50				  -	      .byte	%01001000	; HANDWRITTEN
    530  6e50				  -	      .byte	%01001000	; HANDWRITTEN
    531  6e50				  -	      .byte	%00100100	; HANDWRITTEN
    532  6e50				  -	      .byte	%00100100	; HANDWRITTEN
    533  6e50				  -	      .byte	%00010010	; HANDWRITTEN
    534  6e50				  -	      .byte	%00001100	; HANDWRITTEN
    535  6e50				  -
    536  6e50				  -			;byte %00000000 ; HANDWRITTEN
    537  6e50				  -
    538  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    539  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    540  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    541  6e50				  -	      .byte	%00001000	; HANDWRITTEN
    542  6e50				  -	      .byte	%00001000	; HANDWRITTEN
    543  6e50				  -	      .byte	%00001000	; HANDWRITTEN
    544  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    545  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    546  6e50				  -
    547  6e50				  -			;byte %00000000 ; HANDWRITTEN
    548  6e50				  -
    549  6e50				  -	      .byte	%01110000	; HANDWRITTEN
    550  6e50				  -	      .byte	%01001100	; HANDWRITTEN
    551  6e50				  -	      .byte	%01000000	; HANDWRITTEN
    552  6e50				  -	      .byte	%00100000	; HANDWRITTEN
    553  6e50				  -	      .byte	%00011000	; HANDWRITTEN
    554  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    555  6e50				  -	      .byte	%00100010	; HANDWRITTEN
    556  6e50				  -	      .byte	%00011100	; HANDWRITTEN
    557  6e50				  -
    558  6e50				  -			;byte %00000000 ; HANDWRITTEN
    559  6e50				  -
    560  6e50				  -	      .byte	%00110000	; HANDWRITTEN
    561  6e50				  -	      .byte	%01001000	; HANDWRITTEN
    562  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    563  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    564  6e50				  -	      .byte	%00011000	; HANDWRITTEN
    565  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    566  6e50				  -	      .byte	%00100010	; HANDWRITTEN
    567  6e50				  -	      .byte	%00011100	; HANDWRITTEN
    568  6e50				  -
    569  6e50				  -			;byte %00000000 ; HANDWRITTEN
    570  6e50				  -
    571  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    572  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    573  6e50				  -	      .byte	%00001000	; HANDWRITTEN
    574  6e50				  -	      .byte	%01111000	; HANDWRITTEN
    575  6e50				  -	      .byte	%01000100	; HANDWRITTEN
    576  6e50				  -	      .byte	%00100100	; HANDWRITTEN
    577  6e50				  -	      .byte	%00010010	; HANDWRITTEN
    578  6e50				  -	      .byte	%00000010	; HANDWRITTEN
    579  6e50				  -
    580  6e50				  -			;byte %00000000 ; HANDWRITTEN
    581  6e50				  -
    582  6e50				  -	      .byte	%00110000	; HANDWRITTEN
    583  6e50				  -	      .byte	%01001000	; HANDWRITTEN
    584  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    585  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    586  6e50				  -	      .byte	%00011000	; HANDWRITTEN
    587  6e50				  -	      .byte	%00100000	; HANDWRITTEN
    588  6e50				  -	      .byte	%00010010	; HANDWRITTEN
    589  6e50				  -	      .byte	%00001100	; HANDWRITTEN
    590  6e50				  -
    591  6e50				  -			;byte %00000000 ; HANDWRITTEN
    592  6e50				  -
    593  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    594  6e50				  -	      .byte	%00101000	; HANDWRITTEN
    595  6e50				  -	      .byte	%00100100	; HANDWRITTEN
    596  6e50				  -	      .byte	%00100100	; HANDWRITTEN
    597  6e50				  -	      .byte	%00011000	; HANDWRITTEN
    598  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    599  6e50				  -	      .byte	%00001000	; HANDWRITTEN
    600  6e50				  -	      .byte	%00000110	; HANDWRITTEN
    601  6e50				  -
    602  6e50				  -			;byte %00000000 ; HANDWRITTEN
    603  6e50				  -
    604  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    605  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    606  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    607  6e50				  -	      .byte	%00001000	; HANDWRITTEN
    608  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    609  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    610  6e50				  -	      .byte	%00110010	; HANDWRITTEN
    611  6e50				  -	      .byte	%00001110	; HANDWRITTEN
    612  6e50				  -
    613  6e50				  -			;byte %00000000 ; HANDWRITTEN
    614  6e50				  -
    615  6e50				  -	      .byte	%00110000	; HANDWRITTEN
    616  6e50				  -	      .byte	%01001000	; HANDWRITTEN
    617  6e50				  -	      .byte	%01000100	; HANDWRITTEN
    618  6e50				  -	      .byte	%00100100	; HANDWRITTEN
    619  6e50				  -	      .byte	%00011100	; HANDWRITTEN
    620  6e50				  -	      .byte	%00010010	; HANDWRITTEN
    621  6e50				  -	      .byte	%00001010	; HANDWRITTEN
    622  6e50				  -	      .byte	%00000110	; HANDWRITTEN
    623  6e50				  -
    624  6e50				  -			;byte %00000000 ; HANDWRITTEN
    625  6e50				  -
    626  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    627  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    628  6e50				  -	      .byte	%00001000	; HANDWRITTEN
    629  6e50				  -	      .byte	%00001000	; HANDWRITTEN
    630  6e50				  -	      .byte	%00011100	; HANDWRITTEN
    631  6e50				  -	      .byte	%00100100	; HANDWRITTEN
    632  6e50				  -	      .byte	%00010010	; HANDWRITTEN
    633  6e50				  -	      .byte	%00001100	; HANDWRITTEN
    634  6e50				  -
    635  6e50					      endif		; HANDWRITTEN
    636  6e50
    637  6e50				  -	      if	fontstyle == INTERRUPTED
    638  6e50				  -
    639  6e50				  -			;byte %00000000 ; INTERRUPTED
    640  6e50				  -
    641  6e50				  -	      .byte	%00110100	; INTERRUPTED
    642  6e50				  -	      .byte	%01100110	; INTERRUPTED
    643  6e50				  -	      .byte	%01100110	; INTERRUPTED
    644  6e50				  -	      .byte	%01100110	; INTERRUPTED
    645  6e50				  -	      .byte	%01100110	; INTERRUPTED
    646  6e50				  -	      .byte	%01100110	; INTERRUPTED
    647  6e50				  -	      .byte	%01100110	; INTERRUPTED
    648  6e50				  -	      .byte	%00110100	; INTERRUPTED
    649  6e50				  -
    650  6e50				  -			;byte %00000000 ; INTERRUPTED
    651  6e50				  -
    652  6e50				  -	      .byte	%00111100	; INTERRUPTED
    653  6e50				  -	      .byte	%00000000	; INTERRUPTED
    654  6e50				  -	      .byte	%00011000	; INTERRUPTED
    655  6e50				  -	      .byte	%00011000	; INTERRUPTED
    656  6e50				  -	      .byte	%00011000	; INTERRUPTED
    657  6e50				  -	      .byte	%00011000	; INTERRUPTED
    658  6e50				  -	      .byte	%00011000	; INTERRUPTED
    659  6e50				  -	      .byte	%00111000	; INTERRUPTED
    660  6e50				  -
    661  6e50				  -			;byte %00000000 ; INTERRUPTED
    662  6e50				  -
    663  6e50				  -	      .byte	%01101110	; INTERRUPTED
    664  6e50				  -	      .byte	%01100000	; INTERRUPTED
    665  6e50				  -	      .byte	%00110000	; INTERRUPTED
    666  6e50				  -	      .byte	%00011000	; INTERRUPTED
    667  6e50				  -	      .byte	%00001100	; INTERRUPTED
    668  6e50				  -	      .byte	%00000110	; INTERRUPTED
    669  6e50				  -	      .byte	%01000110	; INTERRUPTED
    670  6e50				  -	      .byte	%00111100	; INTERRUPTED
    671  6e50				  -
    672  6e50				  -			;byte %00000000 ; INTERRUPTED
    673  6e50				  -
    674  6e50				  -	      .byte	%01111100	; INTERRUPTED
    675  6e50				  -	      .byte	%00000110	; INTERRUPTED
    676  6e50				  -	      .byte	%00000110	; INTERRUPTED
    677  6e50				  -	      .byte	%00000110	; INTERRUPTED
    678  6e50				  -	      .byte	%01110110	; INTERRUPTED
    679  6e50				  -	      .byte	%00000110	; INTERRUPTED
    680  6e50				  -	      .byte	%00000110	; INTERRUPTED
    681  6e50				  -	      .byte	%01110100	; INTERRUPTED
    682  6e50				  -
    683  6e50				  -			;byte %00000000 ; INTERRUPTED
    684  6e50				  -
    685  6e50				  -	      .byte	%00000110	; INTERRUPTED
    686  6e50				  -	      .byte	%00000110	; INTERRUPTED
    687  6e50				  -	      .byte	%00000110	; INTERRUPTED
    688  6e50				  -	      .byte	%00000110	; INTERRUPTED
    689  6e50				  -	      .byte	%01110110	; INTERRUPTED
    690  6e50				  -	      .byte	%01100110	; INTERRUPTED
    691  6e50				  -	      .byte	%01100110	; INTERRUPTED
    692  6e50				  -	      .byte	%01100110	; INTERRUPTED
    693  6e50				  -
    694  6e50				  -			;byte %00000000 ; INTERRUPTED
    695  6e50				  -
    696  6e50				  -	      .byte	%01111100	; INTERRUPTED
    697  6e50				  -	      .byte	%00000110	; INTERRUPTED
    698  6e50				  -	      .byte	%00000110	; INTERRUPTED
    699  6e50				  -	      .byte	%00000110	; INTERRUPTED
    700  6e50				  -	      .byte	%01111100	; INTERRUPTED
    701  6e50				  -	      .byte	%01100000	; INTERRUPTED
    702  6e50				  -	      .byte	%01100000	; INTERRUPTED
    703  6e50				  -	      .byte	%01101110	; INTERRUPTED
    704  6e50				  -
    705  6e50				  -			;byte %00000000 ; INTERRUPTED
    706  6e50				  -
    707  6e50				  -	      .byte	%00101100	; INTERRUPTED
    708  6e50				  -	      .byte	%01100110	; INTERRUPTED
    709  6e50				  -	      .byte	%01100110	; INTERRUPTED
    710  6e50				  -	      .byte	%01100110	; INTERRUPTED
    711  6e50				  -	      .byte	%01101100	; INTERRUPTED
    712  6e50				  -	      .byte	%01100000	; INTERRUPTED
    713  6e50				  -	      .byte	%00110000	; INTERRUPTED
    714  6e50				  -	      .byte	%00011100	; INTERRUPTED
    715  6e50				  -
    716  6e50				  -			;byte %00000000 ; INTERRUPTED
    717  6e50				  -
    718  6e50				  -	      .byte	%00011000	; INTERRUPTED
    719  6e50				  -	      .byte	%00011000	; INTERRUPTED
    720  6e50				  -	      .byte	%00011000	; INTERRUPTED
    721  6e50				  -	      .byte	%00011100	; INTERRUPTED
    722  6e50				  -	      .byte	%00001110	; INTERRUPTED
    723  6e50				  -	      .byte	%00000110	; INTERRUPTED
    724  6e50				  -	      .byte	%00000000	; INTERRUPTED
    725  6e50				  -	      .byte	%01111110	; INTERRUPTED
    726  6e50				  -
    727  6e50				  -			;byte %00000000 ; INTERRUPTED
    728  6e50				  -
    729  6e50				  -	      .byte	%00110100	; INTERRUPTED
    730  6e50				  -	      .byte	%01100110	; INTERRUPTED
    731  6e50				  -	      .byte	%01100110	; INTERRUPTED
    732  6e50				  -	      .byte	%01100110	; INTERRUPTED
    733  6e50				  -	      .byte	%00110100	; INTERRUPTED
    734  6e50				  -	      .byte	%01100110	; INTERRUPTED
    735  6e50				  -	      .byte	%01100110	; INTERRUPTED
    736  6e50				  -	      .byte	%00110100	; INTERRUPTED
    737  6e50				  -
    738  6e50				  -			;byte %00000000 ; INTERRUPTED
    739  6e50				  -
    740  6e50				  -	      .byte	%00111000	; INTERRUPTED
    741  6e50				  -	      .byte	%00001100	; INTERRUPTED
    742  6e50				  -	      .byte	%00000110	; INTERRUPTED
    743  6e50				  -	      .byte	%00110110	; INTERRUPTED
    744  6e50				  -	      .byte	%01100110	; INTERRUPTED
    745  6e50				  -	      .byte	%01100110	; INTERRUPTED
    746  6e50				  -	      .byte	%01100110	; INTERRUPTED
    747  6e50				  -	      .byte	%00110100	; INTERRUPTED
    748  6e50				  -
    749  6e50					      endif		; INTERRUPTED
    750  6e50
    751  6e50
    752  6e50				  -	      if	fontstyle == TINY
    753  6e50				  -
    754  6e50				  -			;byte %00000000 ; TINY
    755  6e50				  -
    756  6e50				  -	      .byte	%00000000	; TINY
    757  6e50				  -	      .byte	%00111000	; TINY
    758  6e50				  -	      .byte	%00101000	; TINY
    759  6e50				  -	      .byte	%00101000	; TINY
    760  6e50				  -	      .byte	%00101000	; TINY
    761  6e50				  -	      .byte	%00111000	; TINY
    762  6e50				  -	      .byte	%00000000	; TINY
    763  6e50				  -	      .byte	%00000000	; TINY
    764  6e50				  -
    765  6e50				  -			;byte %00000000 ; TINY
    766  6e50				  -
    767  6e50				  -	      .byte	%00000000	; TINY
    768  6e50				  -	      .byte	%00010000	; TINY
    769  6e50				  -	      .byte	%00010000	; TINY
    770  6e50				  -	      .byte	%00010000	; TINY
    771  6e50				  -	      .byte	%00010000	; TINY
    772  6e50				  -	      .byte	%00010000	; TINY
    773  6e50				  -	      .byte	%00000000	; TINY
    774  6e50				  -	      .byte	%00000000	; TINY
    775  6e50				  -
    776  6e50				  -			;byte %00000000 ; TINY
    777  6e50				  -
    778  6e50				  -	      .byte	%00000000	; TINY
    779  6e50				  -	      .byte	%00111000	; TINY
    780  6e50				  -	      .byte	%00100000	; TINY
    781  6e50				  -	      .byte	%00111000	; TINY
    782  6e50				  -	      .byte	%00001000	; TINY
    783  6e50				  -	      .byte	%00111000	; TINY
    784  6e50				  -	      .byte	%00000000	; TINY
    785  6e50				  -	      .byte	%00000000	; TINY
    786  6e50				  -
    787  6e50				  -			;byte %00000000 ; TINY
    788  6e50				  -
    789  6e50				  -	      .byte	%00000000	; TINY
    790  6e50				  -	      .byte	%00111000	; TINY
    791  6e50				  -	      .byte	%00001000	; TINY
    792  6e50				  -	      .byte	%00111000	; TINY
    793  6e50				  -	      .byte	%00001000	; TINY
    794  6e50				  -	      .byte	%00111000	; TINY
    795  6e50				  -	      .byte	%00000000	; TINY
    796  6e50				  -	      .byte	%00000000	; TINY
    797  6e50				  -
    798  6e50				  -			;byte %00000000 ; TINY
    799  6e50				  -
    800  6e50				  -	      .byte	%00000000	; TINY
    801  6e50				  -	      .byte	%00001000	; TINY
    802  6e50				  -	      .byte	%00001000	; TINY
    803  6e50				  -	      .byte	%00111000	; TINY
    804  6e50				  -	      .byte	%00101000	; TINY
    805  6e50				  -	      .byte	%00101000	; TINY
    806  6e50				  -	      .byte	%00000000	; TINY
    807  6e50				  -	      .byte	%00000000	; TINY
    808  6e50				  -
    809  6e50				  -			;byte %00000000 ; TINY
    810  6e50				  -
    811  6e50				  -	      .byte	%00000000	; TINY
    812  6e50				  -	      .byte	%00111000	; TINY
    813  6e50				  -	      .byte	%00001000	; TINY
    814  6e50				  -	      .byte	%00111000	; TINY
    815  6e50				  -	      .byte	%00100000	; TINY
    816  6e50				  -	      .byte	%00111000	; TINY
    817  6e50				  -	      .byte	%00000000	; TINY
    818  6e50				  -	      .byte	%00000000	; TINY
    819  6e50				  -
    820  6e50				  -			;byte %00000000 ; TINY
    821  6e50				  -
    822  6e50				  -	      .byte	%00000000	; TINY
    823  6e50				  -	      .byte	%00111000	; TINY
    824  6e50				  -	      .byte	%00101000	; TINY
    825  6e50				  -	      .byte	%00111000	; TINY
    826  6e50				  -	      .byte	%00100000	; TINY
    827  6e50				  -	      .byte	%00111000	; TINY
    828  6e50				  -	      .byte	%00000000	; TINY
    829  6e50				  -	      .byte	%00000000	; TINY
    830  6e50				  -
    831  6e50				  -			;byte %00000000 ; TINY
    832  6e50				  -
    833  6e50				  -	      .byte	%00000000	; TINY
    834  6e50				  -	      .byte	%00001000	; TINY
    835  6e50				  -	      .byte	%00001000	; TINY
    836  6e50				  -	      .byte	%00001000	; TINY
    837  6e50				  -	      .byte	%00001000	; TINY
    838  6e50				  -	      .byte	%00111000	; TINY
    839  6e50				  -	      .byte	%00000000	; TINY
    840  6e50				  -	      .byte	%00000000	; TINY
    841  6e50				  -
    842  6e50				  -			;byte %00000000 ; TINY
    843  6e50				  -
    844  6e50				  -	      .byte	%00000000	; TINY
    845  6e50				  -	      .byte	%00111000	; TINY
    846  6e50				  -	      .byte	%00101000	; TINY
    847  6e50				  -	      .byte	%00111000	; TINY
    848  6e50				  -	      .byte	%00101000	; TINY
    849  6e50				  -	      .byte	%00111000	; TINY
    850  6e50				  -	      .byte	%00000000	; TINY
    851  6e50				  -	      .byte	%00000000	; TINY
    852  6e50				  -
    853  6e50				  -			;byte %00000000 ; TINY
    854  6e50				  -
    855  6e50				  -	      .byte	%00000000	; TINY
    856  6e50				  -	      .byte	%00001000	; TINY
    857  6e50				  -	      .byte	%00001000	; TINY
    858  6e50				  -	      .byte	%00111000	; TINY
    859  6e50				  -	      .byte	%00101000	; TINY
    860  6e50				  -	      .byte	%00111000	; TINY
    861  6e50				  -	      .byte	%00000000	; TINY
    862  6e50				  -	      .byte	%00000000	; TINY
    863  6e50				  -
    864  6e50					      endif		; TINY
    865  6e50
    866  6e50				  -	      if	fontstyle == RETROPUTER
    867  6e50				  -
    868  6e50				  -			;byte %00000000 ; RETROPUTER
    869  6e50				  -
    870  6e50				  -	      .byte	%01111110	; RETROPUTER
    871  6e50				  -	      .byte	%01000110	; RETROPUTER
    872  6e50				  -	      .byte	%01000110	; RETROPUTER
    873  6e50				  -	      .byte	%01000110	; RETROPUTER
    874  6e50				  -	      .byte	%01100010	; RETROPUTER
    875  6e50				  -	      .byte	%01100010	; RETROPUTER
    876  6e50				  -	      .byte	%01100010	; RETROPUTER
    877  6e50				  -	      .byte	%01111110	; RETROPUTER
    878  6e50				  -
    879  6e50				  -			;byte %00000000 ; RETROPUTER
    880  6e50				  -
    881  6e50				  -	      .byte	%00111000	; RETROPUTER
    882  6e50				  -	      .byte	%00111000	; RETROPUTER
    883  6e50				  -	      .byte	%00111000	; RETROPUTER
    884  6e50				  -	      .byte	%00111000	; RETROPUTER
    885  6e50				  -	      .byte	%00011000	; RETROPUTER
    886  6e50				  -	      .byte	%00011000	; RETROPUTER
    887  6e50				  -	      .byte	%00011000	; RETROPUTER
    888  6e50				  -	      .byte	%00011000	; RETROPUTER
    889  6e50				  -
    890  6e50				  -			;byte %00000000 ; RETROPUTER
    891  6e50				  -
    892  6e50				  -	      .byte	%01111110	; RETROPUTER
    893  6e50				  -	      .byte	%01100000	; RETROPUTER
    894  6e50				  -	      .byte	%01100000	; RETROPUTER
    895  6e50				  -	      .byte	%01100000	; RETROPUTER
    896  6e50				  -	      .byte	%00111110	; RETROPUTER
    897  6e50				  -	      .byte	%00000010	; RETROPUTER
    898  6e50				  -	      .byte	%01000010	; RETROPUTER
    899  6e50				  -	      .byte	%01111110	; RETROPUTER
    900  6e50				  -
    901  6e50				  -			;byte %00000000 ; RETROPUTER
    902  6e50				  -
    903  6e50				  -	      .byte	%01111110	; RETROPUTER
    904  6e50				  -	      .byte	%01000110	; RETROPUTER
    905  6e50				  -	      .byte	%00000110	; RETROPUTER
    906  6e50				  -	      .byte	%00000110	; RETROPUTER
    907  6e50				  -	      .byte	%00111110	; RETROPUTER
    908  6e50				  -	      .byte	%00000010	; RETROPUTER
    909  6e50				  -	      .byte	%01000010	; RETROPUTER
    910  6e50				  -	      .byte	%01111110	; RETROPUTER
    911  6e50				  -
    912  6e50				  -			;byte %00000000 ; RETROPUTER
    913  6e50				  -
    914  6e50				  -	      .byte	%00001100	; RETROPUTER
    915  6e50				  -	      .byte	%00001100	; RETROPUTER
    916  6e50				  -	      .byte	%00001100	; RETROPUTER
    917  6e50				  -	      .byte	%01111110	; RETROPUTER
    918  6e50				  -	      .byte	%01000100	; RETROPUTER
    919  6e50				  -	      .byte	%01000100	; RETROPUTER
    920  6e50				  -	      .byte	%01000100	; RETROPUTER
    921  6e50				  -	      .byte	%00000100	; RETROPUTER
    922  6e50				  -
    923  6e50				  -			;byte %00000000 ; RETROPUTER
    924  6e50				  -
    925  6e50				  -	      .byte	%01111110	; RETROPUTER
    926  6e50				  -	      .byte	%01000110	; RETROPUTER
    927  6e50				  -	      .byte	%00000110	; RETROPUTER
    928  6e50				  -	      .byte	%00000110	; RETROPUTER
    929  6e50				  -	      .byte	%01111100	; RETROPUTER
    930  6e50				  -	      .byte	%01000000	; RETROPUTER
    931  6e50				  -	      .byte	%01000000	; RETROPUTER
    932  6e50				  -	      .byte	%01111110	; RETROPUTER
    933  6e50				  -
    934  6e50				  -			;byte %00000000 ; RETROPUTER
    935  6e50				  -
    936  6e50				  -	      .byte	%01111110	; RETROPUTER
    937  6e50				  -	      .byte	%01000110	; RETROPUTER
    938  6e50				  -	      .byte	%01000110	; RETROPUTER
    939  6e50				  -	      .byte	%01000110	; RETROPUTER
    940  6e50				  -	      .byte	%01111100	; RETROPUTER
    941  6e50				  -	      .byte	%01000000	; RETROPUTER
    942  6e50				  -	      .byte	%01000010	; RETROPUTER
    943  6e50				  -	      .byte	%01111110	; RETROPUTER
    944  6e50				  -
    945  6e50				  -			;byte %00000000 ; RETROPUTER
    946  6e50				  -
    947  6e50				  -	      .byte	%00001100	; RETROPUTER
    948  6e50				  -	      .byte	%00001100	; RETROPUTER
    949  6e50				  -	      .byte	%00001100	; RETROPUTER
    950  6e50				  -	      .byte	%00001100	; RETROPUTER
    951  6e50				  -	      .byte	%00000100	; RETROPUTER
    952  6e50				  -	      .byte	%00000010	; RETROPUTER
    953  6e50				  -	      .byte	%01000010	; RETROPUTER
    954  6e50				  -	      .byte	%01111110	; RETROPUTER
    955  6e50				  -
    956  6e50				  -			;byte %00000000 ; RETROPUTER
    957  6e50				  -
    958  6e50				  -	      .byte	%01111110	; RETROPUTER
    959  6e50				  -	      .byte	%01000110	; RETROPUTER
    960  6e50				  -	      .byte	%01000110	; RETROPUTER
    961  6e50				  -	      .byte	%01000110	; RETROPUTER
    962  6e50				  -	      .byte	%01111110	; RETROPUTER
    963  6e50				  -	      .byte	%01000010	; RETROPUTER
    964  6e50				  -	      .byte	%01000010	; RETROPUTER
    965  6e50				  -	      .byte	%01111110	; RETROPUTER
    966  6e50				  -
    967  6e50				  -			;byte %00000000 ; RETROPUTER
    968  6e50				  -
    969  6e50				  -	      .byte	%00000110	; RETROPUTER
    970  6e50				  -	      .byte	%00000110	; RETROPUTER
    971  6e50				  -	      .byte	%00000110	; RETROPUTER
    972  6e50				  -	      .byte	%00000010	; RETROPUTER
    973  6e50				  -	      .byte	%01111110	; RETROPUTER
    974  6e50				  -	      .byte	%01000010	; RETROPUTER
    975  6e50				  -	      .byte	%01000010	; RETROPUTER
    976  6e50				  -	      .byte	%01111110	; RETROPUTER
    977  6e50				  -
    978  6e50					      endif		; RETROPUTER
    979  6e50
    980  6e50				  -	      if	fontstyle == CURVES
    981  6e50				  -
    982  6e50				  -			;byte %00000000 ; CURVES
    983  6e50				  -
    984  6e50				  -	      .byte	%00111100	; CURVES
    985  6e50				  -	      .byte	%01111110	; CURVES
    986  6e50				  -	      .byte	%01100110	; CURVES
    987  6e50				  -	      .byte	%01100110	; CURVES
    988  6e50				  -	      .byte	%01100110	; CURVES
    989  6e50				  -	      .byte	%01100110	; CURVES
    990  6e50				  -	      .byte	%01111110	; CURVES
    991  6e50				  -	      .byte	%00111100	; CURVES
    992  6e50				  -
    993  6e50				  -			;byte %00000000 ; CURVES
    994  6e50				  -
    995  6e50				  -	      .byte	%00011000	; CURVES
    996  6e50				  -	      .byte	%00011000	; CURVES
    997  6e50				  -	      .byte	%00011000	; CURVES
    998  6e50				  -	      .byte	%00011000	; CURVES
    999  6e50				  -	      .byte	%00011000	; CURVES
   1000  6e50				  -	      .byte	%00011000	; CURVES
   1001  6e50				  -	      .byte	%01111000	; CURVES
   1002  6e50				  -	      .byte	%01110000	; CURVES
   1003  6e50				  -
   1004  6e50				  -			;byte %00000000 ; CURVES
   1005  6e50				  -
   1006  6e50				  -	      .byte	%01111110	; CURVES
   1007  6e50				  -	      .byte	%01111110	; CURVES
   1008  6e50				  -	      .byte	%01100000	; CURVES
   1009  6e50				  -	      .byte	%01111100	; CURVES
   1010  6e50				  -	      .byte	%00111110	; CURVES
   1011  6e50				  -	      .byte	%00000110	; CURVES
   1012  6e50				  -	      .byte	%01111110	; CURVES
   1013  6e50				  -	      .byte	%01111100	; CURVES
   1014  6e50				  -
   1015  6e50				  -			;byte %00000000 ; CURVES
   1016  6e50				  -
   1017  6e50				  -	      .byte	%01111100	; CURVES
   1018  6e50				  -	      .byte	%01111110	; CURVES
   1019  6e50				  -	      .byte	%00001110	; CURVES
   1020  6e50				  -	      .byte	%00111100	; CURVES
   1021  6e50				  -	      .byte	%00111100	; CURVES
   1022  6e50				  -	      .byte	%00001110	; CURVES
   1023  6e50				  -	      .byte	%01111110	; CURVES
   1024  6e50				  -	      .byte	%01111100	; CURVES
   1025  6e50				  -
   1026  6e50				  -			;byte %00000000 ; CURVES
   1027  6e50				  -
   1028  6e50				  -	      .byte	%00000110	; CURVES
   1029  6e50				  -	      .byte	%00000110	; CURVES
   1030  6e50				  -	      .byte	%00111110	; CURVES
   1031  6e50				  -	      .byte	%01111110	; CURVES
   1032  6e50				  -	      .byte	%01100110	; CURVES
   1033  6e50				  -	      .byte	%01100110	; CURVES
   1034  6e50				  -	      .byte	%01100110	; CURVES
   1035  6e50				  -	      .byte	%01100110	; CURVES
   1036  6e50				  -
   1037  6e50				  -			;byte %00000000 ; CURVES
   1038  6e50				  -
   1039  6e50				  -	      .byte	%01111100	; CURVES
   1040  6e50				  -	      .byte	%01111110	; CURVES
   1041  6e50				  -	      .byte	%00000110	; CURVES
   1042  6e50				  -	      .byte	%01111110	; CURVES
   1043  6e50				  -	      .byte	%01111100	; CURVES
   1044  6e50				  -	      .byte	%01100000	; CURVES
   1045  6e50				  -	      .byte	%01111110	; CURVES
   1046  6e50				  -	      .byte	%01111110	; CURVES
   1047  6e50				  -
   1048  6e50				  -			;byte %00000000 ; CURVES
   1049  6e50				  -
   1050  6e50				  -	      .byte	%00111100	; CURVES
   1051  6e50				  -	      .byte	%01111110	; CURVES
   1052  6e50				  -	      .byte	%01100110	; CURVES
   1053  6e50				  -	      .byte	%01111110	; CURVES
   1054  6e50				  -	      .byte	%01111100	; CURVES
   1055  6e50				  -	      .byte	%01100000	; CURVES
   1056  6e50				  -	      .byte	%01111110	; CURVES
   1057  6e50				  -	      .byte	%00111110	; CURVES
   1058  6e50				  -
   1059  6e50				  -			;byte %00000000 ; CURVES
   1060  6e50				  -
   1061  6e50				  -	      .byte	%00000110	; CURVES
   1062  6e50				  -	      .byte	%00000110	; CURVES
   1063  6e50				  -	      .byte	%00000110	; CURVES
   1064  6e50				  -	      .byte	%00000110	; CURVES
   1065  6e50				  -	      .byte	%00000110	; CURVES
   1066  6e50				  -	      .byte	%01100110	; CURVES
   1067  6e50				  -	      .byte	%01111110	; CURVES
   1068  6e50				  -	      .byte	%00111100	; CURVES
   1069  6e50				  -
   1070  6e50				  -			;byte %00000000 ; CURVES
   1071  6e50				  -
   1072  6e50				  -	      .byte	%00111100	; CURVES
   1073  6e50				  -	      .byte	%01111110	; CURVES
   1074  6e50				  -	      .byte	%01100110	; CURVES
   1075  6e50				  -	      .byte	%01111110	; CURVES
   1076  6e50				  -	      .byte	%00111100	; CURVES
   1077  6e50				  -	      .byte	%01100110	; CURVES
   1078  6e50				  -	      .byte	%01111110	; CURVES
   1079  6e50				  -	      .byte	%00111100	; CURVES
   1080  6e50				  -
   1081  6e50				  -			;byte %00000000 ; CURVES
   1082  6e50				  -
   1083  6e50				  -	      .byte	%01111100	; CURVES
   1084  6e50				  -	      .byte	%01111110	; CURVES
   1085  6e50				  -	      .byte	%00000110	; CURVES
   1086  6e50				  -	      .byte	%00111110	; CURVES
   1087  6e50				  -	      .byte	%01111110	; CURVES
   1088  6e50				  -	      .byte	%01100110	; CURVES
   1089  6e50				  -	      .byte	%01111110	; CURVES
   1090  6e50				  -	      .byte	%00111100	; CURVES
   1091  6e50				  -
   1092  6e50					      endif		; CURVES
   1093  6e50
   1094  6e50
   1095  6e50				  -	      if	fontstyle == HUSKY
   1096  6e50				  -
   1097  6e50				  -			;byte %00000000 ; HUSKY
   1098  6e50				  -
   1099  6e50				  -	      .byte	%01111100	; HUSKY
   1100  6e50				  -	      .byte	%11111110	; HUSKY
   1101  6e50				  -	      .byte	%11101110	; HUSKY
   1102  6e50				  -	      .byte	%11101110	; HUSKY
   1103  6e50				  -	      .byte	%11101110	; HUSKY
   1104  6e50				  -	      .byte	%11101110	; HUSKY
   1105  6e50				  -	      .byte	%11111110	; HUSKY
   1106  6e50				  -	      .byte	%01111100	; HUSKY
   1107  6e50				  -
   1108  6e50				  -			;byte %00000000 ; HUSKY
   1109  6e50				  -
   1110  6e50				  -	      .byte	%00111000	; HUSKY
   1111  6e50				  -	      .byte	%00111000	; HUSKY
   1112  6e50				  -	      .byte	%00111000	; HUSKY
   1113  6e50				  -	      .byte	%00111000	; HUSKY
   1114  6e50				  -	      .byte	%00111000	; HUSKY
   1115  6e50				  -	      .byte	%00111000	; HUSKY
   1116  6e50				  -	      .byte	%00111000	; HUSKY
   1117  6e50				  -	      .byte	%00111000	; HUSKY
   1118  6e50				  -
   1119  6e50				  -			;byte %00000000 ; HUSKY
   1120  6e50				  -
   1121  6e50				  -	      .byte	%11111110	; HUSKY
   1122  6e50				  -	      .byte	%11111110	; HUSKY
   1123  6e50				  -	      .byte	%11100000	; HUSKY
   1124  6e50				  -	      .byte	%11111100	; HUSKY
   1125  6e50				  -	      .byte	%01111110	; HUSKY
   1126  6e50				  -	      .byte	%00001110	; HUSKY
   1127  6e50				  -	      .byte	%11111110	; HUSKY
   1128  6e50				  -	      .byte	%11111100	; HUSKY
   1129  6e50				  -
   1130  6e50				  -			;byte %00000000 ; HUSKY
   1131  6e50				  -
   1132  6e50				  -	      .byte	%11111100	; HUSKY
   1133  6e50				  -	      .byte	%11111110	; HUSKY
   1134  6e50				  -	      .byte	%00001110	; HUSKY
   1135  6e50				  -	      .byte	%11111100	; HUSKY
   1136  6e50				  -	      .byte	%11111100	; HUSKY
   1137  6e50				  -	      .byte	%00001110	; HUSKY
   1138  6e50				  -	      .byte	%11111110	; HUSKY
   1139  6e50				  -	      .byte	%11111100	; HUSKY
   1140  6e50				  -
   1141  6e50				  -			;byte %00000000 ; HUSKY
   1142  6e50				  -
   1143  6e50				  -	      .byte	%00011100	; HUSKY
   1144  6e50				  -	      .byte	%00011100	; HUSKY
   1145  6e50				  -	      .byte	%11111110	; HUSKY
   1146  6e50				  -	      .byte	%11111110	; HUSKY
   1147  6e50				  -	      .byte	%11011100	; HUSKY
   1148  6e50				  -	      .byte	%11011100	; HUSKY
   1149  6e50				  -	      .byte	%00011100	; HUSKY
   1150  6e50				  -	      .byte	%00011100	; HUSKY
   1151  6e50				  -
   1152  6e50				  -			;byte %00000000 ; HUSKY
   1153  6e50				  -
   1154  6e50				  -	      .byte	%11111100	; HUSKY
   1155  6e50				  -	      .byte	%11111110	; HUSKY
   1156  6e50				  -	      .byte	%00001110	; HUSKY
   1157  6e50				  -	      .byte	%11111110	; HUSKY
   1158  6e50				  -	      .byte	%11111100	; HUSKY
   1159  6e50				  -	      .byte	%11100000	; HUSKY
   1160  6e50				  -	      .byte	%11111110	; HUSKY
   1161  6e50				  -	      .byte	%11111110	; HUSKY
   1162  6e50				  -
   1163  6e50				  -			;byte %00000000 ; HUSKY
   1164  6e50				  -
   1165  6e50				  -	      .byte	%01111100	; HUSKY
   1166  6e50				  -	      .byte	%11111110	; HUSKY
   1167  6e50				  -	      .byte	%11101110	; HUSKY
   1168  6e50				  -	      .byte	%11111110	; HUSKY
   1169  6e50				  -	      .byte	%11111100	; HUSKY
   1170  6e50				  -	      .byte	%11100000	; HUSKY
   1171  6e50				  -	      .byte	%11111110	; HUSKY
   1172  6e50				  -	      .byte	%01111110	; HUSKY
   1173  6e50				  -
   1174  6e50				  -			;byte %00000000 ; HUSKY
   1175  6e50				  -
   1176  6e50				  -	      .byte	%00111000	; HUSKY
   1177  6e50				  -	      .byte	%00111000	; HUSKY
   1178  6e50				  -	      .byte	%00111000	; HUSKY
   1179  6e50				  -	      .byte	%00111000	; HUSKY
   1180  6e50				  -	      .byte	%00011100	; HUSKY
   1181  6e50				  -	      .byte	%00001110	; HUSKY
   1182  6e50				  -	      .byte	%11111110	; HUSKY
   1183  6e50				  -	      .byte	%11111110	; HUSKY
   1184  6e50				  -
   1185  6e50				  -			;byte %00000000 ; HUSKY
   1186  6e50				  -
   1187  6e50				  -	      .byte	%01111100	; HUSKY
   1188  6e50				  -	      .byte	%11111110	; HUSKY
   1189  6e50				  -	      .byte	%11101110	; HUSKY
   1190  6e50				  -	      .byte	%11111110	; HUSKY
   1191  6e50				  -	      .byte	%01111100	; HUSKY
   1192  6e50				  -	      .byte	%11101110	; HUSKY
   1193  6e50				  -	      .byte	%11111110	; HUSKY
   1194  6e50				  -	      .byte	%01111100	; HUSKY
   1195  6e50				  -
   1196  6e50				  -			;byte %00000000 ; HUSKY
   1197  6e50				  -
   1198  6e50				  -	      .byte	%11111100	; HUSKY
   1199  6e50				  -	      .byte	%11111110	; HUSKY
   1200  6e50				  -	      .byte	%00001110	; HUSKY
   1201  6e50				  -	      .byte	%01111110	; HUSKY
   1202  6e50				  -	      .byte	%11111110	; HUSKY
   1203  6e50				  -	      .byte	%11101110	; HUSKY
   1204  6e50				  -	      .byte	%11111110	; HUSKY
   1205  6e50				  -	      .byte	%01111100	; HUSKY
   1206  6e50				  -
   1207  6e50					      endif		; HUSKY
   1208  6e50
   1209  6e50
   1210  6e50				  -	      if	fontstyle == SNAKE
   1211  6e50				  -
   1212  6e50				  -			;byte %00000000 ; SNAKE
   1213  6e50				  -
   1214  6e50				  -	      .byte	%01111110	; SNAKE
   1215  6e50				  -	      .byte	%01000010	; SNAKE
   1216  6e50				  -	      .byte	%01000010	; SNAKE
   1217  6e50				  -	      .byte	%01000010	; SNAKE
   1218  6e50				  -	      .byte	%01000010	; SNAKE
   1219  6e50				  -	      .byte	%01000010	; SNAKE
   1220  6e50				  -	      .byte	%01000010	; SNAKE
   1221  6e50				  -	      .byte	%01111110	; SNAKE
   1222  6e50				  -
   1223  6e50				  -			;byte %00000000 ; SNAKE
   1224  6e50				  -
   1225  6e50				  -	      .byte	%00111000	; SNAKE
   1226  6e50				  -	      .byte	%00101000	; SNAKE
   1227  6e50				  -	      .byte	%00001000	; SNAKE
   1228  6e50				  -	      .byte	%00001000	; SNAKE
   1229  6e50				  -	      .byte	%00001000	; SNAKE
   1230  6e50				  -	      .byte	%00001000	; SNAKE
   1231  6e50				  -	      .byte	%00001000	; SNAKE
   1232  6e50				  -	      .byte	%00111000	; SNAKE
   1233  6e50				  -
   1234  6e50				  -			;byte %00000000 ; SNAKE
   1235  6e50				  -
   1236  6e50				  -	      .byte	%01111110	; SNAKE
   1237  6e50				  -	      .byte	%01000010	; SNAKE
   1238  6e50				  -	      .byte	%01000110	; SNAKE
   1239  6e50				  -	      .byte	%01000000	; SNAKE
   1240  6e50				  -	      .byte	%01111110	; SNAKE
   1241  6e50				  -	      .byte	%00000010	; SNAKE
   1242  6e50				  -	      .byte	%01000010	; SNAKE
   1243  6e50				  -	      .byte	%01111110	; SNAKE
   1244  6e50				  -
   1245  6e50				  -			;byte %00000000 ; SNAKE
   1246  6e50				  -
   1247  6e50				  -	      .byte	%01111110	; SNAKE
   1248  6e50				  -	      .byte	%01000010	; SNAKE
   1249  6e50				  -	      .byte	%01100010	; SNAKE
   1250  6e50				  -	      .byte	%00000010	; SNAKE
   1251  6e50				  -	      .byte	%01111110	; SNAKE
   1252  6e50				  -	      .byte	%00000010	; SNAKE
   1253  6e50				  -	      .byte	%01000010	; SNAKE
   1254  6e50				  -	      .byte	%01111110	; SNAKE
   1255  6e50				  -
   1256  6e50				  -			;byte %00000000 ; SNAKE
   1257  6e50				  -
   1258  6e50				  -	      .byte	%00001110	; SNAKE
   1259  6e50				  -	      .byte	%00001010	; SNAKE
   1260  6e50				  -	      .byte	%00000010	; SNAKE
   1261  6e50				  -	      .byte	%01111110	; SNAKE
   1262  6e50				  -	      .byte	%01000010	; SNAKE
   1263  6e50				  -	      .byte	%01000010	; SNAKE
   1264  6e50				  -	      .byte	%01000010	; SNAKE
   1265  6e50				  -	      .byte	%01100110	; SNAKE
   1266  6e50				  -
   1267  6e50				  -			;byte %00000000 ; SNAKE
   1268  6e50				  -
   1269  6e50				  -	      .byte	%01111110	; SNAKE
   1270  6e50				  -	      .byte	%01000010	; SNAKE
   1271  6e50				  -	      .byte	%01100010	; SNAKE
   1272  6e50				  -	      .byte	%00000010	; SNAKE
   1273  6e50				  -	      .byte	%01111110	; SNAKE
   1274  6e50				  -	      .byte	%01000000	; SNAKE
   1275  6e50				  -	      .byte	%01000010	; SNAKE
   1276  6e50				  -	      .byte	%01111110	; SNAKE
   1277  6e50				  -
   1278  6e50				  -			;byte %00000000 ; SNAKE
   1279  6e50				  -
   1280  6e50				  -	      .byte	%01111110	; SNAKE
   1281  6e50				  -	      .byte	%01000010	; SNAKE
   1282  6e50				  -	      .byte	%01000010	; SNAKE
   1283  6e50				  -	      .byte	%01111110	; SNAKE
   1284  6e50				  -	      .byte	%01000000	; SNAKE
   1285  6e50				  -	      .byte	%01000110	; SNAKE
   1286  6e50				  -	      .byte	%01000010	; SNAKE
   1287  6e50				  -	      .byte	%01111110	; SNAKE
   1288  6e50				  -
   1289  6e50				  -			;byte %00000000 ; SNAKE
   1290  6e50				  -
   1291  6e50				  -	      .byte	%00000110	; SNAKE
   1292  6e50				  -	      .byte	%00000010	; SNAKE
   1293  6e50				  -	      .byte	%00000010	; SNAKE
   1294  6e50				  -	      .byte	%00000010	; SNAKE
   1295  6e50				  -	      .byte	%00000010	; SNAKE
   1296  6e50				  -	      .byte	%01100010	; SNAKE
   1297  6e50				  -	      .byte	%01000010	; SNAKE
   1298  6e50				  -	      .byte	%01111110	; SNAKE
   1299  6e50				  -
   1300  6e50				  -			;byte %00000000 ; SNAKE
   1301  6e50				  -
   1302  6e50				  -	      .byte	%01111110	; SNAKE
   1303  6e50				  -	      .byte	%01000010	; SNAKE
   1304  6e50				  -	      .byte	%01000010	; SNAKE
   1305  6e50				  -	      .byte	%01000010	; SNAKE
   1306  6e50				  -	      .byte	%01111110	; SNAKE
   1307  6e50				  -	      .byte	%01000010	; SNAKE
   1308  6e50				  -	      .byte	%01000010	; SNAKE
   1309  6e50				  -	      .byte	%01111110	; SNAKE
   1310  6e50				  -
   1311  6e50				  -			;byte %00000000 ; SNAKE
   1312  6e50				  -
   1313  6e50				  -	      .byte	%00001110	; SNAKE
   1314  6e50				  -	      .byte	%00001010	; SNAKE
   1315  6e50				  -	      .byte	%00000010	; SNAKE
   1316  6e50				  -	      .byte	%00000010	; SNAKE
   1317  6e50				  -	      .byte	%01111110	; SNAKE
   1318  6e50				  -	      .byte	%01000010	; SNAKE
   1319  6e50				  -	      .byte	%01000010	; SNAKE
   1320  6e50				  -	      .byte	%01111110	; SNAKE
   1321  6e50				  -
   1322  6e50				  -
   1323  6e50					      endif		; SNAKE
   1324  6e50
   1325  6e50				  -	      if	fontstyle == PLOK
   1326  6e50				  -
   1327  6e50				  -			;byte %00000000 ; PLOK
   1328  6e50				  -
   1329  6e50				  -	      .byte	%00000000	; PLOK
   1330  6e50				  -	      .byte	%00111000	; PLOK
   1331  6e50				  -	      .byte	%01100100	; PLOK
   1332  6e50				  -	      .byte	%01100010	; PLOK
   1333  6e50				  -	      .byte	%01100010	; PLOK
   1334  6e50				  -	      .byte	%00110110	; PLOK
   1335  6e50				  -	      .byte	%00011100	; PLOK
   1336  6e50				  -	      .byte	%00000000	; PLOK
   1337  6e50				  -
   1338  6e50				  -			;byte %00000000 ; PLOK
   1339  6e50				  -
   1340  6e50				  -	      .byte	%00000000	; PLOK
   1341  6e50				  -	      .byte	%00010000	; PLOK
   1342  6e50				  -	      .byte	%00011100	; PLOK
   1343  6e50				  -	      .byte	%00011100	; PLOK
   1344  6e50				  -	      .byte	%00011000	; PLOK
   1345  6e50				  -	      .byte	%00111000	; PLOK
   1346  6e50				  -	      .byte	%00011000	; PLOK
   1347  6e50				  -	      .byte	%00000000	; PLOK
   1348  6e50				  -
   1349  6e50				  -			;byte %00000000 ; PLOK
   1350  6e50				  -
   1351  6e50				  -	      .byte	%00000000	; PLOK
   1352  6e50				  -	      .byte	%00001110	; PLOK
   1353  6e50				  -	      .byte	%01111110	; PLOK
   1354  6e50				  -	      .byte	%00011000	; PLOK
   1355  6e50				  -	      .byte	%00001100	; PLOK
   1356  6e50				  -	      .byte	%00000110	; PLOK
   1357  6e50				  -	      .byte	%00111100	; PLOK
   1358  6e50				  -	      .byte	%00000000	; PLOK
   1359  6e50				  -
   1360  6e50				  -			;byte %00000000 ; PLOK
   1361  6e50				  -
   1362  6e50				  -	      .byte	%00000000	; PLOK
   1363  6e50				  -	      .byte	%00111100	; PLOK
   1364  6e50				  -	      .byte	%01101110	; PLOK
   1365  6e50				  -	      .byte	%00001110	; PLOK
   1366  6e50				  -	      .byte	%00011100	; PLOK
   1367  6e50				  -	      .byte	%00000110	; PLOK
   1368  6e50				  -	      .byte	%01111100	; PLOK
   1369  6e50				  -	      .byte	%00000000	; PLOK
   1370  6e50				  -
   1371  6e50				  -			;byte %00000000 ; PLOK
   1372  6e50				  -
   1373  6e50				  -	      .byte	%00000000	; PLOK
   1374  6e50				  -	      .byte	%00011000	; PLOK
   1375  6e50				  -	      .byte	%01111110	; PLOK
   1376  6e50				  -	      .byte	%01101100	; PLOK
   1377  6e50				  -	      .byte	%00100100	; PLOK
   1378  6e50				  -	      .byte	%00110000	; PLOK
   1379  6e50				  -	      .byte	%00110000	; PLOK
   1380  6e50				  -	      .byte	%00000000	; PLOK
   1381  6e50				  -
   1382  6e50				  -			;byte %00000000 ; PLOK
   1383  6e50				  -
   1384  6e50				  -	      .byte	%00000000	; PLOK
   1385  6e50				  -	      .byte	%00111100	; PLOK
   1386  6e50				  -	      .byte	%01001110	; PLOK
   1387  6e50				  -	      .byte	%00011100	; PLOK
   1388  6e50				  -	      .byte	%01100000	; PLOK
   1389  6e50				  -	      .byte	%01111100	; PLOK
   1390  6e50				  -	      .byte	%00011100	; PLOK
   1391  6e50				  -	      .byte	%00000000	; PLOK
   1392  6e50				  -
   1393  6e50				  -			;byte %00000000 ; PLOK
   1394  6e50				  -
   1395  6e50				  -	      .byte	%00000000	; PLOK
   1396  6e50				  -	      .byte	%00111100	; PLOK
   1397  6e50				  -	      .byte	%01000110	; PLOK
   1398  6e50				  -	      .byte	%01101100	; PLOK
   1399  6e50				  -	      .byte	%01110000	; PLOK
   1400  6e50				  -	      .byte	%00111000	; PLOK
   1401  6e50				  -	      .byte	%00010000	; PLOK
   1402  6e50				  -	      .byte	%00000000	; PLOK
   1403  6e50				  -
   1404  6e50				  -			;byte %00000000 ; PLOK
   1405  6e50				  -
   1406  6e50				  -	      .byte	%00000000	; PLOK
   1407  6e50				  -	      .byte	%00111100	; PLOK
   1408  6e50				  -	      .byte	%00011100	; PLOK
   1409  6e50				  -	      .byte	%00001100	; PLOK
   1410  6e50				  -	      .byte	%00000110	; PLOK
   1411  6e50				  -	      .byte	%01111110	; PLOK
   1412  6e50				  -	      .byte	%00110000	; PLOK
   1413  6e50				  -	      .byte	%00000000	; PLOK
   1414  6e50				  -
   1415  6e50				  -			;byte %00000000 ; PLOK
   1416  6e50				  -
   1417  6e50				  -	      .byte	%00000000	; PLOK
   1418  6e50				  -	      .byte	%00111100	; PLOK
   1419  6e50				  -	      .byte	%01001110	; PLOK
   1420  6e50				  -	      .byte	%01101110	; PLOK
   1421  6e50				  -	      .byte	%00111100	; PLOK
   1422  6e50				  -	      .byte	%01100100	; PLOK
   1423  6e50				  -	      .byte	%00111000	; PLOK
   1424  6e50				  -	      .byte	%00000000	; PLOK
   1425  6e50				  -
   1426  6e50				  -			;byte %00000000 ; PLOK
   1427  6e50				  -
   1428  6e50				  -	      .byte	%00000000	; PLOK
   1429  6e50				  -	      .byte	%00011000	; PLOK
   1430  6e50				  -	      .byte	%00001100	; PLOK
   1431  6e50				  -	      .byte	%00011100	; PLOK
   1432  6e50				  -	      .byte	%00100110	; PLOK
   1433  6e50				  -	      .byte	%01001110	; PLOK
   1434  6e50				  -	      .byte	%00111100	; PLOK
   1435  6e50				  -	      .byte	%00000000	; PLOK
   1436  6e50				  -
   1437  6e50					      endif		; PLOK
   1438  6e50
   1439  6e50							; ### any characters that aren't font specific follow...
   1440  6e50
   1441  6e50				  -	      ifconst	fontcharSPACE
   1442  6e50				  -			;byte %00000000 ; SYMBOLS
   1443  6e50				  -
   1444  6e50				  -	      .byte	%00000000	; SYMBOLS
   1445  6e50				  -	      .byte	%00000000	; SYMBOLS
   1446  6e50				  -	      .byte	%00000000	; SYMBOLS
   1447  6e50				  -	      .byte	%00000000	; SYMBOLS
   1448  6e50				  -	      .byte	%00000000	; SYMBOLS
   1449  6e50				  -	      .byte	%00000000	; SYMBOLS
   1450  6e50				  -	      .byte	%00000000	; SYMBOLS
   1451  6e50				  -	      .byte	%00000000	; SYMBOLS
   1452  6e50				  -
   1453  6e50				  -			;byte %00000000 ; SYMBOLS
   1454  6e50					      endif		; fontcharSPACE
   1455  6e50
   1456  6e50				  -	      ifconst	fontcharDOLLAR
   1457  6e50				  -			;byte %00000000 ; SYMBOLS
   1458  6e50				  -
   1459  6e50				  -	      .byte	%00000000	; SYMBOLS
   1460  6e50				  -	      .byte	%00010000	; SYMBOLS
   1461  6e50				  -	      .byte	%01111100	; SYMBOLS
   1462  6e50				  -	      .byte	%00010010	; SYMBOLS
   1463  6e50				  -	      .byte	%01111100	; SYMBOLS
   1464  6e50				  -	      .byte	%10010000	; SYMBOLS
   1465  6e50				  -	      .byte	%01111100	; SYMBOLS
   1466  6e50				  -	      .byte	%00010000	; SYMBOLS
   1467  6e50				  -
   1468  6e50				  -			;byte %00000000 ; SYMBOLS
   1469  6e50				  -
   1470  6e50					      endif		; fontcharDOLLAR
   1471  6e50
   1472  6e50				  -	      ifconst	fontcharPOUND
   1473  6e50				  -			;byte %00000000 ; SYMBOLS
   1474  6e50				  -
   1475  6e50				  -	      .byte	%01111110	; SYMBOLS
   1476  6e50				  -	      .byte	%01000000	; SYMBOLS
   1477  6e50				  -	      .byte	%00100000	; SYMBOLS
   1478  6e50				  -	      .byte	%00100000	; SYMBOLS
   1479  6e50				  -	      .byte	%01111000	; SYMBOLS
   1480  6e50				  -	      .byte	%00100000	; SYMBOLS
   1481  6e50				  -	      .byte	%00100010	; SYMBOLS
   1482  6e50				  -	      .byte	%00011100	; SYMBOLS
   1483  6e50				  -
   1484  6e50				  -			;byte %00000000 ; SYMBOLS
   1485  6e50				  -
   1486  6e50					      endif		; fontcharPOUND
   1487  6e50
   1488  6e50
   1489  6e50				  -	      ifconst	fontcharMRHAPPY
   1490  6e50				  -			;byte %00000000 ; SYMBOLS
   1491  6e50				  -
   1492  6e50				  -	      .byte	%00111100	; SYMBOLS
   1493  6e50				  -	      .byte	%01100110	; SYMBOLS
   1494  6e50				  -	      .byte	%01011010	; SYMBOLS
   1495  6e50				  -	      .byte	%01111110	; SYMBOLS
   1496  6e50				  -	      .byte	%01111110	; SYMBOLS
   1497  6e50				  -	      .byte	%01011010	; SYMBOLS
   1498  6e50				  -	      .byte	%01111110	; SYMBOLS
   1499  6e50				  -	      .byte	%00111100	; SYMBOLS
   1500  6e50				  -
   1501  6e50				  -			;byte %00000000 ; SYMBOLS
   1502  6e50				  -
   1503  6e50					      endif		; fontcharMRHAPPY
   1504  6e50
   1505  6e50				  -	      ifconst	fontcharMRSAD
   1506  6e50				  -			;byte %00000000 ; SYMBOLS
   1507  6e50				  -
   1508  6e50				  -	      .byte	%00111100	; SYMBOLS
   1509  6e50				  -	      .byte	%01011010	; SYMBOLS
   1510  6e50				  -	      .byte	%01100110	; SYMBOLS
   1511  6e50				  -	      .byte	%01111110	; SYMBOLS
   1512  6e50				  -	      .byte	%01111110	; SYMBOLS
   1513  6e50				  -	      .byte	%01011010	; SYMBOLS
   1514  6e50				  -	      .byte	%01111110	; SYMBOLS
   1515  6e50				  -	      .byte	%00111100	; SYMBOLS
   1516  6e50				  -
   1517  6e50				  -			;byte %00000000 ; SYMBOLS
   1518  6e50				  -
   1519  6e50					      endif		; fontcharMRSAD
   1520  6e50
   1521  6e50
   1522  6e50				  -	      ifconst	fontcharCOPYRIGHT
   1523  6e50				  -			;byte %00000000 ; SYMBOLS
   1524  6e50				  -
   1525  6e50				  -	      .byte	%00000000	; SYMBOLS
   1526  6e50				  -	      .byte	%00111000	; SYMBOLS
   1527  6e50				  -	      .byte	%01000100	; SYMBOLS
   1528  6e50				  -	      .byte	%10111010	; SYMBOLS
   1529  6e50				  -	      .byte	%10100010	; SYMBOLS
   1530  6e50				  -	      .byte	%10111010	; SYMBOLS
   1531  6e50				  -	      .byte	%01000100	; SYMBOLS
   1532  6e50				  -	      .byte	%00111000	; SYMBOLS
   1533  6e50				  -
   1534  6e50				  -			;byte %00000000 ; SYMBOLS
   1535  6e50				  -
   1536  6e50					      endif		; fontcharCOPYRIGHT
   1537  6e50
   1538  6e50
   1539  6e50				  -	      ifconst	fontcharFUJI
   1540  6e50				  -
   1541  6e50				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   1542  6e50				  -
   1543  6e50				  -	      .byte	%01110000	; SYMBOLS
   1544  6e50				  -	      .byte	%01111001	; SYMBOLS
   1545  6e50				  -	      .byte	%00011101	; SYMBOLS
   1546  6e50				  -	      .byte	%00001101	; SYMBOLS
   1547  6e50				  -	      .byte	%00001101	; SYMBOLS
   1548  6e50				  -	      .byte	%00001101	; SYMBOLS
   1549  6e50				  -	      .byte	%00001101	; SYMBOLS
   1550  6e50				  -	      .byte	%00000000	; SYMBOLS
   1551  6e50				  -
   1552  6e50				  -			;byte %00000000 ; SYMBOLS
   1553  6e50				  -
   1554  6e50				  -	      .byte	%00001110	; SYMBOLS
   1555  6e50				  -	      .byte	%10011110	; SYMBOLS
   1556  6e50				  -	      .byte	%10111000	; SYMBOLS
   1557  6e50				  -	      .byte	%10110000	; SYMBOLS
   1558  6e50				  -	      .byte	%10110000	; SYMBOLS
   1559  6e50				  -	      .byte	%10110000	; SYMBOLS
   1560  6e50				  -	      .byte	%10110000	; SYMBOLS
   1561  6e50				  -	      .byte	%00000000	; SYMBOLS
   1562  6e50				  -
   1563  6e50				  -			;byte %00000000 ; SYMBOLS
   1564  6e50				  -
   1565  6e50					      endif		; fontcharFUJI
   1566  6e50
   1567  6e50
   1568  6e50				  -	      ifconst	fontcharHEART
   1569  6e50				  -			;byte %00000000 ; SYMBOLS
   1570  6e50				  -
   1571  6e50				  -	      .byte	%00010000	; SYMBOLS
   1572  6e50				  -	      .byte	%00111000	; SYMBOLS
   1573  6e50				  -	      .byte	%01111100	; SYMBOLS
   1574  6e50				  -	      .byte	%01111100	; SYMBOLS
   1575  6e50				  -	      .byte	%11111110	; SYMBOLS
   1576  6e50				  -	      .byte	%11111110	; SYMBOLS
   1577  6e50				  -	      .byte	%11101110	; SYMBOLS
   1578  6e50				  -	      .byte	%01000100	; SYMBOLS
   1579  6e50				  -
   1580  6e50				  -			;byte %00000000 ; SYMBOLS
   1581  6e50				  -
   1582  6e50					      endif		; fontcharHEART
   1583  6e50
   1584  6e50				  -	      ifconst	fontcharDIAMOND
   1585  6e50				  -			;byte %00000000 ; SYMBOLS
   1586  6e50				  -
   1587  6e50				  -	      .byte	%00010000	; SYMBOLS
   1588  6e50				  -	      .byte	%00111000	; SYMBOLS
   1589  6e50				  -	      .byte	%01111100	; SYMBOLS
   1590  6e50				  -	      .byte	%11111110	; SYMBOLS
   1591  6e50				  -	      .byte	%11111110	; SYMBOLS
   1592  6e50				  -	      .byte	%01111100	; SYMBOLS
   1593  6e50				  -	      .byte	%00111000	; SYMBOLS
   1594  6e50				  -	      .byte	%00010000	; SYMBOLS
   1595  6e50				  -
   1596  6e50				  -			;byte %00000000 ; SYMBOLS
   1597  6e50				  -
   1598  6e50					      endif		; fontcharDIAMOND
   1599  6e50
   1600  6e50				  -	      ifconst	fontcharSPADE
   1601  6e50				  -			;byte %00000000 ; SYMBOLS
   1602  6e50				  -
   1603  6e50				  -	      .byte	%00111000	; SYMBOLS
   1604  6e50				  -	      .byte	%00010000	; SYMBOLS
   1605  6e50				  -	      .byte	%01010100	; SYMBOLS
   1606  6e50				  -	      .byte	%11111110	; SYMBOLS
   1607  6e50				  -	      .byte	%11111110	; SYMBOLS
   1608  6e50				  -	      .byte	%01111100	; SYMBOLS
   1609  6e50				  -	      .byte	%00111000	; SYMBOLS
   1610  6e50				  -	      .byte	%00010000	; SYMBOLS
   1611  6e50				  -
   1612  6e50				  -			;byte %00000000 ; SYMBOLS
   1613  6e50				  -
   1614  6e50					      endif		; fontcharSPADE
   1615  6e50
   1616  6e50				  -	      ifconst	fontcharCLUB
   1617  6e50				  -			;byte %00000000 ; SYMBOLS
   1618  6e50				  -
   1619  6e50				  -	      .byte	%00111000	; SYMBOLS
   1620  6e50				  -	      .byte	%00010000	; SYMBOLS
   1621  6e50				  -	      .byte	%11010110	; SYMBOLS
   1622  6e50				  -	      .byte	%11111110	; SYMBOLS
   1623  6e50				  -	      .byte	%11010110	; SYMBOLS
   1624  6e50				  -	      .byte	%00111000	; SYMBOLS
   1625  6e50				  -	      .byte	%00111000	; SYMBOLS
   1626  6e50				  -	      .byte	%00000000	; SYMBOLS
   1627  6e50				  -
   1628  6e50				  -			;byte %00000000 ; SYMBOLS
   1629  6e50				  -
   1630  6e50					      endif		; fontcharCLUB
   1631  6e50
   1632  6e50
   1633  6e50				  -	      ifconst	fontcharCOLON
   1634  6e50				  -			;byte %00000000 ; SYMBOLS
   1635  6e50				  -
   1636  6e50				  -	      .byte	%00000000	; SYMBOLS
   1637  6e50				  -	      .byte	%00011000	; SYMBOLS
   1638  6e50				  -	      .byte	%00011000	; SYMBOLS
   1639  6e50				  -	      .byte	%00000000	; SYMBOLS
   1640  6e50				  -	      .byte	%00000000	; SYMBOLS
   1641  6e50				  -	      .byte	%00011000	; SYMBOLS
   1642  6e50				  -	      .byte	%00011000	; SYMBOLS
   1643  6e50				  -	      .byte	%00000000	; SYMBOLS
   1644  6e50				  -
   1645  6e50				  -			;byte %00000000 ; SYMBOLS
   1646  6e50				  -
   1647  6e50					      endif		; fontcharCOLON
   1648  6e50
   1649  6e50
   1650  6e50				  -	      ifconst	fontcharBLOCK
   1651  6e50				  -
   1652  6e50				  -			;byte %00000000 ; SYMBOLS
   1653  6e50				  -
   1654  6e50				  -	      .byte	%11111111	; SYMBOLS
   1655  6e50				  -	      .byte	%11111111	; SYMBOLS
   1656  6e50				  -	      .byte	%11111111	; SYMBOLS
   1657  6e50				  -	      .byte	%11111111	; SYMBOLS
   1658  6e50				  -	      .byte	%11111111	; SYMBOLS
   1659  6e50				  -	      .byte	%11111111	; SYMBOLS
   1660  6e50				  -	      .byte	%11111111	; SYMBOLS
   1661  6e50				  -	      .byte	%11111111	; SYMBOLS
   1662  6e50				  -
   1663  6e50				  -			;byte %00000000 ; SYMBOLS
   1664  6e50				  -
   1665  6e50					      endif		; fontcharBLOCK
   1666  6e50
   1667  6e50				  -	      ifconst	fontcharUNDERLINE
   1668  6e50				  -
   1669  6e50				  -			;byte %00000000 ; SYMBOLS
   1670  6e50				  -
   1671  6e50				  -	      .byte	%11111111	; SYMBOLS
   1672  6e50				  -	      .byte	%00000000	; SYMBOLS
   1673  6e50				  -	      .byte	%00000000	; SYMBOLS
   1674  6e50				  -	      .byte	%00000000	; SYMBOLS
   1675  6e50				  -	      .byte	%00000000	; SYMBOLS
   1676  6e50				  -	      .byte	%00000000	; SYMBOLS
   1677  6e50				  -	      .byte	%00000000	; SYMBOLS
   1678  6e50				  -	      .byte	%00000000	; SYMBOLS
   1679  6e50				  -
   1680  6e50				  -			;byte %00000000 ; SYMBOLS
   1681  6e50				  -
   1682  6e50					      endif		; fontcharUNDERLINE
   1683  6e50
   1684  6e50				  -	      ifconst	fontcharARISIDE
   1685  6e50				  -			;byte %00000000 ; SYMBOLS
   1686  6e50				  -
   1687  6e50				  -	      .byte	%00000000	; SYMBOLS
   1688  6e50				  -	      .byte	%00101010	; SYMBOLS
   1689  6e50				  -	      .byte	%00101010	; SYMBOLS
   1690  6e50				  -	      .byte	%00101100	; SYMBOLS
   1691  6e50				  -	      .byte	%01111111	; SYMBOLS
   1692  6e50				  -	      .byte	%00110111	; SYMBOLS
   1693  6e50				  -	      .byte	%00000010	; SYMBOLS
   1694  6e50				  -	      .byte	%00000001	; SYMBOLS
   1695  6e50				  -
   1696  6e50				  -			;byte %00000000 ; SYMBOLS
   1697  6e50				  -
   1698  6e50					      endif		; fontcharARISIDE
   1699  6e50
   1700  6e50				  -	      ifconst	fontcharARIFACE
   1701  6e50				  -			;byte %00000000 ; SYMBOLS
   1702  6e50				  -
   1703  6e50				  -	      .byte	%00001000	; SYMBOLS
   1704  6e50				  -	      .byte	%00011100	; SYMBOLS
   1705  6e50				  -	      .byte	%00111110	; SYMBOLS
   1706  6e50				  -	      .byte	%00101010	; SYMBOLS
   1707  6e50				  -	      .byte	%00011100	; SYMBOLS
   1708  6e50				  -	      .byte	%01010100	; SYMBOLS
   1709  6e50				  -	      .byte	%00100100	; SYMBOLS
   1710  6e50				  -	      .byte	%00000010	; SYMBOLS
   1711  6e50				  -
   1712  6e50				  -			;byte %00000000 ; SYMBOLS
   1713  6e50				  -
   1714  6e50				  -
   1715  6e50					      endif		; fontcharARIRACE
   1716  6e50
------- FILE titlescreen/asm/titlescreen.asm
    303  6e50					      endif
    304  6e50
    305  6e50					      ifconst	mk_gameselect_on
------- FILE titlescreen/gameselect_image.asm LEVEL 3 PASS 3
      0  6e50					      include	"titlescreen/gameselect_image.asm"
      1  6e50				  -	      ifnconst	bmp_gameselect_color
      2  6e50				  -bmp_gameselect_color
      3  6e50					      endif
      4  6e50		       0f		      .byte.b	$0f
      5  6e51
      6  6e51				  -	      if	>. != >[.+5]
      7  6e51				  -	      align	256
      8  6e51					      endif
      9  6e51				   bmp_gameselect_CHAR0
     10  6e51
     11  6e51		       ee		      .byte.b	%11101110	;
     12  6e52		       88		      .byte.b	%10001000	;
     13  6e53		       8c		      .byte.b	%10001100	;
     14  6e54		       88		      .byte.b	%10001000	;
     15  6e55		       8e		      .byte.b	%10001110	;
     16  6e56
     17  6e56				  -	      if	>. != >[.+5]
     18  6e56				  -	      align	256
     19  6e56					      endif
     20  6e56				   bmp_gameselect_CHAR1
     21  6e56
     22  6e56		       4e		      .byte.b	%01001110	;
     23  6e57		       48		      .byte.b	%01001000	;
     24  6e58		       ac		      .byte.b	%10101100	;
     25  6e59		       a8		      .byte.b	%10101000	;
     26  6e5a		       ae		      .byte.b	%10101110	;
     27  6e5b
     28  6e5b				  -	      if	>. != >[.+5]
     29  6e5b				  -	      align	256
     30  6e5b					      endif
     31  6e5b				   bmp_gameselect_CHAR2
     32  6e5b		       e0		      .byte.b	%11100000	;
     33  6e5c		       80		      .byte.b	%10000000	;
     34  6e5d		       80		      .byte.b	%10000000	;
     35  6e5e		       80		      .byte.b	%10000000	;
     36  6e5f		       80		      .byte.b	%10000000	;
     37  6e60
     38  6e60				  -	      if	>. != >[.+5]
     39  6e60				  -	      align	256
     40  6e60					      endif
     41  6e60				   bmp_gameselect_CHAR3
     42  6e60		       00		      .byte.b	%00000000
     43  6e61		       00		      .byte.b	%00000000
     44  6e62		       00		      .byte.b	%00000000
     45  6e63		       00		      .byte.b	%00000000
     46  6e64		       00		      .byte.b	%00000000
     47  6e65
     48  6e65				  -	      if	>. != >[.+80]
     49  6e65				  -	      align	256
     50  6e65					      endif
     51  6e65
     52  6e65
     53  6e65
     54  6e65				  -	      if	>. != >[.+80]
     55  6e65				  -	      align	256
     56  6e65					      endif
     57  6e65
     58  6e65				   font_gameselect_img
     59  6e65		       3c		      .byte.b	%00111100
     60  6e66		       66		      .byte.b	%01100110
     61  6e67		       66		      .byte.b	%01100110
     62  6e68		       66		      .byte.b	%01100110
     63  6e69		       3c		      .byte.b	%00111100
     64  6e6a
     65  6e6a		       3c		      .byte.b	%00111100
     66  6e6b		       18		      .byte.b	%00011000
     67  6e6c		       18		      .byte.b	%00011000
     68  6e6d		       18		      .byte.b	%00011000
     69  6e6e		       38		      .byte.b	%00111000
     70  6e6f
     71  6e6f		       7e		      .byte.b	%01111110
     72  6e70		       60		      .byte.b	%01100000
     73  6e71		       3c		      .byte.b	%00111100
     74  6e72		       06		      .byte.b	%00000110
     75  6e73		       7c		      .byte.b	%01111100
     76  6e74
     77  6e74		       7c		      .byte.b	%01111100
     78  6e75		       06		      .byte.b	%00000110
     79  6e76		       1c		      .byte.b	%00011100
     80  6e77		       06		      .byte.b	%00000110
     81  6e78		       7c		      .byte.b	%01111100
     82  6e79
     83  6e79		       06		      .byte.b	%00000110
     84  6e7a		       06		      .byte.b	%00000110
     85  6e7b		       7e		      .byte.b	%01111110
     86  6e7c		       66		      .byte.b	%01100110
     87  6e7d		       66		      .byte.b	%01100110
     88  6e7e
     89  6e7e		       7c		      .byte.b	%01111100
     90  6e7f		       06		      .byte.b	%00000110
     91  6e80		       7c		      .byte.b	%01111100
     92  6e81		       60		      .byte.b	%01100000
     93  6e82		       7e		      .byte.b	%01111110
     94  6e83
     95  6e83		       3c		      .byte.b	%00111100
     96  6e84		       66		      .byte.b	%01100110
     97  6e85		       7c		      .byte.b	%01111100
     98  6e86		       60		      .byte.b	%01100000
     99  6e87		       3c		      .byte.b	%00111100
    100  6e88
    101  6e88		       18		      .byte.b	%00011000
    102  6e89		       18		      .byte.b	%00011000
    103  6e8a		       0c		      .byte.b	%00001100
    104  6e8b		       06		      .byte.b	%00000110
    105  6e8c		       7e		      .byte.b	%01111110
    106  6e8d
    107  6e8d		       3c		      .byte.b	%00111100
    108  6e8e		       66		      .byte.b	%01100110
    109  6e8f		       3c		      .byte.b	%00111100
    110  6e90		       66		      .byte.b	%01100110
    111  6e91		       3c		      .byte.b	%00111100
    112  6e92
    113  6e92		       3c		      .byte.b	%00111100
    114  6e93		       06		      .byte.b	%00000110
    115  6e94		       3e		      .byte.b	%00111110
    116  6e95		       66		      .byte.b	%01100110
    117  6e96		       3c		      .byte.b	%00111100
    118  6e97
    119  6e97				  -	      ifnconst	gamenumber
    120  6e97				  -gamenumber
    121  6e97					      endif
    122  6e97		       00		      .byte.b	0
    123  6e98
------- FILE titlescreen/asm/titlescreen.asm
    307  6e98					      endif
    308  6e98
    309  6e98				  -	      ifconst	mk_player_on
    310  6e98				  -	      include	"titlescreen/asm/player_kernel.asm"
    311  6e98					      endif		;mk_player_on
    312  6e98
    313  6e98
------- FILE c:\Users\roger\OneDrive\Documents\Atari\BrawdyBAS\brawdy.bas.asm
   8047  6e98
   8048  6e98				   .L0637		;  return
   8049  6e98
   8050  6e98		       ba		      tsx
   8051  6e99		       b5 02		      lda	2,x	; check return address
   8052  6e9b		       49 be		      eor	#(>*)	; vs. current PCH
   8053  6e9d		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   8054  6e9f		       f0 03		      beq	*+5	; if equal, do normal return
   8055  6ea1		       4c e0 df 	      JMP	BS_return
   8056  6ea4		       60		      RTS
   8057  6ea5				   .
   8058  6ea5							; 
   8059  6ea5
   8060  6ea5				   .
   8061  6ea5							; 
   8062  6ea5
   8063  6ea5				   .
   8064  6ea5							; 
   8065  6ea5
   8066  6ea5					      if	ECHO6
      303 bytes of ROM space left in bank 6
   8067  6ea5					      echo	"    ",[(start_bank6 - *)]d , "bytes of ROM space left in bank 6")
   8068  6ea5					      endif
   8069  6ea5		       00 01	   ECHO6      =	1
   8070  6fd4					      ORG	$6FF4-bscode_length
   8071  6fd4					      RORG	$BFF4-bscode_length
   8072  6fd4		       a2 ff	   start_bank6 ldx	#$ff
   8073  6fd6					      ifconst	FASTFETCH	; using DPC+
   8074  6fd6		       8e 58 10 	      stx	FASTFETCH
   8075  6fd9					      endif
   8076  6fd9		       9a		      txs
   8077  6fda				  -	      if	bankswitch == 64
   8078  6fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   8079  6fda					      else
   8080  6fda		       a9 18		      lda	#>(start-1)
   8081  6fdc					      endif
   8082  6fdc		       48		      pha
   8083  6fdd		       a9 e3		      lda	#<(start-1)
   8084  6fdf		       48		      pha
   8085  6fe0		       48		      pha
   8086  6fe1		       8a		      txa
   8087  6fe2		       48		      pha
   8088  6fe3		       ba		      tsx
   8089  6fe4					      if	bankswitch != 64
   8090  6fe4		       b5 04		      lda	4,x	; get high byte of return address
   8091  6fe6		       2a		      rol
   8092  6fe7		       2a		      rol
   8093  6fe8		       2a		      rol
   8094  6fe9		       2a		      rol
   8095  6fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   8096  6fec		       aa		      tax
   8097  6fed		       e8		      inx
   8098  6fee				  -	      else
   8099  6fee				  -	      lda	4,x	; get high byte of return address
   8100  6fee				  -	      tay
   8101  6fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   8102  6fee				  -	      sta	4,x
   8103  6fee				  -	      tya
   8104  6fee				  -	      lsr
   8105  6fee				  -	      lsr
   8106  6fee				  -	      lsr
   8107  6fee				  -	      lsr
   8108  6fee				  -	      tax
   8109  6fee				  -	      inx
   8110  6fee					      endif
   8111  6fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   8112  6ff1		       68		      pla
   8113  6ff2		       aa		      tax
   8114  6ff3		       68		      pla
   8115  6ff4		       60		      rts
   8116  6ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   8117  6ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   8118  6ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   8119  6ff5					      endif
   8120  6ffc					      ORG	$6FFC
   8121  6ffc					      RORG	$BFFC
   8122  6ffc		       d4 bf		      .word.w	(start_bank6 & $ffff)
   8123  6ffe		       d4 bf		      .word.w	(start_bank6 & $ffff)
   8124  7000					      ORG	$7000
   8125  7000					      RORG	$D000
   8126  7000					      repeat	129
   8127  7000		       00		      .byte.b	0
   8126  7000					      repend
   8127  7001		       00		      .byte.b	0
   8126  7001					      repend
   8127  7002		       00		      .byte.b	0
   8126  7002					      repend
   8127  7003		       00		      .byte.b	0
   8126  7003					      repend
   8127  7004		       00		      .byte.b	0
   8126  7004					      repend
   8127  7005		       00		      .byte.b	0
   8126  7005					      repend
   8127  7006		       00		      .byte.b	0
   8126  7006					      repend
   8127  7007		       00		      .byte.b	0
   8126  7007					      repend
   8127  7008		       00		      .byte.b	0
   8126  7008					      repend
   8127  7009		       00		      .byte.b	0
   8126  7009					      repend
   8127  700a		       00		      .byte.b	0
   8126  700a					      repend
   8127  700b		       00		      .byte.b	0
   8126  700b					      repend
   8127  700c		       00		      .byte.b	0
   8126  700c					      repend
   8127  700d		       00		      .byte.b	0
   8126  700d					      repend
   8127  700e		       00		      .byte.b	0
   8126  700e					      repend
   8127  700f		       00		      .byte.b	0
   8126  700f					      repend
   8127  7010		       00		      .byte.b	0
   8126  7010					      repend
   8127  7011		       00		      .byte.b	0
   8126  7011					      repend
   8127  7012		       00		      .byte.b	0
   8126  7012					      repend
   8127  7013		       00		      .byte.b	0
   8126  7013					      repend
   8127  7014		       00		      .byte.b	0
   8126  7014					      repend
   8127  7015		       00		      .byte.b	0
   8126  7015					      repend
   8127  7016		       00		      .byte.b	0
   8126  7016					      repend
   8127  7017		       00		      .byte.b	0
   8126  7017					      repend
   8127  7018		       00		      .byte.b	0
   8126  7018					      repend
   8127  7019		       00		      .byte.b	0
   8126  7019					      repend
   8127  701a		       00		      .byte.b	0
   8126  701a					      repend
   8127  701b		       00		      .byte.b	0
   8126  701b					      repend
   8127  701c		       00		      .byte.b	0
   8126  701c					      repend
   8127  701d		       00		      .byte.b	0
   8126  701d					      repend
   8127  701e		       00		      .byte.b	0
   8126  701e					      repend
   8127  701f		       00		      .byte.b	0
   8126  701f					      repend
   8127  7020		       00		      .byte.b	0
   8126  7020					      repend
   8127  7021		       00		      .byte.b	0
   8126  7021					      repend
   8127  7022		       00		      .byte.b	0
   8126  7022					      repend
   8127  7023		       00		      .byte.b	0
   8126  7023					      repend
   8127  7024		       00		      .byte.b	0
   8126  7024					      repend
   8127  7025		       00		      .byte.b	0
   8126  7025					      repend
   8127  7026		       00		      .byte.b	0
   8126  7026					      repend
   8127  7027		       00		      .byte.b	0
   8126  7027					      repend
   8127  7028		       00		      .byte.b	0
   8126  7028					      repend
   8127  7029		       00		      .byte.b	0
   8126  7029					      repend
   8127  702a		       00		      .byte.b	0
   8126  702a					      repend
   8127  702b		       00		      .byte.b	0
   8126  702b					      repend
   8127  702c		       00		      .byte.b	0
   8126  702c					      repend
   8127  702d		       00		      .byte.b	0
   8126  702d					      repend
   8127  702e		       00		      .byte.b	0
   8126  702e					      repend
   8127  702f		       00		      .byte.b	0
   8126  702f					      repend
   8127  7030		       00		      .byte.b	0
   8126  7030					      repend
   8127  7031		       00		      .byte.b	0
   8126  7031					      repend
   8127  7032		       00		      .byte.b	0
   8126  7032					      repend
   8127  7033		       00		      .byte.b	0
   8126  7033					      repend
   8127  7034		       00		      .byte.b	0
   8126  7034					      repend
   8127  7035		       00		      .byte.b	0
   8126  7035					      repend
   8127  7036		       00		      .byte.b	0
   8126  7036					      repend
   8127  7037		       00		      .byte.b	0
   8126  7037					      repend
   8127  7038		       00		      .byte.b	0
   8126  7038					      repend
   8127  7039		       00		      .byte.b	0
   8126  7039					      repend
   8127  703a		       00		      .byte.b	0
   8126  703a					      repend
   8127  703b		       00		      .byte.b	0
   8126  703b					      repend
   8127  703c		       00		      .byte.b	0
   8126  703c					      repend
   8127  703d		       00		      .byte.b	0
   8126  703d					      repend
   8127  703e		       00		      .byte.b	0
   8126  703e					      repend
   8127  703f		       00		      .byte.b	0
   8126  703f					      repend
   8127  7040		       00		      .byte.b	0
   8126  7040					      repend
   8127  7041		       00		      .byte.b	0
   8126  7041					      repend
   8127  7042		       00		      .byte.b	0
   8126  7042					      repend
   8127  7043		       00		      .byte.b	0
   8126  7043					      repend
   8127  7044		       00		      .byte.b	0
   8126  7044					      repend
   8127  7045		       00		      .byte.b	0
   8126  7045					      repend
   8127  7046		       00		      .byte.b	0
   8126  7046					      repend
   8127  7047		       00		      .byte.b	0
   8126  7047					      repend
   8127  7048		       00		      .byte.b	0
   8126  7048					      repend
   8127  7049		       00		      .byte.b	0
   8126  7049					      repend
   8127  704a		       00		      .byte.b	0
   8126  704a					      repend
   8127  704b		       00		      .byte.b	0
   8126  704b					      repend
   8127  704c		       00		      .byte.b	0
   8126  704c					      repend
   8127  704d		       00		      .byte.b	0
   8126  704d					      repend
   8127  704e		       00		      .byte.b	0
   8126  704e					      repend
   8127  704f		       00		      .byte.b	0
   8126  704f					      repend
   8127  7050		       00		      .byte.b	0
   8126  7050					      repend
   8127  7051		       00		      .byte.b	0
   8126  7051					      repend
   8127  7052		       00		      .byte.b	0
   8126  7052					      repend
   8127  7053		       00		      .byte.b	0
   8126  7053					      repend
   8127  7054		       00		      .byte.b	0
   8126  7054					      repend
   8127  7055		       00		      .byte.b	0
   8126  7055					      repend
   8127  7056		       00		      .byte.b	0
   8126  7056					      repend
   8127  7057		       00		      .byte.b	0
   8126  7057					      repend
   8127  7058		       00		      .byte.b	0
   8126  7058					      repend
   8127  7059		       00		      .byte.b	0
   8126  7059					      repend
   8127  705a		       00		      .byte.b	0
   8126  705a					      repend
   8127  705b		       00		      .byte.b	0
   8126  705b					      repend
   8127  705c		       00		      .byte.b	0
   8126  705c					      repend
   8127  705d		       00		      .byte.b	0
   8126  705d					      repend
   8127  705e		       00		      .byte.b	0
   8126  705e					      repend
   8127  705f		       00		      .byte.b	0
   8126  705f					      repend
   8127  7060		       00		      .byte.b	0
   8126  7060					      repend
   8127  7061		       00		      .byte.b	0
   8126  7061					      repend
   8127  7062		       00		      .byte.b	0
   8126  7062					      repend
   8127  7063		       00		      .byte.b	0
   8126  7063					      repend
   8127  7064		       00		      .byte.b	0
   8126  7064					      repend
   8127  7065		       00		      .byte.b	0
   8126  7065					      repend
   8127  7066		       00		      .byte.b	0
   8126  7066					      repend
   8127  7067		       00		      .byte.b	0
   8126  7067					      repend
   8127  7068		       00		      .byte.b	0
   8126  7068					      repend
   8127  7069		       00		      .byte.b	0
   8126  7069					      repend
   8127  706a		       00		      .byte.b	0
   8126  706a					      repend
   8127  706b		       00		      .byte.b	0
   8126  706b					      repend
   8127  706c		       00		      .byte.b	0
   8126  706c					      repend
   8127  706d		       00		      .byte.b	0
   8126  706d					      repend
   8127  706e		       00		      .byte.b	0
   8126  706e					      repend
   8127  706f		       00		      .byte.b	0
   8126  706f					      repend
   8127  7070		       00		      .byte.b	0
   8126  7070					      repend
   8127  7071		       00		      .byte.b	0
   8126  7071					      repend
   8127  7072		       00		      .byte.b	0
   8126  7072					      repend
   8127  7073		       00		      .byte.b	0
   8126  7073					      repend
   8127  7074		       00		      .byte.b	0
   8126  7074					      repend
   8127  7075		       00		      .byte.b	0
   8126  7075					      repend
   8127  7076		       00		      .byte.b	0
   8126  7076					      repend
   8127  7077		       00		      .byte.b	0
   8126  7077					      repend
   8127  7078		       00		      .byte.b	0
   8126  7078					      repend
   8127  7079		       00		      .byte.b	0
   8126  7079					      repend
   8127  707a		       00		      .byte.b	0
   8126  707a					      repend
   8127  707b		       00		      .byte.b	0
   8126  707b					      repend
   8127  707c		       00		      .byte.b	0
   8126  707c					      repend
   8127  707d		       00		      .byte.b	0
   8126  707d					      repend
   8127  707e		       00		      .byte.b	0
   8126  707e					      repend
   8127  707f		       00		      .byte.b	0
   8126  707f					      repend
   8127  7080		       00		      .byte.b	0
   8128  7081					      repend
   8129  7081							; Provided under the CC0 license. See the included LICENSE.txt for details.
   8130  7081
   8131  7081							;----------------------------------------
   8132  7081							; Display Data
   8133  7081							;----------------------------------------
   8134  7081							; The Display Data bank is copied into RAM when DPC+ initializes the cartridge.
   8135  7081							; This allows us to manipulate the data during run-time, but have a known
   8136  7081							; starting state when the Atari is first turned on.
   8137  7081							;
   8138  7081							; Unlike normal Atari VCS/2600 sprite definitions, the sprite data in the
   8139  7081							; Display Data bank is stored right-side-up.
   8140  7081							;
   8141  7081							;----------------------------------------
   8142  7081
   8143  7081				   Zeros32
   8144  7081		       00 84	   SOUND_OFF  =	(* & $1fff)/32
   8145  7081				   DisplayDataDigitBlank
   8146  7081		       00		      .byte.b	0	;--
   8147  7082		       00		      .byte.b	0	;--
   8148  7083		       00		      .byte.b	0	;--
   8149  7084		       00		      .byte.b	0	;--
   8150  7085		       00		      .byte.b	0	;--
   8151  7086		       00		      .byte.b	0	;--
   8152  7087		       00		      .byte.b	0	;--
   8153  7088		       00		      .byte.b	0	;--
   8154  7089
   8155  7089							;	align 32
   8156  7089							;Zeros32:
   8157  7089							;SOUND_OFF = (* & $1fff)/32
   8158  7089							;	.byte 0,0,0,0,0,0,0,0
   8159  7089		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8160  7091		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8161  7099		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8162  70a1
   8163  70a1		       00 85	   SINE_WAVE  =	(* & $1fff)/32
   8164  70a1		       03 03 03 04*	      .byte.b	3,3,3,4,4,5,5,5
   8165  70a9		       05 05 05 05*	      .byte.b	5,5,5,5,4,4,3,3
   8166  70b1		       03 02 02 01*	      .byte.b	3,2,2,1,1,0,0,0
   8167  70b9		       00 00 00 00*	      .byte.b	0,0,0,0,1,1,2,2
   8168  70c1
   8169  70e0		       00 00 00 00*	      align	32
   8170  70e0		       00 87	   TRIANGLE_WAVE =	(* & $1fff)/32
   8171  70e0		       00 00 01 01*	      .byte.b	0,0,1,1,1,2,2,2
   8172  70e8		       03 03 03 04*	      .byte.b	3,3,3,4,4,4,5,5
   8173  70f0		       05 05 04 04*	      .byte.b	5,5,4,4,4,3,3,3
   8174  70f8		       02 02 02 01*	      .byte.b	2,2,2,1,1,1,0,0
   8175  7100
   8176  7100					      align	32
   8177  7100		       00 88	   SAWTOOTH_WAVE =	(* & $1fff)/32
   8178  7100		       00 00 00 00*	      .byte.b	0,0,0,0,1,1,1,1
   8179  7108		       01 01 02 02*	      .byte.b	1,1,2,2,2,2,2,2
   8180  7110		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,4,4
   8181  7118		       04 04 04 04*	      .byte.b	4,4,4,4,5,5,5,5
   8182  7120
   8183  7120					      align	32
   8184  7120		       00 89	   SQUARE_WAVE_VOL5 =	(* & $1fff)/32
   8185  7120		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8186  7128		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8187  7130		       05 05 05 05*	      .byte.b	5,5,5,5,5,5,5,5
   8188  7138		       05 05 05 05*	      .byte.b	5,5,5,5,5,5,5,5
   8189  7140
   8190  7140					      align	32
   8191  7140		       00 8a	   SQUARE_WAVE_VOL4 =	(* & $1fff)/32
   8192  7140		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8193  7148		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8194  7150		       04 04 04 04*	      .byte.b	4,4,4,4,4,4,4,4
   8195  7158		       04 04 04 04*	      .byte.b	4,4,4,4,4,4,4,4
   8196  7160
   8197  7160					      align	32
   8198  7160		       00 8b	   SQUARE_WAVE_VOL3 =	(* & $1fff)/32
   8199  7160		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8200  7168		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8201  7170		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,3,3
   8202  7178		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,3,3
   8203  7180
   8204  7180					      align	32
   8205  7180		       00 8c	   NOISE_WAVE =	(* & $1fff)/32
   8206  7180		       07 01 09 0a*	      .byte.b	7, 1, 9,10, 2, 8, 8,14
   8207  7188		       03 0d 08 05*	      .byte.b	3,13, 8, 5,12, 2, 3, 7
   8208  7190		       07 01 08 04*	      .byte.b	7, 1, 8, 4,15, 1,13, 5
   8209  7198		       08 05 0b 06*	      .byte.b	8, 5,11, 6, 8, 7, 9, 2
   8210  71a0
   8211  71a0							; low and high byte of address table (for ROMdata array in C)
   8212  71a0		       57		      .byte.b	<fetcher_address_table
   8213  71a1		       0d		      .byte.b	((>fetcher_address_table) & $0f) | (((>fetcher_address_table) / 2) & $70)
   8214  71a2		       00		      .byte.b	0
   8215  71a3		       00		      .byte.b	0
   8216  71a4				   FETCHER_BEGIN
   8217  71a4		       10		      .byte.b	16
   8218  71a5		       10		      .byte.b	16
   8219  71a6		       10		      .byte.b	16
   8220  71a7		       10		      .byte.b	16	; to zero-fill on boot
   8221  71a8							;bB.asm
   8222  71a8							; bB.asm file is split here
   8223  71a8				   PF_data1
   8224  71a8		       00		      .byte.b	%00000000
   8225  71a9		       00		      .byte.b	%00000000
   8226  71aa		       00		      .byte.b	%00000000
   8227  71ab		       00		      .byte.b	%00000000
   8228  71ac		       00		      .byte.b	%00000000
   8229  71ad		       00		      .byte.b	%00000000
   8230  71ae		       00		      .byte.b	%00000000
   8231  71af		       00		      .byte.b	%00000000
   8232  71b0		       00		      .byte.b	%00000000
   8233  71b1		       00		      .byte.b	%00000000
   8234  71b2		       00		      .byte.b	%00000000
   8235  71b3		       00		      .byte.b	%00000000
   8236  71b4		       00		      .byte.b	%00000000
   8237  71b5		       00		      .byte.b	%00000000
   8238  71b6		       00		      .byte.b	%00000000
   8239  71b7		       00		      .byte.b	%00000000
   8240  71b8		       00		      .byte.b	%00000000
   8241  71b9		       00		      .byte.b	%00000000
   8242  71ba		       00		      .byte.b	%00000000
   8243  71bb		       00		      .byte.b	%00000000
   8244  71bc		       00		      .byte.b	%00000000
   8245  71bd		       00		      .byte.b	%00000000
   8246  71be		       00		      .byte.b	%00000000
   8247  71bf		       00		      .byte.b	%00000000
   8248  71c0		       00		      .byte.b	%00000000
   8249  71c1		       00		      .byte.b	%00000000
   8250  71c2		       00		      .byte.b	%00000000
   8251  71c3		       00		      .byte.b	%00000000
   8252  71c4		       00		      .byte.b	%00000000
   8253  71c5		       00		      .byte.b	%00000000
   8254  71c6		       00		      .byte.b	%00000000
   8255  71c7		       00		      .byte.b	%00000000
   8256  71c8		       00		      .byte.b	%00000000
   8257  71c9		       00		      .byte.b	%00000000
   8258  71ca		       00		      .byte.b	%00000000
   8259  71cb		       00		      .byte.b	%00000000
   8260  71cc		       00		      .byte.b	%00000000
   8261  71cd		       00		      .byte.b	%00000000
   8262  71ce		       00		      .byte.b	%00000000
   8263  71cf		       00		      .byte.b	%00000000
   8264  71d0		       00		      .byte.b	%00000000
   8265  71d1		       00		      .byte.b	%00000000
   8266  71d2		       00		      .byte.b	%00000000
   8267  71d3		       00		      .byte.b	%00000000
   8268  71d4		       00		      .byte.b	%00000000
   8269  71d5		       00		      .byte.b	%00000000
   8270  71d6		       00		      .byte.b	%00000000
   8271  71d7		       00		      .byte.b	%00000000
   8272  71d8		       00		      .byte.b	%00000000
   8273  71d9		       00		      .byte.b	%00000000
   8274  71da		       00		      .byte.b	%00000000
   8275  71db		       00		      .byte.b	%00000000
   8276  71dc		       00		      .byte.b	%00000000
   8277  71dd		       00		      .byte.b	%00000000
   8278  71de		       00		      .byte.b	%00000000
   8279  71df		       00		      .byte.b	%00000000
   8280  71e0		       00		      .byte.b	%00000000
   8281  71e1		       00		      .byte.b	%00000000
   8282  71e2		       00		      .byte.b	%00000000
   8283  71e3		       00		      .byte.b	%00000000
   8284  71e4		       00		      .byte.b	%00000000
   8285  71e5		       00		      .byte.b	%00000000
   8286  71e6		       00		      .byte.b	%00000000
   8287  71e7		       00		      .byte.b	%00000000
   8288  71e8		       00		      .byte.b	%00000000
   8289  71e9		       00		      .byte.b	%00000000
   8290  71ea		       00		      .byte.b	%00000000
   8291  71eb		       00		      .byte.b	%00000000
   8292  71ec		       00		      .byte.b	%00000000
   8293  71ed		       00		      .byte.b	%00000000
   8294  71ee		       00		      .byte.b	%00000000
   8295  71ef		       00		      .byte.b	%00000000
   8296  71f0		       00		      .byte.b	%00000000
   8297  71f1		       00		      .byte.b	%00000000
   8298  71f2		       00		      .byte.b	%00000000
   8299  71f3		       00		      .byte.b	%00000000
   8300  71f4		       00		      .byte.b	%00000000
   8301  71f5		       00		      .byte.b	%00000000
   8302  71f6		       00		      .byte.b	%00000000
   8303  71f7		       00		      .byte.b	%00000000
   8304  71f8		       00		      .byte.b	%00000000
   8305  71f9		       00		      .byte.b	%00000000
   8306  71fa		       00		      .byte.b	%00000000
   8307  71fb		       00		      .byte.b	%00000000
   8308  71fc		       00		      .byte.b	%00000000
   8309  71fd		       00		      .byte.b	%00000000
   8310  71fe		       00		      .byte.b	%00000000
   8311  71ff		       00		      .byte.b	%00000000
   8312  7200		       00		      .byte.b	%00000000
   8313  7201		       00		      .byte.b	%00000000
   8314  7202		       00		      .byte.b	%00000000
   8315  7203		       00		      .byte.b	%00000000
   8316  7204		       00		      .byte.b	%00000000
   8317  7205		       00		      .byte.b	%00000000
   8318  7206		       00		      .byte.b	%00000000
   8319  7207		       00		      .byte.b	%00000000
   8320  7208		       00		      .byte.b	%00000000
   8321  7209		       00		      .byte.b	%00000000
   8322  720a		       00		      .byte.b	%00000000
   8323  720b		       00		      .byte.b	%00000000
   8324  720c		       00		      .byte.b	%00000000
   8325  720d		       00		      .byte.b	%00000000
   8326  720e		       00		      .byte.b	%00000000
   8327  720f		       00		      .byte.b	%00000000
   8328  7210		       00		      .byte.b	%00000000
   8329  7211		       00		      .byte.b	%00000000
   8330  7212		       00		      .byte.b	%00000000
   8331  7213		       00		      .byte.b	%00000000
   8332  7214		       00		      .byte.b	%00000000
   8333  7215		       00		      .byte.b	%00000000
   8334  7216		       00		      .byte.b	%00000000
   8335  7217		       00		      .byte.b	%00000000
   8336  7218		       00		      .byte.b	%00000000
   8337  7219		       00		      .byte.b	%00000000
   8338  721a		       00		      .byte.b	%00000000
   8339  721b		       00		      .byte.b	%00000000
   8340  721c		       00		      .byte.b	%00000000
   8341  721d		       00		      .byte.b	%00000000
   8342  721e		       00		      .byte.b	%00000000
   8343  721f		       00		      .byte.b	%00000000
   8344  7220		       00		      .byte.b	%00000000
   8345  7221		       00		      .byte.b	%00000000
   8346  7222		       00		      .byte.b	%00000000
   8347  7223		       00		      .byte.b	%00000000
   8348  7224		       00		      .byte.b	%00000000
   8349  7225		       00		      .byte.b	%00000000
   8350  7226		       00		      .byte.b	%00000000
   8351  7227		       00		      .byte.b	%00000000
   8352  7228		       00		      .byte.b	%00000000
   8353  7229		       00		      .byte.b	%00000000
   8354  722a		       00		      .byte.b	%00000000
   8355  722b		       00		      .byte.b	%00000000
   8356  722c		       00		      .byte.b	%00000000
   8357  722d		       00		      .byte.b	%00000000
   8358  722e		       00		      .byte.b	%00000000
   8359  722f		       00		      .byte.b	%00000000
   8360  7230		       00		      .byte.b	%00000000
   8361  7231		       00		      .byte.b	%00000000
   8362  7232		       00		      .byte.b	%00000000
   8363  7233		       00		      .byte.b	%00000000
   8364  7234		       00		      .byte.b	%00000000
   8365  7235		       00		      .byte.b	%00000000
   8366  7236		       00		      .byte.b	%00000000
   8367  7237		       00		      .byte.b	%00000000
   8368  7238		       00		      .byte.b	%00000000
   8369  7239		       00		      .byte.b	%00000000
   8370  723a		       00		      .byte.b	%00000000
   8371  723b		       00		      .byte.b	%00000000
   8372  723c		       00		      .byte.b	%00000000
   8373  723d		       fe		      .byte.b	%11111110
   8374  723e		       fe		      .byte.b	%11111110
   8375  723f		       fe		      .byte.b	%11111110
   8376  7240		       fe		      .byte.b	%11111110
   8377  7241		       fc		      .byte.b	%11111100
   8378  7242		       fc		      .byte.b	%11111100
   8379  7243		       fc		      .byte.b	%11111100
   8380  7244		       fc		      .byte.b	%11111100
   8381  7245		       c4		      .byte.b	%11000100
   8382  7246		       c4		      .byte.b	%11000100
   8383  7247		       c4		      .byte.b	%11000100
   8384  7248		       c4		      .byte.b	%11000100
   8385  7249		       c4		      .byte.b	%11000100
   8386  724a		       c4		      .byte.b	%11000100
   8387  724b		       fc		      .byte.b	%11111100
   8388  724c		       c4		      .byte.b	%11000100
   8389  724d		       c4		      .byte.b	%11000100
   8390  724e		       c4		      .byte.b	%11000100
   8391  724f		       c4		      .byte.b	%11000100
   8392  7250		       c4		      .byte.b	%11000100
   8393  7251		       c4		      .byte.b	%11000100
   8394  7252		       c4		      .byte.b	%11000100
   8395  7253		       fc		      .byte.b	%11111100
   8396  7254		       fc		      .byte.b	%11111100
   8397  7255		       fc		      .byte.b	%11111100
   8398  7256		       fc		      .byte.b	%11111100
   8399  7257		       fc		      .byte.b	%11111100
   8400  7258		       00		      .byte.b	%00000000
   8401  7259		       00		      .byte.b	%00000000
   8402  725a		       00		      .byte.b	%00000000
   8403  725b		       00		      .byte.b	%00000000
   8404  725c		       00		      .byte.b	%00000000
   8405  725d		       00		      .byte.b	%00000000
   8406  725e		       00		      .byte.b	%00000000
   8407  725f		       00		      .byte.b	%00000000
   8408  7260		       00		      .byte.b	%00000000
   8409  7261		       00		      .byte.b	%00000000
   8410  7262		       00		      .byte.b	%00000000
   8411  7263		       00		      .byte.b	%00000000
   8412  7264		       00		      .byte.b	%00000000
   8413  7265		       00		      .byte.b	%00000000
   8414  7266		       00		      .byte.b	%00000000
   8415  7267		       00		      .byte.b	%00000000
   8416  7268		       00		      .byte.b	%00000000
   8417  7269		       00		      .byte.b	%00000000
   8418  726a		       00		      .byte.b	%00000000
   8419  726b		       00		      .byte.b	%00000000
   8420  726c		       00		      .byte.b	%00000000
   8421  726d		       00		      .byte.b	%00000000
   8422  726e		       00		      .byte.b	%00000000
   8423  726f		       00		      .byte.b	%00000000
   8424  7270		       00		      .byte.b	%00000000
   8425  7271		       00		      .byte.b	%00000000
   8426  7272		       00		      .byte.b	%00000000
   8427  7273		       00		      .byte.b	%00000000
   8428  7274		       00		      .byte.b	%00000000
   8429  7275		       00		      .byte.b	%00000000
   8430  7276		       00		      .byte.b	%00000000
   8431  7277		       00		      .byte.b	%00000000
   8432  7278		       00		      .byte.b	%00000000
   8433  7279		       00		      .byte.b	%00000000
   8434  727a		       00		      .byte.b	%00000000
   8435  727b		       00		      .byte.b	%00000000
   8436  727c		       00		      .byte.b	%00000000
   8437  727d		       00		      .byte.b	%00000000
   8438  727e		       00		      .byte.b	%00000000
   8439  727f		       00		      .byte.b	%00000000
   8440  7280		       00		      .byte.b	%00000000
   8441  7281		       00		      .byte.b	%00000000
   8442  7282		       00		      .byte.b	%00000000
   8443  7283		       00		      .byte.b	%00000000
   8444  7284		       00		      .byte.b	%00000000
   8445  7285		       00		      .byte.b	%00000000
   8446  7286		       00		      .byte.b	%00000000
   8447  7287		       00		      .byte.b	%00000000
   8448  7288		       00		      .byte.b	%00000000
   8449  7289		       00		      .byte.b	%00000000
   8450  728a		       00		      .byte.b	%00000000
   8451  728b		       00		      .byte.b	%00000000
   8452  728c		       00		      .byte.b	%00000000
   8453  728d		       00		      .byte.b	%00000000
   8454  728e		       00		      .byte.b	%00000000
   8455  728f		       00		      .byte.b	%00000000
   8456  7290		       00		      .byte.b	%00000000
   8457  7291		       00		      .byte.b	%00000000
   8458  7292		       00		      .byte.b	%00000000
   8459  7293		       00		      .byte.b	%00000000
   8460  7294		       00		      .byte.b	%00000000
   8461  7295		       fe		      .byte.b	%11111110
   8462  7296		       fe		      .byte.b	%11111110
   8463  7297		       fe		      .byte.b	%11111110
   8464  7298		       fe		      .byte.b	%11111110
   8465  7299		       fc		      .byte.b	%11111100
   8466  729a		       fc		      .byte.b	%11111100
   8467  729b		       fc		      .byte.b	%11111100
   8468  729c		       fc		      .byte.b	%11111100
   8469  729d		       c4		      .byte.b	%11000100
   8470  729e		       c4		      .byte.b	%11000100
   8471  729f		       c4		      .byte.b	%11000100
   8472  72a0		       c4		      .byte.b	%11000100
   8473  72a1		       c4		      .byte.b	%11000100
   8474  72a2		       c4		      .byte.b	%11000100
   8475  72a3		       fc		      .byte.b	%11111100
   8476  72a4		       c4		      .byte.b	%11000100
   8477  72a5		       c4		      .byte.b	%11000100
   8478  72a6		       c4		      .byte.b	%11000100
   8479  72a7		       c4		      .byte.b	%11000100
   8480  72a8		       c4		      .byte.b	%11000100
   8481  72a9		       c4		      .byte.b	%11000100
   8482  72aa		       c4		      .byte.b	%11000100
   8483  72ab		       fc		      .byte.b	%11111100
   8484  72ac		       fc		      .byte.b	%11111100
   8485  72ad		       fc		      .byte.b	%11111100
   8486  72ae		       fc		      .byte.b	%11111100
   8487  72af		       fc		      .byte.b	%11111100
   8488  72b0		       00		      .byte.b	%00000000
   8489  72b1		       00		      .byte.b	%00000000
   8490  72b2		       00		      .byte.b	%00000000
   8491  72b3		       00		      .byte.b	%00000000
   8492  72b4		       00		      .byte.b	%00000000
   8493  72b5		       00		      .byte.b	%00000000
   8494  72b6		       00		      .byte.b	%00000000
   8495  72b7		       00		      .byte.b	%00000000
   8496  72b8		       00		      .byte.b	%00000000
   8497  72b9		       00		      .byte.b	%00000000
   8498  72ba		       00		      .byte.b	%00000000
   8499  72bb		       00		      .byte.b	%00000000
   8500  72bc		       00		      .byte.b	%00000000
   8501  72bd		       00		      .byte.b	%00000000
   8502  72be		       00		      .byte.b	%00000000
   8503  72bf		       00		      .byte.b	%00000000
   8504  72c0		       00		      .byte.b	%00000000
   8505  72c1		       00		      .byte.b	%00000000
   8506  72c2		       00		      .byte.b	%00000000
   8507  72c3		       00		      .byte.b	%00000000
   8508  72c4		       00		      .byte.b	%00000000
   8509  72c5		       00		      .byte.b	%00000000
   8510  72c6		       00		      .byte.b	%00000000
   8511  72c7		       00		      .byte.b	%00000000
   8512  72c8		       00		      .byte.b	%00000000
   8513  72c9		       00		      .byte.b	%00000000
   8514  72ca		       00		      .byte.b	%00000000
   8515  72cb		       00		      .byte.b	%00000000
   8516  72cc		       00		      .byte.b	%00000000
   8517  72cd		       00		      .byte.b	%00000000
   8518  72ce		       00		      .byte.b	%00000000
   8519  72cf		       00		      .byte.b	%00000000
   8520  72d0		       00		      .byte.b	%00000000
   8521  72d1		       00		      .byte.b	%00000000
   8522  72d2		       00		      .byte.b	%00000000
   8523  72d3		       00		      .byte.b	%00000000
   8524  72d4		       00		      .byte.b	%00000000
   8525  72d5		       00		      .byte.b	%00000000
   8526  72d6		       00		      .byte.b	%00000000
   8527  72d7		       00		      .byte.b	%00000000
   8528  72d8		       00		      .byte.b	%00000000
   8529  72d9		       00		      .byte.b	%00000000
   8530  72da		       00		      .byte.b	%00000000
   8531  72db		       00		      .byte.b	%00000000
   8532  72dc		       00		      .byte.b	%00000000
   8533  72dd		       00		      .byte.b	%00000000
   8534  72de		       00		      .byte.b	%00000000
   8535  72df		       00		      .byte.b	%00000000
   8536  72e0		       00		      .byte.b	%00000000
   8537  72e1		       00		      .byte.b	%00000000
   8538  72e2		       00		      .byte.b	%00000000
   8539  72e3		       00		      .byte.b	%00000000
   8540  72e4		       00		      .byte.b	%00000000
   8541  72e5		       00		      .byte.b	%00000000
   8542  72e6		       00		      .byte.b	%00000000
   8543  72e7		       00		      .byte.b	%00000000
   8544  72e8		       00		      .byte.b	%00000000
   8545  72e9		       00		      .byte.b	%00000000
   8546  72ea		       00		      .byte.b	%00000000
   8547  72eb		       00		      .byte.b	%00000000
   8548  72ec		       00		      .byte.b	%00000000
   8549  72ed		       00		      .byte.b	%00000000
   8550  72ee		       00		      .byte.b	%00000000
   8551  72ef		       00		      .byte.b	%00000000
   8552  72f0		       00		      .byte.b	%00000000
   8553  72f1		       00		      .byte.b	%00000000
   8554  72f2		       00		      .byte.b	%00000000
   8555  72f3		       00		      .byte.b	%00000000
   8556  72f4		       00		      .byte.b	%00000000
   8557  72f5		       00		      .byte.b	%00000000
   8558  72f6		       00		      .byte.b	%00000000
   8559  72f7		       00		      .byte.b	%00000000
   8560  72f8		       00		      .byte.b	%00000000
   8561  72f9		       00		      .byte.b	%00000000
   8562  72fa		       00		      .byte.b	%00000000
   8563  72fb		       00		      .byte.b	%00000000
   8564  72fc		       00		      .byte.b	%00000000
   8565  72fd		       00		      .byte.b	%00000000
   8566  72fe		       00		      .byte.b	%00000000
   8567  72ff		       00		      .byte.b	%00000000
   8568  7300		       00		      .byte.b	%00000000
   8569  7301		       00		      .byte.b	%00000000
   8570  7302		       00		      .byte.b	%00000000
   8571  7303		       00		      .byte.b	%00000000
   8572  7304		       00		      .byte.b	%00000000
   8573  7305		       00		      .byte.b	%00000000
   8574  7306		       00		      .byte.b	%00000000
   8575  7307		       00		      .byte.b	%00000000
   8576  7308				   playfieldcolorL0451
   8577  7308		       c2		      .byte.b	_C2
   8578  7309		       c2		      .byte.b	_C2
   8579  730a		       00		      .byte.b	_00
   8580  730b		       00		      .byte.b	_00
   8581  730c		       00		      .byte.b	_00
   8582  730d		       00		      .byte.b	_00
   8583  730e		       00		      .byte.b	_00
   8584  730f		       00		      .byte.b	_00
   8585  7310		       00		      .byte.b	_00
   8586  7311		       00		      .byte.b	_00
   8587  7312		       00		      .byte.b	_00
   8588  7313		       00		      .byte.b	_00
   8589  7314		       00		      .byte.b	_00
   8590  7315		       00		      .byte.b	_00
   8591  7316		       00		      .byte.b	_00
   8592  7317		       00		      .byte.b	_00
   8593  7318		       00		      .byte.b	_00
   8594  7319		       00		      .byte.b	_00
   8595  731a		       00		      .byte.b	_00
   8596  731b		       00		      .byte.b	_00
   8597  731c		       00		      .byte.b	_00
   8598  731d		       00		      .byte.b	_00
   8599  731e		       00		      .byte.b	_00
   8600  731f		       00		      .byte.b	_00
   8601  7320		       00		      .byte.b	_00
   8602  7321		       00		      .byte.b	_00
   8603  7322		       00		      .byte.b	_00
   8604  7323		       00		      .byte.b	_00
   8605  7324		       00		      .byte.b	_00
   8606  7325		       00		      .byte.b	_00
   8607  7326		       00		      .byte.b	_00
   8608  7327		       00		      .byte.b	_00
   8609  7328		       00		      .byte.b	_00
   8610  7329		       00		      .byte.b	_00
   8611  732a		       00		      .byte.b	_00
   8612  732b		       00		      .byte.b	_00
   8613  732c		       00		      .byte.b	_00
   8614  732d		       00		      .byte.b	_00
   8615  732e		       00		      .byte.b	_00
   8616  732f		       00		      .byte.b	_00
   8617  7330		       00		      .byte.b	_00
   8618  7331		       00		      .byte.b	_00
   8619  7332		       00		      .byte.b	_00
   8620  7333		       00		      .byte.b	_00
   8621  7334		       00		      .byte.b	_00
   8622  7335		       00		      .byte.b	_00
   8623  7336		       00		      .byte.b	_00
   8624  7337		       00		      .byte.b	_00
   8625  7338		       00		      .byte.b	_00
   8626  7339		       00		      .byte.b	_00
   8627  733a		       00		      .byte.b	_00
   8628  733b		       00		      .byte.b	_00
   8629  733c		       00		      .byte.b	_00
   8630  733d		       00		      .byte.b	_00
   8631  733e		       00		      .byte.b	_00
   8632  733f		       00		      .byte.b	_00
   8633  7340		       00		      .byte.b	_00
   8634  7341		       00		      .byte.b	_00
   8635  7342		       00		      .byte.b	_00
   8636  7343		       00		      .byte.b	_00
   8637  7344		       00		      .byte.b	_00
   8638  7345		       00		      .byte.b	_00
   8639  7346		       f2		      .byte.b	_F2
   8640  7347		       f2		      .byte.b	_F2
   8641  7348		       f0		      .byte.b	_F0
   8642  7349		       f0		      .byte.b	_F0
   8643  734a		       f2		      .byte.b	_F2
   8644  734b		       f2		      .byte.b	_F2
   8645  734c		       f0		      .byte.b	_F0
   8646  734d		       f0		      .byte.b	_F0
   8647  734e		       f2		      .byte.b	_F2
   8648  734f		       f2		      .byte.b	_F2
   8649  7350		       f0		      .byte.b	_F0
   8650  7351		       f0		      .byte.b	_F0
   8651  7352		       f2		      .byte.b	_F2
   8652  7353		       f2		      .byte.b	_F2
   8653  7354		       f0		      .byte.b	_F0
   8654  7355		       f0		      .byte.b	_F0
   8655  7356		       f2		      .byte.b	_F2
   8656  7357		       f2		      .byte.b	_F2
   8657  7358		       f0		      .byte.b	_F0
   8658  7359		       f0		      .byte.b	_F0
   8659  735a		       f2		      .byte.b	_F2
   8660  735b		       f2		      .byte.b	_F2
   8661  735c		       f0		      .byte.b	_F0
   8662  735d		       f0		      .byte.b	_F0
   8663  735e		       00		      .byte.b	_00
   8664  735f		       00		      .byte.b	_00
   8665  7360				   playfieldcolorL0454
   8666  7360		       c2		      .byte.b	_C2
   8667  7361		       c2		      .byte.b	_C2
   8668  7362		       00		      .byte.b	_00
   8669  7363		       00		      .byte.b	_00
   8670  7364		       00		      .byte.b	_00
   8671  7365		       00		      .byte.b	_00
   8672  7366		       00		      .byte.b	_00
   8673  7367		       00		      .byte.b	_00
   8674  7368		       00		      .byte.b	_00
   8675  7369		       00		      .byte.b	_00
   8676  736a		       00		      .byte.b	_00
   8677  736b		       00		      .byte.b	_00
   8678  736c		       00		      .byte.b	_00
   8679  736d		       00		      .byte.b	_00
   8680  736e		       00		      .byte.b	_00
   8681  736f		       00		      .byte.b	_00
   8682  7370		       00		      .byte.b	_00
   8683  7371		       00		      .byte.b	_00
   8684  7372		       00		      .byte.b	_00
   8685  7373		       00		      .byte.b	_00
   8686  7374		       00		      .byte.b	_00
   8687  7375		       00		      .byte.b	_00
   8688  7376		       00		      .byte.b	_00
   8689  7377		       00		      .byte.b	_00
   8690  7378		       00		      .byte.b	_00
   8691  7379		       00		      .byte.b	_00
   8692  737a		       00		      .byte.b	_00
   8693  737b		       00		      .byte.b	_00
   8694  737c		       00		      .byte.b	_00
   8695  737d		       00		      .byte.b	_00
   8696  737e		       00		      .byte.b	_00
   8697  737f		       00		      .byte.b	_00
   8698  7380		       00		      .byte.b	_00
   8699  7381		       00		      .byte.b	_00
   8700  7382		       00		      .byte.b	_00
   8701  7383		       00		      .byte.b	_00
   8702  7384		       00		      .byte.b	_00
   8703  7385		       00		      .byte.b	_00
   8704  7386		       00		      .byte.b	_00
   8705  7387		       00		      .byte.b	_00
   8706  7388		       00		      .byte.b	_00
   8707  7389		       00		      .byte.b	_00
   8708  738a		       00		      .byte.b	_00
   8709  738b		       00		      .byte.b	_00
   8710  738c		       00		      .byte.b	_00
   8711  738d		       00		      .byte.b	_00
   8712  738e		       00		      .byte.b	_00
   8713  738f		       00		      .byte.b	_00
   8714  7390		       00		      .byte.b	_00
   8715  7391		       00		      .byte.b	_00
   8716  7392		       00		      .byte.b	_00
   8717  7393		       00		      .byte.b	_00
   8718  7394		       00		      .byte.b	_00
   8719  7395		       00		      .byte.b	_00
   8720  7396		       00		      .byte.b	_00
   8721  7397		       34		      .byte.b	_34
   8722  7398		       34		      .byte.b	_34
   8723  7399		       34		      .byte.b	_34
   8724  739a		       34		      .byte.b	_34
   8725  739b		       34		      .byte.b	_34
   8726  739c		       34		      .byte.b	_34
   8727  739d		       34		      .byte.b	_34
   8728  739e		       34		      .byte.b	_34
   8729  739f		       34		      .byte.b	_34
   8730  73a0		       f0		      .byte.b	_F0
   8731  73a1		       f0		      .byte.b	_F0
   8732  73a2		       f2		      .byte.b	_F2
   8733  73a3		       f2		      .byte.b	_F2
   8734  73a4		       f0		      .byte.b	_F0
   8735  73a5		       f0		      .byte.b	_F0
   8736  73a6		       f2		      .byte.b	_F2
   8737  73a7		       f2		      .byte.b	_F2
   8738  73a8		       f0		      .byte.b	_F0
   8739  73a9		       f0		      .byte.b	_F0
   8740  73aa		       f2		      .byte.b	_F2
   8741  73ab		       f2		      .byte.b	_F2
   8742  73ac		       f0		      .byte.b	_F0
   8743  73ad		       f0		      .byte.b	_F0
   8744  73ae		       f2		      .byte.b	_F2
   8745  73af		       f2		      .byte.b	_F2
   8746  73b0		       f0		      .byte.b	_F0
   8747  73b1		       f0		      .byte.b	_F0
   8748  73b2		       f2		      .byte.b	_F2
   8749  73b3		       f2		      .byte.b	_F2
   8750  73b4		       f0		      .byte.b	_F0
   8751  73b5		       f0		      .byte.b	_F0
   8752  73b6		       00		      .byte.b	_00
   8753  73b7		       00		      .byte.b	_00
   8754  73b8				   playfieldcolorL0457
   8755  73b8		       c2		      .byte.b	_C2
   8756  73b9		       c2		      .byte.b	_C2
   8757  73ba		       00		      .byte.b	_00
   8758  73bb		       00		      .byte.b	_00
   8759  73bc		       00		      .byte.b	_00
   8760  73bd		       00		      .byte.b	_00
   8761  73be		       00		      .byte.b	_00
   8762  73bf		       00		      .byte.b	_00
   8763  73c0		       00		      .byte.b	_00
   8764  73c1		       00		      .byte.b	_00
   8765  73c2		       00		      .byte.b	_00
   8766  73c3		       00		      .byte.b	_00
   8767  73c4		       00		      .byte.b	_00
   8768  73c5		       00		      .byte.b	_00
   8769  73c6		       00		      .byte.b	_00
   8770  73c7		       00		      .byte.b	_00
   8771  73c8		       00		      .byte.b	_00
   8772  73c9		       00		      .byte.b	_00
   8773  73ca		       00		      .byte.b	_00
   8774  73cb		       00		      .byte.b	_00
   8775  73cc		       00		      .byte.b	_00
   8776  73cd		       00		      .byte.b	_00
   8777  73ce		       00		      .byte.b	_00
   8778  73cf		       00		      .byte.b	_00
   8779  73d0		       00		      .byte.b	_00
   8780  73d1		       00		      .byte.b	_00
   8781  73d2		       00		      .byte.b	_00
   8782  73d3		       00		      .byte.b	_00
   8783  73d4		       00		      .byte.b	_00
   8784  73d5		       00		      .byte.b	_00
   8785  73d6		       00		      .byte.b	_00
   8786  73d7		       00		      .byte.b	_00
   8787  73d8		       00		      .byte.b	_00
   8788  73d9		       00		      .byte.b	_00
   8789  73da		       00		      .byte.b	_00
   8790  73db		       00		      .byte.b	_00
   8791  73dc		       00		      .byte.b	_00
   8792  73dd		       00		      .byte.b	_00
   8793  73de		       00		      .byte.b	_00
   8794  73df		       00		      .byte.b	_00
   8795  73e0		       00		      .byte.b	_00
   8796  73e1		       00		      .byte.b	_00
   8797  73e2		       00		      .byte.b	_00
   8798  73e3		       00		      .byte.b	_00
   8799  73e4		       00		      .byte.b	_00
   8800  73e5		       00		      .byte.b	_00
   8801  73e6		       00		      .byte.b	_00
   8802  73e7		       00		      .byte.b	_00
   8803  73e8		       00		      .byte.b	_00
   8804  73e9		       00		      .byte.b	_00
   8805  73ea		       00		      .byte.b	_00
   8806  73eb		       00		      .byte.b	_00
   8807  73ec		       00		      .byte.b	_00
   8808  73ed		       00		      .byte.b	_00
   8809  73ee		       00		      .byte.b	_00
   8810  73ef		       34		      .byte.b	_34
   8811  73f0		       34		      .byte.b	_34
   8812  73f1		       34		      .byte.b	_34
   8813  73f2		       34		      .byte.b	_34
   8814  73f3		       34		      .byte.b	_34
   8815  73f4		       34		      .byte.b	_34
   8816  73f5		       34		      .byte.b	_34
   8817  73f6		       34		      .byte.b	_34
   8818  73f7		       34		      .byte.b	_34
   8819  73f8		       34		      .byte.b	_34
   8820  73f9		       34		      .byte.b	_34
   8821  73fa		       f2		      .byte.b	_F2
   8822  73fb		       f2		      .byte.b	_F2
   8823  73fc		       f0		      .byte.b	_F0
   8824  73fd		       f0		      .byte.b	_F0
   8825  73fe		       f2		      .byte.b	_F2
   8826  73ff		       f2		      .byte.b	_F2
   8827  7400		       f0		      .byte.b	_F0
   8828  7401		       f0		      .byte.b	_F0
   8829  7402		       f2		      .byte.b	_F2
   8830  7403		       f2		      .byte.b	_F2
   8831  7404		       f0		      .byte.b	_F0
   8832  7405		       f0		      .byte.b	_F0
   8833  7406		       f2		      .byte.b	_F2
   8834  7407		       f2		      .byte.b	_F2
   8835  7408		       f0		      .byte.b	_F0
   8836  7409		       f0		      .byte.b	_F0
   8837  740a		       f2		      .byte.b	_F2
   8838  740b		       f2		      .byte.b	_F2
   8839  740c		       f0		      .byte.b	_F0
   8840  740d		       f0		      .byte.b	_F0
   8841  740e		       00		      .byte.b	_00
   8842  740f		       00		      .byte.b	_00
   8843  7410				   playfieldcolorL0460
   8844  7410		       c2		      .byte.b	_C2
   8845  7411		       c2		      .byte.b	_C2
   8846  7412		       00		      .byte.b	_00
   8847  7413		       00		      .byte.b	_00
   8848  7414		       00		      .byte.b	_00
   8849  7415		       00		      .byte.b	_00
   8850  7416		       00		      .byte.b	_00
   8851  7417		       00		      .byte.b	_00
   8852  7418		       00		      .byte.b	_00
   8853  7419		       00		      .byte.b	_00
   8854  741a		       00		      .byte.b	_00
   8855  741b		       00		      .byte.b	_00
   8856  741c		       00		      .byte.b	_00
   8857  741d		       00		      .byte.b	_00
   8858  741e		       00		      .byte.b	_00
   8859  741f		       00		      .byte.b	_00
   8860  7420		       00		      .byte.b	_00
   8861  7421		       00		      .byte.b	_00
   8862  7422		       00		      .byte.b	_00
   8863  7423		       00		      .byte.b	_00
   8864  7424		       00		      .byte.b	_00
   8865  7425		       00		      .byte.b	_00
   8866  7426		       00		      .byte.b	_00
   8867  7427		       00		      .byte.b	_00
   8868  7428		       00		      .byte.b	_00
   8869  7429		       00		      .byte.b	_00
   8870  742a		       00		      .byte.b	_00
   8871  742b		       00		      .byte.b	_00
   8872  742c		       00		      .byte.b	_00
   8873  742d		       00		      .byte.b	_00
   8874  742e		       00		      .byte.b	_00
   8875  742f		       00		      .byte.b	_00
   8876  7430		       00		      .byte.b	_00
   8877  7431		       00		      .byte.b	_00
   8878  7432		       00		      .byte.b	_00
   8879  7433		       00		      .byte.b	_00
   8880  7434		       00		      .byte.b	_00
   8881  7435		       00		      .byte.b	_00
   8882  7436		       00		      .byte.b	_00
   8883  7437		       00		      .byte.b	_00
   8884  7438		       00		      .byte.b	_00
   8885  7439		       00		      .byte.b	_00
   8886  743a		       00		      .byte.b	_00
   8887  743b		       00		      .byte.b	_00
   8888  743c		       00		      .byte.b	_00
   8889  743d		       00		      .byte.b	_00
   8890  743e		       00		      .byte.b	_00
   8891  743f		       00		      .byte.b	_00
   8892  7440		       00		      .byte.b	_00
   8893  7441		       00		      .byte.b	_00
   8894  7442		       00		      .byte.b	_00
   8895  7443		       00		      .byte.b	_00
   8896  7444		       00		      .byte.b	_00
   8897  7445		       00		      .byte.b	_00
   8898  7446		       00		      .byte.b	_00
   8899  7447		       34		      .byte.b	_34
   8900  7448		       34		      .byte.b	_34
   8901  7449		       34		      .byte.b	_34
   8902  744a		       34		      .byte.b	_34
   8903  744b		       34		      .byte.b	_34
   8904  744c		       34		      .byte.b	_34
   8905  744d		       34		      .byte.b	_34
   8906  744e		       34		      .byte.b	_34
   8907  744f		       34		      .byte.b	_34
   8908  7450		       34		      .byte.b	_34
   8909  7451		       34		      .byte.b	_34
   8910  7452		       34		      .byte.b	_34
   8911  7453		       34		      .byte.b	_34
   8912  7454		       f0		      .byte.b	_F0
   8913  7455		       f0		      .byte.b	_F0
   8914  7456		       f2		      .byte.b	_F2
   8915  7457		       f2		      .byte.b	_F2
   8916  7458		       f0		      .byte.b	_F0
   8917  7459		       f0		      .byte.b	_F0
   8918  745a		       f2		      .byte.b	_F2
   8919  745b		       f2		      .byte.b	_F2
   8920  745c		       f0		      .byte.b	_F0
   8921  745d		       f0		      .byte.b	_F0
   8922  745e		       f2		      .byte.b	_F2
   8923  745f		       f2		      .byte.b	_F2
   8924  7460		       f0		      .byte.b	_F0
   8925  7461		       f0		      .byte.b	_F0
   8926  7462		       f2		      .byte.b	_F2
   8927  7463		       f2		      .byte.b	_F2
   8928  7464		       f0		      .byte.b	_F0
   8929  7465		       f0		      .byte.b	_F0
   8930  7466		       00		      .byte.b	_00
   8931  7467		       00		      .byte.b	_00
   8932  7468				   playfieldcolorL0464
   8933  7468		       c2		      .byte.b	_C2
   8934  7469		       c2		      .byte.b	_C2
   8935  746a		       00		      .byte.b	_00
   8936  746b		       00		      .byte.b	_00
   8937  746c		       00		      .byte.b	_00
   8938  746d		       00		      .byte.b	_00
   8939  746e		       00		      .byte.b	_00
   8940  746f		       00		      .byte.b	_00
   8941  7470		       00		      .byte.b	_00
   8942  7471		       00		      .byte.b	_00
   8943  7472		       00		      .byte.b	_00
   8944  7473		       00		      .byte.b	_00
   8945  7474		       00		      .byte.b	_00
   8946  7475		       00		      .byte.b	_00
   8947  7476		       00		      .byte.b	_00
   8948  7477		       00		      .byte.b	_00
   8949  7478		       00		      .byte.b	_00
   8950  7479		       00		      .byte.b	_00
   8951  747a		       00		      .byte.b	_00
   8952  747b		       00		      .byte.b	_00
   8953  747c		       00		      .byte.b	_00
   8954  747d		       00		      .byte.b	_00
   8955  747e		       00		      .byte.b	_00
   8956  747f		       00		      .byte.b	_00
   8957  7480		       00		      .byte.b	_00
   8958  7481		       00		      .byte.b	_00
   8959  7482		       00		      .byte.b	_00
   8960  7483		       00		      .byte.b	_00
   8961  7484		       00		      .byte.b	_00
   8962  7485		       00		      .byte.b	_00
   8963  7486		       00		      .byte.b	_00
   8964  7487		       00		      .byte.b	_00
   8965  7488		       00		      .byte.b	_00
   8966  7489		       00		      .byte.b	_00
   8967  748a		       00		      .byte.b	_00
   8968  748b		       00		      .byte.b	_00
   8969  748c		       00		      .byte.b	_00
   8970  748d		       00		      .byte.b	_00
   8971  748e		       00		      .byte.b	_00
   8972  748f		       00		      .byte.b	_00
   8973  7490		       00		      .byte.b	_00
   8974  7491		       00		      .byte.b	_00
   8975  7492		       00		      .byte.b	_00
   8976  7493		       00		      .byte.b	_00
   8977  7494		       00		      .byte.b	_00
   8978  7495		       00		      .byte.b	_00
   8979  7496		       00		      .byte.b	_00
   8980  7497		       00		      .byte.b	_00
   8981  7498		       00		      .byte.b	_00
   8982  7499		       00		      .byte.b	_00
   8983  749a		       00		      .byte.b	_00
   8984  749b		       00		      .byte.b	_00
   8985  749c		       00		      .byte.b	_00
   8986  749d		       00		      .byte.b	_00
   8987  749e		       00		      .byte.b	_00
   8988  749f		       34		      .byte.b	_34
   8989  74a0		       34		      .byte.b	_34
   8990  74a1		       34		      .byte.b	_34
   8991  74a2		       34		      .byte.b	_34
   8992  74a3		       34		      .byte.b	_34
   8993  74a4		       34		      .byte.b	_34
   8994  74a5		       34		      .byte.b	_34
   8995  74a6		       34		      .byte.b	_34
   8996  74a7		       34		      .byte.b	_34
   8997  74a8		       34		      .byte.b	_34
   8998  74a9		       34		      .byte.b	_34
   8999  74aa		       34		      .byte.b	_34
   9000  74ab		       34		      .byte.b	_34
   9001  74ac		       34		      .byte.b	_34
   9002  74ad		       34		      .byte.b	_34
   9003  74ae		       f2		      .byte.b	_F2
   9004  74af		       f2		      .byte.b	_F2
   9005  74b0		       f0		      .byte.b	_F0
   9006  74b1		       f0		      .byte.b	_F0
   9007  74b2		       f2		      .byte.b	_F2
   9008  74b3		       f2		      .byte.b	_F2
   9009  74b4		       f0		      .byte.b	_F0
   9010  74b5		       f0		      .byte.b	_F0
   9011  74b6		       f2		      .byte.b	_F2
   9012  74b7		       f2		      .byte.b	_F2
   9013  74b8		       f0		      .byte.b	_F0
   9014  74b9		       f0		      .byte.b	_F0
   9015  74ba		       f2		      .byte.b	_F2
   9016  74bb		       f2		      .byte.b	_F2
   9017  74bc		       f0		      .byte.b	_F0
   9018  74bd		       f0		      .byte.b	_F0
   9019  74be		       00		      .byte.b	_00
   9020  74bf		       00		      .byte.b	_00
   9021  74c0				   playfieldcolorL0467
   9022  74c0		       c2		      .byte.b	_C2
   9023  74c1		       c2		      .byte.b	_C2
   9024  74c2		       00		      .byte.b	_00
   9025  74c3		       00		      .byte.b	_00
   9026  74c4		       00		      .byte.b	_00
   9027  74c5		       00		      .byte.b	_00
   9028  74c6		       00		      .byte.b	_00
   9029  74c7		       00		      .byte.b	_00
   9030  74c8		       00		      .byte.b	_00
   9031  74c9		       00		      .byte.b	_00
   9032  74ca		       00		      .byte.b	_00
   9033  74cb		       00		      .byte.b	_00
   9034  74cc		       00		      .byte.b	_00
   9035  74cd		       00		      .byte.b	_00
   9036  74ce		       00		      .byte.b	_00
   9037  74cf		       00		      .byte.b	_00
   9038  74d0		       00		      .byte.b	_00
   9039  74d1		       00		      .byte.b	_00
   9040  74d2		       00		      .byte.b	_00
   9041  74d3		       00		      .byte.b	_00
   9042  74d4		       00		      .byte.b	_00
   9043  74d5		       00		      .byte.b	_00
   9044  74d6		       00		      .byte.b	_00
   9045  74d7		       00		      .byte.b	_00
   9046  74d8		       00		      .byte.b	_00
   9047  74d9		       00		      .byte.b	_00
   9048  74da		       00		      .byte.b	_00
   9049  74db		       00		      .byte.b	_00
   9050  74dc		       00		      .byte.b	_00
   9051  74dd		       00		      .byte.b	_00
   9052  74de		       00		      .byte.b	_00
   9053  74df		       00		      .byte.b	_00
   9054  74e0		       00		      .byte.b	_00
   9055  74e1		       00		      .byte.b	_00
   9056  74e2		       00		      .byte.b	_00
   9057  74e3		       00		      .byte.b	_00
   9058  74e4		       00		      .byte.b	_00
   9059  74e5		       00		      .byte.b	_00
   9060  74e6		       00		      .byte.b	_00
   9061  74e7		       00		      .byte.b	_00
   9062  74e8		       00		      .byte.b	_00
   9063  74e9		       00		      .byte.b	_00
   9064  74ea		       00		      .byte.b	_00
   9065  74eb		       00		      .byte.b	_00
   9066  74ec		       00		      .byte.b	_00
   9067  74ed		       00		      .byte.b	_00
   9068  74ee		       00		      .byte.b	_00
   9069  74ef		       00		      .byte.b	_00
   9070  74f0		       00		      .byte.b	_00
   9071  74f1		       00		      .byte.b	_00
   9072  74f2		       00		      .byte.b	_00
   9073  74f3		       00		      .byte.b	_00
   9074  74f4		       00		      .byte.b	_00
   9075  74f5		       00		      .byte.b	_00
   9076  74f6		       00		      .byte.b	_00
   9077  74f7		       34		      .byte.b	_34
   9078  74f8		       34		      .byte.b	_34
   9079  74f9		       34		      .byte.b	_34
   9080  74fa		       34		      .byte.b	_34
   9081  74fb		       34		      .byte.b	_34
   9082  74fc		       34		      .byte.b	_34
   9083  74fd		       34		      .byte.b	_34
   9084  74fe		       34		      .byte.b	_34
   9085  74ff		       34		      .byte.b	_34
   9086  7500		       34		      .byte.b	_34
   9087  7501		       34		      .byte.b	_34
   9088  7502		       34		      .byte.b	_34
   9089  7503		       34		      .byte.b	_34
   9090  7504		       34		      .byte.b	_34
   9091  7505		       34		      .byte.b	_34
   9092  7506		       34		      .byte.b	_34
   9093  7507		       34		      .byte.b	_34
   9094  7508		       f0		      .byte.b	_F0
   9095  7509		       f0		      .byte.b	_F0
   9096  750a		       f2		      .byte.b	_F2
   9097  750b		       f2		      .byte.b	_F2
   9098  750c		       f0		      .byte.b	_F0
   9099  750d		       f0		      .byte.b	_F0
   9100  750e		       f2		      .byte.b	_F2
   9101  750f		       f2		      .byte.b	_F2
   9102  7510		       f0		      .byte.b	_F0
   9103  7511		       f0		      .byte.b	_F0
   9104  7512		       f2		      .byte.b	_F2
   9105  7513		       f2		      .byte.b	_F2
   9106  7514		       f0		      .byte.b	_F0
   9107  7515		       f0		      .byte.b	_F0
   9108  7516		       00		      .byte.b	_00
   9109  7517		       00		      .byte.b	_00
   9110  7518				   playfieldcolorL0469
   9111  7518		       c2		      .byte.b	_C2
   9112  7519		       c2		      .byte.b	_C2
   9113  751a		       00		      .byte.b	_00
   9114  751b		       00		      .byte.b	_00
   9115  751c		       00		      .byte.b	_00
   9116  751d		       00		      .byte.b	_00
   9117  751e		       00		      .byte.b	_00
   9118  751f		       00		      .byte.b	_00
   9119  7520		       00		      .byte.b	_00
   9120  7521		       00		      .byte.b	_00
   9121  7522		       00		      .byte.b	_00
   9122  7523		       00		      .byte.b	_00
   9123  7524		       00		      .byte.b	_00
   9124  7525		       00		      .byte.b	_00
   9125  7526		       00		      .byte.b	_00
   9126  7527		       00		      .byte.b	_00
   9127  7528		       00		      .byte.b	_00
   9128  7529		       00		      .byte.b	_00
   9129  752a		       00		      .byte.b	_00
   9130  752b		       00		      .byte.b	_00
   9131  752c		       00		      .byte.b	_00
   9132  752d		       00		      .byte.b	_00
   9133  752e		       00		      .byte.b	_00
   9134  752f		       00		      .byte.b	_00
   9135  7530		       00		      .byte.b	_00
   9136  7531		       00		      .byte.b	_00
   9137  7532		       00		      .byte.b	_00
   9138  7533		       00		      .byte.b	_00
   9139  7534		       00		      .byte.b	_00
   9140  7535		       00		      .byte.b	_00
   9141  7536		       00		      .byte.b	_00
   9142  7537		       00		      .byte.b	_00
   9143  7538		       00		      .byte.b	_00
   9144  7539		       00		      .byte.b	_00
   9145  753a		       00		      .byte.b	_00
   9146  753b		       00		      .byte.b	_00
   9147  753c		       00		      .byte.b	_00
   9148  753d		       00		      .byte.b	_00
   9149  753e		       00		      .byte.b	_00
   9150  753f		       00		      .byte.b	_00
   9151  7540		       00		      .byte.b	_00
   9152  7541		       00		      .byte.b	_00
   9153  7542		       00		      .byte.b	_00
   9154  7543		       00		      .byte.b	_00
   9155  7544		       00		      .byte.b	_00
   9156  7545		       00		      .byte.b	_00
   9157  7546		       00		      .byte.b	_00
   9158  7547		       00		      .byte.b	_00
   9159  7548		       00		      .byte.b	_00
   9160  7549		       00		      .byte.b	_00
   9161  754a		       00		      .byte.b	_00
   9162  754b		       00		      .byte.b	_00
   9163  754c		       00		      .byte.b	_00
   9164  754d		       00		      .byte.b	_00
   9165  754e		       00		      .byte.b	_00
   9166  754f		       34		      .byte.b	_34
   9167  7550		       34		      .byte.b	_34
   9168  7551		       34		      .byte.b	_34
   9169  7552		       34		      .byte.b	_34
   9170  7553		       34		      .byte.b	_34
   9171  7554		       34		      .byte.b	_34
   9172  7555		       34		      .byte.b	_34
   9173  7556		       34		      .byte.b	_34
   9174  7557		       34		      .byte.b	_34
   9175  7558		       34		      .byte.b	_34
   9176  7559		       34		      .byte.b	_34
   9177  755a		       34		      .byte.b	_34
   9178  755b		       34		      .byte.b	_34
   9179  755c		       34		      .byte.b	_34
   9180  755d		       34		      .byte.b	_34
   9181  755e		       34		      .byte.b	_34
   9182  755f		       34		      .byte.b	_34
   9183  7560		       34		      .byte.b	_34
   9184  7561		       34		      .byte.b	_34
   9185  7562		       f2		      .byte.b	_F2
   9186  7563		       f2		      .byte.b	_F2
   9187  7564		       f0		      .byte.b	_F0
   9188  7565		       f0		      .byte.b	_F0
   9189  7566		       f2		      .byte.b	_F2
   9190  7567		       f2		      .byte.b	_F2
   9191  7568		       f0		      .byte.b	_F0
   9192  7569		       f0		      .byte.b	_F0
   9193  756a		       f2		      .byte.b	_F2
   9194  756b		       f2		      .byte.b	_F2
   9195  756c		       f0		      .byte.b	_F0
   9196  756d		       f0		      .byte.b	_F0
   9197  756e		       00		      .byte.b	_00
   9198  756f		       00		      .byte.b	_00
   9199  7570				   playfieldcolorL0473
   9200  7570		       c2		      .byte.b	_C2
   9201  7571		       c2		      .byte.b	_C2
   9202  7572		       00		      .byte.b	_00
   9203  7573		       00		      .byte.b	_00
   9204  7574		       00		      .byte.b	_00
   9205  7575		       00		      .byte.b	_00
   9206  7576		       00		      .byte.b	_00
   9207  7577		       00		      .byte.b	_00
   9208  7578		       00		      .byte.b	_00
   9209  7579		       00		      .byte.b	_00
   9210  757a		       00		      .byte.b	_00
   9211  757b		       00		      .byte.b	_00
   9212  757c		       00		      .byte.b	_00
   9213  757d		       00		      .byte.b	_00
   9214  757e		       00		      .byte.b	_00
   9215  757f		       00		      .byte.b	_00
   9216  7580		       00		      .byte.b	_00
   9217  7581		       00		      .byte.b	_00
   9218  7582		       00		      .byte.b	_00
   9219  7583		       00		      .byte.b	_00
   9220  7584		       00		      .byte.b	_00
   9221  7585		       00		      .byte.b	_00
   9222  7586		       00		      .byte.b	_00
   9223  7587		       00		      .byte.b	_00
   9224  7588		       00		      .byte.b	_00
   9225  7589		       00		      .byte.b	_00
   9226  758a		       00		      .byte.b	_00
   9227  758b		       00		      .byte.b	_00
   9228  758c		       00		      .byte.b	_00
   9229  758d		       00		      .byte.b	_00
   9230  758e		       00		      .byte.b	_00
   9231  758f		       00		      .byte.b	_00
   9232  7590		       00		      .byte.b	_00
   9233  7591		       00		      .byte.b	_00
   9234  7592		       00		      .byte.b	_00
   9235  7593		       00		      .byte.b	_00
   9236  7594		       00		      .byte.b	_00
   9237  7595		       00		      .byte.b	_00
   9238  7596		       00		      .byte.b	_00
   9239  7597		       00		      .byte.b	_00
   9240  7598		       00		      .byte.b	_00
   9241  7599		       00		      .byte.b	_00
   9242  759a		       00		      .byte.b	_00
   9243  759b		       00		      .byte.b	_00
   9244  759c		       00		      .byte.b	_00
   9245  759d		       00		      .byte.b	_00
   9246  759e		       00		      .byte.b	_00
   9247  759f		       00		      .byte.b	_00
   9248  75a0		       00		      .byte.b	_00
   9249  75a1		       00		      .byte.b	_00
   9250  75a2		       00		      .byte.b	_00
   9251  75a3		       00		      .byte.b	_00
   9252  75a4		       00		      .byte.b	_00
   9253  75a5		       00		      .byte.b	_00
   9254  75a6		       00		      .byte.b	_00
   9255  75a7		       34		      .byte.b	_34
   9256  75a8		       34		      .byte.b	_34
   9257  75a9		       34		      .byte.b	_34
   9258  75aa		       34		      .byte.b	_34
   9259  75ab		       34		      .byte.b	_34
   9260  75ac		       34		      .byte.b	_34
   9261  75ad		       34		      .byte.b	_34
   9262  75ae		       34		      .byte.b	_34
   9263  75af		       34		      .byte.b	_34
   9264  75b0		       34		      .byte.b	_34
   9265  75b1		       34		      .byte.b	_34
   9266  75b2		       34		      .byte.b	_34
   9267  75b3		       34		      .byte.b	_34
   9268  75b4		       34		      .byte.b	_34
   9269  75b5		       34		      .byte.b	_34
   9270  75b6		       34		      .byte.b	_34
   9271  75b7		       34		      .byte.b	_34
   9272  75b8		       34		      .byte.b	_34
   9273  75b9		       34		      .byte.b	_34
   9274  75ba		       34		      .byte.b	_34
   9275  75bb		       34		      .byte.b	_34
   9276  75bc		       f0		      .byte.b	_F0
   9277  75bd		       f0		      .byte.b	_F0
   9278  75be		       f2		      .byte.b	_F2
   9279  75bf		       f2		      .byte.b	_F2
   9280  75c0		       f0		      .byte.b	_F0
   9281  75c1		       f0		      .byte.b	_F0
   9282  75c2		       f2		      .byte.b	_F2
   9283  75c3		       f2		      .byte.b	_F2
   9284  75c4		       f0		      .byte.b	_F0
   9285  75c5		       f0		      .byte.b	_F0
   9286  75c6		       00		      .byte.b	_00
   9287  75c7		       00		      .byte.b	_00
   9288  75c8				   playfieldcolorL0475
   9289  75c8		       c2		      .byte.b	_C2
   9290  75c9		       c2		      .byte.b	_C2
   9291  75ca		       00		      .byte.b	_00
   9292  75cb		       00		      .byte.b	_00
   9293  75cc		       00		      .byte.b	_00
   9294  75cd		       00		      .byte.b	_00
   9295  75ce		       00		      .byte.b	_00
   9296  75cf		       00		      .byte.b	_00
   9297  75d0		       00		      .byte.b	_00
   9298  75d1		       00		      .byte.b	_00
   9299  75d2		       00		      .byte.b	_00
   9300  75d3		       00		      .byte.b	_00
   9301  75d4		       00		      .byte.b	_00
   9302  75d5		       00		      .byte.b	_00
   9303  75d6		       00		      .byte.b	_00
   9304  75d7		       00		      .byte.b	_00
   9305  75d8		       00		      .byte.b	_00
   9306  75d9		       00		      .byte.b	_00
   9307  75da		       00		      .byte.b	_00
   9308  75db		       00		      .byte.b	_00
   9309  75dc		       00		      .byte.b	_00
   9310  75dd		       00		      .byte.b	_00
   9311  75de		       00		      .byte.b	_00
   9312  75df		       00		      .byte.b	_00
   9313  75e0		       00		      .byte.b	_00
   9314  75e1		       00		      .byte.b	_00
   9315  75e2		       00		      .byte.b	_00
   9316  75e3		       00		      .byte.b	_00
   9317  75e4		       00		      .byte.b	_00
   9318  75e5		       00		      .byte.b	_00
   9319  75e6		       00		      .byte.b	_00
   9320  75e7		       00		      .byte.b	_00
   9321  75e8		       00		      .byte.b	_00
   9322  75e9		       00		      .byte.b	_00
   9323  75ea		       00		      .byte.b	_00
   9324  75eb		       00		      .byte.b	_00
   9325  75ec		       00		      .byte.b	_00
   9326  75ed		       00		      .byte.b	_00
   9327  75ee		       00		      .byte.b	_00
   9328  75ef		       00		      .byte.b	_00
   9329  75f0		       00		      .byte.b	_00
   9330  75f1		       00		      .byte.b	_00
   9331  75f2		       00		      .byte.b	_00
   9332  75f3		       00		      .byte.b	_00
   9333  75f4		       00		      .byte.b	_00
   9334  75f5		       00		      .byte.b	_00
   9335  75f6		       00		      .byte.b	_00
   9336  75f7		       00		      .byte.b	_00
   9337  75f8		       00		      .byte.b	_00
   9338  75f9		       00		      .byte.b	_00
   9339  75fa		       00		      .byte.b	_00
   9340  75fb		       00		      .byte.b	_00
   9341  75fc		       00		      .byte.b	_00
   9342  75fd		       00		      .byte.b	_00
   9343  75fe		       00		      .byte.b	_00
   9344  75ff		       34		      .byte.b	_34
   9345  7600		       34		      .byte.b	_34
   9346  7601		       34		      .byte.b	_34
   9347  7602		       34		      .byte.b	_34
   9348  7603		       34		      .byte.b	_34
   9349  7604		       34		      .byte.b	_34
   9350  7605		       34		      .byte.b	_34
   9351  7606		       34		      .byte.b	_34
   9352  7607		       34		      .byte.b	_34
   9353  7608		       34		      .byte.b	_34
   9354  7609		       34		      .byte.b	_34
   9355  760a		       34		      .byte.b	_34
   9356  760b		       34		      .byte.b	_34
   9357  760c		       34		      .byte.b	_34
   9358  760d		       34		      .byte.b	_34
   9359  760e		       34		      .byte.b	_34
   9360  760f		       34		      .byte.b	_34
   9361  7610		       34		      .byte.b	_34
   9362  7611		       34		      .byte.b	_34
   9363  7612		       34		      .byte.b	_34
   9364  7613		       34		      .byte.b	_34
   9365  7614		       34		      .byte.b	_34
   9366  7615		       34		      .byte.b	_34
   9367  7616		       f2		      .byte.b	_F2
   9368  7617		       f2		      .byte.b	_F2
   9369  7618		       f0		      .byte.b	_F0
   9370  7619		       f0		      .byte.b	_F0
   9371  761a		       f2		      .byte.b	_F2
   9372  761b		       f2		      .byte.b	_F2
   9373  761c		       f0		      .byte.b	_F0
   9374  761d		       f0		      .byte.b	_F0
   9375  761e		       00		      .byte.b	_00
   9376  761f		       00		      .byte.b	_00
   9377  7620				   playfieldcolorL0477
   9378  7620		       c2		      .byte.b	_C2
   9379  7621		       c2		      .byte.b	_C2
   9380  7622		       00		      .byte.b	_00
   9381  7623		       00		      .byte.b	_00
   9382  7624		       00		      .byte.b	_00
   9383  7625		       00		      .byte.b	_00
   9384  7626		       00		      .byte.b	_00
   9385  7627		       00		      .byte.b	_00
   9386  7628		       00		      .byte.b	_00
   9387  7629		       00		      .byte.b	_00
   9388  762a		       00		      .byte.b	_00
   9389  762b		       00		      .byte.b	_00
   9390  762c		       00		      .byte.b	_00
   9391  762d		       00		      .byte.b	_00
   9392  762e		       00		      .byte.b	_00
   9393  762f		       00		      .byte.b	_00
   9394  7630		       00		      .byte.b	_00
   9395  7631		       00		      .byte.b	_00
   9396  7632		       00		      .byte.b	_00
   9397  7633		       00		      .byte.b	_00
   9398  7634		       00		      .byte.b	_00
   9399  7635		       00		      .byte.b	_00
   9400  7636		       00		      .byte.b	_00
   9401  7637		       00		      .byte.b	_00
   9402  7638		       00		      .byte.b	_00
   9403  7639		       00		      .byte.b	_00
   9404  763a		       00		      .byte.b	_00
   9405  763b		       00		      .byte.b	_00
   9406  763c		       00		      .byte.b	_00
   9407  763d		       00		      .byte.b	_00
   9408  763e		       00		      .byte.b	_00
   9409  763f		       00		      .byte.b	_00
   9410  7640		       00		      .byte.b	_00
   9411  7641		       00		      .byte.b	_00
   9412  7642		       00		      .byte.b	_00
   9413  7643		       00		      .byte.b	_00
   9414  7644		       00		      .byte.b	_00
   9415  7645		       00		      .byte.b	_00
   9416  7646		       00		      .byte.b	_00
   9417  7647		       00		      .byte.b	_00
   9418  7648		       00		      .byte.b	_00
   9419  7649		       00		      .byte.b	_00
   9420  764a		       00		      .byte.b	_00
   9421  764b		       00		      .byte.b	_00
   9422  764c		       00		      .byte.b	_00
   9423  764d		       00		      .byte.b	_00
   9424  764e		       00		      .byte.b	_00
   9425  764f		       00		      .byte.b	_00
   9426  7650		       00		      .byte.b	_00
   9427  7651		       00		      .byte.b	_00
   9428  7652		       00		      .byte.b	_00
   9429  7653		       00		      .byte.b	_00
   9430  7654		       00		      .byte.b	_00
   9431  7655		       00		      .byte.b	_00
   9432  7656		       00		      .byte.b	_00
   9433  7657		       40		      .byte.b	_40
   9434  7658		       40		      .byte.b	_40
   9435  7659		       40		      .byte.b	_40
   9436  765a		       40		      .byte.b	_40
   9437  765b		       40		      .byte.b	_40
   9438  765c		       40		      .byte.b	_40
   9439  765d		       40		      .byte.b	_40
   9440  765e		       40		      .byte.b	_40
   9441  765f		       40		      .byte.b	_40
   9442  7660		       40		      .byte.b	_40
   9443  7661		       40		      .byte.b	_40
   9444  7662		       40		      .byte.b	_40
   9445  7663		       40		      .byte.b	_40
   9446  7664		       40		      .byte.b	_40
   9447  7665		       40		      .byte.b	_40
   9448  7666		       40		      .byte.b	_40
   9449  7667		       40		      .byte.b	_40
   9450  7668		       40		      .byte.b	_40
   9451  7669		       40		      .byte.b	_40
   9452  766a		       40		      .byte.b	_40
   9453  766b		       40		      .byte.b	_40
   9454  766c		       40		      .byte.b	_40
   9455  766d		       40		      .byte.b	_40
   9456  766e		       40		      .byte.b	_40
   9457  766f		       40		      .byte.b	_40
   9458  7670		       f0		      .byte.b	_F0
   9459  7671		       f0		      .byte.b	_F0
   9460  7672		       f2		      .byte.b	_F2
   9461  7673		       f2		      .byte.b	_F2
   9462  7674		       f0		      .byte.b	_F0
   9463  7675		       f0		      .byte.b	_F0
   9464  7676		       00		      .byte.b	_00
   9465  7677		       00		      .byte.b	_00
   9466  7678				   playfieldcolorL0479
   9467  7678		       c2		      .byte.b	_C2
   9468  7679		       c2		      .byte.b	_C2
   9469  767a		       00		      .byte.b	_00
   9470  767b		       00		      .byte.b	_00
   9471  767c		       00		      .byte.b	_00
   9472  767d		       00		      .byte.b	_00
   9473  767e		       00		      .byte.b	_00
   9474  767f		       00		      .byte.b	_00
   9475  7680		       00		      .byte.b	_00
   9476  7681		       00		      .byte.b	_00
   9477  7682		       00		      .byte.b	_00
   9478  7683		       00		      .byte.b	_00
   9479  7684		       00		      .byte.b	_00
   9480  7685		       00		      .byte.b	_00
   9481  7686		       00		      .byte.b	_00
   9482  7687		       00		      .byte.b	_00
   9483  7688		       00		      .byte.b	_00
   9484  7689		       00		      .byte.b	_00
   9485  768a		       00		      .byte.b	_00
   9486  768b		       00		      .byte.b	_00
   9487  768c		       00		      .byte.b	_00
   9488  768d		       00		      .byte.b	_00
   9489  768e		       00		      .byte.b	_00
   9490  768f		       00		      .byte.b	_00
   9491  7690		       00		      .byte.b	_00
   9492  7691		       00		      .byte.b	_00
   9493  7692		       00		      .byte.b	_00
   9494  7693		       00		      .byte.b	_00
   9495  7694		       00		      .byte.b	_00
   9496  7695		       00		      .byte.b	_00
   9497  7696		       00		      .byte.b	_00
   9498  7697		       00		      .byte.b	_00
   9499  7698		       00		      .byte.b	_00
   9500  7699		       00		      .byte.b	_00
   9501  769a		       00		      .byte.b	_00
   9502  769b		       00		      .byte.b	_00
   9503  769c		       00		      .byte.b	_00
   9504  769d		       00		      .byte.b	_00
   9505  769e		       00		      .byte.b	_00
   9506  769f		       00		      .byte.b	_00
   9507  76a0		       00		      .byte.b	_00
   9508  76a1		       00		      .byte.b	_00
   9509  76a2		       00		      .byte.b	_00
   9510  76a3		       00		      .byte.b	_00
   9511  76a4		       00		      .byte.b	_00
   9512  76a5		       00		      .byte.b	_00
   9513  76a6		       00		      .byte.b	_00
   9514  76a7		       00		      .byte.b	_00
   9515  76a8		       00		      .byte.b	_00
   9516  76a9		       00		      .byte.b	_00
   9517  76aa		       00		      .byte.b	_00
   9518  76ab		       00		      .byte.b	_00
   9519  76ac		       00		      .byte.b	_00
   9520  76ad		       00		      .byte.b	_00
   9521  76ae		       00		      .byte.b	_00
   9522  76af		       40		      .byte.b	_40
   9523  76b0		       40		      .byte.b	_40
   9524  76b1		       40		      .byte.b	_40
   9525  76b2		       40		      .byte.b	_40
   9526  76b3		       40		      .byte.b	_40
   9527  76b4		       40		      .byte.b	_40
   9528  76b5		       40		      .byte.b	_40
   9529  76b6		       40		      .byte.b	_40
   9530  76b7		       40		      .byte.b	_40
   9531  76b8		       40		      .byte.b	_40
   9532  76b9		       40		      .byte.b	_40
   9533  76ba		       40		      .byte.b	_40
   9534  76bb		       40		      .byte.b	_40
   9535  76bc		       40		      .byte.b	_40
   9536  76bd		       40		      .byte.b	_40
   9537  76be		       40		      .byte.b	_40
   9538  76bf		       40		      .byte.b	_40
   9539  76c0		       40		      .byte.b	_40
   9540  76c1		       40		      .byte.b	_40
   9541  76c2		       40		      .byte.b	_40
   9542  76c3		       40		      .byte.b	_40
   9543  76c4		       40		      .byte.b	_40
   9544  76c5		       40		      .byte.b	_40
   9545  76c6		       40		      .byte.b	_40
   9546  76c7		       40		      .byte.b	_40
   9547  76c8		       40		      .byte.b	_40
   9548  76c9		       40		      .byte.b	_40
   9549  76ca		       40		      .byte.b	_40
   9550  76cb		       f2		      .byte.b	_F2
   9551  76cc		       f0		      .byte.b	_F0
   9552  76cd		       f0		      .byte.b	_F0
   9553  76ce		       00		      .byte.b	_00
   9554  76cf		       00		      .byte.b	_00
   9555  76d0				   playfieldcolorL0481
   9556  76d0		       c2		      .byte.b	_C2
   9557  76d1		       c2		      .byte.b	_C2
   9558  76d2		       00		      .byte.b	_00
   9559  76d3		       00		      .byte.b	_00
   9560  76d4		       00		      .byte.b	_00
   9561  76d5		       00		      .byte.b	_00
   9562  76d6		       00		      .byte.b	_00
   9563  76d7		       00		      .byte.b	_00
   9564  76d8		       00		      .byte.b	_00
   9565  76d9		       00		      .byte.b	_00
   9566  76da		       00		      .byte.b	_00
   9567  76db		       00		      .byte.b	_00
   9568  76dc		       00		      .byte.b	_00
   9569  76dd		       00		      .byte.b	_00
   9570  76de		       00		      .byte.b	_00
   9571  76df		       00		      .byte.b	_00
   9572  76e0		       00		      .byte.b	_00
   9573  76e1		       00		      .byte.b	_00
   9574  76e2		       00		      .byte.b	_00
   9575  76e3		       00		      .byte.b	_00
   9576  76e4		       00		      .byte.b	_00
   9577  76e5		       00		      .byte.b	_00
   9578  76e6		       00		      .byte.b	_00
   9579  76e7		       00		      .byte.b	_00
   9580  76e8		       00		      .byte.b	_00
   9581  76e9		       00		      .byte.b	_00
   9582  76ea		       00		      .byte.b	_00
   9583  76eb		       00		      .byte.b	_00
   9584  76ec		       00		      .byte.b	_00
   9585  76ed		       00		      .byte.b	_00
   9586  76ee		       00		      .byte.b	_00
   9587  76ef		       00		      .byte.b	_00
   9588  76f0		       00		      .byte.b	_00
   9589  76f1		       00		      .byte.b	_00
   9590  76f2		       00		      .byte.b	_00
   9591  76f3		       00		      .byte.b	_00
   9592  76f4		       00		      .byte.b	_00
   9593  76f5		       00		      .byte.b	_00
   9594  76f6		       00		      .byte.b	_00
   9595  76f7		       00		      .byte.b	_00
   9596  76f8		       00		      .byte.b	_00
   9597  76f9		       00		      .byte.b	_00
   9598  76fa		       00		      .byte.b	_00
   9599  76fb		       00		      .byte.b	_00
   9600  76fc		       00		      .byte.b	_00
   9601  76fd		       00		      .byte.b	_00
   9602  76fe		       00		      .byte.b	_00
   9603  76ff		       00		      .byte.b	_00
   9604  7700		       00		      .byte.b	_00
   9605  7701		       00		      .byte.b	_00
   9606  7702		       00		      .byte.b	_00
   9607  7703		       00		      .byte.b	_00
   9608  7704		       00		      .byte.b	_00
   9609  7705		       00		      .byte.b	_00
   9610  7706		       00		      .byte.b	_00
   9611  7707		       40		      .byte.b	_40
   9612  7708		       40		      .byte.b	_40
   9613  7709		       40		      .byte.b	_40
   9614  770a		       40		      .byte.b	_40
   9615  770b		       40		      .byte.b	_40
   9616  770c		       40		      .byte.b	_40
   9617  770d		       40		      .byte.b	_40
   9618  770e		       40		      .byte.b	_40
   9619  770f		       40		      .byte.b	_40
   9620  7710		       40		      .byte.b	_40
   9621  7711		       40		      .byte.b	_40
   9622  7712		       40		      .byte.b	_40
   9623  7713		       40		      .byte.b	_40
   9624  7714		       40		      .byte.b	_40
   9625  7715		       40		      .byte.b	_40
   9626  7716		       40		      .byte.b	_40
   9627  7717		       40		      .byte.b	_40
   9628  7718		       40		      .byte.b	_40
   9629  7719		       40		      .byte.b	_40
   9630  771a		       40		      .byte.b	_40
   9631  771b		       40		      .byte.b	_40
   9632  771c		       40		      .byte.b	_40
   9633  771d		       40		      .byte.b	_40
   9634  771e		       40		      .byte.b	_40
   9635  771f		       40		      .byte.b	_40
   9636  7720		       40		      .byte.b	_40
   9637  7721		       40		      .byte.b	_40
   9638  7722		       40		      .byte.b	_40
   9639  7723		       40		      .byte.b	_40
   9640  7724		       40		      .byte.b	_40
   9641  7725		       40		      .byte.b	_40
   9642  7726		       00		      .byte.b	_00
   9643  7727		       00		      .byte.b	_00
   9644  7728				   backgroundcolorL0520
   9645  7728		       0e		      .byte.b	_0E
   9646  7729		       42		      .byte.b	_42
   9647  772a		       42		      .byte.b	_42
   9648  772b		       42		      .byte.b	_42
   9649  772c		       42		      .byte.b	_42
   9650  772d		       42		      .byte.b	_42
   9651  772e		       42		      .byte.b	_42
   9652  772f		       42		      .byte.b	_42
   9653  7730		       42		      .byte.b	_42
   9654  7731		       42		      .byte.b	_42
   9655  7732		       42		      .byte.b	_42
   9656  7733		       42		      .byte.b	_42
   9657  7734		       42		      .byte.b	_42
   9658  7735		       42		      .byte.b	_42
   9659  7736		       42		      .byte.b	_42
   9660  7737		       42		      .byte.b	_42
   9661  7738		       42		      .byte.b	_42
   9662  7739		       42		      .byte.b	_42
   9663  773a		       42		      .byte.b	_42
   9664  773b		       42		      .byte.b	_42
   9665  773c		       42		      .byte.b	_42
   9666  773d		       42		      .byte.b	_42
   9667  773e		       42		      .byte.b	_42
   9668  773f		       42		      .byte.b	_42
   9669  7740		       42		      .byte.b	_42
   9670  7741		       42		      .byte.b	_42
   9671  7742		       42		      .byte.b	_42
   9672  7743		       42		      .byte.b	_42
   9673  7744		       42		      .byte.b	_42
   9674  7745		       42		      .byte.b	_42
   9675  7746		       42		      .byte.b	_42
   9676  7747		       42		      .byte.b	_42
   9677  7748		       42		      .byte.b	_42
   9678  7749		       42		      .byte.b	_42
   9679  774a		       42		      .byte.b	_42
   9680  774b		       42		      .byte.b	_42
   9681  774c		       42		      .byte.b	_42
   9682  774d		       42		      .byte.b	_42
   9683  774e		       42		      .byte.b	_42
   9684  774f		       42		      .byte.b	_42
   9685  7750		       42		      .byte.b	_42
   9686  7751		       42		      .byte.b	_42
   9687  7752		       42		      .byte.b	_42
   9688  7753		       42		      .byte.b	_42
   9689  7754		       42		      .byte.b	_42
   9690  7755		       42		      .byte.b	_42
   9691  7756		       42		      .byte.b	_42
   9692  7757		       42		      .byte.b	_42
   9693  7758		       42		      .byte.b	_42
   9694  7759		       42		      .byte.b	_42
   9695  775a		       42		      .byte.b	_42
   9696  775b		       42		      .byte.b	_42
   9697  775c		       42		      .byte.b	_42
   9698  775d		       42		      .byte.b	_42
   9699  775e		       42		      .byte.b	_42
   9700  775f		       42		      .byte.b	_42
   9701  7760		       42		      .byte.b	_42
   9702  7761		       42		      .byte.b	_42
   9703  7762		       42		      .byte.b	_42
   9704  7763		       42		      .byte.b	_42
   9705  7764		       42		      .byte.b	_42
   9706  7765		       42		      .byte.b	_42
   9707  7766		       42		      .byte.b	_42
   9708  7767		       42		      .byte.b	_42
   9709  7768		       42		      .byte.b	_42
   9710  7769		       42		      .byte.b	_42
   9711  776a		       42		      .byte.b	_42
   9712  776b		       42		      .byte.b	_42
   9713  776c		       42		      .byte.b	_42
   9714  776d		       42		      .byte.b	_42
   9715  776e		       42		      .byte.b	_42
   9716  776f		       42		      .byte.b	_42
   9717  7770		       42		      .byte.b	_42
   9718  7771		       42		      .byte.b	_42
   9719  7772		       42		      .byte.b	_42
   9720  7773		       42		      .byte.b	_42
   9721  7774		       42		      .byte.b	_42
   9722  7775		       42		      .byte.b	_42
   9723  7776		       42		      .byte.b	_42
   9724  7777		       42		      .byte.b	_42
   9725  7778		       42		      .byte.b	_42
   9726  7779		       42		      .byte.b	_42
   9727  777a		       42		      .byte.b	_42
   9728  777b		       42		      .byte.b	_42
   9729  777c		       42		      .byte.b	_42
   9730  777d		       42		      .byte.b	_42
   9731  777e		       42		      .byte.b	_42
   9732  777f		       42		      .byte.b	_42
   9733  7780				   backgroundcolorL0526
   9734  7780		       08		      .byte.b	_08
   9735  7781		       06		      .byte.b	_06
   9736  7782		       08		      .byte.b	_08
   9737  7783		       08		      .byte.b	_08
   9738  7784		       06		      .byte.b	_06
   9739  7785		       08		      .byte.b	_08
   9740  7786		       06		      .byte.b	_06
   9741  7787		       08		      .byte.b	_08
   9742  7788		       06		      .byte.b	_06
   9743  7789		       06		      .byte.b	_06
   9744  778a		       08		      .byte.b	_08
   9745  778b		       08		      .byte.b	_08
   9746  778c		       06		      .byte.b	_06
   9747  778d		       06		      .byte.b	_06
   9748  778e		       06		      .byte.b	_06
   9749  778f		       06		      .byte.b	_06
   9750  7790		       06		      .byte.b	_06
   9751  7791		       06		      .byte.b	_06
   9752  7792		       06		      .byte.b	_06
   9753  7793		       06		      .byte.b	_06
   9754  7794		       06		      .byte.b	_06
   9755  7795		       06		      .byte.b	_06
   9756  7796		       06		      .byte.b	_06
   9757  7797		       06		      .byte.b	_06
   9758  7798		       06		      .byte.b	_06
   9759  7799		       06		      .byte.b	_06
   9760  779a		       06		      .byte.b	_06
   9761  779b		       06		      .byte.b	_06
   9762  779c		       06		      .byte.b	_06
   9763  779d		       06		      .byte.b	_06
   9764  779e		       06		      .byte.b	_06
   9765  779f		       06		      .byte.b	_06
   9766  77a0		       06		      .byte.b	_06
   9767  77a1		       06		      .byte.b	_06
   9768  77a2		       06		      .byte.b	_06
   9769  77a3		       06		      .byte.b	_06
   9770  77a4		       06		      .byte.b	_06
   9771  77a5		       06		      .byte.b	_06
   9772  77a6		       06		      .byte.b	_06
   9773  77a7		       06		      .byte.b	_06
   9774  77a8		       06		      .byte.b	_06
   9775  77a9		       06		      .byte.b	_06
   9776  77aa		       06		      .byte.b	_06
   9777  77ab		       06		      .byte.b	_06
   9778  77ac		       06		      .byte.b	_06
   9779  77ad		       06		      .byte.b	_06
   9780  77ae		       06		      .byte.b	_06
   9781  77af		       06		      .byte.b	_06
   9782  77b0		       06		      .byte.b	_06
   9783  77b1		       06		      .byte.b	_06
   9784  77b2		       06		      .byte.b	_06
   9785  77b3		       06		      .byte.b	_06
   9786  77b4		       06		      .byte.b	_06
   9787  77b5		       06		      .byte.b	_06
   9788  77b6		       06		      .byte.b	_06
   9789  77b7		       06		      .byte.b	_06
   9790  77b8		       06		      .byte.b	_06
   9791  77b9		       06		      .byte.b	_06
   9792  77ba		       06		      .byte.b	_06
   9793  77bb		       06		      .byte.b	_06
   9794  77bc		       06		      .byte.b	_06
   9795  77bd		       06		      .byte.b	_06
   9796  77be		       06		      .byte.b	_06
   9797  77bf		       06		      .byte.b	_06
   9798  77c0		       06		      .byte.b	_06
   9799  77c1		       06		      .byte.b	_06
   9800  77c2		       06		      .byte.b	_06
   9801  77c3		       06		      .byte.b	_06
   9802  77c4		       06		      .byte.b	_06
   9803  77c5		       06		      .byte.b	_06
   9804  77c6		       06		      .byte.b	_06
   9805  77c7		       06		      .byte.b	_06
   9806  77c8		       06		      .byte.b	_06
   9807  77c9		       06		      .byte.b	_06
   9808  77ca		       06		      .byte.b	_06
   9809  77cb		       06		      .byte.b	_06
   9810  77cc		       06		      .byte.b	_06
   9811  77cd		       06		      .byte.b	_06
   9812  77ce		       06		      .byte.b	_06
   9813  77cf		       06		      .byte.b	_06
   9814  77d0		       06		      .byte.b	_06
   9815  77d1		       06		      .byte.b	_06
   9816  77d2		       06		      .byte.b	_06
   9817  77d3		       06		      .byte.b	_06
   9818  77d4		       06		      .byte.b	_06
   9819  77d5		       06		      .byte.b	_06
   9820  77d6		       c6		      .byte.b	_C6
   9821  77d7		       c6		      .byte.b	_C6
   9822  77d8				   playerL0530_0
   9823  77d8		       00		      .byte.b	%00000000
   9824  77d9		       42		      .byte.b	%01000010
   9825  77da		       42		      .byte.b	%01000010
   9826  77db		       5a		      .byte.b	%01011010
   9827  77dc		       7e		      .byte.b	%01111110
   9828  77dd		       24		      .byte.b	%00100100
   9829  77de		       18		      .byte.b	%00011000
   9830  77df		       18		      .byte.b	%00011000
   9831  77e0		       3c		      .byte.b	%00111100
   9832  77e1		       5a		      .byte.b	%01011010
   9833  77e2		       18		      .byte.b	%00011000
   9834  77e3		       18		      .byte.b	%00011000
   9835  77e4		       18		      .byte.b	%00011000
   9836  77e5		       3c		      .byte.b	%00111100
   9837  77e6		       24		      .byte.b	%00100100
   9838  77e7				   playercolorL0531_0
   9839  77e7		       00		      .byte.b	$00	;
   9840  77e8		       00		      .byte.b	$00	;
   9841  77e9		       00		      .byte.b	$00	;
   9842  77ea		       00		      .byte.b	$00	;
   9843  77eb		       00		      .byte.b	$00	;
   9844  77ec		       0e		      .byte.b	$0E	;
   9845  77ed		       70		      .byte.b	$70	;
   9846  77ee		       70		      .byte.b	$70	;
   9847  77ef		       70		      .byte.b	$70	;
   9848  77f0		       94		      .byte.b	$94	;
   9849  77f1		       70		      .byte.b	$70	;
   9850  77f2		       70		      .byte.b	$70	;
   9851  77f3		       70		      .byte.b	$70	;
   9852  77f4		       70		      .byte.b	$70	;
   9853  77f5		       40		      .byte.b	$40	;
   9854  77f6				   playerL0533_0
   9855  77f6		       18		      .byte.b	%00011000
   9856  77f7		       bd		      .byte.b	%10111101
   9857  77f8		       99		      .byte.b	%10011001
   9858  77f9		       5a		      .byte.b	%01011010
   9859  77fa		       7e		      .byte.b	%01111110
   9860  77fb		       24		      .byte.b	%00100100
   9861  77fc		       18		      .byte.b	%00011000
   9862  77fd		       18		      .byte.b	%00011000
   9863  77fe		       3c		      .byte.b	%00111100
   9864  77ff		       5a		      .byte.b	%01011010
   9865  7800		       18		      .byte.b	%00011000
   9866  7801		       18		      .byte.b	%00011000
   9867  7802		       18		      .byte.b	%00011000
   9868  7803		       3c		      .byte.b	%00111100
   9869  7804		       24		      .byte.b	%00100100
   9870  7805				   playercolorL0534_0
   9871  7805		       40		      .byte.b	$40	;
   9872  7806		       40		      .byte.b	$40	;
   9873  7807		       40		      .byte.b	$40	;
   9874  7808		       40		      .byte.b	$40	;
   9875  7809		       40		      .byte.b	$40	;
   9876  780a		       f6		      .byte.b	$F6	;
   9877  780b		       70		      .byte.b	$70	;
   9878  780c		       70		      .byte.b	$70	;
   9879  780d		       70		      .byte.b	$70	;
   9880  780e		       94		      .byte.b	$94	;
   9881  780f		       70		      .byte.b	$70	;
   9882  7810		       70		      .byte.b	$70	;
   9883  7811		       70		      .byte.b	$70	;
   9884  7812		       70		      .byte.b	$70	;
   9885  7813		       00		      .byte.b	$00	;
   9886  7814				   playerL0536_0
   9887  7814		       00		      .byte.b	%00000000
   9888  7815		       42		      .byte.b	%01000010
   9889  7816		       42		      .byte.b	%01000010
   9890  7817		       5a		      .byte.b	%01011010
   9891  7818		       7e		      .byte.b	%01111110
   9892  7819		       24		      .byte.b	%00100100
   9893  781a		       18		      .byte.b	%00011000
   9894  781b		       19		      .byte.b	%00011001
   9895  781c		       3d		      .byte.b	%00111101
   9896  781d		       5b		      .byte.b	%01011011
   9897  781e		       19		      .byte.b	%00011001
   9898  781f		       19		      .byte.b	%00011001
   9899  7820		       19		      .byte.b	%00011001
   9900  7821		       3c		      .byte.b	%00111100
   9901  7822		       24		      .byte.b	%00100100
   9902  7823				   playercolorL0537_0
   9903  7823		       00		      .byte.b	$00	;
   9904  7824		       00		      .byte.b	$00	;
   9905  7825		       00		      .byte.b	$00	;
   9906  7826		       00		      .byte.b	$00	;
   9907  7827		       00		      .byte.b	$00	;
   9908  7828		       70		      .byte.b	$70	;
   9909  7829		       70		      .byte.b	$70	;
   9910  782a		       40		      .byte.b	$40	;
   9911  782b		       40		      .byte.b	$40	;
   9912  782c		       40		      .byte.b	$40	;
   9913  782d		       40		      .byte.b	$40	;
   9914  782e		       40		      .byte.b	$40	;
   9915  782f		       40		      .byte.b	$40	;
   9916  7830		       70		      .byte.b	$70	;
   9917  7831		       c6		      .byte.b	$C6	;
   9918  7832				   playerL0539_0
   9919  7832		       00		      .byte.b	%00000000
   9920  7833		       42		      .byte.b	%01000010
   9921  7834		       42		      .byte.b	%01000010
   9922  7835		       5a		      .byte.b	%01011010
   9923  7836		       7e		      .byte.b	%01111110
   9924  7837		       24		      .byte.b	%00100100
   9925  7838		       18		      .byte.b	%00011000
   9926  7839		       19		      .byte.b	%00011001
   9927  783a		       3d		      .byte.b	%00111101
   9928  783b		       5b		      .byte.b	%01011011
   9929  783c		       19		      .byte.b	%00011001
   9930  783d		       19		      .byte.b	%00011001
   9931  783e		       19		      .byte.b	%00011001
   9932  783f		       3c		      .byte.b	%00111100
   9933  7840		       24		      .byte.b	%00100100
   9934  7841				   playercolorL0540_0
   9935  7841		       00		      .byte.b	$00	;
   9936  7842		       00		      .byte.b	$00	;
   9937  7843		       00		      .byte.b	$00	;
   9938  7844		       00		      .byte.b	$00	;
   9939  7845		       00		      .byte.b	$00	;
   9940  7846		       70		      .byte.b	$70	;
   9941  7847		       70		      .byte.b	$70	;
   9942  7848		       40		      .byte.b	$40	;
   9943  7849		       40		      .byte.b	$40	;
   9944  784a		       40		      .byte.b	$40	;
   9945  784b		       40		      .byte.b	$40	;
   9946  784c		       40		      .byte.b	$40	;
   9947  784d		       40		      .byte.b	$40	;
   9948  784e		       70		      .byte.b	$70	;
   9949  784f		       c5		      .byte.b	$C5	;
   9950  7850				   playercolor254then_0
   9951  7850		       1c		      .byte.b	$1C	;
   9952  7851		       1c		      .byte.b	$1C	;
   9953  7852		       1c		      .byte.b	$1C	;
   9954  7853		       1c		      .byte.b	$1C	;
   9955  7854		       1c		      .byte.b	$1C	;
   9956  7855		       1c		      .byte.b	$1C	;
   9957  7856		       1c		      .byte.b	$1C	;
   9958  7857		       1c		      .byte.b	$1C	;
   9959  7858		       1c		      .byte.b	$1C	;
   9960  7859		       1c		      .byte.b	$1C	;
   9961  785a		       1c		      .byte.b	$1C	;  
   9962  785b		       1c		      .byte.b	$1C	;
   9963  785c		       1c		      .byte.b	$1C	;
   9964  785d		       1c		      .byte.b	$1C	;
   9965  785e		       1c		      .byte.b	$1C	;
   9966  785f		       1c		      .byte.b	$1C
   9967  7860				   playercolor255then_0
   9968  7860		       cc		      .byte.b	$CC	;
   9969  7861		       cc		      .byte.b	$CC	;
   9970  7862		       cc		      .byte.b	$CC	;
   9971  7863		       cc		      .byte.b	$CC	;
   9972  7864		       cc		      .byte.b	$CC	;
   9973  7865		       cc		      .byte.b	$CC	;
   9974  7866		       cc		      .byte.b	$CC	;
   9975  7867		       cc		      .byte.b	$CC	;
   9976  7868		       cc		      .byte.b	$CC	;
   9977  7869		       cc		      .byte.b	$CC	;
   9978  786a		       cc		      .byte.b	$CC	;  
   9979  786b		       cc		      .byte.b	$CC	;
   9980  786c		       cc		      .byte.b	$CC	;
   9981  786d		       cc		      .byte.b	$CC	;
   9982  786e		       cc		      .byte.b	$CC	;
   9983  786f		       cc		      .byte.b	$CC
   9984  7870		       cc		      .byte.b	$CC	;
   9985  7871		       cc		      .byte.b	$CC
   9986  7872				   player257then_2
   9987  7872		       81		      .byte.b	%10000001
   9988  7873		       42		      .byte.b	%01000010
   9989  7874		       5a		      .byte.b	%01011010
   9990  7875		       5a		      .byte.b	%01011010
   9991  7876		       24		      .byte.b	%00100100
   9992  7877		       99		      .byte.b	%10011001
   9993  7878		       5a		      .byte.b	%01011010
   9994  7879		       24		      .byte.b	%00100100
   9995  787a				   player259then_2
   9996  787a		       00		      .byte.b	%00000000
   9997  787b		       40		      .byte.b	%01000000
   9998  787c		       00		      .byte.b	%00000000
   9999  787d		       30		      .byte.b	%00110000
  10000  787e		       14		      .byte.b	%00010100
  10001  787f		       00		      .byte.b	%00000000
  10002  7880		       48		      .byte.b	%01001000
  10003  7881		       00		      .byte.b	%00000000
  10004  7882				   player261then_3
  10005  7882		       18		      .byte.b	%00011000
  10006  7883		       7e		      .byte.b	%01111110
  10007  7884		       5a		      .byte.b	%01011010
  10008  7885		       db		      .byte.b	%11011011
  10009  7886		       ff		      .byte.b	%11111111
  10010  7887		       3c		      .byte.b	%00111100
  10011  7888		       18		      .byte.b	%00011000
  10012  7889		       00		      .byte.b	%00000000
  10013  788a				   player263then_3
  10014  788a		       00		      .byte.b	%00000000
  10015  788b		       40		      .byte.b	%01000000
  10016  788c		       00		      .byte.b	%00000000
  10017  788d		       30		      .byte.b	%00110000
  10018  788e		       14		      .byte.b	%00010100
  10019  788f		       00		      .byte.b	%00000000
  10020  7890		       48		      .byte.b	%01001000
  10021  7891		       00		      .byte.b	%00000000
  10022  7892				   player265then_1
  10023  7892		       81		      .byte.b	%10000001
  10024  7893		       42		      .byte.b	%01000010
  10025  7894		       5a		      .byte.b	%01011010
  10026  7895		       5a		      .byte.b	%01011010
  10027  7896		       24		      .byte.b	%00100100
  10028  7897		       99		      .byte.b	%10011001
  10029  7898		       5a		      .byte.b	%01011010
  10030  7899		       24		      .byte.b	%00100100
  10031  789a				   player267then_1
  10032  789a		       00		      .byte.b	%00000000
  10033  789b		       40		      .byte.b	%01000000
  10034  789c		       00		      .byte.b	%00000000
  10035  789d		       30		      .byte.b	%00110000
  10036  789e		       14		      .byte.b	%00010100
  10037  789f		       00		      .byte.b	%00000000
  10038  78a0		       48		      .byte.b	%01001000
  10039  78a1		       00		      .byte.b	%00000000
  10040  78a2				   playercolor268then_2
  10041  78a2		       b4		      .byte.b	$B4	;
  10042  78a3		       d0		      .byte.b	$D0	;
  10043  78a4		       d0		      .byte.b	$D0	;
  10044  78a5		       d0		      .byte.b	$D0	;
  10045  78a6		       d0		      .byte.b	$D0	;
  10046  78a7		       d0		      .byte.b	$D0	;
  10047  78a8		       c2		      .byte.b	$C2	;
  10048  78a9		       c6		      .byte.b	$C6	;
  10049  78aa				   playercolor269then_3
  10050  78aa		       30		      .byte.b	$30	;
  10051  78ab		       e0		      .byte.b	$E0	;
  10052  78ac		       b2		      .byte.b	$B2	;
  10053  78ad		       c4		      .byte.b	$C4	;
  10054  78ae		       b0		      .byte.b	$B0	;
  10055  78af		       70		      .byte.b	$70	;
  10056  78b0		       1e		      .byte.b	$1E	;
  10057  78b1		       0e		      .byte.b	$0E	;
  10058  78b2				   playercolor270then_1
  10059  78b2		       30		      .byte.b	$30	;
  10060  78b3		       44		      .byte.b	$44	;
  10061  78b4		       b2		      .byte.b	$B2	;
  10062  78b5		       c4		      .byte.b	$C4	;
  10063  78b6		       42		      .byte.b	$42	;
  10064  78b7		       c0		      .byte.b	$C0	;
  10065  78b8		       30		      .byte.b	$30	;
  10066  78b9		       0e		      .byte.b	$0E	;
  10067  78ba				   player272then_2
  10068  78ba		       42		      .byte.b	%01000010
  10069  78bb		       42		      .byte.b	%01000010
  10070  78bc		       5a		      .byte.b	%01011010
  10071  78bd		       5a		      .byte.b	%01011010
  10072  78be		       24		      .byte.b	%00100100
  10073  78bf		       18		      .byte.b	%00011000
  10074  78c0		       db		      .byte.b	%11011011
  10075  78c1		       24		      .byte.b	%00100100
  10076  78c2				   player274then_2
  10077  78c2		       04		      .byte.b	%00000100
  10078  78c3		       40		      .byte.b	%01000000
  10079  78c4		       01		      .byte.b	%00000001
  10080  78c5		       00		      .byte.b	%00000000
  10081  78c6		       02		      .byte.b	%00000010
  10082  78c7		       80		      .byte.b	%10000000
  10083  78c8		       02		      .byte.b	%00000010
  10084  78c9		       20		      .byte.b	%00100000
  10085  78ca				   player276then_3
  10086  78ca		       00		      .byte.b	%00000000
  10087  78cb		       7e		      .byte.b	%01111110
  10088  78cc		       5a		      .byte.b	%01011010
  10089  78cd		       db		      .byte.b	%11011011
  10090  78ce		       ff		      .byte.b	%11111111
  10091  78cf		       3c		      .byte.b	%00111100
  10092  78d0		       18		      .byte.b	%00011000
  10093  78d1		       00		      .byte.b	%00000000
  10094  78d2				   player278then_3
  10095  78d2		       04		      .byte.b	%00000100
  10096  78d3		       40		      .byte.b	%01000000
  10097  78d4		       01		      .byte.b	%00000001
  10098  78d5		       00		      .byte.b	%00000000
  10099  78d6		       02		      .byte.b	%00000010
  10100  78d7		       80		      .byte.b	%10000000
  10101  78d8		       02		      .byte.b	%00000010
  10102  78d9		       20		      .byte.b	%00100000
  10103  78da				   player280then_1
  10104  78da		       42		      .byte.b	%01000010
  10105  78db		       42		      .byte.b	%01000010
  10106  78dc		       5a		      .byte.b	%01011010
  10107  78dd		       5a		      .byte.b	%01011010
  10108  78de		       24		      .byte.b	%00100100
  10109  78df		       18		      .byte.b	%00011000
  10110  78e0		       db		      .byte.b	%11011011
  10111  78e1		       24		      .byte.b	%00100100
  10112  78e2				   player282then_1
  10113  78e2		       04		      .byte.b	%00000100
  10114  78e3		       40		      .byte.b	%01000000
  10115  78e4		       01		      .byte.b	%00000001
  10116  78e5		       00		      .byte.b	%00000000
  10117  78e6		       02		      .byte.b	%00000010
  10118  78e7		       80		      .byte.b	%10000000
  10119  78e8		       02		      .byte.b	%00000010
  10120  78e9		       20		      .byte.b	%00100000
  10121  78ea				   playercolor283then_2
  10122  78ea		       b4		      .byte.b	$B4	;
  10123  78eb		       d0		      .byte.b	$D0	;
  10124  78ec		       d0		      .byte.b	$D0	;
  10125  78ed		       d0		      .byte.b	$D0	;
  10126  78ee		       d0		      .byte.b	$D0	;
  10127  78ef		       d0		      .byte.b	$D0	;
  10128  78f0		       c2		      .byte.b	$C2	;
  10129  78f1		       c4		      .byte.b	$C4	;
  10130  78f2				   playercolor284then_3
  10131  78f2		       30		      .byte.b	$30	;
  10132  78f3		       e0		      .byte.b	$E0	;
  10133  78f4		       b2		      .byte.b	$B2	;
  10134  78f5		       c4		      .byte.b	$C4	;
  10135  78f6		       b0		      .byte.b	$B0	;
  10136  78f7		       70		      .byte.b	$70	;
  10137  78f8		       1e		      .byte.b	$1E	;
  10138  78f9		       0e		      .byte.b	$0E	;
  10139  78fa				   playercolor285then_1
  10140  78fa		       30		      .byte.b	$30	;
  10141  78fb		       44		      .byte.b	$44	;
  10142  78fc		       b2		      .byte.b	$B2	;
  10143  78fd		       c4		      .byte.b	$C4	;
  10144  78fe		       42		      .byte.b	$42	;
  10145  78ff		       c0		      .byte.b	$C0	;
  10146  7900		       30		      .byte.b	$30	;
  10147  7901		       0e		      .byte.b	$0E	;
  10148  7902				   player287then_2
  10149  7902		       24		      .byte.b	%00100100
  10150  7903		       42		      .byte.b	%01000010
  10151  7904		       5a		      .byte.b	%01011010
  10152  7905		       5a		      .byte.b	%01011010
  10153  7906		       24		      .byte.b	%00100100
  10154  7907		       99		      .byte.b	%10011001
  10155  7908		       5a		      .byte.b	%01011010
  10156  7909		       24		      .byte.b	%00100100
  10157  790a				   player289then_2
  10158  790a		       08		      .byte.b	%00001000
  10159  790b		       00		      .byte.b	%00000000
  10160  790c		       00		      .byte.b	%00000000
  10161  790d		       00		      .byte.b	%00000000
  10162  790e		       80		      .byte.b	%10000000
  10163  790f		       00		      .byte.b	%00000000
  10164  7910		       00		      .byte.b	%00000000
  10165  7911		       21		      .byte.b	%00100001
  10166  7912				   player290then_3
  10167  7912		       18		      .byte.b	%00011000
  10168  7913		       7e		      .byte.b	%01111110
  10169  7914		       7e		      .byte.b	%01111110
  10170  7915		       ff		      .byte.b	%11111111
  10171  7916		       ff		      .byte.b	%11111111
  10172  7917		       3c		      .byte.b	%00111100
  10173  7918		       18		      .byte.b	%00011000
  10174  7919		       00		      .byte.b	%00000000
  10175  791a				   player292then_1
  10176  791a		       24		      .byte.b	%00100100
  10177  791b		       42		      .byte.b	%01000010
  10178  791c		       5a		      .byte.b	%01011010
  10179  791d		       5a		      .byte.b	%01011010
  10180  791e		       24		      .byte.b	%00100100
  10181  791f		       99		      .byte.b	%10011001
  10182  7920		       5a		      .byte.b	%01011010
  10183  7921		       24		      .byte.b	%00100100
  10184  7922				   player294then_1
  10185  7922		       08		      .byte.b	%00001000
  10186  7923		       00		      .byte.b	%00000000
  10187  7924		       00		      .byte.b	%00000000
  10188  7925		       00		      .byte.b	%00000000
  10189  7926		       80		      .byte.b	%10000000
  10190  7927		       00		      .byte.b	%00000000
  10191  7928		       00		      .byte.b	%00000000
  10192  7929		       21		      .byte.b	%00100001
  10193  792a				   playercolor295then_2
  10194  792a		       b4		      .byte.b	$B4	;
  10195  792b		       d0		      .byte.b	$D0	;
  10196  792c		       d0		      .byte.b	$D0	;
  10197  792d		       d0		      .byte.b	$D0	;
  10198  792e		       d0		      .byte.b	$D0	;
  10199  792f		       d0		      .byte.b	$D0	;
  10200  7930		       c2		      .byte.b	$C2	;
  10201  7931		       c6		      .byte.b	$C6	;
  10202  7932				   playercolor296then_3
  10203  7932		       16		      .byte.b	$16	;
  10204  7933		       e0		      .byte.b	$E0	;
  10205  7934		       b2		      .byte.b	$B2	;
  10206  7935		       c4		      .byte.b	$C4	;
  10207  7936		       b0		      .byte.b	$B0	;
  10208  7937		       70		      .byte.b	$70	;
  10209  7938		       30		      .byte.b	$30	;
  10210  7939		       0e		      .byte.b	$0E	;
  10211  793a				   playercolor297then_1
  10212  793a		       30		      .byte.b	$30	;
  10213  793b		       44		      .byte.b	$44	;
  10214  793c		       b2		      .byte.b	$B2	;
  10215  793d		       c4		      .byte.b	$C4	;
  10216  793e		       42		      .byte.b	$42	;
  10217  793f		       c0		      .byte.b	$C0	;
  10218  7940		       30		      .byte.b	$30	;
  10219  7941		       0e		      .byte.b	$0E	;
  10220  7942				   player298then_5
  10221  7942		       09		      .byte.b	%00001001
  10222  7943		       04		      .byte.b	%00000100
  10223  7944		       08		      .byte.b	%00001000
  10224  7945		       0c		      .byte.b	%00001100
  10225  7946		       1c		      .byte.b	%00011100
  10226  7947		       1c		      .byte.b	%00011100
  10227  7948		       1c		      .byte.b	%00011100
  10228  7949		       18		      .byte.b	%00011000
  10229  794a				   playercolor299then_5
  10230  794a		       0e		      .byte.b	$0E	;
  10231  794b		       06		      .byte.b	$06	;
  10232  794c		       40		      .byte.b	$40	;
  10233  794d		       32		      .byte.b	$32	;
  10234  794e		       40		      .byte.b	$40	;
  10235  794f		       34		      .byte.b	$34	;
  10236  7950		       42		      .byte.b	$42	;
  10237  7951		       40		      .byte.b	$40	;
  10238  7952				   player300then_5
  10239  7952		       02		      .byte.b	%00000010
  10240  7953		       05		      .byte.b	%00000101
  10241  7954		       0c		      .byte.b	%00001100
  10242  7955		       0e		      .byte.b	%00001110
  10243  7956		       0e		      .byte.b	%00001110
  10244  7957		       0c		      .byte.b	%00001100
  10245  7958		       1c		      .byte.b	%00011100
  10246  7959		       18		      .byte.b	%00011000
  10247  795a				   playercolor301then_5
  10248  795a		       0e		      .byte.b	$0E	;
  10249  795b		       06		      .byte.b	$06	;
  10250  795c		       40		      .byte.b	$40	;
  10251  795d		       32		      .byte.b	$32	;
  10252  795e		       40		      .byte.b	$40	;
  10253  795f		       34		      .byte.b	$34	;
  10254  7960		       42		      .byte.b	$42	;
  10255  7961		       40		      .byte.b	$40	;
  10256  7962				   player302then_5
  10257  7962		       05		      .byte.b	%00000101
  10258  7963		       08		      .byte.b	%00001000
  10259  7964		       06		      .byte.b	%00000110
  10260  7965		       0c		      .byte.b	%00001100
  10261  7966		       0e		      .byte.b	%00001110
  10262  7967		       1c		      .byte.b	%00011100
  10263  7968		       18		      .byte.b	%00011000
  10264  7969		       18		      .byte.b	%00011000
  10265  796a				   playercolor303then_5
  10266  796a		       0e		      .byte.b	$0E	;
  10267  796b		       06		      .byte.b	$06	;
  10268  796c		       40		      .byte.b	$40	;
  10269  796d		       32		      .byte.b	$32	;
  10270  796e		       40		      .byte.b	$40	;
  10271  796f		       34		      .byte.b	$34	;
  10272  7970		       42		      .byte.b	$42	;
  10273  7971		       40		      .byte.b	$40	;
  10274  7972				   player305then_4
  10275  7972		       fe		      .byte.b	%11111110
  10276  7973		       82		      .byte.b	%10000010
  10277  7974		       92		      .byte.b	%10010010
  10278  7975		       92		      .byte.b	%10010010
  10279  7976		       ba		      .byte.b	%10111010
  10280  7977		       92		      .byte.b	%10010010
  10281  7978		       92		      .byte.b	%10010010
  10282  7979		       82		      .byte.b	%10000010
  10283  797a		       fe		      .byte.b	%11111110
  10284  797b				   playercolor307then_4
  10285  797b		       30		      .byte.b	$30	;
  10286  797c		       30		      .byte.b	$30	;
  10287  797d		       30		      .byte.b	$30	;
  10288  797e		       30		      .byte.b	$30	;
  10289  797f		       30		      .byte.b	$30	;
  10290  7980		       30		      .byte.b	$30	;
  10291  7981		       30		      .byte.b	$30	;
  10292  7982		       40		      .byte.b	$40	;
  10293  7983		       40		      .byte.b	$40	;
  10294  7984				   player309then_4
  10295  7984		       3c		      .byte.b	%00111100
  10296  7985		       5a		      .byte.b	%01011010
  10297  7986		       99		      .byte.b	%10011001
  10298  7987		       3c		      .byte.b	%00111100
  10299  7988		       5a		      .byte.b	%01011010
  10300  7989		       99		      .byte.b	%10011001
  10301  798a		       18		      .byte.b	%00011000
  10302  798b		       3c		      .byte.b	%00111100
  10303  798c		       5a		      .byte.b	%01011010
  10304  798d				   playercolor311then_4
  10305  798d		       d0		      .byte.b	$D0	;
  10306  798e		       d0		      .byte.b	$D0	;
  10307  798f		       d2		      .byte.b	$D2	;
  10308  7990		       d2		      .byte.b	$D2	;
  10309  7991		       d0		      .byte.b	$D0	;
  10310  7992		       d2		      .byte.b	$D2	;
  10311  7993		       d2		      .byte.b	$D2	;
  10312  7994		       d0		      .byte.b	$D0	;
  10313  7995		       d0		      .byte.b	$D0	;
  10314  7996				   playercolor313then_4
  10315  7996		       d2		      .byte.b	$D2	;
  10316  7997		       d2		      .byte.b	$D2	;
  10317  7998		       d0		      .byte.b	$D0	;
  10318  7999		       d0		      .byte.b	$D0	;
  10319  799a		       d2		      .byte.b	$D2	;
  10320  799b		       d0		      .byte.b	$D0	;
  10321  799c		       d0		      .byte.b	$D0	;
  10322  799d		       d2		      .byte.b	$D2	;
  10323  799e		       d2		      .byte.b	$D2	;
  10324  799f				   player315then_4
  10325  799f		       18		      .byte.b	%00011000
  10326  79a0		       10		      .byte.b	%00010000
  10327  79a1		       38		      .byte.b	%00111000
  10328  79a2		       7c		      .byte.b	%01111100
  10329  79a3		       fe		      .byte.b	%11111110
  10330  79a4		       fe		      .byte.b	%11111110
  10331  79a5		       fe		      .byte.b	%11111110
  10332  79a6		       7c		      .byte.b	%01111100
  10333  79a7		       38		      .byte.b	%00111000
  10334  79a8				   playercolor317then_4
  10335  79a8		       30		      .byte.b	$30	;
  10336  79a9		       30		      .byte.b	$30	;
  10337  79aa		       00		      .byte.b	$00	;
  10338  79ab		       00		      .byte.b	$00	;
  10339  79ac		       00		      .byte.b	$00	;
  10340  79ad		       00		      .byte.b	$00	;
  10341  79ae		       00		      .byte.b	$00	;
  10342  79af		       00		      .byte.b	$00	;
  10343  79b0		       00		      .byte.b	$00	;
  10344  79b1				   playercolor319then_4
  10345  79b1		       0f		      .byte.b	$0F	;
  10346  79b2		       0f		      .byte.b	$0F	;
  10347  79b3		       00		      .byte.b	$00	;
  10348  79b4		       00		      .byte.b	$00	;
  10349  79b5		       00		      .byte.b	$00	;
  10350  79b6		       00		      .byte.b	$00	;
  10351  79b7		       00		      .byte.b	$00	;
  10352  79b8		       00		      .byte.b	$00	;
  10353  79b9		       00		      .byte.b	$00	;
  10354  79ba				   PF_data2
  10355  79ba		       00		      .byte.b	%00000000
  10356  79bb		       00		      .byte.b	%00000000
  10357  79bc		       00		      .byte.b	%00000000
  10358  79bd		       00		      .byte.b	%00000000
  10359  79be		       00		      .byte.b	%00000000
  10360  79bf		       00		      .byte.b	%00000000
  10361  79c0		       00		      .byte.b	%00000000
  10362  79c1		       00		      .byte.b	%00000000
  10363  79c2		       00		      .byte.b	%00000000
  10364  79c3		       00		      .byte.b	%00000000
  10365  79c4		       00		      .byte.b	%00000000
  10366  79c5		       00		      .byte.b	%00000000
  10367  79c6		       00		      .byte.b	%00000000
  10368  79c7		       1e		      .byte.b	%00011110
  10369  79c8		       1e		      .byte.b	%00011110
  10370  79c9		       02		      .byte.b	%00000010
  10371  79ca		       02		      .byte.b	%00000010
  10372  79cb		       02		      .byte.b	%00000010
  10373  79cc		       02		      .byte.b	%00000010
  10374  79cd		       02		      .byte.b	%00000010
  10375  79ce		       02		      .byte.b	%00000010
  10376  79cf		       02		      .byte.b	%00000010
  10377  79d0		       02		      .byte.b	%00000010
  10378  79d1		       0e		      .byte.b	%00001110
  10379  79d2		       0e		      .byte.b	%00001110
  10380  79d3		       02		      .byte.b	%00000010
  10381  79d4		       02		      .byte.b	%00000010
  10382  79d5		       02		      .byte.b	%00000010
  10383  79d6		       02		      .byte.b	%00000010
  10384  79d7		       02		      .byte.b	%00000010
  10385  79d8		       02		      .byte.b	%00000010
  10386  79d9		       02		      .byte.b	%00000010
  10387  79da		       02		      .byte.b	%00000010
  10388  79db		       02		      .byte.b	%00000010
  10389  79dc		       02		      .byte.b	%00000010
  10390  79dd		       1e		      .byte.b	%00011110
  10391  79de		       1e		      .byte.b	%00011110
  10392  79df		       00		      .byte.b	%00000000
  10393  79e0		       00		      .byte.b	%00000000
  10394  79e1		       00		      .byte.b	%00000000
  10395  79e2		       00		      .byte.b	%00000000
  10396  79e3		       00		      .byte.b	%00000000
  10397  79e4		       00		      .byte.b	%00000000
  10398  79e5		       00		      .byte.b	%00000000
  10399  79e6		       00		      .byte.b	%00000000
  10400  79e7		       00		      .byte.b	%00000000
  10401  79e8		       1e		      .byte.b	%00011110
  10402  79e9		       1e		      .byte.b	%00011110
  10403  79ea		       12		      .byte.b	%00010010
  10404  79eb		       12		      .byte.b	%00010010
  10405  79ec		       12		      .byte.b	%00010010
  10406  79ed		       12		      .byte.b	%00010010
  10407  79ee		       12		      .byte.b	%00010010
  10408  79ef		       12		      .byte.b	%00010010
  10409  79f0		       12		      .byte.b	%00010010
  10410  79f1		       1e		      .byte.b	%00011110
  10411  79f2		       0e		      .byte.b	%00001110
  10412  79f3		       0e		      .byte.b	%00001110
  10413  79f4		       0a		      .byte.b	%00001010
  10414  79f5		       0a		      .byte.b	%00001010
  10415  79f6		       0a		      .byte.b	%00001010
  10416  79f7		       0a		      .byte.b	%00001010
  10417  79f8		       1a		      .byte.b	%00011010
  10418  79f9		       12		      .byte.b	%00010010
  10419  79fa		       12		      .byte.b	%00010010
  10420  79fb		       12		      .byte.b	%00010010
  10421  79fc		       12		      .byte.b	%00010010
  10422  79fd		       12		      .byte.b	%00010010
  10423  79fe		       12		      .byte.b	%00010010
  10424  79ff		       12		      .byte.b	%00010010
  10425  7a00		       00		      .byte.b	%00000000
  10426  7a01		       00		      .byte.b	%00000000
  10427  7a02		       00		      .byte.b	%00000000
  10428  7a03		       00		      .byte.b	%00000000
  10429  7a04		       00		      .byte.b	%00000000
  10430  7a05		       00		      .byte.b	%00000000
  10431  7a06		       00		      .byte.b	%00000000
  10432  7a07		       00		      .byte.b	%00000000
  10433  7a08		       00		      .byte.b	%00000000
  10434  7a09		       00		      .byte.b	%00000000
  10435  7a0a		       00		      .byte.b	%00000000
  10436  7a0b		       00		      .byte.b	%00000000
  10437  7a0c		       00		      .byte.b	%00000000
  10438  7a0d		       00		      .byte.b	%00000000
  10439  7a0e		       00		      .byte.b	%00000000
  10440  7a0f		       00		      .byte.b	%00000000
  10441  7a10		       00		      .byte.b	%00000000
  10442  7a11		       00		      .byte.b	%00000000
  10443  7a12		       00		      .byte.b	%00000000
  10444  7a13		       00		      .byte.b	%00000000
  10445  7a14		       00		      .byte.b	%00000000
  10446  7a15		       00		      .byte.b	%00000000
  10447  7a16		       00		      .byte.b	%00000000
  10448  7a17		       00		      .byte.b	%00000000
  10449  7a18		       00		      .byte.b	%00000000
  10450  7a19		       00		      .byte.b	%00000000
  10451  7a1a		       00		      .byte.b	%00000000
  10452  7a1b		       00		      .byte.b	%00000000
  10453  7a1c		       00		      .byte.b	%00000000
  10454  7a1d		       00		      .byte.b	%00000000
  10455  7a1e		       00		      .byte.b	%00000000
  10456  7a1f		       1b		      .byte.b	%00011011
  10457  7a20		       1f		      .byte.b	%00011111
  10458  7a21		       15		      .byte.b	%00010101
  10459  7a22		       15		      .byte.b	%00010101
  10460  7a23		       15		      .byte.b	%00010101
  10461  7a24		       15		      .byte.b	%00010101
  10462  7a25		       95		      .byte.b	%10010101
  10463  7a26		       95		      .byte.b	%10010101
  10464  7a27		       95		      .byte.b	%10010101
  10465  7a28		       95		      .byte.b	%10010101
  10466  7a29		       91		      .byte.b	%10010001
  10467  7a2a		       91		      .byte.b	%10010001
  10468  7a2b		       91		      .byte.b	%10010001
  10469  7a2c		       91		      .byte.b	%10010001
  10470  7a2d		       91		      .byte.b	%10010001
  10471  7a2e		       91		      .byte.b	%10010001
  10472  7a2f		       91		      .byte.b	%10010001
  10473  7a30		       91		      .byte.b	%10010001
  10474  7a31		       91		      .byte.b	%10010001
  10475  7a32		       91		      .byte.b	%10010001
  10476  7a33		       91		      .byte.b	%10010001
  10477  7a34		       91		      .byte.b	%10010001
  10478  7a35		       91		      .byte.b	%10010001
  10479  7a36		       91		      .byte.b	%10010001
  10480  7a37		       00		      .byte.b	%00000000
  10481  7a38		       00		      .byte.b	%00000000
  10482  7a39		       00		      .byte.b	%00000000
  10483  7a3a		       00		      .byte.b	%00000000
  10484  7a3b		       00		      .byte.b	%00000000
  10485  7a3c		       00		      .byte.b	%00000000
  10486  7a3d		       00		      .byte.b	%00000000
  10487  7a3e		       00		      .byte.b	%00000000
  10488  7a3f		       00		      .byte.b	%00000000
  10489  7a40		       1e		      .byte.b	%00011110
  10490  7a41		       1e		      .byte.b	%00011110
  10491  7a42		       10		      .byte.b	%00010000
  10492  7a43		       10		      .byte.b	%00010000
  10493  7a44		       10		      .byte.b	%00010000
  10494  7a45		       10		      .byte.b	%00010000
  10495  7a46		       10		      .byte.b	%00010000
  10496  7a47		       10		      .byte.b	%00010000
  10497  7a48		       10		      .byte.b	%00010000
  10498  7a49		       10		      .byte.b	%00010000
  10499  7a4a		       1c		      .byte.b	%00011100
  10500  7a4b		       1c		      .byte.b	%00011100
  10501  7a4c		       10		      .byte.b	%00010000
  10502  7a4d		       10		      .byte.b	%00010000
  10503  7a4e		       10		      .byte.b	%00010000
  10504  7a4f		       10		      .byte.b	%00010000
  10505  7a50		       10		      .byte.b	%00010000
  10506  7a51		       10		      .byte.b	%00010000
  10507  7a52		       10		      .byte.b	%00010000
  10508  7a53		       10		      .byte.b	%00010000
  10509  7a54		       10		      .byte.b	%00010000
  10510  7a55		       10		      .byte.b	%00010000
  10511  7a56		       1e		      .byte.b	%00011110
  10512  7a57		       1e		      .byte.b	%00011110
  10513  7a58		       00		      .byte.b	%00000000
  10514  7a59		       00		      .byte.b	%00000000
  10515  7a5a		       00		      .byte.b	%00000000
  10516  7a5b		       00		      .byte.b	%00000000
  10517  7a5c		       00		      .byte.b	%00000000
  10518  7a5d		       00		      .byte.b	%00000000
  10519  7a5e		       00		      .byte.b	%00000000
  10520  7a5f		       00		      .byte.b	%00000000
  10521  7a60		       00		      .byte.b	%00000000
  10522  7a61		       00		      .byte.b	%00000000
  10523  7a62		       00		      .byte.b	%00000000
  10524  7a63		       00		      .byte.b	%00000000
  10525  7a64		       00		      .byte.b	%00000000
  10526  7a65		       00		      .byte.b	%00000000
  10527  7a66		       00		      .byte.b	%00000000
  10528  7a67		       00		      .byte.b	%00000000
  10529  7a68		       00		      .byte.b	%00000000
  10530  7a69		       00		      .byte.b	%00000000
  10531  7a6a		       00		      .byte.b	%00000000
  10532  7a6b		       00		      .byte.b	%00000000
  10533  7a6c		       00		      .byte.b	%00000000
  10534  7a6d		       00		      .byte.b	%00000000
  10535  7a6e		       00		      .byte.b	%00000000
  10536  7a6f		       00		      .byte.b	%00000000
  10537  7a70		       00		      .byte.b	%00000000
  10538  7a71		       00		      .byte.b	%00000000
  10539  7a72		       00		      .byte.b	%00000000
  10540  7a73		       00		      .byte.b	%00000000
  10541  7a74		       00		      .byte.b	%00000000
  10542  7a75		       00		      .byte.b	%00000000
  10543  7a76		       00		      .byte.b	%00000000
  10544  7a77		       f1		      .byte.b	%11110001
  10545  7a78		       f1		      .byte.b	%11110001
  10546  7a79		       90		      .byte.b	%10010000
  10547  7a7a		       90		      .byte.b	%10010000
  10548  7a7b		       90		      .byte.b	%10010000
  10549  7a7c		       90		      .byte.b	%10010000
  10550  7a7d		       90		      .byte.b	%10010000
  10551  7a7e		       08		      .byte.b	%00001000
  10552  7a7f		       08		      .byte.b	%00001000
  10553  7a80		       08		      .byte.b	%00001000
  10554  7a81		       08		      .byte.b	%00001000
  10555  7a82		       08		      .byte.b	%00001000
  10556  7a83		       08		      .byte.b	%00001000
  10557  7a84		       08		      .byte.b	%00001000
  10558  7a85		       f9		      .byte.b	%11111001
  10559  7a86		       09		      .byte.b	%00001001
  10560  7a87		       09		      .byte.b	%00001001
  10561  7a88		       09		      .byte.b	%00001001
  10562  7a89		       09		      .byte.b	%00001001
  10563  7a8a		       09		      .byte.b	%00001001
  10564  7a8b		       09		      .byte.b	%00001001
  10565  7a8c		       09		      .byte.b	%00001001
  10566  7a8d		       09		      .byte.b	%00001001
  10567  7a8e		       09		      .byte.b	%00001001
  10568  7a8f		       00		      .byte.b	%00000000
  10569  7a90		       00		      .byte.b	%00000000
  10570  7a91		       00		      .byte.b	%00000000
  10571  7a92		       00		      .byte.b	%00000000
  10572  7a93		       00		      .byte.b	%00000000
  10573  7a94		       00		      .byte.b	%00000000
  10574  7a95		       00		      .byte.b	%00000000
  10575  7a96		       00		      .byte.b	%00000000
  10576  7a97		       89		      .byte.b	%10001001
  10577  7a98		       89		      .byte.b	%10001001
  10578  7a99		       89		      .byte.b	%10001001
  10579  7a9a		       89		      .byte.b	%10001001
  10580  7a9b		       89		      .byte.b	%10001001
  10581  7a9c		       89		      .byte.b	%10001001
  10582  7a9d		       89		      .byte.b	%10001001
  10583  7a9e		       d1		      .byte.b	%11010001
  10584  7a9f		       51		      .byte.b	%01010001
  10585  7aa0		       51		      .byte.b	%01010001
  10586  7aa1		       51		      .byte.b	%01010001
  10587  7aa2		       51		      .byte.b	%01010001
  10588  7aa3		       51		      .byte.b	%01010001
  10589  7aa4		       51		      .byte.b	%01010001
  10590  7aa5		       51		      .byte.b	%01010001
  10591  7aa6		       51		      .byte.b	%01010001
  10592  7aa7		       51		      .byte.b	%01010001
  10593  7aa8		       51		      .byte.b	%01010001
  10594  7aa9		       71		      .byte.b	%01110001
  10595  7aaa		       71		      .byte.b	%01110001
  10596  7aab		       21		      .byte.b	%00100001
  10597  7aac		       21		      .byte.b	%00100001
  10598  7aad		       21		      .byte.b	%00100001
  10599  7aae		       21		      .byte.b	%00100001
  10600  7aaf		       21		      .byte.b	%00100001
  10601  7ab0		       00		      .byte.b	%00000000
  10602  7ab1		       00		      .byte.b	%00000000
  10603  7ab2		       00		      .byte.b	%00000000
  10604  7ab3		       00		      .byte.b	%00000000
  10605  7ab4		       00		      .byte.b	%00000000
  10606  7ab5		       00		      .byte.b	%00000000
  10607  7ab6		       00		      .byte.b	%00000000
  10608  7ab7		       00		      .byte.b	%00000000
  10609  7ab8		       00		      .byte.b	%00000000
  10610  7ab9		       00		      .byte.b	%00000000
  10611  7aba		       00		      .byte.b	%00000000
  10612  7abb		       00		      .byte.b	%00000000
  10613  7abc		       00		      .byte.b	%00000000
  10614  7abd		       00		      .byte.b	%00000000
  10615  7abe		       00		      .byte.b	%00000000
  10616  7abf		       00		      .byte.b	%00000000
  10617  7ac0		       00		      .byte.b	%00000000
  10618  7ac1		       00		      .byte.b	%00000000
  10619  7ac2		       00		      .byte.b	%00000000
  10620  7ac3		       00		      .byte.b	%00000000
  10621  7ac4		       00		      .byte.b	%00000000
  10622  7ac5		       00		      .byte.b	%00000000
  10623  7ac6		       00		      .byte.b	%00000000
  10624  7ac7		       00		      .byte.b	%00000000
  10625  7ac8		       00		      .byte.b	%00000000
  10626  7ac9		       00		      .byte.b	%00000000
  10627  7aca		       00		      .byte.b	%00000000
  10628  7acb		       00		      .byte.b	%00000000
  10629  7acc		       00		      .byte.b	%00000000
  10630  7acd		       00		      .byte.b	%00000000
  10631  7ace		       00		      .byte.b	%00000000
  10632  7acf		       0f		      .byte.b	%00001111
  10633  7ad0		       0f		      .byte.b	%00001111
  10634  7ad1		       08		      .byte.b	%00001000
  10635  7ad2		       08		      .byte.b	%00001000
  10636  7ad3		       08		      .byte.b	%00001000
  10637  7ad4		       08		      .byte.b	%00001000
  10638  7ad5		       08		      .byte.b	%00001000
  10639  7ad6		       08		      .byte.b	%00001000
  10640  7ad7		       08		      .byte.b	%00001000
  10641  7ad8		       08		      .byte.b	%00001000
  10642  7ad9		       08		      .byte.b	%00001000
  10643  7ada		       08		      .byte.b	%00001000
  10644  7adb		       08		      .byte.b	%00001000
  10645  7adc		       08		      .byte.b	%00001000
  10646  7add		       0b		      .byte.b	%00001011
  10647  7ade		       0b		      .byte.b	%00001011
  10648  7adf		       08		      .byte.b	%00001000
  10649  7ae0		       08		      .byte.b	%00001000
  10650  7ae1		       08		      .byte.b	%00001000
  10651  7ae2		       08		      .byte.b	%00001000
  10652  7ae3		       08		      .byte.b	%00001000
  10653  7ae4		       08		      .byte.b	%00001000
  10654  7ae5		       0f		      .byte.b	%00001111
  10655  7ae6		       0f		      .byte.b	%00001111
  10656  7ae7		       00		      .byte.b	%00000000
  10657  7ae8		       00		      .byte.b	%00000000
  10658  7ae9		       00		      .byte.b	%00000000
  10659  7aea		       00		      .byte.b	%00000000
  10660  7aeb		       00		      .byte.b	%00000000
  10661  7aec		       00		      .byte.b	%00000000
  10662  7aed		       00		      .byte.b	%00000000
  10663  7aee		       00		      .byte.b	%00000000
  10664  7aef		       0f		      .byte.b	%00001111
  10665  7af0		       0f		      .byte.b	%00001111
  10666  7af1		       08		      .byte.b	%00001000
  10667  7af2		       08		      .byte.b	%00001000
  10668  7af3		       08		      .byte.b	%00001000
  10669  7af4		       08		      .byte.b	%00001000
  10670  7af5		       08		      .byte.b	%00001000
  10671  7af6		       08		      .byte.b	%00001000
  10672  7af7		       08		      .byte.b	%00001000
  10673  7af8		       08		      .byte.b	%00001000
  10674  7af9		       08		      .byte.b	%00001000
  10675  7afa		       08		      .byte.b	%00001000
  10676  7afb		       08		      .byte.b	%00001000
  10677  7afc		       08		      .byte.b	%00001000
  10678  7afd		       08		      .byte.b	%00001000
  10679  7afe		       08		      .byte.b	%00001000
  10680  7aff		       08		      .byte.b	%00001000
  10681  7b00		       08		      .byte.b	%00001000
  10682  7b01		       08		      .byte.b	%00001000
  10683  7b02		       08		      .byte.b	%00001000
  10684  7b03		       08		      .byte.b	%00001000
  10685  7b04		       08		      .byte.b	%00001000
  10686  7b05		       08		      .byte.b	%00001000
  10687  7b06		       0f		      .byte.b	%00001111
  10688  7b07		       0f		      .byte.b	%00001111
  10689  7b08		       00		      .byte.b	%00000000
  10690  7b09		       00		      .byte.b	%00000000
  10691  7b0a		       00		      .byte.b	%00000000
  10692  7b0b		       00		      .byte.b	%00000000
  10693  7b0c		       00		      .byte.b	%00000000
  10694  7b0d		       00		      .byte.b	%00000000
  10695  7b0e		       00		      .byte.b	%00000000
  10696  7b0f		       00		      .byte.b	%00000000
  10697  7b10		       00		      .byte.b	%00000000
  10698  7b11		       00		      .byte.b	%00000000
  10699  7b12		       00		      .byte.b	%00000000
  10700  7b13		       00		      .byte.b	%00000000
  10701  7b14		       00		      .byte.b	%00000000
  10702  7b15		       00		      .byte.b	%00000000
  10703  7b16		       00		      .byte.b	%00000000
  10704  7b17		       00		      .byte.b	%00000000
  10705  7b18		       00		      .byte.b	%00000000
  10706  7b19		       00		      .byte.b	%00000000
  10707  7b1a				   playfieldcolorL0617
  10708  7b1a		       00		      .byte.b	_00
  10709  7b1b		       00		      .byte.b	_00
  10710  7b1c		       00		      .byte.b	_00
  10711  7b1d		       00		      .byte.b	_00
  10712  7b1e		       00		      .byte.b	_00
  10713  7b1f		       00		      .byte.b	_00
  10714  7b20		       00		      .byte.b	_00
  10715  7b21		       00		      .byte.b	_00
  10716  7b22		       00		      .byte.b	_00
  10717  7b23		       00		      .byte.b	_00
  10718  7b24		       00		      .byte.b	_00
  10719  7b25		       00		      .byte.b	_00
  10720  7b26		       00		      .byte.b	_00
  10721  7b27		       00		      .byte.b	_00
  10722  7b28		       00		      .byte.b	_00
  10723  7b29		       00		      .byte.b	_00
  10724  7b2a		       00		      .byte.b	_00
  10725  7b2b		       00		      .byte.b	_00
  10726  7b2c		       00		      .byte.b	_00
  10727  7b2d		       00		      .byte.b	_00
  10728  7b2e		       00		      .byte.b	_00
  10729  7b2f		       00		      .byte.b	_00
  10730  7b30		       00		      .byte.b	_00
  10731  7b31		       00		      .byte.b	_00
  10732  7b32		       00		      .byte.b	_00
  10733  7b33		       00		      .byte.b	_00
  10734  7b34		       00		      .byte.b	_00
  10735  7b35		       00		      .byte.b	_00
  10736  7b36		       00		      .byte.b	_00
  10737  7b37		       00		      .byte.b	_00
  10738  7b38		       00		      .byte.b	_00
  10739  7b39		       00		      .byte.b	_00
  10740  7b3a		       00		      .byte.b	_00
  10741  7b3b		       00		      .byte.b	_00
  10742  7b3c		       00		      .byte.b	_00
  10743  7b3d		       00		      .byte.b	_00
  10744  7b3e		       00		      .byte.b	_00
  10745  7b3f		       00		      .byte.b	_00
  10746  7b40		       00		      .byte.b	_00
  10747  7b41		       00		      .byte.b	_00
  10748  7b42		       00		      .byte.b	_00
  10749  7b43		       00		      .byte.b	_00
  10750  7b44		       00		      .byte.b	_00
  10751  7b45		       00		      .byte.b	_00
  10752  7b46		       00		      .byte.b	_00
  10753  7b47		       00		      .byte.b	_00
  10754  7b48		       00		      .byte.b	_00
  10755  7b49		       00		      .byte.b	_00
  10756  7b4a		       00		      .byte.b	_00
  10757  7b4b		       00		      .byte.b	_00
  10758  7b4c		       00		      .byte.b	_00
  10759  7b4d		       00		      .byte.b	_00
  10760  7b4e		       00		      .byte.b	_00
  10761  7b4f		       00		      .byte.b	_00
  10762  7b50		       00		      .byte.b	_00
  10763  7b51		       00		      .byte.b	_00
  10764  7b52		       00		      .byte.b	_00
  10765  7b53		       00		      .byte.b	_00
  10766  7b54		       00		      .byte.b	_00
  10767  7b55		       00		      .byte.b	_00
  10768  7b56		       00		      .byte.b	_00
  10769  7b57		       00		      .byte.b	_00
  10770  7b58		       00		      .byte.b	_00
  10771  7b59		       00		      .byte.b	_00
  10772  7b5a		       00		      .byte.b	_00
  10773  7b5b		       00		      .byte.b	_00
  10774  7b5c		       00		      .byte.b	_00
  10775  7b5d		       00		      .byte.b	_00
  10776  7b5e		       00		      .byte.b	_00
  10777  7b5f		       00		      .byte.b	_00
  10778  7b60		       00		      .byte.b	_00
  10779  7b61		       00		      .byte.b	_00
  10780  7b62		       00		      .byte.b	_00
  10781  7b63		       00		      .byte.b	_00
  10782  7b64		       00		      .byte.b	_00
  10783  7b65		       00		      .byte.b	_00
  10784  7b66		       00		      .byte.b	_00
  10785  7b67		       00		      .byte.b	_00
  10786  7b68		       00		      .byte.b	_00
  10787  7b69		       00		      .byte.b	_00
  10788  7b6a		       00		      .byte.b	_00
  10789  7b6b		       00		      .byte.b	_00
  10790  7b6c		       00		      .byte.b	_00
  10791  7b6d		       00		      .byte.b	_00
  10792  7b6e		       00		      .byte.b	_00
  10793  7b6f		       00		      .byte.b	_00
  10794  7b70		       00		      .byte.b	_00
  10795  7b71		       00		      .byte.b	_00
  10796  7b72					      if	ECHOFIRST
      1122 bytes of ROM space left in graphics bank
  10797  7b72					      echo	"    ",[(DPC_graphics_end - *)]d , "bytes of ROM space left in graphics bank")
  10798  7b72					      endif
  10799  7b72		       00 01	   ECHOFIRST  =	1
  10800  7b72
  10801  7b72
  10802  7b72							; Provided under the CC0 license. See the included LICENSE.txt for details.
  10803  7b72
  10804  7fd4					      ORG	$7FF4-bscode_length
  10805  7fd4					      RORG	$DFF4-bscode_length
  10806  7fd4				   DPC_graphics_end
  10807  7fd4
  10808  7fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
  10809  7fd4
  10810  7fd4							; every bank has this stuff at the same place
  10811  7fd4							; this code can switch to/from any bank at any entry point
  10812  7fd4							; and can preserve register values
  10813  7fd4							; note: lines not starting with a space are not placed in all banks
  10814  7fd4							;
  10815  7fd4							; line below tells the compiler how long this is - do not remove
  10816  7fd4							;size=32
  10817  7fd4
  10818  7fd4				   begin_bscode
  10819  7fd4		       a2 ff		      ldx	#$ff
  10820  7fd6					      ifconst	FASTFETCH	; using DPC+
  10821  7fd6		       8e 58 10 	      stx	FASTFETCH
  10822  7fd9					      endif
  10823  7fd9		       9a		      txs
  10824  7fda				  -	      if	bankswitch == 64
  10825  7fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  10826  7fda					      else
  10827  7fda		       a9 18		      lda	#>(start-1)
  10828  7fdc					      endif
  10829  7fdc		       48		      pha
  10830  7fdd		       a9 e3		      lda	#<(start-1)
  10831  7fdf		       48		      pha
  10832  7fe0
  10833  7fe0				   BS_return
  10834  7fe0		       48		      pha
  10835  7fe1		       8a		      txa
  10836  7fe2		       48		      pha
  10837  7fe3		       ba		      tsx
  10838  7fe4
  10839  7fe4					      if	bankswitch != 64
  10840  7fe4		       b5 04		      lda	4,x	; get high byte of return address
  10841  7fe6
  10842  7fe6		       2a		      rol
  10843  7fe7		       2a		      rol
  10844  7fe8		       2a		      rol
  10845  7fe9		       2a		      rol
  10846  7fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  10847  7fec		       aa		      tax
  10848  7fed		       e8		      inx
  10849  7fee				  -	      else
  10850  7fee				  -	      lda	4,x	; get high byte of return address
  10851  7fee				  -	      tay
  10852  7fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  10853  7fee				  -	      sta	4,x
  10854  7fee				  -	      tya
  10855  7fee				  -	      lsr
  10856  7fee				  -	      lsr
  10857  7fee				  -	      lsr
  10858  7fee				  -	      lsr
  10859  7fee				  -	      tax
  10860  7fee				  -	      inx
  10861  7fee					      endif
  10862  7fee
  10863  7fee				   BS_jsr
  10864  7fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
  10865  7ff1		       68		      pla
  10866  7ff2		       aa		      tax
  10867  7ff3		       68		      pla
  10868  7ff4		       60		      rts
  10869  7ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  10870  7ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  10871  7ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  10872  7ff5					      endif
  10873  7ff5							; Provided under the CC0 license. See the included LICENSE.txt for details.
  10874  7ff5
  10875  8000					      org	$8000
  10876  8000					      rorg	$1000
  10877  8000							; Provided under the CC0 license. See the included LICENSE.txt for details.
  10878  8000
  10879  8000							; 1K Frequency Table.
  10880  8000							; Fred Quimby, Darrell Spice Jr, Chris Walton 2010
  10881  8000							;
  10882  8000							; The 1K Frequency Table can contain up to 256 frequency values
  10883  8000							;
  10884  8000							; Table entries are defined as 2^32*freq/20000
  10885  8000							;
  10886  8000							; If User ARM code is being used, then the last 512 bytes of the frequency
  10887  8000							; table will no longer be available, reducing the number of frequencies you can
  10888  8000							; use to 128.
  10889  8000
  10890  8000							; piano key frequencies (s = sharp)
  10891  8000
  10892  8000				   .freq_table_start
  10893  8000
  10894  8000		       00 00 00 00	      DC.L	0
  10895  8000		       00 01	   A0	      =	(* & $3ff)/4
  10896  8004		       ac 1c 5a 00	      DC.L	5905580
  10897  8008
  10898  8008		       00 02	   A0s	      =	(* & $3ff)/4
  10899  8008		       68 78 5f 00	      DC.L	6256744
  10900  800c
  10901  800c		       00 03	   B0	      =	(* & $3ff)/4
  10902  800c		       b5 25 65 00	      DC.L	6628789
  10903  8010
  10904  8010		       00 04	   C1	      =	(* & $3ff)/4
  10905  8010		       6e 29 6b 00	      DC.L	7022958
  10906  8014
  10907  8014		       00 05	   C1s	      =	(* & $3ff)/4
  10908  8014		       b5 88 71 00	      DC.L	7440565
  10909  8018
  10910  8018		       00 06	   D1	      =	(* & $3ff)/4
  10911  8018		       fc 48 78 00	      DC.L	7883004
  10912  801c
  10913  801c		       00 07	   D1s	      =	(* & $3ff)/4
  10914  801c		       07 70 7f 00	      DC.L	8351751
  10915  8020
  10916  8020		       00 08	   E1	      =	(* & $3ff)/4
  10917  8020		       f4 03 87 00	      DC.L	8848372
  10918  8024
  10919  8024		       00 09	   F1	      =	(* & $3ff)/4
  10920  8024		       3c 0b 8f 00	      DC.L	9374524
  10921  8028
  10922  8028		       00 0a	   F1s	      =	(* & $3ff)/4
  10923  8028		       ba 8c 97 00	      DC.L	9931962
  10924  802c
  10925  802c		       00 0b	   G1	      =	(* & $3ff)/4
  10926  802c		       b3 8f a0 00	      DC.L	10522547
  10927  8030
  10928  8030		       00 0c	   G1s	      =	(* & $3ff)/4
  10929  8030		       db 1b aa 00	      DC.L	11148251
  10930  8034
  10931  8034		       00 0d	   A1	      =	(* & $3ff)/4
  10932  8034		       58 39 b4 00	      DC.L	11811160
  10933  8038
  10934  8038		       00 0e	   A1s	      =	(* & $3ff)/4
  10935  8038		       d0 f0 be 00	      DC.L	12513488
  10936  803c
  10937  803c		       00 0f	   B1	      =	(* & $3ff)/4
  10938  803c		       6b 4b ca 00	      DC.L	13257579
  10939  8040
  10940  8040		       00 10	   C2	      =	(* & $3ff)/4
  10941  8040		       dc 52 d6 00	      DC.L	14045916
  10942  8044
  10943  8044		       00 11	   C2s	      =	(* & $3ff)/4
  10944  8044		       69 11 e3 00	      DC.L	14881129
  10945  8048
  10946  8048		       00 12	   D2	      =	(* & $3ff)/4
  10947  8048		       f7 91 f0 00	      DC.L	15766007
  10948  804c
  10949  804c		       00 13	   D2s	      =	(* & $3ff)/4
  10950  804c		       0f e0 fe 00	      DC.L	16703503
  10951  8050
  10952  8050		       00 14	   E2	      =	(* & $3ff)/4
  10953  8050		       e9 07 0e 01	      DC.L	17696745
  10954  8054
  10955  8054		       00 15	   F2	      =	(* & $3ff)/4
  10956  8054		       78 16 1e 01	      DC.L	18749048
  10957  8058
  10958  8058		       00 16	   F2s	      =	(* & $3ff)/4
  10959  8058		       74 19 2f 01	      DC.L	19863924
  10960  805c
  10961  805c		       00 17	   G2	      =	(* & $3ff)/4
  10962  805c		       67 1f 41 01	      DC.L	21045095
  10963  8060
  10964  8060		       00 18	   G2s	      =	(* & $3ff)/4
  10965  8060		       b5 37 54 01	      DC.L	22296501
  10966  8064
  10967  8064		       00 19	   A2	      =	(* & $3ff)/4
  10968  8064		       b0 72 68 01	      DC.L	23622320
  10969  8068
  10970  8068		       00 1a	   A2s	      =	(* & $3ff)/4
  10971  8068		       a0 e1 7d 01	      DC.L	25026976
  10972  806c
  10973  806c		       00 1b	   B2	      =	(* & $3ff)/4
  10974  806c		       d6 96 94 01	      DC.L	26515158
  10975  8070
  10976  8070		       00 1c	   C3	      =	(* & $3ff)/4
  10977  8070		       b7 a5 ac 01	      DC.L	28091831
  10978  8074
  10979  8074		       00 1d	   C3s	      =	(* & $3ff)/4
  10980  8074		       d2 22 c6 01	      DC.L	29762258
  10981  8078
  10982  8078		       00 1e	   D3	      =	(* & $3ff)/4
  10983  8078		       ee 23 e1 01	      DC.L	31532014
  10984  807c
  10985  807c		       00 1f	   D3s	      =	(* & $3ff)/4
  10986  807c		       1d c0 fd 01	      DC.L	33407005
  10987  8080
  10988  8080		       00 20	   E3	      =	(* & $3ff)/4
  10989  8080		       d1 0f 1c 02	      DC.L	35393489
  10990  8084
  10991  8084		       00 21	   F3	      =	(* & $3ff)/4
  10992  8084		       f0 2c 3c 02	      DC.L	37498096
  10993  8088
  10994  8088		       00 22	   F3s	      =	(* & $3ff)/4
  10995  8088		       e9 32 5e 02	      DC.L	39727849
  10996  808c
  10997  808c		       00 23	   G3	      =	(* & $3ff)/4
  10998  808c		       cd 3e 82 02	      DC.L	42090189
  10999  8090
  11000  8090		       00 24	   G3s	      =	(* & $3ff)/4
  11001  8090		       6a 6f a8 02	      DC.L	44593002
  11002  8094
  11003  8094		       00 25	   A3	      =	(* & $3ff)/4
  11004  8094		       60 e5 d0 02	      DC.L	47244640
  11005  8098
  11006  8098		       00 26	   A3s	      =	(* & $3ff)/4
  11007  8098		       41 c3 fb 02	      DC.L	50053953
  11008  809c
  11009  809c		       00 27	   B3	      =	(* & $3ff)/4
  11010  809c		       ac 2d 29 03	      DC.L	53030316
  11011  80a0
  11012  80a0		       00 28	   C4	      =	(* & $3ff)/4
  11013  80a0		       6e 4b 59 03	      DC.L	56183662
  11014  80a4
  11015  80a4		       00 29	   C4s	      =	(* & $3ff)/4
  11016  80a4		       a5 45 8c 03	      DC.L	59524517
  11017  80a8
  11018  80a8		       00 2a	   D4	      =	(* & $3ff)/4
  11019  80a8		       dd 47 c2 03	      DC.L	63064029
  11020  80ac
  11021  80ac		       00 2b	   D4s	      =	(* & $3ff)/4
  11022  80ac		       3b 80 fb 03	      DC.L	66814011
  11023  80b0
  11024  80b0		       00 2c	   E4	      =	(* & $3ff)/4
  11025  80b0		       a3 1f 38 04	      DC.L	70786979
  11026  80b4
  11027  80b4		       00 2d	   F4	      =	(* & $3ff)/4
  11028  80b4		       e0 59 78 04	      DC.L	74996192
  11029  80b8
  11030  80b8		       00 2e	   F4s	      =	(* & $3ff)/4
  11031  80b8		       d1 65 bc 04	      DC.L	79455697
  11032  80bc
  11033  80bc		       00 2f	   G4	      =	(* & $3ff)/4
  11034  80bc		       9b 7d 04 05	      DC.L	84180379
  11035  80c0
  11036  80c0		       00 30	   G4s	      =	(* & $3ff)/4
  11037  80c0		       d5 de 50 05	      DC.L	89186005
  11038  80c4
  11039  80c4		       00 31	   A4	      =	(* & $3ff)/4
  11040  80c4		       c1 ca a1 05	      DC.L	94489281
  11041  80c8
  11042  80c8		       00 32	   A4s	      =	(* & $3ff)/4
  11043  80c8		       82 86 f7 05	      DC.L	100107906
  11044  80cc
  11045  80cc		       00 33	   B4	      =	(* & $3ff)/4
  11046  80cc		       57 5b 52 06	      DC.L	106060631
  11047  80d0
  11048  80d0		       00 34	   C5	      =	(* & $3ff)/4
  11049  80d0		       dd 96 b2 06	      DC.L	112367325
  11050  80d4
  11051  80d4		       00 35	   C5s	      =	(* & $3ff)/4
  11052  80d4		       4a 8b 18 07	      DC.L	119049034
  11053  80d8
  11054  80d8		       00 36	   D5	      =	(* & $3ff)/4
  11055  80d8		       b9 8f 84 07	      DC.L	126128057
  11056  80dc
  11057  80dc		       00 37	   D5s	      =	(* & $3ff)/4
  11058  80dc		       76 00 f7 07	      DC.L	133628022
  11059  80e0
  11060  80e0		       00 38	   E5	      =	(* & $3ff)/4
  11061  80e0		       46 3f 70 08	      DC.L	141573958
  11062  80e4
  11063  80e4		       00 39	   F5	      =	(* & $3ff)/4
  11064  80e4		       bf b3 f0 08	      DC.L	149992383
  11065  80e8
  11066  80e8		       00 3a	   F5s	      =	(* & $3ff)/4
  11067  80e8		       a3 cb 78 09	      DC.L	158911395
  11068  80ec
  11069  80ec		       00 3b	   G5	      =	(* & $3ff)/4
  11070  80ec		       36 fb 08 0a	      DC.L	168360758
  11071  80f0
  11072  80f0		       00 3c	   G5s	      =	(* & $3ff)/4
  11073  80f0		       a9 bd a1 0a	      DC.L	178372009
  11074  80f4
  11075  80f4		       00 3d	   A5	      =	(* & $3ff)/4
  11076  80f4		       81 95 43 0b	      DC.L	188978561
  11077  80f8
  11078  80f8		       00 3e	   A5s	      =	(* & $3ff)/4
  11079  80f8		       03 0d ef 0b	      DC.L	200215811
  11080  80fc
  11081  80fc		       00 3f	   B5	      =	(* & $3ff)/4
  11082  80fc		       af b6 a4 0c	      DC.L	212121263
  11083  8100
  11084  8100		       00 40	   C6	      =	(* & $3ff)/4
  11085  8100		       b9 2d 65 0d	      DC.L	224734649
  11086  8104
  11087  8104		       00 41	   C6s	      =	(* & $3ff)/4
  11088  8104		       93 16 31 0e	      DC.L	238098067
  11089  8108
  11090  8108		       00 42	   D6	      =	(* & $3ff)/4
  11091  8108		       73 1f 09 0f	      DC.L	252256115
  11092  810c
  11093  810c		       00 43	   D6s	      =	(* & $3ff)/4
  11094  810c		       ec 00 ee 0f	      DC.L	267256044
  11095  8110
  11096  8110		       00 44	   E6	      =	(* & $3ff)/4
  11097  8110		       8b 7e e0 10	      DC.L	283147915
  11098  8114
  11099  8114		       00 45	   F6	      =	(* & $3ff)/4
  11100  8114		       7f 67 e1 11	      DC.L	299984767
  11101  8118
  11102  8118		       00 46	   F6s	      =	(* & $3ff)/4
  11103  8118		       45 97 f1 12	      DC.L	317822789
  11104  811c
  11105  811c		       00 47	   G6	      =	(* & $3ff)/4
  11106  811c		       6c f6 11 14	      DC.L	336721516
  11107  8120
  11108  8120		       00 48	   G6s	      =	(* & $3ff)/4
  11109  8120		       53 7b 43 15	      DC.L	356744019
  11110  8124
  11111  8124		       00 49	   A6	      =	(* & $3ff)/4
  11112  8124		       02 2b 87 16	      DC.L	377957122
  11113  8128
  11114  8128		       00 4a	   A6s	      =	(* & $3ff)/4
  11115  8128		       06 1a de 17	      DC.L	400431622
  11116  812c
  11117  812c		       00 4b	   B6	      =	(* & $3ff)/4
  11118  812c		       5d 6d 49 19	      DC.L	424242525
  11119  8130
  11120  8130		       00 4c	   C7	      =	(* & $3ff)/4
  11121  8130		       73 5b ca 1a	      DC.L	449469299
  11122  8134
  11123  8134		       00 4d	   C7s	      =	(* & $3ff)/4
  11124  8134		       26 2d 62 1c	      DC.L	476196134
  11125  8138
  11126  8138		       00 4e	   D7	      =	(* & $3ff)/4
  11127  8138		       e6 3e 12 1e	      DC.L	504512230
  11128  813c
  11129  813c		       00 4f	   D7s	      =	(* & $3ff)/4
  11130  813c		       d8 01 dc 1f	      DC.L	534512088
  11131  8140
  11132  8140		       00 50	   E7	      =	(* & $3ff)/4
  11133  8140		       17 fd c0 21	      DC.L	566295831
  11134  8144
  11135  8144		       00 51	   F7	      =	(* & $3ff)/4
  11136  8144		       fd ce c2 23	      DC.L	599969533
  11137  8148
  11138  8148		       00 52	   F7s	      =	(* & $3ff)/4
  11139  8148		       8a 2e e3 25	      DC.L	635645578
  11140  814c
  11141  814c		       00 53	   G7	      =	(* & $3ff)/4
  11142  814c		       d7 ec 23 28	      DC.L	673443031
  11143  8150
  11144  8150		       00 54	   G7s	      =	(* & $3ff)/4
  11145  8150		       a6 f6 86 2a	      DC.L	713488038
  11146  8154
  11147  8154		       00 55	   A7	      =	(* & $3ff)/4
  11148  8154		       04 56 0e 2d	      DC.L	755914244
  11149  8158
  11150  8158		       00 56	   A7s	      =	(* & $3ff)/4
  11151  8158		       0c 34 bc 2f	      DC.L	800863244
  11152  815c
  11153  815c		       00 57	   B7	      =	(* & $3ff)/4
  11154  815c		       bb da 92 32	      DC.L	848485051
  11155  8160
  11156  8160		       00 58	   C8	      =	(* & $3ff)/4
  11157  8160		       e5 b6 94 35	      DC.L	898938597
  11158  8164
  11159  8164							;values for 89-255 may go here 
  11160  8164
  11161  8164					      if	(* <= $1400)
  11162  8164		       00 00 00 00*	      ds	($1400-*)	; pad out remaining space in frequency table
  11163  8400				  -	      else
  11164  8400				  -	      echo	"FATAL ERROR - Frequency table exceeds 1K"
  11165  8400				  -	      err
  11166  8400					      endif
