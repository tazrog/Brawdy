------- FILE c:\Users\roger\OneDrive\Documents\Atari\BrawdyBAS\brawdy.bas.asm LEVEL 1 PASS 3
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  8400 ????				      include	"vcs.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????						; VCS.H
      4  8400 ????						; Version 1.05, 13/November/2003
      5  8400 ????
      6  8400 ????	       00 69	   VERSION_VCS =	105
      7  8400 ????
      8  8400 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  8400 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  8400 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  8400 ????						;
     12  8400 ????						; This file defines hardware registers and memory mapping for the
     13  8400 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  8400 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  8400 ????						; available at at http://www.atari2600.org/dasm
     16  8400 ????						;
     17  8400 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  8400 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  8400 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  8400 ????						; with your views.  Please contribute, if you think you can improve this
     21  8400 ????						; file!
     22  8400 ????						;
     23  8400 ????						; Latest Revisions...
     24  8400 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  8400 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  8400 ????						;			    This will allow conditional code to verify VCS.H being
     27  8400 ????						;			    used for code assembly.
     28  8400 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  8400 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  8400 ????						;			 mirrored reading/writing differences.	This is more a 
     31  8400 ????						;			 readability issue, and binary compatibility with disassembled
     32  8400 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  8400 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  8400 ????						;			 which was broken by the use of segments in this file, as
     35  8400 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  8400 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  8400 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  8400 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  8400 ????						;						   it is safe to leave it undefined, and the base address will
     40  8400 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  8400 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  8400 ????						;			  - register definitions are now generated through assignment
     43  8400 ????						;			    in uninitialised segments.	This allows a changeable base
     44  8400 ????						;			    address architecture.
     45  8400 ????						; 1.0	22/MAR/2003		Initial release
     46  8400 ????
     47  8400 ????
     48  8400 ????						;-------------------------------------------------------------------------------
     49  8400 ????
     50  8400 ????						; TIA_BASE_ADDRESS
     51  8400 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  8400 ????						; Normally 0, the base address should (externally, before including this file)
     53  8400 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  8400 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  8400 ????						; < $40 as a bankswitch.
     56  8400 ????
     57  8400 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  8400 ????			  -TIA_BASE_ADDRESS =	0
     59  8400 ????				      ENDIF
     60  8400 ????
     61  8400 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  8400 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  8400 ????						; *OR* by declaring the label before including this file, eg:
     64  8400 ????						; TIA_BASE_ADDRESS = $40
     65  8400 ????						;   include "vcs.h"
     66  8400 ????
     67  8400 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  8400 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  8400 ????						; for the mirrored ROM hardware registers.
     70  8400 ????
     71  8400 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  8400 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  8400 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  8400 ????
     75  8400 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  8400 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  8400 ????				      ENDIF
     78  8400 ????
     79  8400 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  8400 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  8400 ????				      ENDIF
     82  8400 ????
     83  8400 ????						;-------------------------------------------------------------------------------
     84  8400 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  8400 ????				      SEG
    201  8400 ????
    202  8400 ????						; EOF
------- FILE c:\Users\roger\OneDrive\Documents\Atari\BrawdyBAS\brawdy.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  8400 ????				      include	"macro.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????						; MACRO.H
      4  8400 ????						; Version 1.05, 13/NOVEMBER/2003
      5  8400 ????
      6  8400 ????	       00 69	   VERSION_MACRO =	105
      7  8400 ????
      8  8400 ????						;
      9  8400 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  8400 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  8400 ????						;
     12  8400 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  8400 ????						; It is distributed as a companion machine-specific support package
     14  8400 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  8400 ????						; available at at http://www.atari2600.org/dasm
     16  8400 ????						;
     17  8400 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  8400 ????						; contents, or would like to add something, please write to me
     19  8400 ????						; (atari2600@taswegian.com) with your contribution.
     20  8400 ????						;
     21  8400 ????						; Latest Revisions...
     22  8400 ????						;
     23  8400 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  8400 ????						;			    This will allow conditional code to verify MACRO.H being
     25  8400 ????						;			    used for code assembly.
     26  8400 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  8400 ????						;
     28  8400 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  8400 ????						;
     30  8400 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  8400 ????						;			   (standardised macro for vertical synch code)
     32  8400 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  8400 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  8400 ????						; 1.0	22/MAR/2003		Initial release
     35  8400 ????
     36  8400 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  8400 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  8400 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  8400 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  8400 ????						;   registers and require them to be defined first).
     41  8400 ????
     42  8400 ????						; Available macros...
     43  8400 ????						;   SLEEP n		 - sleep for n cycles
     44  8400 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  8400 ????						;   CLEAN_START	 - set machine to known state on startup
     46  8400 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  8400 ????
     48  8400 ????						;-------------------------------------------------------------------------------
     49  8400 ????						; SLEEP duration
     50  8400 ????						; Original author: Thomas Jentzsch
     51  8400 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  8400 ????						; useful for code where precise timing is required.
     53  8400 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  8400 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  8400 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  8400 ????
     57  8400 ????				      MAC	sleep
     58  8400 ????			   .CYCLES    SET	{1}
     59  8400 ????
     60  8400 ????				      IF	.CYCLES < 2
     61  8400 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  8400 ????				      ERR
     63  8400 ????				      ENDIF
     64  8400 ????
     65  8400 ????				      IF	.CYCLES & 1
     66  8400 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  8400 ????				      nop	0
     68  8400 ????				      ELSE
     69  8400 ????				      bit	VSYNC
     70  8400 ????				      ENDIF
     71  8400 ????			   .CYCLES    SET	.CYCLES - 3
     72  8400 ????				      ENDIF
     73  8400 ????
     74  8400 ????				      REPEAT	.CYCLES / 2
     75  8400 ????				      nop
     76  8400 ????				      REPEND
     77  8400 ????				      ENDM		;usage: SLEEP n (n>1)
     78  8400 ????
     79  8400 ????						;-------------------------------------------------------------------------------
     80  8400 ????						; VERTICAL_SYNC
     81  8400 ????						; Original author: Manuel Polik
     82  8400 ????						; Inserts the code required for a proper 3 scannline 
     83  8400 ????						; vertical sync sequence
     84  8400 ????						;
     85  8400 ????						; Note: Alters the accumulator
     86  8400 ????						;
     87  8400 ????						; IN:
     88  8400 ????						; OUT: A = 1
     89  8400 ????
     90  8400 ????				      MAC	vertical_sync
     91  8400 ????				      LDA	#$02	; A = VSYNC enable
     92  8400 ????				      STA	WSYNC	; Finish current line
     93  8400 ????				      STA	VSYNC	; Start vertical sync
     94  8400 ????				      STA	WSYNC	; 1st line vertical sync
     95  8400 ????				      STA	WSYNC	; 2nd line vertical sync
     96  8400 ????				      LSR		; A = VSYNC disable
     97  8400 ????				      STA	WSYNC	; 3rd line vertical sync
     98  8400 ????				      STA	VSYNC	; Stop vertical sync
     99  8400 ????				      ENDM
    100  8400 ????
    101  8400 ????						;-------------------------------------------------------------------------------
    102  8400 ????						; CLEAN_START
    103  8400 ????						; Original author: Andrew Davie
    104  8400 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  8400 ????						; Sets stack pointer to $FF, and all registers to 0
    106  8400 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  8400 ????						; Use as very first section of code on boot (ie: at reset)
    108  8400 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  8400 ????
    110  8400 ????				      MAC	clean_start
    111  8400 ????				      sei
    112  8400 ????				      cld
    113  8400 ????
    114  8400 ????				      ldx	#0
    115  8400 ????				      txa
    116  8400 ????				      tay
    117  8400 ????			   .CLEAR_STACK dex
    118  8400 ????				      txs
    119  8400 ????				      pha
    120  8400 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  8400 ????
    122  8400 ????				      ENDM
    123  8400 ????
    124  8400 ????						;-------------------------------------------------------
    125  8400 ????						; SET_POINTER
    126  8400 ????						; Original author: Manuel Rotschkar
    127  8400 ????						;
    128  8400 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  8400 ????						;
    130  8400 ????						; Usage: SET_POINTER pointer, address
    131  8400 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  8400 ????						;
    133  8400 ????						; Note: Alters the accumulator, NZ flags
    134  8400 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  8400 ????						; IN 2: absolute address
    136  8400 ????
    137  8400 ????				      MAC	set_pointer
    138  8400 ????			   .POINTER   SET	{1}
    139  8400 ????			   .ADDRESS   SET	{2}
    140  8400 ????
    141  8400 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  8400 ????				      STA	.POINTER	; Store in pointer
    143  8400 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  8400 ????				      STA	.POINTER+1	; Store in pointer+1
    145  8400 ????
    146  8400 ????				      ENDM
    147  8400 ????
    148  8400 ????						; EOF
------- FILE c:\Users\roger\OneDrive\Documents\Atari\BrawdyBAS\brawdy.bas.asm
------- FILE DPCplus.h LEVEL 2 PASS 3
      0  8400 ????				      include	"DPCplus.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????						; DPCplus.H - Display Processor Chip Plus Definitions
      4  8400 ????						; Chris Walton, Fred Quimby, Darrell Spice 2010
      5  8400 ????						; Version 0.00
      6  8400 ????
      7  8400 ????						; DPC Base Address
      8  8400 ????			  -	      IFNCONST	DPC_BASE_ADDRESS
      9  8400 ????			  -DPC_BASE_ADDRESS =	$1000
     10  8400 ????				      ENDIF
     11  8400 ????
     12  8400 ????						; DPC Read Base
     13  8400 ????			  -	      IFNCONST	DPC_BASE_READ_ADDRESS
     14  8400 ????			  -DPC_BASE_READ_ADDRESS =	DPC_BASE_ADDRESS
     15  8400 ????				      ENDIF
     16  8400 ????
     17  8400 ????						; DPC Write Base
     18  8400 ????			  -	      IFNCONST	DPC_BASE_WRITE_ADDRESS
     19  8400 ????			  -DPC_BASE_WRITE_ADDRESS =	DPC_BASE_ADDRESS+$28
     20  8400 ????				      ENDIF
     21  8400 ????
     22 U1028 ????				      SEG.U	DPC_REGISTERS_READ
     23 U1000					      ORG	DPC_BASE_READ_ADDRESS
     24 U1000
     25 U1000							;****************************************
     26 U1000							; DPC+ Read Registers
     27 U1000							;****************************************
     28 U1000							;
     29 U1000							;----------------------------------------
     30 U1000							; Random Numbers
     31 U1000							;----------------------------------------
     32 U1000							; DPC+ provides a 32 bit LFSR (Linear feedback shift register)
     33 U1000							; which is used as a random number generator.	Each individual byte of the
     34 U1000							; random number will return values from 0-255.  The random numbers will follow
     35 U1000							; an exact sequence, so it's best to clock them at least once per frame even if 
     36 U1000							; you don't need the value (this allows the amount of time it takes the user to
     37 U1000							; start the game to select a random starting point in the sequence)
     38 U1000							;----------------------------------------
     39 U1000		       00	   RANDOM0NEXT DS	1	; $00 clock next 32 bit number and returns byte 0
     40 U1001		       00	   RANDOM0PRIOR DS	1	; $01 clock prior 32 bit number and returns byte 0
     41 U1002		       00	   RANDOM1    DS	1	; $02 returns byte 1 of random number w/out clock
     42 U1003		       00	   RANDOM2    DS	1	; $03 returns byte 2 of random number w/out clock
     43 U1004		       00	   RANDOM3    DS	1	; $04 returns byte 3 of random number w/out clock
     44 U1005
     45 U1005							;----------------------------------------
     46 U1005							; Music Fetcher
     47 U1005							;----------------------------------------
     48 U1005							; When generating music, this value must be read every single scanline and
     49 U1005							; stored into AUDV0.
     50 U1005							;----------------------------------------
     51 U1005		       00	   AMPLITUDE  DS	1	; $05
     52 U1006
     53 U1006							;----------------------------------------
     54 U1006							; Reserved
     55 U1006							;----------------------------------------
     56 U1006		       00		      DS	1	; $06
     57 U1007		       00		      DS	1	; $07
     58 U1008
     59 U1008							;----------------------------------------
     60 U1008							; Data Fetcher
     61 U1008							;----------------------------------------
     62 U1008							; There are 8 Data Fetchers which are used to access data stored in the Display
     63 U1008							; Data bank.  Before using, you must point the Data Fetcher at the data to read
     64 U1008							; via DFxLOW and DFxHI.  After each read the Data Fetcher will update to point
     65 U1008							; to the next byte of data to return.
     66 U1008							;
     67 U1008							; psuedo code* to point Data Fetcher 1 to the color data
     68 U1008							;	lda #<(ColorDataPosition - HowFarDownScreen)
     69 U1008							;	sta DF1LOW
     70 U1008							;	lda #>(ColorDataPosition - HowFarDownScreen)
     71 U1008							;	sta DF1HI 
     72 U1008							;	....
     73 U1008							; then in the kernel read the Data Fetcher and update the color, takes 7 cycles
     74 U1008							;	LDA DF1DATA
     75 U1008							;	STA COLUP0
     76 U1008							;
     77 U1008							; * see DPCplus.asm for actual code
     78 U1008							;----------------------------------------
     79 U1008		       00	   DF0DATA    DS	1	; $08
     80 U1009		       00	   DF1DATA    DS	1	; $09
     81 U100a		       00	   DF2DATA    DS	1	; $0A
     82 U100b		       00	   DF3DATA    DS	1	; $0B
     83 U100c		       00	   DF4DATA    DS	1	; $0C
     84 U100d		       00	   DF5DATA    DS	1	; $0D
     85 U100e		       00	   DF6DATA    DS	1	; $0E
     86 U100f		       00	   DF7DATA    DS	1	; $0F
     87 U1010
     88 U1010							;----------------------------------------
     89 U1010							; Data Fetcher, Windowed
     90 U1010							;----------------------------------------
     91 U1010							; The 8 Data Fetchers can also be read in a "windowed" mode, which is most
     92 U1010							; commonly used to update sprites.  To use windowed mode, point the Data
     93 U1010							; Fetcher the same as above, but then also set the Top and Bottom of the
     94 U1010							; Window using DFxTOP and DFxBOT.  When reading via the DFxDATAW registers, a 0
     95 U1010							; value will be returned for anything that's outside of the window.
     96 U1010							;
     97 U1010							; psuedo code to point Data Fetcher0 to the sprite data
     98 U1010							;	lda #<(SpriteDataPosition - HowFarDownScreen)
     99 U1010							;	sta DF0LOW
    100 U1010							;	lda #>(SpriteDataPosition - HowFarDownScreen)
    101 U1010							;	sta DF0HI
    102 U1010							;	
    103 U1010							; set the window for Data Fetcher 0
    104 U1010							;	lda #<(SpriteDataPosition - 1)
    105 U1010							;	sta DF0TOP
    106 U1010							;	lda #<(SpriteDataPosition + ImageHeight)
    107 U1010							;	sta DF0BOT
    108 U1010							;	....
    109 U1010							; then in the kernel read the Data Fetcher and update the sprite, takes 7 cycles
    110 U1010							;	LDA DF0DATAW
    111 U1010							;	STA GRP0
    112 U1010							;----------------------------------------
    113 U1010		       00	   DF0DATAW   DS	1	; $10
    114 U1011		       00	   DF1DATAW   DS	1	; $11
    115 U1012		       00	   DF2DATAW   DS	1	; $12
    116 U1013		       00	   DF3DATAW   DS	1	; $13
    117 U1014		       00	   DF4DATAW   DS	1	; $14
    118 U1015		       00	   DF5DATAW   DS	1	; $15
    119 U1016		       00	   DF6DATAW   DS	1	; $16
    120 U1017		       00	   DF7DATAW   DS	1	; $17
    121 U1018
    122 U1018							;----------------------------------------
    123 U1018							; Fractional Data Fetcher
    124 U1018							;----------------------------------------
    125 U1018							; Another 8 Data Fetchers exist which work differently than the first 8.
    126 U1018							; These allow you to fractionally increment the Data Fetcher so a single
    127 U1018							; value can be read a set number of times before advancing to the next value.
    128 U1018							; This is commonly used to draw asymmetrical playfields without needing to 
    129 U1018							; use 1200 bytes of data (200 scanlines * 6 playfield updates).
    130 U1018							; Before using, you must point the Fractional Data Fetcher at the data to read
    131 U1018							; via DFxFRACLOW and DFxFRACHI.  You must also set the increment value via
    132 U1018							; DFxFRACINC.
    133 U1018							;
    134 U1018							; Set pointer
    135 U1018							;	LDA #<PlayfieldPF0l
    136 U1018							;	STA DF0FRACLOW
    137 U1018							;	... repeat for PF1l, PF2l, PF0r, PF1r and PF2r
    138 U1018							;	lda #>PlayFieldPF0l
    139 U1018							;	STA DF0FRACHI
    140 U1018							;	... repeat for PF1l, PF2l, PF0r, PF1r and PF2r
    141 U1018							; Set the increment to repeat the value for x reads
    142 U1018							;	LDA #(256/x)
    143 U1018							;	STA DF0FRACINC
    144 U1018							;	 STA DF1FRACINC
    145 U1018							;	... repeat for 2-5
    146 U1018							;
    147 U1018							; Special Condition - IF you want to increment the pointer after every read 
    148 U1018							; (just like the normal Data Fetcher), then use the following to set the
    149 U1018							; increment AND prime the Fractional Data Fetcher
    150 U1018							;	LDA #255
    151 U1018							;	STA DF0FRACINC
    152 U1018							;	 STA DF1FRACINC
    153 U1018							;	... repeat for 2-5
    154 U1018							;	LDA DF0FRACDATA - priming read (first value will be read twice)
    155 U1018							;	LDA DF1FRACDATA - priming read (first value will be read twice)
    156 U1018							;	... repeat for 2-5
    157 U1018							;
    158 U1018							; then in the kernel read the Fractional Data Fetchers and update the playfield
    159 U1018							;	LDA DF0FRACDATA
    160 U1018							;	STA PF0
    161 U1018							;	LDA PF1FRACDATA
    162 U1018							;	STA PF1
    163 U1018							;	... repeat for Data Fetchers 2-5, putting them in PF2, PF0, PF1 and PF2
    164 U1018							;----------------------------------------
    165 U1018		       00	   DF0FRACDATA DS	1	; $18
    166 U1019		       00	   DF1FRACDATA DS	1	; $19
    167 U101a		       00	   DF2FRACDATA DS	1	; $1A
    168 U101b		       00	   DF3FRACDATA DS	1	; $1B
    169 U101c		       00	   DF4FRACDATA DS	1	; $1C
    170 U101d		       00	   DF5FRACDATA DS	1	; $1D
    171 U101e		       00	   DF6FRACDATA DS	1	; $1E
    172 U101f		       00	   DF7FRACDATA DS	1	; $1F
    173 U1020
    174 U1020							;----------------------------------------
    175 U1020							; Data Fetcher Window Flag
    176 U1020							;----------------------------------------
    177 U1020							; The Data Fetcher Window Flag allows you to dual-purpose the first four
    178 U1020							; Data Fetchers.  The Window is not required when a Data Fetcher is used to
    179 U1020							; update a sprite's color.  The Flag will return $FF if it's within the window,
    180 U1020							; or 0 if it's not - this value can be used to control the display of the ball
    181 U1020							; and missiles. The Data Fetcher will NOT increment when reading the flag.
    182 U1020							;
    183 U1020							; psuedo code to point Data Fetcher 1 to the color data
    184 U1020							;	lda #<(ColorDataPosition - HowFarDownScreen)
    185 U1020							;	sta DF1LOW
    186 U1020							;	lda #>(ColorDataPosition - HowFarDownScreen)
    187 U1020							;	sta DF1HI
    188 U1020							;
    189 U1020							; set the window based on the missile's Y position and height (number of
    190 U1020							; scanlines to draw missile on)
    191 U1020							;	lda #<(ColorDataPosition + MissileYposition - 1)
    192 U1020							;	sta DF1TOP
    193 U1020							;	lda #<(ColorDataPosition + MissileYposition + MissileHeight)
    194 U1020							;	sta DF1BOT
    195 U1020							;
    196 U1020							; then in the kernel read the Data Fetcher and update the color, then read the
    197 U1020							; flag and update the missile
    198 U1020							;	LDA DF1DATA
    199 U1020							;	STA COLUP0
    200 U1020							;	LDA DF1FLAG
    201 U1020							;	STA ENAM0
    202 U1020							;----------------------------------------
    203 U1020		       00	   DF0FLAG    DS	1	; $20
    204 U1021		       00	   DF1FLAG    DS	1	; $21
    205 U1022		       00	   DF2FLAG    DS	1	; $22
    206 U1023		       00	   DF3FLAG    DS	1	; $23
    207 U1024
    208 U1024							;----------------------------------------
    209 U1024							; Reserved
    210 U1024							;----------------------------------------
    211 U1024		       00		      DS	1	; $24
    212 U1025		       00		      DS	1	; $25
    213 U1026		       00		      DS	1	; $26
    214 U1027		       00		      DS	1	; $27
    215 U1028
    216 U1028
    217 U1080 ????				      SEG.U	DPC_REGISTERS_WRITE
    218 U1028					      ORG	DPC_BASE_WRITE_ADDRESS
    219 U1028
    220 U1028							;****************************************
    221 U1028							; SECTION 2 - DPC+ Write Registers
    222 U1028							;****************************************
    223 U1028							;
    224 U1028							;----------------------------------------
    225 U1028							; Fractional Data Fetcher, Low Pointer
    226 U1028							;----------------------------------------
    227 U1028							; These are used in conjunction with DFxFRACHI to point a Fractional Data
    228 U1028							; Fetcher to the data to read.  For usage, see "Fractional Data Fetcher"
    229 U1028							; in SECTION 1.
    230 U1028							;----------------------------------------
    231 U1028		       00	   DF0FRACLOW DS	1	; $28
    232 U1029		       00	   DF1FRACLOW DS	1	; $29
    233 U102a		       00	   DF2FRACLOW DS	1	; $2A
    234 U102b		       00	   DF3FRACLOW DS	1	; $2B
    235 U102c		       00	   DF4FRACLOW DS	1	; $2C
    236 U102d		       00	   DF5FRACLOW DS	1	; $2D
    237 U102e		       00	   DF6FRACLOW DS	1	; $2E
    238 U102f		       00	   DF7FRACLOW DS	1	; $2F
    239 U1030
    240 U1030							;----------------------------------------
    241 U1030							; Fractional Data Fetcher, High Pointer
    242 U1030							;----------------------------------------
    243 U1030							; These are used in conjunction with DFxFRACLOW to point a Fractional Data
    244 U1030							; Fetcher to the data to read.  For usage, see "Fractional Data Fetcher"
    245 U1030							; in SECTION 1.
    246 U1030							;
    247 U1030							; NOTE: for only the lower 4 bits are used.
    248 U1030							;----------------------------------------
    249 U1030		       00	   DF0FRACHI  DS	1	; $30
    250 U1031		       00	   DF1FRACHI  DS	1	; $31
    251 U1032		       00	   DF2FRACHI  DS	1	; $32
    252 U1033		       00	   DF3FRACHI  DS	1	; $33
    253 U1034		       00	   DF4FRACHI  DS	1	; $34
    254 U1035		       00	   DF5FRACHI  DS	1	; $35 
    255 U1036		       00	   DF6FRACHI  DS	1	; $36 
    256 U1037		       00	   DF7FRACHI  DS	1	; $37 
    257 U1038
    258 U1038							;----------------------------------------
    259 U1038							; Fractional Data Fetcher, Increment
    260 U1038							;----------------------------------------
    261 U1038							; These are used to set the increment amount for the Fractional Data Fetcher.
    262 U1038							; To increment pointer after every Xth read use int(256/X)
    263 U1038							; For usage, see "Fractional Data Fetcher" in SECTION 1.
    264 U1038							;----------------------------------------
    265 U1038		       00	   DF0FRACINC DS	1	; $38
    266 U1039		       00	   DF1FRACINC DS	1	; $39
    267 U103a		       00	   DF2FRACINC DS	1	; $3A
    268 U103b		       00	   DF3FRACINC DS	1	; $3B
    269 U103c		       00	   DF4FRACINC DS	1	; $3C
    270 U103d		       00	   DF5FRACINC DS	1	; $3D
    271 U103e		       00	   DF6FRACINC DS	1	; $3E
    272 U103f		       00	   DF7FRACINC DS	1	; $3F
    273 U1040
    274 U1040							;----------------------------------------
    275 U1040							; Data Fetcher, Window Top
    276 U1040							;----------------------------------------
    277 U1040							; These are used with DFxBOT to define the Data Fetcher Window
    278 U1040							; For usage, see "Data Fetcher, Windowed" in SECTION 1.
    279 U1040							;----------------------------------------
    280 U1040		       00	   DF0TOP     DS	1	; $40
    281 U1041		       00	   DF1TOP     DS	1	; $41
    282 U1042		       00	   DF2TOP     DS	1	; $42
    283 U1043		       00	   DF3TOP     DS	1	; $43
    284 U1044		       00	   DF4TOP     DS	1	; $44
    285 U1045		       00	   DF5TOP     DS	1	; $45
    286 U1046		       00	   DF6TOP     DS	1	; $46
    287 U1047		       00	   DF7TOP     DS	1	; $47
    288 U1048
    289 U1048							;----------------------------------------
    290 U1048							; Data Fetcher, Window Bottom
    291 U1048							;----------------------------------------
    292 U1048							; These are used with DFxTOP to define the Data Fetcher Window
    293 U1048							; For usage, see "Data Fetcher, Windowed" in SECTION 1.
    294 U1048							;----------------------------------------
    295 U1048		       00	   DF0BOT     DS	1	; $48
    296 U1049		       00	   DF1BOT     DS	1	; $49
    297 U104a		       00	   DF2BOT     DS	1	; $4A
    298 U104b		       00	   DF3BOT     DS	1	; $4B
    299 U104c		       00	   DF4BOT     DS	1	; $4C
    300 U104d		       00	   DF5BOT     DS	1	; $4D
    301 U104e		       00	   DF6BOT     DS	1	; $4E
    302 U104f		       00	   DF7BOT     DS	1	; $4F
    303 U1050
    304 U1050							;----------------------------------------
    305 U1050							; Data Fetcher, Low Pointer
    306 U1050							;----------------------------------------
    307 U1050							; These are used in conjunction with DFxHI to point a Data Fetcher to the data
    308 U1050							; to read.  For usage, see "Data Fetcher" in SECTION 1.
    309 U1050							;----------------------------------------
    310 U1050		       00	   DF0LOW     DS	1	; $50
    311 U1051		       00	   DF1LOW     DS	1	; $51
    312 U1052		       00	   DF2LOW     DS	1	; $52
    313 U1053		       00	   DF3LOW     DS	1	; $53
    314 U1054		       00	   DF4LOW     DS	1	; $54
    315 U1055		       00	   DF5LOW     DS	1	; $55
    316 U1056		       00	   DF6LOW     DS	1	; $56
    317 U1057		       00	   DF7LOW     DS	1	; $57
    318 U1058
    319 U1058							;----------------------------------------
    320 U1058							; Fast Fetch Mode
    321 U1058							;----------------------------------------
    322 U1058							; Fast Fetch Mode enables the fastest way to read DPC+ registers.  Normal
    323 U1058							; reads use LDA Absolute addressing (LDA DF0DATA) which takes 4 cycles to
    324 U1058							; process.  Fast Fetch Mode intercepts LDA Immediate addressing (LDA #<DF0DATA)
    325 U1058							; which takes only 2 cycles!  Only immediate values < $28 are intercepted
    326 U1058							; 
    327 U1058							; set Fast Fetch Mode
    328 U1058							;	LDA #0
    329 U1058							;	STA FASTFETCH
    330 U1058							;
    331 U1058							; then use immediate mode to read the registers, takes just 5 cycles to update
    332 U1058							; any TIA register
    333 U1058							;
    334 U1058							;	LDA #<DF0DATA
    335 U1058							;	STA GRP0
    336 U1058							;
    337 U1058							; when done, turn off Fast Fetch Mode using any non-zero value
    338 U1058							;	LDA #$FF
    339 U1058							;	STA FASTFETCH
    340 U1058							;
    341 U1058							; NOTE: if you forget to turn off FASTFETCH mode, then code like this will not
    342 U1058							;	 work as you expect
    343 U1058							;	LDA #0	; returns a RANDOM NUMBER, not 0.
    344 U1058							;	STA COLUPF
    345 U1058							;----------------------------------------
    346 U1058		       00	   FASTFETCH  DS	1	; $58
    347 U1059
    348 U1059							;----------------------------------------
    349 U1059							; Function Support
    350 U1059							;----------------------------------------
    351 U1059							; Currently only Function 255 is defined, and it is used to call user
    352 U1059							; written ARM routines (or C code compiled for the ARM processor.)
    353 U1059							;
    354 U1059							; PARAMETER is not used by function 255, it may be used by future functions.
    355 U1059							; 
    356 U1059							; call custom ARM routine
    357 U1059							;	LDA #$FF
    358 U1059							;	STA CALLFUNCTION
    359 U1059							;
    360 U1059							; A custom ARM demo will be released in the near future
    361 U1059							;----------------------------------------
    362 U1059		       00	   PARAMETER  DS	1	; $59
    363 U105a		       00	   CALLFUNCTION DS	1	; $5A
    364 U105b
    365 U105b							;----------------------------------------
    366 U105b							; Reserved
    367 U105b							;----------------------------------------
    368 U105b		       00		      DS	1	; $5B	 ; reserved
    369 U105c		       00		      DS	1	; $5C	 ; reserved
    370 U105d
    371 U105d							;----------------------------------------
    372 U105d							; Waveforms
    373 U105d							;----------------------------------------
    374 U105d							; Waveforms are 32 byte tables that define a waveform.  Waveforms must be 32
    375 U105d							; byte aligned, and can only be stored in the 4K Display Data Bank. You MUST
    376 U105d							; define an "OFF" waveform,  comprised of all zeros.  The sum of all waveforms
    377 U105d							; being played should be <= 15, so typically you'll use a maximum of 5 for any
    378 U105d							; given value.
    379 U105d							;
    380 U105d							; Valid values are 0-127 and point to the 4K Display Data bank.  The formula
    381 U105d							; (* & $1fff)/32 as shown below will calculate the value for you
    382 U105d							;
    383 U105d							;
    384 U105d							; example waveforms
    385 U105d							;	align 32		; forces the waveform to a 32 byte boundary
    386 U105d							;SOUND_OFF = (* & $1fff)/32	; calculates waveform pointer
    387 U105d							;	.byte 0,0,0,0,0,0,0,0
    388 U105d							;	.byte 0,0,0,0,0,0,0,0
    389 U105d							;	.byte 0,0,0,0,0,0,0,0
    390 U105d							;	.byte 0,0,0,0,0,0,0,0 
    391 U105d							; 
    392 U105d							;	align 32
    393 U105d							;SINE_WAVE = (* & $1fff)/32
    394 U105d							;	.byte 3,3,3,4,4,5,5,5
    395 U105d							;	.byte 5,5,5,5,4,4,3,3
    396 U105d							;	.byte 3,2,2,1,1,0,0,0
    397 U105d							;	.byte 0,0,0,0,1,1,2,2 
    398 U105d							;
    399 U105d							; usage, set voice 0 to Sine Wave, set voice 1 & 2 off
    400 U105d							;	LDA #SINE_WAVE
    401 U105d							;	STA WAVEFORM0
    402 U105d							;	LDA #SOUND_OFF
    403 U105d							;	STA WAVEFORM1
    404 U105d							;	STA WAVEFORM2	
    405 U105d							;----------------------------------------
    406 U105d		       00	   WAVEFORM0  DS	1	; $5D
    407 U105e		       00	   WAVEFORM1  DS	1	; $5E
    408 U105f		       00	   WAVEFORM2  DS	1	; $5F
    409 U1060
    410 U1060							;----------------------------------------
    411 U1060							; Data Fetcher Push (stack)
    412 U1060							;----------------------------------------
    413 U1060							; The Data Fetchers can also be used to update the contents of the 4K
    414 U1060							; Display Data bank.  Point the Data Fetcher to the data to change,
    415 U1060							; then Push to it.  The Data Fetcher's pointer will be decremented BEFORE
    416 U1060							; the data is written.
    417 U1060							;
    418 U1060							; point Data Fetcher 1 to the sprite data
    419 U1060							;	lda #<DisplayData
    420 U1060							;	sta DF1LOW
    421 U1060							;	lda #>DisplayData
    422 U1060							;	sta DF1HI 
    423 U1060							;
    424 U1060							; then update it
    425 U1060							;	LDA #$FF
    426 U1060							;	STA DF1PUSH ; changes data at DisplayData - 1
    427 U1060							;	LDA #$81
    428 U1060							;	STA DF1OUSH ; changes data at DisplayData - 2
    429 U1060							;----------------------------------------
    430 U1060		       00	   DF0PUSH    DS	1	; $60
    431 U1061		       00	   DF1PUSH    DS	1	; $61
    432 U1062		       00	   DF2PUSH    DS	1	; $62
    433 U1063		       00	   DF3PUSH    DS	1	; $63
    434 U1064		       00	   DF4PUSH    DS	1	; $64
    435 U1065		       00	   DF5PUSH    DS	1	; $65
    436 U1066		       00	   DF6PUSH    DS	1	; $66
    437 U1067		       00	   DF7PUSH    DS	1	; $67
    438 U1068
    439 U1068							;----------------------------------------
    440 U1068							; Data Fetcher, High Pointer
    441 U1068							;----------------------------------------
    442 U1068							; These are used in conjunction with DFxLOW to point a Data Fetcher to the data
    443 U1068							; to read.  For usage, see "Data Fetcher" in SECTION 1.
    444 U1068							;----------------------------------------
    445 U1068		       00	   DF0HI      DS	1	; $68
    446 U1069		       00	   DF1HI      DS	1	; $69
    447 U106a		       00	   DF2HI      DS	1	; $6A
    448 U106b		       00	   DF3HI      DS	1	; $6B
    449 U106c		       00	   DF4HI      DS	1	; $6C
    450 U106d		       00	   DF5HI      DS	1	; $6D 
    451 U106e		       00	   DF6HI      DS	1	; $6E 
    452 U106f		       00	   DF7HI      DS	1	; $6F 
    453 U1070
    454 U1070							;----------------------------------------
    455 U1070							; Random Number Initialization
    456 U1070							;----------------------------------------
    457 U1070							; The random number generate defaults to a value that spells out DPC+.
    458 U1070							; Store any value to RRESET to set the random number back to DPC+, or you
    459 U1070							; can use RWRITE0-3 to change the 32 bit value to anything you desire.
    460 U1070							;
    461 U1070							; reset random number
    462 U1070							;	LDA #0
    463 U1070							;	STA RRESET
    464 U1070							;
    465 U1070							; set a specific random number (spells out 2600)
    466 U1070							;	LDA #$32
    467 U1070							;	STA RWRITE0
    468 U1070							;	LDA #$36
    469 U1070							;	STA RWRITE1
    470 U1070							;	LDA #$30
    471 U1070							;	STA RWRITE2
    472 U1070							;	STA RWRITE3
    473 U1070							;
    474 U1070							; NOTE: do not set all 4 bytes to 0, as that will disable the generator.
    475 U1070							;----------------------------------------
    476 U1070		       00	   RRESET     DS	1	; $70
    477 U1071		       00	   RWRITE0    DS	1	; $71
    478 U1072		       00	   RWRITE1    DS	1	; $72
    479 U1073		       00	   RWRITE2    DS	1	; $73
    480 U1074		       00	   RWRITE3    DS	1	; $74
    481 U1075
    482 U1075							;----------------------------------------
    483 U1075							; Notes
    484 U1075							;----------------------------------------
    485 U1075							; These are used to select a value from the frequency table to play.
    486 U1075							; The default table, store in DPC_frequencies.h, only defines frequencies
    487 U1075							; for 1-88, which cover the keys of a piano.  You are free to add additional
    488 U1075							; frequencies from 88-255.  Piano keys are defined at the end of this file
    489 U1075							;
    490 U1075							; set voice 0 to middle C
    491 U1075							;	LDA #C4
    492 U1075							;	STA NOTE0
    493 U1075							;
    494 U1075							; Note: if you are using ARM USER CODE then you can only use notes to 128.
    495 U1075							;----------------------------------------
    496 U1075		       00	   NOTE0      DS	1	; $75
    497 U1076		       00	   NOTE1      DS	1	; $76
    498 U1077		       00	   NOTE2      DS	1	; $77
    499 U1078
    500 U1078							;----------------------------------------
    501 U1078							; Data Fetcher Write (queue)
    502 U1078							;----------------------------------------
    503 U1078							; The Data Fetchers can also be used to update the contents of the 4K
    504 U1078							; Display Data bank.  Point the Data Fetcher to the data to change,
    505 U1078							; then Write to it  The Data Fetcher's pointer will be incremented AFTER
    506 U1078							; the data is written.
    507 U1078							;
    508 U1078							; point Data Fetcher 1 to the sprite data
    509 U1078							;	lda #<SpriteData
    510 U1078							;	sta DF1LOW
    511 U1078							;	lda #>SpriteData
    512 U1078							;	sta DF1HI 
    513 U1078							;
    514 U1078							; then update it
    515 U1078							;	LDA #$FF
    516 U1078							;	STA DF1WRITE ; changes data at SpriteData
    517 U1078							;	LDA #$81
    518 U1078							;	STA DF1WRITE ; changes data at SpriteData + 1
    519 U1078							;----------------------------------------
    520 U1078		       00	   DF0WRITE   DS	1	; $78
    521 U1079		       00	   DF1WRITE   DS	1	; $79
    522 U107a		       00	   DF2WRITE   DS	1	; $7A
    523 U107b		       00	   DF3WRITE   DS	1	; $7B
    524 U107c		       00	   DF4WRITE   DS	1	; $7C
    525 U107d		       00	   DF5WRITE   DS	1	; $7D
    526 U107e		       00	   DF6WRITE   DS	1	; $7E
    527 U107f		       00	   DF7WRITE   DS	1	; $7F
    528 U1080
    529 U1080							;-------------------------------------------------------------------------------
    530 U1080							; The following required for back-compatibility with code which does not use
    531 U1080							; segments.
    532 U1080
    533  8400 ????				      SEG
------- FILE c:\Users\roger\OneDrive\Documents\Atari\BrawdyBAS\brawdy.bas.asm
------- FILE DPCplusbB.h LEVEL 2 PASS 3
      0  8400 ????				      include	"DPCplusbB.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3 U00f5 ????				      SEG.U	vars
      4 U0080					      org	$80
      5 U0080		       00	   player0x   ds	1
      6 U0081		       00	   topP1x     ds	1
      7 U0082		       00	   missile0x  ds	1
      8 U0083		       00	   missile1x  ds	1
      9 U0084		       00	   ballx      ds	1
     10 U0085
     11 U0085		       00 00 00 00*SpriteGfxIndex ds	9
     12 U008e
     13 U008e		       00	   spritedisplay ds	1
     14 U008f
     15 U008f		       00	   player0xcoll ds	1	; to detect p0x colls
     16 U0090		       00	   NewSpriteX ds	1	;		X position
     17 U0090		       00 90	   player1x   =	NewSpriteX
     18 U0091		       00	   player2x   ds	1
     19 U0092		       00	   player3x   ds	1
     20 U0093		       00	   player4x   ds	1
     21 U0094		       00	   player5x   ds	1
     22 U0095		       00	   player6x   ds	1
     23 U0096		       00	   player7x   ds	1
     24 U0097		       00	   player8x   ds	1
     25 U0098		       00	   player9x   ds	1
     26 U0099
     27 U0099		       00	   player0y   ds	1
     28 U009a		       00	   NewSpriteY ds	1	;		Y position
     29 U009a		       00 9a	   player1y   =	NewSpriteY
     30 U009b		       00	   player2y   ds	1
     31 U009c		       00	   player3y   ds	1
     32 U009d		       00	   player4y   ds	1
     33 U009e		       00	   player5y   ds	1
     34 U009f		       00	   player6y   ds	1
     35 U00a0		       00	   player7y   ds	1
     36 U00a1		       00	   player8y   ds	1
     37 U00a2		       00	   player9y   ds	1
     38 U00a3
     39 U00a3		       00 00	   player0color ds	2
     40 U00a5
     41 U00a5		       00	   player0height ds	1
     42 U00a6		       00	   player1height ds	1
     43 U00a7		       00	   player2height ds	1
     44 U00a8		       00	   player3height ds	1
     45 U00a9		       00	   player4height ds	1
     46 U00aa		       00	   player5height ds	1
     47 U00ab		       00	   player6height ds	1
     48 U00ac		       00	   player7height ds	1
     49 U00ad		       00	   player8height ds	1
     50 U00ae		       00	   player9height ds	1
     51 U00af
     52 U00af		       00	   _NUSIZ1    ds	1
     53 U00b0		       00	   NUSIZ2     ds	1
     54 U00b1		       00	   NUSIZ3     ds	1
     55 U00b2		       00	   NUSIZ4     ds	1
     56 U00b3		       00	   NUSIZ5     ds	1
     57 U00b4		       00	   NUSIZ6     ds	1
     58 U00b5		       00	   NUSIZ7     ds	1
     59 U00b6		       00	   NUSIZ8     ds	1
     60 U00b7		       00	   NUSIZ9     ds	1
     61 U00b8
     62 U00b8		       00 00 00    score      ds	3
     63 U00bb		       00	   COLUM0     ds	1
     64 U00bc		       00	   COLUM1     ds	1
     65 U00bd		       00	   player0pointerlo ds	1
     66 U00be		       00	   player0pointerhi ds	1
     67 U00bf
     68 U00bf		       00 85	   RAMcopybegin =	SpriteGfxIndex
     69 U00bf		       00 3a	   RAMcopylength =	*-RAMcopybegin
     70 U00bf
     71 U00bf		       00	   missile0y  ds	1
     72 U00c0		       00	   missile1y  ds	1
     73 U00c1		       00	   bally      ds	1
     74 U00c2
     75 U00c2		       00	   missile0height ds	1
     76 U00c3		       00	   missile1height ds	1
     77 U00c4		       00	   ballheight ds	1
     78 U00c5
     79 U00c5		       00	   statusbarlength ds	1	; needed?
     80 U00c5		       00 c5	   aux3       =	statusbarlength
     81 U00c6
     82 U00c6		       00	   lifecolor  ds	1
     83 U00c6		       00 c6	   pfscorecolor =	lifecolor
     84 U00c7		       00	   aux4       ds	1
     85 U00c8
     86 U00c8		       00	   lifepointer ds	1
     87 U00c9		       00	   lives      ds	1
     88 U00c9		       00 c8	   pfscore1   =	lifepointer
     89 U00c9		       00 c9	   pfscore2   =	lives
     90 U00c9		       00 c8	   aux5       =	pfscore1
     91 U00c9		       00 c9	   aux6       =	pfscore2
     92 U00ca
     93 U00ca		       00	   playfieldpos ds	1
     94 U00cb
     95 U00cb		       00	   temp1      ds	1	; used in sprite flickering
     96 U00cc		       00	   temp2      ds	1	;are obliterated when drawscreen is called.
     97 U00cd		       00	   temp3      ds	1
     98 U00ce		       00	   temp4      ds	1
     99 U00cf		       00	   temp5      ds	1
    100 U00d0		       00	   temp6      ds	1
    101 U00d0		       00 81	   temp7      =	topP1x	; This is used to aid in bankswitching
    102 U00d1
    103 U00d1		       00	   A	      ds	1
    104 U00d1		       00 d1	   a	      =	A
    105 U00d2		       00	   B	      ds	1
    106 U00d2		       00 d2	   b	      =	B
    107 U00d3		       00	   C	      ds	1
    108 U00d3		       00 d3	   c	      =	C
    109 U00d4		       00	   D	      ds	1
    110 U00d4		       00 d4	   d	      =	D
    111 U00d5		       00	   E	      ds	1
    112 U00d5		       00 d5	   e	      =	E
    113 U00d6		       00	   F	      ds	1
    114 U00d6		       00 d6	   f	      =	F
    115 U00d7		       00	   G	      ds	1
    116 U00d7		       00 d7	   g	      =	G
    117 U00d8		       00	   H	      ds	1
    118 U00d8		       00 d8	   h	      =	H
    119 U00d9		       00	   I	      ds	1
    120 U00d9		       00 d9	   i	      =	I
    121 U00da		       00	   J	      ds	1
    122 U00da		       00 da	   j	      =	J
    123 U00db		       00	   K	      ds	1
    124 U00db		       00 db	   k	      =	K
    125 U00dc		       00	   L	      ds	1
    126 U00dc		       00 dc	   l	      =	L
    127 U00dd		       00	   M	      ds	1
    128 U00dd		       00 dd	   m	      =	M
    129 U00de		       00	   N	      ds	1
    130 U00de		       00 de	   n	      =	N
    131 U00df		       00	   O	      ds	1
    132 U00df		       00 df	   o	      =	O
    133 U00e0		       00	   P	      ds	1
    134 U00e0		       00 e0	   p	      =	P
    135 U00e1		       00	   Q	      ds	1
    136 U00e1		       00 e1	   q	      =	Q
    137 U00e2		       00	   R	      ds	1
    138 U00e2		       00 e2	   r	      =	R
    139 U00e3		       00	   S	      ds	1
    140 U00e3		       00 e3	   s	      =	S
    141 U00e4		       00	   T	      ds	1
    142 U00e4		       00 e4	   t	      =	T
    143 U00e5		       00	   U	      ds	1
    144 U00e5		       00 e5	   u	      =	U
    145 U00e6		       00	   V	      ds	1
    146 U00e6		       00 e6	   v	      =	V
    147 U00e7		       00	   W	      ds	1
    148 U00e7		       00 e7	   w	      =	W
    149 U00e8		       00	   X	      ds	1
    150 U00e8		       00 e8	   x	      =	X
    151 U00e9		       00	   Y	      ds	1
    152 U00e9		       00 e9	   y	      =	Y
    153 U00ea		       00	   Z	      ds	1
    154 U00ea		       00 ea	   z	      =	Z
    155 U00eb		       00	   scorecolor ds	1
    156 U00ec
    157 U00ec		       00	   var0       ds	1
    158 U00ed		       00	   var1       ds	1
    159 U00ee		       00	   var2       ds	1
    160 U00ef		       00	   var3       ds	1
    161 U00f0		       00	   var4       ds	1
    162 U00f1		       00	   var5       ds	1
    163 U00f2		       00	   var6       ds	1
    164 U00f3		       00	   var7       ds	1
    165 U00f4		       00	   var8       ds	1
    166 U00f5
 free ram: 0
    167 U00f5					      echo	"free ram:",($f5-*)d
    168 U00f5
    169 U00f5		       00 f6	   stack1     =	$f6
    170 U00f5		       00 f7	   stack2     =	$f7
    171 U00f5		       00 f8	   stack3     =	$f8
    172 U00f5		       00 f9	   stack4     =	$f9
    173 U00f5							; the stack bytes above may be used in the kernel
    174 U00f5							; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    175 U00f5
    176 U00f5					      MAC	return
    177 U00f5					      ifnconst	bankswitch
    178 U00f5					      rts
    179 U00f5					      else
    180 U00f5					      jmp	BS_return
    181 U00f5					      endif
    182 U00f5					      ENDM		; auto-return from either a regular or bankswitched module
    183  8400 ????				      seg
    184  8400 ????	       10 00	   rand       =	RANDOM0NEXT
    185  8400 ????	       00 d3	   KERNEL_LINES =	178*76/64	; warning: not all values will work
    186  8400 ????	       00 a7	   OVERSCAN_LINES =	128+33*76/64	; again, not all values work
    187  8400 ????	       d1 a4	   C_function =	FETCHER_BEGIN
    188  8400 ????	       d1 a8	   CcodeData  =	C_function + 4
    189  8400 ????	       d1 e2	   playerpointers =	CcodeData + RAMcopylength
    190  8400 ????	       d2 08	   P1GFX      =	playerpointers + 38
    191  8400 ????	       d3 08	   P1COLOR    =	P1GFX + 256
    192  8400 ????	       d4 08	   P0GFX      =	P1COLOR + 256
    193  8400 ????	       d5 08	   P0COLOR    =	P0GFX + 256
    194  8400 ????	       d6 08	   PF1L       =	P0COLOR + 256
    195  8400 ????	       d7 08	   PF2L       =	PF1L + 256
    196  8400 ????	       d8 08	   PF1R       =	PF2L + 256
    197  8400 ????	       d9 08	   PF2R       =	PF1R + 256
    198  8400 ????	       da 08	   PFCOLS     =	PF2R + 256
    199  8400 ????	       db 08	   JUMPTABLELO =	PFCOLS + 256
    200  8400 ????	       db 14	   JUMPTABLEHI =	JUMPTABLELO + 12
    201  8400 ????	       db 20	   P1HMP      =	JUMPTABLEHI + 12
    202  8400 ????	       db 2d	   P1SKIP     =	P1HMP + 13
    203  8400 ????	       db 39	   NUSIZREFP  =	P1SKIP + 12
    204  8400 ????	       db 45	   scoredata  =	NUSIZREFP + 12
    205  8400 ????	       db a5	   BKCOLS     =	scoredata + 96
    206  8400 ????	       dc a5	   STACKbegin =	BKCOLS + 256
    207  8400 ????	       dd a5	   USERSTACK  =	STACKbegin + 256	; stack starts here and goes down!!!!
 DPC free RAM= 603
    208  8400 ????				      echo	"DPC free RAM=",($1000-(USERSTACK&$0FFF))d
------- FILE c:\Users\roger\OneDrive\Documents\Atari\BrawdyBAS\brawdy.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  8400 ????				      include	"2600basic_variable_redefs.h"
      1  8400 ????						; This file contains variable mapping and other information for the current project.
      2  8400 ????
      3  8400 ????	       00 f0	   PlayerMissileRate =	var4
      4  8400 ????
      5  8400 ????	       00 ef	   EnemyMissilerate =	var3
      6  8400 ????
      7  8400 ????	       00 ee	   Powerup    =	var2
      8  8400 ????
      9  8400 ????	       00 ed	   Damage     =	var1
     10  8400 ????
     11  8400 ????	       00 d5	   PlayerHealth =	e
     12  8400 ????
     13  8400 ????	       00 e6	   swdebounce =	v
     14  8400 ????
     15  8400 ????	       00 e5	   gamenumber =	u
     16  8400 ????
     17  8400 ????	       00 dd	   PlayerDamage =	m
     18  8400 ????
     19  8400 ????	       00 ea	   Bit0_NewLevel =	z
     20  8400 ????
     21  8400 ????	       00 ea	   Bit5_hit   =	z
     22  8400 ????
     23  8400 ????	       00 e9	   Ch0_Counter =	y
     24  8400 ????
     25  8400 ????	       00 e8	   Ch0_Duration =	x
     26  8400 ????
     27  8400 ????	       00 e7	   Ch0_Sound  =	w
     28  8400 ????
     29  8400 ????	       00 e6	   V0	      =	v
     30  8400 ????
     31  8400 ????	       00 e0	   Ch1_Counter =	p
     32  8400 ????
     33  8400 ????	       00 db	   Ch1_Duration =	k
     34  8400 ????
     35  8400 ????	       00 da	   Ch1_Sound  =	j
     36  8400 ????
     37  8400 ????	       00 d8	   V1	      =	h
     38  8400 ????
     39  8400 ????	       00 ea	   Bit7_PLayer3Moving =	z
     40  8400 ????
     41  8400 ????	       00 ea	   Bit6_PLayer3Direction =	z
     42  8400 ????
     43  8400 ????	       00 ea	   Bit4_gameover =	z
     44  8400 ????
     45  8400 ????	       00 e4	   Timer      =	t
     46  8400 ????
     47  8400 ????	       00 e1	   Househit   =	q
     48  8400 ????
     49  8400 ????	       00 ea	   Bit3_ShootorNot =	z
     50  8400 ????
     51  8400 ????	       00 df	   delay      =	o
     52  8400 ????
     53  8400 ????	       00 de	   HealthDrop =	n
     54  8400 ????
     55  8400 ????	       00 ea	   Bit1_missleOn =	z
     56  8400 ????
     57  8400 ????	       00 dc	   level      =	l
     58  8400 ????
     59  8400 ????	       00 ea	   Bit2_EnemyMove =	z
     60  8400 ????
     61  8400 ????	       00 d6	   frame      =	f
     62  8400 ????
     63  8400 ????	       00 d4	   Points     =	d
     64  8400 ????
     65  8400 ????	       00 d3	   EnemySpeed =	c
     66  8400 ????
     67  8400 ????	       00 d2	   Moverate   =	b
     68  8400 ????
     69  8400 ????	       00 d1	   drop       =	a
     70  8400 ????
     71  8400 ????	       00 d9	   EnemyHit   =	i
     72  8400 ????
     73  8400 ????	       00 01	   pfscore    =	1
     74  8400 ????
     75  8400 ????	       00 47	   LEdge      =	71
     76  8400 ????
     77  8400 ????	       00 4f	   REdge      =	79
     78  8400 ????
     79  8400 ????	       00 96	   _P_Edge_Right =	150
     80  8400 ????
     81  8400 ????	       00 00	   _P_Edge_Left =	0
     82  8400 ????
     83  8400 ????	       00 a0	   _P_Edge_Bottom =	160
     84  8400 ????
     85  8400 ????	       00 09	   _P_Edge_Top =	9
     86  8400 ????
     87  8400 ????	       00 20	   bscode_length =	32
     88  8400 ????	       00 fe	   _FE	      =	$FE
     89  8400 ????
     90  8400 ????	       00 fc	   _FC	      =	$FC
     91  8400 ????
     92  8400 ????	       00 fa	   _FA	      =	$FA
     93  8400 ????
     94  8400 ????	       00 f8	   _F8	      =	$F8
     95  8400 ????
     96  8400 ????	       00 f6	   _F6	      =	$F6
     97  8400 ????
     98  8400 ????	       00 f4	   _F4	      =	$F4
     99  8400 ????
    100  8400 ????	       00 f2	   _F2	      =	$F2
    101  8400 ????
    102  8400 ????	       00 f0	   _F0	      =	$F0
    103  8400 ????
    104  8400 ????	       00 ee	   _EE	      =	$EE
    105  8400 ????
    106  8400 ????	       00 ec	   _EC	      =	$EC
    107  8400 ????
    108  8400 ????	       00 ea	   _EA	      =	$EA
    109  8400 ????
    110  8400 ????	       00 e8	   _E8	      =	$E8
    111  8400 ????
    112  8400 ????	       00 e6	   _E6	      =	$E6
    113  8400 ????
    114  8400 ????	       00 e4	   _E4	      =	$E4
    115  8400 ????
    116  8400 ????	       00 e2	   _E2	      =	$E2
    117  8400 ????
    118  8400 ????	       00 e0	   _E0	      =	$E0
    119  8400 ????
    120  8400 ????	       00 de	   _DE	      =	$DE
    121  8400 ????
    122  8400 ????	       00 dc	   _DC	      =	$DC
    123  8400 ????
    124  8400 ????	       00 da	   _DA	      =	$DA
    125  8400 ????
    126  8400 ????	       00 d8	   _D8	      =	$D8
    127  8400 ????
    128  8400 ????	       00 d6	   _D6	      =	$D6
    129  8400 ????
    130  8400 ????	       00 d4	   _D4	      =	$D4
    131  8400 ????
    132  8400 ????	       00 d2	   _D2	      =	$D2
    133  8400 ????
    134  8400 ????	       00 d0	   _D0	      =	$D0
    135  8400 ????
    136  8400 ????	       00 ce	   _CE	      =	$CE
    137  8400 ????
    138  8400 ????	       00 cc	   _CC	      =	$CC
    139  8400 ????
    140  8400 ????	       00 ca	   _CA	      =	$CA
    141  8400 ????
    142  8400 ????	       00 c8	   _C8	      =	$C8
    143  8400 ????
    144  8400 ????	       00 c6	   _C6	      =	$C6
    145  8400 ????
    146  8400 ????	       00 c4	   _C4	      =	$C4
    147  8400 ????
    148  8400 ????	       00 c2	   _C2	      =	$C2
    149  8400 ????
    150  8400 ????	       00 c0	   _C0	      =	$C0
    151  8400 ????
    152  8400 ????	       00 be	   _BE	      =	$BE
    153  8400 ????
    154  8400 ????	       00 bc	   _BC	      =	$BC
    155  8400 ????
    156  8400 ????	       00 ba	   _BA	      =	$BA
    157  8400 ????
    158  8400 ????	       00 b8	   _B8	      =	$B8
    159  8400 ????
    160  8400 ????	       00 b6	   _B6	      =	$B6
    161  8400 ????
    162  8400 ????	       00 b4	   _B4	      =	$B4
    163  8400 ????
    164  8400 ????	       00 b2	   _B2	      =	$B2
    165  8400 ????
    166  8400 ????	       00 b0	   _B0	      =	$B0
    167  8400 ????
    168  8400 ????	       00 ae	   _AE	      =	$AE
    169  8400 ????
    170  8400 ????	       00 ac	   _AC	      =	$AC
    171  8400 ????
    172  8400 ????	       00 aa	   _AA	      =	$AA
    173  8400 ????
    174  8400 ????	       00 a8	   _A8	      =	$A8
    175  8400 ????
    176  8400 ????	       00 a6	   _A6	      =	$A6
    177  8400 ????
    178  8400 ????	       00 a4	   _A4	      =	$A4
    179  8400 ????
    180  8400 ????	       00 a2	   _A2	      =	$A2
    181  8400 ????
    182  8400 ????	       00 a0	   _A0	      =	$A0
    183  8400 ????
    184  8400 ????	       00 9e	   _9E	      =	$9E
    185  8400 ????
    186  8400 ????	       00 9c	   _9C	      =	$9C
    187  8400 ????
    188  8400 ????	       00 9a	   _9A	      =	$9A
    189  8400 ????
    190  8400 ????	       00 98	   _98	      =	$98
    191  8400 ????
    192  8400 ????	       00 96	   _96	      =	$96
    193  8400 ????
    194  8400 ????	       00 94	   _94	      =	$94
    195  8400 ????
    196  8400 ????	       00 92	   _92	      =	$92
    197  8400 ????
    198  8400 ????	       00 90	   _90	      =	$90
    199  8400 ????
    200  8400 ????	       00 8e	   _8E	      =	$8E
    201  8400 ????
    202  8400 ????	       00 8c	   _8C	      =	$8C
    203  8400 ????
    204  8400 ????	       00 8a	   _8A	      =	$8A
    205  8400 ????
    206  8400 ????	       00 88	   _88	      =	$88
    207  8400 ????
    208  8400 ????	       00 86	   _86	      =	$86
    209  8400 ????
    210  8400 ????	       00 84	   _84	      =	$84
    211  8400 ????
    212  8400 ????	       00 82	   _82	      =	$82
    213  8400 ????
    214  8400 ????	       00 80	   _80	      =	$80
    215  8400 ????
    216  8400 ????	       00 7e	   _7E	      =	$7E
    217  8400 ????
    218  8400 ????	       00 7c	   _7C	      =	$7C
    219  8400 ????
    220  8400 ????	       00 7a	   _7A	      =	$7A
    221  8400 ????
    222  8400 ????	       00 78	   _78	      =	$78
    223  8400 ????
    224  8400 ????	       00 76	   _76	      =	$76
    225  8400 ????
    226  8400 ????	       00 74	   _74	      =	$74
    227  8400 ????
    228  8400 ????	       00 72	   _72	      =	$72
    229  8400 ????
    230  8400 ????	       00 70	   _70	      =	$70
    231  8400 ????
    232  8400 ????	       00 6e	   _6E	      =	$6E
    233  8400 ????
    234  8400 ????	       00 6c	   _6C	      =	$6C
    235  8400 ????
    236  8400 ????	       00 6a	   _6A	      =	$6A
    237  8400 ????
    238  8400 ????	       00 68	   _68	      =	$68
    239  8400 ????
    240  8400 ????	       00 66	   _66	      =	$66
    241  8400 ????
    242  8400 ????	       00 64	   _64	      =	$64
    243  8400 ????
    244  8400 ????	       00 62	   _62	      =	$62
    245  8400 ????
    246  8400 ????	       00 60	   _60	      =	$60
    247  8400 ????
    248  8400 ????	       00 5e	   _5E	      =	$5E
    249  8400 ????
    250  8400 ????	       00 5c	   _5C	      =	$5C
    251  8400 ????
    252  8400 ????	       00 5a	   _5A	      =	$5A
    253  8400 ????
    254  8400 ????	       00 58	   _58	      =	$58
    255  8400 ????
    256  8400 ????	       00 56	   _56	      =	$56
    257  8400 ????
    258  8400 ????	       00 54	   _54	      =	$54
    259  8400 ????
    260  8400 ????	       00 52	   _52	      =	$52
    261  8400 ????
    262  8400 ????	       00 50	   _50	      =	$50
    263  8400 ????
    264  8400 ????	       00 4e	   _4E	      =	$4E
    265  8400 ????
    266  8400 ????	       00 4c	   _4C	      =	$4C
    267  8400 ????
    268  8400 ????	       00 4a	   _4A	      =	$4A
    269  8400 ????
    270  8400 ????	       00 48	   _48	      =	$48
    271  8400 ????
    272  8400 ????	       00 46	   _46	      =	$46
    273  8400 ????
    274  8400 ????	       00 44	   _44	      =	$44
    275  8400 ????
    276  8400 ????	       00 42	   _42	      =	$42
    277  8400 ????
    278  8400 ????	       00 40	   _40	      =	$40
    279  8400 ????
    280  8400 ????	       00 3e	   _3E	      =	$3E
    281  8400 ????
    282  8400 ????	       00 3c	   _3C	      =	$3C
    283  8400 ????
    284  8400 ????	       00 3a	   _3A	      =	$3A
    285  8400 ????
    286  8400 ????	       00 38	   _38	      =	$38
    287  8400 ????
    288  8400 ????	       00 36	   _36	      =	$36
    289  8400 ????
    290  8400 ????	       00 34	   _34	      =	$34
    291  8400 ????
    292  8400 ????	       00 32	   _32	      =	$32
    293  8400 ????
    294  8400 ????	       00 30	   _30	      =	$30
    295  8400 ????
    296  8400 ????	       00 2e	   _2E	      =	$2E
    297  8400 ????
    298  8400 ????	       00 2c	   _2C	      =	$2C
    299  8400 ????
    300  8400 ????	       00 2a	   _2A	      =	$2A
    301  8400 ????
    302  8400 ????	       00 28	   _28	      =	$28
    303  8400 ????
    304  8400 ????	       00 26	   _26	      =	$26
    305  8400 ????
    306  8400 ????	       00 24	   _24	      =	$24
    307  8400 ????
    308  8400 ????	       00 22	   _22	      =	$22
    309  8400 ????
    310  8400 ????	       00 20	   _20	      =	$20
    311  8400 ????
    312  8400 ????	       00 1e	   _1E	      =	$1E
    313  8400 ????
    314  8400 ????	       00 1c	   _1C	      =	$1C
    315  8400 ????
    316  8400 ????	       00 1a	   _1A	      =	$1A
    317  8400 ????
    318  8400 ????	       00 18	   _18	      =	$18
    319  8400 ????
    320  8400 ????	       00 16	   _16	      =	$16
    321  8400 ????
    322  8400 ????	       00 14	   _14	      =	$14
    323  8400 ????
    324  8400 ????	       00 12	   _12	      =	$12
    325  8400 ????
    326  8400 ????	       00 10	   _10	      =	$10
    327  8400 ????
    328  8400 ????	       00 0e	   _0E	      =	$0E
    329  8400 ????
    330  8400 ????	       00 0c	   _0C	      =	$0C
    331  8400 ????
    332  8400 ????	       00 0a	   _0A	      =	$0A
    333  8400 ????
    334  8400 ????	       00 08	   _08	      =	$08
    335  8400 ????
    336  8400 ????	       00 06	   _06	      =	$06
    337  8400 ????
    338  8400 ????	       00 04	   _04	      =	$04
    339  8400 ????
    340  8400 ????	       00 02	   _02	      =	$02
    341  8400 ????
    342  8400 ????	       00 00	   _00	      =	$00
    343  8400 ????
    344  8400 ????	       00 05	   font       =	retroputer
    345  8400 ????
    346  8400 ????	       00 2b	   vblank_time =	43
    347  8400 ????	       00 25	   overscan_time =	37
    348  8400 ????	       00 07	   bs_mask    =	7
    349  8400 ????	       00 1c	   bankswitch =	28
    350  8400 ????	       1f f6	   bankswitch_hotspot =	$1FF6
    351  8400 ????	       00 02	   multisprite =	2
------- FILE c:\Users\roger\OneDrive\Documents\Atari\BrawdyBAS\brawdy.bas.asm
      9  0400					      ORG	$400
     10  0400					      RORG	$0
     11  0400					      incbin	DPCplus.arm
     12  1000					      ORG	$1000
     13  1000					      RORG	$1000
     14  1000					      incbin	custom/bin/custom2.bin
     15  1894							; assume custom2.bin > 128 bytes
     16  1894							; repeat $80
     17  1894							; .byte 0
     18  1894							; repend
     19  1894							; Provided under the CC0 license. See the included LICENSE.txt for details.
     20  1894
     21  1894							; feel free to modify the score graphics - just keep each digit 8 high
     22  1894							; and keep the conditional compilation stuff intact
     23  1894				  -	      ifconst	ROM2k
     24  1894				  -	      ORG	$F7AC-8
     25  1894					      else
     26  1894					      ifconst	bankswitch
     27  1894				  -	      if	bankswitch == 8
     28  1894				  -	      ORG	$2F94-bscode_length
     29  1894				  -	      RORG	$FF94-bscode_length
     30  1894					      endif
     31  1894				  -	      if	bankswitch == 16
     32  1894				  -	      ORG	$4F94-bscode_length
     33  1894				  -	      RORG	$FF94-bscode_length
     34  1894					      endif
     35  1894				  -	      if	bankswitch == 32
     36  1894				  -	      ORG	$8F94-bscode_length
     37  1894				  -	      RORG	$FF94-bscode_length
     38  1894					      endif
     39  1894				  -	      if	bankswitch == 64
     40  1894				  -	      ORG	$10F80-bscode_length
     41  1894				  -	      RORG	$1FF80-bscode_length
     42  1894					      endif
     43  1894				  -	      else
     44  1894				  -	      ORG	$FF9C
     45  1894					      endif
     46  1894					      endif
     47  1894
     48  1894							; font equates
     49  1894		       00 01	   .21stcentury =	1
     50  1894		       00 02	   alarmclock =	2
     51  1894		       00 03	   handwritten =	3
     52  1894		       00 04	   interrupted =	4
     53  1894		       00 05	   retroputer =	5
     54  1894		       00 06	   whimsey    =	6
     55  1894		       00 07	   tiny       =	7
     56  1894		       00 08	   hex	      =	8
     57  1894
     58  1894					      ifconst	font
     59  1894				  -	      if	font == hex
     60  1894				  -	      ORG	. - 48
     61  1894					      endif
     62  1894					      endif
     63  1894
     64  1894				   scoretable
     65  1894
     66  1894					      ifconst	font
     67  1894				  -	      if	font == .21stcentury
     68  1894				  -	      include	"score_graphics.asm.21stcentury"
     69  1894					      endif
     70  1894				  -	      if	font == alarmclock
     71  1894				  -	      include	"score_graphics.asm.alarmclock"
     72  1894					      endif
     73  1894				  -	      if	font == handwritten
     74  1894				  -	      include	"score_graphics.asm.handwritten"
     75  1894					      endif
     76  1894				  -	      if	font == interrupted
     77  1894				  -	      include	"score_graphics.asm.interrupted"
     78  1894					      endif
     79  1894					      if	font == retroputer
------- FILE score_graphics.asm.retroputer LEVEL 2 PASS 3
      0  1894					      include	"score_graphics.asm.retroputer"
      1  1894							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  1894
      3  1894		       7e		      .byte.b	%01111110
      4  1895		       46		      .byte.b	%01000110
      5  1896		       46		      .byte.b	%01000110
      6  1897		       46		      .byte.b	%01000110
      7  1898		       62		      .byte.b	%01100010
      8  1899		       62		      .byte.b	%01100010
      9  189a		       62		      .byte.b	%01100010
     10  189b		       7e		      .byte.b	%01111110
     11  189c
     12  189c		       38		      .byte.b	%00111000
     13  189d		       38		      .byte.b	%00111000
     14  189e		       38		      .byte.b	%00111000
     15  189f		       38		      .byte.b	%00111000
     16  18a0		       18		      .byte.b	%00011000
     17  18a1		       18		      .byte.b	%00011000
     18  18a2		       18		      .byte.b	%00011000
     19  18a3		       18		      .byte.b	%00011000
     20  18a4
     21  18a4		       7e		      .byte.b	%01111110
     22  18a5		       60		      .byte.b	%01100000
     23  18a6		       60		      .byte.b	%01100000
     24  18a7		       60		      .byte.b	%01100000
     25  18a8		       3e		      .byte.b	%00111110
     26  18a9		       02		      .byte.b	%00000010
     27  18aa		       42		      .byte.b	%01000010
     28  18ab		       7e		      .byte.b	%01111110
     29  18ac
     30  18ac		       7e		      .byte.b	%01111110
     31  18ad		       46		      .byte.b	%01000110
     32  18ae		       06		      .byte.b	%00000110
     33  18af		       06		      .byte.b	%00000110
     34  18b0		       3e		      .byte.b	%00111110
     35  18b1		       02		      .byte.b	%00000010
     36  18b2		       42		      .byte.b	%01000010
     37  18b3		       7e		      .byte.b	%01111110
     38  18b4
     39  18b4		       0c		      .byte.b	%00001100
     40  18b5		       0c		      .byte.b	%00001100
     41  18b6		       0c		      .byte.b	%00001100
     42  18b7		       7e		      .byte.b	%01111110
     43  18b8		       44		      .byte.b	%01000100
     44  18b9		       44		      .byte.b	%01000100
     45  18ba		       44		      .byte.b	%01000100
     46  18bb		       04		      .byte.b	%00000100
     47  18bc
     48  18bc		       7e		      .byte.b	%01111110
     49  18bd		       46		      .byte.b	%01000110
     50  18be		       06		      .byte.b	%00000110
     51  18bf		       06		      .byte.b	%00000110
     52  18c0		       7c		      .byte.b	%01111100
     53  18c1		       40		      .byte.b	%01000000
     54  18c2		       40		      .byte.b	%01000000
     55  18c3		       7e		      .byte.b	%01111110
     56  18c4
     57  18c4		       7e		      .byte.b	%01111110
     58  18c5		       46		      .byte.b	%01000110
     59  18c6		       46		      .byte.b	%01000110
     60  18c7		       46		      .byte.b	%01000110
     61  18c8		       7c		      .byte.b	%01111100
     62  18c9		       40		      .byte.b	%01000000
     63  18ca		       42		      .byte.b	%01000010
     64  18cb		       7e		      .byte.b	%01111110
     65  18cc
     66  18cc		       0c		      .byte.b	%00001100
     67  18cd		       0c		      .byte.b	%00001100
     68  18ce		       0c		      .byte.b	%00001100
     69  18cf		       0c		      .byte.b	%00001100
     70  18d0		       04		      .byte.b	%00000100
     71  18d1		       02		      .byte.b	%00000010
     72  18d2		       42		      .byte.b	%01000010
     73  18d3		       7e		      .byte.b	%01111110
     74  18d4
     75  18d4		       7e		      .byte.b	%01111110
     76  18d5		       46		      .byte.b	%01000110
     77  18d6		       46		      .byte.b	%01000110
     78  18d7		       46		      .byte.b	%01000110
     79  18d8		       7e		      .byte.b	%01111110
     80  18d9		       42		      .byte.b	%01000010
     81  18da		       42		      .byte.b	%01000010
     82  18db		       7e		      .byte.b	%01111110
     83  18dc
     84  18dc		       06		      .byte.b	%00000110
     85  18dd		       06		      .byte.b	%00000110
     86  18de		       06		      .byte.b	%00000110
     87  18df		       02		      .byte.b	%00000010
     88  18e0		       7e		      .byte.b	%01111110
     89  18e1		       42		      .byte.b	%01000010
     90  18e2		       42		      .byte.b	%01000010
     91  18e3		       7e		      .byte.b	%01111110
     92  18e4
     93  18e4				  -	      ifnconst	DPC_kernel_options
     94  18e4				  -
     95  18e4				  -	      .byte	%00000000
     96  18e4				  -	      .byte	%00000000
     97  18e4				  -	      .byte	%00000000
     98  18e4				  -	      .byte	%00000000
     99  18e4				  -	      .byte	%00000000
    100  18e4				  -	      .byte	%00000000
    101  18e4				  -	      .byte	%00000000
    102  18e4				  -	      .byte	%00000000
    103  18e4				  -
    104  18e4					      endif
------- FILE c:\Users\roger\OneDrive\Documents\Atari\BrawdyBAS\brawdy.bas.asm
     81  18e4					      endif
     82  18e4				  -	      if	font == whimsey
     83  18e4				  -	      include	"score_graphics.asm.whimsey"
     84  18e4					      endif
     85  18e4				  -	      if	font == tiny
     86  18e4				  -	      include	"score_graphics.asm.tiny"
     87  18e4					      endif
     88  18e4				  -	      if	font == hex
     89  18e4				  -	      include	"score_graphics.asm.hex"
     90  18e4					      endif
     91  18e4				  -	      else		; default font
     92  18e4				  -
     93  18e4				  -	      .byte	%00111100
     94  18e4				  -	      .byte	%01100110
     95  18e4				  -	      .byte	%01100110
     96  18e4				  -	      .byte	%01100110
     97  18e4				  -	      .byte	%01100110
     98  18e4				  -	      .byte	%01100110
     99  18e4				  -	      .byte	%01100110
    100  18e4				  -	      .byte	%00111100
    101  18e4				  -
    102  18e4				  -	      .byte	%01111110
    103  18e4				  -	      .byte	%00011000
    104  18e4				  -	      .byte	%00011000
    105  18e4				  -	      .byte	%00011000
    106  18e4				  -	      .byte	%00011000
    107  18e4				  -	      .byte	%00111000
    108  18e4				  -	      .byte	%00011000
    109  18e4				  -	      .byte	%00001000
    110  18e4				  -
    111  18e4				  -	      .byte	%01111110
    112  18e4				  -	      .byte	%01100000
    113  18e4				  -	      .byte	%01100000
    114  18e4				  -	      .byte	%00111100
    115  18e4				  -	      .byte	%00000110
    116  18e4				  -	      .byte	%00000110
    117  18e4				  -	      .byte	%01000110
    118  18e4				  -	      .byte	%00111100
    119  18e4				  -
    120  18e4				  -	      .byte	%00111100
    121  18e4				  -	      .byte	%01000110
    122  18e4				  -	      .byte	%00000110
    123  18e4				  -	      .byte	%00000110
    124  18e4				  -	      .byte	%00011100
    125  18e4				  -	      .byte	%00000110
    126  18e4				  -	      .byte	%01000110
    127  18e4				  -	      .byte	%00111100
    128  18e4				  -
    129  18e4				  -	      .byte	%00001100
    130  18e4				  -	      .byte	%00001100
    131  18e4				  -	      .byte	%01111110
    132  18e4				  -	      .byte	%01001100
    133  18e4				  -	      .byte	%01001100
    134  18e4				  -	      .byte	%00101100
    135  18e4				  -	      .byte	%00011100
    136  18e4				  -	      .byte	%00001100
    137  18e4				  -
    138  18e4				  -	      .byte	%00111100
    139  18e4				  -	      .byte	%01000110
    140  18e4				  -	      .byte	%00000110
    141  18e4				  -	      .byte	%00000110
    142  18e4				  -	      .byte	%00111100
    143  18e4				  -	      .byte	%01100000
    144  18e4				  -	      .byte	%01100000
    145  18e4				  -	      .byte	%01111110
    146  18e4				  -
    147  18e4				  -	      .byte	%00111100
    148  18e4				  -	      .byte	%01100110
    149  18e4				  -	      .byte	%01100110
    150  18e4				  -	      .byte	%01100110
    151  18e4				  -	      .byte	%01111100
    152  18e4				  -	      .byte	%01100000
    153  18e4				  -	      .byte	%01100010
    154  18e4				  -	      .byte	%00111100
    155  18e4				  -
    156  18e4				  -	      .byte	%00110000
    157  18e4				  -	      .byte	%00110000
    158  18e4				  -	      .byte	%00110000
    159  18e4				  -	      .byte	%00011000
    160  18e4				  -	      .byte	%00001100
    161  18e4				  -	      .byte	%00000110
    162  18e4				  -	      .byte	%01000010
    163  18e4				  -	      .byte	%00111110
    164  18e4				  -
    165  18e4				  -	      .byte	%00111100
    166  18e4				  -	      .byte	%01100110
    167  18e4				  -	      .byte	%01100110
    168  18e4				  -	      .byte	%01100110
    169  18e4				  -	      .byte	%00111100
    170  18e4				  -	      .byte	%01100110
    171  18e4				  -	      .byte	%01100110
    172  18e4				  -	      .byte	%00111100
    173  18e4				  -
    174  18e4				  -	      .byte	%00111100
    175  18e4				  -	      .byte	%01000110
    176  18e4				  -	      .byte	%00000110
    177  18e4				  -	      .byte	%00111110
    178  18e4				  -	      .byte	%01100110
    179  18e4				  -	      .byte	%01100110
    180  18e4				  -	      .byte	%01100110
    181  18e4				  -	      .byte	%00111100
    182  18e4				  -
    183  18e4				  -	      ifnconst	DPC_kernel_options
    184  18e4				  -
    185  18e4				  -	      .byte	%00000000
    186  18e4				  -	      .byte	%00000000
    187  18e4				  -	      .byte	%00000000
    188  18e4				  -	      .byte	%00000000
    189  18e4				  -	      .byte	%00000000
    190  18e4				  -	      .byte	%00000000
    191  18e4				  -	      .byte	%00000000
    192  18e4				  -	      .byte	%00000000
    193  18e4				  -
    194  18e4				  -	      endif
    195  18e4				  -
    196  18e4					      endif
    197  18e4
    198  18e4				  -	      ifconst	ROM2k
    199  18e4				  -	      ORG	$F7FC
    200  18e4					      else
    201  18e4					      ifconst	bankswitch
    202  18e4				  -	      if	bankswitch == 8
    203  18e4				  -	      ORG	$2FF4-bscode_length
    204  18e4				  -	      RORG	$FFF4-bscode_length
    205  18e4					      endif
    206  18e4				  -	      if	bankswitch == 16
    207  18e4				  -	      ORG	$4FF4-bscode_length
    208  18e4				  -	      RORG	$FFF4-bscode_length
    209  18e4					      endif
    210  18e4				  -	      if	bankswitch == 32
    211  18e4				  -	      ORG	$8FF4-bscode_length
    212  18e4				  -	      RORG	$FFF4-bscode_length
    213  18e4					      endif
    214  18e4				  -	      if	bankswitch == 64
    215  18e4				  -	      ORG	$10FE0-bscode_length
    216  18e4				  -	      RORG	$1FFE0-bscode_length
    217  18e4					      endif
    218  18e4				  -	      else
    219  18e4				  -	      ORG	$FFFC
    220  18e4					      endif
    221  18e4					      endif
    222  18e4							; Provided under the CC0 license. See the included LICENSE.txt for details.
    223  18e4
    224  18e4				   start
    225  18e4		       78		      sei
    226  18e5		       d8		      cld
    227  18e6		       a0 00		      ldy	#0
    228  18e8		       a5 d0		      lda	$D0
    229  18ea		       c9 2c		      cmp	#$2C	;check RAM location #1
    230  18ec		       d0 07		      bne	MachineIs2600
    231  18ee		       a5 d1		      lda	$D1
    232  18f0		       c9 a9		      cmp	#$A9	;check RAM location #2
    233  18f2		       d0 01		      bne	MachineIs2600
    234  18f4		       88		      dey
    235  18f5				   MachineIs2600
    236  18f5		       a2 00		      ldx	#0
    237  18f7		       8a		      txa
    238  18f8				   clearmem
    239  18f8		       e8		      inx
    240  18f9		       9a		      txs
    241  18fa		       48		      pha
    242  18fb		       d0 fb		      bne	clearmem
    243  18fd		       84 cb		      sty	temp1
    244  18ff		       a2 08		      ldx	#8
    245  1901		       86 ca		      stx	playfieldpos
    246  1903		       8e 58 10 	      stx	FASTFETCH
    247  1906		       a2 08		      ldx	#8
    248  1908		       a9 e0		      lda	#224
    249  190a				   inityloop
    250  190a		       95 9a		      sta	player1y,x
    251  190c		       ca		      dex
    252  190d		       10 fb		      bpl	inityloop
    253  190f
    254  190f		       a9 01		      lda	#1
    255  1911		       85 0a		      sta	CTRLPF
    256  1913		       ad 84 02 	      lda	INTIM
    257  1916		       8d 71 10 	      sta	RWRITE0
    258  1919		       a9 00		      lda	#0
    259  191b		       8d 38 10 	      STA	DF0FRACINC
    260  191e		       8d 39 10 	      STA	DF1FRACINC
    261  1921		       8d 3a 10 	      STA	DF2FRACINC
    262  1924		       8d 3b 10 	      STA	DF3FRACINC
    263  1927		       8d 3c 10 	      STA	DF4FRACINC
    264  192a		       8d 3e 10 	      STA	DF6FRACINC
    265  192d		       a9 a5		      lda	#<USERSTACK
    266  192f		       8d 57 10 	      STA	DF7LOW
    267  1932		       a9 0d		      lda	#(>USERSTACK) & $0F
    268  1934		       8d 6f 10 	      STA	DF7HI
    269  1937		       a9 ff		      lda	#255
    270  1939		       8d 5a 10 	      sta	CALLFUNCTION	; zero-fill fetcher
    271  193c
    272  193c		       a9 1f		      lda	#>(game-1)
    273  193e		       48		      pha
    274  193f		       a9 96		      lda	#<(game-1)
    275  1941		       48		      pha
    276  1942		       48		      pha
    277  1943		       48		      pha
    278  1944		       a2 01		      ldx	#1
    279  1946		       4c ee df 	      jmp	BS_jsr
    280  1949				   drawscreen
    281  1949		       a9 01		      lda	#1
    282  194b		       85 2c		      sta	CXCLR
    283  194d		       85 09		      sta	COLUBK	; REVENG - don't start with the lastline color
    284  194f
    285  194f				   fufu
    286  194f		       ad 84 02 	      lda	INTIM
    287  1952		       30 fb		      bmi	fufu
    288  1954
      0  1954					      VERTICAL_SYNC
      1  1954		       a9 02		      LDA	#$02
      2  1956		       85 02		      STA	WSYNC
      3  1958		       85 00		      STA	VSYNC
      4  195a		       85 02		      STA	WSYNC
      5  195c		       85 02		      STA	WSYNC
      6  195e		       4a		      LSR
      7  195f		       85 02		      STA	WSYNC
      8  1961		       85 00		      STA	VSYNC
    290  1963
    291  1963		       a9 a9		      lda	#41+128	;was 37 - do more w/c code
    292  1965		       8d 96 02 	      sta	TIM64T
    293  1968
    294  1968							; adjust for pfpos?
    295  1968
    296  1968							; set zero to properly enter C code
    297  1968		       a9 a4		      lda	#<C_function
    298  196a		       8d 50 10 	      sta	DF0LOW
    299  196d		       a9 01		      lda	#(>C_function) & $0F
    300  196f		       8d 68 10 	      sta	DF0HI
    301  1972		       a9 00		      lda	#0
    302  1974		       8d 78 10 	      sta	DF0WRITE
    303  1977
    304  1977							; REVENG - pass the number of vsprites we want...
    305  1977					      ifnconst	dpcspritemax
    306  1977				  -	      ifconst	readpaddle
    307  1977				  -	      lda	#8
    308  1977					      else
    309  1977		       a9 09		      lda	#9
    310  1979					      endif
    311  1979				  -	      else
    312  1979				  -	      lda	#dpcspritemax
    313  1979					      endif
    314  1979		       8d 78 10 	      sta	DF0WRITE
    315  197c
    316  197c		       a5 80		      lda	player0x
    317  197e		       85 8f		      sta	player0xcoll	; detect p0x colls
    318  1980
    319  1980							; copy RAM to fetcher for C-code
    320  1980		       a9 e2		      lda	#<(CcodeData + RAMcopylength)
    321  1982		       8d 50 10 	      sta	DF0LOW
    322  1985		       a9 01		      lda	#(>(CcodeData + RAMcopylength)) & $0F
    323  1987		       8d 68 10 	      sta	DF0HI
    324  198a		       a2 39		      ldx	#RAMcopylength-1
    325  198c				   copy2fetcherloop
    326  198c		       b5 85		      lda	RAMcopybegin,x
    327  198e		       8d 60 10 	      sta	DF0PUSH
    328  1991		       ca		      dex
    329  1992		       10 f8		      bpl	copy2fetcherloop
    330  1994
    331  1994		       a9 ff		      lda	#255
    332  1996		       8d 5a 10 	      sta	CALLFUNCTION
    333  1999
    334  1999							; copy modified data back (just need first 6 bytes, which is sprite sort data)
    335  1999		       a2 ed		      ldx	#256-19
    336  199b				   copyfromfetcherloop
    337  199b		       ad 08 10 	      lda	DF0DATA
    338  199e		       95 98		      sta	RAMcopybegin+19,x
    339  19a0		       e8		      inx
    340  19a1		       30 f8		      bmi	copyfromfetcherloop
    341  19a3
    342  19a3		       20 3a 1e 	      jsr	kernel_setup
    343  19a6		       85 02		      sta	WSYNC
    344  19a8		       a0 80		      ldy	#$80
    345  19aa		       84 20		      sty	HMP0
    346  19ac		       84 21		      sty	HMP1
    347  19ae		       84 22		      sty	HMM0
    348  19b0		       84 23		      sty	HMM1
    349  19b2		       84 24		      sty	HMBL
    350  19b4
    351  19b4							; run possible vblank bB code
    352  19b4				  -	      ifconst	vblank_bB_code
    353  19b4				  -	      jsr	vblank_bB_code
    354  19b4					      endif
    355  19b4
    356  19b4		       20 02 1d 	      jsr	set_fetchers
    357  19b7
    358  19b7		       a2 07		      ldx	#7
    359  19b9				   setloopfrac
    360  19b9		       bd 7d 1d 	      lda	dffraclow,x
    361  19bc		       9d 28 10 	      sta	DF0FRACLOW,x
    362  19bf		       bd 85 1d 	      lda	dffrachi,x
    363  19c2		       9d 30 10 	      sta	DF0FRACHI,x
    364  19c5		       ca		      dex
    365  19c6		       10 f1		      bpl	setloopfrac
    366  19c8							; lda #255
    367  19c8		       8e 3d 10 	      STx	DF5FRACINC	; x=255 right now
    368  19cb		       8e 3f 10 	      STx	DF7FRACINC
    369  19ce		       ad 1d 10 	      lda	DF5FRACDATA	; priming read
    370  19d1		       ad 1f 10 	      lda	DF7FRACDATA	; priming read
    371  19d4
    372  19d4		       a6 85		      ldx	SpriteGfxIndex
    373  19d6		       b5 af		      lda	_NUSIZ1,x	; top NUSIZ/REFP
    374  19d8		       85 05		      sta	NUSIZ1
    375  19da		       85 0c		      sta	REFP1
    376  19dc
    377  19dc							;REVENG - allow P0 to wrap at the top
    378  19dc				   startwrapfix
    379  19dc		       a9 ff		      lda	#255
    380  19de		       85 cc		      sta	temp2
    381  19e0		       18		      clc
    382  19e1		       a5 99		      lda	player0y
    383  19e3		       65 a5		      adc	player0height
    384  19e5		       38		      sec
    385  19e6		       c5 a5		      cmp	player0height
    386  19e8		       90 04		      bcc	skipwrapfix
    387  19ea		       a9 00		      lda	#0
    388  19ec		       85 cc		      sta	temp2
    389  19ee				   skipwrapfix
    390  19ee
    391  19ee		       38		      sec
    392  19ef		       a9 08		      lda	#<P0GFX
    393  19f1		       e5 99		      sbc	player0y
    394  19f3		       8d 52 10 	      sta	DF2LOW
    395  19f6		       a9 d4		      lda	#>P0GFX
    396  19f8							;sbc #0
    397  19f8		       e5 cc		      sbc	temp2
    398  19fa		       8d 6a 10 	      sta	DF2HI
    399  19fd		       a9 07		      lda	#<(P0GFX-1)
    400  19ff		       8d 42 10 	      sta	DF2TOP
    401  1a02		       38		      sec
    402  1a03		       65 a5		      adc	player0height
    403  1a05		       8d 4a 10 	      sta	DF2BOT
    404  1a08
    405  1a08							;REVENG - 1/2 of the COLUM0 fix. the rest is in main.c
    406  1a08		       a9 08		      lda	#<(P0COLOR)
    407  1a0a		       8d 50 10 	      sta	DF0LOW
    408  1a0d		       85 cc		      sta	temp2
    409  1a0f		       a9 d5		      lda	#>(P0COLOR)
    410  1a11		       8d 68 10 	      sta	DF0HI
    411  1a14
    412  1a14							; ball
    413  1a14		       a9 07		      lda	#<(P1GFX-1)
    414  1a16		       18		      clc
    415  1a17		       65 c1		      adc	bally
    416  1a19		       8d 43 10 	      sta	DF3TOP
    417  1a1c		       38		      sec
    418  1a1d		       65 c4		      adc	ballheight
    419  1a1f		       8d 4b 10 	      sta	DF3BOT
    420  1a22
    421  1a22							; missile0
    422  1a22		       a5 cc		      lda	temp2
    423  1a24		       18		      clc
    424  1a25		       65 bf		      adc	missile0y
    425  1a27		       8d 40 10 	      sta	DF0TOP
    426  1a2a		       38		      sec
    427  1a2b		       65 c2		      adc	missile0height
    428  1a2d		       8d 48 10 	      sta	DF0BOT
    429  1a30
    430  1a30
    431  1a30				   fuu
    432  1a30		       ad 84 02 	      lda	INTIM
    433  1a33		       30 fb		      bmi	fuu
    434  1a35		       85 02		      sta	WSYNC
    435  1a37							;     ldy #$80
    436  1a37							;     sty HMP0
    437  1a37							;     sty HMP1
    438  1a37							;     sty HMM0 
    439  1a37							;     sty HMM1
    440  1a37							;     sty HMBL
    441  1a37							; relocated code above prior to vblank, to allow for Cosmic Ark starfield
    442  1a37							; and/or skewed players
      0  1a37					      sleep	17
      1  1a37				   .CYCLES    SET	17
      2  1a37
      3  1a37				  -	      IF	.CYCLES < 2
      4  1a37				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1a37				  -	      ERR
      6  1a37					      ENDIF
      7  1a37
      8  1a37					      IF	.CYCLES & 1
      9  1a37					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1a37		       04 00		      nop	0
     11  1a39				  -	      ELSE
     12  1a39				  -	      bit	VSYNC
     13  1a39					      ENDIF
     14  1a39				   .CYCLES    SET	.CYCLES - 3
     15  1a39					      ENDIF
     16  1a39
     17  1a39					      REPEAT	.CYCLES / 2
     18  1a39		       ea		      nop
     17  1a39					      REPEND
     18  1a3a		       ea		      nop
     17  1a3a					      REPEND
     18  1a3b		       ea		      nop
     17  1a3b					      REPEND
     18  1a3c		       ea		      nop
     17  1a3c					      REPEND
     18  1a3d		       ea		      nop
     17  1a3d					      REPEND
     18  1a3e		       ea		      nop
     17  1a3e					      REPEND
     18  1a3f		       ea		      nop
     19  1a40					      REPEND
    444  1a40
    445  1a40		       a9 d3		      lda	#KERNEL_LINES
    446  1a42		       8d 96 02 	      sta	TIM64T
    447  1a45		       a9 01		      lda	#1
    448  1a47		       85 27		      sta	VDELBL
    449  1a49		       85 25		      sta	VDELP0
    450  1a4b
    451  1a4b							; missile1
    452  1a4b		       a9 07		      lda	#<(P1COLOR-1)
    453  1a4d		       18		      clc
    454  1a4e		       65 c0		      adc	missile1y
    455  1a50		       8d 41 10 	      sta	DF1TOP
    456  1a53		       38		      sec
    457  1a54		       65 c3		      adc	missile1height
    458  1a56		       8d 49 10 	      sta	DF1BOT
    459  1a59
    460  1a59		       a9 00		      lda	#0
    461  1a5b		       85 01		      sta	VBLANK
    462  1a5d		       8d 58 10 	      sta	FASTFETCH
    463  1a60							;sleep 7
    464  1a60		       a9 12		      lda	#<DF2DATAW	; REVENG - added so GRP0 is at TOP
    465  1a62		       85 1b		      STA	GRP0	; 36 (VDEL)   ; ""
      0  1a64					      sleep	2	; ""
      1  1a64				   .CYCLES    SET	2
      2  1a64
      3  1a64				  -	      IF	.CYCLES < 2
      4  1a64				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1a64				  -	      ERR
      6  1a64					      ENDIF
      7  1a64
      8  1a64				  -	      IF	.CYCLES & 1
      9  1a64				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1a64				  -	      nop	0
     11  1a64				  -	      ELSE
     12  1a64				  -	      bit	VSYNC
     13  1a64				  -	      ENDIF
     14  1a64				  -.CYCLES    SET	.CYCLES - 3
     15  1a64					      ENDIF
     16  1a64
     17  1a64					      REPEAT	.CYCLES / 2
     18  1a64		       ea		      nop
     19  1a65					      REPEND
    467  1a65
    468  1a65		       a9 18		      lda	#<DF0FRACDATA
    469  1a67		       85 0e		      sta	PF1	; (PF1L)
    470  1a69
    471  1a69							; enter at cycle ??
    472  1a69				   loop
    473  1a69		       a9 08		      lda	#<DF0DATA	;74
    474  1a6b		       85 06		      STA	COLUP0	; 1
    475  1a6d		       a9 09		      lda	#<DF1DATA	;3
    476  1a6f				   loop2
    477  1a6f		       85 07		      STA	COLUP1	; 6
    478  1a71		       a9 0b		      lda	#<DF3DATA
    479  1a73		       85 1c		      STA	GRP1	; 11
    480  1a75		       a9 20		      lda	#<DF0FLAG
    481  1a77		       85 1d		      STA	ENAM0	; 16
    482  1a79
    483  1a79		       a9 1e		      lda	#<DF6FRACDATA
    484  1a7b		       85 09		      sta	COLUBK	; 21
    485  1a7d		       a9 1c		      lda	#<DF4FRACDATA
    486  1a7f		       85 08		      sta	COLUPF	; 26
    487  1a81		       a9 19		      lda	#<DF1FRACDATA
    488  1a83		       85 0f		      sta	PF2	; 31 (PF2L)
    489  1a85				   loop3
    490  1a85		       a9 12		      lda	#<DF2DATAW
    491  1a87		       85 1b		      STA	GRP0	; 36 (VDEL)
    492  1a89		       a9 23		      lda	#<DF3FLAG
    493  1a8b		       85 1f		      STA	ENABL	; 41 (VDEL)
    494  1a8d		       a2 70		      ldx	#$70	;in case we get kernel 6
    495  1a8f		       a9 1a		      lda	#<DF2FRACDATA	;45
    496  1a91		       85 0f		      sta	PF2	; 48
    497  1a93		       84 21		      sty	HMP1	; 51 ; from prev. cycle: $80=nomove
    498  1a95		       a9 1b		      lda	#<DF3FRACDATA	;53
    499  1a97		       85 0e		      sta	PF1	; 56
    500  1a99		       a9 0c		      lda	#<DF4DATA	; 58 this is the repos info
    501  1a9b		       f0 4d		      beq	repo	;60/61
    502  1a9d				   norepo		; 60
    503  1a9d		       a8		      tay		; 62
    504  1a9e		       a9 08		      lda	#<DF0DATA	; 64
    505  1aa0
    506  1aa0		       ae 84 02 	      ldx	INTIM	; 68 timed for 192 lines
    507  1aa3		       f0 60		      beq	exitkernel	; 70/71
    508  1aa5		       85 2a		      sta	HMOVE	; 73
    509  1aa7
    510  1aa7		       85 06		      STA	COLUP0	; 0
    511  1aa9		       a9 09		      lda	#<DF1DATA	;2
    512  1aab		       85 07		      STA	COLUP1	;5
    513  1aad		       a9 0b		      lda	#<DF3DATA
    514  1aaf		       85 1c		      STA	GRP1	; 10
    515  1ab1		       a9 21		      lda	#<DF1FLAG
    516  1ab3		       85 1e		      STA	ENAM1	; 15
    517  1ab5		       a9 18		      lda	#<DF0FRACDATA
    518  1ab7		       85 0e		      sta	PF1	; 20 (PF1L)
    519  1ab9		       a9 19		      lda	#<DF1FRACDATA
    520  1abb		       85 0f		      sta	PF2	; 25 (PF2L)
    521  1abd		       a9 12		      lda	#<DF2DATAW
    522  1abf		       85 1b		      STA	GRP0	; 30 (VDEL)
    523  1ac1		       a9 23		      lda	#<DF3FLAG
    524  1ac3		       85 1f		      STA	ENABL	; 35 (VDEL)
    525  1ac5		       88		      dey		; 37
    526  1ac6		       8c 64 10 	      STY	DF4PUSH	; 41
    527  1ac9		       a0 80		      ldy	#$80	; 43 no movement next line
    528  1acb		       a9 1a		      lda	#<DF2FRACDATA	;45
    529  1acd		       85 0f		      sta	PF2	; 48
    530  1acf		       84 21		      sty	HMP1	; 51 ; from prev. cycle: $80=nomove
    531  1ad1		       a9 1b		      lda	#<DF3FRACDATA	;53
    532  1ad3		       85 0e		      sta	PF1	; 56
    533  1ad5				  -	      ifnconst	DPC_kernel_options
    534  1ad5				  -			;sleep 8 ; REVENG - timing is off - results in a garbled screen
    535  1ad5				  -	      sleep	5	; this is better
    536  1ad5					      else
    537  1ad5		       24 43		      bit	DPC_kernel_options
    538  1ad7					      if	(DPC_kernel_options > $3F)
    539  1ad7		       30 09		      bmi	COLfound
    540  1ad9				  -	      else
    541  1ad9				  -	      bpl	COLfound
    542  1ad9					      endif
    543  1ad9					      endif
    544  1ad9		       86 ce		      stx	temp4	; +3
    545  1adb
    546  1adb				   getbackearly
    547  1adb		       a9 18		      lda	#<DF0FRACDATA	; +2
    548  1add		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    549  1adf		       4c 69 5a 	      JMP	loop+$4000	; 72
    550  1ae2
    551  1ae2					      ifconst	DPC_kernel_options
    552  1ae2				   COLfound
    553  1ae2		       ad 18 10 	      lda	DF0FRACDATA
    554  1ae5		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    555  1ae7		       4c 69 5a 	      JMP	loop+$4000	; 72
    556  1aea					      endif
    557  1aea
    558  1aea				   repo
    559  1aea		       ac 1f 10 	      ldy	DF7FRACDATA	; 65
    560  1aed		       a9 18		      lda	#<DF0FRACDATA	; 67 preload PF1L for next line
    561  1aef				  -	      if	((>repo) > (>norepo))
    562  1aef				  -	      STA	PF1
    563  1aef					      else
    564  1aef		       8d 0e 00 	      STA.w	PF1	; 71 ; sta.w if page doesn't wrap
    565  1af2					      endif
    566  1af2		       a9 08		      lda	#<DF0DATA	;73
    567  1af4		       85 06		      STA	COLUP0	; 0
    568  1af6		       a9 09		      lda	#<DF1DATA
    569  1af8		       85 07		      STA	COLUP1	;5
    570  1afa		       a9 0b		      lda	#<DF3DATA
    571  1afc		       85 1c		      STA	GRP1	; 10
    572  1afe		       a9 21		      lda	#<DF1FLAG
    573  1b00		       85 1e		      STA	ENAM1	; 15
    574  1b02							; repos info holds HMMx
    575  1b02		       6c 0d 10 	      jmp	(DF5DATA)	; 20 grabs df6/df7=lo/hi
    576  1b05
    577  1b05				   exitkernel		; exit the kernel
    578  1b05		       20 c9 5e 	      jsr	scorekernel+$4000	; 1
    579  1b08				   exit
    580  1b08		       a2 ff		      ldx	#255
    581  1b0a		       8e 58 10 	      stx	FASTFETCH
    582  1b0d		       85 02		      sta	WSYNC
    583  1b0f				  -	      ifconst	qtcontroller
    584  1b0f				  -	      lda	qtcontroller
    585  1b0f				  -	      lsr		; bit 0 in carry
    586  1b0f				  -	      lda	#4
    587  1b0f				  -	      ror		; carry into top of A
    588  1b0f					      else
    589  1b0f		       a9 02		      lda	#2
    590  1b11					      endif		; qtcontroller
    591  1b11		       85 01		      STA	VBLANK
    592  1b13		       a9 a7		      lda	#OVERSCAN_LINES
    593  1b15		       8d 96 02 	      sta	TIM64T
    594  1b18		       38		      sec
    595  1b19		       a9 d3		      lda	#KERNEL_LINES
    596  1b1b		       e5 ce		      sbc	temp4
    597  1b1d		       aa		      tax
    598  1b1e		       4a		      lsr
    599  1b1f		       4a		      lsr
    600  1b20		       85 cd		      sta	temp3	; div4
    601  1b22		       4a		      lsr
    602  1b23		       4a		      lsr
    603  1b24		       85 cc		      sta	temp2	; div16
    604  1b26		       4a		      lsr
    605  1b27		       85 cb		      sta	temp1	; div32
    606  1b29		       18		      clc
    607  1b2a		       8a		      txa
    608  1b2b		       65 cc		      adc	temp2
    609  1b2d		       65 cb		      adc	temp1
    610  1b2f		       38		      sec
    611  1b30		       e5 cd		      sbc	temp3
    612  1b32		       85 ce		      sta	temp4	; approx line of first pf coll
      0  1b34					      RETURN
      1  1b34				  -	      ifnconst	bankswitch
      2  1b34				  -	      rts
      3  1b34					      else
      4  1b34		       4c e0 df 	      jmp	BS_return
      5  1b37					      endif
    614  1b37
    615  1b37							; jmp exit
    616  1b37
    617  1b37							; kernels resp1 23/28/33/38/43/48/53/58/63/68/73
    618  1b37
    619  1b37				   kernel1
    620  1b37		       85 11		      sta	RESP1	; 23
    621  1b39		       a9 12		      lda	#<DF2DATAW
    622  1b3b		       85 1b		      STA	GRP0	; 28 (VDEL)
    623  1b3d		       a9 19		      lda	#<DF1FRACDATA
    624  1b3f		       85 0f		      STA	PF2	; 33
    625  1b41		       a9 23		      lda	#<DF3FLAG
    626  1b43		       85 1f		      STA	ENABL	; 38 (VDEL)
      0  1b45					      sleep	5
      1  1b45				   .CYCLES    SET	5
      2  1b45
      3  1b45				  -	      IF	.CYCLES < 2
      4  1b45				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b45				  -	      ERR
      6  1b45					      ENDIF
      7  1b45
      8  1b45					      IF	.CYCLES & 1
      9  1b45					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b45		       04 00		      nop	0
     11  1b47				  -	      ELSE
     12  1b47				  -	      bit	VSYNC
     13  1b47					      ENDIF
     14  1b47				   .CYCLES    SET	.CYCLES - 3
     15  1b47					      ENDIF
     16  1b47
     17  1b47					      REPEAT	.CYCLES / 2
     18  1b47		       ea		      nop
     19  1b48					      REPEND
    628  1b48		       a9 1a		      lda	#<DF2FRACDATA	;45
    629  1b4a		       85 0f		      sta	PF2	; 48
    630  1b4c		       a9 1b		      lda	#<DF3FRACDATA	;50
    631  1b4e		       85 0e		      sta	PF1	; 53
    632  1b50		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    633  1b52		       85 05		      STA	NUSIZ1	; 58
    634  1b54		       85 0c		      STA	REFP1	; 61
    635  1b56		       4c db 1a 	      jmp	getbackearly	;64
    636  1b59
    637  1b59				   kernel2
    638  1b59		       a9 12		      lda	#<DF2DATAW
    639  1b5b		       85 1b		      STA	GRP0	; 25 (VDEL)
    640  1b5d		       85 11		      sta	RESP1	;28
    641  1b5f		       a9 19		      lda	#<DF1FRACDATA
    642  1b61		       85 0f		      STA	PF2	; 33
    643  1b63		       a9 23		      lda	#<DF3FLAG
    644  1b65		       85 1f		      STA	ENABL	; 38 (VDEL)
      0  1b67					      sleep	5
      1  1b67				   .CYCLES    SET	5
      2  1b67
      3  1b67				  -	      IF	.CYCLES < 2
      4  1b67				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b67				  -	      ERR
      6  1b67					      ENDIF
      7  1b67
      8  1b67					      IF	.CYCLES & 1
      9  1b67					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b67		       04 00		      nop	0
     11  1b69				  -	      ELSE
     12  1b69				  -	      bit	VSYNC
     13  1b69					      ENDIF
     14  1b69				   .CYCLES    SET	.CYCLES - 3
     15  1b69					      ENDIF
     16  1b69
     17  1b69					      REPEAT	.CYCLES / 2
     18  1b69		       ea		      nop
     19  1b6a					      REPEND
    646  1b6a		       a9 1a		      lda	#<DF2FRACDATA	;45
    647  1b6c		       85 0f		      sta	PF2	; 48
    648  1b6e		       a9 1b		      lda	#<DF3FRACDATA	;50
    649  1b70		       85 0e		      sta	PF1	; 53
    650  1b72		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    651  1b74		       85 05		      STA	NUSIZ1
    652  1b76		       85 0c		      STA	REFP1
    653  1b78		       4c db 1a 	      jmp	getbackearly	;64
    654  1b7b
    655  1b7b				   kernel3
    656  1b7b		       a9 12		      lda	#<DF2DATAW
    657  1b7d		       85 1b		      STA	GRP0	; 25 (VDEL)
    658  1b7f		       a9 19		      lda	#<DF1FRACDATA
    659  1b81		       85 0f		      STA	PF2	; 30
    660  1b83		       85 11		      sta	RESP1	;33
    661  1b85		       a9 23		      lda	#<DF3FLAG
    662  1b87		       85 1f		      STA	ENABL	; 38 (VDEL)
      0  1b89					      sleep	5
      1  1b89				   .CYCLES    SET	5
      2  1b89
      3  1b89				  -	      IF	.CYCLES < 2
      4  1b89				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b89				  -	      ERR
      6  1b89					      ENDIF
      7  1b89
      8  1b89					      IF	.CYCLES & 1
      9  1b89					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b89		       04 00		      nop	0
     11  1b8b				  -	      ELSE
     12  1b8b				  -	      bit	VSYNC
     13  1b8b					      ENDIF
     14  1b8b				   .CYCLES    SET	.CYCLES - 3
     15  1b8b					      ENDIF
     16  1b8b
     17  1b8b					      REPEAT	.CYCLES / 2
     18  1b8b		       ea		      nop
     19  1b8c					      REPEND
    664  1b8c		       a9 1a		      lda	#<DF2FRACDATA	;45
    665  1b8e		       85 0f		      sta	PF2	; 48
    666  1b90		       a9 1b		      lda	#<DF3FRACDATA	;50
    667  1b92		       85 0e		      sta	PF1	; 53
    668  1b94		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    669  1b96		       85 05		      STA	NUSIZ1
    670  1b98		       85 0c		      STA	REFP1
    671  1b9a		       4c db 1a 	      JMP	getbackearly	; 64
    672  1b9d
    673  1b9d				   kernel4
    674  1b9d		       a9 12		      lda	#<DF2DATAW
    675  1b9f		       85 1b		      STA	GRP0	; 25 (VDEL)
    676  1ba1		       a9 23		      lda	#<DF3FLAG
    677  1ba3		       85 1f		      STA	ENABL	; 30(VDEL)
    678  1ba5		       a9 19		      lda	#<DF1FRACDATA
    679  1ba7		       85 0f		      STA	PF2	; 35
    680  1ba9		       85 11		      sta	RESP1	;38
      0  1bab					      sleep	5
      1  1bab				   .CYCLES    SET	5
      2  1bab
      3  1bab				  -	      IF	.CYCLES < 2
      4  1bab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1bab				  -	      ERR
      6  1bab					      ENDIF
      7  1bab
      8  1bab					      IF	.CYCLES & 1
      9  1bab					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1bab		       04 00		      nop	0
     11  1bad				  -	      ELSE
     12  1bad				  -	      bit	VSYNC
     13  1bad					      ENDIF
     14  1bad				   .CYCLES    SET	.CYCLES - 3
     15  1bad					      ENDIF
     16  1bad
     17  1bad					      REPEAT	.CYCLES / 2
     18  1bad		       ea		      nop
     19  1bae					      REPEND
    682  1bae		       a9 1a		      lda	#<DF2FRACDATA	;45
    683  1bb0		       85 0f		      sta	PF2	; 48
    684  1bb2		       a9 1b		      lda	#<DF3FRACDATA	;50
    685  1bb4		       85 0e		      sta	PF1	; 53
    686  1bb6		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    687  1bb8		       85 05		      STA	NUSIZ1	; 58
    688  1bba		       85 0c		      STA	REFP1	; 61
    689  1bbc		       4c db 1a 	      JMP	getbackearly	; 64
    690  1bbf
    691  1bbf				   kernel5
    692  1bbf		       a9 12		      lda	#<DF2DATAW
    693  1bc1		       85 1b		      STA	GRP0	; (VDEL)
    694  1bc3		       a9 23		      lda	#<DF3FLAG
    695  1bc5		       85 1f		      STA	ENABL	; (VDEL)
    696  1bc7		       a9 19		      lda	#<DF1FRACDATA
    697  1bc9		       85 0f		      STA	PF2	; 35
      0  1bcb					      sleep	5
      1  1bcb				   .CYCLES    SET	5
      2  1bcb
      3  1bcb				  -	      IF	.CYCLES < 2
      4  1bcb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1bcb				  -	      ERR
      6  1bcb					      ENDIF
      7  1bcb
      8  1bcb					      IF	.CYCLES & 1
      9  1bcb					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1bcb		       04 00		      nop	0
     11  1bcd				  -	      ELSE
     12  1bcd				  -	      bit	VSYNC
     13  1bcd					      ENDIF
     14  1bcd				   .CYCLES    SET	.CYCLES - 3
     15  1bcd					      ENDIF
     16  1bcd
     17  1bcd					      REPEAT	.CYCLES / 2
     18  1bcd		       ea		      nop
     19  1bce					      REPEND
    699  1bce		       85 11		      sta	RESP1	;43
    700  1bd0		       a9 1a		      lda	#<DF2FRACDATA	;45
    701  1bd2		       85 0f		      sta	PF2	; 48
    702  1bd4		       a9 1b		      lda	#<DF3FRACDATA	;50
    703  1bd6		       85 0e		      sta	PF1	; 53
    704  1bd8		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    705  1bda		       85 05		      STA	NUSIZ1
    706  1bdc		       85 0c		      STA	REFP1
    707  1bde		       4c db 1a 	      JMP	getbackearly	; 64
    708  1be1
    709  1be1				   kernel6
    710  1be1		       a9 12		      lda	#<DF2DATAW
    711  1be3		       85 1b		      STA	GRP0	; 25 (VDEL)
    712  1be5		       a9 23		      lda	#<DF3FLAG
    713  1be7		       85 1f		      STA	ENABL	; 30 (VDEL)
    714  1be9		       a9 19		      lda	#<DF1FRACDATA
    715  1beb		       85 0f		      STA	PF2	; 35
    716  1bed		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    717  1bef		       85 05		      STA	NUSIZ1	; 40
    718  1bf1		       85 0c		      STA	REFP1	; 43
    719  1bf3		       a9 1a		      lda	#<DF2FRACDATA	;45
    720  1bf5		       85 0f		      sta	PF2	; 48
    721  1bf7		       a9 1b		      lda	#<DF3FRACDATA	;50
    722  1bf9		       85 11		      sta	RESP1	;53
    723  1bfb							; do a move right by 15
    724  1bfb		       85 0e		      sta	PF1	; 56
    725  1bfd		       86 21		      stx	HMP1	; 59
    726  1bff		       a9 19		      lda	#<DF1FRACDATA
    727  1c01		       85 0f		      sta	PF2	; 64 (PF2L)
    728  1c03		       a9 18		      lda	#<DF0FRACDATA
    729  1c05		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    730  1c07		       a9 08		      lda	#<DF0DATA	; 71
    731  1c09		       85 2a		      sta	HMOVE	; 74 adjust to +15 right
    732  1c0b
    733  1c0b		       85 06		      STA	COLUP0	; 1
    734  1c0d		       a9 09		      lda	#<DF1DATA
    735  1c0f		       85 07		      sta	COLUP1	; 6
    736  1c11		       a9 0b		      lda	#<DF3DATA
    737  1c13		       85 1c		      STA	GRP1	; 11
    738  1c15		       a9 20		      lda	#<DF0FLAG
    739  1c17		       85 1d		      STA	ENAM0	; 16
    740  1c19		       a9 1e		      lda	#<DF6FRACDATA
    741  1c1b		       85 09		      STA	COLUBK	; 21
    742  1c1d		       a9 1c		      lda	#<DF4FRACDATA
    743  1c1f		       85 08		      sta	COLUPF	; 26
      0  1c21					      sleep	2
      1  1c21				   .CYCLES    SET	2
      2  1c21
      3  1c21				  -	      IF	.CYCLES < 2
      4  1c21				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c21				  -	      ERR
      6  1c21					      ENDIF
      7  1c21
      8  1c21				  -	      IF	.CYCLES & 1
      9  1c21				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c21				  -	      nop	0
     11  1c21				  -	      ELSE
     12  1c21				  -	      bit	VSYNC
     13  1c21				  -	      ENDIF
     14  1c21				  -.CYCLES    SET	.CYCLES - 3
     15  1c21					      ENDIF
     16  1c21
     17  1c21					      REPEAT	.CYCLES / 2
     18  1c21		       ea		      nop
     19  1c22					      REPEND
    745  1c22		       4c 85 1a 	      jmp	loop3	; 31
    746  1c25
    747  1c25				   kernel7
    748  1c25		       a9 12		      lda	#<DF2DATAW
    749  1c27		       85 1b		      STA	GRP0	; 25 (VDEL)
    750  1c29		       a9 23		      lda	#<DF3FLAG
    751  1c2b		       85 1f		      STA	ENABL	; 30 (VDEL)
    752  1c2d		       a9 19		      lda	#<DF1FRACDATA
    753  1c2f		       85 0f		      STA	PF2	; 35
    754  1c31		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    755  1c33		       85 05		      STA	NUSIZ1	; 40
    756  1c35		       85 0c		      STA	REFP1	; 43
    757  1c37		       a9 1a		      lda	#<DF2FRACDATA	;45
    758  1c39		       85 0f		      sta	PF2	; 48
      0  1c3b					      sleep	2
      1  1c3b				   .CYCLES    SET	2
      2  1c3b
      3  1c3b				  -	      IF	.CYCLES < 2
      4  1c3b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c3b				  -	      ERR
      6  1c3b					      ENDIF
      7  1c3b
      8  1c3b				  -	      IF	.CYCLES & 1
      9  1c3b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c3b				  -	      nop	0
     11  1c3b				  -	      ELSE
     12  1c3b				  -	      bit	VSYNC
     13  1c3b				  -	      ENDIF
     14  1c3b				  -.CYCLES    SET	.CYCLES - 3
     15  1c3b					      ENDIF
     16  1c3b
     17  1c3b					      REPEAT	.CYCLES / 2
     18  1c3b		       ea		      nop
     19  1c3c					      REPEND
    760  1c3c		       85 11		      sta	RESP1	;53
    761  1c3e		       a9 1b		      lda	#<DF3FRACDATA	;55
    762  1c40		       85 0e		      sta	PF1	; 58
      0  1c42					      sleep	3
      1  1c42				   .CYCLES    SET	3
      2  1c42
      3  1c42				  -	      IF	.CYCLES < 2
      4  1c42				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c42				  -	      ERR
      6  1c42					      ENDIF
      7  1c42
      8  1c42					      IF	.CYCLES & 1
      9  1c42					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c42		       04 00		      nop	0
     11  1c44				  -	      ELSE
     12  1c44				  -	      bit	VSYNC
     13  1c44					      ENDIF
     14  1c44				   .CYCLES    SET	.CYCLES - 3
     15  1c44					      ENDIF
     16  1c44
     17  1c44				  -	      REPEAT	.CYCLES / 2
     18  1c44				  -	      nop
     19  1c44					      REPEND
    764  1c44		       4c db 1a 	      JMP	getbackearly	; 64
    765  1c47
    766  1c47				   kernel8
    767  1c47		       a9 12		      lda	#<DF2DATAW
    768  1c49		       85 1b		      STA	GRP0	; (VDEL)
    769  1c4b		       a9 23		      lda	#<DF3FLAG
    770  1c4d		       85 1f		      STA	ENABL	; (VDEL)
    771  1c4f		       a9 19		      lda	#<DF1FRACDATA
    772  1c51		       85 0f		      STA	PF2	; 35
    773  1c53		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    774  1c55		       85 05		      STA	NUSIZ1	; 40
    775  1c57		       85 0c		      STA	REFP1	; 43
    776  1c59		       a9 1a		      lda	#<DF2FRACDATA	;45
    777  1c5b		       85 0f		      sta	PF2	; 48
    778  1c5d		       a9 1b		      lda	#<DF3FRACDATA	;50
    779  1c5f		       85 0e		      sta	PF1	; 53
      0  1c61					      sleep	2
      1  1c61				   .CYCLES    SET	2
      2  1c61
      3  1c61				  -	      IF	.CYCLES < 2
      4  1c61				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c61				  -	      ERR
      6  1c61					      ENDIF
      7  1c61
      8  1c61				  -	      IF	.CYCLES & 1
      9  1c61				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c61				  -	      nop	0
     11  1c61				  -	      ELSE
     12  1c61				  -	      bit	VSYNC
     13  1c61				  -	      ENDIF
     14  1c61				  -.CYCLES    SET	.CYCLES - 3
     15  1c61					      ENDIF
     16  1c61
     17  1c61					      REPEAT	.CYCLES / 2
     18  1c61		       ea		      nop
     19  1c62					      REPEND
    781  1c62		       85 11		      sta	RESP1	;58
      0  1c64					      sleep	3
      1  1c64				   .CYCLES    SET	3
      2  1c64
      3  1c64				  -	      IF	.CYCLES < 2
      4  1c64				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c64				  -	      ERR
      6  1c64					      ENDIF
      7  1c64
      8  1c64					      IF	.CYCLES & 1
      9  1c64					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c64		       04 00		      nop	0
     11  1c66				  -	      ELSE
     12  1c66				  -	      bit	VSYNC
     13  1c66					      ENDIF
     14  1c66				   .CYCLES    SET	.CYCLES - 3
     15  1c66					      ENDIF
     16  1c66
     17  1c66				  -	      REPEAT	.CYCLES / 2
     18  1c66				  -	      nop
     19  1c66					      REPEND
    783  1c66		       4c db 1a 	      JMP	getbackearly	; 64
    784  1c69
    785  1c69				   kernel9
    786  1c69		       a9 12		      lda	#<DF2DATAW
    787  1c6b		       85 1b		      STA	GRP0	; (VDEL)
    788  1c6d		       a9 23		      lda	#<DF3FLAG
    789  1c6f		       85 1f		      STA	ENABL	; (VDEL)
    790  1c71		       a9 19		      lda	#<DF1FRACDATA
    791  1c73		       85 0f		      STA	PF2	; 35
    792  1c75		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    793  1c77		       85 05		      STA	NUSIZ1	; 40
    794  1c79		       85 0c		      STA	REFP1	; 43
    795  1c7b		       a9 1a		      lda	#<DF2FRACDATA	;45
    796  1c7d		       85 0f		      sta	PF2	; 48
    797  1c7f		       a9 1b		      lda	#<DF3FRACDATA	;50
    798  1c81		       85 0e		      sta	PF1	; 53
      0  1c83					      sleep	5
      1  1c83				   .CYCLES    SET	5
      2  1c83
      3  1c83				  -	      IF	.CYCLES < 2
      4  1c83				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c83				  -	      ERR
      6  1c83					      ENDIF
      7  1c83
      8  1c83					      IF	.CYCLES & 1
      9  1c83					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c83		       04 00		      nop	0
     11  1c85				  -	      ELSE
     12  1c85				  -	      bit	VSYNC
     13  1c85					      ENDIF
     14  1c85				   .CYCLES    SET	.CYCLES - 3
     15  1c85					      ENDIF
     16  1c85
     17  1c85					      REPEAT	.CYCLES / 2
     18  1c85		       ea		      nop
     19  1c86					      REPEND
    800  1c86		       a9 18		      lda	#<DF0FRACDATA
    801  1c88		       85 11		      sta	RESP1	;63
      0  1c8a					      sleep	3
      1  1c8a				   .CYCLES    SET	3
      2  1c8a
      3  1c8a				  -	      IF	.CYCLES < 2
      4  1c8a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c8a				  -	      ERR
      6  1c8a					      ENDIF
      7  1c8a
      8  1c8a					      IF	.CYCLES & 1
      9  1c8a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c8a		       04 00		      nop	0
     11  1c8c				  -	      ELSE
     12  1c8c				  -	      bit	VSYNC
     13  1c8c					      ENDIF
     14  1c8c				   .CYCLES    SET	.CYCLES - 3
     15  1c8c					      ENDIF
     16  1c8c
     17  1c8c				  -	      REPEAT	.CYCLES / 2
     18  1c8c				  -	      nop
     19  1c8c					      REPEND
    803  1c8c		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    804  1c8e		       4c 69 1a 	      jmp	loop	;72
    805  1c91
    806  1c91				   kernel10
    807  1c91		       a9 12		      lda	#<DF2DATAW
    808  1c93		       85 1b		      STA	GRP0	; 25 (VDEL)
    809  1c95		       a9 23		      lda	#<DF3FLAG
    810  1c97		       85 1f		      STA	ENABL	; 30 (VDEL)
    811  1c99		       a9 19		      lda	#<DF1FRACDATA
    812  1c9b		       85 0f		      STA	PF2	; 35
    813  1c9d		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    814  1c9f		       85 05		      STA	NUSIZ1	; 40
    815  1ca1		       85 0c		      STA	REFP1	; 43
    816  1ca3		       a9 1a		      lda	#<DF2FRACDATA	;45
    817  1ca5		       85 0f		      sta	PF2	; 48
    818  1ca7		       a9 1b		      lda	#<DF3FRACDATA	;50
    819  1ca9		       85 0e		      sta	PF1	; 53
      0  1cab					      sleep	6
      1  1cab				   .CYCLES    SET	6
      2  1cab
      3  1cab				  -	      IF	.CYCLES < 2
      4  1cab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1cab				  -	      ERR
      6  1cab					      ENDIF
      7  1cab
      8  1cab				  -	      IF	.CYCLES & 1
      9  1cab				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1cab				  -	      nop	0
     11  1cab				  -	      ELSE
     12  1cab				  -	      bit	VSYNC
     13  1cab				  -	      ENDIF
     14  1cab				  -.CYCLES    SET	.CYCLES - 3
     15  1cab					      ENDIF
     16  1cab
     17  1cab					      REPEAT	.CYCLES / 2
     18  1cab		       ea		      nop
     17  1cab					      REPEND
     18  1cac		       ea		      nop
     17  1cac					      REPEND
     18  1cad		       ea		      nop
     19  1cae					      REPEND
    821  1cae		       a9 18		      lda	#<DF0FRACDATA
    822  1cb0		       ae 08 10 	      LDX	DF0DATA	; 65
    823  1cb3		       85 11		      sta	RESP1	; 68
    824  1cb5		       85 0e		      STA	PF1	; 71
    825  1cb7		       a9 09		      lda	#<DF1DATA	; 74
    826  1cb9		       86 06		      STX	COLUP0	; 0
    827  1cbb		       4c 6f 1a 	      jmp	loop2	; 3
    828  1cbe
    829  1cbe				   kernel11
    830  1cbe		       a9 12		      lda	#<DF2DATAW
    831  1cc0		       85 1b		      STA	GRP0	; (VDEL)
    832  1cc2		       a9 23		      lda	#<DF3FLAG
    833  1cc4		       85 1f		      STA	ENABL	; (VDEL)
    834  1cc6		       a9 19		      lda	#<DF1FRACDATA
    835  1cc8		       85 0f		      STA	PF2	; 35
    836  1cca		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    837  1ccc		       85 05		      STA	NUSIZ1
    838  1cce		       85 0c		      STA	REFP1
    839  1cd0		       a9 1a		      lda	#<DF2FRACDATA	;45
    840  1cd2		       85 0f		      sta	PF2	; 48
    841  1cd4		       a9 1b		      lda	#<DF3FRACDATA	;50
    842  1cd6		       85 0e		      sta	PF1	; 53
      0  1cd8					      sleep	3
      1  1cd8				   .CYCLES    SET	3
      2  1cd8
      3  1cd8				  -	      IF	.CYCLES < 2
      4  1cd8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1cd8				  -	      ERR
      6  1cd8					      ENDIF
      7  1cd8
      8  1cd8					      IF	.CYCLES & 1
      9  1cd8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1cd8		       04 00		      nop	0
     11  1cda				  -	      ELSE
     12  1cda				  -	      bit	VSYNC
     13  1cda					      ENDIF
     14  1cda				   .CYCLES    SET	.CYCLES - 3
     15  1cda					      ENDIF
     16  1cda
     17  1cda				  -	      REPEAT	.CYCLES / 2
     18  1cda				  -	      nop
     19  1cda					      REPEND
    844  1cda		       a9 19		      lda	#<DF1FRACDATA	;45
    845  1cdc		       85 0f		      sta	PF2	; 61
    846  1cde		       ae 08 10 	      LDX	DF0DATA	; 65
    847  1ce1
    848  1ce1		       a9 18		      lda	#<DF0FRACDATA	; 67
    849  1ce3		       85 0e		      sta	PF1	; 70
    850  1ce5		       85 11		      sta	RESP1	; 73
    851  1ce7		       86 06		      STX	COLUP0	; 0
    852  1ce9		       a9 09		      lda	#<DF1DATA	; 2
    853  1ceb		       85 07		      sta	COLUP1	; 5
    854  1ced		       a9 0b		      lda	#<DF3DATA
    855  1cef		       85 1c		      STA	GRP1	; 10
    856  1cf1		       a9 20		      lda	#<DF0FLAG
    857  1cf3		       85 1d		      STA	ENAM0	; 25
    858  1cf5		       a9 1e		      lda	#<DF6FRACDATA
    859  1cf7		       85 09		      STA	COLUBK	; 20
    860  1cf9		       a9 1c		      lda	#<DF4FRACDATA
    861  1cfb		       85 08		      sta	COLUPF	; 25
      0  1cfd					      sleep	3
      1  1cfd				   .CYCLES    SET	3
      2  1cfd
      3  1cfd				  -	      IF	.CYCLES < 2
      4  1cfd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1cfd				  -	      ERR
      6  1cfd					      ENDIF
      7  1cfd
      8  1cfd					      IF	.CYCLES & 1
      9  1cfd					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1cfd		       04 00		      nop	0
     11  1cff				  -	      ELSE
     12  1cff				  -	      bit	VSYNC
     13  1cff					      ENDIF
     14  1cff				   .CYCLES    SET	.CYCLES - 3
     15  1cff					      ENDIF
     16  1cff
     17  1cff				  -	      REPEAT	.CYCLES / 2
     18  1cff				  -	      nop
     19  1cff					      REPEND
    863  1cff		       4c 85 1a 	      jmp	loop3	; 31
    864  1d02
    865  1d02				   set_fetchers
    866  1d02		       ad 6d 1d 	      lda	dflow
    867  1d05		       8d 50 10 	      sta	DF0LOW
    868  1d08		       ad 75 1d 	      lda	dfhigh
    869  1d0b		       8d 68 10 	      sta	DF0HI
    870  1d0e
    871  1d0e		       ad 6e 1d 	      lda	dflow+1
    872  1d11		       8d 51 10 	      sta	DF1LOW
    873  1d14		       ad 76 1d 	      lda	dfhigh+1
    874  1d17		       8d 69 10 	      sta	DF1HI
    875  1d1a
    876  1d1a		       ad 6f 1d 	      lda	dflow+2
    877  1d1d		       8d 52 10 	      sta	DF2LOW
    878  1d20		       ad 77 1d 	      lda	dfhigh+2
    879  1d23		       8d 6a 10 	      sta	DF2HI
    880  1d26
    881  1d26				   set_fetchers36		; sets just 3-6
    882  1d26		       ad 70 1d 	      lda	dflow+3
    883  1d29		       8d 53 10 	      sta	DF3LOW
    884  1d2c		       ad 78 1d 	      lda	dfhigh+3
    885  1d2f		       8d 6b 10 	      sta	DF3HI
    886  1d32
    887  1d32		       ad 71 1d 	      lda	dflow+4
    888  1d35		       8d 54 10 	      sta	DF4LOW
    889  1d38		       ad 79 1d 	      lda	dfhigh+4
    890  1d3b		       8d 6c 10 	      sta	DF4HI
    891  1d3e
    892  1d3e		       ad 72 1d 	      lda	dflow+5
    893  1d41		       8d 55 10 	      sta	DF5LOW
    894  1d44		       ad 7a 1d 	      lda	dfhigh+5
    895  1d47		       8d 6d 10 	      sta	DF5HI
    896  1d4a
    897  1d4a		       ad 73 1d 	      lda	dflow+6
    898  1d4d		       8d 56 10 	      sta	DF6LOW
    899  1d50		       ad 7b 1d 	      lda	dfhigh+6
    900  1d53		       8d 6e 10 	      sta	DF6HI
    901  1d56
    902  1d56		       60		      rts
    903  1d57
    904  1d57							;9d bad
    905  1d57							; the below isn't quite right
    906  1d57							;DF0DATA: COLUP0
    907  1d57							;DF1DATA: COLUP1
    908  1d57							;DF2DATAW: GRP0
    909  1d57							;DF3DATA: GRP1 
    910  1d57							;DF4DATA: 2lk lines until repos/HMP1
    911  1d57							;DF5DATA: low byte of repo kernels (xpos mod 15)
    912  1d57							;DF6DATA: High byte of repo kernels (x pos div 15)
    913  1d57							;DF7DATA: Programmer's stack
    914  1d57							;DF0FRACDATA: PF1L
    915  1d57							;DF1FRACDATA: PF2L
    916  1d57							;DF4FRACDATA: COLUPF
    917  1d57							;DF2FRACDATA: PF2R
    918  1d57							;DF3FRACDATA: PF2L
    919  1d57							;DF5FRACDATA: Sprite NUSIZ1/REFP1 (only during repos)
    920  1d57							;DF6FRACDATA: COLUBK
    921  1d57							;DF7FRACDATA: HMP1
    922  1d57							;DF3FLAG: kernel exit loop ?? (use flags instead?)
    923  1d57							;DF0FLAG: ENAM0
    924  1d57							;DF1FLAG: ENAM1 
    925  1d57							;DF3FLAG: ENABL 
    926  1d57
    927  1d57				   fetcher_address_table
    928  1d57				   kernello
    929  1d57		       37		      .byte.b	<kernel1
    930  1d58		       59		      .byte.b	<kernel2
    931  1d59		       7b		      .byte.b	<kernel3
    932  1d5a		       9d		      .byte.b	<kernel4
    933  1d5b		       bf		      .byte.b	<kernel5
    934  1d5c		       e1		      .byte.b	<kernel6
    935  1d5d		       25		      .byte.b	<kernel7
    936  1d5e		       47		      .byte.b	<kernel8
    937  1d5f		       69		      .byte.b	<kernel9
    938  1d60		       91		      .byte.b	<kernel10
    939  1d61		       be		      .byte.b	<kernel11
    940  1d62				   kernelhi
    941  1d62		       1b		      .byte.b	>kernel1
    942  1d63		       1b		      .byte.b	>kernel2
    943  1d64		       1b		      .byte.b	>kernel3
    944  1d65		       1b		      .byte.b	>kernel4
    945  1d66		       1b		      .byte.b	>kernel5
    946  1d67		       1b		      .byte.b	>kernel6
    947  1d68		       1c		      .byte.b	>kernel7
    948  1d69		       1c		      .byte.b	>kernel8
    949  1d6a		       1c		      .byte.b	>kernel9
    950  1d6b		       1c		      .byte.b	>kernel10
    951  1d6c		       1c		      .byte.b	>kernel11
    952  1d6d				   dflow
    953  1d6d		       08		      .byte.b	<P0COLOR
    954  1d6e		       08		      .byte.b	<P1COLOR
    955  1d6f		       08		      .byte.b	<P0GFX
    956  1d70		       08		      .byte.b	<P1GFX
    957  1d71		       2d		      .byte.b	<P1SKIP
    958  1d72		       08		      .byte.b	<JUMPTABLELO
    959  1d73		       14		      .byte.b	<JUMPTABLEHI
    960  1d74		       a5		      .byte.b	<USERSTACK
    961  1d75				   dfhigh
    962  1d75		       05		      .byte.b	(>P0COLOR) & $0F
    963  1d76		       03		      .byte.b	(>P1COLOR) & $0F
    964  1d77		       04		      .byte.b	(>P0GFX) & $0F
    965  1d78		       02		      .byte.b	(>P1GFX) & $0F
    966  1d79		       0b		      .byte.b	(>P1SKIP) & $0F
    967  1d7a		       0b		      .byte.b	(>JUMPTABLELO) & $0F
    968  1d7b		       0b		      .byte.b	(>JUMPTABLEHI) & $0F
    969  1d7c		       0d		      .byte.b	(>USERSTACK) & $0F
    970  1d7d				   dffraclow
    971  1d7d		       08		      .byte.b	<PF1L
    972  1d7e		       08		      .byte.b	<PF2L
    973  1d7f		       08		      .byte.b	<PF1R
    974  1d80		       08		      .byte.b	<PF2R
    975  1d81		       08		      .byte.b	<PFCOLS
    976  1d82		       39		      .byte.b	<NUSIZREFP
    977  1d83		       a5		      .byte.b	<BKCOLS
    978  1d84		       20		      .byte.b	<P1HMP
    979  1d85				   dffrachi
    980  1d85		       06		      .byte.b	(>PF1L) & $0F
    981  1d86		       07		      .byte.b	(>PF2L) & $0F
    982  1d87		       08		      .byte.b	(>PF1R) & $0F
    983  1d88		       09		      .byte.b	(>PF2R) & $0F
    984  1d89		       0a		      .byte.b	(>PFCOLS) & $0F
    985  1d8a		       0b		      .byte.b	(>NUSIZREFP) & $0F
    986  1d8b		       0b		      .byte.b	(>BKCOLS) & $0F
    987  1d8c		       0b		      .byte.b	(>P1HMP) & $0F
    988  1d8d				   scorepointer
    989  1d8d		       94		      .byte.b	<scoretable
    990  1d8e		       08		      .byte.b	((>scoretable) & $0f) | (((>scoretable) / 2) & $70)
    991  1d8f				   scoresetup		; pointers to digit graphics
    992  1d8f		       45		      .byte.b	<scoredata
    993  1d90		       0b		      .byte.b	(>scoredata) & $0F
    994  1d91				   Hmval		; 112 wuz first
    995  1d91		       60 50 40 30*	      .byte.b	96, 80, 64, 48, 32, 16, 1, 240
    996  1d99				   Hmval74
    997  1d99		       e0 d0 c0 b0*	      .byte.b	224, 208, 192, 176, 160, 144, 128
    998  1da0		       60 50 40 30*	      .byte.b	96, 80, 64, 48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96
    999  1db0		       50 40 30 20*	      .byte.b	80, 64, 48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80
   1000  1dc0		       40 30 20 10*	      .byte.b	64, 48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64
   1001  1dd0		       30 20 10 01*	      .byte.b	48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48
   1002  1de0		       20 10 01 f0*	      .byte.b	32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32
   1003  1df0		       10 01 f0 e0*	      .byte.b	16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16
   1004  1e00		       01 f0 e0 d0*	      .byte.b	1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16, 1
   1005  1e10		       f0 e0 d0 c0*	      .byte.b	240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16, 1, 240
   1006  1e20		       e0 d0 c0 b0*	      .byte.b	224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16, 1, 240, 224, 208, 192
   1007  1e32		       b0 a0 90 80*	      .byte.b	176,160,144,128,16,1,240,224
   1008  1e3a
   1009  1e3a
   1010  1e3a				   kernel_setup
   1011  1e3a							;--position P0, top P1, M0, M1, BL
   1012  1e3a		       a2 00		      ldx	#0	; first sprite displayed
   1013  1e3c		       b5 85		      lda	SpriteGfxIndex,x
   1014  1e3e		       aa		      tax
   1015  1e3f		       b5 90		      lda	player1x,x
   1016  1e41		       c9 a0		      cmp	#160
   1017  1e43		       90 0a		      bcc	nostorep1
   1018  1e45		       c9 d0		      cmp	#208
   1019  1e47		       b0 02		      bcs	ksadjustdown
   1020  1e49							; 160-208: minus 160
   1021  1e49							;add 160 is like minus 96
   1022  1e49							; so minus 64
   1023  1e49		       e9 3f		      sbc	#63	;cc
   1024  1e4b				   ksadjustdown
   1025  1e4b							; 209-255: add 160 
   1026  1e4b		       69 9f		      adc	#159	; cs
   1027  1e4d		       95 90		      sta	player1x,x
   1028  1e4f				   nostorep1
   1029  1e4f		       85 02		      sta	WSYNC
   1030  1e51		       a2 04		      ldx	#4
   1031  1e53		       85 81		      sta	topP1x	; cache top p1
   1032  1e55				   HorPosLoop
   1033  1e55		       b5 80		      lda	player0x,X
   1034  1e57		       38		      sec
   1035  1e58				   DivideLoop
   1036  1e58		       e9 0f		      sbc	#15
   1037  1e5a		       b0 fc		      bcs	DivideLoop
      0  1e5c					      sleep	4
      1  1e5c				   .CYCLES    SET	4
      2  1e5c
      3  1e5c				  -	      IF	.CYCLES < 2
      4  1e5c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1e5c				  -	      ERR
      6  1e5c					      ENDIF
      7  1e5c
      8  1e5c				  -	      IF	.CYCLES & 1
      9  1e5c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1e5c				  -	      nop	0
     11  1e5c				  -	      ELSE
     12  1e5c				  -	      bit	VSYNC
     13  1e5c				  -	      ENDIF
     14  1e5c				  -.CYCLES    SET	.CYCLES - 3
     15  1e5c					      ENDIF
     16  1e5c
     17  1e5c					      REPEAT	.CYCLES / 2
     18  1e5c		       ea		      nop
     17  1e5c					      REPEND
     18  1e5d		       ea		      nop
     19  1e5e					      REPEND
   1039  1e5e		       95 10		      sta	RESP0,X
   1040  1e60		       85 02		      sta	WSYNC
   1041  1e62		       ca		      dex		;2
   1042  1e63		       10 f0		      bpl	HorPosLoop	;4/5
   1043  1e65
   1044  1e65		       a4 80		      ldy	player0x	; 7
   1045  1e67		       b9 91 1d 	      lda	Hmval,y	; 11
   1046  1e6a		       85 20		      sta	HMP0	; 14
   1047  1e6c
   1048  1e6c		       a4 81		      ldy	player0x+1
   1049  1e6e		       b9 91 1d 	      lda	Hmval,y
   1050  1e71		       85 21		      sta	HMP0+1	; 24
   1051  1e73
   1052  1e73		       a4 82		      ldy	player0x+2
   1053  1e75		       b9 91 1d 	      lda	Hmval,y
   1054  1e78		       85 22		      sta	HMP0+2	; 34
   1055  1e7a
   1056  1e7a		       a4 83		      ldy	player0x+3
   1057  1e7c		       b9 91 1d 	      lda	Hmval,y
   1058  1e7f		       85 23		      sta	HMP0+3	; 44
   1059  1e81
   1060  1e81		       a4 84		      ldy	player0x+4
   1061  1e83		       b9 91 1d 	      lda	Hmval,y
   1062  1e86		       85 24		      sta	HMP0+4	; 54
   1063  1e88
   1064  1e88		       85 02		      sta	WSYNC
   1065  1e8a		       85 2a		      sta	HMOVE
   1066  1e8c
   1067  1e8c				   myrts
   1068  1e8c		       60		      rts
   1069  1e8d
   1070  1e8d
   1071  1e8d				   pfsetup
   1072  1e8d
   1073  1e8d		       84 cb		      sty	temp1
   1074  1e8f		       85 cc		      sta	temp2
   1075  1e91		       86 cd		      stx	temp3
   1076  1e93		       a2 03		      ldx	#3
   1077  1e95				   pfsetupp
   1078  1e95		       bd 7d 1d 	      lda	dffraclow,x
   1079  1e98		       9d 50 10 	      sta	DF0LOW,x
   1080  1e9b		       bd 85 1d 	      lda	dffrachi,x
   1081  1e9e		       9d 68 10 	      sta	DF0HI,x
   1082  1ea1		       a5 cc		      lda	temp2
   1083  1ea3		       8d 59 10 	      sta	PARAMETER
   1084  1ea6		       a5 cd		      lda	temp3
   1085  1ea8		       8d 59 10 	      sta	PARAMETER
   1086  1eab		       8e 59 10 	      stx	PARAMETER
   1087  1eae		       8c 59 10 	      sty	PARAMETER
   1088  1eb1		       a9 01		      LDA	#1
   1089  1eb3		       8d 5a 10 	      sta	CALLFUNCTION
   1090  1eb6		       18		      clc
   1091  1eb7		       a5 cc		      lda	temp2
   1092  1eb9		       65 cb		      adc	temp1
   1093  1ebb		       85 cc		      sta	temp2
   1094  1ebd		       a5 cd		      lda	temp3
   1095  1ebf		       69 00		      adc	#0
   1096  1ec1		       85 cd		      sta	temp3
   1097  1ec3		       ca		      dex
   1098  1ec4		       10 cf		      bpl	pfsetupp
      0  1ec6					      RETURN
      1  1ec6				  -	      ifnconst	bankswitch
      2  1ec6				  -	      rts
      3  1ec6					      else
      4  1ec6		       4c e0 df 	      jmp	BS_return
      5  1ec9					      endif
   1100  1ec9
   1101  1ec9
   1102  1ec9				   scorekernel
   1103  1ec9				  -	      ifconst	minikernel
   1104  1ec9				  -			;; disable fast fetch, call the minikernel, and re-enable fast fetch
   1105  1ec9				  -	      lda	#255
   1106  1ec9				  -	      sta	FASTFETCH
   1107  1ec9				  -	      jsr	minikernel
   1108  1ec9				  -	      lda	#0
   1109  1ec9				  -	      sta.w	FASTFETCH
   1110  1ec9					      endif
   1111  1ec9		       a6 eb		      ldx	scorecolor
   1112  1ecb		       86 06		      stx	COLUP0
   1113  1ecd		       86 07		      stx	COLUP1
   1114  1ecf		       a2 00		      ldx	#0
   1115  1ed1		       86 0e		      STx	PF1
   1116  1ed3		       86 0b		      stx	REFP0
   1117  1ed5		       86 0c		      stx	REFP1
   1118  1ed7		       86 1b		      STx	GRP0
   1119  1ed9		       86 1c		      STx	GRP1
   1120  1edb		       86 0f		      STx	PF2
   1121  1edd		       86 2b		      stx	HMCLR
   1122  1edf		       86 1d		      stx	ENAM0
   1123  1ee1		       86 1e		      stx	ENAM1
   1124  1ee3		       86 1f		      stx	ENABL
   1125  1ee5
   1126  1ee5
   1127  1ee5					      ifconst	pfscore
   1128  1ee5		       a5 c6		      lda	pfscorecolor
   1129  1ee7		       85 08		      sta	COLUPF
   1130  1ee9					      endif
   1131  1ee9
   1132  1ee9				  -	      ifconst	noscore
   1133  1ee9				  -	      ldx	#10
   1134  1ee9				  -noscoreloop
   1135  1ee9				  -	      sta	WSYNC
   1136  1ee9				  -	      dex
   1137  1ee9				  -	      bpl	noscoreloop
   1138  1ee9				  -	      rts
   1139  1ee9					      else
   1140  1ee9
   1141  1ee9		       85 2b		      sta	HMCLR
   1142  1eeb		       a2 f0		      ldx	#$f0
   1143  1eed		       86 20		      stx	HMP0
   1144  1eef
   1145  1eef							; set up fetchers 0-5 to handle score digits
   1146  1eef		       a2 45		      ldx	#<(scoredata)
   1147  1ef1		       8e 56 10 	      stx	DF6LOW
   1148  1ef4		       a2 0b		      ldx	#(>(scoredata)) & $0F
   1149  1ef6		       8e 6e 10 	      stx	DF6HI
   1150  1ef9		       a2 4d		      ldx	#<(scoredata+8)
   1151  1efb		       8e 50 10 	      stx	DF0LOW
   1152  1efe		       a2 0b		      ldx	#(>(scoredata+8)) & $0F
   1153  1f00		       8e 68 10 	      stx	DF0HI
   1154  1f03		       a2 55		      ldx	#<(scoredata+16)
   1155  1f05		       8e 51 10 	      stx	DF1LOW
   1156  1f08							; cycle 0??
   1157  1f08		       a2 0b		      ldx	#(>(scoredata+16)) & $0F
   1158  1f0a		       8e 69 10 	      stx	DF1HI
   1159  1f0d		       a2 5d		      ldx	#<(scoredata+24)
   1160  1f0f		       8e 52 10 	      stx	DF2LOW
   1161  1f12		       a2 0b		      ldx	#(>(scoredata+24)) & $0F
   1162  1f14		       8e 6a 10 	      stx	DF2HI
   1163  1f17
   1164  1f17		       85 02		      sta	WSYNC
   1165  1f19		       a2 00		      ldx	#0
   1166  1f1b		       86 1b		      STx	GRP0
   1167  1f1d		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   1168  1f1f
   1169  1f1f		       a2 65		      ldx	#<(scoredata+32)
   1170  1f21		       8e 53 10 	      stx	DF3LOW
   1171  1f24		       a2 0b		      ldx	#(>(scoredata+32)) & $0F
   1172  1f26		       8e 6b 10 	      stx	DF3HI
   1173  1f29		       a2 6d		      ldx	#<(scoredata+40)
   1174  1f2b		       8e 54 10 	      stx	DF4LOW
   1175  1f2e		       a2 0b		      ldx	#(>(scoredata+40)) & $0F
   1176  1f30		       8e 6c 10 	      stx	DF4HI
   1177  1f33
   1178  1f33		       a0 07		      LDY	#7
   1179  1f35		       a2 03		      LDx	#$03
   1180  1f37		       84 25		      STY	VDELP0
   1181  1f39		       85 10		      STA	RESP0
   1182  1f3b		       85 11		      STA	RESP1
   1183  1f3d		       84 cb		      sty	temp1
   1184  1f3f
   1185  1f3f		       86 04		      STx	NUSIZ0
   1186  1f41		       86 05		      STx	NUSIZ1
   1187  1f43		       86 26		      STx	VDELP1
   1188  1f45		       a2 75		      ldx	#<(scoredata+48)
   1189  1f47		       8e 55 10 	      stx	DF5LOW
   1190  1f4a		       a2 0b		      ldx	#(>(scoredata+48)) & $0F
   1191  1f4c		       8e 6d 10 	      stx	DF5HI
   1192  1f4f		       8d 2a 00 	      STA.w	HMOVE	; cycle 73 ?
   1193  1f52				   scoreloop
   1194  1f52		       a9 0e		      lda	#<DF6DATA	;59
   1195  1f54		       85 06		      sta	COLUP0	;62
   1196  1f56		       85 07		      sta	COLUP1	;65
   1197  1f58		       a9 09		      lda	#<DF1DATA	;75
   1198  1f5a		       85 1b		      sta	GRP0	;2
   1199  1f5c		       a9 08		      lda	#<DF0DATA	;4
   1200  1f5e		       85 1c		      sta	GRP1	;7
   1201  1f60		       a9 0b		      lda	#<DF3DATA	;9
   1202  1f62		       85 1b		      sta	GRP0	;12
   1203  1f64
   1204  1f64							; REVENG - rearranged to correct pf write timing and A register overwrite
   1205  1f64					      ifconst	pfscore
   1206  1f64		       a5 c8		      lda	pfscore1
   1207  1f66		       85 0e		      sta	PF1
   1208  1f68				  -	      else
   1209  1f68				  -	      sleep	6
   1210  1f68					      endif
      0  1f68					      sleep	5
      1  1f68				   .CYCLES    SET	5
      2  1f68
      3  1f68				  -	      IF	.CYCLES < 2
      4  1f68				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f68				  -	      ERR
      6  1f68					      ENDIF
      7  1f68
      8  1f68					      IF	.CYCLES & 1
      9  1f68					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f68		       04 00		      nop	0
     11  1f6a				  -	      ELSE
     12  1f6a				  -	      bit	VSYNC
     13  1f6a					      ENDIF
     14  1f6a				   .CYCLES    SET	.CYCLES - 3
     15  1f6a					      ENDIF
     16  1f6a
     17  1f6a					      REPEAT	.CYCLES / 2
     18  1f6a		       ea		      nop
     19  1f6b					      REPEND
   1212  1f6b		       ae 0a 10 	      ldx	DF2DATA	;16
   1213  1f6e		       ac 0d 10 	      ldy	DF5DATA	;20
   1214  1f71		       a9 0c		      lda	#<DF4DATA	;22 
   1215  1f73
   1216  1f73		       86 1c		      stx	GRP1	;40
   1217  1f75		       84 1b		      sty	GRP0	;43
   1218  1f77		       85 1c		      sta	GRP1	;46
   1219  1f79		       85 1b		      sta	GRP0	;49
   1220  1f7b					      ifconst	pfscore
   1221  1f7b		       a5 c9		      lda	pfscore2
   1222  1f7d		       85 0e		      sta	PF1
   1223  1f7f				  -	      else
   1224  1f7f				  -	      sleep	6
   1225  1f7f					      endif
   1226  1f7f							; sleep 2 ;57
      0  1f7f					      sleep	6
      1  1f7f				   .CYCLES    SET	6
      2  1f7f
      3  1f7f				  -	      IF	.CYCLES < 2
      4  1f7f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f7f				  -	      ERR
      6  1f7f					      ENDIF
      7  1f7f
      8  1f7f				  -	      IF	.CYCLES & 1
      9  1f7f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f7f				  -	      nop	0
     11  1f7f				  -	      ELSE
     12  1f7f				  -	      bit	VSYNC
     13  1f7f				  -	      ENDIF
     14  1f7f				  -.CYCLES    SET	.CYCLES - 3
     15  1f7f					      ENDIF
     16  1f7f
     17  1f7f					      REPEAT	.CYCLES / 2
     18  1f7f		       ea		      nop
     17  1f7f					      REPEND
     18  1f80		       ea		      nop
     17  1f80					      REPEND
     18  1f81		       ea		      nop
     19  1f82					      REPEND
   1228  1f82		       c6 cb		      dec	temp1	;70
   1229  1f84		       10 cc		      bpl	scoreloop	;72/73
   1230  1f86		       a2 00		      LDx	#0
   1231  1f88		       86 0e		      stx	PF1
   1232  1f8a		       86 1b		      STx	GRP0
   1233  1f8c		       86 1c		      STx	GRP1
   1234  1f8e		       86 25		      STx	VDELP0
   1235  1f90		       86 26		      STx	VDELP1	;do we need these
   1236  1f92		       86 04		      STx	NUSIZ0
   1237  1f94		       86 05		      STx	NUSIZ1
   1238  1f96
   1239  1f96		       60		      rts
   1240  1f97
   1241  1f97
   1242  1f97					      endif		; noscore
   1243  1f97				   game
   1244  1f97				   .
   1245  1f97							; 
   1246  1f97
   1247  1f97				   .
   1248  1f97							; 
   1249  1f97
   1250  1f97				   .
   1251  1f97							; 
   1252  1f97
   1253  1f97				   .L00 		;  set kernel DPC + 
   1254  1f97
   1255  1f97				   .L01 		;  set optimization inlinerand
   1256  1f97
   1257  1f97				   .L02 		;  set kernel_options collision(player1,playfield)
   1258  1f97
   1259  1f97		       00 43	   DPC_kernel_options =	CXP1FB+$40
   1260  1f97				   .L03 		;  set smartbranching on
   1261  1f97
   1262  1f97				   .L04 		;  set tv ntsc
   1263  1f97
   1264  1f97				   .
   1265  1f97							; 
   1266  1f97
   1267  1f97				   .
   1268  1f97							; 
   1269  1f97
   1270  1f97				   .L05 		;  const font	=  retroputer
   1271  1f97
   1272  1f97				   .L06 		;  const _00  =  $00
   1273  1f97
   1274  1f97				   .L07 		;  const _02  =  $02
   1275  1f97
   1276  1f97				   .L08 		;  const _04  =  $04
   1277  1f97
   1278  1f97				   .L09 		;  const _06  =  $06
   1279  1f97
   1280  1f97				   .L010		;  const _08  =  $08
   1281  1f97
   1282  1f97				   .L011		;  const _0A  =  $0A
   1283  1f97
   1284  1f97				   .L012		;  const _0C  =  $0C
   1285  1f97
   1286  1f97				   .L013		;  const _0E  =  $0E
   1287  1f97
   1288  1f97				   .L014		;  const _10  =  $10
   1289  1f97
   1290  1f97				   .L015		;  const _12  =  $12
   1291  1f97
   1292  1f97				   .L016		;  const _14  =  $14
   1293  1f97
   1294  1f97				   .L017		;  const _16  =  $16
   1295  1f97
   1296  1f97				   .L018		;  const _18  =  $18
   1297  1f97
   1298  1f97				   .L019		;  const _1A  =  $1A
   1299  1f97
   1300  1f97				   .L020		;  const _1C  =  $1C
   1301  1f97
   1302  1f97				   .L021		;  const _1E  =  $1E
   1303  1f97
   1304  1f97				   .L022		;  const _20  =  $20
   1305  1f97
   1306  1f97				   .L023		;  const _22  =  $22
   1307  1f97
   1308  1f97				   .L024		;  const _24  =  $24
   1309  1f97
   1310  1f97				   .L025		;  const _26  =  $26
   1311  1f97
   1312  1f97				   .L026		;  const _28  =  $28
   1313  1f97
   1314  1f97				   .L027		;  const _2A  =  $2A
   1315  1f97
   1316  1f97				   .L028		;  const _2C  =  $2C
   1317  1f97
   1318  1f97				   .L029		;  const _2E  =  $2E
   1319  1f97
   1320  1f97				   .L030		;  const _30  =  $30
   1321  1f97
   1322  1f97				   .L031		;  const _32  =  $32
   1323  1f97
   1324  1f97				   .L032		;  const _34  =  $34
   1325  1f97
   1326  1f97				   .L033		;  const _36  =  $36
   1327  1f97
   1328  1f97				   .L034		;  const _38  =  $38
   1329  1f97
   1330  1f97				   .L035		;  const _3A  =  $3A
   1331  1f97
   1332  1f97				   .L036		;  const _3C  =  $3C
   1333  1f97
   1334  1f97				   .L037		;  const _3E  =  $3E
   1335  1f97
   1336  1f97				   .L038		;  const _40  =  $40
   1337  1f97
   1338  1f97				   .L039		;  const _42  =  $42
   1339  1f97
   1340  1f97				   .L040		;  const _44  =  $44
   1341  1f97
   1342  1f97				   .L041		;  const _46  =  $46
   1343  1f97
   1344  1f97				   .L042		;  const _48  =  $48
   1345  1f97
   1346  1f97				   .L043		;  const _4A  =  $4A
   1347  1f97
   1348  1f97				   .L044		;  const _4C  =  $4C
   1349  1f97
   1350  1f97				   .L045		;  const _4E  =  $4E
   1351  1f97
   1352  1f97				   .L046		;  const _50  =  $50
   1353  1f97
   1354  1f97				   .L047		;  const _52  =  $52
   1355  1f97
   1356  1f97				   .L048		;  const _54  =  $54
   1357  1f97
   1358  1f97				   .L049		;  const _56  =  $56
   1359  1f97
   1360  1f97				   .L050		;  const _58  =  $58
   1361  1f97
   1362  1f97				   .L051		;  const _5A  =  $5A
   1363  1f97
   1364  1f97				   .L052		;  const _5C  =  $5C
   1365  1f97
   1366  1f97				   .L053		;  const _5E  =  $5E
   1367  1f97
   1368  1f97				   .L054		;  const _60  =  $60
   1369  1f97
   1370  1f97				   .L055		;  const _62  =  $62
   1371  1f97
   1372  1f97				   .L056		;  const _64  =  $64
   1373  1f97
   1374  1f97				   .L057		;  const _66  =  $66
   1375  1f97
   1376  1f97				   .L058		;  const _68  =  $68
   1377  1f97
   1378  1f97				   .L059		;  const _6A  =  $6A
   1379  1f97
   1380  1f97				   .L060		;  const _6C  =  $6C
   1381  1f97
   1382  1f97				   .L061		;  const _6E  =  $6E
   1383  1f97
   1384  1f97				   .L062		;  const _70  =  $70
   1385  1f97
   1386  1f97				   .L063		;  const _72  =  $72
   1387  1f97
   1388  1f97				   .L064		;  const _74  =  $74
   1389  1f97
   1390  1f97				   .L065		;  const _76  =  $76
   1391  1f97
   1392  1f97				   .L066		;  const _78  =  $78
   1393  1f97
   1394  1f97				   .L067		;  const _7A  =  $7A
   1395  1f97
   1396  1f97				   .L068		;  const _7C  =  $7C
   1397  1f97
   1398  1f97				   .L069		;  const _7E  =  $7E
   1399  1f97
   1400  1f97				   .L070		;  const _80  =  $80
   1401  1f97
   1402  1f97				   .L071		;  const _82  =  $82
   1403  1f97
   1404  1f97				   .L072		;  const _84  =  $84
   1405  1f97
   1406  1f97				   .L073		;  const _86  =  $86
   1407  1f97
   1408  1f97				   .L074		;  const _88  =  $88
   1409  1f97
   1410  1f97				   .L075		;  const _8A  =  $8A
   1411  1f97
   1412  1f97				   .L076		;  const _8C  =  $8C
   1413  1f97
   1414  1f97				   .L077		;  const _8E  =  $8E
   1415  1f97
   1416  1f97				   .L078		;  const _90  =  $90
   1417  1f97
   1418  1f97				   .L079		;  const _92  =  $92
   1419  1f97
   1420  1f97				   .L080		;  const _94  =  $94
   1421  1f97
   1422  1f97				   .L081		;  const _96  =  $96
   1423  1f97
   1424  1f97				   .L082		;  const _98  =  $98
   1425  1f97
   1426  1f97				   .L083		;  const _9A  =  $9A
   1427  1f97
   1428  1f97				   .L084		;  const _9C  =  $9C
   1429  1f97
   1430  1f97				   .L085		;  const _9E  =  $9E
   1431  1f97
   1432  1f97				   .L086		;  const _A0  =  $A0
   1433  1f97
   1434  1f97				   .L087		;  const _A2  =  $A2
   1435  1f97
   1436  1f97				   .L088		;  const _A4  =  $A4
   1437  1f97
   1438  1f97				   .L089		;  const _A6  =  $A6
   1439  1f97
   1440  1f97				   .L090		;  const _A8  =  $A8
   1441  1f97
   1442  1f97				   .L091		;  const _AA  =  $AA
   1443  1f97
   1444  1f97				   .L092		;  const _AC  =  $AC
   1445  1f97
   1446  1f97				   .L093		;  const _AE  =  $AE
   1447  1f97
   1448  1f97				   .L094		;  const _B0  =  $B0
   1449  1f97
   1450  1f97				   .L095		;  const _B2  =  $B2
   1451  1f97
   1452  1f97				   .L096		;  const _B4  =  $B4
   1453  1f97
   1454  1f97				   .L097		;  const _B6  =  $B6
   1455  1f97
   1456  1f97				   .L098		;  const _B8  =  $B8
   1457  1f97
   1458  1f97				   .L099		;  const _BA  =  $BA
   1459  1f97
   1460  1f97				   .L0100		;  const _BC  =  $BC
   1461  1f97
   1462  1f97				   .L0101		;  const _BE  =  $BE
   1463  1f97
   1464  1f97				   .L0102		;  const _C0  =  $C0
   1465  1f97
   1466  1f97				   .L0103		;  const _C2  =  $C2
   1467  1f97
   1468  1f97				   .L0104		;  const _C4  =  $C4
   1469  1f97
   1470  1f97				   .L0105		;  const _C6  =  $C6
   1471  1f97
   1472  1f97				   .L0106		;  const _C8  =  $C8
   1473  1f97
   1474  1f97				   .L0107		;  const _CA  =  $CA
   1475  1f97
   1476  1f97				   .L0108		;  const _CC  =  $CC
   1477  1f97
   1478  1f97				   .L0109		;  const _CE  =  $CE
   1479  1f97
   1480  1f97				   .L0110		;  const _D0  =  $D0
   1481  1f97
   1482  1f97				   .L0111		;  const _D2  =  $D2
   1483  1f97
   1484  1f97				   .L0112		;  const _D4  =  $D4
   1485  1f97
   1486  1f97				   .L0113		;  const _D6  =  $D6
   1487  1f97
   1488  1f97				   .L0114		;  const _D8  =  $D8
   1489  1f97
   1490  1f97				   .L0115		;  const _DA  =  $DA
   1491  1f97
   1492  1f97				   .L0116		;  const _DC  =  $DC
   1493  1f97
   1494  1f97				   .L0117		;  const _DE  =  $DE
   1495  1f97
   1496  1f97				   .L0118		;  const _E0  =  $E0
   1497  1f97
   1498  1f97				   .L0119		;  const _E2  =  $E2
   1499  1f97
   1500  1f97				   .L0120		;  const _E4  =  $E4
   1501  1f97
   1502  1f97				   .L0121		;  const _E6  =  $E6
   1503  1f97
   1504  1f97				   .L0122		;  const _E8  =  $E8
   1505  1f97
   1506  1f97				   .L0123		;  const _EA  =  $EA
   1507  1f97
   1508  1f97				   .L0124		;  const _EC  =  $EC
   1509  1f97
   1510  1f97				   .L0125		;  const _EE  =  $EE
   1511  1f97
   1512  1f97				   .L0126		;  const _F0  =  $F0
   1513  1f97
   1514  1f97				   .L0127		;  const _F2  =  $F2
   1515  1f97
   1516  1f97				   .L0128		;  const _F4  =  $F4
   1517  1f97
   1518  1f97				   .L0129		;  const _F6  =  $F6
   1519  1f97
   1520  1f97				   .L0130		;  const _F8  =  $F8
   1521  1f97
   1522  1f97				   .L0131		;  const _FA  =  $FA
   1523  1f97
   1524  1f97				   .L0132		;  const _FC  =  $FC
   1525  1f97
   1526  1f97				   .L0133		;  const _FE  =  $FE
   1527  1f97
   1528  1f97				   .
   1529  1f97							; 
   1530  1f97
   1531  1f97				   .L0134		;  goto __Bank_2 bank2
   1532  1f97
   1533  1f97		       85 81		      sta	temp7
   1534  1f99		       a9 30		      lda	#>(.__Bank_2-1)
   1535  1f9b		       48		      pha
   1536  1f9c		       a9 ed		      lda	#<(.__Bank_2-1)
   1537  1f9e		       48		      pha
   1538  1f9f		       a5 81		      lda	temp7
   1539  1fa1		       48		      pha
   1540  1fa2		       8a		      txa
   1541  1fa3		       48		      pha
   1542  1fa4		       a2 02		      ldx	#2
   1543  1fa6		       4c ee df 	      jmp	BS_jsr
   1544  1fa9				   .
   1545  1fa9							; 
   1546  1fa9
   1547  1fa9				   .L0135		;  bank 2
   1548  1fa9
   1549  1fa9					      if	ECHO1
      43 bytes of ROM space left in bank 1
   1550  1fa9					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   1551  1fa9					      endif
   1552  1fa9		       00 01	   ECHO1      =	1
   1553  1fd4					      ORG	$1FF4-bscode_length
   1554  1fd4					      RORG	$1FF4-bscode_length
   1555  1fd4		       a2 ff	   start_bank1 ldx	#$ff
   1556  1fd6					      ifconst	FASTFETCH	; using DPC+
   1557  1fd6		       8e 58 10 	      stx	FASTFETCH
   1558  1fd9					      endif
   1559  1fd9		       9a		      txs
   1560  1fda				  -	      if	bankswitch == 64
   1561  1fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   1562  1fda					      else
   1563  1fda		       a9 18		      lda	#>(start-1)
   1564  1fdc					      endif
   1565  1fdc		       48		      pha
   1566  1fdd		       a9 e3		      lda	#<(start-1)
   1567  1fdf		       48		      pha
   1568  1fe0		       48		      pha
   1569  1fe1		       8a		      txa
   1570  1fe2		       48		      pha
   1571  1fe3		       ba		      tsx
   1572  1fe4					      if	bankswitch != 64
   1573  1fe4		       b5 04		      lda	4,x	; get high byte of return address
   1574  1fe6		       2a		      rol
   1575  1fe7		       2a		      rol
   1576  1fe8		       2a		      rol
   1577  1fe9		       2a		      rol
   1578  1fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   1579  1fec		       aa		      tax
   1580  1fed		       e8		      inx
   1581  1fee				  -	      else
   1582  1fee				  -	      lda	4,x	; get high byte of return address
   1583  1fee				  -	      tay
   1584  1fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   1585  1fee				  -	      sta	4,x
   1586  1fee				  -	      tya
   1587  1fee				  -	      lsr
   1588  1fee				  -	      lsr
   1589  1fee				  -	      lsr
   1590  1fee				  -	      lsr
   1591  1fee				  -	      tax
   1592  1fee				  -	      inx
   1593  1fee					      endif
   1594  1fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   1595  1ff1		       68		      pla
   1596  1ff2		       aa		      tax
   1597  1ff3		       68		      pla
   1598  1ff4		       60		      rts
   1599  1ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   1600  1ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   1601  1ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   1602  1ff5					      endif
   1603  1ffc					      ORG	$1FFC
   1604  1ffc					      RORG	$1FFC
   1605  1ffc		       d4 1f		      .word.w	(start_bank1 & $ffff)
   1606  1ffe		       d4 1f		      .word.w	(start_bank1 & $ffff)
   1607  2000					      ORG	$2000
   1608  2000					      RORG	$3000
   1609  2000				   HMdiv
   1610  2000		       00 00 00 00*	      .byte.b	0, 0, 0, 0, 0, 0, 0
   1611  2007		       01 01 01 01*	      .byte.b	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
   1612  2017		       02 02 02 02*	      .byte.b	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3
   1613  2027		       03 03 03 03*	      .byte.b	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4
   1614  2037		       04 04 04 04*	      .byte.b	4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5
   1615  2047		       05 05 05 05*	      .byte.b	5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6
   1616  2057		       06 06 06 06*	      .byte.b	6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7
   1617  2067		       07 07 07 07*	      .byte.b	7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8
   1618  2077		       08 08 08 08*	      .byte.b	8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9
   1619  2087		       09 09 09 09*	      .byte.b	9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10
   1620  2097		       0a 0a 0a 0a*	      .byte.b	10,10,10,10,10,10,0,0,0
   1621  20a0				   .L0136		;  temp1 = temp1
   1622  20a0
   1623  20a0		       a5 cb		      LDA	temp1
   1624  20a2		       85 cb		      STA	temp1
   1625  20a4				   .__Reset
   1626  20a4							; __Reset
   1627  20a4
   1628  20a4				   .
   1629  20a4							; 
   1630  20a4
   1631  20a4				   .
   1632  20a4							; 
   1633  20a4
   1634  20a4				   .L0137		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   1635  20a4
   1636  20a4		       a9 00		      LDA	#0
   1637  20a6		       85 d1		      STA	a
   1638  20a8		       85 d2		      STA	b
   1639  20aa		       85 d3		      STA	c
   1640  20ac		       85 d4		      STA	d
   1641  20ae		       85 d5		      STA	e
   1642  20b0		       85 d6		      STA	f
   1643  20b2		       85 d7		      STA	g
   1644  20b4		       85 d8		      STA	h
   1645  20b6		       85 d9		      STA	i
   1646  20b8				   .L0138		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   1647  20b8
   1648  20b8		       a9 00		      LDA	#0
   1649  20ba		       85 da		      STA	j
   1650  20bc		       85 db		      STA	k
   1651  20be		       85 dc		      STA	l
   1652  20c0		       85 dd		      STA	m
   1653  20c2		       85 de		      STA	n
   1654  20c4		       85 df		      STA	o
   1655  20c6		       85 e0		      STA	p
   1656  20c8		       85 e1		      STA	q
   1657  20ca		       85 e2		      STA	r
   1658  20cc				   .L0139		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  y  =  0  :	z  =  0  :  var0  =  0
   1659  20cc
   1660  20cc		       a9 00		      LDA	#0
   1661  20ce		       85 e3		      STA	s
   1662  20d0		       85 e4		      STA	t
   1663  20d2		       85 e5		      STA	u
   1664  20d4		       85 e6		      STA	v
   1665  20d6		       85 e7		      STA	w
   1666  20d8		       85 e8		      STA	x
   1667  20da		       85 e9		      STA	y
   1668  20dc		       85 ea		      STA	z
   1669  20de		       85 ec		      STA	var0
   1670  20e0				   .L0140		;  var1  =  0	:  var2  =  0  :  var3	=  0  :  var4  =  0  :	var5  =  0  :  var6  =	0
   1671  20e0
   1672  20e0		       a9 00		      LDA	#0
   1673  20e2		       85 ed		      STA	var1
   1674  20e4		       85 ee		      STA	var2
   1675  20e6		       85 ef		      STA	var3
   1676  20e8		       85 f0		      STA	var4
   1677  20ea		       85 f1		      STA	var5
   1678  20ec		       85 f2		      STA	var6
   1679  20ee				   .
   1680  20ee							; 
   1681  20ee
   1682  20ee				   .__Bank_2
   1683  20ee							; __Bank_2
   1684  20ee
   1685  20ee				   .
   1686  20ee							; 
   1687  20ee
   1688  20ee				   .__Variables
   1689  20ee							; __Variables
   1690  20ee
   1691  20ee				   .
   1692  20ee							; 
   1693  20ee
   1694  20ee				   .L0141		;  const _P_Edge_Top  =  9
   1695  20ee
   1696  20ee				   .L0142		;  const _P_Edge_Bottom  =  160
   1697  20ee
   1698  20ee				   .L0143		;  const _P_Edge_Left	=  0
   1699  20ee
   1700  20ee				   .L0144		;  const _P_Edge_Right  =  150
   1701  20ee
   1702  20ee				   .L0145		;  const REdge  = 79
   1703  20ee
   1704  20ee				   .L0146		;  const LEdge  =  71
   1705  20ee
   1706  20ee				   .L0147		;  const pfscore  =  1
   1707  20ee
   1708  20ee				   .L0148		;  dim EnemyHit  =  i
   1709  20ee
   1710  20ee				   .L0149		;  dim drop  =  a
   1711  20ee
   1712  20ee				   .L0150		;  dim Moverate  = b
   1713  20ee
   1714  20ee				   .L0151		;  dim EnemySpeed  =  c
   1715  20ee
   1716  20ee				   .L0152		;  dim Points	=  d
   1717  20ee
   1718  20ee				   .L0153		;  dim frame  = f
   1719  20ee
   1720  20ee				   .L0154		;  dim Bit2_EnemyMove	= z
   1721  20ee
   1722  20ee				   .L0155		;  dim level  =  l
   1723  20ee
   1724  20ee				   .L0156		;  dim Bit1_missleOn  = z
   1725  20ee
   1726  20ee				   .L0157		;  dim HealthDrop  =  n
   1727  20ee
   1728  20ee				   .L0158		;  dim delay  =  o
   1729  20ee
   1730  20ee				   .L0159		;  dim Bit3_ShootorNot  = z
   1731  20ee
   1732  20ee				   .L0160		;  dim Househit  =  q
   1733  20ee
   1734  20ee				   .L0161		;  dim Timer  = t
   1735  20ee
   1736  20ee				   .L0162		;  dim Bit4_gameover  =  z
   1737  20ee
   1738  20ee				   .L0163		;  dim Bit6_PLayer3Direction  = z
   1739  20ee
   1740  20ee				   .L0164		;  dim Bit7_PLayer3Moving  = z
   1741  20ee
   1742  20ee				   .L0165		;  dim V1  =  h
   1743  20ee
   1744  20ee				   .L0166		;  dim Ch1_Sound  =  j
   1745  20ee
   1746  20ee				   .L0167		;  dim Ch1_Duration  =  k
   1747  20ee
   1748  20ee				   .L0168		;  dim Ch1_Counter  =	p
   1749  20ee
   1750  20ee				   .L0169		;  dim V0  =  v
   1751  20ee
   1752  20ee				   .L0170		;  dim Ch0_Sound  =  w
   1753  20ee
   1754  20ee				   .L0171		;  dim Ch0_Duration  =  x
   1755  20ee
   1756  20ee				   .L0172		;  dim Ch0_Counter  =	y
   1757  20ee
   1758  20ee				   .L0173		;  dim Bit5_hit  =  z
   1759  20ee
   1760  20ee				   .L0174		;  dim Bit0_NewLevel  =  z
   1761  20ee
   1762  20ee				   .L0175		;  dim PlayerDamage  =  m
   1763  20ee
   1764  20ee				   .L0176		;  dim gamenumber = u
   1765  20ee
   1766  20ee				   .L0177		;  dim swdebounce = v
   1767  20ee
   1768  20ee				   .L0178		;  dim PlayerHealth  =  e
   1769  20ee
   1770  20ee				   .L0179		;  dim Damage	=  var1
   1771  20ee
   1772  20ee				   .L0180		;  dim Powerup  =  var2
   1773  20ee
   1774  20ee				   .L0181		;  dim EnemyMissilerate  =  var3
   1775  20ee
   1776  20ee				   .L0182		;  dim PlayerMissileRate  =  var4
   1777  20ee
   1778  20ee				   .L0183		;  swdebounce = 0
   1779  20ee
   1780  20ee		       a9 00		      LDA	#0
   1781  20f0		       85 e6		      STA	swdebounce
   1782  20f2				   .L0184		;  gamenumber = 1
   1783  20f2
   1784  20f2		       a9 01		      LDA	#1
   1785  20f4		       85 e5		      STA	gamenumber
   1786  20f6				   .L0185		;  level  = 1
   1787  20f6
   1788  20f6		       a9 01		      LDA	#1
   1789  20f8		       85 dc		      STA	level
   1790  20fa				   .
   1791  20fa							; 
   1792  20fa
   1793  20fa				   .__titlepage
   1794  20fa							; __titlepage
   1795  20fa
   1796  20fa				   .L0186		;  delay  =  delay  + 1
   1797  20fa
   1798  20fa		       e6 df		      INC	delay
   1799  20fc				   .L0187		;  gosub __Titlesceen bank6
   1800  20fc
   1801  20fc		       85 81		      sta	temp7
   1802  20fe		       a9 31		      lda	#>(ret_point1-1)
   1803  2100		       48		      pha
   1804  2101		       a9 13		      lda	#<(ret_point1-1)
   1805  2103		       48		      pha
   1806  2104		       a9 b0		      lda	#>(.__Titlesceen-1)
   1807  2106		       48		      pha
   1808  2107		       a9 84		      lda	#<(.__Titlesceen-1)
   1809  2109		       48		      pha
   1810  210a		       a5 81		      lda	temp7
   1811  210c		       48		      pha
   1812  210d		       8a		      txa
   1813  210e		       48		      pha
   1814  210f		       a2 06		      ldx	#6
   1815  2111		       4c ee df 	      jmp	BS_jsr
   1816  2114				   ret_point1
   1817  2114				   .L0188		;  if Bit0_NewLevel{0}  &&  delay  <  60 then __TitleDelay
   1818  2114
   1819  2114		       a5 ea		      LDA	Bit0_NewLevel
   1820  2116		       4a		      LSR
   1821  2117		       90 06		      BCC	.skipL0188
   1822  2119				   .condpart0
   1823  2119		       a5 df		      LDA	delay
   1824  211b		       c9 3c		      CMP	#60
   1825  211d					      if	((* - .__TitleDelay) < 127) && ((* - .__TitleDelay) > -128)
   1826  211d		       90 11		      bcc	.__TitleDelay
   1827  211f				  -	      else
   1828  211f				  -	      bcs	.0skip__TitleDelay
   1829  211f				  -	      jmp	.__TitleDelay
   1830  211f				  -.0skip__TitleDelay
   1831  211f					      endif
   1832  211f				   .skipL0188
   1833  211f				   .L0189		;  if joy0fire  ||  switchreset then goto __Gamestart
   1834  211f
   1835  211f		       24 0c		      bit	INPT4
   1836  2121		       30 03		      BMI	.skipL0189
   1837  2123				   .condpart1
   1838  2123		       4c 2d 31 	      jmp	.condpart2
   1839  2126				   .skipL0189
   1840  2126		       a9 01		      lda	#1
   1841  2128		       2c 82 02 	      bit	SWCHB
   1842  212b		       d0 03		      BNE	.skip1OR
   1843  212d				   .condpart2
   1844  212d		       4c 33 31 	      jmp	.__Gamestart
   1845  2130
   1846  2130				   .skip1OR
   1847  2130				   .
   1848  2130							; 
   1849  2130
   1850  2130				   .
   1851  2130							; 
   1852  2130
   1853  2130				   .
   1854  2130							; 
   1855  2130
   1856  2130				   .__TitleDelay
   1857  2130							; __TitleDelay
   1858  2130
   1859  2130				   .L0190		;  goto __titlepage
   1860  2130
   1861  2130		       4c fa 30 	      jmp	.__titlepage
   1862  2133
   1863  2133				   .
   1864  2133							; 
   1865  2133
   1866  2133				   .__Gamestart
   1867  2133							; __Gamestart
   1868  2133
   1869  2133				   .L0191		;  Ch0_Counter = 0 :  Ch0_Duration = 0 :  Ch0_Sound = 0
   1870  2133
   1871  2133		       a9 00		      LDA	#0
   1872  2135		       85 e9		      STA	Ch0_Counter
   1873  2137		       85 e8		      STA	Ch0_Duration
   1874  2139		       85 e7		      STA	Ch0_Sound
   1875  213b				   .L0192		;  Ch1_Counter = 0 :  Ch1_Sound = 0 :	Ch1_Duration = 0
   1876  213b
   1877  213b		       a9 00		      LDA	#0
   1878  213d		       85 e0		      STA	Ch1_Counter
   1879  213f		       85 da		      STA	Ch1_Sound
   1880  2141		       85 db		      STA	Ch1_Duration
   1881  2143				   .L0193		;  swdebounce = 0
   1882  2143
   1883  2143		       a9 00		      LDA	#0
   1884  2145		       85 e6		      STA	swdebounce
   1885  2147				   .L0194		;  Bit4_gameover{4}  = 0
   1886  2147
   1887  2147		       a5 ea		      LDA	Bit4_gameover
   1888  2149		       29 ef		      AND	#239
   1889  214b		       85 ea		      STA	Bit4_gameover
   1890  214d				   .L0195		;  if Bit0_NewLevel{0} then goto __NextLevel
   1891  214d
   1892  214d		       a5 ea		      LDA	Bit0_NewLevel
   1893  214f		       4a		      LSR
   1894  2150		       90 03		      BCC	.skipL0195
   1895  2152				   .condpart3
   1896  2152		       4c b1 31 	      jmp	.__NextLevel
   1897  2155
   1898  2155				   .skipL0195
   1899  2155				   .L0196		;  for Timer  =  1 to 255
   1900  2155
   1901  2155		       a9 01		      LDA	#1
   1902  2157		       85 e4		      STA	Timer
   1903  2159				   .L0196forTimer
   1904  2159				   .L0197		;  next Timer
   1905  2159
   1906  2159		       a5 e4		      LDA	Timer
   1907  215b		       c9 ff		      CMP	#255
   1908  215d
   1909  215d		       e6 e4		      INC	Timer
   1910  215f					      if	((* - .L0196forTimer) < 127) && ((* - .L0196forTimer) > -128)
   1911  215f		       90 f8		      bcc	.L0196forTimer
   1912  2161				  -	      else
   1913  2161				  -	      bcs	.1skipL0196forTimer
   1914  2161				  -	      jmp	.L0196forTimer
   1915  2161				  -.1skipL0196forTimer
   1916  2161					      endif
   1917  2161				   .L0198		;  AUDV0  =  0  :  AUDV1  =  0
   1918  2161
   1919  2161		       a9 00		      LDA	#0
   1920  2163		       85 19		      STA	AUDV0
   1921  2165		       85 1a		      STA	AUDV1
   1922  2167				   .L0199		;  if switchrightb then level = 0  : EnemySpeed  = 3
   1923  2167
   1924  2167		       2c 82 02 	      bit	SWCHB
   1925  216a		       30 08		      BMI	.skipL0199
   1926  216c				   .condpart4
   1927  216c		       a9 00		      LDA	#0
   1928  216e		       85 dc		      STA	level
   1929  2170		       a9 03		      LDA	#3
   1930  2172		       85 d3		      STA	EnemySpeed
   1931  2174				   .skipL0199
   1932  2174				   .L0200		;  if !switchrightb then level  = 2  : EnemySpeed = 5
   1933  2174
   1934  2174		       2c 82 02 	      bit	SWCHB
   1935  2177		       10 08		      BPL	.skipL0200
   1936  2179				   .condpart5
   1937  2179		       a9 02		      LDA	#2
   1938  217b		       85 dc		      STA	level
   1939  217d		       a9 05		      LDA	#5
   1940  217f		       85 d3		      STA	EnemySpeed
   1941  2181				   .skipL0200
   1942  2181				   .L0201		;  EnemySpeed	= 3
   1943  2181
   1944  2181		       a9 03		      LDA	#3
   1945  2183		       85 d3		      STA	EnemySpeed
   1946  2185				   .L0202		;  dec score =  000000
   1947  2185
   1948  2185		       f8		      SED
   1949  2186		       a9 00		      LDA	#$00
   1950  2188		       85 ba		      STA	score+2
   1951  218a		       a9 00		      LDA	#$00
   1952  218c		       85 b9		      STA	score+1
   1953  218e		       a9 00		      LDA	#$00
   1954  2190		       85 b8		      STA	score
   1955  2192		       d8		      CLD
   1956  2193				   .L0203		;  Bit4_gameover{4}  = 0
   1957  2193
   1958  2193		       a5 ea		      LDA	Bit4_gameover
   1959  2195		       29 ef		      AND	#239
   1960  2197		       85 ea		      STA	Bit4_gameover
   1961  2199				   .L0204		;  V0	= 2
   1962  2199
   1963  2199		       a9 02		      LDA	#2
   1964  219b		       85 e6		      STA	V0
   1965  219d				   .L0205		;  Ch0_Duration  =  10
   1966  219d
   1967  219d		       a9 0a		      LDA	#10
   1968  219f		       85 e8		      STA	Ch0_Duration
   1969  21a1				   .L0206		;  V1	= 2
   1970  21a1
   1971  21a1		       a9 02		      LDA	#2
   1972  21a3		       85 d8		      STA	V1
   1973  21a5				   .L0207		;  Ch1_Duration  =  10
   1974  21a5
   1975  21a5		       a9 0a		      LDA	#10
   1976  21a7		       85 db		      STA	Ch1_Duration
   1977  21a9				   .L0208		;  EnemyMissilerate  = 3
   1978  21a9
   1979  21a9		       a9 03		      LDA	#3
   1980  21ab		       85 ef		      STA	EnemyMissilerate
   1981  21ad				   .L0209		;  PlayerMissileRate  =  5
   1982  21ad
   1983  21ad		       a9 05		      LDA	#5
   1984  21af		       85 f0		      STA	PlayerMissileRate
   1985  21b1				   .
   1986  21b1							; 
   1987  21b1
   1988  21b1				   .__NextLevel
   1989  21b1							; __NextLevel
   1990  21b1
   1991  21b1				   .L0210		;  gamenumber = gamenumber + 1
   1992  21b1
   1993  21b1		       e6 e5		      INC	gamenumber
   1994  21b3				   .L0211		;  Powerup  =	 ( rand & 1 ) 
   1995  21b3
   1996  21b3							; complex statement detected
   1997  21b3		       ad 00 10 	      lda	rand
   1998  21b6		       4a		      lsr
   1999  21b7				  -	      ifconst	rand16
   2000  21b7				  -	      rol	rand16
   2001  21b7					      endif
   2002  21b7		       90 02		      bcc	*+4
   2003  21b9		       49 b4		      eor	#$B4
   2004  21bb		       8d 00 10 	      sta	rand
   2005  21be				  -	      ifconst	rand16
   2006  21be				  -	      eor	rand16
   2007  21be					      endif
   2008  21be		       29 01		      AND	#1
   2009  21c0		       85 ee		      STA	Powerup
   2010  21c2				   .L0212		;  Bit0_NewLevel{0}  =  0
   2011  21c2
   2012  21c2		       a5 ea		      LDA	Bit0_NewLevel
   2013  21c4		       29 fe		      AND	#254
   2014  21c6		       85 ea		      STA	Bit0_NewLevel
   2015  21c8				   .L0213		;  pfscore2  =  %11111111
   2016  21c8
   2017  21c8		       a9 ff		      LDA	#%11111111
   2018  21ca		       85 c9		      STA	pfscore2
   2019  21cc				   .L0214		;  pfscore1  =  %11111111
   2020  21cc
   2021  21cc		       a9 ff		      LDA	#%11111111
   2022  21ce		       85 c8		      STA	pfscore1
   2023  21d0				   .L0215		;  PlayerHealth  =  80
   2024  21d0
   2025  21d0		       a9 50		      LDA	#80
   2026  21d2		       85 d5		      STA	PlayerHealth
   2027  21d4				   .L0216		;  AUDV0  =  0  :  AUDV1  =  0
   2028  21d4
   2029  21d4		       a9 00		      LDA	#0
   2030  21d6		       85 19		      STA	AUDV0
   2031  21d8		       85 1a		      STA	AUDV1
   2032  21da				   .L0217		;  Ch0_Counter = 0 :  Ch0_Duration = 0 :  Ch0_Sound = 0
   2033  21da
   2034  21da		       a9 00		      LDA	#0
   2035  21dc		       85 e9		      STA	Ch0_Counter
   2036  21de		       85 e8		      STA	Ch0_Duration
   2037  21e0		       85 e7		      STA	Ch0_Sound
   2038  21e2				   .L0218		;  Ch1_Counter = 0 :  Ch1_Sound = 0 :	Ch1_Duration = 0
   2039  21e2
   2040  21e2		       a9 00		      LDA	#0
   2041  21e4		       85 e0		      STA	Ch1_Counter
   2042  21e6		       85 da		      STA	Ch1_Sound
   2043  21e8		       85 db		      STA	Ch1_Duration
   2044  21ea				   .L0219		;  delay  =  0
   2045  21ea
   2046  21ea		       a9 00		      LDA	#0
   2047  21ec		       85 df		      STA	delay
   2048  21ee				   .L0220		;  player5x  = 200 :  player5y  = 200
   2049  21ee
   2050  21ee		       a9 c8		      LDA	#200
   2051  21f0		       85 94		      STA	player5x
   2052  21f2		       85 9e		      STA	player5y
   2053  21f4				   .L0221		;  player6x  = 200 :  player6y  = 200
   2054  21f4
   2055  21f4		       a9 c8		      LDA	#200
   2056  21f6		       85 95		      STA	player6x
   2057  21f8		       85 9f		      STA	player6y
   2058  21fa				   .L0222		;  player7x  = 200 :  player7y  = 200
   2059  21fa
   2060  21fa		       a9 c8		      LDA	#200
   2061  21fc		       85 96		      STA	player7x
   2062  21fe		       85 a0		      STA	player7y
   2063  2200				   .L0223		;  player1y  =  25 :  player1x  =  rand
   2064  2200
   2065  2200		       a9 19		      LDA	#25
   2066  2202		       85 9a		      STA	player1y
   2067  2204		       ad 00 10 	      lda	rand
   2068  2207		       4a		      lsr
   2069  2208				  -	      ifconst	rand16
   2070  2208				  -	      rol	rand16
   2071  2208					      endif
   2072  2208		       90 02		      bcc	*+4
   2073  220a		       49 b4		      eor	#$B4
   2074  220c		       8d 00 10 	      sta	rand
   2075  220f				  -	      ifconst	rand16
   2076  220f				  -	      eor	rand16
   2077  220f					      endif
   2078  220f		       85 90		      STA	player1x
   2079  2211				   .L0224		;  player2y  =  10 :  player2x  =  rand
   2080  2211
   2081  2211		       a9 0a		      LDA	#10
   2082  2213		       85 9b		      STA	player2y
   2083  2215		       ad 00 10 	      lda	rand
   2084  2218		       4a		      lsr
   2085  2219				  -	      ifconst	rand16
   2086  2219				  -	      rol	rand16
   2087  2219					      endif
   2088  2219		       90 02		      bcc	*+4
   2089  221b		       49 b4		      eor	#$B4
   2090  221d		       8d 00 10 	      sta	rand
   2091  2220				  -	      ifconst	rand16
   2092  2220				  -	      eor	rand16
   2093  2220					      endif
   2094  2220		       85 91		      STA	player2x
   2095  2222				   .L0225		;  if LEdge  <=  80 then player3y  =  15 :  player3x  = 150
   2096  2222
   2097  2222		       a9 50		      LDA	#80
   2098  2224		       c9 47		      CMP	#LEdge
   2099  2226		       90 08		      BCC	.skipL0225
   2100  2228				   .condpart6
   2101  2228		       a9 0f		      LDA	#15
   2102  222a		       85 9c		      STA	player3y
   2103  222c		       a9 96		      LDA	#150
   2104  222e		       85 92		      STA	player3x
   2105  2230				   .skipL0225
   2106  2230				   .L0226		;  if LEdge  >  80 then player3y  =  15 :  player3x  = 15
   2107  2230
   2108  2230		       a9 50		      LDA	#80
   2109  2232		       c9 47		      CMP	#LEdge
   2110  2234		       b0 06		      BCS	.skipL0226
   2111  2236				   .condpart7
   2112  2236		       a9 0f		      LDA	#15
   2113  2238		       85 9c		      STA	player3y
   2114  223a		       85 92		      STA	player3x
   2115  223c				   .skipL0226
   2116  223c				   .L0227		;  player4y  = 200
   2117  223c
   2118  223c		       a9 c8		      LDA	#200
   2119  223e		       85 9d		      STA	player4y
   2120  2240				   .L0228		;  dec level = level + 1
   2121  2240
   2122  2240		       f8		      SED
   2123  2241		       a5 dc		      LDA	level
   2124  2243		       18		      CLC
   2125  2244		       69 01		      ADC	#1
   2126  2246		       85 dc		      STA	level
   2127  2248		       d8		      CLD
   2128  2249				   .L0229		;  Bit1_missleOn{1}  =  0
   2129  2249
   2130  2249		       a5 ea		      LDA	Bit1_missleOn
   2131  224b		       29 fd		      AND	#253
   2132  224d		       85 ea		      STA	Bit1_missleOn
   2133  224f				   .L0230		;  Househit = 1
   2134  224f
   2135  224f		       a9 01		      LDA	#1
   2136  2251		       85 e1		      STA	Househit
   2137  2253				   .L0231		;  Bit2_EnemyMove{2} = 0
   2138  2253
   2139  2253		       a5 ea		      LDA	Bit2_EnemyMove
   2140  2255		       29 fb		      AND	#251
   2141  2257		       85 ea		      STA	Bit2_EnemyMove
   2142  2259				   .L0232		;  if level  <  4 then EnemySpeed = EnemySpeed + 1
   2143  2259
   2144  2259		       a5 dc		      LDA	level
   2145  225b		       c9 04		      CMP	#4
   2146  225d		       b0 02		      BCS	.skipL0232
   2147  225f				   .condpart8
   2148  225f		       e6 d3		      INC	EnemySpeed
   2149  2261				   .skipL0232
   2150  2261				   .L0233		;  PlayerDamage = 0
   2151  2261
   2152  2261		       a9 00		      LDA	#0
   2153  2263		       85 dd		      STA	PlayerDamage
   2154  2265				   .L0234		;  frame = 0
   2155  2265
   2156  2265		       a9 00		      LDA	#0
   2157  2267		       85 d6		      STA	frame
   2158  2269				   .L0235		;  gosub __Playfield1 bank3
   2159  2269
   2160  2269		       85 81		      sta	temp7
   2161  226b		       a9 32		      lda	#>(ret_point2-1)
   2162  226d		       48		      pha
   2163  226e		       a9 80		      lda	#<(ret_point2-1)
   2164  2270		       48		      pha
   2165  2271		       a9 50		      lda	#>(.__Playfield1-1)
   2166  2273		       48		      pha
   2167  2274		       a9 84		      lda	#<(.__Playfield1-1)
   2168  2276		       48		      pha
   2169  2277		       a5 81		      lda	temp7
   2170  2279		       48		      pha
   2171  227a		       8a		      txa
   2172  227b		       48		      pha
   2173  227c		       a2 03		      ldx	#3
   2174  227e		       4c ee df 	      jmp	BS_jsr
   2175  2281				   ret_point2
   2176  2281				   .L0236		;  Bit5_hit{5}  = 0
   2177  2281
   2178  2281		       a5 ea		      LDA	Bit5_hit
   2179  2283		       29 df		      AND	#223
   2180  2285		       85 ea		      STA	Bit5_hit
   2181  2287				   .L0237		;  EnemyMissilerate  =  EnemyMissilerate  + 1
   2182  2287
   2183  2287		       e6 ef		      INC	EnemyMissilerate
   2184  2289				   .L0238		;  if EnemyMissilerate  >  5 then EnemyMissilerate  = 5
   2185  2289
   2186  2289		       a9 05		      LDA	#5
   2187  228b		       c5 ef		      CMP	EnemyMissilerate
   2188  228d		       b0 04		      BCS	.skipL0238
   2189  228f				   .condpart9
   2190  228f		       a9 05		      LDA	#5
   2191  2291		       85 ef		      STA	EnemyMissilerate
   2192  2293				   .skipL0238
   2193  2293				   .
   2194  2293							; 
   2195  2293
   2196  2293				   .
   2197  2293							; 
   2198  2293
   2199  2293				   .
   2200  2293							; 
   2201  2293
   2202  2293				   .
   2203  2293							; 
   2204  2293
   2205  2293				   .__GameVar
   2206  2293							; __GameVar
   2207  2293
   2208  2293				   .L0239		;  PlayerHealth  =  80
   2209  2293
   2210  2293		       a9 50		      LDA	#80
   2211  2295		       85 d5		      STA	PlayerHealth
   2212  2297				   .L0240		;  player0x  =  75
   2213  2297
   2214  2297		       a9 4b		      LDA	#75
   2215  2299		       85 80		      STA	player0x
   2216  229b				   .L0241		;  player0y  =  160
   2217  229b
   2218  229b		       a9 a0		      LDA	#160
   2219  229d		       85 99		      STA	player0y
   2220  229f				   .L0242		;  missile0x  =  200  :  missile0y  =	200
   2221  229f
   2222  229f		       a9 c8		      LDA	#200
   2223  22a1		       85 82		      STA	missile0x
   2224  22a3		       85 bf		      STA	missile0y
   2225  22a5				   .L0243		;  missile0height  =  12
   2226  22a5
   2227  22a5		       a9 0c		      LDA	#12
   2228  22a7		       85 c2		      STA	missile0height
   2229  22a9				   .L0244		;  missile1x  =  200  :  missile1y  =	200
   2230  22a9
   2231  22a9		       a9 c8		      LDA	#200
   2232  22ab		       85 83		      STA	missile1x
   2233  22ad		       85 c0		      STA	missile1y
   2234  22af				   .L0245		;  missile1height  =  8
   2235  22af
   2236  22af		       a9 08		      LDA	#8
   2237  22b1		       85 c3		      STA	missile1height
   2238  22b3				   .L0246		;  Bit1_missleOn{1} = 0
   2239  22b3
   2240  22b3		       a5 ea		      LDA	Bit1_missleOn
   2241  22b5		       29 fd		      AND	#253
   2242  22b7		       85 ea		      STA	Bit1_missleOn
   2243  22b9				   .L0247		;  drop  = 0
   2244  22b9
   2245  22b9		       a9 00		      LDA	#0
   2246  22bb		       85 d1		      STA	drop
   2247  22bd				   .
   2248  22bd							; 
   2249  22bd
   2250  22bd				   .L0248		;  CTRLPF = $21
   2251  22bd
   2252  22bd		       a9 21		      LDA	#$21
   2253  22bf		       85 0a		      STA	CTRLPF
   2254  22c1				   .L0249		;  EnemyHit  =  0
   2255  22c1
   2256  22c1		       a9 00		      LDA	#0
   2257  22c3		       85 d9		      STA	EnemyHit
   2258  22c5				   .L0250		;  Bit6_PLayer3Direction{6} = 0
   2259  22c5
   2260  22c5		       a5 ea		      LDA	Bit6_PLayer3Direction
   2261  22c7		       29 bf		      AND	#191
   2262  22c9		       85 ea		      STA	Bit6_PLayer3Direction
   2263  22cb				   .
   2264  22cb							; 
   2265  22cb
   2266  22cb				   .__Main_Loop
   2267  22cb							; __Main_Loop
   2268  22cb
   2269  22cb				   .L0251		;  bkcolors:
   2270  22cb
   2271  22cb		       a9 a5		      LDA	#<BKCOLS
   2272  22cd		       8d 50 10 	      STA	DF0LOW
   2273  22d0		       a9 0b		      LDA	#(>BKCOLS) & $0F
   2274  22d2		       8d 68 10 	      STA	DF0HI
   2275  22d5		       a9 a8		      LDA	#<backgroundcolorL0251
   2276  22d7		       8d 59 10 	      STA	PARAMETER
   2277  22da		       a9 61		      LDA	#((>backgroundcolorL0251) & $0f) | (((>backgroundcolorL0251) / 2) & $70)
   2278  22dc		       8d 59 10 	      STA	PARAMETER
   2279  22df		       a9 00		      LDA	#0
   2280  22e1		       8d 59 10 	      STA	PARAMETER
   2281  22e4		       a9 58		      LDA	#88
   2282  22e6		       8d 59 10 	      STA	PARAMETER
   2283  22e9		       a9 01		      LDA	#1
   2284  22eb		       8d 5a 10 	      STA	CALLFUNCTION
   2285  22ee				   .
   2286  22ee							; 
   2287  22ee
   2288  22ee				   .L0252		;  gosub __GameSettings bank5
   2289  22ee
   2290  22ee		       85 81		      sta	temp7
   2291  22f0		       a9 33		      lda	#>(ret_point3-1)
   2292  22f2		       48		      pha
   2293  22f3		       a9 05		      lda	#<(ret_point3-1)
   2294  22f5		       48		      pha
   2295  22f6		       a9 90		      lda	#>(.__GameSettings-1)
   2296  22f8		       48		      pha
   2297  22f9		       a9 84		      lda	#<(.__GameSettings-1)
   2298  22fb		       48		      pha
   2299  22fc		       a5 81		      lda	temp7
   2300  22fe		       48		      pha
   2301  22ff		       8a		      txa
   2302  2300		       48		      pha
   2303  2301		       a2 05		      ldx	#5
   2304  2303		       4c ee df 	      jmp	BS_jsr
   2305  2306				   ret_point3
   2306  2306				   .
   2307  2306							; 
   2308  2306
   2309  2306				   .
   2310  2306							; 
   2311  2306
   2312  2306				   .
   2313  2306							; 
   2314  2306
   2315  2306				   .
   2316  2306							; 
   2317  2306
   2318  2306				   .
   2319  2306							; 
   2320  2306
   2321  2306				   .__Movement
   2322  2306							; __Movement
   2323  2306
   2324  2306				   .L0253		;  Moverate = Moverate  + 1
   2325  2306
   2326  2306		       e6 d2		      INC	Moverate
   2327  2308				   .
   2328  2308							; 
   2329  2308
   2330  2308				   .__HealthDrop
   2331  2308							; __HealthDrop
   2332  2308
   2333  2308				   .L0254		;  if HealthDrop  >  4  &&  !Bit2_EnemyMove{2} then if player4y  >  190 then player4y	=  5 : player4x  =   ( rand + 44 )  / 2  +  player1x / 2  :  Bit2_EnemyMove{2} = 1
   2334  2308
   2335  2308		       a9 04		      LDA	#4
   2336  230a		       c5 de		      CMP	HealthDrop
   2337  230c		       b0 31		      BCS	.skipL0254
   2338  230e				   .condpart10
   2339  230e		       a5 ea		      LDA	Bit2_EnemyMove
   2340  2310		       29 04		      AND	#4
   2341  2312		       d0 2b		      BNE	.skip10then
   2342  2314				   .condpart11
   2343  2314		       a9 be		      LDA	#190
   2344  2316		       c5 9d		      CMP	player4y
   2345  2318		       b0 25		      BCS	.skip11then
   2346  231a				   .condpart12
   2347  231a		       a9 05		      LDA	#5
   2348  231c		       85 9d		      STA	player4y
   2349  231e							; complex statement detected
   2350  231e		       ad 00 10 	      lda	rand
   2351  2321		       4a		      lsr
   2352  2322				  -	      ifconst	rand16
   2353  2322				  -	      rol	rand16
   2354  2322					      endif
   2355  2322		       90 02		      bcc	*+4
   2356  2324		       49 b4		      eor	#$B4
   2357  2326		       8d 00 10 	      sta	rand
   2358  2329				  -	      ifconst	rand16
   2359  2329				  -	      eor	rand16
   2360  2329					      endif
   2361  2329		       18		      CLC
   2362  232a		       69 2c		      ADC	#44
   2363  232c		       4a		      lsr
   2364  232d		       48		      PHA
   2365  232e		       a5 90		      LDA	player1x
   2366  2330		       4a		      lsr
   2367  2331		       ba		      TSX
   2368  2332		       e8		      INX
   2369  2333		       9a		      TXS
   2370  2334		       18		      CLC
   2371  2335		       75 00		      ADC	$00,x
   2372  2337		       85 93		      STA	player4x
   2373  2339		       a5 ea		      LDA	Bit2_EnemyMove
   2374  233b		       09 04		      ORA	#4
   2375  233d		       85 ea		      STA	Bit2_EnemyMove
   2376  233f				   .skip11then
   2377  233f				   .skip10then
   2378  233f				   .skipL0254
   2379  233f				   .L0255		;  if player4x  >  player1x  -  5  &&	player4x  <  player1x  +  5 then player4x  =   ( rand & 150 ) 
   2380  233f
   2381  233f							; complex condition detected
   2382  233f		       a5 90		      LDA	player1x
   2383  2341		       38		      SEC
   2384  2342		       e9 05		      SBC	#5
   2385  2344							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   2386  2344		       c5 93		      CMP	player4x
   2387  2346		       b0 1d		      BCS	.skipL0255
   2388  2348				   .condpart13
   2389  2348							; complex condition detected
   2390  2348		       a5 90		      LDA	player1x
   2391  234a		       18		      CLC
   2392  234b		       69 05		      ADC	#5
   2393  234d		       48		      PHA
   2394  234e		       ba		      TSX
   2395  234f		       68		      PLA
   2396  2350		       a5 93		      LDA	player4x
   2397  2352		       d5 01		      CMP	1,x
   2398  2354		       b0 0f		      BCS	.skip13then
   2399  2356				   .condpart14
   2400  2356							; complex statement detected
   2401  2356		       ad 00 10 	      lda	rand
   2402  2359		       4a		      lsr
   2403  235a				  -	      ifconst	rand16
   2404  235a				  -	      rol	rand16
   2405  235a					      endif
   2406  235a		       90 02		      bcc	*+4
   2407  235c		       49 b4		      eor	#$B4
   2408  235e		       8d 00 10 	      sta	rand
   2409  2361				  -	      ifconst	rand16
   2410  2361				  -	      eor	rand16
   2411  2361					      endif
   2412  2361		       29 96		      AND	#150
   2413  2363		       85 93		      STA	player4x
   2414  2365				   .skip13then
   2415  2365				   .skipL0255
   2416  2365				   .L0256		;  if player4x  >  player2x  -  5  &&	player4x  <  player2x  +  5 then player4x  =   ( rand & 150 ) 
   2417  2365
   2418  2365							; complex condition detected
   2419  2365		       a5 91		      LDA	player2x
   2420  2367		       38		      SEC
   2421  2368		       e9 05		      SBC	#5
   2422  236a							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   2423  236a		       c5 93		      CMP	player4x
   2424  236c		       b0 1d		      BCS	.skipL0256
   2425  236e				   .condpart15
   2426  236e							; complex condition detected
   2427  236e		       a5 91		      LDA	player2x
   2428  2370		       18		      CLC
   2429  2371		       69 05		      ADC	#5
   2430  2373		       48		      PHA
   2431  2374		       ba		      TSX
   2432  2375		       68		      PLA
   2433  2376		       a5 93		      LDA	player4x
   2434  2378		       d5 01		      CMP	1,x
   2435  237a		       b0 0f		      BCS	.skip15then
   2436  237c				   .condpart16
   2437  237c							; complex statement detected
   2438  237c		       ad 00 10 	      lda	rand
   2439  237f		       4a		      lsr
   2440  2380				  -	      ifconst	rand16
   2441  2380				  -	      rol	rand16
   2442  2380					      endif
   2443  2380		       90 02		      bcc	*+4
   2444  2382		       49 b4		      eor	#$B4
   2445  2384		       8d 00 10 	      sta	rand
   2446  2387				  -	      ifconst	rand16
   2447  2387				  -	      eor	rand16
   2448  2387					      endif
   2449  2387		       29 96		      AND	#150
   2450  2389		       85 93		      STA	player4x
   2451  238b				   .skip15then
   2452  238b				   .skipL0256
   2453  238b				   .L0257		;  if HealthDrop  >  4  &&  player4y  > 190 then Bit2_EnemyMove{2} = 0
   2454  238b
   2455  238b		       a9 04		      LDA	#4
   2456  238d		       c5 de		      CMP	HealthDrop
   2457  238f		       b0 0c		      BCS	.skipL0257
   2458  2391				   .condpart17
   2459  2391		       a9 be		      LDA	#190
   2460  2393		       c5 9d		      CMP	player4y
   2461  2395		       b0 06		      BCS	.skip17then
   2462  2397				   .condpart18
   2463  2397		       a5 ea		      LDA	Bit2_EnemyMove
   2464  2399		       29 fb		      AND	#251
   2465  239b		       85 ea		      STA	Bit2_EnemyMove
   2466  239d				   .skip17then
   2467  239d				   .skipL0257
   2468  239d				   .L0258		;  if Bit2_EnemyMove{2}  &&  player4y > 170 then HealthDrop = 0 :  Bit2_EnemyMove{2} = 0  :  player4y	=  200 : 
   2469  239d
   2470  239d		       a5 ea		      LDA	Bit2_EnemyMove
   2471  239f		       29 04		      AND	#4
   2472  23a1		       f0 14		      BEQ	.skipL0258
   2473  23a3				   .condpart19
   2474  23a3		       a9 aa		      LDA	#170
   2475  23a5		       c5 9d		      CMP	player4y
   2476  23a7		       b0 0e		      BCS	.skip19then
   2477  23a9				   .condpart20
   2478  23a9		       a9 00		      LDA	#0
   2479  23ab		       85 de		      STA	HealthDrop
   2480  23ad		       a5 ea		      LDA	Bit2_EnemyMove
   2481  23af		       29 fb		      AND	#251
   2482  23b1		       85 ea		      STA	Bit2_EnemyMove
   2483  23b3		       a9 c8		      LDA	#200
   2484  23b5		       85 9d		      STA	player4y
   2485  23b7				   .skip19then
   2486  23b7				   .skipL0258
   2487  23b7				   .L0259		;  if player4x  <  5 then player4x = 5
   2488  23b7
   2489  23b7		       a5 93		      LDA	player4x
   2490  23b9		       c9 05		      CMP	#5
   2491  23bb		       b0 04		      BCS	.skipL0259
   2492  23bd				   .condpart21
   2493  23bd		       a9 05		      LDA	#5
   2494  23bf		       85 93		      STA	player4x
   2495  23c1				   .skipL0259
   2496  23c1				   .L0260		;  if player4x  >  150 then player4x  = 150
   2497  23c1
   2498  23c1		       a9 96		      LDA	#150
   2499  23c3		       c5 93		      CMP	player4x
   2500  23c5		       b0 04		      BCS	.skipL0260
   2501  23c7				   .condpart22
   2502  23c7		       a9 96		      LDA	#150
   2503  23c9		       85 93		      STA	player4x
   2504  23cb				   .skipL0260
   2505  23cb				   .L0261		;  if Moverate  <  7 then goto __Player1Move
   2506  23cb
   2507  23cb		       a5 d2		      LDA	Moverate
   2508  23cd		       c9 07		      CMP	#7
   2509  23cf		       b0 03		      BCS	.skipL0261
   2510  23d1				   .condpart23
   2511  23d1		       4c e7 33 	      jmp	.__Player1Move
   2512  23d4
   2513  23d4				   .skipL0261
   2514  23d4				   .L0262		;  scorecolor = scorecolor + 1
   2515  23d4
   2516  23d4		       e6 eb		      INC	scorecolor
   2517  23d6				   .L0263		;  if Bit2_EnemyMove{2} then player4y	=  player4y  + 2  :  HealthDrop  =  0
   2518  23d6
   2519  23d6		       a5 ea		      LDA	Bit2_EnemyMove
   2520  23d8		       29 04		      AND	#4
   2521  23da		       f0 0b		      BEQ	.skipL0263
   2522  23dc				   .condpart24
   2523  23dc		       a5 9d		      LDA	player4y
   2524  23de		       18		      CLC
   2525  23df		       69 02		      ADC	#2
   2526  23e1		       85 9d		      STA	player4y
   2527  23e3		       a9 00		      LDA	#0
   2528  23e5		       85 de		      STA	HealthDrop
   2529  23e7				   .skipL0263
   2530  23e7				   .
   2531  23e7							; 
   2532  23e7
   2533  23e7				   .__Player1Move
   2534  23e7							; __Player1Move
   2535  23e7
   2536  23e7				   .L0264		;  if drop  >=  48  &&  player1y  =  200 then goto __Player2Move
   2537  23e7
   2538  23e7		       a5 d1		      LDA	drop
   2539  23e9		       c9 30		      CMP	#48
   2540  23eb		       90 09		      BCC	.skipL0264
   2541  23ed				   .condpart25
   2542  23ed		       a5 9a		      LDA	player1y
   2543  23ef		       c9 c8		      CMP	#200
   2544  23f1		       d0 03		      BNE	.skip25then
   2545  23f3				   .condpart26
   2546  23f3		       4c cd 34 	      jmp	.__Player2Move
   2547  23f6
   2548  23f6				   .skip25then
   2549  23f6				   .skipL0264
   2550  23f6				   .L0265		;  if player1y  > 190	&&  EnemyHit  <>  1 then player1y  =   ( rand & 5 )  + 1 :  player1x  =   ( rand & 150 )   :  HealthDrop = HealthDrop  + 1  :  drop  =	drop  + 1
   2551  23f6
   2552  23f6		       a9 be		      LDA	#190
   2553  23f8		       c5 9a		      CMP	player1y
   2554  23fa		       b0 2b		      BCS	.skipL0265
   2555  23fc				   .condpart27
   2556  23fc		       a5 d9		      LDA	EnemyHit
   2557  23fe		       c9 01		      CMP	#1
   2558  2400		       f0 25		      BEQ	.skip27then
   2559  2402				   .condpart28
   2560  2402							; complex statement detected
   2561  2402		       ad 00 10 	      lda	rand
   2562  2405		       4a		      lsr
   2563  2406				  -	      ifconst	rand16
   2564  2406				  -	      rol	rand16
   2565  2406					      endif
   2566  2406		       90 02		      bcc	*+4
   2567  2408		       49 b4		      eor	#$B4
   2568  240a		       8d 00 10 	      sta	rand
   2569  240d				  -	      ifconst	rand16
   2570  240d				  -	      eor	rand16
   2571  240d					      endif
   2572  240d		       29 05		      AND	#5
   2573  240f		       18		      CLC
   2574  2410		       69 01		      ADC	#1
   2575  2412		       85 9a		      STA	player1y
   2576  2414							; complex statement detected
   2577  2414		       ad 00 10 	      lda	rand
   2578  2417		       4a		      lsr
   2579  2418				  -	      ifconst	rand16
   2580  2418				  -	      rol	rand16
   2581  2418					      endif
   2582  2418		       90 02		      bcc	*+4
   2583  241a		       49 b4		      eor	#$B4
   2584  241c		       8d 00 10 	      sta	rand
   2585  241f				  -	      ifconst	rand16
   2586  241f				  -	      eor	rand16
   2587  241f					      endif
   2588  241f		       29 96		      AND	#150
   2589  2421		       85 90		      STA	player1x
   2590  2423		       e6 de		      INC	HealthDrop
   2591  2425		       e6 d1		      INC	drop
   2592  2427				   .skip27then
   2593  2427				   .skipL0265
   2594  2427				   .L0266		;  if player1x  >  player2x  -  5  &&	player1x  <  player2x  +  5 then player1x  =   ( rand & 150 ) 
   2595  2427
   2596  2427							; complex condition detected
   2597  2427		       a5 91		      LDA	player2x
   2598  2429		       38		      SEC
   2599  242a		       e9 05		      SBC	#5
   2600  242c							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   2601  242c		       c5 90		      CMP	player1x
   2602  242e		       b0 1d		      BCS	.skipL0266
   2603  2430				   .condpart29
   2604  2430							; complex condition detected
   2605  2430		       a5 91		      LDA	player2x
   2606  2432		       18		      CLC
   2607  2433		       69 05		      ADC	#5
   2608  2435		       48		      PHA
   2609  2436		       ba		      TSX
   2610  2437		       68		      PLA
   2611  2438		       a5 90		      LDA	player1x
   2612  243a		       d5 01		      CMP	1,x
   2613  243c		       b0 0f		      BCS	.skip29then
   2614  243e				   .condpart30
   2615  243e							; complex statement detected
   2616  243e		       ad 00 10 	      lda	rand
   2617  2441		       4a		      lsr
   2618  2442				  -	      ifconst	rand16
   2619  2442				  -	      rol	rand16
   2620  2442					      endif
   2621  2442		       90 02		      bcc	*+4
   2622  2444		       49 b4		      eor	#$B4
   2623  2446		       8d 00 10 	      sta	rand
   2624  2449				  -	      ifconst	rand16
   2625  2449				  -	      eor	rand16
   2626  2449					      endif
   2627  2449		       29 96		      AND	#150
   2628  244b		       85 90		      STA	player1x
   2629  244d				   .skip29then
   2630  244d				   .skipL0266
   2631  244d				   .L0267		;  if player1y  >=  164 then goto __Player1SideMove
   2632  244d
   2633  244d		       a5 9a		      LDA	player1y
   2634  244f		       c9 a4		      CMP	#164
   2635  2451		       90 03		      BCC	.skipL0267
   2636  2453				   .condpart31
   2637  2453		       4c 86 34 	      jmp	.__Player1SideMove
   2638  2456
   2639  2456				   .skipL0267
   2640  2456				   .L0268		;  if player1x  <  8 then player1x  = 8
   2641  2456
   2642  2456		       a5 90		      LDA	player1x
   2643  2458		       c9 08		      CMP	#8
   2644  245a		       b0 04		      BCS	.skipL0268
   2645  245c				   .condpart32
   2646  245c		       a9 08		      LDA	#8
   2647  245e		       85 90		      STA	player1x
   2648  2460				   .skipL0268
   2649  2460				   .L0269		;  if player1x  >  150 then player1x  = 150
   2650  2460
   2651  2460		       a9 96		      LDA	#150
   2652  2462		       c5 90		      CMP	player1x
   2653  2464		       b0 04		      BCS	.skipL0269
   2654  2466				   .condpart33
   2655  2466		       a9 96		      LDA	#150
   2656  2468		       85 90		      STA	player1x
   2657  246a				   .skipL0269
   2658  246a				   .L0270		;  if Moverate  <  8 then goto __CheckCollision
   2659  246a
   2660  246a		       a5 d2		      LDA	Moverate
   2661  246c		       c9 08		      CMP	#8
   2662  246e		       b0 03		      BCS	.skipL0270
   2663  2470				   .condpart34
   2664  2470		       4c c2 37 	      jmp	.__CheckCollision
   2665  2473
   2666  2473				   .skipL0270
   2667  2473				   .L0271		;  if EnemyHit  =  1 then goto __Player2Move
   2668  2473
   2669  2473		       a5 d9		      LDA	EnemyHit
   2670  2475		       c9 01		      CMP	#1
   2671  2477		       d0 03		      BNE	.skipL0271
   2672  2479				   .condpart35
   2673  2479		       4c cd 34 	      jmp	.__Player2Move
   2674  247c
   2675  247c				   .skipL0271
   2676  247c				   .L0272		;  player1y  =  player1y  +  EnemySpeed
   2677  247c
   2678  247c		       a5 9a		      LDA	player1y
   2679  247e		       18		      CLC
   2680  247f		       65 d3		      ADC	EnemySpeed
   2681  2481		       85 9a		      STA	player1y
   2682  2483				   .L0273		;  goto __Player2Move
   2683  2483
   2684  2483		       4c cd 34 	      jmp	.__Player2Move
   2685  2486
   2686  2486				   .
   2687  2486							; 
   2688  2486
   2689  2486				   .__Player1SideMove
   2690  2486							; __Player1SideMove
   2691  2486
   2692  2486				   .L0274		;  player1y  = 165
   2693  2486
   2694  2486		       a9 a5		      LDA	#165
   2695  2488		       85 9a		      STA	player1y
   2696  248a				   .L0275		;  if player1x  <  REdge  &&  player1x  >  LEdge then Househit = Househit + 1 :  player1y = 200  :  goto __Player2Move : Moverate = Moverate - 1
   2697  248a
   2698  248a		       a5 90		      LDA	player1x
   2699  248c		       c9 4f		      CMP	#REdge
   2700  248e		       b0 11		      BCS	.skipL0275
   2701  2490				   .condpart36
   2702  2490		       a9 47		      LDA	#LEdge
   2703  2492		       c5 90		      CMP	player1x
   2704  2494		       b0 0b		      BCS	.skip36then
   2705  2496				   .condpart37
   2706  2496		       e6 e1		      INC	Househit
   2707  2498		       a9 c8		      LDA	#200
   2708  249a		       85 9a		      STA	player1y
   2709  249c		       4c cd 34 	      jmp	.__Player2Move
   2710  249f		       c6 d2		      DEC	Moverate
   2711  24a1				   .skip36then
   2712  24a1				   .skipL0275
   2713  24a1				   .L0276		;  if Moverate  <  8 then goto __CheckCollision
   2714  24a1
   2715  24a1		       a5 d2		      LDA	Moverate
   2716  24a3		       c9 08		      CMP	#8
   2717  24a5		       b0 03		      BCS	.skipL0276
   2718  24a7				   .condpart38
   2719  24a7		       4c c2 37 	      jmp	.__CheckCollision
   2720  24aa
   2721  24aa				   .skipL0276
   2722  24aa				   .L0277		;  if EnemyHit  =  1 then goto __Player2Move
   2723  24aa
   2724  24aa		       a5 d9		      LDA	EnemyHit
   2725  24ac		       c9 01		      CMP	#1
   2726  24ae		       d0 03		      BNE	.skipL0277
   2727  24b0				   .condpart39
   2728  24b0		       4c cd 34 	      jmp	.__Player2Move
   2729  24b3
   2730  24b3				   .skipL0277
   2731  24b3				   .L0278		;  if player1x  >  REdge then player1x  =  player1x  -  EnemySpeed
   2732  24b3
   2733  24b3		       a9 4f		      LDA	#REdge
   2734  24b5		       c5 90		      CMP	player1x
   2735  24b7		       b0 07		      BCS	.skipL0278
   2736  24b9				   .condpart40
   2737  24b9		       a5 90		      LDA	player1x
   2738  24bb		       38		      SEC
   2739  24bc		       e5 d3		      SBC	EnemySpeed
   2740  24be		       85 90		      STA	player1x
   2741  24c0				   .skipL0278
   2742  24c0				   .L0279		;  if player1x  <  LEdge then player1x  =  player1x  +  EnemySpeed
   2743  24c0
   2744  24c0		       a5 90		      LDA	player1x
   2745  24c2		       c9 47		      CMP	#LEdge
   2746  24c4		       b0 07		      BCS	.skipL0279
   2747  24c6				   .condpart41
   2748  24c6		       a5 90		      LDA	player1x
   2749  24c8		       18		      CLC
   2750  24c9		       65 d3		      ADC	EnemySpeed
   2751  24cb		       85 90		      STA	player1x
   2752  24cd				   .skipL0279
   2753  24cd				   .
   2754  24cd							; 
   2755  24cd
   2756  24cd				   .__Player2Move
   2757  24cd							; __Player2Move
   2758  24cd
   2759  24cd				   .L0280		;  if drop  >=  48  &&  player2y  =  200 then goto __Player3Move
   2760  24cd
   2761  24cd		       a5 d1		      LDA	drop
   2762  24cf		       c9 30		      CMP	#48
   2763  24d1		       90 09		      BCC	.skipL0280
   2764  24d3				   .condpart42
   2765  24d3		       a5 9b		      LDA	player2y
   2766  24d5		       c9 c8		      CMP	#200
   2767  24d7		       d0 03		      BNE	.skip42then
   2768  24d9				   .condpart43
   2769  24d9		       4c c6 35 	      jmp	.__Player3Move
   2770  24dc
   2771  24dc				   .skip42then
   2772  24dc				   .skipL0280
   2773  24dc				   .L0281		;  if player2y  > 165	&&  EnemyHit  <>  2 then player2y  =   ( rand & 10 )  + 1 :  player2x  =   ( rand + 150 )   :  drop  =	drop  + 1
   2774  24dc
   2775  24dc		       a9 a5		      LDA	#165
   2776  24de		       c5 9b		      CMP	player2y
   2777  24e0		       b0 2a		      BCS	.skipL0281
   2778  24e2				   .condpart44
   2779  24e2		       a5 d9		      LDA	EnemyHit
   2780  24e4		       c9 02		      CMP	#2
   2781  24e6		       f0 24		      BEQ	.skip44then
   2782  24e8				   .condpart45
   2783  24e8							; complex statement detected
   2784  24e8		       ad 00 10 	      lda	rand
   2785  24eb		       4a		      lsr
   2786  24ec				  -	      ifconst	rand16
   2787  24ec				  -	      rol	rand16
   2788  24ec					      endif
   2789  24ec		       90 02		      bcc	*+4
   2790  24ee		       49 b4		      eor	#$B4
   2791  24f0		       8d 00 10 	      sta	rand
   2792  24f3				  -	      ifconst	rand16
   2793  24f3				  -	      eor	rand16
   2794  24f3					      endif
   2795  24f3		       29 0a		      AND	#10
   2796  24f5		       18		      CLC
   2797  24f6		       69 01		      ADC	#1
   2798  24f8		       85 9b		      STA	player2y
   2799  24fa							; complex statement detected
   2800  24fa		       ad 00 10 	      lda	rand
   2801  24fd		       4a		      lsr
   2802  24fe				  -	      ifconst	rand16
   2803  24fe				  -	      rol	rand16
   2804  24fe					      endif
   2805  24fe		       90 02		      bcc	*+4
   2806  2500		       49 b4		      eor	#$B4
   2807  2502		       8d 00 10 	      sta	rand
   2808  2505				  -	      ifconst	rand16
   2809  2505				  -	      eor	rand16
   2810  2505					      endif
   2811  2505		       18		      CLC
   2812  2506		       69 96		      ADC	#150
   2813  2508		       85 91		      STA	player2x
   2814  250a		       e6 d1		      INC	drop
   2815  250c				   .skip44then
   2816  250c				   .skipL0281
   2817  250c				   .L0282		;  if player2x  <  8 then player2x  =	8
   2818  250c
   2819  250c		       a5 91		      LDA	player2x
   2820  250e		       c9 08		      CMP	#8
   2821  2510		       b0 04		      BCS	.skipL0282
   2822  2512				   .condpart46
   2823  2512		       a9 08		      LDA	#8
   2824  2514		       85 91		      STA	player2x
   2825  2516				   .skipL0282
   2826  2516				   .L0283		;  if player2x  >  150 then player2x  =  150
   2827  2516
   2828  2516		       a9 96		      LDA	#150
   2829  2518		       c5 91		      CMP	player2x
   2830  251a		       b0 04		      BCS	.skipL0283
   2831  251c				   .condpart47
   2832  251c		       a9 96		      LDA	#150
   2833  251e		       85 91		      STA	player2x
   2834  2520				   .skipL0283
   2835  2520				   .L0284		;  if player2y  <  50	&&  player2y  >=  player4y  - 30  &&  player2y	<=  player4y + 30 then goto __Player3Move
   2836  2520
   2837  2520		       a5 9b		      LDA	player2y
   2838  2522		       c9 32		      CMP	#50
   2839  2524		       b0 1a		      BCS	.skipL0284
   2840  2526				   .condpart48
   2841  2526							; complex condition detected
   2842  2526		       a5 9d		      LDA	player4y
   2843  2528		       38		      SEC
   2844  2529		       e9 1e		      SBC	#30
   2845  252b		       48		      PHA
   2846  252c		       ba		      TSX
   2847  252d		       68		      PLA
   2848  252e		       a5 9b		      LDA	player2y
   2849  2530		       d5 01		      CMP	1,x
   2850  2532		       90 0c		      BCC	.skip48then
   2851  2534				   .condpart49
   2852  2534							; complex condition detected
   2853  2534		       a5 9d		      LDA	player4y
   2854  2536		       18		      CLC
   2855  2537		       69 1e		      ADC	#30
   2856  2539		       c5 9b		      CMP	player2y
   2857  253b		       90 03		      BCC	.skip49then
   2858  253d				   .condpart50
   2859  253d		       4c c6 35 	      jmp	.__Player3Move
   2860  2540
   2861  2540				   .skip49then
   2862  2540				   .skip48then
   2863  2540				   .skipL0284
   2864  2540				   .L0285		;  if player2y  <  50	&&  player2y  >=  player1y  - 30  &&  player2y	<=  player1y + 30 then goto __Player3Move
   2865  2540
   2866  2540		       a5 9b		      LDA	player2y
   2867  2542		       c9 32		      CMP	#50
   2868  2544		       b0 1a		      BCS	.skipL0285
   2869  2546				   .condpart51
   2870  2546							; complex condition detected
   2871  2546		       a5 9a		      LDA	player1y
   2872  2548		       38		      SEC
   2873  2549		       e9 1e		      SBC	#30
   2874  254b		       48		      PHA
   2875  254c		       ba		      TSX
   2876  254d		       68		      PLA
   2877  254e		       a5 9b		      LDA	player2y
   2878  2550		       d5 01		      CMP	1,x
   2879  2552		       90 0c		      BCC	.skip51then
   2880  2554				   .condpart52
   2881  2554							; complex condition detected
   2882  2554		       a5 9a		      LDA	player1y
   2883  2556		       18		      CLC
   2884  2557		       69 1e		      ADC	#30
   2885  2559		       c5 9b		      CMP	player2y
   2886  255b		       90 03		      BCC	.skip52then
   2887  255d				   .condpart53
   2888  255d		       4c c6 35 	      jmp	.__Player3Move
   2889  2560
   2890  2560				   .skip52then
   2891  2560				   .skip51then
   2892  2560				   .skipL0285
   2893  2560				   .
   2894  2560							; 
   2895  2560
   2896  2560				   .__SkipP2drop
   2897  2560							; __SkipP2drop
   2898  2560
   2899  2560				   .L0286		;  if EnemyHit  =  2 then goto __Player3Move
   2900  2560
   2901  2560		       a5 d9		      LDA	EnemyHit
   2902  2562		       c9 02		      CMP	#2
   2903  2564		       d0 03		      BNE	.skipL0286
   2904  2566				   .condpart54
   2905  2566		       4c c6 35 	      jmp	.__Player3Move
   2906  2569
   2907  2569				   .skipL0286
   2908  2569				   .L0287		;  if Moverate  <  8 then goto __CheckCollision
   2909  2569
   2910  2569		       a5 d2		      LDA	Moverate
   2911  256b		       c9 08		      CMP	#8
   2912  256d		       b0 03		      BCS	.skipL0287
   2913  256f				   .condpart55
   2914  256f		       4c c2 37 	      jmp	.__CheckCollision
   2915  2572
   2916  2572				   .skipL0287
   2917  2572				   .L0288		;  if level  >  3  &&	player2y  >=  130 then goto __PlayerSideSweep
   2918  2572
   2919  2572		       a9 03		      LDA	#3
   2920  2574		       c5 dc		      CMP	level
   2921  2576		       b0 09		      BCS	.skipL0288
   2922  2578				   .condpart56
   2923  2578		       a5 9b		      LDA	player2y
   2924  257a		       c9 82		      CMP	#130
   2925  257c		       90 03		      BCC	.skip56then
   2926  257e				   .condpart57
   2927  257e		       4c 8b 35 	      jmp	.__PlayerSideSweep
   2928  2581
   2929  2581				   .skip56then
   2930  2581				   .skipL0288
   2931  2581				   .L0289		;  player2y  =  player2y  +  EnemySpeed
   2932  2581
   2933  2581		       a5 9b		      LDA	player2y
   2934  2583		       18		      CLC
   2935  2584		       65 d3		      ADC	EnemySpeed
   2936  2586		       85 9b		      STA	player2y
   2937  2588				   .L0290		;  goto __Player3Move
   2938  2588
   2939  2588		       4c c6 35 	      jmp	.__Player3Move
   2940  258b
   2941  258b				   .
   2942  258b							; 
   2943  258b
   2944  258b				   .__PlayerSideSweep
   2945  258b							; __PlayerSideSweep
   2946  258b
   2947  258b				   .L0291		;  player2y  = 130
   2948  258b
   2949  258b		       a9 82		      LDA	#130
   2950  258d		       85 9b		      STA	player2y
   2951  258f				   .L0292		;  if Moverate  <  8 then goto __CheckCollision
   2952  258f
   2953  258f		       a5 d2		      LDA	Moverate
   2954  2591		       c9 08		      CMP	#8
   2955  2593		       b0 03		      BCS	.skipL0292
   2956  2595				   .condpart58
   2957  2595		       4c c2 37 	      jmp	.__CheckCollision
   2958  2598
   2959  2598				   .skipL0292
   2960  2598				   .L0293		;  if player2x  >  REdge then player2x  =  player2x  -   ( level  - 3 ) 
   2961  2598
   2962  2598		       a9 4f		      LDA	#REdge
   2963  259a		       c5 91		      CMP	player2x
   2964  259c		       b0 12		      BCS	.skipL0293
   2965  259e				   .condpart59
   2966  259e							; complex statement detected
   2967  259e		       a5 91		      LDA	player2x
   2968  25a0		       48		      PHA
   2969  25a1		       a5 dc		      LDA	level
   2970  25a3		       38		      SEC
   2971  25a4		       e9 03		      SBC	#3
   2972  25a6		       a8		      TAY
   2973  25a7		       68		      PLA
   2974  25a8		       ba		      TSX
   2975  25a9		       94 00		      STY	$00,x
   2976  25ab		       38		      SEC
   2977  25ac		       f5 00		      SBC	$00,x
   2978  25ae		       85 91		      STA	player2x
   2979  25b0				   .skipL0293
   2980  25b0				   .L0294		;  if player2x  <  LEdge then player2x  =  player2x  +   ( level  - 3 ) 
   2981  25b0
   2982  25b0		       a5 91		      LDA	player2x
   2983  25b2		       c9 47		      CMP	#LEdge
   2984  25b4		       b0 10		      BCS	.skipL0294
   2985  25b6				   .condpart60
   2986  25b6							; complex statement detected
   2987  25b6		       a5 91		      LDA	player2x
   2988  25b8		       48		      PHA
   2989  25b9		       a5 dc		      LDA	level
   2990  25bb		       38		      SEC
   2991  25bc		       e9 03		      SBC	#3
   2992  25be		       ba		      TSX
   2993  25bf		       e8		      INX
   2994  25c0		       9a		      TXS
   2995  25c1		       18		      CLC
   2996  25c2		       75 00		      ADC	$00,x
   2997  25c4		       85 91		      STA	player2x
   2998  25c6				   .skipL0294
   2999  25c6				   .
   3000  25c6							; 
   3001  25c6
   3002  25c6				   .__Player3Move
   3003  25c6							; __Player3Move
   3004  25c6
   3005  25c6				   .
   3006  25c6							; 
   3007  25c6
   3008  25c6				   .__SkipP3drop
   3009  25c6							; __SkipP3drop
   3010  25c6
   3011  25c6				   .L0295		;  if Moverate  <  5 then goto __CheckCollision
   3012  25c6
   3013  25c6		       a5 d2		      LDA	Moverate
   3014  25c8		       c9 05		      CMP	#5
   3015  25ca		       b0 03		      BCS	.skipL0295
   3016  25cc				   .condpart61
   3017  25cc		       4c c2 37 	      jmp	.__CheckCollision
   3018  25cf
   3019  25cf				   .skipL0295
   3020  25cf				   .L0296		;  if player3y  >  120 then __Player3Xset
   3021  25cf
   3022  25cf		       a9 78		      LDA	#120
   3023  25d1		       c5 9c		      CMP	player3y
   3024  25d3					      if	((* - .__Player3Xset) < 127) && ((* - .__Player3Xset) > -128)
   3025  25d3		       90 2c		      bcc	.__Player3Xset
   3026  25d5				  -	      else
   3027  25d5				  -	      bcs	.2skip__Player3Xset
   3028  25d5				  -	      jmp	.__Player3Xset
   3029  25d5				  -.2skip__Player3Xset
   3030  25d5					      endif
   3031  25d5				   .L0297		;  if level  >  2  &&	player3x  >  LEdge  &&	player3x  <  REdge then player3y  =  player3y  +  3 :  goto __SkipHMove
   3032  25d5
   3033  25d5		       a9 02		      LDA	#2
   3034  25d7		       c5 dc		      CMP	level
   3035  25d9		       b0 16		      BCS	.skipL0297
   3036  25db				   .condpart62
   3037  25db		       a9 47		      LDA	#LEdge
   3038  25dd		       c5 92		      CMP	player3x
   3039  25df		       b0 10		      BCS	.skip62then
   3040  25e1				   .condpart63
   3041  25e1		       a5 92		      LDA	player3x
   3042  25e3		       c9 4f		      CMP	#REdge
   3043  25e5		       b0 0a		      BCS	.skip63then
   3044  25e7				   .condpart64
   3045  25e7		       a5 9c		      LDA	player3y
   3046  25e9		       18		      CLC
   3047  25ea		       69 03		      ADC	#3
   3048  25ec		       85 9c		      STA	player3y
   3049  25ee		       4c be 37 	      jmp	.__SkipHMove
   3050  25f1
   3051  25f1				   .skip63then
   3052  25f1				   .skip62then
   3053  25f1				   .skipL0297
   3054  25f1				   .L0298		;  if EnemyHit  =  3 then goto __SkipHMove
   3055  25f1
   3056  25f1		       a5 d9		      LDA	EnemyHit
   3057  25f3		       c9 03		      CMP	#3
   3058  25f5		       d0 03		      BNE	.skipL0298
   3059  25f7				   .condpart65
   3060  25f7		       4c be 37 	      jmp	.__SkipHMove
   3061  25fa
   3062  25fa				   .skipL0298
   3063  25fa				   .L0299		;  if Bit6_PLayer3Direction{6} then goto __Player3xMove
   3064  25fa
   3065  25fa		       24 ea		      BIT	Bit6_PLayer3Direction
   3066  25fc		       50 03		      BVC	.skipL0299
   3067  25fe				   .condpart66
   3068  25fe		       4c 8b 36 	      jmp	.__Player3xMove
   3069  2601
   3070  2601				   .skipL0299
   3071  2601				   .
   3072  2601							; 
   3073  2601
   3074  2601				   .__Player3Xset
   3075  2601							; __Player3Xset
   3076  2601
   3077  2601				   .L0300		;  if	( rand & 1 )   > 0 then Bit7_PLayer3Moving{7}  = 1 else Bit7_PLayer3Moving{7}  = 0
   3078  2601
   3079  2601							; complex condition detected
   3080  2601							; complex statement detected
   3081  2601		       ad 00 10 	      lda	rand
   3082  2604		       4a		      lsr
   3083  2605				  -	      ifconst	rand16
   3084  2605				  -	      rol	rand16
   3085  2605					      endif
   3086  2605		       90 02		      bcc	*+4
   3087  2607		       49 b4		      eor	#$B4
   3088  2609		       8d 00 10 	      sta	rand
   3089  260c				  -	      ifconst	rand16
   3090  260c				  -	      eor	rand16
   3091  260c					      endif
   3092  260c		       29 01		      AND	#1
   3093  260e		       48		      PHA
   3094  260f		       ba		      TSX
   3095  2610		       68		      PLA
   3096  2611		       a9 00		      LDA	#0
   3097  2613		       d5 01		      CMP	1,x
   3098  2615		       b0 09		      BCS	.skipL0300
   3099  2617				   .condpart67
   3100  2617		       a5 ea		      LDA	Bit7_PLayer3Moving
   3101  2619		       09 80		      ORA	#128
   3102  261b		       85 ea		      STA	Bit7_PLayer3Moving
   3103  261d		       4c 26 36 	      jmp	.skipelse0
   3104  2620				   .skipL0300
   3105  2620		       a5 ea		      LDA	Bit7_PLayer3Moving
   3106  2622		       29 7f		      AND	#127
   3107  2624		       85 ea		      STA	Bit7_PLayer3Moving
   3108  2626				   .skipelse0
   3109  2626				   .L0301		;  if drop  >	49 then goto __Player3Reset
   3110  2626
   3111  2626		       a9 31		      LDA	#49
   3112  2628		       c5 d1		      CMP	drop
   3113  262a		       b0 03		      BCS	.skipL0301
   3114  262c				   .condpart68
   3115  262c		       4c 94 37 	      jmp	.__Player3Reset
   3116  262f
   3117  262f				   .skipL0301
   3118  262f				   .L0302		;  if Bit7_PLayer3Moving{7} then player3y  =  ( rand & 15 )   +   ( level * 2 )  + 5  :  player3x  =  150  :  drop  =	drop  + 1
   3119  262f
   3120  262f		       24 ea		      BIT	Bit7_PLayer3Moving
   3121  2631		       10 22		      BPL	.skipL0302
   3122  2633				   .condpart69
   3123  2633							; complex statement detected
   3124  2633		       ad 00 10 	      lda	rand
   3125  2636		       4a		      lsr
   3126  2637				  -	      ifconst	rand16
   3127  2637				  -	      rol	rand16
   3128  2637					      endif
   3129  2637		       90 02		      bcc	*+4
   3130  2639		       49 b4		      eor	#$B4
   3131  263b		       8d 00 10 	      sta	rand
   3132  263e				  -	      ifconst	rand16
   3133  263e				  -	      eor	rand16
   3134  263e					      endif
   3135  263e		       29 0f		      AND	#15
   3136  2640		       48		      PHA
   3137  2641		       a5 dc		      LDA	level
   3138  2643		       0a		      asl
   3139  2644		       ba		      TSX
   3140  2645		       e8		      INX
   3141  2646		       9a		      TXS
   3142  2647		       18		      CLC
   3143  2648		       75 00		      ADC	$00,x
   3144  264a		       18		      CLC
   3145  264b		       69 05		      ADC	#5
   3146  264d		       85 9c		      STA	player3y
   3147  264f		       a9 96		      LDA	#150
   3148  2651		       85 92		      STA	player3x
   3149  2653		       e6 d1		      INC	drop
   3150  2655				   .skipL0302
   3151  2655				   .L0303		;  if !Bit7_PLayer3Moving{7} then player3y  =	( rand & 15 )	+   ( level * 2 )  + 5	:  player3x  =	4  :  drop  =  drop  + 1
   3152  2655
   3153  2655		       24 ea		      BIT	Bit7_PLayer3Moving
   3154  2657		       30 22		      BMI	.skipL0303
   3155  2659				   .condpart70
   3156  2659							; complex statement detected
   3157  2659		       ad 00 10 	      lda	rand
   3158  265c		       4a		      lsr
   3159  265d				  -	      ifconst	rand16
   3160  265d				  -	      rol	rand16
   3161  265d					      endif
   3162  265d		       90 02		      bcc	*+4
   3163  265f		       49 b4		      eor	#$B4
   3164  2661		       8d 00 10 	      sta	rand
   3165  2664				  -	      ifconst	rand16
   3166  2664				  -	      eor	rand16
   3167  2664					      endif
   3168  2664		       29 0f		      AND	#15
   3169  2666		       48		      PHA
   3170  2667		       a5 dc		      LDA	level
   3171  2669		       0a		      asl
   3172  266a		       ba		      TSX
   3173  266b		       e8		      INX
   3174  266c		       9a		      TXS
   3175  266d		       18		      CLC
   3176  266e		       75 00		      ADC	$00,x
   3177  2670		       18		      CLC
   3178  2671		       69 05		      ADC	#5
   3179  2673		       85 9c		      STA	player3y
   3180  2675		       a9 04		      LDA	#4
   3181  2677		       85 92		      STA	player3x
   3182  2679		       e6 d1		      INC	drop
   3183  267b				   .skipL0303
   3184  267b				   .L0304		;  if player3y  >  100 then player3y  = 80
   3185  267b
   3186  267b		       a9 64		      LDA	#100
   3187  267d		       c5 9c		      CMP	player3y
   3188  267f		       b0 04		      BCS	.skipL0304
   3189  2681				   .condpart71
   3190  2681		       a9 50		      LDA	#80
   3191  2683		       85 9c		      STA	player3y
   3192  2685				   .skipL0304
   3193  2685				   .L0305		;  Bit6_PLayer3Direction{6}  = 1
   3194  2685
   3195  2685		       a5 ea		      LDA	Bit6_PLayer3Direction
   3196  2687		       09 40		      ORA	#64
   3197  2689		       85 ea		      STA	Bit6_PLayer3Direction
   3198  268b				   .
   3199  268b							; 
   3200  268b
   3201  268b				   .__Player3xMove
   3202  268b							; __Player3xMove
   3203  268b
   3204  268b				   .L0306		;  if !Bit7_PLayer3Moving{7}  &&  player3y  >=  player1y  - 5	&&  player3y  <=  player1y + 5	&&  player3x  >=  player1x  - 20 then goto __Player3Reset
   3205  268b
   3206  268b		       24 ea		      BIT	Bit7_PLayer3Moving
   3207  268d		       30 28		      BMI	.skipL0306
   3208  268f				   .condpart72
   3209  268f							; complex condition detected
   3210  268f		       a5 9a		      LDA	player1y
   3211  2691		       38		      SEC
   3212  2692		       e9 05		      SBC	#5
   3213  2694		       48		      PHA
   3214  2695		       ba		      TSX
   3215  2696		       68		      PLA
   3216  2697		       a5 9c		      LDA	player3y
   3217  2699		       d5 01		      CMP	1,x
   3218  269b		       90 1a		      BCC	.skip72then
   3219  269d				   .condpart73
   3220  269d							; complex condition detected
   3221  269d		       a5 9a		      LDA	player1y
   3222  269f		       18		      CLC
   3223  26a0		       69 05		      ADC	#5
   3224  26a2							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3225  26a2		       c5 9c		      CMP	player3y
   3226  26a4		       90 11		      BCC	.skip73then
   3227  26a6				   .condpart74
   3228  26a6							; complex condition detected
   3229  26a6		       a5 90		      LDA	player1x
   3230  26a8		       38		      SEC
   3231  26a9		       e9 14		      SBC	#20
   3232  26ab		       48		      PHA
   3233  26ac		       ba		      TSX
   3234  26ad		       68		      PLA
   3235  26ae		       a5 92		      LDA	player3x
   3236  26b0		       d5 01		      CMP	1,x
   3237  26b2		       90 03		      BCC	.skip74then
   3238  26b4				   .condpart75
   3239  26b4		       4c 94 37 	      jmp	.__Player3Reset
   3240  26b7
   3241  26b7				   .skip74then
   3242  26b7				   .skip73then
   3243  26b7				   .skip72then
   3244  26b7				   .skipL0306
   3245  26b7				   .L0307		;  if Bit7_PLayer3Moving{7}  &&  player3y  >=	player1y  - 5  &&  player3y  <=  player1y + 5  &&  player3x  <=  player1x  + 20 then goto __Player3Reset
   3246  26b7
   3247  26b7		       24 ea		      BIT	Bit7_PLayer3Moving
   3248  26b9		       10 23		      BPL	.skipL0307
   3249  26bb				   .condpart76
   3250  26bb							; complex condition detected
   3251  26bb		       a5 9a		      LDA	player1y
   3252  26bd		       38		      SEC
   3253  26be		       e9 05		      SBC	#5
   3254  26c0		       48		      PHA
   3255  26c1		       ba		      TSX
   3256  26c2		       68		      PLA
   3257  26c3		       a5 9c		      LDA	player3y
   3258  26c5		       d5 01		      CMP	1,x
   3259  26c7		       90 15		      BCC	.skip76then
   3260  26c9				   .condpart77
   3261  26c9							; complex condition detected
   3262  26c9		       a5 9a		      LDA	player1y
   3263  26cb		       18		      CLC
   3264  26cc		       69 05		      ADC	#5
   3265  26ce							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3266  26ce		       c5 9c		      CMP	player3y
   3267  26d0		       90 0c		      BCC	.skip77then
   3268  26d2				   .condpart78
   3269  26d2							; complex condition detected
   3270  26d2		       a5 90		      LDA	player1x
   3271  26d4		       18		      CLC
   3272  26d5		       69 14		      ADC	#20
   3273  26d7		       c5 92		      CMP	player3x
   3274  26d9		       90 03		      BCC	.skip78then
   3275  26db				   .condpart79
   3276  26db		       4c 94 37 	      jmp	.__Player3Reset
   3277  26de
   3278  26de				   .skip78then
   3279  26de				   .skip77then
   3280  26de				   .skip76then
   3281  26de				   .skipL0307
   3282  26de				   .L0308		;  if !Bit7_PLayer3Moving{7}  &&  player3y  >=  player2y  - 5	&&  player3y  <=  player2y + 5	&&  player3x  >=  player2x  - 20 then goto __Player3Reset
   3283  26de
   3284  26de		       24 ea		      BIT	Bit7_PLayer3Moving
   3285  26e0		       30 28		      BMI	.skipL0308
   3286  26e2				   .condpart80
   3287  26e2							; complex condition detected
   3288  26e2		       a5 9b		      LDA	player2y
   3289  26e4		       38		      SEC
   3290  26e5		       e9 05		      SBC	#5
   3291  26e7		       48		      PHA
   3292  26e8		       ba		      TSX
   3293  26e9		       68		      PLA
   3294  26ea		       a5 9c		      LDA	player3y
   3295  26ec		       d5 01		      CMP	1,x
   3296  26ee		       90 1a		      BCC	.skip80then
   3297  26f0				   .condpart81
   3298  26f0							; complex condition detected
   3299  26f0		       a5 9b		      LDA	player2y
   3300  26f2		       18		      CLC
   3301  26f3		       69 05		      ADC	#5
   3302  26f5							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3303  26f5		       c5 9c		      CMP	player3y
   3304  26f7		       90 11		      BCC	.skip81then
   3305  26f9				   .condpart82
   3306  26f9							; complex condition detected
   3307  26f9		       a5 91		      LDA	player2x
   3308  26fb		       38		      SEC
   3309  26fc		       e9 14		      SBC	#20
   3310  26fe		       48		      PHA
   3311  26ff		       ba		      TSX
   3312  2700		       68		      PLA
   3313  2701		       a5 92		      LDA	player3x
   3314  2703		       d5 01		      CMP	1,x
   3315  2705		       90 03		      BCC	.skip82then
   3316  2707				   .condpart83
   3317  2707		       4c 94 37 	      jmp	.__Player3Reset
   3318  270a
   3319  270a				   .skip82then
   3320  270a				   .skip81then
   3321  270a				   .skip80then
   3322  270a				   .skipL0308
   3323  270a				   .L0309		;  if Bit7_PLayer3Moving{7}  &&  player3y  >=	player2y  - 5  &&  player3y  <=  player2y + 5  &&  player3x  <=  player2x  + 20 then goto __Player3Reset
   3324  270a
   3325  270a		       24 ea		      BIT	Bit7_PLayer3Moving
   3326  270c		       10 23		      BPL	.skipL0309
   3327  270e				   .condpart84
   3328  270e							; complex condition detected
   3329  270e		       a5 9b		      LDA	player2y
   3330  2710		       38		      SEC
   3331  2711		       e9 05		      SBC	#5
   3332  2713		       48		      PHA
   3333  2714		       ba		      TSX
   3334  2715		       68		      PLA
   3335  2716		       a5 9c		      LDA	player3y
   3336  2718		       d5 01		      CMP	1,x
   3337  271a		       90 15		      BCC	.skip84then
   3338  271c				   .condpart85
   3339  271c							; complex condition detected
   3340  271c		       a5 9b		      LDA	player2y
   3341  271e		       18		      CLC
   3342  271f		       69 05		      ADC	#5
   3343  2721							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3344  2721		       c5 9c		      CMP	player3y
   3345  2723		       90 0c		      BCC	.skip85then
   3346  2725				   .condpart86
   3347  2725							; complex condition detected
   3348  2725		       a5 91		      LDA	player2x
   3349  2727		       18		      CLC
   3350  2728		       69 14		      ADC	#20
   3351  272a		       c5 92		      CMP	player3x
   3352  272c		       90 03		      BCC	.skip86then
   3353  272e				   .condpart87
   3354  272e		       4c 94 37 	      jmp	.__Player3Reset
   3355  2731
   3356  2731				   .skip86then
   3357  2731				   .skip85then
   3358  2731				   .skip84then
   3359  2731				   .skipL0309
   3360  2731				   .L0310		;  if !Bit7_PLayer3Moving{7}  &&  player3y  >=  player4y  - 5	&&  player3y  <=  player4y + 5	&&  player3x  >=  player4x  - 20 then __Player3Reset
   3361  2731
   3362  2731		       24 ea		      BIT	Bit7_PLayer3Moving
   3363  2733		       30 25		      BMI	.skipL0310
   3364  2735				   .condpart88
   3365  2735							; complex condition detected
   3366  2735		       a5 9d		      LDA	player4y
   3367  2737		       38		      SEC
   3368  2738		       e9 05		      SBC	#5
   3369  273a		       48		      PHA
   3370  273b		       ba		      TSX
   3371  273c		       68		      PLA
   3372  273d		       a5 9c		      LDA	player3y
   3373  273f		       d5 01		      CMP	1,x
   3374  2741		       90 17		      BCC	.skip88then
   3375  2743				   .condpart89
   3376  2743							; complex condition detected
   3377  2743		       a5 9d		      LDA	player4y
   3378  2745		       18		      CLC
   3379  2746		       69 05		      ADC	#5
   3380  2748							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3381  2748		       c5 9c		      CMP	player3y
   3382  274a		       90 0e		      BCC	.skip89then
   3383  274c				   .condpart90
   3384  274c							; complex condition detected
   3385  274c		       a5 93		      LDA	player4x
   3386  274e		       38		      SEC
   3387  274f		       e9 14		      SBC	#20
   3388  2751		       48		      PHA
   3389  2752		       ba		      TSX
   3390  2753		       68		      PLA
   3391  2754		       a5 92		      LDA	player3x
   3392  2756		       d5 01		      CMP	1,x
   3393  2758					      if	((* - .__Player3Reset) < 127) && ((* - .__Player3Reset) > -128)
   3394  2758		       b0 3a		      bcs	.__Player3Reset
   3395  275a				  -	      else
   3396  275a				  -	      bcc	.3skip__Player3Reset
   3397  275a				  -	      jmp	.__Player3Reset
   3398  275a				  -.3skip__Player3Reset
   3399  275a					      endif
   3400  275a				   .skip89then
   3401  275a				   .skip88then
   3402  275a				   .skipL0310
   3403  275a				   .L0311		;  if Bit7_PLayer3Moving{7}  &&  player3y  >=	player4y  - 5  &&  player3y  <=  player4y + 5  &&  player3x  <=  player4x  + 20 then __Player3Reset
   3404  275a
   3405  275a		       24 ea		      BIT	Bit7_PLayer3Moving
   3406  275c		       10 20		      BPL	.skipL0311
   3407  275e				   .condpart91
   3408  275e							; complex condition detected
   3409  275e		       a5 9d		      LDA	player4y
   3410  2760		       38		      SEC
   3411  2761		       e9 05		      SBC	#5
   3412  2763		       48		      PHA
   3413  2764		       ba		      TSX
   3414  2765		       68		      PLA
   3415  2766		       a5 9c		      LDA	player3y
   3416  2768		       d5 01		      CMP	1,x
   3417  276a		       90 12		      BCC	.skip91then
   3418  276c				   .condpart92
   3419  276c							; complex condition detected
   3420  276c		       a5 9d		      LDA	player4y
   3421  276e		       18		      CLC
   3422  276f		       69 05		      ADC	#5
   3423  2771							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3424  2771		       c5 9c		      CMP	player3y
   3425  2773		       90 09		      BCC	.skip92then
   3426  2775				   .condpart93
   3427  2775							; complex condition detected
   3428  2775		       a5 93		      LDA	player4x
   3429  2777		       18		      CLC
   3430  2778		       69 14		      ADC	#20
   3431  277a		       c5 92		      CMP	player3x
   3432  277c					      if	((* - .__Player3Reset) < 127) && ((* - .__Player3Reset) > -128)
   3433  277c		       b0 16		      bcs	.__Player3Reset
   3434  277e				  -	      else
   3435  277e				  -	      bcc	.4skip__Player3Reset
   3436  277e				  -	      jmp	.__Player3Reset
   3437  277e				  -.4skip__Player3Reset
   3438  277e					      endif
   3439  277e				   .skip92then
   3440  277e				   .skip91then
   3441  277e				   .skipL0311
   3442  277e				   .L0312		;  if !Bit7_PLayer3Moving{7} then player3x  =	player3x  +  EnemySpeed
   3443  277e
   3444  277e		       24 ea		      BIT	Bit7_PLayer3Moving
   3445  2780		       30 07		      BMI	.skipL0312
   3446  2782				   .condpart94
   3447  2782		       a5 92		      LDA	player3x
   3448  2784		       18		      CLC
   3449  2785		       65 d3		      ADC	EnemySpeed
   3450  2787		       85 92		      STA	player3x
   3451  2789				   .skipL0312
   3452  2789				   .L0313		;  if Bit7_PLayer3Moving{7} then player3x  =  player3x  -  EnemySpeed
   3453  2789
   3454  2789		       24 ea		      BIT	Bit7_PLayer3Moving
   3455  278b		       10 07		      BPL	.skipL0313
   3456  278d				   .condpart95
   3457  278d		       a5 92		      LDA	player3x
   3458  278f		       38		      SEC
   3459  2790		       e5 d3		      SBC	EnemySpeed
   3460  2792		       85 92		      STA	player3x
   3461  2794				   .skipL0313
   3462  2794				   .
   3463  2794							; 
   3464  2794
   3465  2794				   .__Player3Reset
   3466  2794							; __Player3Reset
   3467  2794
   3468  2794				   .L0314		;  if player3x  >  153  ||  player3x  <  2 then drop  = drop  + 1
   3469  2794
   3470  2794		       a9 99		      LDA	#153
   3471  2796		       c5 92		      CMP	player3x
   3472  2798		       b0 03		      BCS	.skipL0314
   3473  279a				   .condpart96
   3474  279a		       4c a3 37 	      jmp	.condpart97
   3475  279d				   .skipL0314
   3476  279d		       a5 92		      LDA	player3x
   3477  279f		       c9 02		      CMP	#2
   3478  27a1		       b0 02		      BCS	.skip38OR
   3479  27a3				   .condpart97
   3480  27a3		       e6 d1		      INC	drop
   3481  27a5				   .skip38OR
   3482  27a5				   .L0315		;  if player3x  >  153  ||  player3x  <  2 then player3y  = 200 :  Bit6_PLayer3Direction{6}  =  0
   3483  27a5
   3484  27a5		       a9 99		      LDA	#153
   3485  27a7		       c5 92		      CMP	player3x
   3486  27a9		       b0 03		      BCS	.skipL0315
   3487  27ab				   .condpart98
   3488  27ab		       4c b4 37 	      jmp	.condpart99
   3489  27ae				   .skipL0315
   3490  27ae		       a5 92		      LDA	player3x
   3491  27b0		       c9 02		      CMP	#2
   3492  27b2		       b0 0a		      BCS	.skip39OR
   3493  27b4				   .condpart99
   3494  27b4		       a9 c8		      LDA	#200
   3495  27b6		       85 9c		      STA	player3y
   3496  27b8		       a5 ea		      LDA	Bit6_PLayer3Direction
   3497  27ba		       29 bf		      AND	#191
   3498  27bc		       85 ea		      STA	Bit6_PLayer3Direction
   3499  27be				   .skip39OR
   3500  27be				   .
   3501  27be							; 
   3502  27be
   3503  27be				   .__SkipHMove
   3504  27be							; __SkipHMove
   3505  27be
   3506  27be				   .L0316		;  Moverate = 0
   3507  27be
   3508  27be		       a9 00		      LDA	#0
   3509  27c0		       85 d2		      STA	Moverate
   3510  27c2				   .
   3511  27c2							; 
   3512  27c2
   3513  27c2				   .__EnemyMove
   3514  27c2							; __EnemyMove
   3515  27c2
   3516  27c2				   .
   3517  27c2							; 
   3518  27c2
   3519  27c2				   .
   3520  27c2							; 
   3521  27c2
   3522  27c2				   .
   3523  27c2							; 
   3524  27c2
   3525  27c2				   .
   3526  27c2							; 
   3527  27c2
   3528  27c2				   .
   3529  27c2							; 
   3530  27c2
   3531  27c2				   .__CheckCollision
   3532  27c2							; __CheckCollision
   3533  27c2
   3534  27c2				   .L0317		;  if EnemyHit  > 0 then __EnemyCollision
   3535  27c2
   3536  27c2		       a9 00		      LDA	#0
   3537  27c4		       c5 d9		      CMP	EnemyHit
   3538  27c6				  -	      if	((* - .__EnemyCollision) < 127) && ((* - .__EnemyCollision) > -128)
   3539  27c6				  -	      bcc	.__EnemyCollision
   3540  27c6					      else
   3541  27c6		       b0 03		      bcs	.5skip__EnemyCollision
   3542  27c8		       4c 68 38 	      jmp	.__EnemyCollision
   3543  27cb				   .5skip__EnemyCollision
   3544  27cb					      endif
   3545  27cb				   .L0318		;  if !collision(player1,playfield) then goto __EnemyCollision
   3546  27cb
   3547  27cb		       24 03		      bit	CXP1FB
   3548  27cd		       30 03		      BMI	.skipL0318
   3549  27cf				   .condpart100
   3550  27cf		       4c 68 38 	      jmp	.__EnemyCollision
   3551  27d2
   3552  27d2				   .skipL0318
   3553  27d2				   .L0319		;  if	( temp4  +  5 )   >=  player1y	&&  temp4  <=	( player1y  +  5 )  then player1y = 200  :  Househit = Househit + 1  :	Bit5_hit{5}  = 1  :  goto __Explosion
   3554  27d2
   3555  27d2							; complex condition detected
   3556  27d2							; complex statement detected
   3557  27d2		       a5 ce		      LDA	temp4
   3558  27d4		       18		      CLC
   3559  27d5		       69 05		      ADC	#5
   3560  27d7							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3561  27d7		       c5 9a		      CMP	player1y
   3562  27d9		       90 18		      BCC	.skipL0319
   3563  27db				   .condpart101
   3564  27db							; complex condition detected
   3565  27db							; complex statement detected
   3566  27db		       a5 9a		      LDA	player1y
   3567  27dd		       18		      CLC
   3568  27de		       69 05		      ADC	#5
   3569  27e0		       c5 ce		      CMP	temp4
   3570  27e2		       90 0f		      BCC	.skip101then
   3571  27e4				   .condpart102
   3572  27e4		       a9 c8		      LDA	#200
   3573  27e6		       85 9a		      STA	player1y
   3574  27e8		       e6 e1		      INC	Househit
   3575  27ea		       a5 ea		      LDA	Bit5_hit
   3576  27ec		       09 20		      ORA	#32
   3577  27ee		       85 ea		      STA	Bit5_hit
   3578  27f0		       4c 40 3b 	      jmp	.__Explosion
   3579  27f3
   3580  27f3				   .skip101then
   3581  27f3				   .skipL0319
   3582  27f3				   .L0320		;  if	( temp4  +  5 )   >=  player2y	&&  temp4  <=	( player2y  +  5 )  then player2y = 200  :  Househit = Househit + 1  :	Bit5_hit{5}  = 1  :  goto __Explosion
   3583  27f3
   3584  27f3							; complex condition detected
   3585  27f3							; complex statement detected
   3586  27f3		       a5 ce		      LDA	temp4
   3587  27f5		       18		      CLC
   3588  27f6		       69 05		      ADC	#5
   3589  27f8							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3590  27f8		       c5 9b		      CMP	player2y
   3591  27fa		       90 18		      BCC	.skipL0320
   3592  27fc				   .condpart103
   3593  27fc							; complex condition detected
   3594  27fc							; complex statement detected
   3595  27fc		       a5 9b		      LDA	player2y
   3596  27fe		       18		      CLC
   3597  27ff		       69 05		      ADC	#5
   3598  2801		       c5 ce		      CMP	temp4
   3599  2803		       90 0f		      BCC	.skip103then
   3600  2805				   .condpart104
   3601  2805		       a9 c8		      LDA	#200
   3602  2807		       85 9b		      STA	player2y
   3603  2809		       e6 e1		      INC	Househit
   3604  280b		       a5 ea		      LDA	Bit5_hit
   3605  280d		       09 20		      ORA	#32
   3606  280f		       85 ea		      STA	Bit5_hit
   3607  2811		       4c 40 3b 	      jmp	.__Explosion
   3608  2814
   3609  2814				   .skip103then
   3610  2814				   .skipL0320
   3611  2814				   .L0321		;  if	( temp4  +  5 )   >=  player3y	&&  temp4  <=	( player3y  +  5 )  then player3y = 200  :  Bit6_PLayer3Direction{6}  =  0  :  Househit = Househit + 1	:  Bit5_hit{5}	= 1  :	goto __Explosion
   3612  2814
   3613  2814							; complex condition detected
   3614  2814							; complex statement detected
   3615  2814		       a5 ce		      LDA	temp4
   3616  2816		       18		      CLC
   3617  2817		       69 05		      ADC	#5
   3618  2819							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3619  2819		       c5 9c		      CMP	player3y
   3620  281b		       90 1e		      BCC	.skipL0321
   3621  281d				   .condpart105
   3622  281d							; complex condition detected
   3623  281d							; complex statement detected
   3624  281d		       a5 9c		      LDA	player3y
   3625  281f		       18		      CLC
   3626  2820		       69 05		      ADC	#5
   3627  2822		       c5 ce		      CMP	temp4
   3628  2824		       90 15		      BCC	.skip105then
   3629  2826				   .condpart106
   3630  2826		       a9 c8		      LDA	#200
   3631  2828		       85 9c		      STA	player3y
   3632  282a		       a5 ea		      LDA	Bit6_PLayer3Direction
   3633  282c		       29 bf		      AND	#191
   3634  282e		       85 ea		      STA	Bit6_PLayer3Direction
   3635  2830		       e6 e1		      INC	Househit
   3636  2832		       a5 ea		      LDA	Bit5_hit
   3637  2834		       09 20		      ORA	#32
   3638  2836		       85 ea		      STA	Bit5_hit
   3639  2838		       4c 40 3b 	      jmp	.__Explosion
   3640  283b
   3641  283b				   .skip105then
   3642  283b				   .skipL0321
   3643  283b				   .L0322		;  if	( temp4  +  5 )   >=  player4y	&&  temp4  <=	( player4y  +  5 )  then player4y = 200  :  HealthDrop = 0 :  Bit2_EnemyMove{2} = 0  :	if Powerup  < 1 then Househit = Househit + 3
   3644  283b
   3645  283b							; complex condition detected
   3646  283b							; complex statement detected
   3647  283b		       a5 ce		      LDA	temp4
   3648  283d		       18		      CLC
   3649  283e		       69 05		      ADC	#5
   3650  2840							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3651  2840		       c5 9d		      CMP	player4y
   3652  2842		       90 24		      BCC	.skipL0322
   3653  2844				   .condpart107
   3654  2844							; complex condition detected
   3655  2844							; complex statement detected
   3656  2844		       a5 9d		      LDA	player4y
   3657  2846		       18		      CLC
   3658  2847		       69 05		      ADC	#5
   3659  2849		       c5 ce		      CMP	temp4
   3660  284b		       90 1b		      BCC	.skip107then
   3661  284d				   .condpart108
   3662  284d		       a9 c8		      LDA	#200
   3663  284f		       85 9d		      STA	player4y
   3664  2851		       a9 00		      LDA	#0
   3665  2853		       85 de		      STA	HealthDrop
   3666  2855		       a5 ea		      LDA	Bit2_EnemyMove
   3667  2857		       29 fb		      AND	#251
   3668  2859		       85 ea		      STA	Bit2_EnemyMove
   3669  285b		       a5 ee		      LDA	Powerup
   3670  285d		       c9 01		      CMP	#1
   3671  285f		       b0 07		      BCS	.skip108then
   3672  2861				   .condpart109
   3673  2861		       a5 e1		      LDA	Househit
   3674  2863		       18		      CLC
   3675  2864		       69 03		      ADC	#3
   3676  2866		       85 e1		      STA	Househit
   3677  2868				   .skip108then
   3678  2868				   .skip107then
   3679  2868				   .skipL0322
   3680  2868				   .
   3681  2868							; 
   3682  2868
   3683  2868				   .__EnemyCollision
   3684  2868							; __EnemyCollision
   3685  2868
   3686  2868				   .L0323		;  if !collision(player0,player1) then goto __Skip_p0_Collision
   3687  2868
   3688  2868		       24 07		      bit	CXPPMM
   3689  286a		       30 03		      BMI	.skipL0323
   3690  286c				   .condpart110
   3691  286c		       4c 7e 39 	      jmp	.__Skip_p0_Collision
   3692  286f
   3693  286f				   .skipL0323
   3694  286f				   .L0324		;  temp5  =  16
   3695  286f
   3696  286f		       a9 10		      LDA	#16
   3697  2871		       85 cf		      STA	temp5
   3698  2873				   .L0325		;  if EnemyHit  <>  1 then if	( player0y  +  10 )   >=  player1y  &&	player0y  <=   ( player1y  +  10 )   &&   ( player0x  +  temp5 )   >=  player1x  &&  player0x  <=   ( player1x	+  7 )	then EnemyHit  =  1  :	Damage	= 20 :	goto __EnemyBlock
   3699  2873
   3700  2873		       a5 d9		      LDA	EnemyHit
   3701  2875		       c9 01		      CMP	#1
   3702  2877		       f0 2f		      BEQ	.skipL0325
   3703  2879				   .condpart111
   3704  2879							; complex condition detected
   3705  2879							; complex statement detected
   3706  2879		       a5 99		      LDA	player0y
   3707  287b		       18		      CLC
   3708  287c		       69 0a		      ADC	#10
   3709  287e							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3710  287e		       c5 9a		      CMP	player1y
   3711  2880		       90 26		      BCC	.skip111then
   3712  2882				   .condpart112
   3713  2882							; complex condition detected
   3714  2882							; complex statement detected
   3715  2882		       a5 9a		      LDA	player1y
   3716  2884		       18		      CLC
   3717  2885		       69 0a		      ADC	#10
   3718  2887							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3719  2887		       c5 99		      CMP	player0y
   3720  2889		       90 1d		      BCC	.skip112then
   3721  288b				   .condpart113
   3722  288b							; complex condition detected
   3723  288b							; complex statement detected
   3724  288b		       a5 80		      LDA	player0x
   3725  288d		       18		      CLC
   3726  288e		       65 cf		      ADC	temp5
   3727  2890							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3728  2890		       c5 90		      CMP	player1x
   3729  2892		       90 14		      BCC	.skip113then
   3730  2894				   .condpart114
   3731  2894							; complex condition detected
   3732  2894							; complex statement detected
   3733  2894		       a5 90		      LDA	player1x
   3734  2896		       18		      CLC
   3735  2897		       69 07		      ADC	#7
   3736  2899		       c5 80		      CMP	player0x
   3737  289b		       90 0b		      BCC	.skip114then
   3738  289d				   .condpart115
   3739  289d		       a9 01		      LDA	#1
   3740  289f		       85 d9		      STA	EnemyHit
   3741  28a1		       a9 14		      LDA	#20
   3742  28a3		       85 ed		      STA	Damage
   3743  28a5		       4c d3 3c 	      jmp	.__EnemyBlock
   3744  28a8
   3745  28a8				   .skip114then
   3746  28a8				   .skip113then
   3747  28a8				   .skip112then
   3748  28a8				   .skip111then
   3749  28a8				   .skipL0325
   3750  28a8				   .L0326		;  if EnemyHit  <>  2 then if	( player0y  +  10 )   >=  player2y  &&	player0y  <=   ( player2y  +  10 )   &&   ( player0x  +  temp5 )   >=  player2x  &&  player0x  <=   ( player2x	+  7 )	then EnemyHit  =  2 :  Damage  = 10  :	goto __EnemyBlock
   3751  28a8
   3752  28a8		       a5 d9		      LDA	EnemyHit
   3753  28aa		       c9 02		      CMP	#2
   3754  28ac		       f0 2f		      BEQ	.skipL0326
   3755  28ae				   .condpart116
   3756  28ae							; complex condition detected
   3757  28ae							; complex statement detected
   3758  28ae		       a5 99		      LDA	player0y
   3759  28b0		       18		      CLC
   3760  28b1		       69 0a		      ADC	#10
   3761  28b3							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3762  28b3		       c5 9b		      CMP	player2y
   3763  28b5		       90 26		      BCC	.skip116then
   3764  28b7				   .condpart117
   3765  28b7							; complex condition detected
   3766  28b7							; complex statement detected
   3767  28b7		       a5 9b		      LDA	player2y
   3768  28b9		       18		      CLC
   3769  28ba		       69 0a		      ADC	#10
   3770  28bc							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3771  28bc		       c5 99		      CMP	player0y
   3772  28be		       90 1d		      BCC	.skip117then
   3773  28c0				   .condpart118
   3774  28c0							; complex condition detected
   3775  28c0							; complex statement detected
   3776  28c0		       a5 80		      LDA	player0x
   3777  28c2		       18		      CLC
   3778  28c3		       65 cf		      ADC	temp5
   3779  28c5							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3780  28c5		       c5 91		      CMP	player2x
   3781  28c7		       90 14		      BCC	.skip118then
   3782  28c9				   .condpart119
   3783  28c9							; complex condition detected
   3784  28c9							; complex statement detected
   3785  28c9		       a5 91		      LDA	player2x
   3786  28cb		       18		      CLC
   3787  28cc		       69 07		      ADC	#7
   3788  28ce		       c5 80		      CMP	player0x
   3789  28d0		       90 0b		      BCC	.skip119then
   3790  28d2				   .condpart120
   3791  28d2		       a9 02		      LDA	#2
   3792  28d4		       85 d9		      STA	EnemyHit
   3793  28d6		       a9 0a		      LDA	#10
   3794  28d8		       85 ed		      STA	Damage
   3795  28da		       4c d3 3c 	      jmp	.__EnemyBlock
   3796  28dd
   3797  28dd				   .skip119then
   3798  28dd				   .skip118then
   3799  28dd				   .skip117then
   3800  28dd				   .skip116then
   3801  28dd				   .skipL0326
   3802  28dd				   .L0327		;  if EnemyHit  <>  3 then if	( player0y  +  10 )   >=  player3y  &&	player0y  <=   ( player3y  +  10 )   &&   ( player0x  +  temp5 )   >=  player3x  &&  player0x  <=   ( player3x	+  7 )	then EnemyHit  =  3  :	Damage	= 10  :  goto __EnemyBlock
   3803  28dd
   3804  28dd		       a5 d9		      LDA	EnemyHit
   3805  28df		       c9 03		      CMP	#3
   3806  28e1		       f0 2f		      BEQ	.skipL0327
   3807  28e3				   .condpart121
   3808  28e3							; complex condition detected
   3809  28e3							; complex statement detected
   3810  28e3		       a5 99		      LDA	player0y
   3811  28e5		       18		      CLC
   3812  28e6		       69 0a		      ADC	#10
   3813  28e8							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3814  28e8		       c5 9c		      CMP	player3y
   3815  28ea		       90 26		      BCC	.skip121then
   3816  28ec				   .condpart122
   3817  28ec							; complex condition detected
   3818  28ec							; complex statement detected
   3819  28ec		       a5 9c		      LDA	player3y
   3820  28ee		       18		      CLC
   3821  28ef		       69 0a		      ADC	#10
   3822  28f1							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3823  28f1		       c5 99		      CMP	player0y
   3824  28f3		       90 1d		      BCC	.skip122then
   3825  28f5				   .condpart123
   3826  28f5							; complex condition detected
   3827  28f5							; complex statement detected
   3828  28f5		       a5 80		      LDA	player0x
   3829  28f7		       18		      CLC
   3830  28f8		       65 cf		      ADC	temp5
   3831  28fa							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3832  28fa		       c5 92		      CMP	player3x
   3833  28fc		       90 14		      BCC	.skip123then
   3834  28fe				   .condpart124
   3835  28fe							; complex condition detected
   3836  28fe							; complex statement detected
   3837  28fe		       a5 92		      LDA	player3x
   3838  2900		       18		      CLC
   3839  2901		       69 07		      ADC	#7
   3840  2903		       c5 80		      CMP	player0x
   3841  2905		       90 0b		      BCC	.skip124then
   3842  2907				   .condpart125
   3843  2907		       a9 03		      LDA	#3
   3844  2909		       85 d9		      STA	EnemyHit
   3845  290b		       a9 0a		      LDA	#10
   3846  290d		       85 ed		      STA	Damage
   3847  290f		       4c d3 3c 	      jmp	.__EnemyBlock
   3848  2912
   3849  2912				   .skip124then
   3850  2912				   .skip123then
   3851  2912				   .skip122then
   3852  2912				   .skip121then
   3853  2912				   .skipL0327
   3854  2912				   .L0328		;  if	( player0y  +  10 )   >=  player4y  &&	player0y  <=   ( player4y  +  10 )   &&   ( player0x  +  temp5 )   >=  player4x  &&  player0x  <=   ( player4x	+  7 )	then gosub __Health bank3
   3855  2912
   3856  2912							; complex condition detected
   3857  2912							; complex statement detected
   3858  2912		       a5 99		      LDA	player0y
   3859  2914		       18		      CLC
   3860  2915		       69 0a		      ADC	#10
   3861  2917							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3862  2917		       c5 9d		      CMP	player4y
   3863  2919		       90 33		      BCC	.skipL0328
   3864  291b				   .condpart126
   3865  291b							; complex condition detected
   3866  291b							; complex statement detected
   3867  291b		       a5 9d		      LDA	player4y
   3868  291d		       18		      CLC
   3869  291e		       69 0a		      ADC	#10
   3870  2920							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3871  2920		       c5 99		      CMP	player0y
   3872  2922		       90 2a		      BCC	.skip126then
   3873  2924				   .condpart127
   3874  2924							; complex condition detected
   3875  2924							; complex statement detected
   3876  2924		       a5 80		      LDA	player0x
   3877  2926		       18		      CLC
   3878  2927		       65 cf		      ADC	temp5
   3879  2929							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3880  2929		       c5 93		      CMP	player4x
   3881  292b		       90 21		      BCC	.skip127then
   3882  292d				   .condpart128
   3883  292d							; complex condition detected
   3884  292d							; complex statement detected
   3885  292d		       a5 93		      LDA	player4x
   3886  292f		       18		      CLC
   3887  2930		       69 07		      ADC	#7
   3888  2932		       c5 80		      CMP	player0x
   3889  2934		       90 18		      BCC	.skip128then
   3890  2936				   .condpart129
   3891  2936		       85 81		      sta	temp7
   3892  2938		       a9 39		      lda	#>(ret_point4-1)
   3893  293a		       48		      pha
   3894  293b		       a9 4d		      lda	#<(ret_point4-1)
   3895  293d		       48		      pha
   3896  293e		       a9 53		      lda	#>(.__Health-1)
   3897  2940		       48		      pha
   3898  2941		       a9 47		      lda	#<(.__Health-1)
   3899  2943		       48		      pha
   3900  2944		       a5 81		      lda	temp7
   3901  2946		       48		      pha
   3902  2947		       8a		      txa
   3903  2948		       48		      pha
   3904  2949		       a2 03		      ldx	#3
   3905  294b		       4c ee df 	      jmp	BS_jsr
   3906  294e				   ret_point4
   3907  294e				   .skip128then
   3908  294e				   .skip127then
   3909  294e				   .skip126then
   3910  294e				   .skipL0328
   3911  294e				   .L0329		;  if	( player0y  +  10 )   >=  player5y  &&	player0y  <=   ( player5y  +  10 )   &&   ( player0x  +  temp5 )   >=  player5x  &&  player0x  <=   ( player5x	+  7 )	then goto __JoystickControls
   3912  294e
   3913  294e							; complex condition detected
   3914  294e							; complex statement detected
   3915  294e		       a5 99		      LDA	player0y
   3916  2950		       18		      CLC
   3917  2951		       69 0a		      ADC	#10
   3918  2953							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3919  2953		       c5 9e		      CMP	player5y
   3920  2955		       90 1e		      BCC	.skipL0329
   3921  2957				   .condpart130
   3922  2957							; complex condition detected
   3923  2957							; complex statement detected
   3924  2957		       a5 9e		      LDA	player5y
   3925  2959		       18		      CLC
   3926  295a		       69 0a		      ADC	#10
   3927  295c							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3928  295c		       c5 99		      CMP	player0y
   3929  295e		       90 15		      BCC	.skip130then
   3930  2960				   .condpart131
   3931  2960							; complex condition detected
   3932  2960							; complex statement detected
   3933  2960		       a5 80		      LDA	player0x
   3934  2962		       18		      CLC
   3935  2963		       65 cf		      ADC	temp5
   3936  2965							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3937  2965		       c5 94		      CMP	player5x
   3938  2967		       90 0c		      BCC	.skip131then
   3939  2969				   .condpart132
   3940  2969							; complex condition detected
   3941  2969							; complex statement detected
   3942  2969		       a5 94		      LDA	player5x
   3943  296b		       18		      CLC
   3944  296c		       69 07		      ADC	#7
   3945  296e		       c5 80		      CMP	player0x
   3946  2970		       90 03		      BCC	.skip132then
   3947  2972				   .condpart133
   3948  2972		       4c 86 3a 	      jmp	.__JoystickControls
   3949  2975
   3950  2975				   .skip132then
   3951  2975				   .skip131then
   3952  2975				   .skip130then
   3953  2975				   .skipL0329
   3954  2975				   .L0330		;  if EnemyHit  <  1 then goto __EnemyScore
   3955  2975
   3956  2975		       a5 d9		      LDA	EnemyHit
   3957  2977		       c9 01		      CMP	#1
   3958  2979		       b0 03		      BCS	.skipL0330
   3959  297b				   .condpart134
   3960  297b		       4c 17 3d 	      jmp	.__EnemyScore
   3961  297e
   3962  297e				   .skipL0330
   3963  297e				   .
   3964  297e							; 
   3965  297e
   3966  297e				   .__Skip_p0_Collision
   3967  297e							; __Skip_p0_Collision
   3968  297e
   3969  297e				   .L0331		;  if !collision(missile0,player1) then goto __Skip_PF_Collision
   3970  297e
   3971  297e		       24 00		      bit	CXM0P
   3972  2980		       30 03		      BMI	.skipL0331
   3973  2982				   .condpart135
   3974  2982		       4c 68 3a 	      jmp	.__Skip_PF_Collision
   3975  2985
   3976  2985				   .skipL0331
   3977  2985				   .L0332		;  temp5  =  missile0height[8]
   3978  2985
   3979  2985		       a2 08		      LDX	#8
   3980  2987		       b5 c2		      LDA	missile0height,x
   3981  2989		       85 cf		      STA	temp5
   3982  298b				   .L0333		;  if EnemyHit  <  1 then if  ( missile0y  +  missile0height )   >=  player1y	&&  missile0y  <=   ( player1y	+  10 )   &&   ( missile0x  +  temp5 )	 >=  player1x  &&  missile0x  <=   ( player1x  +  15 )	then EnemyHit  =  1 :  Points = $10  :	goto __Score
   3983  298b
   3984  298b		       a5 d9		      LDA	EnemyHit
   3985  298d		       c9 01		      CMP	#1
   3986  298f		       b0 2f		      BCS	.skipL0333
   3987  2991				   .condpart136
   3988  2991							; complex condition detected
   3989  2991							; complex statement detected
   3990  2991		       a5 bf		      LDA	missile0y
   3991  2993		       18		      CLC
   3992  2994		       65 c2		      ADC	missile0height
   3993  2996							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3994  2996		       c5 9a		      CMP	player1y
   3995  2998		       90 26		      BCC	.skip136then
   3996  299a				   .condpart137
   3997  299a							; complex condition detected
   3998  299a							; complex statement detected
   3999  299a		       a5 9a		      LDA	player1y
   4000  299c		       18		      CLC
   4001  299d		       69 0a		      ADC	#10
   4002  299f							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4003  299f		       c5 bf		      CMP	missile0y
   4004  29a1		       90 1d		      BCC	.skip137then
   4005  29a3				   .condpart138
   4006  29a3							; complex condition detected
   4007  29a3							; complex statement detected
   4008  29a3		       a5 82		      LDA	missile0x
   4009  29a5		       18		      CLC
   4010  29a6		       65 cf		      ADC	temp5
   4011  29a8							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4012  29a8		       c5 90		      CMP	player1x
   4013  29aa		       90 14		      BCC	.skip138then
   4014  29ac				   .condpart139
   4015  29ac							; complex condition detected
   4016  29ac							; complex statement detected
   4017  29ac		       a5 90		      LDA	player1x
   4018  29ae		       18		      CLC
   4019  29af		       69 0f		      ADC	#15
   4020  29b1		       c5 82		      CMP	missile0x
   4021  29b3		       90 0b		      BCC	.skip139then
   4022  29b5				   .condpart140
   4023  29b5		       a9 01		      LDA	#1
   4024  29b7		       85 d9		      STA	EnemyHit
   4025  29b9		       a9 10		      LDA	#$10
   4026  29bb		       85 d4		      STA	Points
   4027  29bd		       4c d3 3b 	      jmp	.__Score
   4028  29c0
   4029  29c0				   .skip139then
   4030  29c0				   .skip138then
   4031  29c0				   .skip137then
   4032  29c0				   .skip136then
   4033  29c0				   .skipL0333
   4034  29c0				   .L0334		;  if EnemyHit  <  2 then if  ( missile0y  +  missile0height )   >=  player2y	&&  missile0y  <=   ( player2y	+  10 )   &&   ( missile0x  +  temp5 )	 >=  player2x  &&  missile0x  <=   ( player2x  +  15 )	then EnemyHit  =  2  :	Points = $05  :  goto __Score
   4035  29c0
   4036  29c0		       a5 d9		      LDA	EnemyHit
   4037  29c2		       c9 02		      CMP	#2
   4038  29c4		       b0 2f		      BCS	.skipL0334
   4039  29c6				   .condpart141
   4040  29c6							; complex condition detected
   4041  29c6							; complex statement detected
   4042  29c6		       a5 bf		      LDA	missile0y
   4043  29c8		       18		      CLC
   4044  29c9		       65 c2		      ADC	missile0height
   4045  29cb							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4046  29cb		       c5 9b		      CMP	player2y
   4047  29cd		       90 26		      BCC	.skip141then
   4048  29cf				   .condpart142
   4049  29cf							; complex condition detected
   4050  29cf							; complex statement detected
   4051  29cf		       a5 9b		      LDA	player2y
   4052  29d1		       18		      CLC
   4053  29d2		       69 0a		      ADC	#10
   4054  29d4							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4055  29d4		       c5 bf		      CMP	missile0y
   4056  29d6		       90 1d		      BCC	.skip142then
   4057  29d8				   .condpart143
   4058  29d8							; complex condition detected
   4059  29d8							; complex statement detected
   4060  29d8		       a5 82		      LDA	missile0x
   4061  29da		       18		      CLC
   4062  29db		       65 cf		      ADC	temp5
   4063  29dd							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4064  29dd		       c5 91		      CMP	player2x
   4065  29df		       90 14		      BCC	.skip143then
   4066  29e1				   .condpart144
   4067  29e1							; complex condition detected
   4068  29e1							; complex statement detected
   4069  29e1		       a5 91		      LDA	player2x
   4070  29e3		       18		      CLC
   4071  29e4		       69 0f		      ADC	#15
   4072  29e6		       c5 82		      CMP	missile0x
   4073  29e8		       90 0b		      BCC	.skip144then
   4074  29ea				   .condpart145
   4075  29ea		       a9 02		      LDA	#2
   4076  29ec		       85 d9		      STA	EnemyHit
   4077  29ee		       a9 05		      LDA	#$05
   4078  29f0		       85 d4		      STA	Points
   4079  29f2		       4c d3 3b 	      jmp	.__Score
   4080  29f5
   4081  29f5				   .skip144then
   4082  29f5				   .skip143then
   4083  29f5				   .skip142then
   4084  29f5				   .skip141then
   4085  29f5				   .skipL0334
   4086  29f5				   .L0335		;  if EnemyHit  <  3 then if  ( missile0y  +  missile0height )   >=  player3y	&&  missile0y  <=   ( player3y	+  10 )   &&   ( missile0x  +  temp5 )	 >=  player3x  &&  missile0x  <=   ( player3x  +  15 )	then EnemyHit  =  3  :	Bit6_PLayer3Direction{6}  = 0  :  goto __Score
   4087  29f5
   4088  29f5		       a5 d9		      LDA	EnemyHit
   4089  29f7		       c9 03		      CMP	#3
   4090  29f9		       b0 31		      BCS	.skipL0335
   4091  29fb				   .condpart146
   4092  29fb							; complex condition detected
   4093  29fb							; complex statement detected
   4094  29fb		       a5 bf		      LDA	missile0y
   4095  29fd		       18		      CLC
   4096  29fe		       65 c2		      ADC	missile0height
   4097  2a00							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4098  2a00		       c5 9c		      CMP	player3y
   4099  2a02		       90 28		      BCC	.skip146then
   4100  2a04				   .condpart147
   4101  2a04							; complex condition detected
   4102  2a04							; complex statement detected
   4103  2a04		       a5 9c		      LDA	player3y
   4104  2a06		       18		      CLC
   4105  2a07		       69 0a		      ADC	#10
   4106  2a09							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4107  2a09		       c5 bf		      CMP	missile0y
   4108  2a0b		       90 1f		      BCC	.skip147then
   4109  2a0d				   .condpart148
   4110  2a0d							; complex condition detected
   4111  2a0d							; complex statement detected
   4112  2a0d		       a5 82		      LDA	missile0x
   4113  2a0f		       18		      CLC
   4114  2a10		       65 cf		      ADC	temp5
   4115  2a12							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4116  2a12		       c5 92		      CMP	player3x
   4117  2a14		       90 16		      BCC	.skip148then
   4118  2a16				   .condpart149
   4119  2a16							; complex condition detected
   4120  2a16							; complex statement detected
   4121  2a16		       a5 92		      LDA	player3x
   4122  2a18		       18		      CLC
   4123  2a19		       69 0f		      ADC	#15
   4124  2a1b		       c5 82		      CMP	missile0x
   4125  2a1d		       90 0d		      BCC	.skip149then
   4126  2a1f				   .condpart150
   4127  2a1f		       a9 03		      LDA	#3
   4128  2a21		       85 d9		      STA	EnemyHit
   4129  2a23		       a5 ea		      LDA	Bit6_PLayer3Direction
   4130  2a25		       29 bf		      AND	#191
   4131  2a27		       85 ea		      STA	Bit6_PLayer3Direction
   4132  2a29		       4c d3 3b 	      jmp	.__Score
   4133  2a2c
   4134  2a2c				   .skip149then
   4135  2a2c				   .skip148then
   4136  2a2c				   .skip147then
   4137  2a2c				   .skip146then
   4138  2a2c				   .skipL0335
   4139  2a2c				   .L0336		;  if	( missile0y  +	missile0height )   >=  player4y  &&  missile0y	<=   ( player4y  +  10 )   &&	( missile0x  +	temp5 )   >=  player4x	&&  missile0x  <=   ( player4x	+  15 )  then gosub __Health bank3
   4140  2a2c
   4141  2a2c							; complex condition detected
   4142  2a2c							; complex statement detected
   4143  2a2c		       a5 bf		      LDA	missile0y
   4144  2a2e		       18		      CLC
   4145  2a2f		       65 c2		      ADC	missile0height
   4146  2a31							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4147  2a31		       c5 9d		      CMP	player4y
   4148  2a33		       90 33		      BCC	.skipL0336
   4149  2a35				   .condpart151
   4150  2a35							; complex condition detected
   4151  2a35							; complex statement detected
   4152  2a35		       a5 9d		      LDA	player4y
   4153  2a37		       18		      CLC
   4154  2a38		       69 0a		      ADC	#10
   4155  2a3a							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4156  2a3a		       c5 bf		      CMP	missile0y
   4157  2a3c		       90 2a		      BCC	.skip151then
   4158  2a3e				   .condpart152
   4159  2a3e							; complex condition detected
   4160  2a3e							; complex statement detected
   4161  2a3e		       a5 82		      LDA	missile0x
   4162  2a40		       18		      CLC
   4163  2a41		       65 cf		      ADC	temp5
   4164  2a43							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4165  2a43		       c5 93		      CMP	player4x
   4166  2a45		       90 21		      BCC	.skip152then
   4167  2a47				   .condpart153
   4168  2a47							; complex condition detected
   4169  2a47							; complex statement detected
   4170  2a47		       a5 93		      LDA	player4x
   4171  2a49		       18		      CLC
   4172  2a4a		       69 0f		      ADC	#15
   4173  2a4c		       c5 82		      CMP	missile0x
   4174  2a4e		       90 18		      BCC	.skip153then
   4175  2a50				   .condpart154
   4176  2a50		       85 81		      sta	temp7
   4177  2a52		       a9 3a		      lda	#>(ret_point5-1)
   4178  2a54		       48		      pha
   4179  2a55		       a9 67		      lda	#<(ret_point5-1)
   4180  2a57		       48		      pha
   4181  2a58		       a9 53		      lda	#>(.__Health-1)
   4182  2a5a		       48		      pha
   4183  2a5b		       a9 47		      lda	#<(.__Health-1)
   4184  2a5d		       48		      pha
   4185  2a5e		       a5 81		      lda	temp7
   4186  2a60		       48		      pha
   4187  2a61		       8a		      txa
   4188  2a62		       48		      pha
   4189  2a63		       a2 03		      ldx	#3
   4190  2a65		       4c ee df 	      jmp	BS_jsr
   4191  2a68				   ret_point5
   4192  2a68				   .skip153then
   4193  2a68				   .skip152then
   4194  2a68				   .skip151then
   4195  2a68				   .skipL0336
   4196  2a68				   .
   4197  2a68							; 
   4198  2a68
   4199  2a68				   .__Skip_PF_Collision
   4200  2a68							; __Skip_PF_Collision
   4201  2a68
   4202  2a68				   .
   4203  2a68							; 
   4204  2a68
   4205  2a68				   .__SkipMove
   4206  2a68							; __SkipMove
   4207  2a68
   4208  2a68				   .
   4209  2a68							; 
   4210  2a68
   4211  2a68				   .
   4212  2a68							; 
   4213  2a68
   4214  2a68				   .
   4215  2a68							; 
   4216  2a68
   4217  2a68				   .
   4218  2a68							; 
   4219  2a68
   4220  2a68				   .L0337		;  DF6FRACINC	=  255
   4221  2a68
   4222  2a68		       a9 ff		      LDA	#255
   4223  2a6a		       8d 3e 10 	      STA	DF6FRACINC
   4224  2a6d				   .L0338		;  DF4FRACINC	=  255
   4225  2a6d
   4226  2a6d		       a9 ff		      LDA	#255
   4227  2a6f		       8d 3c 10 	      STA	DF4FRACINC
   4228  2a72				   .L0339		;  DF0FRACINC	=  128
   4229  2a72
   4230  2a72		       a9 80		      LDA	#128
   4231  2a74		       8d 38 10 	      STA	DF0FRACINC
   4232  2a77				   .L0340		;  DF1FRACINC	=  128
   4233  2a77
   4234  2a77		       a9 80		      LDA	#128
   4235  2a79		       8d 39 10 	      STA	DF1FRACINC
   4236  2a7c				   .L0341		;  DF2FRACINC	=  128
   4237  2a7c
   4238  2a7c		       a9 80		      LDA	#128
   4239  2a7e		       8d 3a 10 	      STA	DF2FRACINC
   4240  2a81				   .L0342		;  DF3FRACINC	=  128
   4241  2a81
   4242  2a81		       a9 80		      LDA	#128
   4243  2a83		       8d 3b 10 	      STA	DF3FRACINC
   4244  2a86				   .
   4245  2a86							; 
   4246  2a86
   4247  2a86				   .__JoystickControls
   4248  2a86							; __JoystickControls
   4249  2a86
   4250  2a86				   .L0343		;  AUDV1  =  0 :  AUDC1  =  0 :  AUDF1  =  0
   4251  2a86
   4252  2a86		       a9 00		      LDA	#0
   4253  2a88		       85 1a		      STA	AUDV1
   4254  2a8a		       85 16		      STA	AUDC1
   4255  2a8c		       85 18		      STA	AUDF1
   4256  2a8e				   .L0344		;  if joy0left  &&  player0x  >  _P_Edge_Left then player0x  =  player0x  -  1
   4257  2a8e
   4258  2a8e		       2c 80 02 	      bit	SWCHA
   4259  2a91		       70 08		      BVS	.skipL0344
   4260  2a93				   .condpart155
   4261  2a93		       a9 00		      LDA	#_P_Edge_Left
   4262  2a95		       c5 80		      CMP	player0x
   4263  2a97		       b0 02		      BCS	.skip155then
   4264  2a99				   .condpart156
   4265  2a99		       c6 80		      DEC	player0x
   4266  2a9b				   .skip155then
   4267  2a9b				   .skipL0344
   4268  2a9b				   .L0345		;  if joy0right  &&  player0x	<  _P_Edge_Right then player0x	=  player0x  +	1
   4269  2a9b
   4270  2a9b		       2c 80 02 	      bit	SWCHA
   4271  2a9e		       30 08		      BMI	.skipL0345
   4272  2aa0				   .condpart157
   4273  2aa0		       a5 80		      LDA	player0x
   4274  2aa2		       c9 96		      CMP	#_P_Edge_Right
   4275  2aa4		       b0 02		      BCS	.skip157then
   4276  2aa6				   .condpart158
   4277  2aa6		       e6 80		      INC	player0x
   4278  2aa8				   .skip157then
   4279  2aa8				   .skipL0345
   4280  2aa8				   .
   4281  2aa8							; 
   4282  2aa8
   4283  2aa8				   .__FireSound
   4284  2aa8							; __FireSound
   4285  2aa8
   4286  2aa8				   .
   4287  2aa8							; 
   4288  2aa8
   4289  2aa8				   .L0346		;  if joy0fire  &&  !Bit4_gameover{4} then if !Ch0_Sound  &&  !Bit1_missleOn{1} then Ch0_Sound  =  1  :  Ch0_Duration	=  15
   4290  2aa8
   4291  2aa8		       24 0c		      bit	INPT4
   4292  2aaa		       30 18		      BMI	.skipL0346
   4293  2aac				   .condpart159
   4294  2aac		       a5 ea		      LDA	Bit4_gameover
   4295  2aae		       29 10		      AND	#16
   4296  2ab0		       d0 12		      BNE	.skip159then
   4297  2ab2				   .condpart160
   4298  2ab2		       a5 e7		      LDA	Ch0_Sound
   4299  2ab4		       d0 0e		      BNE	.skip160then
   4300  2ab6				   .condpart161
   4301  2ab6		       a5 ea		      LDA	Bit1_missleOn
   4302  2ab8		       29 02		      AND	#2
   4303  2aba		       d0 08		      BNE	.skip161then
   4304  2abc				   .condpart162
   4305  2abc		       a9 01		      LDA	#1
   4306  2abe		       85 e7		      STA	Ch0_Sound
   4307  2ac0		       a9 0f		      LDA	#15
   4308  2ac2		       85 e8		      STA	Ch0_Duration
   4309  2ac4				   .skip161then
   4310  2ac4				   .skip160then
   4311  2ac4				   .skip159then
   4312  2ac4				   .skipL0346
   4313  2ac4				   .L0347		;  if !Ch0_Sound then goto __Skip_Ch_0
   4314  2ac4
   4315  2ac4		       a5 e7		      LDA	Ch0_Sound
   4316  2ac6		       d0 03		      BNE	.skipL0347
   4317  2ac8				   .condpart163
   4318  2ac8		       4c 19 3b 	      jmp	.__Skip_Ch_0
   4319  2acb
   4320  2acb				   .skipL0347
   4321  2acb				   .L0348		;  Ch0_Duration  =  Ch0_Duration  -  1
   4322  2acb
   4323  2acb		       c6 e8		      DEC	Ch0_Duration
   4324  2acd				   .L0349		;  if !Ch0_Duration then goto __Clear_Ch_0
   4325  2acd
   4326  2acd		       a5 e8		      LDA	Ch0_Duration
   4327  2acf		       d0 03		      BNE	.skipL0349
   4328  2ad1				   .condpart164
   4329  2ad1		       4c 13 3b 	      jmp	.__Clear_Ch_0
   4330  2ad4
   4331  2ad4				   .skipL0349
   4332  2ad4				   .L0350		;  if Ch0_Sound  <>  1 then goto __Skip_Ch0_Sound_001
   4333  2ad4
   4334  2ad4		       a5 e7		      LDA	Ch0_Sound
   4335  2ad6		       c9 01		      CMP	#1
   4336  2ad8		       f0 03		      BEQ	.skipL0350
   4337  2ada				   .condpart165
   4338  2ada		       4c 10 3b 	      jmp	.__Skip_Ch0_Sound_001
   4339  2add
   4340  2add				   .skipL0350
   4341  2add				   .L0351		;  AUDC0  =  8  :  AUDV0  =  2  :  AUDF0  =  4
   4342  2add
   4343  2add		       a9 08		      LDA	#8
   4344  2adf		       85 15		      STA	AUDC0
   4345  2ae1		       a9 02		      LDA	#2
   4346  2ae3		       85 19		      STA	AUDV0
   4347  2ae5		       a9 04		      LDA	#4
   4348  2ae7		       85 17		      STA	AUDF0
   4349  2ae9				   .L0352		;  if Ch0_Duration  <	10 then AUDC0  =  6  :	AUDV0  =  2  :	AUDF0  =  12
   4350  2ae9
   4351  2ae9		       a5 e8		      LDA	Ch0_Duration
   4352  2aeb		       c9 0a		      CMP	#10
   4353  2aed		       b0 0c		      BCS	.skipL0352
   4354  2aef				   .condpart166
   4355  2aef		       a9 06		      LDA	#6
   4356  2af1		       85 15		      STA	AUDC0
   4357  2af3		       a9 02		      LDA	#2
   4358  2af5		       85 19		      STA	AUDV0
   4359  2af7		       a9 0c		      LDA	#12
   4360  2af9		       85 17		      STA	AUDF0
   4361  2afb				   .skipL0352
   4362  2afb				   .L0353		;  if Ch0_Duration  <	5 then AUDC0  =  6  :  AUDV0  =  1  :  AUDF0  =  14
   4363  2afb
   4364  2afb		       a5 e8		      LDA	Ch0_Duration
   4365  2afd		       c9 05		      CMP	#5
   4366  2aff		       b0 0c		      BCS	.skipL0353
   4367  2b01				   .condpart167
   4368  2b01		       a9 06		      LDA	#6
   4369  2b03		       85 15		      STA	AUDC0
   4370  2b05		       a9 01		      LDA	#1
   4371  2b07		       85 19		      STA	AUDV0
   4372  2b09		       a9 0e		      LDA	#14
   4373  2b0b		       85 17		      STA	AUDF0
   4374  2b0d				   .skipL0353
   4375  2b0d				   .L0354		;  goto __Skip_Ch_0
   4376  2b0d
   4377  2b0d		       4c 19 3b 	      jmp	.__Skip_Ch_0
   4378  2b10
   4379  2b10				   .__Skip_Ch0_Sound_001
   4380  2b10							; __Skip_Ch0_Sound_001
   4381  2b10
   4382  2b10				   .L0355		;  goto __Skip_Ch_0
   4383  2b10
   4384  2b10		       4c 19 3b 	      jmp	.__Skip_Ch_0
   4385  2b13
   4386  2b13				   .__Clear_Ch_0
   4387  2b13							; __Clear_Ch_0
   4388  2b13
   4389  2b13				   .L0356		;  Ch0_Sound  =  0  :	AUDV0  =  0
   4390  2b13
   4391  2b13		       a9 00		      LDA	#0
   4392  2b15		       85 e7		      STA	Ch0_Sound
   4393  2b17		       85 19		      STA	AUDV0
   4394  2b19				   .__Skip_Ch_0
   4395  2b19							; __Skip_Ch_0
   4396  2b19
   4397  2b19				   .L0357		;  if !Bit4_gameover{4} then if joy0fire  &&  !Bit1_missleOn{1} then if EnemyHit  <  1 then Bit1_missleOn{1}  =  1  :	missile0x  =  player0x	+  5 :	missile0y  =  player0y
   4398  2b19
   4399  2b19		       a5 ea		      LDA	Bit4_gameover
   4400  2b1b		       29 10		      AND	#16
   4401  2b1d		       d0 21		      BNE	.skipL0357
   4402  2b1f				   .condpart168
   4403  2b1f		       24 0c		      bit	INPT4
   4404  2b21		       30 1d		      BMI	.skip168then
   4405  2b23				   .condpart169
   4406  2b23		       a5 ea		      LDA	Bit1_missleOn
   4407  2b25		       29 02		      AND	#2
   4408  2b27		       d0 17		      BNE	.skip169then
   4409  2b29				   .condpart170
   4410  2b29		       a5 d9		      LDA	EnemyHit
   4411  2b2b		       c9 01		      CMP	#1
   4412  2b2d		       b0 11		      BCS	.skip170then
   4413  2b2f				   .condpart171
   4414  2b2f		       a5 ea		      LDA	Bit1_missleOn
   4415  2b31		       09 02		      ORA	#2
   4416  2b33		       85 ea		      STA	Bit1_missleOn
   4417  2b35		       a5 80		      LDA	player0x
   4418  2b37		       18		      CLC
   4419  2b38		       69 05		      ADC	#5
   4420  2b3a		       85 82		      STA	missile0x
   4421  2b3c		       a5 99		      LDA	player0y
   4422  2b3e		       85 bf		      STA	missile0y
   4423  2b40				   .skip170then
   4424  2b40				   .skip169then
   4425  2b40				   .skip168then
   4426  2b40				   .skipL0357
   4427  2b40				   .
   4428  2b40							; 
   4429  2b40
   4430  2b40				   .__Explosion
   4431  2b40							; __Explosion
   4432  2b40
   4433  2b40				   .L0358		;  if Bit5_hit{5}  &&	!Ch1_Sound then Ch1_Sound  =  1  :  Ch1_Duration  =  30
   4434  2b40
   4435  2b40		       a5 ea		      LDA	Bit5_hit
   4436  2b42		       29 20		      AND	#32
   4437  2b44		       f0 0c		      BEQ	.skipL0358
   4438  2b46				   .condpart172
   4439  2b46		       a5 da		      LDA	Ch1_Sound
   4440  2b48		       d0 08		      BNE	.skip172then
   4441  2b4a				   .condpart173
   4442  2b4a		       a9 01		      LDA	#1
   4443  2b4c		       85 da		      STA	Ch1_Sound
   4444  2b4e		       a9 1e		      LDA	#30
   4445  2b50		       85 db		      STA	Ch1_Duration
   4446  2b52				   .skip172then
   4447  2b52				   .skipL0358
   4448  2b52				   .L0359		;  if !Ch1_Sound then goto __Skip_Fire
   4449  2b52
   4450  2b52		       a5 da		      LDA	Ch1_Sound
   4451  2b54		       d0 03		      BNE	.skipL0359
   4452  2b56				   .condpart174
   4453  2b56		       4c b1 3b 	      jmp	.__Skip_Fire
   4454  2b59
   4455  2b59				   .skipL0359
   4456  2b59				   .L0360		;  Ch1_Duration  =  Ch1_Duration  -  1
   4457  2b59
   4458  2b59		       c6 db		      DEC	Ch1_Duration
   4459  2b5b				   .L0361		;  if !Ch1_Duration then goto __Exp_Clear_Ch_1
   4460  2b5b
   4461  2b5b		       a5 db		      LDA	Ch1_Duration
   4462  2b5d		       d0 03		      BNE	.skipL0361
   4463  2b5f				   .condpart175
   4464  2b5f		       4c a1 3b 	      jmp	.__Exp_Clear_Ch_1
   4465  2b62
   4466  2b62				   .skipL0361
   4467  2b62				   .L0362		;  if Ch1_Sound  <>  1 then goto __Exp_Skip_Ch0_Sound_001
   4468  2b62
   4469  2b62		       a5 da		      LDA	Ch1_Sound
   4470  2b64		       c9 01		      CMP	#1
   4471  2b66		       f0 03		      BEQ	.skipL0362
   4472  2b68				   .condpart176
   4473  2b68		       4c 9e 3b 	      jmp	.__Exp_Skip_Ch0_Sound_001
   4474  2b6b
   4475  2b6b				   .skipL0362
   4476  2b6b				   .L0363		;  AUDC1  =  8  :  AUDV1  =  4  :  AUDF1  =  16
   4477  2b6b
   4478  2b6b		       a9 08		      LDA	#8
   4479  2b6d		       85 16		      STA	AUDC1
   4480  2b6f		       a9 04		      LDA	#4
   4481  2b71		       85 1a		      STA	AUDV1
   4482  2b73		       a9 10		      LDA	#16
   4483  2b75		       85 18		      STA	AUDF1
   4484  2b77				   .L0364		;  if Ch1_Duration  <	20 then AUDC1  =  8  :	AUDV1  =  2  :	AUDF1  =  24
   4485  2b77
   4486  2b77		       a5 db		      LDA	Ch1_Duration
   4487  2b79		       c9 14		      CMP	#20
   4488  2b7b		       b0 0c		      BCS	.skipL0364
   4489  2b7d				   .condpart177
   4490  2b7d		       a9 08		      LDA	#8
   4491  2b7f		       85 16		      STA	AUDC1
   4492  2b81		       a9 02		      LDA	#2
   4493  2b83		       85 1a		      STA	AUDV1
   4494  2b85		       a9 18		      LDA	#24
   4495  2b87		       85 18		      STA	AUDF1
   4496  2b89				   .skipL0364
   4497  2b89				   .L0365		;  if Ch1_Duration  <	10 then AUDC1  =  8  :	AUDV1  =  2  :	AUDF1  =  16
   4498  2b89
   4499  2b89		       a5 db		      LDA	Ch1_Duration
   4500  2b8b		       c9 0a		      CMP	#10
   4501  2b8d		       b0 0c		      BCS	.skipL0365
   4502  2b8f				   .condpart178
   4503  2b8f		       a9 08		      LDA	#8
   4504  2b91		       85 16		      STA	AUDC1
   4505  2b93		       a9 02		      LDA	#2
   4506  2b95		       85 1a		      STA	AUDV1
   4507  2b97		       a9 10		      LDA	#16
   4508  2b99		       85 18		      STA	AUDF1
   4509  2b9b				   .skipL0365
   4510  2b9b				   .L0366		;  goto __Skip_Fire
   4511  2b9b
   4512  2b9b		       4c b1 3b 	      jmp	.__Skip_Fire
   4513  2b9e
   4514  2b9e				   .__Exp_Skip_Ch0_Sound_001
   4515  2b9e							; __Exp_Skip_Ch0_Sound_001
   4516  2b9e
   4517  2b9e				   .L0367		;  goto __Skip_Fire
   4518  2b9e
   4519  2b9e		       4c b1 3b 	      jmp	.__Skip_Fire
   4520  2ba1
   4521  2ba1				   .__Exp_Clear_Ch_1
   4522  2ba1							; __Exp_Clear_Ch_1
   4523  2ba1
   4524  2ba1				   .L0368		;  Ch1_Sound  =  0  :	AUDV1  =  0 :  AUDC1  =  0 :  AUDF1  =	0 :  Bit5_hit{5}  = 0
   4525  2ba1
   4526  2ba1		       a9 00		      LDA	#0
   4527  2ba3		       85 da		      STA	Ch1_Sound
   4528  2ba5		       85 1a		      STA	AUDV1
   4529  2ba7		       85 16		      STA	AUDC1
   4530  2ba9		       85 18		      STA	AUDF1
   4531  2bab		       a5 ea		      LDA	Bit5_hit
   4532  2bad		       29 df		      AND	#223
   4533  2baf		       85 ea		      STA	Bit5_hit
   4534  2bb1				   .
   4535  2bb1							; 
   4536  2bb1
   4537  2bb1				   .__Skip_Fire
   4538  2bb1							; __Skip_Fire
   4539  2bb1
   4540  2bb1				   .L0369		;  if Bit1_missleOn{1} then missile0y	=  missile0y  -  PlayerMissileRate
   4541  2bb1
   4542  2bb1		       a5 ea		      LDA	Bit1_missleOn
   4543  2bb3		       29 02		      AND	#2
   4544  2bb5		       f0 07		      BEQ	.skipL0369
   4545  2bb7				   .condpart179
   4546  2bb7		       a5 bf		      LDA	missile0y
   4547  2bb9		       38		      SEC
   4548  2bba		       e5 f0		      SBC	PlayerMissileRate
   4549  2bbc		       85 bf		      STA	missile0y
   4550  2bbe				   .skipL0369
   4551  2bbe				   .L0370		;  if missile0y  <  7 then Bit1_missleOn{1}  =  0 :  missile0x  = 200 :  missile0y  =	200
   4552  2bbe
   4553  2bbe		       a5 bf		      LDA	missile0y
   4554  2bc0		       c9 07		      CMP	#7
   4555  2bc2		       b0 0c		      BCS	.skipL0370
   4556  2bc4				   .condpart180
   4557  2bc4		       a5 ea		      LDA	Bit1_missleOn
   4558  2bc6		       29 fd		      AND	#253
   4559  2bc8		       85 ea		      STA	Bit1_missleOn
   4560  2bca		       a9 c8		      LDA	#200
   4561  2bcc		       85 82		      STA	missile0x
   4562  2bce		       85 bf		      STA	missile0y
   4563  2bd0				   .skipL0370
   4564  2bd0				   .L0371		;  goto __EnemyFire
   4565  2bd0
   4566  2bd0		       4c 22 3c 	      jmp	.__EnemyFire
   4567  2bd3
   4568  2bd3				   .
   4569  2bd3							; 
   4570  2bd3
   4571  2bd3				   .__Score
   4572  2bd3							; __Score
   4573  2bd3
   4574  2bd3				   .L0372		;  Bit5_hit{5}  =  1
   4575  2bd3
   4576  2bd3		       a5 ea		      LDA	Bit5_hit
   4577  2bd5		       09 20		      ORA	#32
   4578  2bd7		       85 ea		      STA	Bit5_hit
   4579  2bd9				   .L0373		;  if !Bit6_PLayer3Direction{6} then Points  = $35
   4580  2bd9
   4581  2bd9		       24 ea		      BIT	Bit6_PLayer3Direction
   4582  2bdb		       70 04		      BVS	.skipL0373
   4583  2bdd				   .condpart181
   4584  2bdd		       a9 35		      LDA	#$35
   4585  2bdf		       85 d4		      STA	Points
   4586  2be1				   .skipL0373
   4587  2be1				   .L0374		;  frame  =  0
   4588  2be1
   4589  2be1		       a9 00		      LDA	#0
   4590  2be3		       85 d6		      STA	frame
   4591  2be5				   .L0375		;  dec score  = score	+  Points
   4592  2be5
   4593  2be5		       f8		      SED
   4594  2be6		       f8		      SED
   4595  2be7		       18		      CLC
   4596  2be8		       a5 ba		      LDA	score+2
   4597  2bea		       65 d4		      ADC	Points
   4598  2bec
   4599  2bec		       85 ba		      STA	score+2
   4600  2bee		       a5 b9		      LDA	score+1
   4601  2bf0		       69 00		      ADC	#0
   4602  2bf2		       85 b9		      STA	score+1
   4603  2bf4		       a5 b8		      LDA	score
   4604  2bf6		       69 00		      ADC	#0
   4605  2bf8		       85 b8		      STA	score
   4606  2bfa		       d8		      CLD
   4607  2bfb		       d8		      CLD
   4608  2bfc				   .L0376		;  missile0x  =  200  :  missile0y  =	200
   4609  2bfc
   4610  2bfc		       a9 c8		      LDA	#200
   4611  2bfe		       85 82		      STA	missile0x
   4612  2c00		       85 bf		      STA	missile0y
   4613  2c02				   .L0377		;  Bit1_missleOn{1} = 0
   4614  2c02
   4615  2c02		       a5 ea		      LDA	Bit1_missleOn
   4616  2c04		       29 fd		      AND	#253
   4617  2c06		       85 ea		      STA	Bit1_missleOn
   4618  2c08				   .L0378		;  for Timer  =  1 to 10
   4619  2c08
   4620  2c08		       a9 01		      LDA	#1
   4621  2c0a		       85 e4		      STA	Timer
   4622  2c0c				   .L0378forTimer
   4623  2c0c				   .L0379		;  next
   4624  2c0c
   4625  2c0c		       a5 e4		      LDA	Timer
   4626  2c0e		       c9 0a		      CMP	#10
   4627  2c10
   4628  2c10		       e6 e4		      INC	Timer
   4629  2c12					      if	((* - .L0378forTimer) < 127) && ((* - .L0378forTimer) > -128)
   4630  2c12		       90 f8		      bcc	.L0378forTimer
   4631  2c14				  -	      else
   4632  2c14				  -	      bcs	.6skipL0378forTimer
   4633  2c14				  -	      jmp	.L0378forTimer
   4634  2c14				  -.6skipL0378forTimer
   4635  2c14					      endif
   4636  2c14				   .L0380		;  Points = 0
   4637  2c14
   4638  2c14		       a9 00		      LDA	#0
   4639  2c16		       85 d4		      STA	Points
   4640  2c18				   .L0381		;  Ch1_Sound  =  0  :	AUDV1  =  0 :  AUDC1  =  0 :  AUDF1  =	0
   4641  2c18
   4642  2c18		       a9 00		      LDA	#0
   4643  2c1a		       85 da		      STA	Ch1_Sound
   4644  2c1c		       85 1a		      STA	AUDV1
   4645  2c1e		       85 16		      STA	AUDC1
   4646  2c20		       85 18		      STA	AUDF1
   4647  2c22				   .
   4648  2c22							; 
   4649  2c22
   4650  2c22				   .__EnemyFire
   4651  2c22							; __EnemyFire
   4652  2c22
   4653  2c22				   .L0382		;  if !Bit3_ShootorNot{3} then goto __EnemyShoot
   4654  2c22
   4655  2c22		       a5 ea		      LDA	Bit3_ShootorNot
   4656  2c24		       29 08		      AND	#8
   4657  2c26		       d0 03		      BNE	.skipL0382
   4658  2c28				   .condpart182
   4659  2c28		       4c a2 3c 	      jmp	.__EnemyShoot
   4660  2c2b
   4661  2c2b				   .skipL0382
   4662  2c2b				   .L0383		;  if missile1y  >  170 then missile1y = 200 : 
   4663  2c2b
   4664  2c2b		       a9 aa		      LDA	#170
   4665  2c2d		       c5 c0		      CMP	missile1y
   4666  2c2f		       b0 04		      BCS	.skipL0383
   4667  2c31				   .condpart183
   4668  2c31		       a9 c8		      LDA	#200
   4669  2c33		       85 c0		      STA	missile1y
   4670  2c35				   .skipL0383
   4671  2c35				   .L0384		;  if level  <= 5 then if !Bit4_gameover{4} then if Bit3_ShootorNot{3} then missile1y	=  missile1y  +  3
   4672  2c35
   4673  2c35		       a9 05		      LDA	#5
   4674  2c37		       c5 dc		      CMP	level
   4675  2c39		       90 13		      BCC	.skipL0384
   4676  2c3b				   .condpart184
   4677  2c3b		       a5 ea		      LDA	Bit4_gameover
   4678  2c3d		       29 10		      AND	#16
   4679  2c3f		       d0 0d		      BNE	.skip184then
   4680  2c41				   .condpart185
   4681  2c41		       a5 ea		      LDA	Bit3_ShootorNot
   4682  2c43		       29 08		      AND	#8
   4683  2c45		       f0 07		      BEQ	.skip185then
   4684  2c47				   .condpart186
   4685  2c47		       a5 c0		      LDA	missile1y
   4686  2c49		       18		      CLC
   4687  2c4a		       69 03		      ADC	#3
   4688  2c4c		       85 c0		      STA	missile1y
   4689  2c4e				   .skip185then
   4690  2c4e				   .skip184then
   4691  2c4e				   .skipL0384
   4692  2c4e				   .L0385		;  if level  > 5 then if !Bit4_gameover{4} then if Bit3_ShootorNot{3} then missile1y  =  missile1y  +	5
   4693  2c4e
   4694  2c4e		       a9 05		      LDA	#5
   4695  2c50		       c5 dc		      CMP	level
   4696  2c52		       b0 13		      BCS	.skipL0385
   4697  2c54				   .condpart187
   4698  2c54		       a5 ea		      LDA	Bit4_gameover
   4699  2c56		       29 10		      AND	#16
   4700  2c58		       d0 0d		      BNE	.skip187then
   4701  2c5a				   .condpart188
   4702  2c5a		       a5 ea		      LDA	Bit3_ShootorNot
   4703  2c5c		       29 08		      AND	#8
   4704  2c5e		       f0 07		      BEQ	.skip188then
   4705  2c60				   .condpart189
   4706  2c60		       a5 c0		      LDA	missile1y
   4707  2c62		       18		      CLC
   4708  2c63		       69 05		      ADC	#5
   4709  2c65		       85 c0		      STA	missile1y
   4710  2c67				   .skip188then
   4711  2c67				   .skip187then
   4712  2c67				   .skipL0385
   4713  2c67				   .L0386		;  if missile1y  >  170 then missile1y = 200 :  Bit3_ShootorNot{3} = 0
   4714  2c67
   4715  2c67		       a9 aa		      LDA	#170
   4716  2c69		       c5 c0		      CMP	missile1y
   4717  2c6b		       b0 0a		      BCS	.skipL0386
   4718  2c6d				   .condpart190
   4719  2c6d		       a9 c8		      LDA	#200
   4720  2c6f		       85 c0		      STA	missile1y
   4721  2c71		       a5 ea		      LDA	Bit3_ShootorNot
   4722  2c73		       29 f7		      AND	#247
   4723  2c75		       85 ea		      STA	Bit3_ShootorNot
   4724  2c77				   .skipL0386
   4725  2c77				   .L0387		;  if missile1y  =  player0y then if missile1x  >  player0x  - 8  &&  missile1x  <  player0x  + 8 then Damage	= 5  :	PlayerDamage  = 0  :  goto __EnemyScore
   4726  2c77
   4727  2c77		       a5 c0		      LDA	missile1y
   4728  2c79		       c5 99		      CMP	player0y
   4729  2c7b		       d0 22		      BNE	.skipL0387
   4730  2c7d				   .condpart191
   4731  2c7d							; complex condition detected
   4732  2c7d		       a5 80		      LDA	player0x
   4733  2c7f		       38		      SEC
   4734  2c80		       e9 08		      SBC	#8
   4735  2c82							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4736  2c82		       c5 83		      CMP	missile1x
   4737  2c84		       b0 19		      BCS	.skip191then
   4738  2c86				   .condpart192
   4739  2c86							; complex condition detected
   4740  2c86		       a5 80		      LDA	player0x
   4741  2c88		       18		      CLC
   4742  2c89		       69 08		      ADC	#8
   4743  2c8b		       48		      PHA
   4744  2c8c		       ba		      TSX
   4745  2c8d		       68		      PLA
   4746  2c8e		       a5 83		      LDA	missile1x
   4747  2c90		       d5 01		      CMP	1,x
   4748  2c92		       b0 0b		      BCS	.skip192then
   4749  2c94				   .condpart193
   4750  2c94		       a9 05		      LDA	#5
   4751  2c96		       85 ed		      STA	Damage
   4752  2c98		       a9 00		      LDA	#0
   4753  2c9a		       85 dd		      STA	PlayerDamage
   4754  2c9c		       4c 17 3d 	      jmp	.__EnemyScore
   4755  2c9f
   4756  2c9f				   .skip192then
   4757  2c9f				   .skip191then
   4758  2c9f				   .skipL0387
   4759  2c9f				   .L0388		;  goto __Resume
   4760  2c9f
   4761  2c9f		       4c 52 3d 	      jmp	.__Resume
   4762  2ca2
   4763  2ca2				   .
   4764  2ca2							; 
   4765  2ca2
   4766  2ca2				   .__EnemyShoot
   4767  2ca2							; __EnemyShoot
   4768  2ca2
   4769  2ca2				   .L0389		;  if !Bit4_gameover{4} then if player3x - 10	<  player0x  &&  player3x + 10	>  player0x then missile1x  =  player3x  +  EnemyMissilerate  :  missile1y  =  player3y
   4770  2ca2
   4771  2ca2		       a5 ea		      LDA	Bit4_gameover
   4772  2ca4		       29 10		      AND	#16
   4773  2ca6		       d0 22		      BNE	.skipL0389
   4774  2ca8				   .condpart194
   4775  2ca8							; complex condition detected
   4776  2ca8		       a5 92		      LDA	player3x
   4777  2caa		       38		      SEC
   4778  2cab		       e9 0a		      SBC	#10
   4779  2cad							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4780  2cad		       c5 80		      CMP	player0x
   4781  2caf		       b0 19		      BCS	.skip194then
   4782  2cb1				   .condpart195
   4783  2cb1							; complex condition detected
   4784  2cb1		       a5 92		      LDA	player3x
   4785  2cb3		       18		      CLC
   4786  2cb4		       69 0a		      ADC	#10
   4787  2cb6		       48		      PHA
   4788  2cb7		       ba		      TSX
   4789  2cb8		       68		      PLA
   4790  2cb9		       a5 80		      LDA	player0x
   4791  2cbb		       d5 01		      CMP	1,x
   4792  2cbd		       b0 0b		      BCS	.skip195then
   4793  2cbf				   .condpart196
   4794  2cbf		       a5 92		      LDA	player3x
   4795  2cc1		       18		      CLC
   4796  2cc2		       65 ef		      ADC	EnemyMissilerate
   4797  2cc4		       85 83		      STA	missile1x
   4798  2cc6		       a5 9c		      LDA	player3y
   4799  2cc8		       85 c0		      STA	missile1y
   4800  2cca				   .skip195then
   4801  2cca				   .skip194then
   4802  2cca				   .skipL0389
   4803  2cca				   .L0390		;  Bit3_ShootorNot{3} = 1
   4804  2cca
   4805  2cca		       a5 ea		      LDA	Bit3_ShootorNot
   4806  2ccc		       09 08		      ORA	#8
   4807  2cce		       85 ea		      STA	Bit3_ShootorNot
   4808  2cd0				   .L0391		;  goto __Resume
   4809  2cd0
   4810  2cd0		       4c 52 3d 	      jmp	.__Resume
   4811  2cd3
   4812  2cd3				   .
   4813  2cd3							; 
   4814  2cd3
   4815  2cd3				   .__EnemyBlock
   4816  2cd3							; __EnemyBlock
   4817  2cd3
   4818  2cd3				   .L0392		;  frame  =  0
   4819  2cd3
   4820  2cd3		       a9 00		      LDA	#0
   4821  2cd5		       85 d6		      STA	frame
   4822  2cd7				   .L0393		;  if joy0fire then PlayerDamage  = 0	:  Damage  =  $5  :  goto __EnemyScore
   4823  2cd7
   4824  2cd7		       24 0c		      bit	INPT4
   4825  2cd9		       30 0b		      BMI	.skipL0393
   4826  2cdb				   .condpart197
   4827  2cdb		       a9 00		      LDA	#0
   4828  2cdd		       85 dd		      STA	PlayerDamage
   4829  2cdf		       a9 05		      LDA	#$5
   4830  2ce1		       85 ed		      STA	Damage
   4831  2ce3		       4c 17 3d 	      jmp	.__EnemyScore
   4832  2ce6
   4833  2ce6				   .skipL0393
   4834  2ce6				   .L0394		;  if !joy0left  ||  !joy0right then Points  =  10
   4835  2ce6
   4836  2ce6		       2c 80 02 	      bit	SWCHA
   4837  2ce9		       50 03		      BVC	.skipL0394
   4838  2ceb				   .condpart198
   4839  2ceb		       4c f3 3c 	      jmp	.condpart199
   4840  2cee				   .skipL0394
   4841  2cee		       2c 80 02 	      bit	SWCHA
   4842  2cf1		       10 04		      BPL	.skip79OR
   4843  2cf3				   .condpart199
   4844  2cf3		       a9 0a		      LDA	#10
   4845  2cf5		       85 d4		      STA	Points
   4846  2cf7				   .skip79OR
   4847  2cf7				   .L0395		;  if joy0left  ||  joy0right then if !joy0fire then Points  =  $5 :  PlayerDamage  = 2  :  goto __Score
   4848  2cf7
   4849  2cf7		       2c 80 02 	      bit	SWCHA
   4850  2cfa		       70 03		      BVS	.skipL0395
   4851  2cfc				   .condpart200
   4852  2cfc		       4c 04 3d 	      jmp	.condpart201
   4853  2cff				   .skipL0395
   4854  2cff		       2c 80 02 	      bit	SWCHA
   4855  2d02		       30 0f		      BMI	.skip80OR
   4856  2d04				   .condpart201
   4857  2d04		       24 0c		      bit	INPT4
   4858  2d06		       10 0b		      BPL	.skip201then
   4859  2d08				   .condpart202
   4860  2d08		       a9 05		      LDA	#$5
   4861  2d0a		       85 d4		      STA	Points
   4862  2d0c		       a9 02		      LDA	#2
   4863  2d0e		       85 dd		      STA	PlayerDamage
   4864  2d10		       4c d3 3b 	      jmp	.__Score
   4865  2d13
   4866  2d13				   .skip201then
   4867  2d13				   .skip80OR
   4868  2d13				   .L0396		;  PlayerDamage  = 1
   4869  2d13
   4870  2d13		       a9 01		      LDA	#1
   4871  2d15		       85 dd		      STA	PlayerDamage
   4872  2d17				   .
   4873  2d17							; 
   4874  2d17
   4875  2d17				   .__EnemyScore
   4876  2d17							; __EnemyScore
   4877  2d17
   4878  2d17				   .L0397		;  if PlayerDamage  <	1 then PlayerHealth  =	PlayerHealth  -  Damage
   4879  2d17
   4880  2d17		       a5 dd		      LDA	PlayerDamage
   4881  2d19		       c9 01		      CMP	#1
   4882  2d1b		       b0 07		      BCS	.skipL0397
   4883  2d1d				   .condpart203
   4884  2d1d		       a5 d5		      LDA	PlayerHealth
   4885  2d1f		       38		      SEC
   4886  2d20		       e5 ed		      SBC	Damage
   4887  2d22		       85 d5		      STA	PlayerHealth
   4888  2d24				   .skipL0397
   4889  2d24				   .L0398		;  PlayerDamage  =  1
   4890  2d24
   4891  2d24		       a9 01		      LDA	#1
   4892  2d26		       85 dd		      STA	PlayerDamage
   4893  2d28				   .L0399		;  Points = 0
   4894  2d28
   4895  2d28		       a9 00		      LDA	#0
   4896  2d2a		       85 d4		      STA	Points
   4897  2d2c				   .L0400		;  missile1y  = 200 :	missile1x =  200
   4898  2d2c
   4899  2d2c		       a9 c8		      LDA	#200
   4900  2d2e		       85 c0		      STA	missile1y
   4901  2d30		       85 83		      STA	missile1x
   4902  2d32				   .L0401		;  gosub __P0Explosion bank5
   4903  2d32
   4904  2d32		       85 81		      sta	temp7
   4905  2d34		       a9 3d		      lda	#>(ret_point6-1)
   4906  2d36		       48		      pha
   4907  2d37		       a9 49		      lda	#<(ret_point6-1)
   4908  2d39		       48		      pha
   4909  2d3a		       a9 93		      lda	#>(.__P0Explosion-1)
   4910  2d3c		       48		      pha
   4911  2d3d		       a9 67		      lda	#<(.__P0Explosion-1)
   4912  2d3f		       48		      pha
   4913  2d40		       a5 81		      lda	temp7
   4914  2d42		       48		      pha
   4915  2d43		       8a		      txa
   4916  2d44		       48		      pha
   4917  2d45		       a2 05		      ldx	#5
   4918  2d47		       4c ee df 	      jmp	BS_jsr
   4919  2d4a				   ret_point6
   4920  2d4a				   .L0402		;  AUDV1  =  0 :  AUDC1  =  0 :  AUDF1  =  0
   4921  2d4a
   4922  2d4a		       a9 00		      LDA	#0
   4923  2d4c		       85 1a		      STA	AUDV1
   4924  2d4e		       85 16		      STA	AUDC1
   4925  2d50		       85 18		      STA	AUDF1
   4926  2d52				   .__Resume
   4927  2d52							; __Resume
   4928  2d52
   4929  2d52				   .L0403		;  drawscreen
   4930  2d52
   4931  2d52		       85 81		      sta	temp7
   4932  2d54		       a9 3d		      lda	#>(ret_point7-1)
   4933  2d56		       48		      pha
   4934  2d57		       a9 69		      lda	#<(ret_point7-1)
   4935  2d59		       48		      pha
   4936  2d5a		       a9 19		      lda	#>(drawscreen-1)
   4937  2d5c		       48		      pha
   4938  2d5d		       a9 48		      lda	#<(drawscreen-1)
   4939  2d5f		       48		      pha
   4940  2d60		       a5 81		      lda	temp7
   4941  2d62		       48		      pha
   4942  2d63		       8a		      txa
   4943  2d64		       48		      pha
   4944  2d65		       a2 01		      ldx	#1
   4945  2d67		       4c ee df 	      jmp	BS_jsr
   4946  2d6a				   ret_point7
   4947  2d6a				   .L0404		;  PF0 = %00000000
   4948  2d6a
   4949  2d6a		       a9 00		      LDA	#%00000000
   4950  2d6c		       85 0d		      STA	PF0
   4951  2d6e				   .L0405		;  goto __Main_Loop
   4952  2d6e
   4953  2d6e		       4c cb 32 	      jmp	.__Main_Loop
   4954  2d71
   4955  2d71				   .
   4956  2d71							; 
   4957  2d71
   4958  2d71				   .L0406		;  bank 3
   4959  2d71
   4960  2d71					      if	ECHO2
      611 bytes of ROM space left in bank 2
   4961  2d71					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
   4962  2d71					      endif
   4963  2d71		       00 01	   ECHO2      =	1
   4964  2fd4					      ORG	$2FF4-bscode_length
   4965  2fd4					      RORG	$3FF4-bscode_length
   4966  2fd4		       a2 ff	   start_bank2 ldx	#$ff
   4967  2fd6					      ifconst	FASTFETCH	; using DPC+
   4968  2fd6		       8e 58 10 	      stx	FASTFETCH
   4969  2fd9					      endif
   4970  2fd9		       9a		      txs
   4971  2fda				  -	      if	bankswitch == 64
   4972  2fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   4973  2fda					      else
   4974  2fda		       a9 18		      lda	#>(start-1)
   4975  2fdc					      endif
   4976  2fdc		       48		      pha
   4977  2fdd		       a9 e3		      lda	#<(start-1)
   4978  2fdf		       48		      pha
   4979  2fe0		       48		      pha
   4980  2fe1		       8a		      txa
   4981  2fe2		       48		      pha
   4982  2fe3		       ba		      tsx
   4983  2fe4					      if	bankswitch != 64
   4984  2fe4		       b5 04		      lda	4,x	; get high byte of return address
   4985  2fe6		       2a		      rol
   4986  2fe7		       2a		      rol
   4987  2fe8		       2a		      rol
   4988  2fe9		       2a		      rol
   4989  2fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   4990  2fec		       aa		      tax
   4991  2fed		       e8		      inx
   4992  2fee				  -	      else
   4993  2fee				  -	      lda	4,x	; get high byte of return address
   4994  2fee				  -	      tay
   4995  2fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   4996  2fee				  -	      sta	4,x
   4997  2fee				  -	      tya
   4998  2fee				  -	      lsr
   4999  2fee				  -	      lsr
   5000  2fee				  -	      lsr
   5001  2fee				  -	      lsr
   5002  2fee				  -	      tax
   5003  2fee				  -	      inx
   5004  2fee					      endif
   5005  2fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   5006  2ff1		       68		      pla
   5007  2ff2		       aa		      tax
   5008  2ff3		       68		      pla
   5009  2ff4		       60		      rts
   5010  2ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   5011  2ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   5012  2ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   5013  2ff5					      endif
   5014  2ffc					      ORG	$2FFC
   5015  2ffc					      RORG	$3FFC
   5016  2ffc		       d4 3f		      .word.w	(start_bank2 & $ffff)
   5017  2ffe		       d4 3f		      .word.w	(start_bank2 & $ffff)
   5018  3000					      ORG	$3000
   5019  3000					      RORG	$5000
   5020  3000					      repeat	129
   5021  3000		       00		      .byte.b	0
   5020  3000					      repend
   5021  3001		       00		      .byte.b	0
   5020  3001					      repend
   5021  3002		       00		      .byte.b	0
   5020  3002					      repend
   5021  3003		       00		      .byte.b	0
   5020  3003					      repend
   5021  3004		       00		      .byte.b	0
   5020  3004					      repend
   5021  3005		       00		      .byte.b	0
   5020  3005					      repend
   5021  3006		       00		      .byte.b	0
   5020  3006					      repend
   5021  3007		       00		      .byte.b	0
   5020  3007					      repend
   5021  3008		       00		      .byte.b	0
   5020  3008					      repend
   5021  3009		       00		      .byte.b	0
   5020  3009					      repend
   5021  300a		       00		      .byte.b	0
   5020  300a					      repend
   5021  300b		       00		      .byte.b	0
   5020  300b					      repend
   5021  300c		       00		      .byte.b	0
   5020  300c					      repend
   5021  300d		       00		      .byte.b	0
   5020  300d					      repend
   5021  300e		       00		      .byte.b	0
   5020  300e					      repend
   5021  300f		       00		      .byte.b	0
   5020  300f					      repend
   5021  3010		       00		      .byte.b	0
   5020  3010					      repend
   5021  3011		       00		      .byte.b	0
   5020  3011					      repend
   5021  3012		       00		      .byte.b	0
   5020  3012					      repend
   5021  3013		       00		      .byte.b	0
   5020  3013					      repend
   5021  3014		       00		      .byte.b	0
   5020  3014					      repend
   5021  3015		       00		      .byte.b	0
   5020  3015					      repend
   5021  3016		       00		      .byte.b	0
   5020  3016					      repend
   5021  3017		       00		      .byte.b	0
   5020  3017					      repend
   5021  3018		       00		      .byte.b	0
   5020  3018					      repend
   5021  3019		       00		      .byte.b	0
   5020  3019					      repend
   5021  301a		       00		      .byte.b	0
   5020  301a					      repend
   5021  301b		       00		      .byte.b	0
   5020  301b					      repend
   5021  301c		       00		      .byte.b	0
   5020  301c					      repend
   5021  301d		       00		      .byte.b	0
   5020  301d					      repend
   5021  301e		       00		      .byte.b	0
   5020  301e					      repend
   5021  301f		       00		      .byte.b	0
   5020  301f					      repend
   5021  3020		       00		      .byte.b	0
   5020  3020					      repend
   5021  3021		       00		      .byte.b	0
   5020  3021					      repend
   5021  3022		       00		      .byte.b	0
   5020  3022					      repend
   5021  3023		       00		      .byte.b	0
   5020  3023					      repend
   5021  3024		       00		      .byte.b	0
   5020  3024					      repend
   5021  3025		       00		      .byte.b	0
   5020  3025					      repend
   5021  3026		       00		      .byte.b	0
   5020  3026					      repend
   5021  3027		       00		      .byte.b	0
   5020  3027					      repend
   5021  3028		       00		      .byte.b	0
   5020  3028					      repend
   5021  3029		       00		      .byte.b	0
   5020  3029					      repend
   5021  302a		       00		      .byte.b	0
   5020  302a					      repend
   5021  302b		       00		      .byte.b	0
   5020  302b					      repend
   5021  302c		       00		      .byte.b	0
   5020  302c					      repend
   5021  302d		       00		      .byte.b	0
   5020  302d					      repend
   5021  302e		       00		      .byte.b	0
   5020  302e					      repend
   5021  302f		       00		      .byte.b	0
   5020  302f					      repend
   5021  3030		       00		      .byte.b	0
   5020  3030					      repend
   5021  3031		       00		      .byte.b	0
   5020  3031					      repend
   5021  3032		       00		      .byte.b	0
   5020  3032					      repend
   5021  3033		       00		      .byte.b	0
   5020  3033					      repend
   5021  3034		       00		      .byte.b	0
   5020  3034					      repend
   5021  3035		       00		      .byte.b	0
   5020  3035					      repend
   5021  3036		       00		      .byte.b	0
   5020  3036					      repend
   5021  3037		       00		      .byte.b	0
   5020  3037					      repend
   5021  3038		       00		      .byte.b	0
   5020  3038					      repend
   5021  3039		       00		      .byte.b	0
   5020  3039					      repend
   5021  303a		       00		      .byte.b	0
   5020  303a					      repend
   5021  303b		       00		      .byte.b	0
   5020  303b					      repend
   5021  303c		       00		      .byte.b	0
   5020  303c					      repend
   5021  303d		       00		      .byte.b	0
   5020  303d					      repend
   5021  303e		       00		      .byte.b	0
   5020  303e					      repend
   5021  303f		       00		      .byte.b	0
   5020  303f					      repend
   5021  3040		       00		      .byte.b	0
   5020  3040					      repend
   5021  3041		       00		      .byte.b	0
   5020  3041					      repend
   5021  3042		       00		      .byte.b	0
   5020  3042					      repend
   5021  3043		       00		      .byte.b	0
   5020  3043					      repend
   5021  3044		       00		      .byte.b	0
   5020  3044					      repend
   5021  3045		       00		      .byte.b	0
   5020  3045					      repend
   5021  3046		       00		      .byte.b	0
   5020  3046					      repend
   5021  3047		       00		      .byte.b	0
   5020  3047					      repend
   5021  3048		       00		      .byte.b	0
   5020  3048					      repend
   5021  3049		       00		      .byte.b	0
   5020  3049					      repend
   5021  304a		       00		      .byte.b	0
   5020  304a					      repend
   5021  304b		       00		      .byte.b	0
   5020  304b					      repend
   5021  304c		       00		      .byte.b	0
   5020  304c					      repend
   5021  304d		       00		      .byte.b	0
   5020  304d					      repend
   5021  304e		       00		      .byte.b	0
   5020  304e					      repend
   5021  304f		       00		      .byte.b	0
   5020  304f					      repend
   5021  3050		       00		      .byte.b	0
   5020  3050					      repend
   5021  3051		       00		      .byte.b	0
   5020  3051					      repend
   5021  3052		       00		      .byte.b	0
   5020  3052					      repend
   5021  3053		       00		      .byte.b	0
   5020  3053					      repend
   5021  3054		       00		      .byte.b	0
   5020  3054					      repend
   5021  3055		       00		      .byte.b	0
   5020  3055					      repend
   5021  3056		       00		      .byte.b	0
   5020  3056					      repend
   5021  3057		       00		      .byte.b	0
   5020  3057					      repend
   5021  3058		       00		      .byte.b	0
   5020  3058					      repend
   5021  3059		       00		      .byte.b	0
   5020  3059					      repend
   5021  305a		       00		      .byte.b	0
   5020  305a					      repend
   5021  305b		       00		      .byte.b	0
   5020  305b					      repend
   5021  305c		       00		      .byte.b	0
   5020  305c					      repend
   5021  305d		       00		      .byte.b	0
   5020  305d					      repend
   5021  305e		       00		      .byte.b	0
   5020  305e					      repend
   5021  305f		       00		      .byte.b	0
   5020  305f					      repend
   5021  3060		       00		      .byte.b	0
   5020  3060					      repend
   5021  3061		       00		      .byte.b	0
   5020  3061					      repend
   5021  3062		       00		      .byte.b	0
   5020  3062					      repend
   5021  3063		       00		      .byte.b	0
   5020  3063					      repend
   5021  3064		       00		      .byte.b	0
   5020  3064					      repend
   5021  3065		       00		      .byte.b	0
   5020  3065					      repend
   5021  3066		       00		      .byte.b	0
   5020  3066					      repend
   5021  3067		       00		      .byte.b	0
   5020  3067					      repend
   5021  3068		       00		      .byte.b	0
   5020  3068					      repend
   5021  3069		       00		      .byte.b	0
   5020  3069					      repend
   5021  306a		       00		      .byte.b	0
   5020  306a					      repend
   5021  306b		       00		      .byte.b	0
   5020  306b					      repend
   5021  306c		       00		      .byte.b	0
   5020  306c					      repend
   5021  306d		       00		      .byte.b	0
   5020  306d					      repend
   5021  306e		       00		      .byte.b	0
   5020  306e					      repend
   5021  306f		       00		      .byte.b	0
   5020  306f					      repend
   5021  3070		       00		      .byte.b	0
   5020  3070					      repend
   5021  3071		       00		      .byte.b	0
   5020  3071					      repend
   5021  3072		       00		      .byte.b	0
   5020  3072					      repend
   5021  3073		       00		      .byte.b	0
   5020  3073					      repend
   5021  3074		       00		      .byte.b	0
   5020  3074					      repend
   5021  3075		       00		      .byte.b	0
   5020  3075					      repend
   5021  3076		       00		      .byte.b	0
   5020  3076					      repend
   5021  3077		       00		      .byte.b	0
   5020  3077					      repend
   5021  3078		       00		      .byte.b	0
   5020  3078					      repend
   5021  3079		       00		      .byte.b	0
   5020  3079					      repend
   5021  307a		       00		      .byte.b	0
   5020  307a					      repend
   5021  307b		       00		      .byte.b	0
   5020  307b					      repend
   5021  307c		       00		      .byte.b	0
   5020  307c					      repend
   5021  307d		       00		      .byte.b	0
   5020  307d					      repend
   5021  307e		       00		      .byte.b	0
   5020  307e					      repend
   5021  307f		       00		      .byte.b	0
   5020  307f					      repend
   5021  3080		       00		      .byte.b	0
   5022  3081					      repend
   5023  3081				   .L0407		;  temp1 = temp1
   5024  3081
   5025  3081		       a5 cb		      LDA	temp1
   5026  3083		       85 cb		      STA	temp1
   5027  3085				   .__Bank3
   5028  3085							; __Bank3
   5029  3085
   5030  3085				   .
   5031  3085							; 
   5032  3085
   5033  3085				   .__Playfield1
   5034  3085							; __Playfield1
   5035  3085
   5036  3085				   .
   5037  3085							; 
   5038  3085
   5039  3085				   .L0408		;  if Bit4_gameover{4} then goto __GameOver bank4
   5040  3085
   5041  3085		       a5 ea		      LDA	Bit4_gameover
   5042  3087		       29 10		      AND	#16
   5043  3089		       f0 12		      BEQ	.skipL0408
   5044  308b				   .condpart204
   5045  308b		       85 81		      sta	temp7
   5046  308d		       a9 76		      lda	#>(.__GameOver-1)
   5047  308f		       48		      pha
   5048  3090		       a9 7f		      lda	#<(.__GameOver-1)
   5049  3092		       48		      pha
   5050  3093		       a5 81		      lda	temp7
   5051  3095		       48		      pha
   5052  3096		       8a		      txa
   5053  3097		       48		      pha
   5054  3098		       a2 04		      ldx	#4
   5055  309a		       4c ee df 	      jmp	BS_jsr
   5056  309d				   .skipL0408
   5057  309d				   .
   5058  309d							; 
   5059  309d
   5060  309d				   ._PlayfieldLevel1
   5061  309d							; _PlayfieldLevel1
   5062  309d
   5063  309d				   .L0409		;  playfield:
   5064  309d
   5065  309d		       a0 58		      ldy	#88
   5066  309f		       a9 00		      LDA	#<PF_data1
   5067  30a1		       a2 62		      LDX	#((>PF_data1) & $0f) | (((>PF_data1) / 2) & $70)
   5068  30a3		       85 81		      sta	temp7
   5069  30a5		       a9 50		      lda	#>(ret_point8-1)
   5070  30a7		       48		      pha
   5071  30a8		       a9 ba		      lda	#<(ret_point8-1)
   5072  30aa		       48		      pha
   5073  30ab		       a9 1e		      lda	#>(pfsetup-1)
   5074  30ad		       48		      pha
   5075  30ae		       a9 8c		      lda	#<(pfsetup-1)
   5076  30b0		       48		      pha
   5077  30b1		       a5 81		      lda	temp7
   5078  30b3		       48		      pha
   5079  30b4		       8a		      txa
   5080  30b5		       48		      pha
   5081  30b6		       a2 01		      ldx	#1
   5082  30b8		       4c ee df 	      jmp	BS_jsr
   5083  30bb				   ret_point8
   5084  30bb				   .
   5085  30bb							; 
   5086  30bb
   5087  30bb				   .L0410		;  goto __Colors
   5088  30bb
   5089  30bb		       4c be 50 	      jmp	.__Colors
   5090  30be
   5091  30be				   .
   5092  30be							; 
   5093  30be
   5094  30be				   .__Colors
   5095  30be							; __Colors
   5096  30be
   5097  30be				   .L0411		;  pfcolors:
   5098  30be
   5099  30be		       a9 08		      LDA	#<PFCOLS
   5100  30c0		       8d 50 10 	      STA	DF0LOW
   5101  30c3		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5102  30c5		       8d 68 10 	      STA	DF0HI
   5103  30c8		       a9 60		      LDA	#<playfieldcolorL0411
   5104  30ca		       8d 59 10 	      STA	PARAMETER
   5105  30cd		       a9 63		      LDA	#((>playfieldcolorL0411) & $0f) | (((>playfieldcolorL0411) / 2) & $70)
   5106  30cf		       8d 59 10 	      STA	PARAMETER
   5107  30d2		       a9 00		      LDA	#0
   5108  30d4		       8d 59 10 	      STA	PARAMETER
   5109  30d7		       a9 58		      LDA	#88
   5110  30d9		       8d 59 10 	      STA	PARAMETER
   5111  30dc		       a9 01		      LDA	#1
   5112  30de		       8d 5a 10 	      STA	CALLFUNCTION
   5113  30e1				   .L0412		;  return
   5114  30e1
   5115  30e1		       ba		      tsx
   5116  30e2		       b5 02		      lda	2,x	; check return address
   5117  30e4		       49 50		      eor	#(>*)	; vs. current PCH
   5118  30e6		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5119  30e8		       f0 03		      beq	*+5	; if equal, do normal return
   5120  30ea		       4c e0 df 	      JMP	BS_return
   5121  30ed		       60		      RTS
   5122  30ee				   .
   5123  30ee							; 
   5124  30ee
   5125  30ee				   .__PFColors
   5126  30ee							; __PFColors
   5127  30ee
   5128  30ee				   .
   5129  30ee							; 
   5130  30ee
   5131  30ee				   .L0413		;  player5x  = LEdge + 5  :  player5y	= 114
   5132  30ee
   5133  30ee		       a9 47		      LDA	#LEdge
   5134  30f0		       18		      CLC
   5135  30f1		       69 05		      ADC	#5
   5136  30f3		       85 94		      STA	player5x
   5137  30f5		       a9 72		      LDA	#114
   5138  30f7		       85 9e		      STA	player5y
   5139  30f9				   .
   5140  30f9							; 
   5141  30f9
   5142  30f9				   .L0414		;  pfcolors:
   5143  30f9
   5144  30f9		       a9 08		      LDA	#<PFCOLS
   5145  30fb		       8d 50 10 	      STA	DF0LOW
   5146  30fe		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5147  3100		       8d 68 10 	      STA	DF0HI
   5148  3103		       a9 b8		      LDA	#<playfieldcolorL0414
   5149  3105		       8d 59 10 	      STA	PARAMETER
   5150  3108		       a9 63		      LDA	#((>playfieldcolorL0414) & $0f) | (((>playfieldcolorL0414) / 2) & $70)
   5151  310a		       8d 59 10 	      STA	PARAMETER
   5152  310d		       a9 00		      LDA	#0
   5153  310f		       8d 59 10 	      STA	PARAMETER
   5154  3112		       a9 58		      LDA	#88
   5155  3114		       8d 59 10 	      STA	PARAMETER
   5156  3117		       a9 01		      LDA	#1
   5157  3119		       8d 5a 10 	      STA	CALLFUNCTION
   5158  311c				   .L0415		;  return
   5159  311c
   5160  311c		       ba		      tsx
   5161  311d		       b5 02		      lda	2,x	; check return address
   5162  311f		       49 51		      eor	#(>*)	; vs. current PCH
   5163  3121		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5164  3123		       f0 03		      beq	*+5	; if equal, do normal return
   5165  3125		       4c e0 df 	      JMP	BS_return
   5166  3128		       60		      RTS
   5167  3129				   .__PFColors1
   5168  3129							; __PFColors1
   5169  3129
   5170  3129				   .L0416		;  player5x  = LEdge + 7 :  player5y  = 114
   5171  3129
   5172  3129		       a9 47		      LDA	#LEdge
   5173  312b		       18		      CLC
   5174  312c		       69 07		      ADC	#7
   5175  312e		       85 94		      STA	player5x
   5176  3130		       a9 72		      LDA	#114
   5177  3132		       85 9e		      STA	player5y
   5178  3134				   .
   5179  3134							; 
   5180  3134
   5181  3134				   .L0417		;  pfcolors:
   5182  3134
   5183  3134		       a9 08		      LDA	#<PFCOLS
   5184  3136		       8d 50 10 	      STA	DF0LOW
   5185  3139		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5186  313b		       8d 68 10 	      STA	DF0HI
   5187  313e		       a9 10		      LDA	#<playfieldcolorL0417
   5188  3140		       8d 59 10 	      STA	PARAMETER
   5189  3143		       a9 64		      LDA	#((>playfieldcolorL0417) & $0f) | (((>playfieldcolorL0417) / 2) & $70)
   5190  3145		       8d 59 10 	      STA	PARAMETER
   5191  3148		       a9 00		      LDA	#0
   5192  314a		       8d 59 10 	      STA	PARAMETER
   5193  314d		       a9 58		      LDA	#88
   5194  314f		       8d 59 10 	      STA	PARAMETER
   5195  3152		       a9 01		      LDA	#1
   5196  3154		       8d 5a 10 	      STA	CALLFUNCTION
   5197  3157				   .L0418		;  return
   5198  3157
   5199  3157		       ba		      tsx
   5200  3158		       b5 02		      lda	2,x	; check return address
   5201  315a		       49 51		      eor	#(>*)	; vs. current PCH
   5202  315c		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5203  315e		       f0 03		      beq	*+5	; if equal, do normal return
   5204  3160		       4c e0 df 	      JMP	BS_return
   5205  3163		       60		      RTS
   5206  3164				   .__PFColors2
   5207  3164							; __PFColors2
   5208  3164
   5209  3164				   .L0419		;  player5x  = LEdge +  5 :  player5y	= 114
   5210  3164
   5211  3164		       a9 47		      LDA	#LEdge
   5212  3166		       18		      CLC
   5213  3167		       69 05		      ADC	#5
   5214  3169		       85 94		      STA	player5x
   5215  316b		       a9 72		      LDA	#114
   5216  316d		       85 9e		      STA	player5y
   5217  316f				   .
   5218  316f							; 
   5219  316f
   5220  316f				   .L0420		;  pfcolors:
   5221  316f
   5222  316f		       a9 08		      LDA	#<PFCOLS
   5223  3171		       8d 50 10 	      STA	DF0LOW
   5224  3174		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5225  3176		       8d 68 10 	      STA	DF0HI
   5226  3179		       a9 68		      LDA	#<playfieldcolorL0420
   5227  317b		       8d 59 10 	      STA	PARAMETER
   5228  317e		       a9 64		      LDA	#((>playfieldcolorL0420) & $0f) | (((>playfieldcolorL0420) / 2) & $70)
   5229  3180		       8d 59 10 	      STA	PARAMETER
   5230  3183		       a9 00		      LDA	#0
   5231  3185		       8d 59 10 	      STA	PARAMETER
   5232  3188		       a9 58		      LDA	#88
   5233  318a		       8d 59 10 	      STA	PARAMETER
   5234  318d		       a9 01		      LDA	#1
   5235  318f		       8d 5a 10 	      STA	CALLFUNCTION
   5236  3192				   .L0421		;  return
   5237  3192
   5238  3192		       ba		      tsx
   5239  3193		       b5 02		      lda	2,x	; check return address
   5240  3195		       49 51		      eor	#(>*)	; vs. current PCH
   5241  3197		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5242  3199		       f0 03		      beq	*+5	; if equal, do normal return
   5243  319b		       4c e0 df 	      JMP	BS_return
   5244  319e		       60		      RTS
   5245  319f				   .
   5246  319f							; 
   5247  319f
   5248  319f				   .__PFColors3
   5249  319f							; __PFColors3
   5250  319f
   5251  319f				   .L0422		;  NUSIZ5  =  $5
   5252  319f
   5253  319f		       a9 05		      LDA	#$5
   5254  31a1		       85 b3		      STA	NUSIZ5
   5255  31a3				   .L0423		;  player5x  = LEdge +  5 :  player5y	= 114
   5256  31a3
   5257  31a3		       a9 47		      LDA	#LEdge
   5258  31a5		       18		      CLC
   5259  31a6		       69 05		      ADC	#5
   5260  31a8		       85 94		      STA	player5x
   5261  31aa		       a9 72		      LDA	#114
   5262  31ac		       85 9e		      STA	player5y
   5263  31ae				   .
   5264  31ae							; 
   5265  31ae
   5266  31ae				   .L0424		;  pfcolors:
   5267  31ae
   5268  31ae		       a9 08		      LDA	#<PFCOLS
   5269  31b0		       8d 50 10 	      STA	DF0LOW
   5270  31b3		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5271  31b5		       8d 68 10 	      STA	DF0HI
   5272  31b8		       a9 c0		      LDA	#<playfieldcolorL0424
   5273  31ba		       8d 59 10 	      STA	PARAMETER
   5274  31bd		       a9 64		      LDA	#((>playfieldcolorL0424) & $0f) | (((>playfieldcolorL0424) / 2) & $70)
   5275  31bf		       8d 59 10 	      STA	PARAMETER
   5276  31c2		       a9 00		      LDA	#0
   5277  31c4		       8d 59 10 	      STA	PARAMETER
   5278  31c7		       a9 58		      LDA	#88
   5279  31c9		       8d 59 10 	      STA	PARAMETER
   5280  31cc		       a9 01		      LDA	#1
   5281  31ce		       8d 5a 10 	      STA	CALLFUNCTION
   5282  31d1				   .L0425		;  return
   5283  31d1
   5284  31d1		       ba		      tsx
   5285  31d2		       b5 02		      lda	2,x	; check return address
   5286  31d4		       49 51		      eor	#(>*)	; vs. current PCH
   5287  31d6		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5288  31d8		       f0 03		      beq	*+5	; if equal, do normal return
   5289  31da		       4c e0 df 	      JMP	BS_return
   5290  31dd		       60		      RTS
   5291  31de				   .
   5292  31de							; 
   5293  31de
   5294  31de				   .__PFColors4
   5295  31de							; __PFColors4
   5296  31de
   5297  31de				   .L0426		;  player5x  = LEdge +  15 :  player5y  = 114
   5298  31de
   5299  31de		       a9 47		      LDA	#LEdge
   5300  31e0		       18		      CLC
   5301  31e1		       69 0f		      ADC	#15
   5302  31e3		       85 94		      STA	player5x
   5303  31e5		       a9 72		      LDA	#114
   5304  31e7		       85 9e		      STA	player5y
   5305  31e9				   .
   5306  31e9							; 
   5307  31e9
   5308  31e9				   .L0427		;  pfcolors:
   5309  31e9
   5310  31e9		       a9 08		      LDA	#<PFCOLS
   5311  31eb		       8d 50 10 	      STA	DF0LOW
   5312  31ee		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5313  31f0		       8d 68 10 	      STA	DF0HI
   5314  31f3		       a9 18		      LDA	#<playfieldcolorL0427
   5315  31f5		       8d 59 10 	      STA	PARAMETER
   5316  31f8		       a9 65		      LDA	#((>playfieldcolorL0427) & $0f) | (((>playfieldcolorL0427) / 2) & $70)
   5317  31fa		       8d 59 10 	      STA	PARAMETER
   5318  31fd		       a9 00		      LDA	#0
   5319  31ff		       8d 59 10 	      STA	PARAMETER
   5320  3202		       a9 58		      LDA	#88
   5321  3204		       8d 59 10 	      STA	PARAMETER
   5322  3207		       a9 01		      LDA	#1
   5323  3209		       8d 5a 10 	      STA	CALLFUNCTION
   5324  320c				   .L0428		;  return
   5325  320c
   5326  320c		       ba		      tsx
   5327  320d		       b5 02		      lda	2,x	; check return address
   5328  320f		       49 52		      eor	#(>*)	; vs. current PCH
   5329  3211		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5330  3213		       f0 03		      beq	*+5	; if equal, do normal return
   5331  3215		       4c e0 df 	      JMP	BS_return
   5332  3218		       60		      RTS
   5333  3219				   .
   5334  3219							; 
   5335  3219
   5336  3219				   .__PFColors5
   5337  3219							; __PFColors5
   5338  3219
   5339  3219				   .L0429		;  pfcolors:
   5340  3219
   5341  3219		       a9 08		      LDA	#<PFCOLS
   5342  321b		       8d 50 10 	      STA	DF0LOW
   5343  321e		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5344  3220		       8d 68 10 	      STA	DF0HI
   5345  3223		       a9 70		      LDA	#<playfieldcolorL0429
   5346  3225		       8d 59 10 	      STA	PARAMETER
   5347  3228		       a9 65		      LDA	#((>playfieldcolorL0429) & $0f) | (((>playfieldcolorL0429) / 2) & $70)
   5348  322a		       8d 59 10 	      STA	PARAMETER
   5349  322d		       a9 00		      LDA	#0
   5350  322f		       8d 59 10 	      STA	PARAMETER
   5351  3232		       a9 58		      LDA	#88
   5352  3234		       8d 59 10 	      STA	PARAMETER
   5353  3237		       a9 01		      LDA	#1
   5354  3239		       8d 5a 10 	      STA	CALLFUNCTION
   5355  323c				   .L0430		;  return
   5356  323c
   5357  323c		       ba		      tsx
   5358  323d		       b5 02		      lda	2,x	; check return address
   5359  323f		       49 52		      eor	#(>*)	; vs. current PCH
   5360  3241		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5361  3243		       f0 03		      beq	*+5	; if equal, do normal return
   5362  3245		       4c e0 df 	      JMP	BS_return
   5363  3248		       60		      RTS
   5364  3249				   .
   5365  3249							; 
   5366  3249
   5367  3249				   .__PFColors6
   5368  3249							; __PFColors6
   5369  3249
   5370  3249				   .L0431		;  NUSIZ5 = $7
   5371  3249
   5372  3249		       a9 07		      LDA	#$7
   5373  324b		       85 b3		      STA	NUSIZ5
   5374  324d				   .L0432		;  player5x  = LEdge + 7 :  player5y  = 114
   5375  324d
   5376  324d		       a9 47		      LDA	#LEdge
   5377  324f		       18		      CLC
   5378  3250		       69 07		      ADC	#7
   5379  3252		       85 94		      STA	player5x
   5380  3254		       a9 72		      LDA	#114
   5381  3256		       85 9e		      STA	player5y
   5382  3258				   .L0433		;  pfcolors:
   5383  3258
   5384  3258		       a9 08		      LDA	#<PFCOLS
   5385  325a		       8d 50 10 	      STA	DF0LOW
   5386  325d		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5387  325f		       8d 68 10 	      STA	DF0HI
   5388  3262		       a9 c8		      LDA	#<playfieldcolorL0433
   5389  3264		       8d 59 10 	      STA	PARAMETER
   5390  3267		       a9 65		      LDA	#((>playfieldcolorL0433) & $0f) | (((>playfieldcolorL0433) / 2) & $70)
   5391  3269		       8d 59 10 	      STA	PARAMETER
   5392  326c		       a9 00		      LDA	#0
   5393  326e		       8d 59 10 	      STA	PARAMETER
   5394  3271		       a9 58		      LDA	#88
   5395  3273		       8d 59 10 	      STA	PARAMETER
   5396  3276		       a9 01		      LDA	#1
   5397  3278		       8d 5a 10 	      STA	CALLFUNCTION
   5398  327b				   .L0434		;  return
   5399  327b
   5400  327b		       ba		      tsx
   5401  327c		       b5 02		      lda	2,x	; check return address
   5402  327e		       49 52		      eor	#(>*)	; vs. current PCH
   5403  3280		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5404  3282		       f0 03		      beq	*+5	; if equal, do normal return
   5405  3284		       4c e0 df 	      JMP	BS_return
   5406  3287		       60		      RTS
   5407  3288				   .
   5408  3288							; 
   5409  3288
   5410  3288				   .__PFColors7
   5411  3288							; __PFColors7
   5412  3288
   5413  3288				   .L0435		;  pfcolors:
   5414  3288
   5415  3288		       a9 08		      LDA	#<PFCOLS
   5416  328a		       8d 50 10 	      STA	DF0LOW
   5417  328d		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5418  328f		       8d 68 10 	      STA	DF0HI
   5419  3292		       a9 20		      LDA	#<playfieldcolorL0435
   5420  3294		       8d 59 10 	      STA	PARAMETER
   5421  3297		       a9 66		      LDA	#((>playfieldcolorL0435) & $0f) | (((>playfieldcolorL0435) / 2) & $70)
   5422  3299		       8d 59 10 	      STA	PARAMETER
   5423  329c		       a9 00		      LDA	#0
   5424  329e		       8d 59 10 	      STA	PARAMETER
   5425  32a1		       a9 58		      LDA	#88
   5426  32a3		       8d 59 10 	      STA	PARAMETER
   5427  32a6		       a9 01		      LDA	#1
   5428  32a8		       8d 5a 10 	      STA	CALLFUNCTION
   5429  32ab				   .L0436		;  return
   5430  32ab
   5431  32ab		       ba		      tsx
   5432  32ac		       b5 02		      lda	2,x	; check return address
   5433  32ae		       49 52		      eor	#(>*)	; vs. current PCH
   5434  32b0		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5435  32b2		       f0 03		      beq	*+5	; if equal, do normal return
   5436  32b4		       4c e0 df 	      JMP	BS_return
   5437  32b7		       60		      RTS
   5438  32b8				   .
   5439  32b8							; 
   5440  32b8
   5441  32b8				   .__PFColors8
   5442  32b8							; __PFColors8
   5443  32b8
   5444  32b8				   .L0437		;  pfcolors:
   5445  32b8
   5446  32b8		       a9 08		      LDA	#<PFCOLS
   5447  32ba		       8d 50 10 	      STA	DF0LOW
   5448  32bd		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5449  32bf		       8d 68 10 	      STA	DF0HI
   5450  32c2		       a9 78		      LDA	#<playfieldcolorL0437
   5451  32c4		       8d 59 10 	      STA	PARAMETER
   5452  32c7		       a9 66		      LDA	#((>playfieldcolorL0437) & $0f) | (((>playfieldcolorL0437) / 2) & $70)
   5453  32c9		       8d 59 10 	      STA	PARAMETER
   5454  32cc		       a9 00		      LDA	#0
   5455  32ce		       8d 59 10 	      STA	PARAMETER
   5456  32d1		       a9 58		      LDA	#88
   5457  32d3		       8d 59 10 	      STA	PARAMETER
   5458  32d6		       a9 01		      LDA	#1
   5459  32d8		       8d 5a 10 	      STA	CALLFUNCTION
   5460  32db				   .
   5461  32db							; 
   5462  32db
   5463  32db				   .L0438		;  return
   5464  32db
   5465  32db		       ba		      tsx
   5466  32dc		       b5 02		      lda	2,x	; check return address
   5467  32de		       49 52		      eor	#(>*)	; vs. current PCH
   5468  32e0		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5469  32e2		       f0 03		      beq	*+5	; if equal, do normal return
   5470  32e4		       4c e0 df 	      JMP	BS_return
   5471  32e7		       60		      RTS
   5472  32e8				   .__PFColors9
   5473  32e8							; __PFColors9
   5474  32e8
   5475  32e8				   .L0439		;  pfcolors:
   5476  32e8
   5477  32e8		       a9 08		      LDA	#<PFCOLS
   5478  32ea		       8d 50 10 	      STA	DF0LOW
   5479  32ed		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5480  32ef		       8d 68 10 	      STA	DF0HI
   5481  32f2		       a9 d0		      LDA	#<playfieldcolorL0439
   5482  32f4		       8d 59 10 	      STA	PARAMETER
   5483  32f7		       a9 66		      LDA	#((>playfieldcolorL0439) & $0f) | (((>playfieldcolorL0439) / 2) & $70)
   5484  32f9		       8d 59 10 	      STA	PARAMETER
   5485  32fc		       a9 00		      LDA	#0
   5486  32fe		       8d 59 10 	      STA	PARAMETER
   5487  3301		       a9 58		      LDA	#88
   5488  3303		       8d 59 10 	      STA	PARAMETER
   5489  3306		       a9 01		      LDA	#1
   5490  3308		       8d 5a 10 	      STA	CALLFUNCTION
   5491  330b				   .L0440		;  return
   5492  330b
   5493  330b		       ba		      tsx
   5494  330c		       b5 02		      lda	2,x	; check return address
   5495  330e		       49 53		      eor	#(>*)	; vs. current PCH
   5496  3310		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5497  3312		       f0 03		      beq	*+5	; if equal, do normal return
   5498  3314		       4c e0 df 	      JMP	BS_return
   5499  3317		       60		      RTS
   5500  3318				   .
   5501  3318							; 
   5502  3318
   5503  3318				   .__PFColors10
   5504  3318							; __PFColors10
   5505  3318
   5506  3318				   .L0441		;  pfcolors:
   5507  3318
   5508  3318		       a9 08		      LDA	#<PFCOLS
   5509  331a		       8d 50 10 	      STA	DF0LOW
   5510  331d		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5511  331f		       8d 68 10 	      STA	DF0HI
   5512  3322		       a9 28		      LDA	#<playfieldcolorL0441
   5513  3324		       8d 59 10 	      STA	PARAMETER
   5514  3327		       a9 67		      LDA	#((>playfieldcolorL0441) & $0f) | (((>playfieldcolorL0441) / 2) & $70)
   5515  3329		       8d 59 10 	      STA	PARAMETER
   5516  332c		       a9 00		      LDA	#0
   5517  332e		       8d 59 10 	      STA	PARAMETER
   5518  3331		       a9 58		      LDA	#88
   5519  3333		       8d 59 10 	      STA	PARAMETER
   5520  3336		       a9 01		      LDA	#1
   5521  3338		       8d 5a 10 	      STA	CALLFUNCTION
   5522  333b				   .L0442		;  return
   5523  333b
   5524  333b		       ba		      tsx
   5525  333c		       b5 02		      lda	2,x	; check return address
   5526  333e		       49 53		      eor	#(>*)	; vs. current PCH
   5527  3340		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5528  3342		       f0 03		      beq	*+5	; if equal, do normal return
   5529  3344		       4c e0 df 	      JMP	BS_return
   5530  3347		       60		      RTS
   5531  3348				   .
   5532  3348							; 
   5533  3348
   5534  3348				   .__Health
   5535  3348							; __Health
   5536  3348
   5537  3348				   .L0443		;  Timer  = 0
   5538  3348
   5539  3348		       a9 00		      LDA	#0
   5540  334a		       85 e4		      STA	Timer
   5541  334c				   .L0444		;  Bit5_hit{5} = 1
   5542  334c
   5543  334c		       a5 ea		      LDA	Bit5_hit
   5544  334e		       09 20		      ORA	#32
   5545  3350		       85 ea		      STA	Bit5_hit
   5546  3352				   .L0445		;  if Powerup	<  1 then __PowerUp
   5547  3352
   5548  3352		       a5 ee		      LDA	Powerup
   5549  3354		       c9 01		      CMP	#1
   5550  3356				  -	      if	((* - .__PowerUp) < 127) && ((* - .__PowerUp) > -128)
   5551  3356				  -	      bcc	.__PowerUp
   5552  3356					      else
   5553  3356		       b0 03		      bcs	.7skip__PowerUp
   5554  3358		       4c 1f 54 	      jmp	.__PowerUp
   5555  335b				   .7skip__PowerUp
   5556  335b					      endif
   5557  335b				   .L0446		;  if Powerup	>  1 then __BounusFire
   5558  335b
   5559  335b		       a9 01		      LDA	#1
   5560  335d		       c5 ee		      CMP	Powerup
   5561  335f				  -	      if	((* - .__BounusFire) < 127) && ((* - .__BounusFire) > -128)
   5562  335f				  -	      bcc	.__BounusFire
   5563  335f					      else
   5564  335f		       b0 03		      bcs	.8skip__BounusFire
   5565  3361		       4c eb 53 	      jmp	.__BounusFire
   5566  3364				   .8skip__BounusFire
   5567  3364					      endif
   5568  3364				   .L0447		;  gosub __P0Explosion bank5
   5569  3364
   5570  3364		       85 81		      sta	temp7
   5571  3366		       a9 53		      lda	#>(ret_point9-1)
   5572  3368		       48		      pha
   5573  3369		       a9 7b		      lda	#<(ret_point9-1)
   5574  336b		       48		      pha
   5575  336c		       a9 93		      lda	#>(.__P0Explosion-1)
   5576  336e		       48		      pha
   5577  336f		       a9 67		      lda	#<(.__P0Explosion-1)
   5578  3371		       48		      pha
   5579  3372		       a5 81		      lda	temp7
   5580  3374		       48		      pha
   5581  3375		       8a		      txa
   5582  3376		       48		      pha
   5583  3377		       a2 05		      ldx	#5
   5584  3379		       4c ee df 	      jmp	BS_jsr
   5585  337c				   ret_point9
   5586  337c				   .L0448		;  PlayerHealth  =  PlayerHealth  +  25
   5587  337c
   5588  337c		       a5 d5		      LDA	PlayerHealth
   5589  337e		       18		      CLC
   5590  337f		       69 19		      ADC	#25
   5591  3381		       85 d5		      STA	PlayerHealth
   5592  3383				   .L0449		;  PlayerMissileRate = 5
   5593  3383
   5594  3383		       a9 05		      LDA	#5
   5595  3385		       85 f0		      STA	PlayerMissileRate
   5596  3387				   .L0450		;  if PlayerHealth  >	80 then PlayerHealth  =  80
   5597  3387
   5598  3387		       a9 50		      LDA	#80
   5599  3389		       c5 d5		      CMP	PlayerHealth
   5600  338b		       b0 04		      BCS	.skipL0450
   5601  338d				   .condpart205
   5602  338d		       a9 50		      LDA	#80
   5603  338f		       85 d5		      STA	PlayerHealth
   5604  3391				   .skipL0450
   5605  3391				   .L0451		;  Househit = Househit - 1
   5606  3391
   5607  3391		       c6 e1		      DEC	Househit
   5608  3393				   .L0452		;  if Househit  < 2 then Househit  = 1
   5609  3393
   5610  3393		       a5 e1		      LDA	Househit
   5611  3395		       c9 02		      CMP	#2
   5612  3397		       b0 04		      BCS	.skipL0452
   5613  3399				   .condpart206
   5614  3399		       a9 01		      LDA	#1
   5615  339b		       85 e1		      STA	Househit
   5616  339d				   .skipL0452
   5617  339d				   .L0453		;  player4y = 200
   5618  339d
   5619  339d		       a9 c8		      LDA	#200
   5620  339f		       85 9d		      STA	player4y
   5621  33a1				   .L0454		;  Bit2_EnemyMove{2} = 0
   5622  33a1
   5623  33a1		       a5 ea		      LDA	Bit2_EnemyMove
   5624  33a3		       29 fb		      AND	#251
   5625  33a5		       85 ea		      STA	Bit2_EnemyMove
   5626  33a7				   .L0455		;  HealthDrop	=  0
   5627  33a7
   5628  33a7		       a9 00		      LDA	#0
   5629  33a9		       85 de		      STA	HealthDrop
   5630  33ab				   .L0456		;  Bit1_missleOn{1}  = 0
   5631  33ab
   5632  33ab		       a5 ea		      LDA	Bit1_missleOn
   5633  33ad		       29 fd		      AND	#253
   5634  33af		       85 ea		      STA	Bit1_missleOn
   5635  33b1				   .L0457		;  missile0x  =  200  :  missile0y  =	200
   5636  33b1
   5637  33b1		       a9 c8		      LDA	#200
   5638  33b3		       85 82		      STA	missile0x
   5639  33b5		       85 bf		      STA	missile0y
   5640  33b7				   .L0458		;  gosub __P0Explosion bank5
   5641  33b7
   5642  33b7		       85 81		      sta	temp7
   5643  33b9		       a9 53		      lda	#>(ret_point10-1)
   5644  33bb		       48		      pha
   5645  33bc		       a9 ce		      lda	#<(ret_point10-1)
   5646  33be		       48		      pha
   5647  33bf		       a9 93		      lda	#>(.__P0Explosion-1)
   5648  33c1		       48		      pha
   5649  33c2		       a9 67		      lda	#<(.__P0Explosion-1)
   5650  33c4		       48		      pha
   5651  33c5		       a5 81		      lda	temp7
   5652  33c7		       48		      pha
   5653  33c8		       8a		      txa
   5654  33c9		       48		      pha
   5655  33ca		       a2 05		      ldx	#5
   5656  33cc		       4c ee df 	      jmp	BS_jsr
   5657  33cf				   ret_point10
   5658  33cf				   .L0459		;  Powerup  =	 ( rand & 2 ) 
   5659  33cf
   5660  33cf							; complex statement detected
   5661  33cf		       ad 00 10 	      lda	rand
   5662  33d2		       4a		      lsr
   5663  33d3				  -	      ifconst	rand16
   5664  33d3				  -	      rol	rand16
   5665  33d3					      endif
   5666  33d3		       90 02		      bcc	*+4
   5667  33d5		       49 b4		      eor	#$B4
   5668  33d7		       8d 00 10 	      sta	rand
   5669  33da				  -	      ifconst	rand16
   5670  33da				  -	      eor	rand16
   5671  33da					      endif
   5672  33da		       29 02		      AND	#2
   5673  33dc		       85 ee		      STA	Powerup
   5674  33de				   .L0460		;  return
   5675  33de
   5676  33de		       ba		      tsx
   5677  33df		       b5 02		      lda	2,x	; check return address
   5678  33e1		       49 53		      eor	#(>*)	; vs. current PCH
   5679  33e3		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5680  33e5		       f0 03		      beq	*+5	; if equal, do normal return
   5681  33e7		       4c e0 df 	      JMP	BS_return
   5682  33ea		       60		      RTS
   5683  33eb				   .
   5684  33eb							; 
   5685  33eb
   5686  33eb				   .__BounusFire
   5687  33eb							; __BounusFire
   5688  33eb
   5689  33eb				   .L0461		;  PlayerMissileRate = 10
   5690  33eb
   5691  33eb		       a9 0a		      LDA	#10
   5692  33ed		       85 f0		      STA	PlayerMissileRate
   5693  33ef				   .L0462		;  HealthDrop	=  0
   5694  33ef
   5695  33ef		       a9 00		      LDA	#0
   5696  33f1		       85 de		      STA	HealthDrop
   5697  33f3				   .L0463		;  Bit1_missleOn{1}  = 0
   5698  33f3
   5699  33f3		       a5 ea		      LDA	Bit1_missleOn
   5700  33f5		       29 fd		      AND	#253
   5701  33f7		       85 ea		      STA	Bit1_missleOn
   5702  33f9				   .L0464		;  missile0x  =  200  :  missile0y  =	200
   5703  33f9
   5704  33f9		       a9 c8		      LDA	#200
   5705  33fb		       85 82		      STA	missile0x
   5706  33fd		       85 bf		      STA	missile0y
   5707  33ff				   .L0465		;  player4y = 200
   5708  33ff
   5709  33ff		       a9 c8		      LDA	#200
   5710  3401		       85 9d		      STA	player4y
   5711  3403				   .L0466		;  Powerup  =	 ( rand & 2 ) 
   5712  3403
   5713  3403							; complex statement detected
   5714  3403		       ad 00 10 	      lda	rand
   5715  3406		       4a		      lsr
   5716  3407				  -	      ifconst	rand16
   5717  3407				  -	      rol	rand16
   5718  3407					      endif
   5719  3407		       90 02		      bcc	*+4
   5720  3409		       49 b4		      eor	#$B4
   5721  340b		       8d 00 10 	      sta	rand
   5722  340e				  -	      ifconst	rand16
   5723  340e				  -	      eor	rand16
   5724  340e					      endif
   5725  340e		       29 02		      AND	#2
   5726  3410		       85 ee		      STA	Powerup
   5727  3412				   .L0467		;  return
   5728  3412
   5729  3412		       ba		      tsx
   5730  3413		       b5 02		      lda	2,x	; check return address
   5731  3415		       49 54		      eor	#(>*)	; vs. current PCH
   5732  3417		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5733  3419		       f0 03		      beq	*+5	; if equal, do normal return
   5734  341b		       4c e0 df 	      JMP	BS_return
   5735  341e		       60		      RTS
   5736  341f				   .
   5737  341f							; 
   5738  341f
   5739  341f				   .__PowerUp
   5740  341f							; __PowerUp
   5741  341f
   5742  341f				   .L0468		;  gosub __P0Explosion bank5
   5743  341f
   5744  341f		       85 81		      sta	temp7
   5745  3421		       a9 54		      lda	#>(ret_point11-1)
   5746  3423		       48		      pha
   5747  3424		       a9 36		      lda	#<(ret_point11-1)
   5748  3426		       48		      pha
   5749  3427		       a9 93		      lda	#>(.__P0Explosion-1)
   5750  3429		       48		      pha
   5751  342a		       a9 67		      lda	#<(.__P0Explosion-1)
   5752  342c		       48		      pha
   5753  342d		       a5 81		      lda	temp7
   5754  342f		       48		      pha
   5755  3430		       8a		      txa
   5756  3431		       48		      pha
   5757  3432		       a2 05		      ldx	#5
   5758  3434		       4c ee df 	      jmp	BS_jsr
   5759  3437				   ret_point11
   5760  3437				   .L0469		;  PlayerMissileRate = 5
   5761  3437
   5762  3437		       a9 05		      LDA	#5
   5763  3439		       85 f0		      STA	PlayerMissileRate
   5764  343b				   .L0470		;  player1y  = 200
   5765  343b
   5766  343b		       a9 c8		      LDA	#200
   5767  343d		       85 9a		      STA	player1y
   5768  343f				   .L0471		;  player2y  = 200
   5769  343f
   5770  343f		       a9 c8		      LDA	#200
   5771  3441		       85 9b		      STA	player2y
   5772  3443				   .L0472		;  player3y  =  200
   5773  3443
   5774  3443		       a9 c8		      LDA	#200
   5775  3445		       85 9c		      STA	player3y
   5776  3447				   .L0473		;  player4y = 200
   5777  3447
   5778  3447		       a9 c8		      LDA	#200
   5779  3449		       85 9d		      STA	player4y
   5780  344b				   .L0474		;  Bit2_EnemyMove{2} = 0
   5781  344b
   5782  344b		       a5 ea		      LDA	Bit2_EnemyMove
   5783  344d		       29 fb		      AND	#251
   5784  344f		       85 ea		      STA	Bit2_EnemyMove
   5785  3451				   .L0475		;  HealthDrop	=  0
   5786  3451
   5787  3451		       a9 00		      LDA	#0
   5788  3453		       85 de		      STA	HealthDrop
   5789  3455				   .L0476		;  Bit5_hit{5} = 1
   5790  3455
   5791  3455		       a5 ea		      LDA	Bit5_hit
   5792  3457		       09 20		      ORA	#32
   5793  3459		       85 ea		      STA	Bit5_hit
   5794  345b				   .L0477		;  Bit1_missleOn{1}  = 0
   5795  345b
   5796  345b		       a5 ea		      LDA	Bit1_missleOn
   5797  345d		       29 fd		      AND	#253
   5798  345f		       85 ea		      STA	Bit1_missleOn
   5799  3461				   .L0478		;  missile0x  =  200  :  missile0y  =	200
   5800  3461
   5801  3461		       a9 c8		      LDA	#200
   5802  3463		       85 82		      STA	missile0x
   5803  3465		       85 bf		      STA	missile0y
   5804  3467				   .L0479		;  Powerup  =	 ( rand & 2 ) 
   5805  3467
   5806  3467							; complex statement detected
   5807  3467		       ad 00 10 	      lda	rand
   5808  346a		       4a		      lsr
   5809  346b				  -	      ifconst	rand16
   5810  346b				  -	      rol	rand16
   5811  346b					      endif
   5812  346b		       90 02		      bcc	*+4
   5813  346d		       49 b4		      eor	#$B4
   5814  346f		       8d 00 10 	      sta	rand
   5815  3472				  -	      ifconst	rand16
   5816  3472				  -	      eor	rand16
   5817  3472					      endif
   5818  3472		       29 02		      AND	#2
   5819  3474		       85 ee		      STA	Powerup
   5820  3476				   .
   5821  3476							; 
   5822  3476
   5823  3476				   .L0480		;  bkcolors:
   5824  3476
   5825  3476		       a9 a5		      LDA	#<BKCOLS
   5826  3478		       8d 50 10 	      STA	DF0LOW
   5827  347b		       a9 0b		      LDA	#(>BKCOLS) & $0F
   5828  347d		       8d 68 10 	      STA	DF0HI
   5829  3480		       a9 80		      LDA	#<backgroundcolorL0480
   5830  3482		       8d 59 10 	      STA	PARAMETER
   5831  3485		       a9 67		      LDA	#((>backgroundcolorL0480) & $0f) | (((>backgroundcolorL0480) / 2) & $70)
   5832  3487		       8d 59 10 	      STA	PARAMETER
   5833  348a		       a9 00		      LDA	#0
   5834  348c		       8d 59 10 	      STA	PARAMETER
   5835  348f		       a9 58		      LDA	#88
   5836  3491		       8d 59 10 	      STA	PARAMETER
   5837  3494		       a9 01		      LDA	#1
   5838  3496		       8d 5a 10 	      STA	CALLFUNCTION
   5839  3499				   .L0481		;  gosub __P0Explosion bank5
   5840  3499
   5841  3499		       85 81		      sta	temp7
   5842  349b		       a9 54		      lda	#>(ret_point12-1)
   5843  349d		       48		      pha
   5844  349e		       a9 b0		      lda	#<(ret_point12-1)
   5845  34a0		       48		      pha
   5846  34a1		       a9 93		      lda	#>(.__P0Explosion-1)
   5847  34a3		       48		      pha
   5848  34a4		       a9 67		      lda	#<(.__P0Explosion-1)
   5849  34a6		       48		      pha
   5850  34a7		       a5 81		      lda	temp7
   5851  34a9		       48		      pha
   5852  34aa		       8a		      txa
   5853  34ab		       48		      pha
   5854  34ac		       a2 05		      ldx	#5
   5855  34ae		       4c ee df 	      jmp	BS_jsr
   5856  34b1				   ret_point12
   5857  34b1				   .L0482		;  Bit5_hit{5} = 0
   5858  34b1
   5859  34b1		       a5 ea		      LDA	Bit5_hit
   5860  34b3		       29 df		      AND	#223
   5861  34b5		       85 ea		      STA	Bit5_hit
   5862  34b7				   .L0483		;  return
   5863  34b7
   5864  34b7		       ba		      tsx
   5865  34b8		       b5 02		      lda	2,x	; check return address
   5866  34ba		       49 54		      eor	#(>*)	; vs. current PCH
   5867  34bc		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5868  34be		       f0 03		      beq	*+5	; if equal, do normal return
   5869  34c0		       4c e0 df 	      JMP	BS_return
   5870  34c3		       60		      RTS
   5871  34c4				   .
   5872  34c4							; 
   5873  34c4
   5874  34c4				   .L0484		;  bank 4
   5875  34c4
   5876  34c4					      if	ECHO3
      2832 bytes of ROM space left in bank 3
   5877  34c4					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
   5878  34c4					      endif
   5879  34c4		       00 01	   ECHO3      =	1
   5880  3fd4					      ORG	$3FF4-bscode_length
   5881  3fd4					      RORG	$5FF4-bscode_length
   5882  3fd4		       a2 ff	   start_bank3 ldx	#$ff
   5883  3fd6					      ifconst	FASTFETCH	; using DPC+
   5884  3fd6		       8e 58 10 	      stx	FASTFETCH
   5885  3fd9					      endif
   5886  3fd9		       9a		      txs
   5887  3fda				  -	      if	bankswitch == 64
   5888  3fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   5889  3fda					      else
   5890  3fda		       a9 18		      lda	#>(start-1)
   5891  3fdc					      endif
   5892  3fdc		       48		      pha
   5893  3fdd		       a9 e3		      lda	#<(start-1)
   5894  3fdf		       48		      pha
   5895  3fe0		       48		      pha
   5896  3fe1		       8a		      txa
   5897  3fe2		       48		      pha
   5898  3fe3		       ba		      tsx
   5899  3fe4					      if	bankswitch != 64
   5900  3fe4		       b5 04		      lda	4,x	; get high byte of return address
   5901  3fe6		       2a		      rol
   5902  3fe7		       2a		      rol
   5903  3fe8		       2a		      rol
   5904  3fe9		       2a		      rol
   5905  3fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   5906  3fec		       aa		      tax
   5907  3fed		       e8		      inx
   5908  3fee				  -	      else
   5909  3fee				  -	      lda	4,x	; get high byte of return address
   5910  3fee				  -	      tay
   5911  3fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   5912  3fee				  -	      sta	4,x
   5913  3fee				  -	      tya
   5914  3fee				  -	      lsr
   5915  3fee				  -	      lsr
   5916  3fee				  -	      lsr
   5917  3fee				  -	      lsr
   5918  3fee				  -	      tax
   5919  3fee				  -	      inx
   5920  3fee					      endif
   5921  3fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   5922  3ff1		       68		      pla
   5923  3ff2		       aa		      tax
   5924  3ff3		       68		      pla
   5925  3ff4		       60		      rts
   5926  3ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   5927  3ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   5928  3ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   5929  3ff5					      endif
   5930  3ffc					      ORG	$3FFC
   5931  3ffc					      RORG	$5FFC
   5932  3ffc		       d4 5f		      .word.w	(start_bank3 & $ffff)
   5933  3ffe		       d4 5f		      .word.w	(start_bank3 & $ffff)
   5934  4000					      ORG	$4000
   5935  4000					      RORG	$7000
   5936  4000					      repeat	129
   5937  4000		       00		      .byte.b	0
   5936  4000					      repend
   5937  4001		       00		      .byte.b	0
   5936  4001					      repend
   5937  4002		       00		      .byte.b	0
   5936  4002					      repend
   5937  4003		       00		      .byte.b	0
   5936  4003					      repend
   5937  4004		       00		      .byte.b	0
   5936  4004					      repend
   5937  4005		       00		      .byte.b	0
   5936  4005					      repend
   5937  4006		       00		      .byte.b	0
   5936  4006					      repend
   5937  4007		       00		      .byte.b	0
   5936  4007					      repend
   5937  4008		       00		      .byte.b	0
   5936  4008					      repend
   5937  4009		       00		      .byte.b	0
   5936  4009					      repend
   5937  400a		       00		      .byte.b	0
   5936  400a					      repend
   5937  400b		       00		      .byte.b	0
   5936  400b					      repend
   5937  400c		       00		      .byte.b	0
   5936  400c					      repend
   5937  400d		       00		      .byte.b	0
   5936  400d					      repend
   5937  400e		       00		      .byte.b	0
   5936  400e					      repend
   5937  400f		       00		      .byte.b	0
   5936  400f					      repend
   5937  4010		       00		      .byte.b	0
   5936  4010					      repend
   5937  4011		       00		      .byte.b	0
   5936  4011					      repend
   5937  4012		       00		      .byte.b	0
   5936  4012					      repend
   5937  4013		       00		      .byte.b	0
   5936  4013					      repend
   5937  4014		       00		      .byte.b	0
   5936  4014					      repend
   5937  4015		       00		      .byte.b	0
   5936  4015					      repend
   5937  4016		       00		      .byte.b	0
   5936  4016					      repend
   5937  4017		       00		      .byte.b	0
   5936  4017					      repend
   5937  4018		       00		      .byte.b	0
   5936  4018					      repend
   5937  4019		       00		      .byte.b	0
   5936  4019					      repend
   5937  401a		       00		      .byte.b	0
   5936  401a					      repend
   5937  401b		       00		      .byte.b	0
   5936  401b					      repend
   5937  401c		       00		      .byte.b	0
   5936  401c					      repend
   5937  401d		       00		      .byte.b	0
   5936  401d					      repend
   5937  401e		       00		      .byte.b	0
   5936  401e					      repend
   5937  401f		       00		      .byte.b	0
   5936  401f					      repend
   5937  4020		       00		      .byte.b	0
   5936  4020					      repend
   5937  4021		       00		      .byte.b	0
   5936  4021					      repend
   5937  4022		       00		      .byte.b	0
   5936  4022					      repend
   5937  4023		       00		      .byte.b	0
   5936  4023					      repend
   5937  4024		       00		      .byte.b	0
   5936  4024					      repend
   5937  4025		       00		      .byte.b	0
   5936  4025					      repend
   5937  4026		       00		      .byte.b	0
   5936  4026					      repend
   5937  4027		       00		      .byte.b	0
   5936  4027					      repend
   5937  4028		       00		      .byte.b	0
   5936  4028					      repend
   5937  4029		       00		      .byte.b	0
   5936  4029					      repend
   5937  402a		       00		      .byte.b	0
   5936  402a					      repend
   5937  402b		       00		      .byte.b	0
   5936  402b					      repend
   5937  402c		       00		      .byte.b	0
   5936  402c					      repend
   5937  402d		       00		      .byte.b	0
   5936  402d					      repend
   5937  402e		       00		      .byte.b	0
   5936  402e					      repend
   5937  402f		       00		      .byte.b	0
   5936  402f					      repend
   5937  4030		       00		      .byte.b	0
   5936  4030					      repend
   5937  4031		       00		      .byte.b	0
   5936  4031					      repend
   5937  4032		       00		      .byte.b	0
   5936  4032					      repend
   5937  4033		       00		      .byte.b	0
   5936  4033					      repend
   5937  4034		       00		      .byte.b	0
   5936  4034					      repend
   5937  4035		       00		      .byte.b	0
   5936  4035					      repend
   5937  4036		       00		      .byte.b	0
   5936  4036					      repend
   5937  4037		       00		      .byte.b	0
   5936  4037					      repend
   5937  4038		       00		      .byte.b	0
   5936  4038					      repend
   5937  4039		       00		      .byte.b	0
   5936  4039					      repend
   5937  403a		       00		      .byte.b	0
   5936  403a					      repend
   5937  403b		       00		      .byte.b	0
   5936  403b					      repend
   5937  403c		       00		      .byte.b	0
   5936  403c					      repend
   5937  403d		       00		      .byte.b	0
   5936  403d					      repend
   5937  403e		       00		      .byte.b	0
   5936  403e					      repend
   5937  403f		       00		      .byte.b	0
   5936  403f					      repend
   5937  4040		       00		      .byte.b	0
   5936  4040					      repend
   5937  4041		       00		      .byte.b	0
   5936  4041					      repend
   5937  4042		       00		      .byte.b	0
   5936  4042					      repend
   5937  4043		       00		      .byte.b	0
   5936  4043					      repend
   5937  4044		       00		      .byte.b	0
   5936  4044					      repend
   5937  4045		       00		      .byte.b	0
   5936  4045					      repend
   5937  4046		       00		      .byte.b	0
   5936  4046					      repend
   5937  4047		       00		      .byte.b	0
   5936  4047					      repend
   5937  4048		       00		      .byte.b	0
   5936  4048					      repend
   5937  4049		       00		      .byte.b	0
   5936  4049					      repend
   5937  404a		       00		      .byte.b	0
   5936  404a					      repend
   5937  404b		       00		      .byte.b	0
   5936  404b					      repend
   5937  404c		       00		      .byte.b	0
   5936  404c					      repend
   5937  404d		       00		      .byte.b	0
   5936  404d					      repend
   5937  404e		       00		      .byte.b	0
   5936  404e					      repend
   5937  404f		       00		      .byte.b	0
   5936  404f					      repend
   5937  4050		       00		      .byte.b	0
   5936  4050					      repend
   5937  4051		       00		      .byte.b	0
   5936  4051					      repend
   5937  4052		       00		      .byte.b	0
   5936  4052					      repend
   5937  4053		       00		      .byte.b	0
   5936  4053					      repend
   5937  4054		       00		      .byte.b	0
   5936  4054					      repend
   5937  4055		       00		      .byte.b	0
   5936  4055					      repend
   5937  4056		       00		      .byte.b	0
   5936  4056					      repend
   5937  4057		       00		      .byte.b	0
   5936  4057					      repend
   5937  4058		       00		      .byte.b	0
   5936  4058					      repend
   5937  4059		       00		      .byte.b	0
   5936  4059					      repend
   5937  405a		       00		      .byte.b	0
   5936  405a					      repend
   5937  405b		       00		      .byte.b	0
   5936  405b					      repend
   5937  405c		       00		      .byte.b	0
   5936  405c					      repend
   5937  405d		       00		      .byte.b	0
   5936  405d					      repend
   5937  405e		       00		      .byte.b	0
   5936  405e					      repend
   5937  405f		       00		      .byte.b	0
   5936  405f					      repend
   5937  4060		       00		      .byte.b	0
   5936  4060					      repend
   5937  4061		       00		      .byte.b	0
   5936  4061					      repend
   5937  4062		       00		      .byte.b	0
   5936  4062					      repend
   5937  4063		       00		      .byte.b	0
   5936  4063					      repend
   5937  4064		       00		      .byte.b	0
   5936  4064					      repend
   5937  4065		       00		      .byte.b	0
   5936  4065					      repend
   5937  4066		       00		      .byte.b	0
   5936  4066					      repend
   5937  4067		       00		      .byte.b	0
   5936  4067					      repend
   5937  4068		       00		      .byte.b	0
   5936  4068					      repend
   5937  4069		       00		      .byte.b	0
   5936  4069					      repend
   5937  406a		       00		      .byte.b	0
   5936  406a					      repend
   5937  406b		       00		      .byte.b	0
   5936  406b					      repend
   5937  406c		       00		      .byte.b	0
   5936  406c					      repend
   5937  406d		       00		      .byte.b	0
   5936  406d					      repend
   5937  406e		       00		      .byte.b	0
   5936  406e					      repend
   5937  406f		       00		      .byte.b	0
   5936  406f					      repend
   5937  4070		       00		      .byte.b	0
   5936  4070					      repend
   5937  4071		       00		      .byte.b	0
   5936  4071					      repend
   5937  4072		       00		      .byte.b	0
   5936  4072					      repend
   5937  4073		       00		      .byte.b	0
   5936  4073					      repend
   5937  4074		       00		      .byte.b	0
   5936  4074					      repend
   5937  4075		       00		      .byte.b	0
   5936  4075					      repend
   5937  4076		       00		      .byte.b	0
   5936  4076					      repend
   5937  4077		       00		      .byte.b	0
   5936  4077					      repend
   5937  4078		       00		      .byte.b	0
   5936  4078					      repend
   5937  4079		       00		      .byte.b	0
   5936  4079					      repend
   5937  407a		       00		      .byte.b	0
   5936  407a					      repend
   5937  407b		       00		      .byte.b	0
   5936  407b					      repend
   5937  407c		       00		      .byte.b	0
   5936  407c					      repend
   5937  407d		       00		      .byte.b	0
   5936  407d					      repend
   5937  407e		       00		      .byte.b	0
   5936  407e					      repend
   5937  407f		       00		      .byte.b	0
   5936  407f					      repend
   5937  4080		       00		      .byte.b	0
   5938  4081					      repend
   5939  4081				   .L0485		;  temp1 = temp1
   5940  4081
   5941  4081		       a5 cb		      LDA	temp1
   5942  4083		       85 cb		      STA	temp1
   5943  4085				   .
   5944  4085							; 
   5945  4085
   5946  4085				   .__FrameAnimation
   5947  4085							; __FrameAnimation
   5948  4085
   5949  4085				   .__p0Frames
   5950  4085							; __p0Frames
   5951  4085
   5952  4085				   .L0486		;  if !Bit1_missleOn{1} then if joy0fire then goto __p0Fire
   5953  4085
   5954  4085		       a5 ea		      LDA	Bit1_missleOn
   5955  4087		       29 02		      AND	#2
   5956  4089		       d0 07		      BNE	.skipL0486
   5957  408b				   .condpart207
   5958  408b		       24 0c		      bit	INPT4
   5959  408d		       30 03		      BMI	.skip207then
   5960  408f				   .condpart208
   5961  408f		       4c b9 70 	      jmp	.__p0Fire
   5962  4092
   5963  4092				   .skip207then
   5964  4092				   .skipL0486
   5965  4092				   .L0487		;  if joy0left then goto __P0BlockLeft
   5966  4092
   5967  4092		       2c 80 02 	      bit	SWCHA
   5968  4095		       70 03		      BVS	.skipL0487
   5969  4097				   .condpart209
   5970  4097		       4c d0 70 	      jmp	.__P0BlockLeft
   5971  409a
   5972  409a				   .skipL0487
   5973  409a				   .L0488		;  if joy0right then goto __P0BlockRigth
   5974  409a
   5975  409a		       2c 80 02 	      bit	SWCHA
   5976  409d		       30 03		      BMI	.skipL0488
   5977  409f				   .condpart210
   5978  409f		       4c e7 70 	      jmp	.__P0BlockRigth
   5979  40a2
   5980  40a2				   .skipL0488
   5981  40a2				   .L0489		;  player0:
   5982  40a2
   5983  40a2		       a2 d8		      LDX	#<playerL0489_0
   5984  40a4		       86 bd		      STX	player0pointerlo
   5985  40a6		       a9 67		      LDA	#((>playerL0489_0) & $0f) | (((>playerL0489_0) / 2) & $70)
   5986  40a8		       85 be		      STA	player0pointerhi
   5987  40aa		       a9 0f		      LDA	#15
   5988  40ac		       85 a5		      STA	player0height
   5989  40ae				   .L0490		;  player0color:
   5990  40ae
   5991  40ae		       a2 e7		      LDX	#<playercolorL0490_0
   5992  40b0		       86 a3		      STX	player0color
   5993  40b2		       a9 67		      LDA	#((>playercolorL0490_0) & $0f) | (((>playercolorL0490_0) / 2) & $70)
   5994  40b4		       85 a4		      STA	player0color+1
   5995  40b6				   .L0491		;  goto __p0Damagecolors
   5996  40b6
   5997  40b6		       4c fb 70 	      jmp	.__p0Damagecolors
   5998  40b9
   5999  40b9				   .
   6000  40b9							; 
   6001  40b9
   6002  40b9				   .__p0Fire
   6003  40b9							; __p0Fire
   6004  40b9
   6005  40b9				   .L0492		;  player0:
   6006  40b9
   6007  40b9		       a2 f6		      LDX	#<playerL0492_0
   6008  40bb		       86 bd		      STX	player0pointerlo
   6009  40bd		       a9 67		      LDA	#((>playerL0492_0) & $0f) | (((>playerL0492_0) / 2) & $70)
   6010  40bf		       85 be		      STA	player0pointerhi
   6011  40c1		       a9 0f		      LDA	#15
   6012  40c3		       85 a5		      STA	player0height
   6013  40c5				   .L0493		;  player0color:
   6014  40c5
   6015  40c5		       a2 05		      LDX	#<playercolorL0493_0
   6016  40c7		       86 a3		      STX	player0color
   6017  40c9		       a9 68		      LDA	#((>playercolorL0493_0) & $0f) | (((>playercolorL0493_0) / 2) & $70)
   6018  40cb		       85 a4		      STA	player0color+1
   6019  40cd				   .L0494		;  goto __p0Damagecolors
   6020  40cd
   6021  40cd		       4c fb 70 	      jmp	.__p0Damagecolors
   6022  40d0
   6023  40d0				   .__P0BlockLeft
   6024  40d0							; __P0BlockLeft
   6025  40d0
   6026  40d0				   .L0495		;  player0:
   6027  40d0
   6028  40d0		       a2 14		      LDX	#<playerL0495_0
   6029  40d2		       86 bd		      STX	player0pointerlo
   6030  40d4		       a9 68		      LDA	#((>playerL0495_0) & $0f) | (((>playerL0495_0) / 2) & $70)
   6031  40d6		       85 be		      STA	player0pointerhi
   6032  40d8		       a9 0f		      LDA	#15
   6033  40da		       85 a5		      STA	player0height
   6034  40dc				   .L0496		;  player0color:
   6035  40dc
   6036  40dc		       a2 23		      LDX	#<playercolorL0496_0
   6037  40de		       86 a3		      STX	player0color
   6038  40e0		       a9 68		      LDA	#((>playercolorL0496_0) & $0f) | (((>playercolorL0496_0) / 2) & $70)
   6039  40e2		       85 a4		      STA	player0color+1
   6040  40e4				   .L0497		;  goto __p0Damagecolors
   6041  40e4
   6042  40e4		       4c fb 70 	      jmp	.__p0Damagecolors
   6043  40e7
   6044  40e7				   .
   6045  40e7							; 
   6046  40e7
   6047  40e7				   .__P0BlockRigth
   6048  40e7							; __P0BlockRigth
   6049  40e7
   6050  40e7				   .L0498		;  player0:
   6051  40e7
   6052  40e7		       a2 32		      LDX	#<playerL0498_0
   6053  40e9		       86 bd		      STX	player0pointerlo
   6054  40eb		       a9 68		      LDA	#((>playerL0498_0) & $0f) | (((>playerL0498_0) / 2) & $70)
   6055  40ed		       85 be		      STA	player0pointerhi
   6056  40ef		       a9 0f		      LDA	#15
   6057  40f1		       85 a5		      STA	player0height
   6058  40f3				   .L0499		;  player0color:
   6059  40f3
   6060  40f3		       a2 41		      LDX	#<playercolorL0499_0
   6061  40f5		       86 a3		      STX	player0color
   6062  40f7		       a9 68		      LDA	#((>playercolorL0499_0) & $0f) | (((>playercolorL0499_0) / 2) & $70)
   6063  40f9		       85 a4		      STA	player0color+1
   6064  40fb				   .
   6065  40fb							; 
   6066  40fb
   6067  40fb				   .__p0Damagecolors
   6068  40fb							; __p0Damagecolors
   6069  40fb
   6070  40fb				   .
   6071  40fb							; 
   6072  40fb
   6073  40fb				   .L0500		;  if PlayerDamage  = 1  &&  EnemyHit	<  1 then player0color:
   6074  40fb
   6075  40fb		       a5 dd		      LDA	PlayerDamage
   6076  40fd		       c9 01		      CMP	#1
   6077  40ff		       d0 0e		      BNE	.skipL0500
   6078  4101				   .condpart211
   6079  4101		       a5 d9		      LDA	EnemyHit
   6080  4103		       c9 01		      CMP	#1
   6081  4105		       b0 08		      BCS	.skip211then
   6082  4107				   .condpart212
   6083  4107		       a2 50		      LDX	#<playercolor212then_0
   6084  4109		       86 a3		      STX	player0color
   6085  410b		       a9 68		      LDA	#((>playercolor212then_0) & $0f) | (((>playercolor212then_0) / 2) & $70)
   6086  410d		       85 a4		      STA	player0color+1
   6087  410f				   .skip211then
   6088  410f				   .skipL0500
   6089  410f				   .
   6090  410f							; 
   6091  410f
   6092  410f				   .L0501		;  if PlayerDamage  = 2 then player0color:
   6093  410f
   6094  410f		       a5 dd		      LDA	PlayerDamage
   6095  4111		       c9 02		      CMP	#2
   6096  4113		       d0 08		      BNE	.skipL0501
   6097  4115				   .condpart213
   6098  4115		       a2 60		      LDX	#<playercolor213then_0
   6099  4117		       86 a3		      STX	player0color
   6100  4119		       a9 68		      LDA	#((>playercolor213then_0) & $0f) | (((>playercolor213then_0) / 2) & $70)
   6101  411b		       85 a4		      STA	player0color+1
   6102  411d				   .skipL0501
   6103  411d				   .
   6104  411d							; 
   6105  411d
   6106  411d				   .L0502		;  if frame  =  10  &&  EnemyHit  <  1 then player2:
   6107  411d
   6108  411d		       a5 d6		      LDA	frame
   6109  411f		       c9 0a		      CMP	#10
   6110  4121		       d0 1e		      BNE	.skipL0502
   6111  4123				   .condpart214
   6112  4123		       a5 d9		      LDA	EnemyHit
   6113  4125		       c9 01		      CMP	#1
   6114  4127		       b0 18		      BCS	.skip214then
   6115  4129				   .condpart215
   6116  4129		       a9 e4		      lda	#<(playerpointers+2)
   6117  412b		       8d 50 10 	      sta	DF0LOW
   6118  412e		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   6119  4130		       8d 68 10 	      sta	DF0HI
   6120  4133		       a2 72		      LDX	#<player215then_2
   6121  4135		       8e 78 10 	      STX	DF0WRITE
   6122  4138		       a9 68		      LDA	#((>player215then_2) & $0f) | (((>player215then_2) / 2) & $70)
   6123  413a		       8d 78 10 	      STA	DF0WRITE
   6124  413d		       a9 08		      LDA	#8
   6125  413f		       85 a7		      STA	player2height
   6126  4141				   .skip214then
   6127  4141				   .skipL0502
   6128  4141				   .L0503		;  if frame  =  10  &&  EnemyHit  =  2 then player2:
   6129  4141
   6130  4141		       a5 d6		      LDA	frame
   6131  4143		       c9 0a		      CMP	#10
   6132  4145		       d0 1e		      BNE	.skipL0503
   6133  4147				   .condpart216
   6134  4147		       a5 d9		      LDA	EnemyHit
   6135  4149		       c9 02		      CMP	#2
   6136  414b		       d0 18		      BNE	.skip216then
   6137  414d				   .condpart217
   6138  414d		       a9 e4		      lda	#<(playerpointers+2)
   6139  414f		       8d 50 10 	      sta	DF0LOW
   6140  4152		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   6141  4154		       8d 68 10 	      sta	DF0HI
   6142  4157		       a2 7a		      LDX	#<player217then_2
   6143  4159		       8e 78 10 	      STX	DF0WRITE
   6144  415c		       a9 68		      LDA	#((>player217then_2) & $0f) | (((>player217then_2) / 2) & $70)
   6145  415e		       8d 78 10 	      STA	DF0WRITE
   6146  4161		       a9 08		      LDA	#8
   6147  4163		       85 a7		      STA	player2height
   6148  4165				   .skip216then
   6149  4165				   .skipL0503
   6150  4165				   .L0504		;  if frame  =  10  &&  EnemyHit  <  1 then player3:
   6151  4165
   6152  4165		       a5 d6		      LDA	frame
   6153  4167		       c9 0a		      CMP	#10
   6154  4169		       d0 1e		      BNE	.skipL0504
   6155  416b				   .condpart218
   6156  416b		       a5 d9		      LDA	EnemyHit
   6157  416d		       c9 01		      CMP	#1
   6158  416f		       b0 18		      BCS	.skip218then
   6159  4171				   .condpart219
   6160  4171		       a9 e6		      lda	#<(playerpointers+4)
   6161  4173		       8d 50 10 	      sta	DF0LOW
   6162  4176		       a9 01		      lda	#(>(playerpointers+4)) & $0F
   6163  4178		       8d 68 10 	      sta	DF0HI
   6164  417b		       a2 82		      LDX	#<player219then_3
   6165  417d		       8e 78 10 	      STX	DF0WRITE
   6166  4180		       a9 68		      LDA	#((>player219then_3) & $0f) | (((>player219then_3) / 2) & $70)
   6167  4182		       8d 78 10 	      STA	DF0WRITE
   6168  4185		       a9 08		      LDA	#8
   6169  4187		       85 a8		      STA	player3height
   6170  4189				   .skip218then
   6171  4189				   .skipL0504
   6172  4189				   .L0505		;  if frame  =  10  &&  EnemyHit  = 3 then player3:
   6173  4189
   6174  4189		       a5 d6		      LDA	frame
   6175  418b		       c9 0a		      CMP	#10
   6176  418d		       d0 1e		      BNE	.skipL0505
   6177  418f				   .condpart220
   6178  418f		       a5 d9		      LDA	EnemyHit
   6179  4191		       c9 03		      CMP	#3
   6180  4193		       d0 18		      BNE	.skip220then
   6181  4195				   .condpart221
   6182  4195		       a9 e6		      lda	#<(playerpointers+4)
   6183  4197		       8d 50 10 	      sta	DF0LOW
   6184  419a		       a9 01		      lda	#(>(playerpointers+4)) & $0F
   6185  419c		       8d 68 10 	      sta	DF0HI
   6186  419f		       a2 8a		      LDX	#<player221then_3
   6187  41a1		       8e 78 10 	      STX	DF0WRITE
   6188  41a4		       a9 68		      LDA	#((>player221then_3) & $0f) | (((>player221then_3) / 2) & $70)
   6189  41a6		       8d 78 10 	      STA	DF0WRITE
   6190  41a9		       a9 08		      LDA	#8
   6191  41ab		       85 a8		      STA	player3height
   6192  41ad				   .skip220then
   6193  41ad				   .skipL0505
   6194  41ad				   .L0506		;  if frame  =  10  &&  EnemyHit  <  1 then player1:
   6195  41ad
   6196  41ad		       a5 d6		      LDA	frame
   6197  41af		       c9 0a		      CMP	#10
   6198  41b1		       d0 1e		      BNE	.skipL0506
   6199  41b3				   .condpart222
   6200  41b3		       a5 d9		      LDA	EnemyHit
   6201  41b5		       c9 01		      CMP	#1
   6202  41b7		       b0 18		      BCS	.skip222then
   6203  41b9				   .condpart223
   6204  41b9		       a9 e2		      lda	#<(playerpointers+0)
   6205  41bb		       8d 50 10 	      sta	DF0LOW
   6206  41be		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   6207  41c0		       8d 68 10 	      sta	DF0HI
   6208  41c3		       a2 92		      LDX	#<player223then_1
   6209  41c5		       8e 78 10 	      STX	DF0WRITE
   6210  41c8		       a9 68		      LDA	#((>player223then_1) & $0f) | (((>player223then_1) / 2) & $70)
   6211  41ca		       8d 78 10 	      STA	DF0WRITE
   6212  41cd		       a9 08		      LDA	#8
   6213  41cf		       85 a6		      STA	player1height
   6214  41d1				   .skip222then
   6215  41d1				   .skipL0506
   6216  41d1				   .L0507		;  if frame  =  10  &&  EnemyHit  =  1 then player1:
   6217  41d1
   6218  41d1		       a5 d6		      LDA	frame
   6219  41d3		       c9 0a		      CMP	#10
   6220  41d5		       d0 1e		      BNE	.skipL0507
   6221  41d7				   .condpart224
   6222  41d7		       a5 d9		      LDA	EnemyHit
   6223  41d9		       c9 01		      CMP	#1
   6224  41db		       d0 18		      BNE	.skip224then
   6225  41dd				   .condpart225
   6226  41dd		       a9 e2		      lda	#<(playerpointers+0)
   6227  41df		       8d 50 10 	      sta	DF0LOW
   6228  41e2		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   6229  41e4		       8d 68 10 	      sta	DF0HI
   6230  41e7		       a2 9a		      LDX	#<player225then_1
   6231  41e9		       8e 78 10 	      STX	DF0WRITE
   6232  41ec		       a9 68		      LDA	#((>player225then_1) & $0f) | (((>player225then_1) / 2) & $70)
   6233  41ee		       8d 78 10 	      STA	DF0WRITE
   6234  41f1		       a9 08		      LDA	#8
   6235  41f3		       85 a6		      STA	player1height
   6236  41f5				   .skip224then
   6237  41f5				   .skipL0507
   6238  41f5				   .L0508		;  if frame  =  10 then player2color:
   6239  41f5
   6240  41f5		       a5 d6		      LDA	frame
   6241  41f7		       c9 0a		      CMP	#10
   6242  41f9		       d0 14		      BNE	.skipL0508
   6243  41fb				   .condpart226
   6244  41fb		       a9 f6		      lda	#<(playerpointers+20)
   6245  41fd		       8d 50 10 	      sta	DF0LOW
   6246  4200		       a9 01		      lda	#(>(playerpointers+20)) & $0F
   6247  4202		       8d 68 10 	      sta	DF0HI
   6248  4205		       a2 a2		      LDX	#<playercolor226then_2
   6249  4207		       8e 78 10 	      STX	DF0WRITE
   6250  420a		       a9 68		      LDA	#((>playercolor226then_2) & $0f) | (((>playercolor226then_2) / 2) & $70)
   6251  420c		       8d 78 10 	      STA	DF0WRITE
   6252  420f				   .skipL0508
   6253  420f				   .L0509		;  if frame  =  10 then player3color:
   6254  420f
   6255  420f		       a5 d6		      LDA	frame
   6256  4211		       c9 0a		      CMP	#10
   6257  4213		       d0 14		      BNE	.skipL0509
   6258  4215				   .condpart227
   6259  4215		       a9 f8		      lda	#<(playerpointers+22)
   6260  4217		       8d 50 10 	      sta	DF0LOW
   6261  421a		       a9 01		      lda	#(>(playerpointers+22)) & $0F
   6262  421c		       8d 68 10 	      sta	DF0HI
   6263  421f		       a2 aa		      LDX	#<playercolor227then_3
   6264  4221		       8e 78 10 	      STX	DF0WRITE
   6265  4224		       a9 68		      LDA	#((>playercolor227then_3) & $0f) | (((>playercolor227then_3) / 2) & $70)
   6266  4226		       8d 78 10 	      STA	DF0WRITE
   6267  4229				   .skipL0509
   6268  4229				   .L0510		;  if frame  =  10 then player1color:
   6269  4229
   6270  4229		       a5 d6		      LDA	frame
   6271  422b		       c9 0a		      CMP	#10
   6272  422d		       d0 14		      BNE	.skipL0510
   6273  422f				   .condpart228
   6274  422f		       a9 f4		      lda	#<(playerpointers+18)
   6275  4231		       8d 50 10 	      sta	DF0LOW
   6276  4234		       a9 01		      lda	#(>(playerpointers+18)) & $0F
   6277  4236		       8d 68 10 	      sta	DF0HI
   6278  4239		       a2 b2		      LDX	#<playercolor228then_1
   6279  423b		       8e 78 10 	      STX	DF0WRITE
   6280  423e		       a9 68		      LDA	#((>playercolor228then_1) & $0f) | (((>playercolor228then_1) / 2) & $70)
   6281  4240		       8d 78 10 	      STA	DF0WRITE
   6282  4243				   .skipL0510
   6283  4243				   .L0511		;  if frame  =  20  &&  EnemyHit  <  1 then player2:
   6284  4243
   6285  4243		       a5 d6		      LDA	frame
   6286  4245		       c9 14		      CMP	#20
   6287  4247		       d0 1e		      BNE	.skipL0511
   6288  4249				   .condpart229
   6289  4249		       a5 d9		      LDA	EnemyHit
   6290  424b		       c9 01		      CMP	#1
   6291  424d		       b0 18		      BCS	.skip229then
   6292  424f				   .condpart230
   6293  424f		       a9 e4		      lda	#<(playerpointers+2)
   6294  4251		       8d 50 10 	      sta	DF0LOW
   6295  4254		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   6296  4256		       8d 68 10 	      sta	DF0HI
   6297  4259		       a2 ba		      LDX	#<player230then_2
   6298  425b		       8e 78 10 	      STX	DF0WRITE
   6299  425e		       a9 68		      LDA	#((>player230then_2) & $0f) | (((>player230then_2) / 2) & $70)
   6300  4260		       8d 78 10 	      STA	DF0WRITE
   6301  4263		       a9 08		      LDA	#8
   6302  4265		       85 a7		      STA	player2height
   6303  4267				   .skip229then
   6304  4267				   .skipL0511
   6305  4267				   .L0512		;  if frame  =  20  &&  EnemyHit  = 2 then player2:
   6306  4267
   6307  4267		       a5 d6		      LDA	frame
   6308  4269		       c9 14		      CMP	#20
   6309  426b		       d0 1e		      BNE	.skipL0512
   6310  426d				   .condpart231
   6311  426d		       a5 d9		      LDA	EnemyHit
   6312  426f		       c9 02		      CMP	#2
   6313  4271		       d0 18		      BNE	.skip231then
   6314  4273				   .condpart232
   6315  4273		       a9 e4		      lda	#<(playerpointers+2)
   6316  4275		       8d 50 10 	      sta	DF0LOW
   6317  4278		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   6318  427a		       8d 68 10 	      sta	DF0HI
   6319  427d		       a2 c2		      LDX	#<player232then_2
   6320  427f		       8e 78 10 	      STX	DF0WRITE
   6321  4282		       a9 68		      LDA	#((>player232then_2) & $0f) | (((>player232then_2) / 2) & $70)
   6322  4284		       8d 78 10 	      STA	DF0WRITE
   6323  4287		       a9 08		      LDA	#8
   6324  4289		       85 a7		      STA	player2height
   6325  428b				   .skip231then
   6326  428b				   .skipL0512
   6327  428b				   .L0513		;  if frame  =  20  &&  EnemyHit  <  1 then player3:
   6328  428b
   6329  428b		       a5 d6		      LDA	frame
   6330  428d		       c9 14		      CMP	#20
   6331  428f		       d0 1e		      BNE	.skipL0513
   6332  4291				   .condpart233
   6333  4291		       a5 d9		      LDA	EnemyHit
   6334  4293		       c9 01		      CMP	#1
   6335  4295		       b0 18		      BCS	.skip233then
   6336  4297				   .condpart234
   6337  4297		       a9 e6		      lda	#<(playerpointers+4)
   6338  4299		       8d 50 10 	      sta	DF0LOW
   6339  429c		       a9 01		      lda	#(>(playerpointers+4)) & $0F
   6340  429e		       8d 68 10 	      sta	DF0HI
   6341  42a1		       a2 ca		      LDX	#<player234then_3
   6342  42a3		       8e 78 10 	      STX	DF0WRITE
   6343  42a6		       a9 68		      LDA	#((>player234then_3) & $0f) | (((>player234then_3) / 2) & $70)
   6344  42a8		       8d 78 10 	      STA	DF0WRITE
   6345  42ab		       a9 08		      LDA	#8
   6346  42ad		       85 a8		      STA	player3height
   6347  42af				   .skip233then
   6348  42af				   .skipL0513
   6349  42af				   .L0514		;  if frame  =  20  &&  EnemyHit  = 3 then player3:
   6350  42af
   6351  42af		       a5 d6		      LDA	frame
   6352  42b1		       c9 14		      CMP	#20
   6353  42b3		       d0 1e		      BNE	.skipL0514
   6354  42b5				   .condpart235
   6355  42b5		       a5 d9		      LDA	EnemyHit
   6356  42b7		       c9 03		      CMP	#3
   6357  42b9		       d0 18		      BNE	.skip235then
   6358  42bb				   .condpart236
   6359  42bb		       a9 e6		      lda	#<(playerpointers+4)
   6360  42bd		       8d 50 10 	      sta	DF0LOW
   6361  42c0		       a9 01		      lda	#(>(playerpointers+4)) & $0F
   6362  42c2		       8d 68 10 	      sta	DF0HI
   6363  42c5		       a2 d2		      LDX	#<player236then_3
   6364  42c7		       8e 78 10 	      STX	DF0WRITE
   6365  42ca		       a9 68		      LDA	#((>player236then_3) & $0f) | (((>player236then_3) / 2) & $70)
   6366  42cc		       8d 78 10 	      STA	DF0WRITE
   6367  42cf		       a9 08		      LDA	#8
   6368  42d1		       85 a8		      STA	player3height
   6369  42d3				   .skip235then
   6370  42d3				   .skipL0514
   6371  42d3				   .L0515		;  if frame  =  20  &&  EnemyHit  <  1 then player1:
   6372  42d3
   6373  42d3		       a5 d6		      LDA	frame
   6374  42d5		       c9 14		      CMP	#20
   6375  42d7		       d0 1e		      BNE	.skipL0515
   6376  42d9				   .condpart237
   6377  42d9		       a5 d9		      LDA	EnemyHit
   6378  42db		       c9 01		      CMP	#1
   6379  42dd		       b0 18		      BCS	.skip237then
   6380  42df				   .condpart238
   6381  42df		       a9 e2		      lda	#<(playerpointers+0)
   6382  42e1		       8d 50 10 	      sta	DF0LOW
   6383  42e4		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   6384  42e6		       8d 68 10 	      sta	DF0HI
   6385  42e9		       a2 da		      LDX	#<player238then_1
   6386  42eb		       8e 78 10 	      STX	DF0WRITE
   6387  42ee		       a9 68		      LDA	#((>player238then_1) & $0f) | (((>player238then_1) / 2) & $70)
   6388  42f0		       8d 78 10 	      STA	DF0WRITE
   6389  42f3		       a9 08		      LDA	#8
   6390  42f5		       85 a6		      STA	player1height
   6391  42f7				   .skip237then
   6392  42f7				   .skipL0515
   6393  42f7				   .L0516		;  if frame  =  20  &&  EnemyHit  =  1 then player1:
   6394  42f7
   6395  42f7		       a5 d6		      LDA	frame
   6396  42f9		       c9 14		      CMP	#20
   6397  42fb		       d0 1e		      BNE	.skipL0516
   6398  42fd				   .condpart239
   6399  42fd		       a5 d9		      LDA	EnemyHit
   6400  42ff		       c9 01		      CMP	#1
   6401  4301		       d0 18		      BNE	.skip239then
   6402  4303				   .condpart240
   6403  4303		       a9 e2		      lda	#<(playerpointers+0)
   6404  4305		       8d 50 10 	      sta	DF0LOW
   6405  4308		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   6406  430a		       8d 68 10 	      sta	DF0HI
   6407  430d		       a2 e2		      LDX	#<player240then_1
   6408  430f		       8e 78 10 	      STX	DF0WRITE
   6409  4312		       a9 68		      LDA	#((>player240then_1) & $0f) | (((>player240then_1) / 2) & $70)
   6410  4314		       8d 78 10 	      STA	DF0WRITE
   6411  4317		       a9 08		      LDA	#8
   6412  4319		       85 a6		      STA	player1height
   6413  431b				   .skip239then
   6414  431b				   .skipL0516
   6415  431b				   .L0517		;  if frame  =  20 then player2color:
   6416  431b
   6417  431b		       a5 d6		      LDA	frame
   6418  431d		       c9 14		      CMP	#20
   6419  431f		       d0 14		      BNE	.skipL0517
   6420  4321				   .condpart241
   6421  4321		       a9 f6		      lda	#<(playerpointers+20)
   6422  4323		       8d 50 10 	      sta	DF0LOW
   6423  4326		       a9 01		      lda	#(>(playerpointers+20)) & $0F
   6424  4328		       8d 68 10 	      sta	DF0HI
   6425  432b		       a2 ea		      LDX	#<playercolor241then_2
   6426  432d		       8e 78 10 	      STX	DF0WRITE
   6427  4330		       a9 68		      LDA	#((>playercolor241then_2) & $0f) | (((>playercolor241then_2) / 2) & $70)
   6428  4332		       8d 78 10 	      STA	DF0WRITE
   6429  4335				   .skipL0517
   6430  4335				   .L0518		;  if frame  =  20 then player3color:
   6431  4335
   6432  4335		       a5 d6		      LDA	frame
   6433  4337		       c9 14		      CMP	#20
   6434  4339		       d0 14		      BNE	.skipL0518
   6435  433b				   .condpart242
   6436  433b		       a9 f8		      lda	#<(playerpointers+22)
   6437  433d		       8d 50 10 	      sta	DF0LOW
   6438  4340		       a9 01		      lda	#(>(playerpointers+22)) & $0F
   6439  4342		       8d 68 10 	      sta	DF0HI
   6440  4345		       a2 f2		      LDX	#<playercolor242then_3
   6441  4347		       8e 78 10 	      STX	DF0WRITE
   6442  434a		       a9 68		      LDA	#((>playercolor242then_3) & $0f) | (((>playercolor242then_3) / 2) & $70)
   6443  434c		       8d 78 10 	      STA	DF0WRITE
   6444  434f				   .skipL0518
   6445  434f				   .L0519		;  if frame  =  20 then player1color:
   6446  434f
   6447  434f		       a5 d6		      LDA	frame
   6448  4351		       c9 14		      CMP	#20
   6449  4353		       d0 14		      BNE	.skipL0519
   6450  4355				   .condpart243
   6451  4355		       a9 f4		      lda	#<(playerpointers+18)
   6452  4357		       8d 50 10 	      sta	DF0LOW
   6453  435a		       a9 01		      lda	#(>(playerpointers+18)) & $0F
   6454  435c		       8d 68 10 	      sta	DF0HI
   6455  435f		       a2 fa		      LDX	#<playercolor243then_1
   6456  4361		       8e 78 10 	      STX	DF0WRITE
   6457  4364		       a9 68		      LDA	#((>playercolor243then_1) & $0f) | (((>playercolor243then_1) / 2) & $70)
   6458  4366		       8d 78 10 	      STA	DF0WRITE
   6459  4369				   .skipL0519
   6460  4369				   .L0520		;  if frame  =  30  &&  EnemyHit  <  1 then player2:
   6461  4369
   6462  4369		       a5 d6		      LDA	frame
   6463  436b		       c9 1e		      CMP	#30
   6464  436d		       d0 1e		      BNE	.skipL0520
   6465  436f				   .condpart244
   6466  436f		       a5 d9		      LDA	EnemyHit
   6467  4371		       c9 01		      CMP	#1
   6468  4373		       b0 18		      BCS	.skip244then
   6469  4375				   .condpart245
   6470  4375		       a9 e4		      lda	#<(playerpointers+2)
   6471  4377		       8d 50 10 	      sta	DF0LOW
   6472  437a		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   6473  437c		       8d 68 10 	      sta	DF0HI
   6474  437f		       a2 02		      LDX	#<player245then_2
   6475  4381		       8e 78 10 	      STX	DF0WRITE
   6476  4384		       a9 69		      LDA	#((>player245then_2) & $0f) | (((>player245then_2) / 2) & $70)
   6477  4386		       8d 78 10 	      STA	DF0WRITE
   6478  4389		       a9 08		      LDA	#8
   6479  438b		       85 a7		      STA	player2height
   6480  438d				   .skip244then
   6481  438d				   .skipL0520
   6482  438d				   .L0521		;  if frame  =  30  &&  EnemyHit  =  2 then player2:
   6483  438d
   6484  438d		       a5 d6		      LDA	frame
   6485  438f		       c9 1e		      CMP	#30
   6486  4391		       d0 1e		      BNE	.skipL0521
   6487  4393				   .condpart246
   6488  4393		       a5 d9		      LDA	EnemyHit
   6489  4395		       c9 02		      CMP	#2
   6490  4397		       d0 18		      BNE	.skip246then
   6491  4399				   .condpart247
   6492  4399		       a9 e4		      lda	#<(playerpointers+2)
   6493  439b		       8d 50 10 	      sta	DF0LOW
   6494  439e		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   6495  43a0		       8d 68 10 	      sta	DF0HI
   6496  43a3		       a2 0a		      LDX	#<player247then_2
   6497  43a5		       8e 78 10 	      STX	DF0WRITE
   6498  43a8		       a9 69		      LDA	#((>player247then_2) & $0f) | (((>player247then_2) / 2) & $70)
   6499  43aa		       8d 78 10 	      STA	DF0WRITE
   6500  43ad		       a9 08		      LDA	#8
   6501  43af		       85 a7		      STA	player2height
   6502  43b1				   .skip246then
   6503  43b1				   .skipL0521
   6504  43b1				   .L0522		;  if frame  =  30 then player3:
   6505  43b1
   6506  43b1		       a5 d6		      LDA	frame
   6507  43b3		       c9 1e		      CMP	#30
   6508  43b5		       d0 18		      BNE	.skipL0522
   6509  43b7				   .condpart248
   6510  43b7		       a9 e6		      lda	#<(playerpointers+4)
   6511  43b9		       8d 50 10 	      sta	DF0LOW
   6512  43bc		       a9 01		      lda	#(>(playerpointers+4)) & $0F
   6513  43be		       8d 68 10 	      sta	DF0HI
   6514  43c1		       a2 12		      LDX	#<player248then_3
   6515  43c3		       8e 78 10 	      STX	DF0WRITE
   6516  43c6		       a9 69		      LDA	#((>player248then_3) & $0f) | (((>player248then_3) / 2) & $70)
   6517  43c8		       8d 78 10 	      STA	DF0WRITE
   6518  43cb		       a9 08		      LDA	#8
   6519  43cd		       85 a8		      STA	player3height
   6520  43cf				   .skipL0522
   6521  43cf				   .L0523		;  if frame  =  30  &&  EnemyHit  <  1 then player1:
   6522  43cf
   6523  43cf		       a5 d6		      LDA	frame
   6524  43d1		       c9 1e		      CMP	#30
   6525  43d3		       d0 1e		      BNE	.skipL0523
   6526  43d5				   .condpart249
   6527  43d5		       a5 d9		      LDA	EnemyHit
   6528  43d7		       c9 01		      CMP	#1
   6529  43d9		       b0 18		      BCS	.skip249then
   6530  43db				   .condpart250
   6531  43db		       a9 e2		      lda	#<(playerpointers+0)
   6532  43dd		       8d 50 10 	      sta	DF0LOW
   6533  43e0		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   6534  43e2		       8d 68 10 	      sta	DF0HI
   6535  43e5		       a2 1a		      LDX	#<player250then_1
   6536  43e7		       8e 78 10 	      STX	DF0WRITE
   6537  43ea		       a9 69		      LDA	#((>player250then_1) & $0f) | (((>player250then_1) / 2) & $70)
   6538  43ec		       8d 78 10 	      STA	DF0WRITE
   6539  43ef		       a9 08		      LDA	#8
   6540  43f1		       85 a6		      STA	player1height
   6541  43f3				   .skip249then
   6542  43f3				   .skipL0523
   6543  43f3				   .L0524		;  if frame  =  30  &&  EnemyHit  =  1 then player1:
   6544  43f3
   6545  43f3		       a5 d6		      LDA	frame
   6546  43f5		       c9 1e		      CMP	#30
   6547  43f7		       d0 1e		      BNE	.skipL0524
   6548  43f9				   .condpart251
   6549  43f9		       a5 d9		      LDA	EnemyHit
   6550  43fb		       c9 01		      CMP	#1
   6551  43fd		       d0 18		      BNE	.skip251then
   6552  43ff				   .condpart252
   6553  43ff		       a9 e2		      lda	#<(playerpointers+0)
   6554  4401		       8d 50 10 	      sta	DF0LOW
   6555  4404		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   6556  4406		       8d 68 10 	      sta	DF0HI
   6557  4409		       a2 22		      LDX	#<player252then_1
   6558  440b		       8e 78 10 	      STX	DF0WRITE
   6559  440e		       a9 69		      LDA	#((>player252then_1) & $0f) | (((>player252then_1) / 2) & $70)
   6560  4410		       8d 78 10 	      STA	DF0WRITE
   6561  4413		       a9 08		      LDA	#8
   6562  4415		       85 a6		      STA	player1height
   6563  4417				   .skip251then
   6564  4417				   .skipL0524
   6565  4417				   .L0525		;  if frame  =  30 then player2color:
   6566  4417
   6567  4417		       a5 d6		      LDA	frame
   6568  4419		       c9 1e		      CMP	#30
   6569  441b		       d0 14		      BNE	.skipL0525
   6570  441d				   .condpart253
   6571  441d		       a9 f6		      lda	#<(playerpointers+20)
   6572  441f		       8d 50 10 	      sta	DF0LOW
   6573  4422		       a9 01		      lda	#(>(playerpointers+20)) & $0F
   6574  4424		       8d 68 10 	      sta	DF0HI
   6575  4427		       a2 2a		      LDX	#<playercolor253then_2
   6576  4429		       8e 78 10 	      STX	DF0WRITE
   6577  442c		       a9 69		      LDA	#((>playercolor253then_2) & $0f) | (((>playercolor253then_2) / 2) & $70)
   6578  442e		       8d 78 10 	      STA	DF0WRITE
   6579  4431				   .skipL0525
   6580  4431				   .L0526		;  if frame  =  30 then player3color:
   6581  4431
   6582  4431		       a5 d6		      LDA	frame
   6583  4433		       c9 1e		      CMP	#30
   6584  4435		       d0 14		      BNE	.skipL0526
   6585  4437				   .condpart254
   6586  4437		       a9 f8		      lda	#<(playerpointers+22)
   6587  4439		       8d 50 10 	      sta	DF0LOW
   6588  443c		       a9 01		      lda	#(>(playerpointers+22)) & $0F
   6589  443e		       8d 68 10 	      sta	DF0HI
   6590  4441		       a2 32		      LDX	#<playercolor254then_3
   6591  4443		       8e 78 10 	      STX	DF0WRITE
   6592  4446		       a9 69		      LDA	#((>playercolor254then_3) & $0f) | (((>playercolor254then_3) / 2) & $70)
   6593  4448		       8d 78 10 	      STA	DF0WRITE
   6594  444b				   .skipL0526
   6595  444b				   .L0527		;  if frame  =  30 then player1color:
   6596  444b
   6597  444b		       a5 d6		      LDA	frame
   6598  444d		       c9 1e		      CMP	#30
   6599  444f		       d0 14		      BNE	.skipL0527
   6600  4451				   .condpart255
   6601  4451		       a9 f4		      lda	#<(playerpointers+18)
   6602  4453		       8d 50 10 	      sta	DF0LOW
   6603  4456		       a9 01		      lda	#(>(playerpointers+18)) & $0F
   6604  4458		       8d 68 10 	      sta	DF0HI
   6605  445b		       a2 3a		      LDX	#<playercolor255then_1
   6606  445d		       8e 78 10 	      STX	DF0WRITE
   6607  4460		       a9 69		      LDA	#((>playercolor255then_1) & $0f) | (((>playercolor255then_1) / 2) & $70)
   6608  4462		       8d 78 10 	      STA	DF0WRITE
   6609  4465				   .skipL0527
   6610  4465				   .__Fire_Animation
   6611  4465							; __Fire_Animation
   6612  4465
   6613  4465				   .L0528		;  if f  =  10 then player5:
   6614  4465
   6615  4465		       a5 d6		      LDA	f
   6616  4467		       c9 0a		      CMP	#10
   6617  4469		       d0 18		      BNE	.skipL0528
   6618  446b				   .condpart256
   6619  446b		       a9 ea		      lda	#<(playerpointers+8)
   6620  446d		       8d 50 10 	      sta	DF0LOW
   6621  4470		       a9 01		      lda	#(>(playerpointers+8)) & $0F
   6622  4472		       8d 68 10 	      sta	DF0HI
   6623  4475		       a2 42		      LDX	#<player256then_5
   6624  4477		       8e 78 10 	      STX	DF0WRITE
   6625  447a		       a9 69		      LDA	#((>player256then_5) & $0f) | (((>player256then_5) / 2) & $70)
   6626  447c		       8d 78 10 	      STA	DF0WRITE
   6627  447f		       a9 08		      LDA	#8
   6628  4481		       85 aa		      STA	player5height
   6629  4483				   .skipL0528
   6630  4483				   .
   6631  4483							; 
   6632  4483
   6633  4483				   .L0529		;  if f  =  10 then player5color:
   6634  4483
   6635  4483		       a5 d6		      LDA	f
   6636  4485		       c9 0a		      CMP	#10
   6637  4487		       d0 14		      BNE	.skipL0529
   6638  4489				   .condpart257
   6639  4489		       a9 fc		      lda	#<(playerpointers+26)
   6640  448b		       8d 50 10 	      sta	DF0LOW
   6641  448e		       a9 01		      lda	#(>(playerpointers+26)) & $0F
   6642  4490		       8d 68 10 	      sta	DF0HI
   6643  4493		       a2 4a		      LDX	#<playercolor257then_5
   6644  4495		       8e 78 10 	      STX	DF0WRITE
   6645  4498		       a9 69		      LDA	#((>playercolor257then_5) & $0f) | (((>playercolor257then_5) / 2) & $70)
   6646  449a		       8d 78 10 	      STA	DF0WRITE
   6647  449d				   .skipL0529
   6648  449d				   .L0530		;  if f  =  20 then player5:
   6649  449d
   6650  449d		       a5 d6		      LDA	f
   6651  449f		       c9 14		      CMP	#20
   6652  44a1		       d0 18		      BNE	.skipL0530
   6653  44a3				   .condpart258
   6654  44a3		       a9 ea		      lda	#<(playerpointers+8)
   6655  44a5		       8d 50 10 	      sta	DF0LOW
   6656  44a8		       a9 01		      lda	#(>(playerpointers+8)) & $0F
   6657  44aa		       8d 68 10 	      sta	DF0HI
   6658  44ad		       a2 52		      LDX	#<player258then_5
   6659  44af		       8e 78 10 	      STX	DF0WRITE
   6660  44b2		       a9 69		      LDA	#((>player258then_5) & $0f) | (((>player258then_5) / 2) & $70)
   6661  44b4		       8d 78 10 	      STA	DF0WRITE
   6662  44b7		       a9 08		      LDA	#8
   6663  44b9		       85 aa		      STA	player5height
   6664  44bb				   .skipL0530
   6665  44bb				   .L0531		;  if f  =  20 then player5color:
   6666  44bb
   6667  44bb		       a5 d6		      LDA	f
   6668  44bd		       c9 14		      CMP	#20
   6669  44bf		       d0 14		      BNE	.skipL0531
   6670  44c1				   .condpart259
   6671  44c1		       a9 fc		      lda	#<(playerpointers+26)
   6672  44c3		       8d 50 10 	      sta	DF0LOW
   6673  44c6		       a9 01		      lda	#(>(playerpointers+26)) & $0F
   6674  44c8		       8d 68 10 	      sta	DF0HI
   6675  44cb		       a2 5a		      LDX	#<playercolor259then_5
   6676  44cd		       8e 78 10 	      STX	DF0WRITE
   6677  44d0		       a9 69		      LDA	#((>playercolor259then_5) & $0f) | (((>playercolor259then_5) / 2) & $70)
   6678  44d2		       8d 78 10 	      STA	DF0WRITE
   6679  44d5				   .skipL0531
   6680  44d5				   .L0532		;  if f  =  30 then player5:
   6681  44d5
   6682  44d5		       a5 d6		      LDA	f
   6683  44d7		       c9 1e		      CMP	#30
   6684  44d9		       d0 18		      BNE	.skipL0532
   6685  44db				   .condpart260
   6686  44db		       a9 ea		      lda	#<(playerpointers+8)
   6687  44dd		       8d 50 10 	      sta	DF0LOW
   6688  44e0		       a9 01		      lda	#(>(playerpointers+8)) & $0F
   6689  44e2		       8d 68 10 	      sta	DF0HI
   6690  44e5		       a2 62		      LDX	#<player260then_5
   6691  44e7		       8e 78 10 	      STX	DF0WRITE
   6692  44ea		       a9 69		      LDA	#((>player260then_5) & $0f) | (((>player260then_5) / 2) & $70)
   6693  44ec		       8d 78 10 	      STA	DF0WRITE
   6694  44ef		       a9 08		      LDA	#8
   6695  44f1		       85 aa		      STA	player5height
   6696  44f3				   .skipL0532
   6697  44f3				   .L0533		;  if f  =  30 then player5color:
   6698  44f3
   6699  44f3		       a5 d6		      LDA	f
   6700  44f5		       c9 1e		      CMP	#30
   6701  44f7		       d0 14		      BNE	.skipL0533
   6702  44f9				   .condpart261
   6703  44f9		       a9 fc		      lda	#<(playerpointers+26)
   6704  44fb		       8d 50 10 	      sta	DF0LOW
   6705  44fe		       a9 01		      lda	#(>(playerpointers+26)) & $0F
   6706  4500		       8d 68 10 	      sta	DF0HI
   6707  4503		       a2 6a		      LDX	#<playercolor261then_5
   6708  4505		       8e 78 10 	      STX	DF0WRITE
   6709  4508		       a9 69		      LDA	#((>playercolor261then_5) & $0f) | (((>playercolor261then_5) / 2) & $70)
   6710  450a		       8d 78 10 	      STA	DF0WRITE
   6711  450d				   .skipL0533
   6712  450d				   .L0534		;  if frame  >  0  &&	Powerup  =  1 then player4:
   6713  450d
   6714  450d		       a9 00		      LDA	#0
   6715  450f		       c5 d6		      CMP	frame
   6716  4511		       b0 1e		      BCS	.skipL0534
   6717  4513				   .condpart262
   6718  4513		       a5 ee		      LDA	Powerup
   6719  4515		       c9 01		      CMP	#1
   6720  4517		       d0 18		      BNE	.skip262then
   6721  4519				   .condpart263
   6722  4519		       a9 e8		      lda	#<(playerpointers+6)
   6723  451b		       8d 50 10 	      sta	DF0LOW
   6724  451e		       a9 01		      lda	#(>(playerpointers+6)) & $0F
   6725  4520		       8d 68 10 	      sta	DF0HI
   6726  4523		       a2 72		      LDX	#<player263then_4
   6727  4525		       8e 78 10 	      STX	DF0WRITE
   6728  4528		       a9 69		      LDA	#((>player263then_4) & $0f) | (((>player263then_4) / 2) & $70)
   6729  452a		       8d 78 10 	      STA	DF0WRITE
   6730  452d		       a9 09		      LDA	#9
   6731  452f		       85 a9		      STA	player4height
   6732  4531				   .skip262then
   6733  4531				   .skipL0534
   6734  4531				   .L0535		;  if frame  > 0  &&  Powerup	=  1 then player4color:
   6735  4531
   6736  4531		       a9 00		      LDA	#0
   6737  4533		       c5 d6		      CMP	frame
   6738  4535		       b0 1a		      BCS	.skipL0535
   6739  4537				   .condpart264
   6740  4537		       a5 ee		      LDA	Powerup
   6741  4539		       c9 01		      CMP	#1
   6742  453b		       d0 14		      BNE	.skip264then
   6743  453d				   .condpart265
   6744  453d		       a9 fa		      lda	#<(playerpointers+24)
   6745  453f		       8d 50 10 	      sta	DF0LOW
   6746  4542		       a9 01		      lda	#(>(playerpointers+24)) & $0F
   6747  4544		       8d 68 10 	      sta	DF0HI
   6748  4547		       a2 7b		      LDX	#<playercolor265then_4
   6749  4549		       8e 78 10 	      STX	DF0WRITE
   6750  454c		       a9 69		      LDA	#((>playercolor265then_4) & $0f) | (((>playercolor265then_4) / 2) & $70)
   6751  454e		       8d 78 10 	      STA	DF0WRITE
   6752  4551				   .skip264then
   6753  4551				   .skipL0535
   6754  4551				   .
   6755  4551							; 
   6756  4551
   6757  4551				   .L0536		;  if frame  <  16  &&  Powerup  = 2 then player4:
   6758  4551
   6759  4551		       a5 d6		      LDA	frame
   6760  4553		       c9 10		      CMP	#16
   6761  4555		       b0 1e		      BCS	.skipL0536
   6762  4557				   .condpart266
   6763  4557		       a5 ee		      LDA	Powerup
   6764  4559		       c9 02		      CMP	#2
   6765  455b		       d0 18		      BNE	.skip266then
   6766  455d				   .condpart267
   6767  455d		       a9 e8		      lda	#<(playerpointers+6)
   6768  455f		       8d 50 10 	      sta	DF0LOW
   6769  4562		       a9 01		      lda	#(>(playerpointers+6)) & $0F
   6770  4564		       8d 68 10 	      sta	DF0HI
   6771  4567		       a2 84		      LDX	#<player267then_4
   6772  4569		       8e 78 10 	      STX	DF0WRITE
   6773  456c		       a9 69		      LDA	#((>player267then_4) & $0f) | (((>player267then_4) / 2) & $70)
   6774  456e		       8d 78 10 	      STA	DF0WRITE
   6775  4571		       a9 09		      LDA	#9
   6776  4573		       85 a9		      STA	player4height
   6777  4575				   .skip266then
   6778  4575				   .skipL0536
   6779  4575				   .
   6780  4575							; 
   6781  4575
   6782  4575				   .L0537		;  if frame  < 16  &&	Powerup  = 2 then player4color:
   6783  4575
   6784  4575		       a5 d6		      LDA	frame
   6785  4577		       c9 10		      CMP	#16
   6786  4579		       b0 1a		      BCS	.skipL0537
   6787  457b				   .condpart268
   6788  457b		       a5 ee		      LDA	Powerup
   6789  457d		       c9 02		      CMP	#2
   6790  457f		       d0 14		      BNE	.skip268then
   6791  4581				   .condpart269
   6792  4581		       a9 fa		      lda	#<(playerpointers+24)
   6793  4583		       8d 50 10 	      sta	DF0LOW
   6794  4586		       a9 01		      lda	#(>(playerpointers+24)) & $0F
   6795  4588		       8d 68 10 	      sta	DF0HI
   6796  458b		       a2 8d		      LDX	#<playercolor269then_4
   6797  458d		       8e 78 10 	      STX	DF0WRITE
   6798  4590		       a9 69		      LDA	#((>playercolor269then_4) & $0f) | (((>playercolor269then_4) / 2) & $70)
   6799  4592		       8d 78 10 	      STA	DF0WRITE
   6800  4595				   .skip268then
   6801  4595				   .skipL0537
   6802  4595				   .
   6803  4595							; 
   6804  4595
   6805  4595				   .L0538		;  if frame  > 15  &&	Powerup  = 2 then player4color:
   6806  4595
   6807  4595		       a9 0f		      LDA	#15
   6808  4597		       c5 d6		      CMP	frame
   6809  4599		       b0 1a		      BCS	.skipL0538
   6810  459b				   .condpart270
   6811  459b		       a5 ee		      LDA	Powerup
   6812  459d		       c9 02		      CMP	#2
   6813  459f		       d0 14		      BNE	.skip270then
   6814  45a1				   .condpart271
   6815  45a1		       a9 fa		      lda	#<(playerpointers+24)
   6816  45a3		       8d 50 10 	      sta	DF0LOW
   6817  45a6		       a9 01		      lda	#(>(playerpointers+24)) & $0F
   6818  45a8		       8d 68 10 	      sta	DF0HI
   6819  45ab		       a2 96		      LDX	#<playercolor271then_4
   6820  45ad		       8e 78 10 	      STX	DF0WRITE
   6821  45b0		       a9 69		      LDA	#((>playercolor271then_4) & $0f) | (((>playercolor271then_4) / 2) & $70)
   6822  45b2		       8d 78 10 	      STA	DF0WRITE
   6823  45b5				   .skip270then
   6824  45b5				   .skipL0538
   6825  45b5				   .
   6826  45b5							; 
   6827  45b5
   6828  45b5				   .L0539		;  if frame  >  0  &&	Powerup  <  1 then player4:
   6829  45b5
   6830  45b5		       a9 00		      LDA	#0
   6831  45b7		       c5 d6		      CMP	frame
   6832  45b9		       b0 1e		      BCS	.skipL0539
   6833  45bb				   .condpart272
   6834  45bb		       a5 ee		      LDA	Powerup
   6835  45bd		       c9 01		      CMP	#1
   6836  45bf		       b0 18		      BCS	.skip272then
   6837  45c1				   .condpart273
   6838  45c1		       a9 e8		      lda	#<(playerpointers+6)
   6839  45c3		       8d 50 10 	      sta	DF0LOW
   6840  45c6		       a9 01		      lda	#(>(playerpointers+6)) & $0F
   6841  45c8		       8d 68 10 	      sta	DF0HI
   6842  45cb		       a2 9f		      LDX	#<player273then_4
   6843  45cd		       8e 78 10 	      STX	DF0WRITE
   6844  45d0		       a9 69		      LDA	#((>player273then_4) & $0f) | (((>player273then_4) / 2) & $70)
   6845  45d2		       8d 78 10 	      STA	DF0WRITE
   6846  45d5		       a9 09		      LDA	#9
   6847  45d7		       85 a9		      STA	player4height
   6848  45d9				   .skip272then
   6849  45d9				   .skipL0539
   6850  45d9				   .L0540		;  if frame  <  16  &&  Powerup  <  1 then player4color:
   6851  45d9
   6852  45d9		       a5 d6		      LDA	frame
   6853  45db		       c9 10		      CMP	#16
   6854  45dd		       b0 1a		      BCS	.skipL0540
   6855  45df				   .condpart274
   6856  45df		       a5 ee		      LDA	Powerup
   6857  45e1		       c9 01		      CMP	#1
   6858  45e3		       b0 14		      BCS	.skip274then
   6859  45e5				   .condpart275
   6860  45e5		       a9 fa		      lda	#<(playerpointers+24)
   6861  45e7		       8d 50 10 	      sta	DF0LOW
   6862  45ea		       a9 01		      lda	#(>(playerpointers+24)) & $0F
   6863  45ec		       8d 68 10 	      sta	DF0HI
   6864  45ef		       a2 a8		      LDX	#<playercolor275then_4
   6865  45f1		       8e 78 10 	      STX	DF0WRITE
   6866  45f4		       a9 69		      LDA	#((>playercolor275then_4) & $0f) | (((>playercolor275then_4) / 2) & $70)
   6867  45f6		       8d 78 10 	      STA	DF0WRITE
   6868  45f9				   .skip274then
   6869  45f9				   .skipL0540
   6870  45f9				   .
   6871  45f9							; 
   6872  45f9
   6873  45f9				   .L0541		;  if frame  > 15  &&	Powerup  <  1 then player4color:
   6874  45f9
   6875  45f9		       a9 0f		      LDA	#15
   6876  45fb		       c5 d6		      CMP	frame
   6877  45fd		       b0 1a		      BCS	.skipL0541
   6878  45ff				   .condpart276
   6879  45ff		       a5 ee		      LDA	Powerup
   6880  4601		       c9 01		      CMP	#1
   6881  4603		       b0 14		      BCS	.skip276then
   6882  4605				   .condpart277
   6883  4605		       a9 fa		      lda	#<(playerpointers+24)
   6884  4607		       8d 50 10 	      sta	DF0LOW
   6885  460a		       a9 01		      lda	#(>(playerpointers+24)) & $0F
   6886  460c		       8d 68 10 	      sta	DF0HI
   6887  460f		       a2 b1		      LDX	#<playercolor277then_4
   6888  4611		       8e 78 10 	      STX	DF0WRITE
   6889  4614		       a9 69		      LDA	#((>playercolor277then_4) & $0f) | (((>playercolor277then_4) / 2) & $70)
   6890  4616		       8d 78 10 	      STA	DF0WRITE
   6891  4619				   .skip276then
   6892  4619				   .skipL0541
   6893  4619				   .
   6894  4619							; 
   6895  4619
   6896  4619				   .L0542		;  if frame  >=  30  &&  EnemyHit  = 1 then player1y = 200  :	EnemyHit  = 0
   6897  4619
   6898  4619		       a5 d6		      LDA	frame
   6899  461b		       c9 1e		      CMP	#30
   6900  461d		       90 0e		      BCC	.skipL0542
   6901  461f				   .condpart278
   6902  461f		       a5 d9		      LDA	EnemyHit
   6903  4621		       c9 01		      CMP	#1
   6904  4623		       d0 08		      BNE	.skip278then
   6905  4625				   .condpart279
   6906  4625		       a9 c8		      LDA	#200
   6907  4627		       85 9a		      STA	player1y
   6908  4629		       a9 00		      LDA	#0
   6909  462b		       85 d9		      STA	EnemyHit
   6910  462d				   .skip278then
   6911  462d				   .skipL0542
   6912  462d				   .L0543		;  if frame  >=  30  &&  EnemyHit  = 2 then player2y = 200  :	EnemyHit  = 0
   6913  462d
   6914  462d		       a5 d6		      LDA	frame
   6915  462f		       c9 1e		      CMP	#30
   6916  4631		       90 0e		      BCC	.skipL0543
   6917  4633				   .condpart280
   6918  4633		       a5 d9		      LDA	EnemyHit
   6919  4635		       c9 02		      CMP	#2
   6920  4637		       d0 08		      BNE	.skip280then
   6921  4639				   .condpart281
   6922  4639		       a9 c8		      LDA	#200
   6923  463b		       85 9b		      STA	player2y
   6924  463d		       a9 00		      LDA	#0
   6925  463f		       85 d9		      STA	EnemyHit
   6926  4641				   .skip280then
   6927  4641				   .skipL0543
   6928  4641				   .L0544		;  if frame  >=  30  &&  EnemyHit  = 3 then player3y = 200  :	EnemyHit  = 0
   6929  4641
   6930  4641		       a5 d6		      LDA	frame
   6931  4643		       c9 1e		      CMP	#30
   6932  4645		       90 0e		      BCC	.skipL0544
   6933  4647				   .condpart282
   6934  4647		       a5 d9		      LDA	EnemyHit
   6935  4649		       c9 03		      CMP	#3
   6936  464b		       d0 08		      BNE	.skip282then
   6937  464d				   .condpart283
   6938  464d		       a9 c8		      LDA	#200
   6939  464f		       85 9c		      STA	player3y
   6940  4651		       a9 00		      LDA	#0
   6941  4653		       85 d9		      STA	EnemyHit
   6942  4655				   .skip282then
   6943  4655				   .skipL0544
   6944  4655				   .L0545		;  if frame  >= 30 then frame	= 0  :	PlayerDamage = 0
   6945  4655
   6946  4655		       a5 d6		      LDA	frame
   6947  4657		       c9 1e		      CMP	#30
   6948  4659		       90 06		      BCC	.skipL0545
   6949  465b				   .condpart284
   6950  465b		       a9 00		      LDA	#0
   6951  465d		       85 d6		      STA	frame
   6952  465f		       85 dd		      STA	PlayerDamage
   6953  4661				   .skipL0545
   6954  4661				   .L0546		;  if joy0right then REFP0  =	0
   6955  4661
   6956  4661		       2c 80 02 	      bit	SWCHA
   6957  4664		       30 04		      BMI	.skipL0546
   6958  4666				   .condpart285
   6959  4666		       a9 00		      LDA	#0
   6960  4668		       85 0b		      STA	REFP0
   6961  466a				   .skipL0546
   6962  466a				   .L0547		;  if joy0left then REFP0  =  8
   6963  466a
   6964  466a		       2c 80 02 	      bit	SWCHA
   6965  466d		       70 04		      BVS	.skipL0547
   6966  466f				   .condpart286
   6967  466f		       a9 08		      LDA	#8
   6968  4671		       85 0b		      STA	REFP0
   6969  4673				   .skipL0547
   6970  4673				   .L0548		;  return
   6971  4673
   6972  4673		       ba		      tsx
   6973  4674		       b5 02		      lda	2,x	; check return address
   6974  4676		       49 76		      eor	#(>*)	; vs. current PCH
   6975  4678		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   6976  467a		       f0 03		      beq	*+5	; if equal, do normal return
   6977  467c		       4c e0 df 	      JMP	BS_return
   6978  467f		       60		      RTS
   6979  4680				   .
   6980  4680							; 
   6981  4680
   6982  4680				   .__GameOver
   6983  4680							; __GameOver
   6984  4680
   6985  4680				   .L0549		;  Bit4_gameover{4}  =  1
   6986  4680
   6987  4680		       a5 ea		      LDA	Bit4_gameover
   6988  4682		       09 10		      ORA	#16
   6989  4684		       85 ea		      STA	Bit4_gameover
   6990  4686				   .L0550		;  Househit  = 1
   6991  4686
   6992  4686		       a9 01		      LDA	#1
   6993  4688		       85 e1		      STA	Househit
   6994  468a				   .L0551		;  missile0y  = 200 :	missile1y = 200
   6995  468a
   6996  468a		       a9 c8		      LDA	#200
   6997  468c		       85 bf		      STA	missile0y
   6998  468e		       85 c0		      STA	missile1y
   6999  4690				   .L0552		;  player0y  = 200
   7000  4690
   7001  4690		       a9 c8		      LDA	#200
   7002  4692		       85 99		      STA	player0y
   7003  4694				   .L0553		;  player1y = 200
   7004  4694
   7005  4694		       a9 c8		      LDA	#200
   7006  4696		       85 9a		      STA	player1y
   7007  4698				   .L0554		;  player2y = 200
   7008  4698
   7009  4698		       a9 c8		      LDA	#200
   7010  469a		       85 9b		      STA	player2y
   7011  469c				   .L0555		;  player3y = 200
   7012  469c
   7013  469c		       a9 c8		      LDA	#200
   7014  469e		       85 9c		      STA	player3y
   7015  46a0				   .L0556		;  player4y = 200
   7016  46a0
   7017  46a0		       a9 c8		      LDA	#200
   7018  46a2		       85 9d		      STA	player4y
   7019  46a4				   .L0557		;  player5y = 200
   7020  46a4
   7021  46a4		       a9 c8		      LDA	#200
   7022  46a6		       85 9e		      STA	player5y
   7023  46a8				   .L0558		;  player6y = 200
   7024  46a8
   7025  46a8		       a9 c8		      LDA	#200
   7026  46aa		       85 9f		      STA	player6y
   7027  46ac				   .L0559		;  player7y  = 200
   7028  46ac
   7029  46ac		       a9 c8		      LDA	#200
   7030  46ae		       85 a0		      STA	player7y
   7031  46b0				   .L0560		;  player1x  = 20  :  player1y  =  40
   7032  46b0
   7033  46b0		       a9 14		      LDA	#20
   7034  46b2		       85 90		      STA	player1x
   7035  46b4		       a9 28		      LDA	#40
   7036  46b6		       85 9a		      STA	player1y
   7037  46b8				   .L0561		;  player2x  = 20  :  player2y  =  70
   7038  46b8
   7039  46b8		       a9 14		      LDA	#20
   7040  46ba		       85 91		      STA	player2x
   7041  46bc		       a9 46		      LDA	#70
   7042  46be		       85 9b		      STA	player2y
   7043  46c0				   .L0562		;  player3x  = 20  :  player3y  =  100
   7044  46c0
   7045  46c0		       a9 14		      LDA	#20
   7046  46c2		       85 92		      STA	player3x
   7047  46c4		       a9 64		      LDA	#100
   7048  46c6		       85 9c		      STA	player3y
   7049  46c8				   .L0563		;  Powerup  =	 ( rand & 2 ) 
   7050  46c8
   7051  46c8							; complex statement detected
   7052  46c8		       ad 00 10 	      lda	rand
   7053  46cb		       4a		      lsr
   7054  46cc				  -	      ifconst	rand16
   7055  46cc				  -	      rol	rand16
   7056  46cc					      endif
   7057  46cc		       90 02		      bcc	*+4
   7058  46ce		       49 b4		      eor	#$B4
   7059  46d0		       8d 00 10 	      sta	rand
   7060  46d3				  -	      ifconst	rand16
   7061  46d3				  -	      eor	rand16
   7062  46d3					      endif
   7063  46d3		       29 02		      AND	#2
   7064  46d5		       85 ee		      STA	Powerup
   7065  46d7				   .L0564		;  player4x = 150  :  player4y  = 120
   7066  46d7
   7067  46d7		       a9 96		      LDA	#150
   7068  46d9		       85 93		      STA	player4x
   7069  46db		       a9 78		      LDA	#120
   7070  46dd		       85 9d		      STA	player4y
   7071  46df				   .
   7072  46df							; 
   7073  46df
   7074  46df				   .L0565		;  if Bit4_gameover{4} then if !Ch0_Sound then Ch0_Sound  =  1  :  Ch0_Duration  =  30
   7075  46df
   7076  46df		       a5 ea		      LDA	Bit4_gameover
   7077  46e1		       29 10		      AND	#16
   7078  46e3		       f0 0c		      BEQ	.skipL0565
   7079  46e5				   .condpart287
   7080  46e5		       a5 e7		      LDA	Ch0_Sound
   7081  46e7		       d0 08		      BNE	.skip287then
   7082  46e9				   .condpart288
   7083  46e9		       a9 01		      LDA	#1
   7084  46eb		       85 e7		      STA	Ch0_Sound
   7085  46ed		       a9 1e		      LDA	#30
   7086  46ef		       85 e8		      STA	Ch0_Duration
   7087  46f1				   .skip287then
   7088  46f1				   .skipL0565
   7089  46f1				   .L0566		;  if !Ch0_Sound then goto __End__Skip_Ch_0
   7090  46f1
   7091  46f1		       a5 e7		      LDA	Ch0_Sound
   7092  46f3		       d0 03		      BNE	.skipL0566
   7093  46f5				   .condpart289
   7094  46f5		       4c 38 77 	      jmp	.__End__Skip_Ch_0
   7095  46f8
   7096  46f8				   .skipL0566
   7097  46f8				   .L0567		;  Ch0_Duration  =  Ch0_Duration  -  1
   7098  46f8
   7099  46f8		       c6 e8		      DEC	Ch0_Duration
   7100  46fa				   .L0568		;  if !Ch0_Duration then goto __End__Clear_Ch_0
   7101  46fa
   7102  46fa		       a5 e8		      LDA	Ch0_Duration
   7103  46fc		       d0 03		      BNE	.skipL0568
   7104  46fe				   .condpart290
   7105  46fe		       4c 2e 77 	      jmp	.__End__Clear_Ch_0
   7106  4701
   7107  4701				   .skipL0568
   7108  4701				   .L0569		;  if Ch0_Sound  <>  1 then goto __End__Skip_Ch0_Sound_001
   7109  4701
   7110  4701		       a5 e7		      LDA	Ch0_Sound
   7111  4703		       c9 01		      CMP	#1
   7112  4705		       f0 03		      BEQ	.skipL0569
   7113  4707				   .condpart291
   7114  4707		       4c 2b 77 	      jmp	.__End__Skip_Ch0_Sound_001
   7115  470a
   7116  470a				   .skipL0569
   7117  470a				   .L0570		;  AUDC0  =  6  :  AUDV0  =  2  :  AUDF0  =  12
   7118  470a
   7119  470a		       a9 06		      LDA	#6
   7120  470c		       85 15		      STA	AUDC0
   7121  470e		       a9 02		      LDA	#2
   7122  4710		       85 19		      STA	AUDV0
   7123  4712		       a9 0c		      LDA	#12
   7124  4714		       85 17		      STA	AUDF0
   7125  4716				   .L0571		;  if Ch0_Duration  <	15 then AUDC0  =  6  :	AUDV0  =  1  :	AUDF0  =  6
   7126  4716
   7127  4716		       a5 e8		      LDA	Ch0_Duration
   7128  4718		       c9 0f		      CMP	#15
   7129  471a		       b0 0c		      BCS	.skipL0571
   7130  471c				   .condpart292
   7131  471c		       a9 06		      LDA	#6
   7132  471e		       85 15		      STA	AUDC0
   7133  4720		       a9 01		      LDA	#1
   7134  4722		       85 19		      STA	AUDV0
   7135  4724		       a9 06		      LDA	#6
   7136  4726		       85 17		      STA	AUDF0
   7137  4728				   .skipL0571
   7138  4728				   .L0572		;  goto __End__Skip_Ch_0
   7139  4728
   7140  4728		       4c 38 77 	      jmp	.__End__Skip_Ch_0
   7141  472b
   7142  472b				   .__End__Skip_Ch0_Sound_001
   7143  472b							; __End__Skip_Ch0_Sound_001
   7144  472b
   7145  472b				   .L0573		;  goto __End__Skip_Ch_0
   7146  472b
   7147  472b		       4c 38 77 	      jmp	.__End__Skip_Ch_0
   7148  472e
   7149  472e				   .__End__Clear_Ch_0
   7150  472e							; __End__Clear_Ch_0
   7151  472e
   7152  472e				   .L0574		;  Ch0_Sound  =  0  :	AUDV0  =  0 :  AUDC0 = 0 :  AUDF0  = 0
   7153  472e
   7154  472e		       a9 00		      LDA	#0
   7155  4730		       85 e7		      STA	Ch0_Sound
   7156  4732		       85 19		      STA	AUDV0
   7157  4734		       85 15		      STA	AUDC0
   7158  4736		       85 17		      STA	AUDF0
   7159  4738				   .
   7160  4738							; 
   7161  4738
   7162  4738				   .__End__Skip_Ch_0
   7163  4738							; __End__Skip_Ch_0
   7164  4738
   7165  4738				   .L0575		;  playfield:
   7166  4738
   7167  4738		       a0 58		      ldy	#88
   7168  473a		       a9 ba		      LDA	#<PF_data2
   7169  473c		       a2 69		      LDX	#((>PF_data2) & $0f) | (((>PF_data2) / 2) & $70)
   7170  473e		       85 81		      sta	temp7
   7171  4740		       a9 77		      lda	#>(ret_point13-1)
   7172  4742		       48		      pha
   7173  4743		       a9 55		      lda	#<(ret_point13-1)
   7174  4745		       48		      pha
   7175  4746		       a9 1e		      lda	#>(pfsetup-1)
   7176  4748		       48		      pha
   7177  4749		       a9 8c		      lda	#<(pfsetup-1)
   7178  474b		       48		      pha
   7179  474c		       a5 81		      lda	temp7
   7180  474e		       48		      pha
   7181  474f		       8a		      txa
   7182  4750		       48		      pha
   7183  4751		       a2 01		      ldx	#1
   7184  4753		       4c ee df 	      jmp	BS_jsr
   7185  4756				   ret_point13
   7186  4756				   .
   7187  4756							; 
   7188  4756
   7189  4756				   .L0576		;  pfcolors:
   7190  4756
   7191  4756		       a9 08		      LDA	#<PFCOLS
   7192  4758		       8d 50 10 	      STA	DF0LOW
   7193  475b		       a9 0a		      LDA	#(>PFCOLS) & $0F
   7194  475d		       8d 68 10 	      STA	DF0HI
   7195  4760		       a9 1a		      LDA	#<playfieldcolorL0576
   7196  4762		       8d 59 10 	      STA	PARAMETER
   7197  4765		       a9 6b		      LDA	#((>playfieldcolorL0576) & $0f) | (((>playfieldcolorL0576) / 2) & $70)
   7198  4767		       8d 59 10 	      STA	PARAMETER
   7199  476a		       a9 00		      LDA	#0
   7200  476c		       8d 59 10 	      STA	PARAMETER
   7201  476f		       a9 58		      LDA	#88
   7202  4771		       8d 59 10 	      STA	PARAMETER
   7203  4774		       a9 01		      LDA	#1
   7204  4776		       8d 5a 10 	      STA	CALLFUNCTION
   7205  4779				   .L0577		;  return
   7206  4779
   7207  4779		       ba		      tsx
   7208  477a		       b5 02		      lda	2,x	; check return address
   7209  477c		       49 77		      eor	#(>*)	; vs. current PCH
   7210  477e		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   7211  4780		       f0 03		      beq	*+5	; if equal, do normal return
   7212  4782		       4c e0 df 	      JMP	BS_return
   7213  4785		       60		      RTS
   7214  4786				   .
   7215  4786							; 
   7216  4786
   7217  4786				   .L0578		;  bank 5
   7218  4786
   7219  4786					      if	ECHO4
      2126 bytes of ROM space left in bank 4
   7220  4786					      echo	"    ",[(start_bank4 - *)]d , "bytes of ROM space left in bank 4")
   7221  4786					      endif
   7222  4786		       00 01	   ECHO4      =	1
   7223  4fd4					      ORG	$4FF4-bscode_length
   7224  4fd4					      RORG	$7FF4-bscode_length
   7225  4fd4		       a2 ff	   start_bank4 ldx	#$ff
   7226  4fd6					      ifconst	FASTFETCH	; using DPC+
   7227  4fd6		       8e 58 10 	      stx	FASTFETCH
   7228  4fd9					      endif
   7229  4fd9		       9a		      txs
   7230  4fda				  -	      if	bankswitch == 64
   7231  4fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   7232  4fda					      else
   7233  4fda		       a9 18		      lda	#>(start-1)
   7234  4fdc					      endif
   7235  4fdc		       48		      pha
   7236  4fdd		       a9 e3		      lda	#<(start-1)
   7237  4fdf		       48		      pha
   7238  4fe0		       48		      pha
   7239  4fe1		       8a		      txa
   7240  4fe2		       48		      pha
   7241  4fe3		       ba		      tsx
   7242  4fe4					      if	bankswitch != 64
   7243  4fe4		       b5 04		      lda	4,x	; get high byte of return address
   7244  4fe6		       2a		      rol
   7245  4fe7		       2a		      rol
   7246  4fe8		       2a		      rol
   7247  4fe9		       2a		      rol
   7248  4fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   7249  4fec		       aa		      tax
   7250  4fed		       e8		      inx
   7251  4fee				  -	      else
   7252  4fee				  -	      lda	4,x	; get high byte of return address
   7253  4fee				  -	      tay
   7254  4fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   7255  4fee				  -	      sta	4,x
   7256  4fee				  -	      tya
   7257  4fee				  -	      lsr
   7258  4fee				  -	      lsr
   7259  4fee				  -	      lsr
   7260  4fee				  -	      lsr
   7261  4fee				  -	      tax
   7262  4fee				  -	      inx
   7263  4fee					      endif
   7264  4fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   7265  4ff1		       68		      pla
   7266  4ff2		       aa		      tax
   7267  4ff3		       68		      pla
   7268  4ff4		       60		      rts
   7269  4ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   7270  4ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   7271  4ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   7272  4ff5					      endif
   7273  4ffc					      ORG	$4FFC
   7274  4ffc					      RORG	$7FFC
   7275  4ffc		       d4 7f		      .word.w	(start_bank4 & $ffff)
   7276  4ffe		       d4 7f		      .word.w	(start_bank4 & $ffff)
   7277  5000					      ORG	$5000
   7278  5000					      RORG	$9000
   7279  5000					      repeat	129
   7280  5000		       00		      .byte.b	0
   7279  5000					      repend
   7280  5001		       00		      .byte.b	0
   7279  5001					      repend
   7280  5002		       00		      .byte.b	0
   7279  5002					      repend
   7280  5003		       00		      .byte.b	0
   7279  5003					      repend
   7280  5004		       00		      .byte.b	0
   7279  5004					      repend
   7280  5005		       00		      .byte.b	0
   7279  5005					      repend
   7280  5006		       00		      .byte.b	0
   7279  5006					      repend
   7280  5007		       00		      .byte.b	0
   7279  5007					      repend
   7280  5008		       00		      .byte.b	0
   7279  5008					      repend
   7280  5009		       00		      .byte.b	0
   7279  5009					      repend
   7280  500a		       00		      .byte.b	0
   7279  500a					      repend
   7280  500b		       00		      .byte.b	0
   7279  500b					      repend
   7280  500c		       00		      .byte.b	0
   7279  500c					      repend
   7280  500d		       00		      .byte.b	0
   7279  500d					      repend
   7280  500e		       00		      .byte.b	0
   7279  500e					      repend
   7280  500f		       00		      .byte.b	0
   7279  500f					      repend
   7280  5010		       00		      .byte.b	0
   7279  5010					      repend
   7280  5011		       00		      .byte.b	0
   7279  5011					      repend
   7280  5012		       00		      .byte.b	0
   7279  5012					      repend
   7280  5013		       00		      .byte.b	0
   7279  5013					      repend
   7280  5014		       00		      .byte.b	0
   7279  5014					      repend
   7280  5015		       00		      .byte.b	0
   7279  5015					      repend
   7280  5016		       00		      .byte.b	0
   7279  5016					      repend
   7280  5017		       00		      .byte.b	0
   7279  5017					      repend
   7280  5018		       00		      .byte.b	0
   7279  5018					      repend
   7280  5019		       00		      .byte.b	0
   7279  5019					      repend
   7280  501a		       00		      .byte.b	0
   7279  501a					      repend
   7280  501b		       00		      .byte.b	0
   7279  501b					      repend
   7280  501c		       00		      .byte.b	0
   7279  501c					      repend
   7280  501d		       00		      .byte.b	0
   7279  501d					      repend
   7280  501e		       00		      .byte.b	0
   7279  501e					      repend
   7280  501f		       00		      .byte.b	0
   7279  501f					      repend
   7280  5020		       00		      .byte.b	0
   7279  5020					      repend
   7280  5021		       00		      .byte.b	0
   7279  5021					      repend
   7280  5022		       00		      .byte.b	0
   7279  5022					      repend
   7280  5023		       00		      .byte.b	0
   7279  5023					      repend
   7280  5024		       00		      .byte.b	0
   7279  5024					      repend
   7280  5025		       00		      .byte.b	0
   7279  5025					      repend
   7280  5026		       00		      .byte.b	0
   7279  5026					      repend
   7280  5027		       00		      .byte.b	0
   7279  5027					      repend
   7280  5028		       00		      .byte.b	0
   7279  5028					      repend
   7280  5029		       00		      .byte.b	0
   7279  5029					      repend
   7280  502a		       00		      .byte.b	0
   7279  502a					      repend
   7280  502b		       00		      .byte.b	0
   7279  502b					      repend
   7280  502c		       00		      .byte.b	0
   7279  502c					      repend
   7280  502d		       00		      .byte.b	0
   7279  502d					      repend
   7280  502e		       00		      .byte.b	0
   7279  502e					      repend
   7280  502f		       00		      .byte.b	0
   7279  502f					      repend
   7280  5030		       00		      .byte.b	0
   7279  5030					      repend
   7280  5031		       00		      .byte.b	0
   7279  5031					      repend
   7280  5032		       00		      .byte.b	0
   7279  5032					      repend
   7280  5033		       00		      .byte.b	0
   7279  5033					      repend
   7280  5034		       00		      .byte.b	0
   7279  5034					      repend
   7280  5035		       00		      .byte.b	0
   7279  5035					      repend
   7280  5036		       00		      .byte.b	0
   7279  5036					      repend
   7280  5037		       00		      .byte.b	0
   7279  5037					      repend
   7280  5038		       00		      .byte.b	0
   7279  5038					      repend
   7280  5039		       00		      .byte.b	0
   7279  5039					      repend
   7280  503a		       00		      .byte.b	0
   7279  503a					      repend
   7280  503b		       00		      .byte.b	0
   7279  503b					      repend
   7280  503c		       00		      .byte.b	0
   7279  503c					      repend
   7280  503d		       00		      .byte.b	0
   7279  503d					      repend
   7280  503e		       00		      .byte.b	0
   7279  503e					      repend
   7280  503f		       00		      .byte.b	0
   7279  503f					      repend
   7280  5040		       00		      .byte.b	0
   7279  5040					      repend
   7280  5041		       00		      .byte.b	0
   7279  5041					      repend
   7280  5042		       00		      .byte.b	0
   7279  5042					      repend
   7280  5043		       00		      .byte.b	0
   7279  5043					      repend
   7280  5044		       00		      .byte.b	0
   7279  5044					      repend
   7280  5045		       00		      .byte.b	0
   7279  5045					      repend
   7280  5046		       00		      .byte.b	0
   7279  5046					      repend
   7280  5047		       00		      .byte.b	0
   7279  5047					      repend
   7280  5048		       00		      .byte.b	0
   7279  5048					      repend
   7280  5049		       00		      .byte.b	0
   7279  5049					      repend
   7280  504a		       00		      .byte.b	0
   7279  504a					      repend
   7280  504b		       00		      .byte.b	0
   7279  504b					      repend
   7280  504c		       00		      .byte.b	0
   7279  504c					      repend
   7280  504d		       00		      .byte.b	0
   7279  504d					      repend
   7280  504e		       00		      .byte.b	0
   7279  504e					      repend
   7280  504f		       00		      .byte.b	0
   7279  504f					      repend
   7280  5050		       00		      .byte.b	0
   7279  5050					      repend
   7280  5051		       00		      .byte.b	0
   7279  5051					      repend
   7280  5052		       00		      .byte.b	0
   7279  5052					      repend
   7280  5053		       00		      .byte.b	0
   7279  5053					      repend
   7280  5054		       00		      .byte.b	0
   7279  5054					      repend
   7280  5055		       00		      .byte.b	0
   7279  5055					      repend
   7280  5056		       00		      .byte.b	0
   7279  5056					      repend
   7280  5057		       00		      .byte.b	0
   7279  5057					      repend
   7280  5058		       00		      .byte.b	0
   7279  5058					      repend
   7280  5059		       00		      .byte.b	0
   7279  5059					      repend
   7280  505a		       00		      .byte.b	0
   7279  505a					      repend
   7280  505b		       00		      .byte.b	0
   7279  505b					      repend
   7280  505c		       00		      .byte.b	0
   7279  505c					      repend
   7280  505d		       00		      .byte.b	0
   7279  505d					      repend
   7280  505e		       00		      .byte.b	0
   7279  505e					      repend
   7280  505f		       00		      .byte.b	0
   7279  505f					      repend
   7280  5060		       00		      .byte.b	0
   7279  5060					      repend
   7280  5061		       00		      .byte.b	0
   7279  5061					      repend
   7280  5062		       00		      .byte.b	0
   7279  5062					      repend
   7280  5063		       00		      .byte.b	0
   7279  5063					      repend
   7280  5064		       00		      .byte.b	0
   7279  5064					      repend
   7280  5065		       00		      .byte.b	0
   7279  5065					      repend
   7280  5066		       00		      .byte.b	0
   7279  5066					      repend
   7280  5067		       00		      .byte.b	0
   7279  5067					      repend
   7280  5068		       00		      .byte.b	0
   7279  5068					      repend
   7280  5069		       00		      .byte.b	0
   7279  5069					      repend
   7280  506a		       00		      .byte.b	0
   7279  506a					      repend
   7280  506b		       00		      .byte.b	0
   7279  506b					      repend
   7280  506c		       00		      .byte.b	0
   7279  506c					      repend
   7280  506d		       00		      .byte.b	0
   7279  506d					      repend
   7280  506e		       00		      .byte.b	0
   7279  506e					      repend
   7280  506f		       00		      .byte.b	0
   7279  506f					      repend
   7280  5070		       00		      .byte.b	0
   7279  5070					      repend
   7280  5071		       00		      .byte.b	0
   7279  5071					      repend
   7280  5072		       00		      .byte.b	0
   7279  5072					      repend
   7280  5073		       00		      .byte.b	0
   7279  5073					      repend
   7280  5074		       00		      .byte.b	0
   7279  5074					      repend
   7280  5075		       00		      .byte.b	0
   7279  5075					      repend
   7280  5076		       00		      .byte.b	0
   7279  5076					      repend
   7280  5077		       00		      .byte.b	0
   7279  5077					      repend
   7280  5078		       00		      .byte.b	0
   7279  5078					      repend
   7280  5079		       00		      .byte.b	0
   7279  5079					      repend
   7280  507a		       00		      .byte.b	0
   7279  507a					      repend
   7280  507b		       00		      .byte.b	0
   7279  507b					      repend
   7280  507c		       00		      .byte.b	0
   7279  507c					      repend
   7280  507d		       00		      .byte.b	0
   7279  507d					      repend
   7280  507e		       00		      .byte.b	0
   7279  507e					      repend
   7280  507f		       00		      .byte.b	0
   7279  507f					      repend
   7280  5080		       00		      .byte.b	0
   7281  5081					      repend
   7282  5081				   .L0579		;  temp1 = temp1
   7283  5081
   7284  5081		       a5 cb		      LDA	temp1
   7285  5083		       85 cb		      STA	temp1
   7286  5085				   .__GameSettings
   7287  5085							; __GameSettings
   7288  5085
   7289  5085				   .L0580		;  NUSIZ0  =  $00
   7290  5085
   7291  5085		       a9 00		      LDA	#$00
   7292  5087		       85 04		      STA	NUSIZ0
   7293  5089				   .L0581		;  delay  =  delay  + 1
   7294  5089
   7295  5089		       e6 df		      INC	delay
   7296  508b				   .L0582		;  if delay  <  60 then __Resume bank2
   7297  508b
   7298  508b		       a5 df		      LDA	delay
   7299  508d		       c9 3c		      CMP	#60
   7300  508f		       b0 00		      BCS	.skipL0582
   7301  5091				   .condpart293
   7302  5091				   .skipL0582
   7303  5091				   .L0583		;  if delay  >  61 then delay	=  71
   7304  5091
   7305  5091		       a9 3d		      LDA	#61
   7306  5093		       c5 df		      CMP	delay
   7307  5095		       b0 04		      BCS	.skipL0583
   7308  5097				   .condpart294
   7309  5097		       a9 47		      LDA	#71
   7310  5099		       85 df		      STA	delay
   7311  509b				   .skipL0583
   7312  509b				   .L0584		;  if switchreset goto __Reset
   7313  509b
   7314  509b		       a9 01		      lda	#1
   7315  509d		       2c 82 02 	      bit	SWCHB
   7316  50a0				  -	      if	((* - .__Reset) < 127) && ((* - .__Reset) > -128)
   7317  50a0				  -	      BEQ	.__Reset
   7318  50a0					      else
   7319  50a0		       d0 03		      bne	.9skip__Reset
   7320  50a2		       4c a4 30 	      jmp	.__Reset
   7321  50a5				   .9skip__Reset
   7322  50a5					      endif
   7323  50a5				   .L0585		;  if Bit4_gameover{4} then goto __SkipMove bank2
   7324  50a5
   7325  50a5		       a5 ea		      LDA	Bit4_gameover
   7326  50a7		       29 10		      AND	#16
   7327  50a9		       f0 12		      BEQ	.skipL0585
   7328  50ab				   .condpart295
   7329  50ab		       85 81		      sta	temp7
   7330  50ad		       a9 3a		      lda	#>(.__SkipMove-1)
   7331  50af		       48		      pha
   7332  50b0		       a9 67		      lda	#<(.__SkipMove-1)
   7333  50b2		       48		      pha
   7334  50b3		       a5 81		      lda	temp7
   7335  50b5		       48		      pha
   7336  50b6		       8a		      txa
   7337  50b7		       48		      pha
   7338  50b8		       a2 02		      ldx	#2
   7339  50ba		       4c ee df 	      jmp	BS_jsr
   7340  50bd				   .skipL0585
   7341  50bd				   .L0586		;  if PlayerHealth  <= 0 then Bit4_gameover{4}  = 1
   7342  50bd
   7343  50bd		       a9 00		      LDA	#0
   7344  50bf		       c5 d5		      CMP	PlayerHealth
   7345  50c1		       90 06		      BCC	.skipL0586
   7346  50c3				   .condpart296
   7347  50c3		       a5 ea		      LDA	Bit4_gameover
   7348  50c5		       09 10		      ORA	#16
   7349  50c7		       85 ea		      STA	Bit4_gameover
   7350  50c9				   .skipL0586
   7351  50c9				   .L0587		;  if Bit4_gameover{4} then gosub __GameOver bank4
   7352  50c9
   7353  50c9		       a5 ea		      LDA	Bit4_gameover
   7354  50cb		       29 10		      AND	#16
   7355  50cd		       f0 18		      BEQ	.skipL0587
   7356  50cf				   .condpart297
   7357  50cf		       85 81		      sta	temp7
   7358  50d1		       a9 90		      lda	#>(ret_point14-1)
   7359  50d3		       48		      pha
   7360  50d4		       a9 e6		      lda	#<(ret_point14-1)
   7361  50d6		       48		      pha
   7362  50d7		       a9 76		      lda	#>(.__GameOver-1)
   7363  50d9		       48		      pha
   7364  50da		       a9 7f		      lda	#<(.__GameOver-1)
   7365  50dc		       48		      pha
   7366  50dd		       a5 81		      lda	temp7
   7367  50df		       48		      pha
   7368  50e0		       8a		      txa
   7369  50e1		       48		      pha
   7370  50e2		       a2 04		      ldx	#4
   7371  50e4		       4c ee df 	      jmp	BS_jsr
   7372  50e7				   ret_point14
   7373  50e7				   .skipL0587
   7374  50e7				   .L0588		;  if Househit = 2 then gosub __PFColors bank3
   7375  50e7
   7376  50e7		       a5 e1		      LDA	Househit
   7377  50e9		       c9 02		      CMP	#2
   7378  50eb		       d0 18		      BNE	.skipL0588
   7379  50ed				   .condpart298
   7380  50ed		       85 81		      sta	temp7
   7381  50ef		       a9 91		      lda	#>(ret_point15-1)
   7382  50f1		       48		      pha
   7383  50f2		       a9 04		      lda	#<(ret_point15-1)
   7384  50f4		       48		      pha
   7385  50f5		       a9 50		      lda	#>(.__PFColors-1)
   7386  50f7		       48		      pha
   7387  50f8		       a9 ed		      lda	#<(.__PFColors-1)
   7388  50fa		       48		      pha
   7389  50fb		       a5 81		      lda	temp7
   7390  50fd		       48		      pha
   7391  50fe		       8a		      txa
   7392  50ff		       48		      pha
   7393  5100		       a2 03		      ldx	#3
   7394  5102		       4c ee df 	      jmp	BS_jsr
   7395  5105				   ret_point15
   7396  5105				   .skipL0588
   7397  5105				   .L0589		;  if Househit = 3 then gosub __PFColors1 bank3
   7398  5105
   7399  5105		       a5 e1		      LDA	Househit
   7400  5107		       c9 03		      CMP	#3
   7401  5109		       d0 18		      BNE	.skipL0589
   7402  510b				   .condpart299
   7403  510b		       85 81		      sta	temp7
   7404  510d		       a9 91		      lda	#>(ret_point16-1)
   7405  510f		       48		      pha
   7406  5110		       a9 22		      lda	#<(ret_point16-1)
   7407  5112		       48		      pha
   7408  5113		       a9 51		      lda	#>(.__PFColors1-1)
   7409  5115		       48		      pha
   7410  5116		       a9 28		      lda	#<(.__PFColors1-1)
   7411  5118		       48		      pha
   7412  5119		       a5 81		      lda	temp7
   7413  511b		       48		      pha
   7414  511c		       8a		      txa
   7415  511d		       48		      pha
   7416  511e		       a2 03		      ldx	#3
   7417  5120		       4c ee df 	      jmp	BS_jsr
   7418  5123				   ret_point16
   7419  5123				   .skipL0589
   7420  5123				   .L0590		;  if Househit = 4 then gosub __PFColors2 bank3
   7421  5123
   7422  5123		       a5 e1		      LDA	Househit
   7423  5125		       c9 04		      CMP	#4
   7424  5127		       d0 18		      BNE	.skipL0590
   7425  5129				   .condpart300
   7426  5129		       85 81		      sta	temp7
   7427  512b		       a9 91		      lda	#>(ret_point17-1)
   7428  512d		       48		      pha
   7429  512e		       a9 40		      lda	#<(ret_point17-1)
   7430  5130		       48		      pha
   7431  5131		       a9 51		      lda	#>(.__PFColors2-1)
   7432  5133		       48		      pha
   7433  5134		       a9 63		      lda	#<(.__PFColors2-1)
   7434  5136		       48		      pha
   7435  5137		       a5 81		      lda	temp7
   7436  5139		       48		      pha
   7437  513a		       8a		      txa
   7438  513b		       48		      pha
   7439  513c		       a2 03		      ldx	#3
   7440  513e		       4c ee df 	      jmp	BS_jsr
   7441  5141				   ret_point17
   7442  5141				   .skipL0590
   7443  5141				   .L0591		;  if Househit = 5 then gosub __PFColors3 bank3
   7444  5141
   7445  5141		       a5 e1		      LDA	Househit
   7446  5143		       c9 05		      CMP	#5
   7447  5145		       d0 18		      BNE	.skipL0591
   7448  5147				   .condpart301
   7449  5147		       85 81		      sta	temp7
   7450  5149		       a9 91		      lda	#>(ret_point18-1)
   7451  514b		       48		      pha
   7452  514c		       a9 5e		      lda	#<(ret_point18-1)
   7453  514e		       48		      pha
   7454  514f		       a9 51		      lda	#>(.__PFColors3-1)
   7455  5151		       48		      pha
   7456  5152		       a9 9e		      lda	#<(.__PFColors3-1)
   7457  5154		       48		      pha
   7458  5155		       a5 81		      lda	temp7
   7459  5157		       48		      pha
   7460  5158		       8a		      txa
   7461  5159		       48		      pha
   7462  515a		       a2 03		      ldx	#3
   7463  515c		       4c ee df 	      jmp	BS_jsr
   7464  515f				   ret_point18
   7465  515f				   .skipL0591
   7466  515f				   .L0592		;  if Househit = 6 then gosub __PFColors4 bank3
   7467  515f
   7468  515f		       a5 e1		      LDA	Househit
   7469  5161		       c9 06		      CMP	#6
   7470  5163		       d0 18		      BNE	.skipL0592
   7471  5165				   .condpart302
   7472  5165		       85 81		      sta	temp7
   7473  5167		       a9 91		      lda	#>(ret_point19-1)
   7474  5169		       48		      pha
   7475  516a		       a9 7c		      lda	#<(ret_point19-1)
   7476  516c		       48		      pha
   7477  516d		       a9 51		      lda	#>(.__PFColors4-1)
   7478  516f		       48		      pha
   7479  5170		       a9 dd		      lda	#<(.__PFColors4-1)
   7480  5172		       48		      pha
   7481  5173		       a5 81		      lda	temp7
   7482  5175		       48		      pha
   7483  5176		       8a		      txa
   7484  5177		       48		      pha
   7485  5178		       a2 03		      ldx	#3
   7486  517a		       4c ee df 	      jmp	BS_jsr
   7487  517d				   ret_point19
   7488  517d				   .skipL0592
   7489  517d				   .L0593		;  if Househit = 7 then gosub __PFColors5 bank3
   7490  517d
   7491  517d		       a5 e1		      LDA	Househit
   7492  517f		       c9 07		      CMP	#7
   7493  5181		       d0 18		      BNE	.skipL0593
   7494  5183				   .condpart303
   7495  5183		       85 81		      sta	temp7
   7496  5185		       a9 91		      lda	#>(ret_point20-1)
   7497  5187		       48		      pha
   7498  5188		       a9 9a		      lda	#<(ret_point20-1)
   7499  518a		       48		      pha
   7500  518b		       a9 52		      lda	#>(.__PFColors5-1)
   7501  518d		       48		      pha
   7502  518e		       a9 18		      lda	#<(.__PFColors5-1)
   7503  5190		       48		      pha
   7504  5191		       a5 81		      lda	temp7
   7505  5193		       48		      pha
   7506  5194		       8a		      txa
   7507  5195		       48		      pha
   7508  5196		       a2 03		      ldx	#3
   7509  5198		       4c ee df 	      jmp	BS_jsr
   7510  519b				   ret_point20
   7511  519b				   .skipL0593
   7512  519b				   .L0594		;  if Househit = 8 then gosub __PFColors6 bank3
   7513  519b
   7514  519b		       a5 e1		      LDA	Househit
   7515  519d		       c9 08		      CMP	#8
   7516  519f		       d0 18		      BNE	.skipL0594
   7517  51a1				   .condpart304
   7518  51a1		       85 81		      sta	temp7
   7519  51a3		       a9 91		      lda	#>(ret_point21-1)
   7520  51a5		       48		      pha
   7521  51a6		       a9 b8		      lda	#<(ret_point21-1)
   7522  51a8		       48		      pha
   7523  51a9		       a9 52		      lda	#>(.__PFColors6-1)
   7524  51ab		       48		      pha
   7525  51ac		       a9 48		      lda	#<(.__PFColors6-1)
   7526  51ae		       48		      pha
   7527  51af		       a5 81		      lda	temp7
   7528  51b1		       48		      pha
   7529  51b2		       8a		      txa
   7530  51b3		       48		      pha
   7531  51b4		       a2 03		      ldx	#3
   7532  51b6		       4c ee df 	      jmp	BS_jsr
   7533  51b9				   ret_point21
   7534  51b9				   .skipL0594
   7535  51b9				   .L0595		;  if Househit = 9 then gosub __PFColors7 bank3
   7536  51b9
   7537  51b9		       a5 e1		      LDA	Househit
   7538  51bb		       c9 09		      CMP	#9
   7539  51bd		       d0 18		      BNE	.skipL0595
   7540  51bf				   .condpart305
   7541  51bf		       85 81		      sta	temp7
   7542  51c1		       a9 91		      lda	#>(ret_point22-1)
   7543  51c3		       48		      pha
   7544  51c4		       a9 d6		      lda	#<(ret_point22-1)
   7545  51c6		       48		      pha
   7546  51c7		       a9 52		      lda	#>(.__PFColors7-1)
   7547  51c9		       48		      pha
   7548  51ca		       a9 87		      lda	#<(.__PFColors7-1)
   7549  51cc		       48		      pha
   7550  51cd		       a5 81		      lda	temp7
   7551  51cf		       48		      pha
   7552  51d0		       8a		      txa
   7553  51d1		       48		      pha
   7554  51d2		       a2 03		      ldx	#3
   7555  51d4		       4c ee df 	      jmp	BS_jsr
   7556  51d7				   ret_point22
   7557  51d7				   .skipL0595
   7558  51d7				   .L0596		;  if Househit = 10 then gosub __PFColors8 bank3
   7559  51d7
   7560  51d7		       a5 e1		      LDA	Househit
   7561  51d9		       c9 0a		      CMP	#10
   7562  51db		       d0 18		      BNE	.skipL0596
   7563  51dd				   .condpart306
   7564  51dd		       85 81		      sta	temp7
   7565  51df		       a9 91		      lda	#>(ret_point23-1)
   7566  51e1		       48		      pha
   7567  51e2		       a9 f4		      lda	#<(ret_point23-1)
   7568  51e4		       48		      pha
   7569  51e5		       a9 52		      lda	#>(.__PFColors8-1)
   7570  51e7		       48		      pha
   7571  51e8		       a9 b7		      lda	#<(.__PFColors8-1)
   7572  51ea		       48		      pha
   7573  51eb		       a5 81		      lda	temp7
   7574  51ed		       48		      pha
   7575  51ee		       8a		      txa
   7576  51ef		       48		      pha
   7577  51f0		       a2 03		      ldx	#3
   7578  51f2		       4c ee df 	      jmp	BS_jsr
   7579  51f5				   ret_point23
   7580  51f5				   .skipL0596
   7581  51f5				   .L0597		;  if Househit = 11 then gosub __PFColors9 bank3
   7582  51f5
   7583  51f5		       a5 e1		      LDA	Househit
   7584  51f7		       c9 0b		      CMP	#11
   7585  51f9		       d0 18		      BNE	.skipL0597
   7586  51fb				   .condpart307
   7587  51fb		       85 81		      sta	temp7
   7588  51fd		       a9 92		      lda	#>(ret_point24-1)
   7589  51ff		       48		      pha
   7590  5200		       a9 12		      lda	#<(ret_point24-1)
   7591  5202		       48		      pha
   7592  5203		       a9 52		      lda	#>(.__PFColors9-1)
   7593  5205		       48		      pha
   7594  5206		       a9 e7		      lda	#<(.__PFColors9-1)
   7595  5208		       48		      pha
   7596  5209		       a5 81		      lda	temp7
   7597  520b		       48		      pha
   7598  520c		       8a		      txa
   7599  520d		       48		      pha
   7600  520e		       a2 03		      ldx	#3
   7601  5210		       4c ee df 	      jmp	BS_jsr
   7602  5213				   ret_point24
   7603  5213				   .skipL0597
   7604  5213				   .L0598		;  if Househit = 12 then gosub __PFColors10 bank3
   7605  5213
   7606  5213		       a5 e1		      LDA	Househit
   7607  5215		       c9 0c		      CMP	#12
   7608  5217		       d0 18		      BNE	.skipL0598
   7609  5219				   .condpart308
   7610  5219		       85 81		      sta	temp7
   7611  521b		       a9 92		      lda	#>(ret_point25-1)
   7612  521d		       48		      pha
   7613  521e		       a9 30		      lda	#<(ret_point25-1)
   7614  5220		       48		      pha
   7615  5221		       a9 53		      lda	#>(.__PFColors10-1)
   7616  5223		       48		      pha
   7617  5224		       a9 17		      lda	#<(.__PFColors10-1)
   7618  5226		       48		      pha
   7619  5227		       a5 81		      lda	temp7
   7620  5229		       48		      pha
   7621  522a		       8a		      txa
   7622  522b		       48		      pha
   7623  522c		       a2 03		      ldx	#3
   7624  522e		       4c ee df 	      jmp	BS_jsr
   7625  5231				   ret_point25
   7626  5231				   .skipL0598
   7627  5231				   .L0599		;  if Househit > 12 then gosub __GameOver bank4
   7628  5231
   7629  5231		       a9 0c		      LDA	#12
   7630  5233		       c5 e1		      CMP	Househit
   7631  5235		       b0 18		      BCS	.skipL0599
   7632  5237				   .condpart309
   7633  5237		       85 81		      sta	temp7
   7634  5239		       a9 92		      lda	#>(ret_point26-1)
   7635  523b		       48		      pha
   7636  523c		       a9 4e		      lda	#<(ret_point26-1)
   7637  523e		       48		      pha
   7638  523f		       a9 76		      lda	#>(.__GameOver-1)
   7639  5241		       48		      pha
   7640  5242		       a9 7f		      lda	#<(.__GameOver-1)
   7641  5244		       48		      pha
   7642  5245		       a5 81		      lda	temp7
   7643  5247		       48		      pha
   7644  5248		       8a		      txa
   7645  5249		       48		      pha
   7646  524a		       a2 04		      ldx	#4
   7647  524c		       4c ee df 	      jmp	BS_jsr
   7648  524f				   ret_point26
   7649  524f				   .skipL0599
   7650  524f				   .L0600		;  if EnemyHit  >  0 then Bit1_missleOn{1}  =	0 :  missile0y = 200
   7651  524f
   7652  524f		       a9 00		      LDA	#0
   7653  5251		       c5 d9		      CMP	EnemyHit
   7654  5253		       b0 0a		      BCS	.skipL0600
   7655  5255				   .condpart310
   7656  5255		       a5 ea		      LDA	Bit1_missleOn
   7657  5257		       29 fd		      AND	#253
   7658  5259		       85 ea		      STA	Bit1_missleOn
   7659  525b		       a9 c8		      LDA	#200
   7660  525d		       85 bf		      STA	missile0y
   7661  525f				   .skipL0600
   7662  525f				   .L0601		;  if PlayerHealth >  0 then pfscore2	= %00000001
   7663  525f
   7664  525f		       a9 00		      LDA	#0
   7665  5261		       c5 d5		      CMP	PlayerHealth
   7666  5263		       b0 04		      BCS	.skipL0601
   7667  5265				   .condpart311
   7668  5265		       a9 01		      LDA	#%00000001
   7669  5267		       85 c9		      STA	pfscore2
   7670  5269				   .skipL0601
   7671  5269				   .L0602		;  if PlayerHealth >  10 then pfscore2  = %00000011
   7672  5269
   7673  5269		       a9 0a		      LDA	#10
   7674  526b		       c5 d5		      CMP	PlayerHealth
   7675  526d		       b0 04		      BCS	.skipL0602
   7676  526f				   .condpart312
   7677  526f		       a9 03		      LDA	#%00000011
   7678  5271		       85 c9		      STA	pfscore2
   7679  5273				   .skipL0602
   7680  5273				   .L0603		;  if PlayerHealth >  20 then pfscore2  = %00000111
   7681  5273
   7682  5273		       a9 14		      LDA	#20
   7683  5275		       c5 d5		      CMP	PlayerHealth
   7684  5277		       b0 04		      BCS	.skipL0603
   7685  5279				   .condpart313
   7686  5279		       a9 07		      LDA	#%00000111
   7687  527b		       85 c9		      STA	pfscore2
   7688  527d				   .skipL0603
   7689  527d				   .L0604		;  if PlayerHealth >  30 then pfscore2  = %00001111
   7690  527d
   7691  527d		       a9 1e		      LDA	#30
   7692  527f		       c5 d5		      CMP	PlayerHealth
   7693  5281		       b0 04		      BCS	.skipL0604
   7694  5283				   .condpart314
   7695  5283		       a9 0f		      LDA	#%00001111
   7696  5285		       85 c9		      STA	pfscore2
   7697  5287				   .skipL0604
   7698  5287				   .L0605		;  if PlayerHealth >  40 then pfscore2  = %00011111
   7699  5287
   7700  5287		       a9 28		      LDA	#40
   7701  5289		       c5 d5		      CMP	PlayerHealth
   7702  528b		       b0 04		      BCS	.skipL0605
   7703  528d				   .condpart315
   7704  528d		       a9 1f		      LDA	#%00011111
   7705  528f		       85 c9		      STA	pfscore2
   7706  5291				   .skipL0605
   7707  5291				   .L0606		;  if PlayerHealth >  50 then pfscore2  = %00111111
   7708  5291
   7709  5291		       a9 32		      LDA	#50
   7710  5293		       c5 d5		      CMP	PlayerHealth
   7711  5295		       b0 04		      BCS	.skipL0606
   7712  5297				   .condpart316
   7713  5297		       a9 3f		      LDA	#%00111111
   7714  5299		       85 c9		      STA	pfscore2
   7715  529b				   .skipL0606
   7716  529b				   .L0607		;  if PlayerHealth >  60 then pfscore2  = %01111111
   7717  529b
   7718  529b		       a9 3c		      LDA	#60
   7719  529d		       c5 d5		      CMP	PlayerHealth
   7720  529f		       b0 04		      BCS	.skipL0607
   7721  52a1				   .condpart317
   7722  52a1		       a9 7f		      LDA	#%01111111
   7723  52a3		       85 c9		      STA	pfscore2
   7724  52a5				   .skipL0607
   7725  52a5				   .L0608		;  if PlayerHealth >  70 then pfscore2  =  %11111111
   7726  52a5
   7727  52a5		       a9 46		      LDA	#70
   7728  52a7		       c5 d5		      CMP	PlayerHealth
   7729  52a9		       b0 04		      BCS	.skipL0608
   7730  52ab				   .condpart318
   7731  52ab		       a9 ff		      LDA	#%11111111
   7732  52ad		       85 c9		      STA	pfscore2
   7733  52af				   .skipL0608
   7734  52af				   .L0609		;  if drop  >=  45 then pfscore1  =  %00000001
   7735  52af
   7736  52af		       a5 d1		      LDA	drop
   7737  52b1		       c9 2d		      CMP	#45
   7738  52b3		       90 04		      BCC	.skipL0609
   7739  52b5				   .condpart319
   7740  52b5		       a9 01		      LDA	#%00000001
   7741  52b7		       85 c8		      STA	pfscore1
   7742  52b9				   .skipL0609
   7743  52b9				   .L0610		;  if drop  <=  45 then pfscore1  =  %00000011
   7744  52b9
   7745  52b9		       a9 2d		      LDA	#45
   7746  52bb		       c5 d1		      CMP	drop
   7747  52bd		       90 04		      BCC	.skipL0610
   7748  52bf				   .condpart320
   7749  52bf		       a9 03		      LDA	#%00000011
   7750  52c1		       85 c8		      STA	pfscore1
   7751  52c3				   .skipL0610
   7752  52c3				   .L0611		;  if drop  <=  40 then pfscore1  =  %00000111
   7753  52c3
   7754  52c3		       a9 28		      LDA	#40
   7755  52c5		       c5 d1		      CMP	drop
   7756  52c7		       90 04		      BCC	.skipL0611
   7757  52c9				   .condpart321
   7758  52c9		       a9 07		      LDA	#%00000111
   7759  52cb		       85 c8		      STA	pfscore1
   7760  52cd				   .skipL0611
   7761  52cd				   .L0612		;  if drop  <=  35 then pfscore1  =  %00001111
   7762  52cd
   7763  52cd		       a9 23		      LDA	#35
   7764  52cf		       c5 d1		      CMP	drop
   7765  52d1		       90 04		      BCC	.skipL0612
   7766  52d3				   .condpart322
   7767  52d3		       a9 0f		      LDA	#%00001111
   7768  52d5		       85 c8		      STA	pfscore1
   7769  52d7				   .skipL0612
   7770  52d7				   .L0613		;  if drop  <=  30 then pfscore1  =  %00011111
   7771  52d7
   7772  52d7		       a9 1e		      LDA	#30
   7773  52d9		       c5 d1		      CMP	drop
   7774  52db		       90 04		      BCC	.skipL0613
   7775  52dd				   .condpart323
   7776  52dd		       a9 1f		      LDA	#%00011111
   7777  52df		       85 c8		      STA	pfscore1
   7778  52e1				   .skipL0613
   7779  52e1				   .L0614		;  if drop  <=  20 then pfscore1  =  %00111111
   7780  52e1
   7781  52e1		       a9 14		      LDA	#20
   7782  52e3		       c5 d1		      CMP	drop
   7783  52e5		       90 04		      BCC	.skipL0614
   7784  52e7				   .condpart324
   7785  52e7		       a9 3f		      LDA	#%00111111
   7786  52e9		       85 c8		      STA	pfscore1
   7787  52eb				   .skipL0614
   7788  52eb				   .L0615		;  if drop  <=  10 then pfscore1  =  %01111111
   7789  52eb
   7790  52eb		       a9 0a		      LDA	#10
   7791  52ed		       c5 d1		      CMP	drop
   7792  52ef		       90 04		      BCC	.skipL0615
   7793  52f1				   .condpart325
   7794  52f1		       a9 7f		      LDA	#%01111111
   7795  52f3		       85 c8		      STA	pfscore1
   7796  52f5				   .skipL0615
   7797  52f5				   .L0616		;  if drop  <	10 then pfscore1  =  %11111111
   7798  52f5
   7799  52f5		       a5 d1		      LDA	drop
   7800  52f7		       c9 0a		      CMP	#10
   7801  52f9		       b0 04		      BCS	.skipL0616
   7802  52fb				   .condpart326
   7803  52fb		       a9 ff		      LDA	#%11111111
   7804  52fd		       85 c8		      STA	pfscore1
   7805  52ff				   .skipL0616
   7806  52ff				   .L0617		;  if PlayerHealth  <	20 then pfscorecolor  =  $32
   7807  52ff
   7808  52ff		       a5 d5		      LDA	PlayerHealth
   7809  5301		       c9 14		      CMP	#20
   7810  5303		       b0 04		      BCS	.skipL0617
   7811  5305				   .condpart327
   7812  5305		       a9 32		      LDA	#$32
   7813  5307		       85 c6		      STA	pfscorecolor
   7814  5309				   .skipL0617
   7815  5309				   .L0618		;  if PlayerHealth  >	20 then pfscorecolor  = $00
   7816  5309
   7817  5309		       a9 14		      LDA	#20
   7818  530b		       c5 d5		      CMP	PlayerHealth
   7819  530d		       b0 04		      BCS	.skipL0618
   7820  530f				   .condpart328
   7821  530f		       a9 00		      LDA	#$00
   7822  5311		       85 c6		      STA	pfscorecolor
   7823  5313				   .skipL0618
   7824  5313				   .L0619		;  if drop  >=  50 then AUDV0	=  0  :  AUDV1	=  0
   7825  5313
   7826  5313		       a5 d1		      LDA	drop
   7827  5315		       c9 32		      CMP	#50
   7828  5317		       90 06		      BCC	.skipL0619
   7829  5319				   .condpart329
   7830  5319		       a9 00		      LDA	#0
   7831  531b		       85 19		      STA	AUDV0
   7832  531d		       85 1a		      STA	AUDV1
   7833  531f				   .skipL0619
   7834  531f				   .L0620		;  if drop  >=  50 then Bit0_NewLevel{0} = 1 :  delay	=  0 :	goto __titlepage bank2
   7835  531f
   7836  531f		       a5 d1		      LDA	drop
   7837  5321		       c9 32		      CMP	#50
   7838  5323		       90 1c		      BCC	.skipL0620
   7839  5325				   .condpart330
   7840  5325		       a5 ea		      LDA	Bit0_NewLevel
   7841  5327		       09 01		      ORA	#1
   7842  5329		       85 ea		      STA	Bit0_NewLevel
   7843  532b		       a9 00		      LDA	#0
   7844  532d		       85 df		      STA	delay
   7845  532f		       85 81		      sta	temp7
   7846  5331		       a9 30		      lda	#>(.__titlepage-1)
   7847  5333		       48		      pha
   7848  5334		       a9 f9		      lda	#<(.__titlepage-1)
   7849  5336		       48		      pha
   7850  5337		       a5 81		      lda	temp7
   7851  5339		       48		      pha
   7852  533a		       8a		      txa
   7853  533b		       48		      pha
   7854  533c		       a2 02		      ldx	#2
   7855  533e		       4c ee df 	      jmp	BS_jsr
   7856  5341				   .skipL0620
   7857  5341				   .L0621		;  frame = frame + 1
   7858  5341
   7859  5341		       e6 d6		      INC	frame
   7860  5343				   .L0622		;  gosub __FrameAnimation bank4
   7861  5343
   7862  5343		       85 81		      sta	temp7
   7863  5345		       a9 93		      lda	#>(ret_point27-1)
   7864  5347		       48		      pha
   7865  5348		       a9 5a		      lda	#<(ret_point27-1)
   7866  534a		       48		      pha
   7867  534b		       a9 70		      lda	#>(.__FrameAnimation-1)
   7868  534d		       48		      pha
   7869  534e		       a9 84		      lda	#<(.__FrameAnimation-1)
   7870  5350		       48		      pha
   7871  5351		       a5 81		      lda	temp7
   7872  5353		       48		      pha
   7873  5354		       8a		      txa
   7874  5355		       48		      pha
   7875  5356		       a2 04		      ldx	#4
   7876  5358		       4c ee df 	      jmp	BS_jsr
   7877  535b				   ret_point27
   7878  535b				   .L0623		;  return
   7879  535b
   7880  535b		       ba		      tsx
   7881  535c		       b5 02		      lda	2,x	; check return address
   7882  535e		       49 93		      eor	#(>*)	; vs. current PCH
   7883  5360		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   7884  5362		       f0 03		      beq	*+5	; if equal, do normal return
   7885  5364		       4c e0 df 	      JMP	BS_return
   7886  5367		       60		      RTS
   7887  5368				   .
   7888  5368							; 
   7889  5368
   7890  5368				   .
   7891  5368							; 
   7892  5368
   7893  5368				   .__P0Explosion
   7894  5368							; __P0Explosion
   7895  5368
   7896  5368				   .L0624		;  PlayerDamage  =  1
   7897  5368
   7898  5368		       a9 01		      LDA	#1
   7899  536a		       85 dd		      STA	PlayerDamage
   7900  536c				   .L0625		;  if Bit3_ShootorNot{3}  &&  !Ch1_Sound then Ch1_Sound  =  1	:  Ch1_Duration  =  25
   7901  536c
   7902  536c		       a5 ea		      LDA	Bit3_ShootorNot
   7903  536e		       29 08		      AND	#8
   7904  5370		       f0 0c		      BEQ	.skipL0625
   7905  5372				   .condpart331
   7906  5372		       a5 da		      LDA	Ch1_Sound
   7907  5374		       d0 08		      BNE	.skip331then
   7908  5376				   .condpart332
   7909  5376		       a9 01		      LDA	#1
   7910  5378		       85 da		      STA	Ch1_Sound
   7911  537a		       a9 19		      LDA	#25
   7912  537c		       85 db		      STA	Ch1_Duration
   7913  537e				   .skip331then
   7914  537e				   .skipL0625
   7915  537e				   .L0626		;  if !Ch1_Sound then goto __P0Exp_Skip_Ch_1
   7916  537e
   7917  537e		       a5 da		      LDA	Ch1_Sound
   7918  5380		       d0 03		      BNE	.skipL0626
   7919  5382				   .condpart333
   7920  5382		       4c cd 93 	      jmp	.__P0Exp_Skip_Ch_1
   7921  5385
   7922  5385				   .skipL0626
   7923  5385				   .L0627		;  Ch1_Duration  =  Ch1_Duration  -  1
   7924  5385
   7925  5385		       c6 db		      DEC	Ch1_Duration
   7926  5387				   .L0628		;  if !Ch1_Duration then goto __P0Exp_Clear_Ch_1
   7927  5387
   7928  5387		       a5 db		      LDA	Ch1_Duration
   7929  5389		       d0 03		      BNE	.skipL0628
   7930  538b				   .condpart334
   7931  538b		       4c cd 93 	      jmp	.__P0Exp_Clear_Ch_1
   7932  538e
   7933  538e				   .skipL0628
   7934  538e				   .L0629		;  if Ch1_Sound  <>  1 then goto __P0Exp_Skip_Ch0_Sound_001
   7935  538e
   7936  538e		       a5 da		      LDA	Ch1_Sound
   7937  5390		       c9 01		      CMP	#1
   7938  5392		       f0 03		      BEQ	.skipL0629
   7939  5394				   .condpart335
   7940  5394		       4c ca 93 	      jmp	.__P0Exp_Skip_Ch0_Sound_001
   7941  5397
   7942  5397				   .skipL0629
   7943  5397				   .L0630		;  AUDC1  =  9  :  AUDV1  =  6  :  AUDF1  =  14
   7944  5397
   7945  5397		       a9 09		      LDA	#9
   7946  5399		       85 16		      STA	AUDC1
   7947  539b		       a9 06		      LDA	#6
   7948  539d		       85 1a		      STA	AUDV1
   7949  539f		       a9 0e		      LDA	#14
   7950  53a1		       85 18		      STA	AUDF1
   7951  53a3				   .L0631		;  if Ch1_Duration  <	15 then AUDC1  =  9  :	AUDV1  =  4  :	AUDF1  =  24
   7952  53a3
   7953  53a3		       a5 db		      LDA	Ch1_Duration
   7954  53a5		       c9 0f		      CMP	#15
   7955  53a7		       b0 0c		      BCS	.skipL0631
   7956  53a9				   .condpart336
   7957  53a9		       a9 09		      LDA	#9
   7958  53ab		       85 16		      STA	AUDC1
   7959  53ad		       a9 04		      LDA	#4
   7960  53af		       85 1a		      STA	AUDV1
   7961  53b1		       a9 18		      LDA	#24
   7962  53b3		       85 18		      STA	AUDF1
   7963  53b5				   .skipL0631
   7964  53b5				   .L0632		;  if Ch1_Duration  <	5 then AUDC1  =  9  :  AUDV1  =  1  :  AUDF1  =  16
   7965  53b5
   7966  53b5		       a5 db		      LDA	Ch1_Duration
   7967  53b7		       c9 05		      CMP	#5
   7968  53b9		       b0 0c		      BCS	.skipL0632
   7969  53bb				   .condpart337
   7970  53bb		       a9 09		      LDA	#9
   7971  53bd		       85 16		      STA	AUDC1
   7972  53bf		       a9 01		      LDA	#1
   7973  53c1		       85 1a		      STA	AUDV1
   7974  53c3		       a9 10		      LDA	#16
   7975  53c5		       85 18		      STA	AUDF1
   7976  53c7				   .skipL0632
   7977  53c7				   .L0633		;  goto __P0Exp_Skip_Ch_1
   7978  53c7
   7979  53c7		       4c cd 93 	      jmp	.__P0Exp_Skip_Ch_1
   7980  53ca
   7981  53ca				   .__P0Exp_Skip_Ch0_Sound_001
   7982  53ca							; __P0Exp_Skip_Ch0_Sound_001
   7983  53ca
   7984  53ca				   .L0634		;  goto __P0Exp_Skip_Ch_1
   7985  53ca
   7986  53ca		       4c cd 93 	      jmp	.__P0Exp_Skip_Ch_1
   7987  53cd
   7988  53cd				   .__P0Exp_Clear_Ch_1
   7989  53cd							; __P0Exp_Clear_Ch_1
   7990  53cd
   7991  53cd				   .__P0Exp_Skip_Ch_1
   7992  53cd							; __P0Exp_Skip_Ch_1
   7993  53cd
   7994  53cd				   .
   7995  53cd							; 
   7996  53cd
   7997  53cd				   .L0635		;  return
   7998  53cd
   7999  53cd		       ba		      tsx
   8000  53ce		       b5 02		      lda	2,x	; check return address
   8001  53d0		       49 93		      eor	#(>*)	; vs. current PCH
   8002  53d2		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   8003  53d4		       f0 03		      beq	*+5	; if equal, do normal return
   8004  53d6		       4c e0 df 	      JMP	BS_return
   8005  53d9		       60		      RTS
   8006  53da				   .
   8007  53da							; 
   8008  53da
   8009  53da				   .L0636		;  bank 6
   8010  53da
   8011  53da					      if	ECHO5
      3066 bytes of ROM space left in bank 5
   8012  53da					      echo	"    ",[(start_bank5 - *)]d , "bytes of ROM space left in bank 5")
   8013  53da					      endif
   8014  53da		       00 01	   ECHO5      =	1
   8015  5fd4					      ORG	$5FF4-bscode_length
   8016  5fd4					      RORG	$9FF4-bscode_length
   8017  5fd4		       a2 ff	   start_bank5 ldx	#$ff
   8018  5fd6					      ifconst	FASTFETCH	; using DPC+
   8019  5fd6		       8e 58 10 	      stx	FASTFETCH
   8020  5fd9					      endif
   8021  5fd9		       9a		      txs
   8022  5fda				  -	      if	bankswitch == 64
   8023  5fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   8024  5fda					      else
   8025  5fda		       a9 18		      lda	#>(start-1)
   8026  5fdc					      endif
   8027  5fdc		       48		      pha
   8028  5fdd		       a9 e3		      lda	#<(start-1)
   8029  5fdf		       48		      pha
   8030  5fe0		       48		      pha
   8031  5fe1		       8a		      txa
   8032  5fe2		       48		      pha
   8033  5fe3		       ba		      tsx
   8034  5fe4					      if	bankswitch != 64
   8035  5fe4		       b5 04		      lda	4,x	; get high byte of return address
   8036  5fe6		       2a		      rol
   8037  5fe7		       2a		      rol
   8038  5fe8		       2a		      rol
   8039  5fe9		       2a		      rol
   8040  5fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   8041  5fec		       aa		      tax
   8042  5fed		       e8		      inx
   8043  5fee				  -	      else
   8044  5fee				  -	      lda	4,x	; get high byte of return address
   8045  5fee				  -	      tay
   8046  5fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   8047  5fee				  -	      sta	4,x
   8048  5fee				  -	      tya
   8049  5fee				  -	      lsr
   8050  5fee				  -	      lsr
   8051  5fee				  -	      lsr
   8052  5fee				  -	      lsr
   8053  5fee				  -	      tax
   8054  5fee				  -	      inx
   8055  5fee					      endif
   8056  5fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   8057  5ff1		       68		      pla
   8058  5ff2		       aa		      tax
   8059  5ff3		       68		      pla
   8060  5ff4		       60		      rts
   8061  5ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   8062  5ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   8063  5ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   8064  5ff5					      endif
   8065  5ffc					      ORG	$5FFC
   8066  5ffc					      RORG	$9FFC
   8067  5ffc		       d4 9f		      .word.w	(start_bank5 & $ffff)
   8068  5ffe		       d4 9f		      .word.w	(start_bank5 & $ffff)
   8069  6000					      ORG	$6000
   8070  6000					      RORG	$B000
   8071  6000					      repeat	129
   8072  6000		       00		      .byte.b	0
   8071  6000					      repend
   8072  6001		       00		      .byte.b	0
   8071  6001					      repend
   8072  6002		       00		      .byte.b	0
   8071  6002					      repend
   8072  6003		       00		      .byte.b	0
   8071  6003					      repend
   8072  6004		       00		      .byte.b	0
   8071  6004					      repend
   8072  6005		       00		      .byte.b	0
   8071  6005					      repend
   8072  6006		       00		      .byte.b	0
   8071  6006					      repend
   8072  6007		       00		      .byte.b	0
   8071  6007					      repend
   8072  6008		       00		      .byte.b	0
   8071  6008					      repend
   8072  6009		       00		      .byte.b	0
   8071  6009					      repend
   8072  600a		       00		      .byte.b	0
   8071  600a					      repend
   8072  600b		       00		      .byte.b	0
   8071  600b					      repend
   8072  600c		       00		      .byte.b	0
   8071  600c					      repend
   8072  600d		       00		      .byte.b	0
   8071  600d					      repend
   8072  600e		       00		      .byte.b	0
   8071  600e					      repend
   8072  600f		       00		      .byte.b	0
   8071  600f					      repend
   8072  6010		       00		      .byte.b	0
   8071  6010					      repend
   8072  6011		       00		      .byte.b	0
   8071  6011					      repend
   8072  6012		       00		      .byte.b	0
   8071  6012					      repend
   8072  6013		       00		      .byte.b	0
   8071  6013					      repend
   8072  6014		       00		      .byte.b	0
   8071  6014					      repend
   8072  6015		       00		      .byte.b	0
   8071  6015					      repend
   8072  6016		       00		      .byte.b	0
   8071  6016					      repend
   8072  6017		       00		      .byte.b	0
   8071  6017					      repend
   8072  6018		       00		      .byte.b	0
   8071  6018					      repend
   8072  6019		       00		      .byte.b	0
   8071  6019					      repend
   8072  601a		       00		      .byte.b	0
   8071  601a					      repend
   8072  601b		       00		      .byte.b	0
   8071  601b					      repend
   8072  601c		       00		      .byte.b	0
   8071  601c					      repend
   8072  601d		       00		      .byte.b	0
   8071  601d					      repend
   8072  601e		       00		      .byte.b	0
   8071  601e					      repend
   8072  601f		       00		      .byte.b	0
   8071  601f					      repend
   8072  6020		       00		      .byte.b	0
   8071  6020					      repend
   8072  6021		       00		      .byte.b	0
   8071  6021					      repend
   8072  6022		       00		      .byte.b	0
   8071  6022					      repend
   8072  6023		       00		      .byte.b	0
   8071  6023					      repend
   8072  6024		       00		      .byte.b	0
   8071  6024					      repend
   8072  6025		       00		      .byte.b	0
   8071  6025					      repend
   8072  6026		       00		      .byte.b	0
   8071  6026					      repend
   8072  6027		       00		      .byte.b	0
   8071  6027					      repend
   8072  6028		       00		      .byte.b	0
   8071  6028					      repend
   8072  6029		       00		      .byte.b	0
   8071  6029					      repend
   8072  602a		       00		      .byte.b	0
   8071  602a					      repend
   8072  602b		       00		      .byte.b	0
   8071  602b					      repend
   8072  602c		       00		      .byte.b	0
   8071  602c					      repend
   8072  602d		       00		      .byte.b	0
   8071  602d					      repend
   8072  602e		       00		      .byte.b	0
   8071  602e					      repend
   8072  602f		       00		      .byte.b	0
   8071  602f					      repend
   8072  6030		       00		      .byte.b	0
   8071  6030					      repend
   8072  6031		       00		      .byte.b	0
   8071  6031					      repend
   8072  6032		       00		      .byte.b	0
   8071  6032					      repend
   8072  6033		       00		      .byte.b	0
   8071  6033					      repend
   8072  6034		       00		      .byte.b	0
   8071  6034					      repend
   8072  6035		       00		      .byte.b	0
   8071  6035					      repend
   8072  6036		       00		      .byte.b	0
   8071  6036					      repend
   8072  6037		       00		      .byte.b	0
   8071  6037					      repend
   8072  6038		       00		      .byte.b	0
   8071  6038					      repend
   8072  6039		       00		      .byte.b	0
   8071  6039					      repend
   8072  603a		       00		      .byte.b	0
   8071  603a					      repend
   8072  603b		       00		      .byte.b	0
   8071  603b					      repend
   8072  603c		       00		      .byte.b	0
   8071  603c					      repend
   8072  603d		       00		      .byte.b	0
   8071  603d					      repend
   8072  603e		       00		      .byte.b	0
   8071  603e					      repend
   8072  603f		       00		      .byte.b	0
   8071  603f					      repend
   8072  6040		       00		      .byte.b	0
   8071  6040					      repend
   8072  6041		       00		      .byte.b	0
   8071  6041					      repend
   8072  6042		       00		      .byte.b	0
   8071  6042					      repend
   8072  6043		       00		      .byte.b	0
   8071  6043					      repend
   8072  6044		       00		      .byte.b	0
   8071  6044					      repend
   8072  6045		       00		      .byte.b	0
   8071  6045					      repend
   8072  6046		       00		      .byte.b	0
   8071  6046					      repend
   8072  6047		       00		      .byte.b	0
   8071  6047					      repend
   8072  6048		       00		      .byte.b	0
   8071  6048					      repend
   8072  6049		       00		      .byte.b	0
   8071  6049					      repend
   8072  604a		       00		      .byte.b	0
   8071  604a					      repend
   8072  604b		       00		      .byte.b	0
   8071  604b					      repend
   8072  604c		       00		      .byte.b	0
   8071  604c					      repend
   8072  604d		       00		      .byte.b	0
   8071  604d					      repend
   8072  604e		       00		      .byte.b	0
   8071  604e					      repend
   8072  604f		       00		      .byte.b	0
   8071  604f					      repend
   8072  6050		       00		      .byte.b	0
   8071  6050					      repend
   8072  6051		       00		      .byte.b	0
   8071  6051					      repend
   8072  6052		       00		      .byte.b	0
   8071  6052					      repend
   8072  6053		       00		      .byte.b	0
   8071  6053					      repend
   8072  6054		       00		      .byte.b	0
   8071  6054					      repend
   8072  6055		       00		      .byte.b	0
   8071  6055					      repend
   8072  6056		       00		      .byte.b	0
   8071  6056					      repend
   8072  6057		       00		      .byte.b	0
   8071  6057					      repend
   8072  6058		       00		      .byte.b	0
   8071  6058					      repend
   8072  6059		       00		      .byte.b	0
   8071  6059					      repend
   8072  605a		       00		      .byte.b	0
   8071  605a					      repend
   8072  605b		       00		      .byte.b	0
   8071  605b					      repend
   8072  605c		       00		      .byte.b	0
   8071  605c					      repend
   8072  605d		       00		      .byte.b	0
   8071  605d					      repend
   8072  605e		       00		      .byte.b	0
   8071  605e					      repend
   8072  605f		       00		      .byte.b	0
   8071  605f					      repend
   8072  6060		       00		      .byte.b	0
   8071  6060					      repend
   8072  6061		       00		      .byte.b	0
   8071  6061					      repend
   8072  6062		       00		      .byte.b	0
   8071  6062					      repend
   8072  6063		       00		      .byte.b	0
   8071  6063					      repend
   8072  6064		       00		      .byte.b	0
   8071  6064					      repend
   8072  6065		       00		      .byte.b	0
   8071  6065					      repend
   8072  6066		       00		      .byte.b	0
   8071  6066					      repend
   8072  6067		       00		      .byte.b	0
   8071  6067					      repend
   8072  6068		       00		      .byte.b	0
   8071  6068					      repend
   8072  6069		       00		      .byte.b	0
   8071  6069					      repend
   8072  606a		       00		      .byte.b	0
   8071  606a					      repend
   8072  606b		       00		      .byte.b	0
   8071  606b					      repend
   8072  606c		       00		      .byte.b	0
   8071  606c					      repend
   8072  606d		       00		      .byte.b	0
   8071  606d					      repend
   8072  606e		       00		      .byte.b	0
   8071  606e					      repend
   8072  606f		       00		      .byte.b	0
   8071  606f					      repend
   8072  6070		       00		      .byte.b	0
   8071  6070					      repend
   8072  6071		       00		      .byte.b	0
   8071  6071					      repend
   8072  6072		       00		      .byte.b	0
   8071  6072					      repend
   8072  6073		       00		      .byte.b	0
   8071  6073					      repend
   8072  6074		       00		      .byte.b	0
   8071  6074					      repend
   8072  6075		       00		      .byte.b	0
   8071  6075					      repend
   8072  6076		       00		      .byte.b	0
   8071  6076					      repend
   8072  6077		       00		      .byte.b	0
   8071  6077					      repend
   8072  6078		       00		      .byte.b	0
   8071  6078					      repend
   8072  6079		       00		      .byte.b	0
   8071  6079					      repend
   8072  607a		       00		      .byte.b	0
   8071  607a					      repend
   8072  607b		       00		      .byte.b	0
   8071  607b					      repend
   8072  607c		       00		      .byte.b	0
   8071  607c					      repend
   8072  607d		       00		      .byte.b	0
   8071  607d					      repend
   8072  607e		       00		      .byte.b	0
   8071  607e					      repend
   8072  607f		       00		      .byte.b	0
   8071  607f					      repend
   8072  6080		       00		      .byte.b	0
   8073  6081					      repend
   8074  6081				   .L0637		;  temp1 = temp1
   8075  6081
   8076  6081		       a5 cb		      LDA	temp1
   8077  6083		       85 cb		      STA	temp1
   8078  6085				   .
   8079  6085							; 
   8080  6085
   8081  6085				   .__Titlesceen
   8082  6085							; __Titlesceen
   8083  6085
   8084  6085				   .L0638		;  drop = 0
   8085  6085
   8086  6085		       a9 00		      LDA	#0
   8087  6087		       85 d1		      STA	drop
   8088  6089				   .L0639		;  asm
   8089  6089
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 3
      0  6089					      include	"titlescreen/asm/titlescreen.asm"
      1  6089
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 3
      0  6089					      include	"titlescreen/asm/layoutmacros.asm"
      1  6089
      2  6089							; the macro's used in the "titlescreen_layout.asm" file
      3  6089
      4  6089					      MAC	draw_96x2_1
      5  6089				   mk_96x2_1_on =	1
      6  6089					      jsr	draw_bmp_96x2_1
      7  6089					      ENDM
      8  6089
      9  6089					      MAC	draw_96x2_2
     10  6089				   mk_96x2_2_on =	1
     11  6089					      jsr	draw_bmp_96x2_2
     12  6089					      ENDM
     13  6089
     14  6089					      MAC	draw_96x2_3
     15  6089				   mk_96x2_3_on =	1
     16  6089					      jsr	draw_bmp_96x2_3
     17  6089					      ENDM
     18  6089
     19  6089					      MAC	draw_96x2_4
     20  6089				   mk_96x2_4_on =	1
     21  6089					      jsr	draw_bmp_96x2_4
     22  6089					      ENDM
     23  6089
     24  6089					      MAC	draw_96x2_5
     25  6089				   mk_96x2_5_on =	1
     26  6089					      jsr	draw_bmp_96x2_5
     27  6089					      ENDM
     28  6089
     29  6089					      MAC	draw_96x2_6
     30  6089				   mk_96x2_6_on =	1
     31  6089					      jsr	draw_bmp_96x2_6
     32  6089					      ENDM
     33  6089
     34  6089					      MAC	draw_96x2_7
     35  6089				   mk_96x2_7_on =	1
     36  6089					      jsr	draw_bmp_96x2_7
     37  6089					      ENDM
     38  6089
     39  6089					      MAC	draw_96x2_8
     40  6089				   mk_96x2_8_on =	1
     41  6089					      jsr	draw_bmp_96x2_8
     42  6089					      ENDM
     43  6089
     44  6089					      MAC	draw_48x1_1
     45  6089				   mk_48x1_X_on =	1
     46  6089				   mk_48x1_1_on =	1
     47  6089					      jsr	draw_bmp_48x1_1
     48  6089					      ENDM
     49  6089
     50  6089					      MAC	draw_48x1_2
     51  6089				   mk_48x1_X_on =	1
     52  6089				   mk_48x1_2_on =	1
     53  6089					      jsr	draw_bmp_48x1_2
     54  6089					      ENDM
     55  6089
     56  6089					      MAC	draw_48x1_3
     57  6089				   mk_48x1_X_on =	1
     58  6089				   mk_48x1_3_on =	1
     59  6089					      jsr	draw_bmp_48x1_3
     60  6089					      ENDM
     61  6089
     62  6089					      MAC	draw_48x1_4
     63  6089				   mk_48x1_X_on =	1
     64  6089				   mk_48x1_4_on =	1
     65  6089					      jsr	draw_bmp_48x1_4
     66  6089					      ENDM
     67  6089
     68  6089					      MAC	draw_48x1_5
     69  6089				   mk_48x1_X_on =	1
     70  6089				   mk_48x1_5_on =	1
     71  6089					      jsr	draw_bmp_48x1_5
     72  6089					      ENDM
     73  6089
     74  6089					      MAC	draw_48x1_6
     75  6089				   mk_48x1_X_on =	1
     76  6089				   mk_48x1_6_on =	1
     77  6089					      jsr	draw_bmp_48x1_6
     78  6089					      ENDM
     79  6089
     80  6089					      MAC	draw_48x1_7
     81  6089				   mk_48x1_X_on =	1
     82  6089				   mk_48x1_7_on =	1
     83  6089					      jsr	draw_bmp_48x1_7
     84  6089					      ENDM
     85  6089
     86  6089					      MAC	draw_48x1_8
     87  6089				   mk_48x1_X_on =	1
     88  6089				   mk_48x1_8_on =	1
     89  6089					      jsr	draw_bmp_48x1_8
     90  6089					      ENDM
     91  6089
     92  6089
     93  6089					      MAC	draw_48x2_1
     94  6089				   mk_48x2_X_on =	1
     95  6089				   mk_48x2_1_on =	1
     96  6089					      jsr	draw_bmp_48x2_1
     97  6089					      ENDM
     98  6089
     99  6089					      MAC	draw_48x2_2
    100  6089				   mk_48x2_X_on =	1
    101  6089				   mk_48x2_2_on =	1
    102  6089					      jsr	draw_bmp_48x2_2
    103  6089					      ENDM
    104  6089
    105  6089					      MAC	draw_48x2_3
    106  6089				   mk_48x2_X_on =	1
    107  6089				   mk_48x2_3_on =	1
    108  6089					      jsr	draw_bmp_48x2_3
    109  6089					      ENDM
    110  6089
    111  6089					      MAC	draw_48x2_4
    112  6089				   mk_48x2_X_on =	1
    113  6089				   mk_48x2_4_on =	1
    114  6089					      jsr	draw_bmp_48x2_4
    115  6089					      ENDM
    116  6089
    117  6089					      MAC	draw_48x2_5
    118  6089				   mk_48x2_X_on =	1
    119  6089				   mk_48x2_5_on =	1
    120  6089					      jsr	draw_bmp_48x2_5
    121  6089					      ENDM
    122  6089
    123  6089					      MAC	draw_48x2_6
    124  6089				   mk_48x2_X_on =	1
    125  6089				   mk_48x2_6_on =	1
    126  6089					      jsr	draw_bmp_48x2_6
    127  6089					      ENDM
    128  6089
    129  6089					      MAC	draw_48x2_7
    130  6089				   mk_48x2_X_on =	1
    131  6089				   mk_48x2_7_on =	1
    132  6089					      jsr	draw_bmp_48x2_7
    133  6089					      ENDM
    134  6089
    135  6089					      MAC	draw_48x2_8
    136  6089				   mk_48x2_X_on =	1
    137  6089				   mk_48x2_8_on =	1
    138  6089					      jsr	draw_bmp_48x2_8
    139  6089					      ENDM
    140  6089
    141  6089					      MAC	draw_player
    142  6089				   mk_player_on =	1
    143  6089					      jsr	draw_player_display
    144  6089					      ENDM
    145  6089
    146  6089					      MAC	draw_score
    147  6089				   mk_score_on =	1
    148  6089				   mk_48x1_X_on =	1
    149  6089					      jsr	draw_score_display
    150  6089					      ENDM
    151  6089
    152  6089					      MAC	draw_gameselect
    153  6089				   mk_gameselect_on =	1
    154  6089				   mk_48x1_X_on =	1
    155  6089					      jsr	draw_gameselect_display
    156  6089					      ENDM
    157  6089
    158  6089					      MAC	draw_space
    159  6089					      ldy	#{1}
    160  6089				   .loop
    161  6089					      sta	WSYNC
    162  6089					      dey
    163  6089					      bne	.loop
    164  6089					      ENDM
    165  6089
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/asm/dpcfix.asm LEVEL 3 PASS 3
      0  6089					      include	"titlescreen/asm/dpcfix.asm"
      1  6089							; reassign variables that DPC+ doesn't have
      2  6089
      3  6089				  -	      ifnconst	aux2
      4  6089				  -aux2       =	player2x
      5  6089					      endif
      6  6089				  -	      ifnconst	aux4
      7  6089				  -aux4       =	player4x
      8  6089					      endif
      9  6089				  -	      ifnconst	aux5
     10  6089				  -aux5       =	player5x
     11  6089					      endif
     12  6089				  -	      ifnconst	aux6
     13  6089				  -aux6       =	player6x
     14  6089					      endif
     15  6089
     16  6089				  -	      ifnconst	player0pointer
     17  6089				  -player0pointer =	player2y
     18  6089					      endif
     19  6089				  -	      ifnconst	player1pointer
     20  6089				  -player1pointer =	player2height	; to player3height
     21  6089					      endif
     22  6089				  -	      ifnconst	player1color
     23  6089				  -player1color =	player4height	; to player5height
     24  6089					      endif
     25  6089				  -	      ifnconst	scorepointers
     26  6089				  -scorepointers =	player6height	; to NUSIZ8
     27  6089					      endif
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 3
      0  6089					      include	"titlescreen/titlescreen_layout.asm"
      1  6089
      2  6089							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  6089							; in the order they were listed.
      4  6089							;
      5  6089							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  6089							; it won't use any rom space.
      7  6089
      8  6089					      MAC	titlescreenlayout
      9  6089					      draw_96x2_1
     10  6089					      draw_48x1_1
     11  6089					      draw_96x2_2
     12  6089					      draw_96x2_4
     13  6089					      draw_96x2_5
     14  6089					      draw_space	2
     15  6089					      draw_gameselect
     16  6089					      draw_score
     17  6089					      ENDM
     18  6089
     19  6089							; minikernel choices are:
     20  6089							;
     21  6089							; draw_48x1_1, draw_48x1_2, draw_48x1_3
     22  6089							;	The first, second, and third 48-wide single-line bitmap minikernels
     23  6089							;
     24  6089							; draw_48x2_1, draw_48x2_2, draw_48x2_3
     25  6089							;	The first, second, and third 48-wide double-line bitmap minikernels
     26  6089							;
     27  6089							; draw_96x2_1, draw_96x2_2, draw_96x2_3
     28  6089							;	The first, second, and third 96-wide double-line bitmap minikernels
     29  6089							;
     30  6089							; draw_gameselect
     31  6089							;	The game selection display minikernel
     32  6089							;
     33  6089							; draw_score
     34  6089							;	A minikernel that draws the score
     35  6089							;
     36  6089							; draw_space 10
     37  6089							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      5  6089
      6  6089				   .titledrawscreen
      7  6089				   title_eat_overscan
      8  6089							;bB runs in overscan. Wait for the overscan to run out...
      9  6089		       18		      clc
     10  608a		       ad 84 02 	      lda	INTIM
     11  608d		       30 fa		      bmi	title_eat_overscan
     12  608f		       4c 92 b0 	      jmp	title_do_vertical_sync
     13  6092
     14  6092				   title_do_vertical_sync
     15  6092		       a9 02		      lda	#2
     16  6094		       85 02		      sta	WSYNC	;one line with VSYNC
     17  6096		       85 00		      sta	VSYNC	;enable VSYNC
     18  6098		       85 02		      sta	WSYNC	;one line with VSYNC
     19  609a		       85 02		      sta	WSYNC	;one line with VSYNC
     20  609c		       a9 00		      lda	#0
     21  609e		       85 02		      sta	WSYNC	;one line with VSYNC
     22  60a0		       85 00		      sta	VSYNC	;turn off VSYNC
     23  60a2
     24  60a2							;lda #42+128
     25  60a2				  -	      ifnconst	vblank_time
     26  60a2				  -	      lda	#42+128
     27  60a2					      else
     28  60a2		       a9 ab		      lda	#vblank_time+128
     29  60a4					      endif
     30  60a4
     31  60a4		       8d 96 02 	      sta	TIM64T
     32  60a7
     33  60a7		       00 82	   titleframe =	missile0x
     34  60a7		       e6 82		      inc	titleframe	; increment the frame counter
     35  60a9
     36  60a9				  -	      ifconst	.title_vblank
     37  60a9				  -	      jsr	.title_vblank
     38  60a9					      endif
     39  60a9
     40  60a9				   title_vblank_loop
     41  60a9		       ad 84 02 	      lda	INTIM
     42  60ac		       30 fb		      bmi	title_vblank_loop
     43  60ae		       a9 00		      lda	#0
     44  60b0		       85 02		      sta	WSYNC
     45  60b2		       85 01		      sta	VBLANK
     46  60b4		       85 1d		      sta	ENAM0
     47  60b6		       85 1f		      sta	ENABL
     48  60b8
     49  60b8				   title_playfield
     50  60b8
     51  60b8							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     52  60b8
     53  60b8		       a9 e6		      lda	#230
     54  60ba		       8d 96 02 	      sta	TIM64T
     55  60bd
     56  60bd		       a9 01		      lda	#1
     57  60bf		       85 0a		      sta	CTRLPF
     58  60c1		       18		      clc
     59  60c2
     60  60c2		       a9 00		      lda	#0
     61  60c4		       85 0b		      sta	REFP0
     62  60c6		       85 0c		      sta	REFP1
     63  60c8		       85 02		      sta	WSYNC
     64  60ca		       ad 16 b1 	      lda	titlescreencolor
     65  60cd		       85 09		      sta	COLUBK
     66  60cf
      0  60cf					      titlescreenlayout
      0  60cf					      draw_96x2_1
      1  60cf		       00 01	   mk_96x2_1_on =	1
      2  60cf		       20 da b1 	      jsr	draw_bmp_96x2_1
      0  60d2					      draw_48x1_1
      1  60d2		       00 01	   mk_48x1_X_on =	1
      2  60d2		       00 01	   mk_48x1_1_on =	1
      3  60d2		       20 17 b1 	      jsr	draw_bmp_48x1_1
      0  60d5					      draw_96x2_2
      1  60d5		       00 01	   mk_96x2_2_on =	1
      2  60d5		       20 71 b3 	      jsr	draw_bmp_96x2_2
      0  60d8					      draw_96x2_4
      1  60d8		       00 01	   mk_96x2_4_on =	1
      2  60d8		       20 71 b5 	      jsr	draw_bmp_96x2_4
      0  60db					      draw_96x2_5
      1  60db		       00 01	   mk_96x2_5_on =	1
      2  60db		       20 71 b7 	      jsr	draw_bmp_96x2_5
      0  60de					      draw_space	2
      1  60de		       a0 02		      ldy	#2
      2  60e0				   .loop
      3  60e0		       85 02		      sta	WSYNC
      4  60e2		       88		      dey
      5  60e3		       d0 fb		      bne	.loop
      0  60e5					      draw_gameselect
      1  60e5		       00 01	   mk_gameselect_on =	1
      2  60e5		       00 01	   mk_48x1_X_on =	1
      3  60e5		       20 53 ba 	      jsr	draw_gameselect_display
      0  60e8					      draw_score
      1  60e8		       00 01	   mk_score_on =	1
      2  60e8		       00 01	   mk_48x1_X_on =	1
      3  60e8		       20 71 b9 	      jsr	draw_score_display
     68  60eb
     69  60eb		       4c c9 ba 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     70  60ee
------- FILE titlescreen/asm/position48.asm LEVEL 3 PASS 3
      0  60ee					      include	"titlescreen/asm/position48.asm"
      1  60ee
      2  60ee				   position48
      3  60ee
      4  60ee							;postion P0 and P1
      5  60ee
      6  60ee		       85 02		      sta	WSYNC
      7  60f0
      8  60f0		       a9 90		      lda	#$90	;2
      9  60f2		       85 20		      sta	HMP0	;3
     10  60f4		       a9 a0		      lda	#$A0	;2
     11  60f6		       85 21		      sta	HMP1	;3
     12  60f8
     13  60f8		       e6 cb		      inc	temp1
     14  60fa		       c6 cb		      dec	temp1
     15  60fc		       e6 cb		      inc	temp1
     16  60fe		       c6 cb		      dec	temp1
     17  6100		       e6 cb		      inc	temp1
      0  6102					      sleep	2
      1  6102				   .CYCLES    SET	2
      2  6102
      3  6102				  -	      IF	.CYCLES < 2
      4  6102				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6102				  -	      ERR
      6  6102					      ENDIF
      7  6102
      8  6102				  -	      IF	.CYCLES & 1
      9  6102				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6102				  -	      nop	0
     11  6102				  -	      ELSE
     12  6102				  -	      bit	VSYNC
     13  6102				  -	      ENDIF
     14  6102				  -.CYCLES    SET	.CYCLES - 3
     15  6102					      ENDIF
     16  6102
     17  6102					      REPEAT	.CYCLES / 2
     18  6102		       ea		      nop
     19  6103					      REPEND
     19  6103		       85 10		      sta	RESP0	;  +3
     20  6105		       85 11		      sta	RESP1	;  +3
     21  6107		       c6 cb		      dec	temp1	;  +5
     22  6109		       e6 cb		      inc	temp1	;  +5
     23  610b		       c6 cb		      dec	temp1	;  +5
     24  610d		       e6 cb		      inc	temp1	;  +5
     25  610f		       c6 cb		      dec	temp1	;  +5
      0  6111					      sleep	3
      1  6111				   .CYCLES    SET	3
      2  6111
      3  6111				  -	      IF	.CYCLES < 2
      4  6111				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6111				  -	      ERR
      6  6111					      ENDIF
      7  6111
      8  6111					      IF	.CYCLES & 1
      9  6111					      IFNCONST	NO_ILLEGAL_OPCODES
     10  6111		       04 00		      nop	0
     11  6113				  -	      ELSE
     12  6113				  -	      bit	VSYNC
     13  6113					      ENDIF
     14  6113				   .CYCLES    SET	.CYCLES - 3
     15  6113					      ENDIF
     16  6113
     17  6113				  -	      REPEAT	.CYCLES / 2
     18  6113				  -	      nop
     19  6113					      REPEND
     27  6113		       85 2a		      sta	HMOVE	; +76
     28  6115		       60		      RTS
     29  6116
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 3
      0  6116					      include	"titlescreen/titlescreen_color.asm"
      1  6116							; This is where the titlescreen background color gets set.
      2  6116							; You can also do a "dim titlescreencolor=[letter]" in bB
      3  6116							; if you want to change the color on the fly.
      4  6116
      5  6116				  -	      ifnconst	titlescreencolor
      6  6116				  -titlescreencolor
      7  6116					      endif
      8  6116		       00		      .byte.b	$00
      9  6117
------- FILE titlescreen/asm/titlescreen.asm
     73  6117
     74  6117					      ifconst	mk_48x1_1_on
------- FILE titlescreen/asm/48x1_1_kernel.asm LEVEL 3 PASS 3
      0  6117					      include	"titlescreen/asm/48x1_1_kernel.asm"
      1  6117
      2  6117				   draw_bmp_48x1_1
      3  6117
      4  6117		       a9 00		      lda	#0
      5  6119		       85 1b		      sta	GRP0
      6  611b		       85 1c		      sta	GRP1
      7  611d
      8  611d		       a0 0b		      ldy	#11
      9  611f				   bmp_48x1_1_pointersetup
     10  611f		       b9 53 b1 	      lda	bmp_48x1_1_values,y
     11  6122		       99 ab 00 	      sta	scorepointers,y
     12  6125		       88		      dey
     13  6126		       b9 53 b1 	      lda	bmp_48x1_1_values,y
     14  6129				  -	      ifconst	bmp_48x1_1_index
     15  6129				  -	      sec
     16  6129				  -	      sbc	bmp_48x1_1_index
     17  6129					      endif
     18  6129		       99 ab 00 	      sta	scorepointers,y
     19  612c		       88		      dey
     20  612d		       10 f0		      bpl	bmp_48x1_1_pointersetup
     21  612f
     22  612f		       a0 31		      ldy	(#bmp_48x1_1_window-1)
     23  6131		       84 91		      sty	aux2
     24  6133
     25  6133					      ifconst	bmp_48x1_1_background
     26  6133		       ad ef ba 	      lda	bmp_48x1_1_background
     27  6136				  -	      else
     28  6136				  -	      lda	titlescreencolor
     29  6136					      endif
     30  6136		       85 c7		      sta	aux4
     31  6138
     32  6138		       ad f0 ba 	      lda	bmp_48x1_1_color
     33  613b		       85 06		      sta	COLUP0	;3
     34  613d		       85 07		      sta	COLUP1	;3
     35  613f		       85 2b		      sta	HMCLR	;3
     36  6141
     37  6141		       ad 16 b1 	      lda	titlescreencolor
     38  6144		       85 08		      sta	COLUPF
     39  6146
     40  6146					      ifconst	bmp_48x1_1_PF1
     41  6146		       ad ed ba 	      lda	bmp_48x1_1_PF1
     42  6149				  -	      else
     43  6149				  -	      lda	#0
     44  6149				  -	      nop
     45  6149					      endif
     46  6149		       85 0e		      sta	PF1
     47  614b
     48  614b					      ifconst	bmp_48x1_1_PF2
     49  614b		       ad ee ba 	      lda	bmp_48x1_1_PF2
     50  614e				  -	      else
     51  614e				  -	      lda	#0
     52  614e				  -	      nop
     53  614e					      endif
     54  614e		       85 0f		      sta	PF2
     55  6150
     56  6150		       4c 5f b1 	      jmp	draw_bmp_48x1_X	; the common 1lk bitmap minikernel
     57  6153
     58  6153				   bmp_48x1_1_values
     59  6153		       00 bb		      .word.w	(bmp_48x1_1_00+#bmp_48x1_1_height-#bmp_48x1_1_window)
     60  6155		       32 bb		      .word.w	(bmp_48x1_1_01+#bmp_48x1_1_height-#bmp_48x1_1_window)
     61  6157		       64 bb		      .word.w	(bmp_48x1_1_02+#bmp_48x1_1_height-#bmp_48x1_1_window)
     62  6159		       96 bb		      .word.w	(bmp_48x1_1_03+#bmp_48x1_1_height-#bmp_48x1_1_window)
     63  615b		       c8 bb		      .word.w	(bmp_48x1_1_04+#bmp_48x1_1_height-#bmp_48x1_1_window)
     64  615d		       00 bc		      .word.w	(bmp_48x1_1_05+#bmp_48x1_1_height-#bmp_48x1_1_window)
     65  615f
------- FILE titlescreen/asm/titlescreen.asm
     76  615f					      endif		;mk_48x1_1_on
     77  615f
     78  615f				  -	      ifconst	mk_48x1_2_on
     79  615f				  -	      include	"titlescreen/asm/48x1_2_kernel.asm"
     80  615f					      endif		;mk_48x1_2_on
     81  615f
     82  615f				  -	      ifconst	mk_48x1_3_on
     83  615f				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  615f					      endif		;mk_48x1_3_on
     85  615f
     86  615f				  -	      ifconst	mk_48x1_4_on
     87  615f				  -	      include	"titlescreen/asm/48x1_4_kernel.asm"
     88  615f					      endif		;mk_48x1_4_on
     89  615f
     90  615f				  -	      ifconst	mk_48x1_5_on
     91  615f				  -	      include	"titlescreen/asm/48x1_5_kernel.asm"
     92  615f					      endif		;mk_48x1_5_on
     93  615f
     94  615f				  -	      ifconst	mk_48x1_6_on
     95  615f				  -	      include	"titlescreen/asm/48x1_6_kernel.asm"
     96  615f					      endif		;mk_48x1_6_on
     97  615f
     98  615f				  -	      ifconst	mk_48x1_7_on
     99  615f				  -	      include	"titlescreen/asm/48x1_7_kernel.asm"
    100  615f					      endif		;mk_48x1_7_on
    101  615f
    102  615f				  -	      ifconst	mk_48x1_8_on
    103  615f				  -	      include	"titlescreen/asm/48x1_8_kernel.asm"
    104  615f					      endif		;mk_48x1_8_on
    105  615f
    106  615f				  -	      ifconst	mk_48x2_1_on
    107  615f				  -	      include	"titlescreen/asm/48x2_1_kernel.asm"
    108  615f					      endif		;mk_48x2_1_on
    109  615f
    110  615f				  -	      ifconst	mk_48x2_2_on
    111  615f				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
    112  615f					      endif		;mk_48x2_2_on
    113  615f
    114  615f				  -	      ifconst	mk_48x2_3_on
    115  615f				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
    116  615f					      endif		;mk_48x2_3_on
    117  615f
    118  615f				  -	      ifconst	mk_48x2_4_on
    119  615f				  -	      include	"titlescreen/asm/48x2_4_kernel.asm"
    120  615f					      endif		;mk_48x2_4_on
    121  615f
    122  615f				  -	      ifconst	mk_48x2_5_on
    123  615f				  -	      include	"titlescreen/asm/48x2_5_kernel.asm"
    124  615f					      endif		;mk_48x2_5_on
    125  615f
    126  615f				  -	      ifconst	mk_48x2_6_on
    127  615f				  -	      include	"titlescreen/asm/48x2_6_kernel.asm"
    128  615f					      endif		;mk_48x2_6_on
    129  615f
    130  615f				  -	      ifconst	mk_48x2_7_on
    131  615f				  -	      include	"titlescreen/asm/48x2_7_kernel.asm"
    132  615f					      endif		;mk_48x2_7_on
    133  615f
    134  615f				  -	      ifconst	mk_48x2_8_on
    135  615f				  -	      include	"titlescreen/asm/48x2_8_kernel.asm"
    136  615f					      endif		;mk_48x2_8_on
    137  615f
    138  615f					      ifconst	mk_48x1_X_on
------- FILE titlescreen/asm/48x1_X_kernel.asm LEVEL 3 PASS 3
      0  615f					      include	"titlescreen/asm/48x1_X_kernel.asm"
      1  615f				   draw_bmp_48x1_X
      2  615f
      3  615f		       a9 03		      lda	#3
      4  6161		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      5  6163		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
      6  6165
      7  6165		       ba		      tsx
      8  6166		       86 f6		      stx	stack1	;save the stack pointer
      9  6168
     10  6168		       20 ee b0 	      jsr	position48
     11  616b
     12  616b		       a9 03		      lda	#3	;2
     13  616d		       85 25		      sta	VDELP0	;3
     14  616f		       85 26		      sta	VDELP1	;3
     15  6171
     16  6171		       a9 01		      lda	#1	;2
     17  6173		       85 0a		      sta	CTRLPF	;3
     18  6175
     19  6175							;enough cycles have passed for the HMOV, so we can clear HMCLR
     20  6175		       85 2b		      sta	HMCLR
     21  6177
     22  6177		       85 02		      sta	WSYNC
     23  6179
     24  6179		       e6 cb		      inc	temp1	;5
     25  617b		       c6 cb		      dec	temp1	;5
     26  617d		       e6 cb		      inc	temp1	;5
     27  617f		       c6 cb		      dec	temp1	;5
     28  6181		       e6 cb		      inc	temp1	;5
     29  6183		       c6 cb		      dec	temp1	;5
     30  6185		       e6 cb		      inc	temp1	;5
     31  6187		       c6 cb		      dec	temp1	;5
     32  6189		       e6 cb		      inc	temp1	;5
     33  618b		       c6 cb		      dec	temp1	;5
     34  618d
      0  618d					      sleep	5
      1  618d				   .CYCLES    SET	5
      2  618d
      3  618d				  -	      IF	.CYCLES < 2
      4  618d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  618d				  -	      ERR
      6  618d					      ENDIF
      7  618d
      8  618d					      IF	.CYCLES & 1
      9  618d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  618d		       04 00		      nop	0
     11  618f				  -	      ELSE
     12  618f				  -	      bit	VSYNC
     13  618f					      ENDIF
     14  618f				   .CYCLES    SET	.CYCLES - 3
     15  618f					      ENDIF
     16  618f
     17  618f					      REPEAT	.CYCLES / 2
     18  618f		       ea		      nop
     19  6190					      REPEND
     36  6190
     37  6190		       c8		      iny
     38  6191
     39  6191		       4c 94 b1 	      jmp	pf48x1_X_loop_entry
     40  6194
     41  6194				  -	      if	>. != >[.+$2a]
     42  6194				  -	      align	256
     43  6194					      endif
     44  6194
     45  6194				   pf48x1_X_loop_entry
     46  6194				   pf48x1_X_loop
     47  6194		       88		      dey		;2
     48  6195		       84 91		      sty	aux2	;3
     49  6197		       b1 ab		      lda	(scorepointers+0),y	;5
     50  6199		       85 1b		      sta	GRP0	;3
     51  619b
     52  619b		       b1 ad		      lda	(scorepointers+2),y	;5
     53  619d		       85 1c		      sta	GRP1	;3
     54  619f		       b1 af		      lda	(scorepointers+4),y	;5
     55  61a1		       85 1b		      sta	GRP0	;3
     56  61a3
      0  61a3					      sleep	2	; I could make this indirect, if we want to burn more rom
      1  61a3				   .CYCLES    SET	2
      2  61a3
      3  61a3				  -	      IF	.CYCLES < 2
      4  61a3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  61a3				  -	      ERR
      6  61a3					      ENDIF
      7  61a3
      8  61a3				  -	      IF	.CYCLES & 1
      9  61a3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  61a3				  -	      nop	0
     11  61a3				  -	      ELSE
     12  61a3				  -	      bit	VSYNC
     13  61a3				  -	      ENDIF
     14  61a3				  -.CYCLES    SET	.CYCLES - 3
     15  61a3					      ENDIF
     16  61a3
     17  61a3					      REPEAT	.CYCLES / 2
     18  61a3		       ea		      nop
     19  61a4					      REPEND
     58  61a4		       a5 c7		      lda	aux4	;3
     59  61a6		       85 08		      sta	COLUPF	;3 this is a big fat waste...
     60  61a8
     61  61a8		       b3 b5		      lax	(scorepointers+10),y	;5
     62  61aa		       b1 b3		      lda	(scorepointers+8),y	;5
     63  61ac		       85 f7		      sta	stack2	;3
     64  61ae		       b1 b1		      lda	(scorepointers+6),y	;5
     65  61b0		       a4 f7		      ldy	stack2	;3
     66  61b2
     67  61b2		       85 1c		      sta	GRP1	;3
     68  61b4		       84 1b		      sty	GRP0	;3
     69  61b6		       86 1c		      stx	GRP1	;3
     70  61b8		       84 1b		      sty	GRP0	;3
     71  61ba
     72  61ba		       a4 91		      ldy	aux2	;3
     73  61bc		       d0 d6		      bne	pf48x1_X_loop	;2/3
     74  61be
     75  61be				   pf48x1_X_codeend
     76  61be							;echo "critical code in 48x1 is ",(pf48x1_X_codeend-pf48x1_X_loop), " bytes long."
     77  61be
     78  61be		       a9 00		      lda	#0
     79  61c0		       85 1b		      sta	GRP0
     80  61c2		       85 1c		      sta	GRP1
     81  61c4		       85 1b		      sta	GRP0
     82  61c6		       85 1c		      sta	GRP1
     83  61c8		       85 1f		      sta	ENABL
     84  61ca		       85 1d		      sta	ENAM0
     85  61cc		       85 25		      sta	VDELP0
     86  61ce		       85 26		      sta	VDELP1
     87  61d0		       85 0d		      sta	PF0
     88  61d2		       85 0e		      sta	PF1
     89  61d4		       85 0f		      sta	PF2
     90  61d6
     91  61d6		       a6 f6		      ldx	stack1	;restore the stack pointer
     92  61d8		       9a		      txs
     93  61d9		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    140  61da					      endif		;mk_48x1_X_on
    141  61da
    142  61da				  -	      ifconst	mk_48x2_X_on
    143  61da				  -	      include	"titlescreen/asm/48x2_X_kernel.asm"
    144  61da					      endif		;mk_48x2_X_on
    145  61da
    146  61da
    147  61da					      ifconst	mk_96x2_1_on
------- FILE titlescreen/asm/96x2_1_kernel.asm LEVEL 3 PASS 3
      0  61da					      include	"titlescreen/asm/96x2_1_kernel.asm"
      1  61da				   draw_bmp_96x2_1
      2  61da
      3  61da				  -	      ifconst	bmp_96x2_1_index
      4  61da				  -	      lda	#(bmp_96x2_1_height-1)
      5  61da				  -	      sec
      6  61da				  -	      sbc	bmp_96x2_1_index
      7  61da				  -	      tay
      8  61da				  -	      sbc	#bmp_96x2_1_window
      9  61da				  -	      sta	temp1
     10  61da					      else
     11  61da		       a0 13		      ldy	#(bmp_96x2_1_window-1)
     12  61dc		       a9 ff		      lda	#255
     13  61de		       85 cb		      sta	temp1
     14  61e0					      endif
     15  61e0
     16  61e0		       a9 03		      lda	#3
     17  61e2		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  61e4		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  61e6		       a9 00		      lda	#0
     20  61e8
     21  61e8		       b9 33 bc 	      lda	bmp_96x2_1_colors,y	;4
     22  61eb				  -	      ifconst	bmp_96x2_1_fade
     23  61eb				  -	      and	bmp_96x2_1_fade
     24  61eb					      endif
     25  61eb		       85 06		      sta	COLUP0	;3
     26  61ed		       85 07		      sta	COLUP1	;3
     27  61ef		       85 2b		      sta	HMCLR	;3
     28  61f1
     29  61f1		       a5 82		      lda	titleframe
     30  61f3		       29 01		      and	#1
     31  61f5		       f0 03		      beq	jmp_pf96x2_1_frame0
     32  61f7		       4c a1 b2 	      jmp	pf96x2_1_frame1
     33  61fa				   jmp_pf96x2_1_frame0
     34  61fa		       4c fd b1 	      jmp	pf96x2_1_frame0
     35  61fd
     36  61fd				   pf96x2_1_frame0
     37  61fd							;postion P0 and P1
     38  61fd		       85 02		      sta	WSYNC
     39  61ff		       a9 e0		      lda	#%11100000
     40  6201		       85 20		      sta	HMP0
     41  6203		       a9 10		      lda	#%00010000
     42  6205		       85 21		      sta	HMP1
     43  6207		       85 02		      sta	WSYNC
      0  6209					      sleep	28
      1  6209				   .CYCLES    SET	28
      2  6209
      3  6209				  -	      IF	.CYCLES < 2
      4  6209				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6209				  -	      ERR
      6  6209					      ENDIF
      7  6209
      8  6209				  -	      IF	.CYCLES & 1
      9  6209				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6209				  -	      nop	0
     11  6209				  -	      ELSE
     12  6209				  -	      bit	VSYNC
     13  6209				  -	      ENDIF
     14  6209				  -.CYCLES    SET	.CYCLES - 3
     15  6209					      ENDIF
     16  6209
     17  6209					      REPEAT	.CYCLES / 2
     18  6209		       ea		      nop
     17  6209					      REPEND
     18  620a		       ea		      nop
     17  620a					      REPEND
     18  620b		       ea		      nop
     17  620b					      REPEND
     18  620c		       ea		      nop
     17  620c					      REPEND
     18  620d		       ea		      nop
     17  620d					      REPEND
     18  620e		       ea		      nop
     17  620e					      REPEND
     18  620f		       ea		      nop
     17  620f					      REPEND
     18  6210		       ea		      nop
     17  6210					      REPEND
     18  6211		       ea		      nop
     17  6211					      REPEND
     18  6212		       ea		      nop
     17  6212					      REPEND
     18  6213		       ea		      nop
     17  6213					      REPEND
     18  6214		       ea		      nop
     17  6214					      REPEND
     18  6215		       ea		      nop
     17  6215					      REPEND
     18  6216		       ea		      nop
     19  6217					      REPEND
     45  6217		       85 10		      sta	RESP0
      0  6219					      sleep	14
      1  6219				   .CYCLES    SET	14
      2  6219
      3  6219				  -	      IF	.CYCLES < 2
      4  6219				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6219				  -	      ERR
      6  6219					      ENDIF
      7  6219
      8  6219				  -	      IF	.CYCLES & 1
      9  6219				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6219				  -	      nop	0
     11  6219				  -	      ELSE
     12  6219				  -	      bit	VSYNC
     13  6219				  -	      ENDIF
     14  6219				  -.CYCLES    SET	.CYCLES - 3
     15  6219					      ENDIF
     16  6219
     17  6219					      REPEAT	.CYCLES / 2
     18  6219		       ea		      nop
     17  6219					      REPEND
     18  621a		       ea		      nop
     17  621a					      REPEND
     18  621b		       ea		      nop
     17  621b					      REPEND
     18  621c		       ea		      nop
     17  621c					      REPEND
     18  621d		       ea		      nop
     17  621d					      REPEND
     18  621e		       ea		      nop
     17  621e					      REPEND
     18  621f		       ea		      nop
     19  6220					      REPEND
     47  6220		       85 11		      sta	RESP1
     48  6222		       85 02		      sta	WSYNC
     49  6224		       85 2a		      sta	HMOVE
     50  6226
     51  6226		       85 02		      sta	WSYNC
     52  6228		       85 2b		      sta	HMCLR
     53  622a		       85 02		      sta	WSYNC
     54  622c
      0  622c					      sleep	4
      1  622c				   .CYCLES    SET	4
      2  622c
      3  622c				  -	      IF	.CYCLES < 2
      4  622c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  622c				  -	      ERR
      6  622c					      ENDIF
      7  622c
      8  622c				  -	      IF	.CYCLES & 1
      9  622c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  622c				  -	      nop	0
     11  622c				  -	      ELSE
     12  622c				  -	      bit	VSYNC
     13  622c				  -	      ENDIF
     14  622c				  -.CYCLES    SET	.CYCLES - 3
     15  622c					      ENDIF
     16  622c
     17  622c					      REPEAT	.CYCLES / 2
     18  622c		       ea		      nop
     17  622c					      REPEND
     18  622d		       ea		      nop
     19  622e					      REPEND
     56  622e		       4c 31 b2 	      jmp	pfline_96x2_1_frame0
     57  6231							;align so our branch doesn't unexpectedly cross a page...
     58  6231				  -	      if	>. != >[.+$70]
     59  6231				  -	      align	256
     60  6231					      endif
     61  6231
     62  6231				   pfline_96x2_1_frame0
     63  6231		       a9 80		      lda	#$80	;2
     64  6233		       85 20		      sta	HMP0	;3
     65  6235		       85 21		      sta	HMP1	;3
     66  6237
     67  6237		       b9 bf bc 	      lda	bmp_96x2_1_06,y	;4
     68  623a		       85 1c		      sta	GRP1	;3
     69  623c
     70  623c		       b9 47 bc 	      lda	bmp_96x2_1_00,y
     71  623f		       85 1b		      sta	GRP0
     72  6241		       b9 6f bc 	      lda	bmp_96x2_1_02,y
     73  6244		       85 1b		      sta	GRP0
     74  6246		       b9 97 bc 	      lda	bmp_96x2_1_04,y
     75  6249		       85 1b		      sta	GRP0
     76  624b
      0  624b					      sleep	2
      1  624b				   .CYCLES    SET	2
      2  624b
      3  624b				  -	      IF	.CYCLES < 2
      4  624b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  624b				  -	      ERR
      6  624b					      ENDIF
      7  624b
      8  624b				  -	      IF	.CYCLES & 1
      9  624b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  624b				  -	      nop	0
     11  624b				  -	      ELSE
     12  624b				  -	      bit	VSYNC
     13  624b				  -	      ENDIF
     14  624b				  -.CYCLES    SET	.CYCLES - 3
     15  624b					      ENDIF
     16  624b
     17  624b					      REPEAT	.CYCLES / 2
     18  624b		       ea		      nop
     19  624c					      REPEND
     78  624c
     79  624c		       b9 e7 bc 	      lda	bmp_96x2_1_08,y
     80  624f		       85 1c		      sta	GRP1
     81  6251		       b9 14 bd 	      lda	bmp_96x2_1_10,y
     82  6254		       85 1c		      sta	GRP1
     83  6256
     84  6256		       b9 5b bc 	      lda	bmp_96x2_1_01,y
     85  6259		       85 1b		      sta	GRP0
     86  625b
      0  625b					      sleep	8
      1  625b				   .CYCLES    SET	8
      2  625b
      3  625b				  -	      IF	.CYCLES < 2
      4  625b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  625b				  -	      ERR
      6  625b					      ENDIF
      7  625b
      8  625b				  -	      IF	.CYCLES & 1
      9  625b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  625b				  -	      nop	0
     11  625b				  -	      ELSE
     12  625b				  -	      bit	VSYNC
     13  625b				  -	      ENDIF
     14  625b				  -.CYCLES    SET	.CYCLES - 3
     15  625b					      ENDIF
     16  625b
     17  625b					      REPEAT	.CYCLES / 2
     18  625b		       ea		      nop
     17  625b					      REPEND
     18  625c		       ea		      nop
     17  625c					      REPEND
     18  625d		       ea		      nop
     17  625d					      REPEND
     18  625e		       ea		      nop
     19  625f					      REPEND
     88  625f
     89  625f							;sta WSYNC	;=0
     90  625f		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  6261
     92  6261		       b9 32 bc 	      lda	bmp_96x2_1_colors-1,y	;4 - get the title color early and store it for later
     93  6264				  -	      ifconst	bmp_96x2_1_fade
     94  6264				  -	      and	bmp_96x2_1_fade
     95  6264					      else
      0  6264					      sleep	3
      1  6264				   .CYCLES    SET	3
      2  6264
      3  6264				  -	      IF	.CYCLES < 2
      4  6264				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6264				  -	      ERR
      6  6264					      ENDIF
      7  6264
      8  6264					      IF	.CYCLES & 1
      9  6264					      IFNCONST	NO_ILLEGAL_OPCODES
     10  6264		       04 00		      nop	0
     11  6266				  -	      ELSE
     12  6266				  -	      bit	VSYNC
     13  6266					      ENDIF
     14  6266				   .CYCLES    SET	.CYCLES - 3
     15  6266					      ENDIF
     16  6266
     17  6266				  -	      REPEAT	.CYCLES / 2
     18  6266				  -	      nop
     19  6266					      REPEND
     97  6266					      endif
     98  6266		       aa		      tax
     99  6267
    100  6267		       a9 00		      lda	#0	;2
    101  6269		       85 20		      sta	HMP0	;3
    102  626b		       85 21		      sta	HMP1	;3
    103  626d
      0  626d					      sleep	7
      1  626d				   .CYCLES    SET	7
      2  626d
      3  626d				  -	      IF	.CYCLES < 2
      4  626d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  626d				  -	      ERR
      6  626d					      ENDIF
      7  626d
      8  626d					      IF	.CYCLES & 1
      9  626d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  626d		       04 00		      nop	0
     11  626f				  -	      ELSE
     12  626f				  -	      bit	VSYNC
     13  626f					      ENDIF
     14  626f				   .CYCLES    SET	.CYCLES - 3
     15  626f					      ENDIF
     16  626f
     17  626f					      REPEAT	.CYCLES / 2
     18  626f		       ea		      nop
     17  626f					      REPEND
     18  6270		       ea		      nop
     19  6271					      REPEND
    105  6271
    106  6271		       b9 d3 bc 	      lda	bmp_96x2_1_07,y
    107  6274		       85 1c		      sta	GRP1
    108  6276
    109  6276		       b9 83 bc 	      lda	bmp_96x2_1_03,y	;5
    110  6279		       85 1b		      sta	GRP0	;3 =  8
    111  627b		       b9 ab bc 	      lda	bmp_96x2_1_05,y	;5
    112  627e		       85 1b		      sta	GRP0	;3 =  8
    113  6280
      0  6280					      sleep	2
      1  6280				   .CYCLES    SET	2
      2  6280
      3  6280				  -	      IF	.CYCLES < 2
      4  6280				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6280				  -	      ERR
      6  6280					      ENDIF
      7  6280
      8  6280				  -	      IF	.CYCLES & 1
      9  6280				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6280				  -	      nop	0
     11  6280				  -	      ELSE
     12  6280				  -	      bit	VSYNC
     13  6280				  -	      ENDIF
     14  6280				  -.CYCLES    SET	.CYCLES - 3
     15  6280					      ENDIF
     16  6280
     17  6280					      REPEAT	.CYCLES / 2
     18  6280		       ea		      nop
     19  6281					      REPEND
    115  6281
    116  6281		       b9 00 bd 	      lda	bmp_96x2_1_09,y	;5
    117  6284		       85 1c		      sta	GRP1	;3 =  8
    118  6286		       b9 28 bd 	      lda	bmp_96x2_1_11,y	;5
    119  6289		       85 1c		      sta	GRP1	;3 =  8
    120  628b
      0  628b					      sleep	2
      1  628b				   .CYCLES    SET	2
      2  628b
      3  628b				  -	      IF	.CYCLES < 2
      4  628b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  628b				  -	      ERR
      6  628b					      ENDIF
      7  628b
      8  628b				  -	      IF	.CYCLES & 1
      9  628b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  628b				  -	      nop	0
     11  628b				  -	      ELSE
     12  628b				  -	      bit	VSYNC
     13  628b				  -	      ENDIF
     14  628b				  -.CYCLES    SET	.CYCLES - 3
     15  628b					      ENDIF
     16  628b
     17  628b					      REPEAT	.CYCLES / 2
     18  628b		       ea		      nop
     19  628c					      REPEND
    122  628c		       86 07		      stx	COLUP1
    123  628e		       86 06		      stx	COLUP0
    124  6290
    125  6290		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  6292					      sleep	2
      1  6292				   .CYCLES    SET	2
      2  6292
      3  6292				  -	      IF	.CYCLES < 2
      4  6292				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6292				  -	      ERR
      6  6292					      ENDIF
      7  6292
      8  6292				  -	      IF	.CYCLES & 1
      9  6292				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6292				  -	      nop	0
     11  6292				  -	      ELSE
     12  6292				  -	      bit	VSYNC
     13  6292				  -	      ENDIF
     14  6292				  -.CYCLES    SET	.CYCLES - 3
     15  6292					      ENDIF
     16  6292
     17  6292					      REPEAT	.CYCLES / 2
     18  6292		       ea		      nop
     19  6293					      REPEND
    127  6293		       88		      dey
    128  6294
    129  6294		       c4 cb		      cpy	temp1	;3
    130  6296		       d0 99		      bne	pfline_96x2_1_frame0	;2/3
    131  6298
    132  6298				   pf96x2_1_0codeend
    133  6298							;echo "critical code #1 in 96x2_1 is ",(pf96x2_1_0codeend-pfline_96x2_1_frame0), " bytes long."
    134  6298
    135  6298		       a9 00		      lda	#0
    136  629a		       85 1b		      sta	GRP0
    137  629c		       85 1c		      sta	GRP1
    138  629e		       4c 6e b3 	      jmp	pfdone_96x2_1
    139  62a1
    140  62a1
    141  62a1				   pf96x2_1_frame1
    142  62a1
    143  62a1							;postion P0 and P1
    144  62a1		       85 02		      sta	WSYNC
    145  62a3		       a9 20		      lda	#%00100000
    146  62a5		       85 20		      sta	HMP0
    147  62a7		       a9 00		      lda	#0
    148  62a9		       a9 f0		      lda	#%11110000
    149  62ab		       85 21		      sta	HMP1
    150  62ad		       85 02		      sta	WSYNC
      0  62af					      sleep	32
      1  62af				   .CYCLES    SET	32
      2  62af
      3  62af				  -	      IF	.CYCLES < 2
      4  62af				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  62af				  -	      ERR
      6  62af					      ENDIF
      7  62af
      8  62af				  -	      IF	.CYCLES & 1
      9  62af				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  62af				  -	      nop	0
     11  62af				  -	      ELSE
     12  62af				  -	      bit	VSYNC
     13  62af				  -	      ENDIF
     14  62af				  -.CYCLES    SET	.CYCLES - 3
     15  62af					      ENDIF
     16  62af
     17  62af					      REPEAT	.CYCLES / 2
     18  62af		       ea		      nop
     17  62af					      REPEND
     18  62b0		       ea		      nop
     17  62b0					      REPEND
     18  62b1		       ea		      nop
     17  62b1					      REPEND
     18  62b2		       ea		      nop
     17  62b2					      REPEND
     18  62b3		       ea		      nop
     17  62b3					      REPEND
     18  62b4		       ea		      nop
     17  62b4					      REPEND
     18  62b5		       ea		      nop
     17  62b5					      REPEND
     18  62b6		       ea		      nop
     17  62b6					      REPEND
     18  62b7		       ea		      nop
     17  62b7					      REPEND
     18  62b8		       ea		      nop
     17  62b8					      REPEND
     18  62b9		       ea		      nop
     17  62b9					      REPEND
     18  62ba		       ea		      nop
     17  62ba					      REPEND
     18  62bb		       ea		      nop
     17  62bb					      REPEND
     18  62bc		       ea		      nop
     17  62bc					      REPEND
     18  62bd		       ea		      nop
     17  62bd					      REPEND
     18  62be		       ea		      nop
     19  62bf					      REPEND
    152  62bf		       85 10		      sta	RESP0
      0  62c1					      sleep	12
      1  62c1				   .CYCLES    SET	12
      2  62c1
      3  62c1				  -	      IF	.CYCLES < 2
      4  62c1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  62c1				  -	      ERR
      6  62c1					      ENDIF
      7  62c1
      8  62c1				  -	      IF	.CYCLES & 1
      9  62c1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  62c1				  -	      nop	0
     11  62c1				  -	      ELSE
     12  62c1				  -	      bit	VSYNC
     13  62c1				  -	      ENDIF
     14  62c1				  -.CYCLES    SET	.CYCLES - 3
     15  62c1					      ENDIF
     16  62c1
     17  62c1					      REPEAT	.CYCLES / 2
     18  62c1		       ea		      nop
     17  62c1					      REPEND
     18  62c2		       ea		      nop
     17  62c2					      REPEND
     18  62c3		       ea		      nop
     17  62c3					      REPEND
     18  62c4		       ea		      nop
     17  62c4					      REPEND
     18  62c5		       ea		      nop
     17  62c5					      REPEND
     18  62c6		       ea		      nop
     19  62c7					      REPEND
    154  62c7		       85 11		      sta	RESP1
    155  62c9		       85 02		      sta	WSYNC
    156  62cb		       85 2a		      sta	HMOVE
    157  62cd
    158  62cd		       85 02		      sta	WSYNC
    159  62cf		       85 2b		      sta	HMCLR
    160  62d1
    161  62d1
    162  62d1
    163  62d1		       85 02		      sta	WSYNC
      0  62d3					      sleep	3
      1  62d3				   .CYCLES    SET	3
      2  62d3
      3  62d3				  -	      IF	.CYCLES < 2
      4  62d3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  62d3				  -	      ERR
      6  62d3					      ENDIF
      7  62d3
      8  62d3					      IF	.CYCLES & 1
      9  62d3					      IFNCONST	NO_ILLEGAL_OPCODES
     10  62d3		       04 00		      nop	0
     11  62d5				  -	      ELSE
     12  62d5				  -	      bit	VSYNC
     13  62d5					      ENDIF
     14  62d5				   .CYCLES    SET	.CYCLES - 3
     15  62d5					      ENDIF
     16  62d5
     17  62d5				  -	      REPEAT	.CYCLES / 2
     18  62d5				  -	      nop
     19  62d5					      REPEND
    165  62d5		       4c 00 b3 	      jmp	pfline_96x2_1_frame1
    166  62d8
    167  62d8							;align so our branch doesn't unexpectedly cross a page...
    168  62d8					      if	>. != >[.+$70]
    169  6300		       00 00 00 00*	      align	256
    170  6300					      endif
    171  6300
    172  6300				   pfline_96x2_1_frame1
    173  6300
    174  6300		       85 2a		      sta	HMOVE
    175  6302
    176  6302		       b9 d3 bc 	      lda	bmp_96x2_1_07,y	;4
    177  6305		       85 1c		      sta	GRP1	;3
    178  6307
    179  6307		       a9 00		      lda	#$0	;2
    180  6309		       85 20		      sta	HMP0	;3
    181  630b		       85 21		      sta	HMP1	;3
    182  630d
    183  630d		       b9 5b bc 	      lda	bmp_96x2_1_01,y
    184  6310		       8d 1b 00 	      sta.w	GRP0
    185  6313		       b9 83 bc 	      lda	bmp_96x2_1_03,y
    186  6316		       85 1b		      sta	GRP0
    187  6318		       b9 ab bc 	      lda	bmp_96x2_1_05,y
    188  631b		       85 1b		      sta	GRP0
    189  631d
      0  631d					      sleep	2
      1  631d				   .CYCLES    SET	2
      2  631d
      3  631d				  -	      IF	.CYCLES < 2
      4  631d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  631d				  -	      ERR
      6  631d					      ENDIF
      7  631d
      8  631d				  -	      IF	.CYCLES & 1
      9  631d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  631d				  -	      nop	0
     11  631d				  -	      ELSE
     12  631d				  -	      bit	VSYNC
     13  631d				  -	      ENDIF
     14  631d				  -.CYCLES    SET	.CYCLES - 3
     15  631d					      ENDIF
     16  631d
     17  631d					      REPEAT	.CYCLES / 2
     18  631d		       ea		      nop
     19  631e					      REPEND
    191  631e
    192  631e		       b9 00 bd 	      lda	bmp_96x2_1_09,y
    193  6321		       85 1c		      sta	GRP1
    194  6323		       b9 28 bd 	      lda	bmp_96x2_1_11,y
    195  6326		       85 1c		      sta	GRP1
    196  6328
    197  6328		       b9 47 bc 	      lda	bmp_96x2_1_00,y
    198  632b		       85 1b		      sta	GRP0
    199  632d
    200  632d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    201  6330
    202  6330							;sta WSYNC	;=0 -----------------------------------------
    203  6330
    204  6330		       b9 bf bc 	      lda	bmp_96x2_1_06,y
    205  6333		       85 1c		      sta	GRP1
    206  6335
      0  6335					      sleep	8
      1  6335				   .CYCLES    SET	8
      2  6335
      3  6335				  -	      IF	.CYCLES < 2
      4  6335				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6335				  -	      ERR
      6  6335					      ENDIF
      7  6335
      8  6335				  -	      IF	.CYCLES & 1
      9  6335				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6335				  -	      nop	0
     11  6335				  -	      ELSE
     12  6335				  -	      bit	VSYNC
     13  6335				  -	      ENDIF
     14  6335				  -.CYCLES    SET	.CYCLES - 3
     15  6335					      ENDIF
     16  6335
     17  6335					      REPEAT	.CYCLES / 2
     18  6335		       ea		      nop
     17  6335					      REPEND
     18  6336		       ea		      nop
     17  6336					      REPEND
     18  6337		       ea		      nop
     17  6337					      REPEND
     18  6338		       ea		      nop
     19  6339					      REPEND
    208  6339
    209  6339		       b9 32 bc 	      lda	bmp_96x2_1_colors-1,y	;get the title color early and store it for later
    210  633c		       aa		      tax		;2
    211  633d
      0  633d					      sleep	3
      1  633d				   .CYCLES    SET	3
      2  633d
      3  633d				  -	      IF	.CYCLES < 2
      4  633d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  633d				  -	      ERR
      6  633d					      ENDIF
      7  633d
      8  633d					      IF	.CYCLES & 1
      9  633d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  633d		       04 00		      nop	0
     11  633f				  -	      ELSE
     12  633f				  -	      bit	VSYNC
     13  633f					      ENDIF
     14  633f				   .CYCLES    SET	.CYCLES - 3
     15  633f					      ENDIF
     16  633f
     17  633f				  -	      REPEAT	.CYCLES / 2
     18  633f				  -	      nop
     19  633f					      REPEND
    213  633f
    214  633f		       a9 80		      lda	#$80	;2
    215  6341		       85 20		      sta	HMP0	;3
    216  6343		       85 21		      sta	HMP1	;3
    217  6345
    218  6345
    219  6345		       b9 6f bc 	      lda	bmp_96x2_1_02,y	;5
    220  6348		       85 1b		      sta	GRP0	;3 =  8
    221  634a
    222  634a		       b9 97 bc 	      lda	bmp_96x2_1_04,y	;5
    223  634d		       85 1b		      sta	GRP0	;3 =  8
    224  634f
      0  634f					      sleep	2
      1  634f				   .CYCLES    SET	2
      2  634f
      3  634f				  -	      IF	.CYCLES < 2
      4  634f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  634f				  -	      ERR
      6  634f					      ENDIF
      7  634f
      8  634f				  -	      IF	.CYCLES & 1
      9  634f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  634f				  -	      nop	0
     11  634f				  -	      ELSE
     12  634f				  -	      bit	VSYNC
     13  634f				  -	      ENDIF
     14  634f				  -.CYCLES    SET	.CYCLES - 3
     15  634f					      ENDIF
     16  634f
     17  634f					      REPEAT	.CYCLES / 2
     18  634f		       ea		      nop
     19  6350					      REPEND
    226  6350
    227  6350		       b9 e7 bc 	      lda	bmp_96x2_1_08,y	;5
    228  6353		       85 1c		      sta	GRP1	;3 =  8
    229  6355
    230  6355		       b9 14 bd 	      lda	bmp_96x2_1_10,y	;5
    231  6358		       85 1c		      sta	GRP1	;3 =  8
    232  635a
      0  635a					      sleep	4
      1  635a				   .CYCLES    SET	4
      2  635a
      3  635a				  -	      IF	.CYCLES < 2
      4  635a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  635a				  -	      ERR
      6  635a					      ENDIF
      7  635a
      8  635a				  -	      IF	.CYCLES & 1
      9  635a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  635a				  -	      nop	0
     11  635a				  -	      ELSE
     12  635a				  -	      bit	VSYNC
     13  635a				  -	      ENDIF
     14  635a				  -.CYCLES    SET	.CYCLES - 3
     15  635a					      ENDIF
     16  635a
     17  635a					      REPEAT	.CYCLES / 2
     18  635a		       ea		      nop
     17  635a					      REPEND
     18  635b		       ea		      nop
     19  635c					      REPEND
    234  635c
    235  635c		       88		      dey
    236  635d
    237  635d		       8a		      txa
    238  635e				  -	      ifconst	bmp_96x2_1_fade
    239  635e				  -	      and	bmp_96x2_1_fade
    240  635e					      else
      0  635e					      sleep	3
      1  635e				   .CYCLES    SET	3
      2  635e
      3  635e				  -	      IF	.CYCLES < 2
      4  635e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  635e				  -	      ERR
      6  635e					      ENDIF
      7  635e
      8  635e					      IF	.CYCLES & 1
      9  635e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  635e		       04 00		      nop	0
     11  6360				  -	      ELSE
     12  6360				  -	      bit	VSYNC
     13  6360					      ENDIF
     14  6360				   .CYCLES    SET	.CYCLES - 3
     15  6360					      ENDIF
     16  6360
     17  6360				  -	      REPEAT	.CYCLES / 2
     18  6360				  -	      nop
     19  6360					      REPEND
    242  6360					      endif
    243  6360		       85 07		      sta	COLUP1	;3
    244  6362		       85 06		      sta	COLUP0	;3
    245  6364
    246  6364		       c4 cb		      cpy	temp1	;2
    247  6366		       d0 98		      bne	pfline_96x2_1_frame1	;2/3
    248  6368
    249  6368				   pf96x2_1_1codeend
    250  6368							;echo "critical code #2 in 96x2_1 is ",(pf96x2_1_1codeend-pfline_96x2_1_frame1), " bytes long."
    251  6368
    252  6368		       a9 00		      lda	#0
    253  636a		       85 1b		      sta	GRP0
    254  636c		       85 1c		      sta	GRP1
    255  636e
    256  636e				   pfdone_96x2_1
    257  636e		       85 02		      sta	WSYNC	; debug
    258  6370
    259  6370		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    149  6371					      endif		;mk_96x2_1_on
    150  6371
    151  6371					      ifconst	mk_96x2_2_on
------- FILE titlescreen/asm/96x2_2_kernel.asm LEVEL 3 PASS 3
      0  6371					      include	"titlescreen/asm/96x2_2_kernel.asm"
      1  6371				   draw_bmp_96x2_2
      2  6371
      3  6371				  -	      ifconst	bmp_96x2_2_index
      4  6371				  -	      lda	#(bmp_96x2_2_height-1)
      5  6371				  -	      sec
      6  6371				  -	      sbc	bmp_96x2_2_index
      7  6371				  -	      tay
      8  6371				  -	      sbc	#bmp_96x2_2_window
      9  6371				  -	      sta	temp1
     10  6371					      else
     11  6371		       a0 04		      ldy	#(bmp_96x2_2_window-1)
     12  6373		       a9 ff		      lda	#255
     13  6375		       85 cb		      sta	temp1
     14  6377					      endif
     15  6377
     16  6377		       a9 03		      lda	#3
     17  6379		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  637b		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  637d		       a9 00		      lda	#0
     20  637f
     21  637f		       b9 3d bd 	      lda	bmp_96x2_2_colors,y	;4
     22  6382				  -	      ifconst	bmp_96x2_2_fade
     23  6382				  -	      and	bmp_96x2_2_fade
     24  6382					      endif
     25  6382		       85 06		      sta	COLUP0	;3
     26  6384		       85 07		      sta	COLUP1	;3
     27  6386		       85 2b		      sta	HMCLR	;3
     28  6388
     29  6388		       a5 82		      lda	titleframe
     30  638a		       29 01		      and	#1
     31  638c		       f0 03		      beq	jmp_pf96x2_2_frame0
     32  638e		       4c 70 b4 	      jmp	pf96x2_2_frame1
     33  6391				   jmp_pf96x2_2_frame0
     34  6391		       4c 94 b3 	      jmp	pf96x2_2_frame0
     35  6394
     36  6394				   pf96x2_2_frame0
     37  6394							;postion P0 and P1
     38  6394		       85 02		      sta	WSYNC
     39  6396		       a9 e0		      lda	#%11100000
     40  6398		       85 20		      sta	HMP0
     41  639a		       a9 10		      lda	#%00010000
     42  639c		       85 21		      sta	HMP1
     43  639e		       85 02		      sta	WSYNC
      0  63a0					      sleep	28
      1  63a0				   .CYCLES    SET	28
      2  63a0
      3  63a0				  -	      IF	.CYCLES < 2
      4  63a0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  63a0				  -	      ERR
      6  63a0					      ENDIF
      7  63a0
      8  63a0				  -	      IF	.CYCLES & 1
      9  63a0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  63a0				  -	      nop	0
     11  63a0				  -	      ELSE
     12  63a0				  -	      bit	VSYNC
     13  63a0				  -	      ENDIF
     14  63a0				  -.CYCLES    SET	.CYCLES - 3
     15  63a0					      ENDIF
     16  63a0
     17  63a0					      REPEAT	.CYCLES / 2
     18  63a0		       ea		      nop
     17  63a0					      REPEND
     18  63a1		       ea		      nop
     17  63a1					      REPEND
     18  63a2		       ea		      nop
     17  63a2					      REPEND
     18  63a3		       ea		      nop
     17  63a3					      REPEND
     18  63a4		       ea		      nop
     17  63a4					      REPEND
     18  63a5		       ea		      nop
     17  63a5					      REPEND
     18  63a6		       ea		      nop
     17  63a6					      REPEND
     18  63a7		       ea		      nop
     17  63a7					      REPEND
     18  63a8		       ea		      nop
     17  63a8					      REPEND
     18  63a9		       ea		      nop
     17  63a9					      REPEND
     18  63aa		       ea		      nop
     17  63aa					      REPEND
     18  63ab		       ea		      nop
     17  63ab					      REPEND
     18  63ac		       ea		      nop
     17  63ac					      REPEND
     18  63ad		       ea		      nop
     19  63ae					      REPEND
     45  63ae		       85 10		      sta	RESP0
      0  63b0					      sleep	14
      1  63b0				   .CYCLES    SET	14
      2  63b0
      3  63b0				  -	      IF	.CYCLES < 2
      4  63b0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  63b0				  -	      ERR
      6  63b0					      ENDIF
      7  63b0
      8  63b0				  -	      IF	.CYCLES & 1
      9  63b0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  63b0				  -	      nop	0
     11  63b0				  -	      ELSE
     12  63b0				  -	      bit	VSYNC
     13  63b0				  -	      ENDIF
     14  63b0				  -.CYCLES    SET	.CYCLES - 3
     15  63b0					      ENDIF
     16  63b0
     17  63b0					      REPEAT	.CYCLES / 2
     18  63b0		       ea		      nop
     17  63b0					      REPEND
     18  63b1		       ea		      nop
     17  63b1					      REPEND
     18  63b2		       ea		      nop
     17  63b2					      REPEND
     18  63b3		       ea		      nop
     17  63b3					      REPEND
     18  63b4		       ea		      nop
     17  63b4					      REPEND
     18  63b5		       ea		      nop
     17  63b5					      REPEND
     18  63b6		       ea		      nop
     19  63b7					      REPEND
     47  63b7		       85 11		      sta	RESP1
     48  63b9		       85 02		      sta	WSYNC
     49  63bb		       85 2a		      sta	HMOVE
     50  63bd
     51  63bd		       85 02		      sta	WSYNC
     52  63bf		       85 2b		      sta	HMCLR
     53  63c1		       85 02		      sta	WSYNC
     54  63c3
      0  63c3					      sleep	4
      1  63c3				   .CYCLES    SET	4
      2  63c3
      3  63c3				  -	      IF	.CYCLES < 2
      4  63c3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  63c3				  -	      ERR
      6  63c3					      ENDIF
      7  63c3
      8  63c3				  -	      IF	.CYCLES & 1
      9  63c3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  63c3				  -	      nop	0
     11  63c3				  -	      ELSE
     12  63c3				  -	      bit	VSYNC
     13  63c3				  -	      ENDIF
     14  63c3				  -.CYCLES    SET	.CYCLES - 3
     15  63c3					      ENDIF
     16  63c3
     17  63c3					      REPEAT	.CYCLES / 2
     18  63c3		       ea		      nop
     17  63c3					      REPEND
     18  63c4		       ea		      nop
     19  63c5					      REPEND
     56  63c5		       4c 00 b4 	      jmp	pfline_96x2_2_frame0
     57  63c8							;align so our branch doesn't unexpectedly cross a page...
     58  63c8					      if	>. != >[.+$70]
     59  6400		       00 00 00 00*	      align	256
     60  6400					      endif
     61  6400
     62  6400				   pfline_96x2_2_frame0
     63  6400		       a9 80		      lda	#$80	;2
     64  6402		       85 20		      sta	HMP0	;3
     65  6404		       85 21		      sta	HMP1	;3
     66  6406
     67  6406		       b9 60 bd 	      lda	bmp_96x2_2_06,y	;4
     68  6409		       85 1c		      sta	GRP1	;3
     69  640b
     70  640b		       b9 42 bd 	      lda	bmp_96x2_2_00,y
     71  640e		       85 1b		      sta	GRP0
     72  6410		       b9 4c bd 	      lda	bmp_96x2_2_02,y
     73  6413		       85 1b		      sta	GRP0
     74  6415		       b9 56 bd 	      lda	bmp_96x2_2_04,y
     75  6418		       85 1b		      sta	GRP0
     76  641a
      0  641a					      sleep	2
      1  641a				   .CYCLES    SET	2
      2  641a
      3  641a				  -	      IF	.CYCLES < 2
      4  641a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  641a				  -	      ERR
      6  641a					      ENDIF
      7  641a
      8  641a				  -	      IF	.CYCLES & 1
      9  641a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  641a				  -	      nop	0
     11  641a				  -	      ELSE
     12  641a				  -	      bit	VSYNC
     13  641a				  -	      ENDIF
     14  641a				  -.CYCLES    SET	.CYCLES - 3
     15  641a					      ENDIF
     16  641a
     17  641a					      REPEAT	.CYCLES / 2
     18  641a		       ea		      nop
     19  641b					      REPEND
     78  641b
     79  641b		       b9 6a bd 	      lda	bmp_96x2_2_08,y
     80  641e		       85 1c		      sta	GRP1
     81  6420		       b9 74 bd 	      lda	bmp_96x2_2_10,y
     82  6423		       85 1c		      sta	GRP1
     83  6425
     84  6425		       b9 47 bd 	      lda	bmp_96x2_2_01,y
     85  6428		       85 1b		      sta	GRP0
     86  642a
      0  642a					      sleep	8
      1  642a				   .CYCLES    SET	8
      2  642a
      3  642a				  -	      IF	.CYCLES < 2
      4  642a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  642a				  -	      ERR
      6  642a					      ENDIF
      7  642a
      8  642a				  -	      IF	.CYCLES & 1
      9  642a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  642a				  -	      nop	0
     11  642a				  -	      ELSE
     12  642a				  -	      bit	VSYNC
     13  642a				  -	      ENDIF
     14  642a				  -.CYCLES    SET	.CYCLES - 3
     15  642a					      ENDIF
     16  642a
     17  642a					      REPEAT	.CYCLES / 2
     18  642a		       ea		      nop
     17  642a					      REPEND
     18  642b		       ea		      nop
     17  642b					      REPEND
     18  642c		       ea		      nop
     17  642c					      REPEND
     18  642d		       ea		      nop
     19  642e					      REPEND
     88  642e
     89  642e							;sta WSYNC	;=0
     90  642e		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  6430
     92  6430		       b9 3c bd 	      lda	bmp_96x2_2_colors-1,y	;4 - get the title color early and store it for later
     93  6433				  -	      ifconst	bmp_96x2_2_fade
     94  6433				  -	      and	bmp_96x2_2_fade
     95  6433					      else
      0  6433					      sleep	3
      1  6433				   .CYCLES    SET	3
      2  6433
      3  6433				  -	      IF	.CYCLES < 2
      4  6433				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6433				  -	      ERR
      6  6433					      ENDIF
      7  6433
      8  6433					      IF	.CYCLES & 1
      9  6433					      IFNCONST	NO_ILLEGAL_OPCODES
     10  6433		       04 00		      nop	0
     11  6435				  -	      ELSE
     12  6435				  -	      bit	VSYNC
     13  6435					      ENDIF
     14  6435				   .CYCLES    SET	.CYCLES - 3
     15  6435					      ENDIF
     16  6435
     17  6435				  -	      REPEAT	.CYCLES / 2
     18  6435				  -	      nop
     19  6435					      REPEND
     97  6435					      endif
     98  6435		       aa		      tax
     99  6436
    100  6436		       a9 00		      lda	#0	;2
    101  6438		       85 20		      sta	HMP0	;3
    102  643a		       85 21		      sta	HMP1	;3
    103  643c
      0  643c					      sleep	7
      1  643c				   .CYCLES    SET	7
      2  643c
      3  643c				  -	      IF	.CYCLES < 2
      4  643c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  643c				  -	      ERR
      6  643c					      ENDIF
      7  643c
      8  643c					      IF	.CYCLES & 1
      9  643c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  643c		       04 00		      nop	0
     11  643e				  -	      ELSE
     12  643e				  -	      bit	VSYNC
     13  643e					      ENDIF
     14  643e				   .CYCLES    SET	.CYCLES - 3
     15  643e					      ENDIF
     16  643e
     17  643e					      REPEAT	.CYCLES / 2
     18  643e		       ea		      nop
     17  643e					      REPEND
     18  643f		       ea		      nop
     19  6440					      REPEND
    105  6440
    106  6440		       b9 65 bd 	      lda	bmp_96x2_2_07,y
    107  6443		       85 1c		      sta	GRP1
    108  6445
    109  6445		       b9 51 bd 	      lda	bmp_96x2_2_03,y	;5
    110  6448		       85 1b		      sta	GRP0	;3 =  8
    111  644a		       b9 5b bd 	      lda	bmp_96x2_2_05,y	;5
    112  644d		       85 1b		      sta	GRP0	;3 =  8
    113  644f
      0  644f					      sleep	2
      1  644f				   .CYCLES    SET	2
      2  644f
      3  644f				  -	      IF	.CYCLES < 2
      4  644f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  644f				  -	      ERR
      6  644f					      ENDIF
      7  644f
      8  644f				  -	      IF	.CYCLES & 1
      9  644f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  644f				  -	      nop	0
     11  644f				  -	      ELSE
     12  644f				  -	      bit	VSYNC
     13  644f				  -	      ENDIF
     14  644f				  -.CYCLES    SET	.CYCLES - 3
     15  644f					      ENDIF
     16  644f
     17  644f					      REPEAT	.CYCLES / 2
     18  644f		       ea		      nop
     19  6450					      REPEND
    115  6450
    116  6450		       b9 6f bd 	      lda	bmp_96x2_2_09,y	;5
    117  6453		       85 1c		      sta	GRP1	;3 =  8
    118  6455		       b9 75 bd 	      lda	bmp_96x2_2_11,y	;5
    119  6458		       85 1c		      sta	GRP1	;3 =  8
    120  645a
      0  645a					      sleep	2
      1  645a				   .CYCLES    SET	2
      2  645a
      3  645a				  -	      IF	.CYCLES < 2
      4  645a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  645a				  -	      ERR
      6  645a					      ENDIF
      7  645a
      8  645a				  -	      IF	.CYCLES & 1
      9  645a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  645a				  -	      nop	0
     11  645a				  -	      ELSE
     12  645a				  -	      bit	VSYNC
     13  645a				  -	      ENDIF
     14  645a				  -.CYCLES    SET	.CYCLES - 3
     15  645a					      ENDIF
     16  645a
     17  645a					      REPEAT	.CYCLES / 2
     18  645a		       ea		      nop
     19  645b					      REPEND
    122  645b		       86 07		      stx	COLUP1
    123  645d		       86 06		      stx	COLUP0
    124  645f
    125  645f
    126  645f		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  6461					      sleep	2
      1  6461				   .CYCLES    SET	2
      2  6461
      3  6461				  -	      IF	.CYCLES < 2
      4  6461				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6461				  -	      ERR
      6  6461					      ENDIF
      7  6461
      8  6461				  -	      IF	.CYCLES & 1
      9  6461				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6461				  -	      nop	0
     11  6461				  -	      ELSE
     12  6461				  -	      bit	VSYNC
     13  6461				  -	      ENDIF
     14  6461				  -.CYCLES    SET	.CYCLES - 3
     15  6461					      ENDIF
     16  6461
     17  6461					      REPEAT	.CYCLES / 2
     18  6461		       ea		      nop
     19  6462					      REPEND
    128  6462		       88		      dey
    129  6463
    130  6463		       c4 cb		      cpy	temp1	;3
    131  6465		       d0 99		      bne	pfline_96x2_2_frame0	;2/3
    132  6467
    133  6467				   pf96x2_2_0codeend
    134  6467							;echo "critical code #1 in 96x2_2 is ",(pf96x2_2_0codeend-pfline_96x2_2_frame0), " bytes long."
    135  6467
    136  6467		       a9 00		      lda	#0
    137  6469		       85 1b		      sta	GRP0
    138  646b		       85 1c		      sta	GRP1
    139  646d		       4c 6e b5 	      jmp	pfdone_96x2_2
    140  6470
    141  6470
    142  6470				   pf96x2_2_frame1
    143  6470
    144  6470							;postion P0 and P1
    145  6470		       85 02		      sta	WSYNC
    146  6472		       a9 20		      lda	#%00100000
    147  6474		       85 20		      sta	HMP0
    148  6476		       a9 00		      lda	#0
    149  6478		       a9 f0		      lda	#%11110000
    150  647a		       85 21		      sta	HMP1
    151  647c		       85 02		      sta	WSYNC
      0  647e					      sleep	32
      1  647e				   .CYCLES    SET	32
      2  647e
      3  647e				  -	      IF	.CYCLES < 2
      4  647e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  647e				  -	      ERR
      6  647e					      ENDIF
      7  647e
      8  647e				  -	      IF	.CYCLES & 1
      9  647e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  647e				  -	      nop	0
     11  647e				  -	      ELSE
     12  647e				  -	      bit	VSYNC
     13  647e				  -	      ENDIF
     14  647e				  -.CYCLES    SET	.CYCLES - 3
     15  647e					      ENDIF
     16  647e
     17  647e					      REPEAT	.CYCLES / 2
     18  647e		       ea		      nop
     17  647e					      REPEND
     18  647f		       ea		      nop
     17  647f					      REPEND
     18  6480		       ea		      nop
     17  6480					      REPEND
     18  6481		       ea		      nop
     17  6481					      REPEND
     18  6482		       ea		      nop
     17  6482					      REPEND
     18  6483		       ea		      nop
     17  6483					      REPEND
     18  6484		       ea		      nop
     17  6484					      REPEND
     18  6485		       ea		      nop
     17  6485					      REPEND
     18  6486		       ea		      nop
     17  6486					      REPEND
     18  6487		       ea		      nop
     17  6487					      REPEND
     18  6488		       ea		      nop
     17  6488					      REPEND
     18  6489		       ea		      nop
     17  6489					      REPEND
     18  648a		       ea		      nop
     17  648a					      REPEND
     18  648b		       ea		      nop
     17  648b					      REPEND
     18  648c		       ea		      nop
     17  648c					      REPEND
     18  648d		       ea		      nop
     19  648e					      REPEND
    153  648e		       85 10		      sta	RESP0
      0  6490					      sleep	12
      1  6490				   .CYCLES    SET	12
      2  6490
      3  6490				  -	      IF	.CYCLES < 2
      4  6490				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6490				  -	      ERR
      6  6490					      ENDIF
      7  6490
      8  6490				  -	      IF	.CYCLES & 1
      9  6490				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6490				  -	      nop	0
     11  6490				  -	      ELSE
     12  6490				  -	      bit	VSYNC
     13  6490				  -	      ENDIF
     14  6490				  -.CYCLES    SET	.CYCLES - 3
     15  6490					      ENDIF
     16  6490
     17  6490					      REPEAT	.CYCLES / 2
     18  6490		       ea		      nop
     17  6490					      REPEND
     18  6491		       ea		      nop
     17  6491					      REPEND
     18  6492		       ea		      nop
     17  6492					      REPEND
     18  6493		       ea		      nop
     17  6493					      REPEND
     18  6494		       ea		      nop
     17  6494					      REPEND
     18  6495		       ea		      nop
     19  6496					      REPEND
    155  6496		       85 11		      sta	RESP1
    156  6498		       85 02		      sta	WSYNC
    157  649a		       85 2a		      sta	HMOVE
    158  649c
    159  649c		       85 02		      sta	WSYNC
    160  649e		       85 2b		      sta	HMCLR
    161  64a0
    162  64a0
    163  64a0
    164  64a0		       85 02		      sta	WSYNC
      0  64a2					      sleep	3
      1  64a2				   .CYCLES    SET	3
      2  64a2
      3  64a2				  -	      IF	.CYCLES < 2
      4  64a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  64a2				  -	      ERR
      6  64a2					      ENDIF
      7  64a2
      8  64a2					      IF	.CYCLES & 1
      9  64a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  64a2		       04 00		      nop	0
     11  64a4				  -	      ELSE
     12  64a4				  -	      bit	VSYNC
     13  64a4					      ENDIF
     14  64a4				   .CYCLES    SET	.CYCLES - 3
     15  64a4					      ENDIF
     16  64a4
     17  64a4				  -	      REPEAT	.CYCLES / 2
     18  64a4				  -	      nop
     19  64a4					      REPEND
    166  64a4		       4c 00 b5 	      jmp	pfline_96x2_2_frame1
    167  64a7
    168  64a7							;align so our branch doesn't unexpectedly cross a page...
    169  64a7					      if	>. != >[.+$70]
    170  6500		       00 00 00 00*	      align	256
    171  6500					      endif
    172  6500
    173  6500				   pfline_96x2_2_frame1
    174  6500
    175  6500		       85 2a		      sta	HMOVE
    176  6502
    177  6502		       b9 65 bd 	      lda	bmp_96x2_2_07,y	;4
    178  6505		       85 1c		      sta	GRP1	;3
    179  6507
    180  6507		       a9 00		      lda	#$0	;2
    181  6509		       85 20		      sta	HMP0	;3
    182  650b		       85 21		      sta	HMP1	;3
    183  650d
    184  650d		       b9 47 bd 	      lda	bmp_96x2_2_01,y
    185  6510		       8d 1b 00 	      sta.w	GRP0
    186  6513		       b9 51 bd 	      lda	bmp_96x2_2_03,y
    187  6516		       85 1b		      sta	GRP0
    188  6518		       b9 5b bd 	      lda	bmp_96x2_2_05,y
    189  651b		       85 1b		      sta	GRP0
    190  651d
      0  651d					      sleep	2
      1  651d				   .CYCLES    SET	2
      2  651d
      3  651d				  -	      IF	.CYCLES < 2
      4  651d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  651d				  -	      ERR
      6  651d					      ENDIF
      7  651d
      8  651d				  -	      IF	.CYCLES & 1
      9  651d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  651d				  -	      nop	0
     11  651d				  -	      ELSE
     12  651d				  -	      bit	VSYNC
     13  651d				  -	      ENDIF
     14  651d				  -.CYCLES    SET	.CYCLES - 3
     15  651d					      ENDIF
     16  651d
     17  651d					      REPEAT	.CYCLES / 2
     18  651d		       ea		      nop
     19  651e					      REPEND
    192  651e
    193  651e		       b9 6f bd 	      lda	bmp_96x2_2_09,y
    194  6521		       85 1c		      sta	GRP1
    195  6523		       b9 75 bd 	      lda	bmp_96x2_2_11,y
    196  6526		       85 1c		      sta	GRP1
    197  6528
    198  6528		       b9 42 bd 	      lda	bmp_96x2_2_00,y
    199  652b		       85 1b		      sta	GRP0
    200  652d
    201  652d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    202  6530
    203  6530							;sta WSYNC	;=0 -----------------------------------------
    204  6530
    205  6530		       b9 60 bd 	      lda	bmp_96x2_2_06,y
    206  6533		       85 1c		      sta	GRP1
    207  6535
      0  6535					      sleep	8
      1  6535				   .CYCLES    SET	8
      2  6535
      3  6535				  -	      IF	.CYCLES < 2
      4  6535				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6535				  -	      ERR
      6  6535					      ENDIF
      7  6535
      8  6535				  -	      IF	.CYCLES & 1
      9  6535				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6535				  -	      nop	0
     11  6535				  -	      ELSE
     12  6535				  -	      bit	VSYNC
     13  6535				  -	      ENDIF
     14  6535				  -.CYCLES    SET	.CYCLES - 3
     15  6535					      ENDIF
     16  6535
     17  6535					      REPEAT	.CYCLES / 2
     18  6535		       ea		      nop
     17  6535					      REPEND
     18  6536		       ea		      nop
     17  6536					      REPEND
     18  6537		       ea		      nop
     17  6537					      REPEND
     18  6538		       ea		      nop
     19  6539					      REPEND
    209  6539
    210  6539		       b9 3c bd 	      lda	bmp_96x2_2_colors-1,y	;get the title color early and store it for later
    211  653c		       aa		      tax		;2
    212  653d
      0  653d					      sleep	3
      1  653d				   .CYCLES    SET	3
      2  653d
      3  653d				  -	      IF	.CYCLES < 2
      4  653d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  653d				  -	      ERR
      6  653d					      ENDIF
      7  653d
      8  653d					      IF	.CYCLES & 1
      9  653d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  653d		       04 00		      nop	0
     11  653f				  -	      ELSE
     12  653f				  -	      bit	VSYNC
     13  653f					      ENDIF
     14  653f				   .CYCLES    SET	.CYCLES - 3
     15  653f					      ENDIF
     16  653f
     17  653f				  -	      REPEAT	.CYCLES / 2
     18  653f				  -	      nop
     19  653f					      REPEND
    214  653f
    215  653f		       a9 80		      lda	#$80	;2
    216  6541		       85 20		      sta	HMP0	;3
    217  6543		       85 21		      sta	HMP1	;3
    218  6545
    219  6545
    220  6545		       b9 4c bd 	      lda	bmp_96x2_2_02,y	;5
    221  6548		       85 1b		      sta	GRP0	;3 =  8
    222  654a
    223  654a		       b9 56 bd 	      lda	bmp_96x2_2_04,y	;5
    224  654d		       85 1b		      sta	GRP0	;3 =  8
    225  654f
      0  654f					      sleep	2
      1  654f				   .CYCLES    SET	2
      2  654f
      3  654f				  -	      IF	.CYCLES < 2
      4  654f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  654f				  -	      ERR
      6  654f					      ENDIF
      7  654f
      8  654f				  -	      IF	.CYCLES & 1
      9  654f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  654f				  -	      nop	0
     11  654f				  -	      ELSE
     12  654f				  -	      bit	VSYNC
     13  654f				  -	      ENDIF
     14  654f				  -.CYCLES    SET	.CYCLES - 3
     15  654f					      ENDIF
     16  654f
     17  654f					      REPEAT	.CYCLES / 2
     18  654f		       ea		      nop
     19  6550					      REPEND
    227  6550
    228  6550		       b9 6a bd 	      lda	bmp_96x2_2_08,y	;5
    229  6553		       85 1c		      sta	GRP1	;3 =  8
    230  6555
    231  6555		       b9 74 bd 	      lda	bmp_96x2_2_10,y	;5
    232  6558		       85 1c		      sta	GRP1	;3 =  8
    233  655a
      0  655a					      sleep	4
      1  655a				   .CYCLES    SET	4
      2  655a
      3  655a				  -	      IF	.CYCLES < 2
      4  655a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  655a				  -	      ERR
      6  655a					      ENDIF
      7  655a
      8  655a				  -	      IF	.CYCLES & 1
      9  655a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  655a				  -	      nop	0
     11  655a				  -	      ELSE
     12  655a				  -	      bit	VSYNC
     13  655a				  -	      ENDIF
     14  655a				  -.CYCLES    SET	.CYCLES - 3
     15  655a					      ENDIF
     16  655a
     17  655a					      REPEAT	.CYCLES / 2
     18  655a		       ea		      nop
     17  655a					      REPEND
     18  655b		       ea		      nop
     19  655c					      REPEND
    235  655c
    236  655c		       88		      dey
    237  655d
    238  655d		       8a		      txa
    239  655e				  -	      ifconst	bmp_96x2_2_fade
    240  655e				  -	      and	bmp_96x2_2_fade
    241  655e					      else
      0  655e					      sleep	3
      1  655e				   .CYCLES    SET	3
      2  655e
      3  655e				  -	      IF	.CYCLES < 2
      4  655e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  655e				  -	      ERR
      6  655e					      ENDIF
      7  655e
      8  655e					      IF	.CYCLES & 1
      9  655e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  655e		       04 00		      nop	0
     11  6560				  -	      ELSE
     12  6560				  -	      bit	VSYNC
     13  6560					      ENDIF
     14  6560				   .CYCLES    SET	.CYCLES - 3
     15  6560					      ENDIF
     16  6560
     17  6560				  -	      REPEAT	.CYCLES / 2
     18  6560				  -	      nop
     19  6560					      REPEND
    243  6560					      endif
    244  6560		       85 07		      sta	COLUP1	;3
    245  6562		       85 06		      sta	COLUP0	;3
    246  6564
    247  6564		       c4 cb		      cpy	temp1	;2
    248  6566		       d0 98		      bne	pfline_96x2_2_frame1	;2/3
    249  6568
    250  6568				   pf96x2_2_1codeend
    251  6568							;echo "critical code #2 in 96x2_2 is ",(pf96x2_2_1codeend-pfline_96x2_2_frame1), " bytes long."
    252  6568
    253  6568		       a9 00		      lda	#0
    254  656a		       85 1b		      sta	GRP0
    255  656c		       85 1c		      sta	GRP1
    256  656e
    257  656e				   pfdone_96x2_2
    258  656e		       85 02		      sta	WSYNC	; debug
    259  6570
    260  6570		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    153  6571					      endif		;mk_96x2_2_on
    154  6571
    155  6571				  -	      ifconst	mk_96x2_3_on
    156  6571				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    157  6571					      endif		;mk_96x2_3_on
    158  6571
    159  6571					      ifconst	mk_96x2_4_on
------- FILE titlescreen/asm/96x2_4_kernel.asm LEVEL 3 PASS 3
      0  6571					      include	"titlescreen/asm/96x2_4_kernel.asm"
      1  6571				   draw_bmp_96x2_4
      2  6571
      3  6571				  -	      ifconst	bmp_96x2_4_index
      4  6571				  -	      lda	#(bmp_96x2_4_height-1)
      5  6571				  -	      sec
      6  6571				  -	      sbc	bmp_96x2_4_index
      7  6571				  -	      tay
      8  6571				  -	      sbc	#bmp_96x2_4_window
      9  6571				  -	      sta	temp1
     10  6571					      else
     11  6571		       a0 04		      ldy	#(bmp_96x2_4_window-1)
     12  6573		       a9 ff		      lda	#255
     13  6575		       85 cb		      sta	temp1
     14  6577					      endif
     15  6577
     16  6577		       a9 03		      lda	#3
     17  6579		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  657b		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  657d		       a9 00		      lda	#0
     20  657f
     21  657f		       b9 7b bd 	      lda	bmp_96x2_4_colors,y	;4
     22  6582				  -	      ifconst	bmp_96x2_4_fade
     23  6582				  -	      and	bmp_96x2_4_fade
     24  6582					      endif
     25  6582		       85 06		      sta	COLUP0	;3
     26  6584		       85 07		      sta	COLUP1	;3
     27  6586		       85 2b		      sta	HMCLR	;3
     28  6588
     29  6588		       a5 82		      lda	titleframe
     30  658a		       29 01		      and	#1
     31  658c		       f0 03		      beq	jmp_pf96x2_4_frame0
     32  658e		       4c 70 b6 	      jmp	pf96x2_4_frame1
     33  6591				   jmp_pf96x2_4_frame0
     34  6591		       4c 94 b5 	      jmp	pf96x2_4_frame0
     35  6594
     36  6594				   pf96x2_4_frame0
     37  6594							;postion P0 and P1
     38  6594		       85 02		      sta	WSYNC
     39  6596		       a9 e0		      lda	#%11100000
     40  6598		       85 20		      sta	HMP0
     41  659a		       a9 10		      lda	#%00010000
     42  659c		       85 21		      sta	HMP1
     43  659e		       85 02		      sta	WSYNC
      0  65a0					      sleep	28
      1  65a0				   .CYCLES    SET	28
      2  65a0
      3  65a0				  -	      IF	.CYCLES < 2
      4  65a0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  65a0				  -	      ERR
      6  65a0					      ENDIF
      7  65a0
      8  65a0				  -	      IF	.CYCLES & 1
      9  65a0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  65a0				  -	      nop	0
     11  65a0				  -	      ELSE
     12  65a0				  -	      bit	VSYNC
     13  65a0				  -	      ENDIF
     14  65a0				  -.CYCLES    SET	.CYCLES - 3
     15  65a0					      ENDIF
     16  65a0
     17  65a0					      REPEAT	.CYCLES / 2
     18  65a0		       ea		      nop
     17  65a0					      REPEND
     18  65a1		       ea		      nop
     17  65a1					      REPEND
     18  65a2		       ea		      nop
     17  65a2					      REPEND
     18  65a3		       ea		      nop
     17  65a3					      REPEND
     18  65a4		       ea		      nop
     17  65a4					      REPEND
     18  65a5		       ea		      nop
     17  65a5					      REPEND
     18  65a6		       ea		      nop
     17  65a6					      REPEND
     18  65a7		       ea		      nop
     17  65a7					      REPEND
     18  65a8		       ea		      nop
     17  65a8					      REPEND
     18  65a9		       ea		      nop
     17  65a9					      REPEND
     18  65aa		       ea		      nop
     17  65aa					      REPEND
     18  65ab		       ea		      nop
     17  65ab					      REPEND
     18  65ac		       ea		      nop
     17  65ac					      REPEND
     18  65ad		       ea		      nop
     19  65ae					      REPEND
     45  65ae		       85 10		      sta	RESP0
      0  65b0					      sleep	14
      1  65b0				   .CYCLES    SET	14
      2  65b0
      3  65b0				  -	      IF	.CYCLES < 2
      4  65b0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  65b0				  -	      ERR
      6  65b0					      ENDIF
      7  65b0
      8  65b0				  -	      IF	.CYCLES & 1
      9  65b0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  65b0				  -	      nop	0
     11  65b0				  -	      ELSE
     12  65b0				  -	      bit	VSYNC
     13  65b0				  -	      ENDIF
     14  65b0				  -.CYCLES    SET	.CYCLES - 3
     15  65b0					      ENDIF
     16  65b0
     17  65b0					      REPEAT	.CYCLES / 2
     18  65b0		       ea		      nop
     17  65b0					      REPEND
     18  65b1		       ea		      nop
     17  65b1					      REPEND
     18  65b2		       ea		      nop
     17  65b2					      REPEND
     18  65b3		       ea		      nop
     17  65b3					      REPEND
     18  65b4		       ea		      nop
     17  65b4					      REPEND
     18  65b5		       ea		      nop
     17  65b5					      REPEND
     18  65b6		       ea		      nop
     19  65b7					      REPEND
     47  65b7		       85 11		      sta	RESP1
     48  65b9		       85 02		      sta	WSYNC
     49  65bb		       85 2a		      sta	HMOVE
     50  65bd
     51  65bd		       85 02		      sta	WSYNC
     52  65bf		       85 2b		      sta	HMCLR
     53  65c1		       85 02		      sta	WSYNC
     54  65c3
      0  65c3					      sleep	4
      1  65c3				   .CYCLES    SET	4
      2  65c3
      3  65c3				  -	      IF	.CYCLES < 2
      4  65c3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  65c3				  -	      ERR
      6  65c3					      ENDIF
      7  65c3
      8  65c3				  -	      IF	.CYCLES & 1
      9  65c3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  65c3				  -	      nop	0
     11  65c3				  -	      ELSE
     12  65c3				  -	      bit	VSYNC
     13  65c3				  -	      ENDIF
     14  65c3				  -.CYCLES    SET	.CYCLES - 3
     15  65c3					      ENDIF
     16  65c3
     17  65c3					      REPEAT	.CYCLES / 2
     18  65c3		       ea		      nop
     17  65c3					      REPEND
     18  65c4		       ea		      nop
     19  65c5					      REPEND
     56  65c5		       4c 00 b6 	      jmp	pfline_96x2_4_frame0
     57  65c8							;align so our branch doesn't unexpectedly cross a page...
     58  65c8					      if	>. != >[.+$70]
     59  6600		       00 00 00 00*	      align	256
     60  6600					      endif
     61  6600
     62  6600				   pfline_96x2_4_frame0
     63  6600		       a9 80		      lda	#$80	;2
     64  6602		       85 20		      sta	HMP0	;3
     65  6604		       85 21		      sta	HMP1	;3
     66  6606
     67  6606		       b9 9e bd 	      lda	bmp_96x2_4_06,y	;4
     68  6609		       85 1c		      sta	GRP1	;3
     69  660b
     70  660b		       b9 80 bd 	      lda	bmp_96x2_4_00,y
     71  660e		       85 1b		      sta	GRP0
     72  6610		       b9 8a bd 	      lda	bmp_96x2_4_02,y
     73  6613		       85 1b		      sta	GRP0
     74  6615		       b9 94 bd 	      lda	bmp_96x2_4_04,y
     75  6618		       85 1b		      sta	GRP0
     76  661a
      0  661a					      sleep	2
      1  661a				   .CYCLES    SET	2
      2  661a
      3  661a				  -	      IF	.CYCLES < 2
      4  661a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  661a				  -	      ERR
      6  661a					      ENDIF
      7  661a
      8  661a				  -	      IF	.CYCLES & 1
      9  661a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  661a				  -	      nop	0
     11  661a				  -	      ELSE
     12  661a				  -	      bit	VSYNC
     13  661a				  -	      ENDIF
     14  661a				  -.CYCLES    SET	.CYCLES - 3
     15  661a					      ENDIF
     16  661a
     17  661a					      REPEAT	.CYCLES / 2
     18  661a		       ea		      nop
     19  661b					      REPEND
     78  661b
     79  661b		       b9 a8 bd 	      lda	bmp_96x2_4_08,y
     80  661e		       85 1c		      sta	GRP1
     81  6620		       b9 b2 bd 	      lda	bmp_96x2_4_10,y
     82  6623		       85 1c		      sta	GRP1
     83  6625
     84  6625		       b9 85 bd 	      lda	bmp_96x2_4_01,y
     85  6628		       85 1b		      sta	GRP0
     86  662a
      0  662a					      sleep	8
      1  662a				   .CYCLES    SET	8
      2  662a
      3  662a				  -	      IF	.CYCLES < 2
      4  662a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  662a				  -	      ERR
      6  662a					      ENDIF
      7  662a
      8  662a				  -	      IF	.CYCLES & 1
      9  662a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  662a				  -	      nop	0
     11  662a				  -	      ELSE
     12  662a				  -	      bit	VSYNC
     13  662a				  -	      ENDIF
     14  662a				  -.CYCLES    SET	.CYCLES - 3
     15  662a					      ENDIF
     16  662a
     17  662a					      REPEAT	.CYCLES / 2
     18  662a		       ea		      nop
     17  662a					      REPEND
     18  662b		       ea		      nop
     17  662b					      REPEND
     18  662c		       ea		      nop
     17  662c					      REPEND
     18  662d		       ea		      nop
     19  662e					      REPEND
     88  662e
     89  662e							;sta WSYNC	;=0
     90  662e		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  6630
     92  6630		       b9 7a bd 	      lda	bmp_96x2_4_colors-1,y	;4 - get the title color early and store it for later
     93  6633				  -	      ifconst	bmp_96x2_4_fade
     94  6633				  -	      and	bmp_96x2_4_fade
     95  6633					      else
      0  6633					      sleep	3
      1  6633				   .CYCLES    SET	3
      2  6633
      3  6633				  -	      IF	.CYCLES < 2
      4  6633				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6633				  -	      ERR
      6  6633					      ENDIF
      7  6633
      8  6633					      IF	.CYCLES & 1
      9  6633					      IFNCONST	NO_ILLEGAL_OPCODES
     10  6633		       04 00		      nop	0
     11  6635				  -	      ELSE
     12  6635				  -	      bit	VSYNC
     13  6635					      ENDIF
     14  6635				   .CYCLES    SET	.CYCLES - 3
     15  6635					      ENDIF
     16  6635
     17  6635				  -	      REPEAT	.CYCLES / 2
     18  6635				  -	      nop
     19  6635					      REPEND
     97  6635					      endif
     98  6635		       aa		      tax
     99  6636
    100  6636		       a9 00		      lda	#0	;2
    101  6638		       85 20		      sta	HMP0	;3
    102  663a		       85 21		      sta	HMP1	;3
    103  663c
      0  663c					      sleep	7
      1  663c				   .CYCLES    SET	7
      2  663c
      3  663c				  -	      IF	.CYCLES < 2
      4  663c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  663c				  -	      ERR
      6  663c					      ENDIF
      7  663c
      8  663c					      IF	.CYCLES & 1
      9  663c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  663c		       04 00		      nop	0
     11  663e				  -	      ELSE
     12  663e				  -	      bit	VSYNC
     13  663e					      ENDIF
     14  663e				   .CYCLES    SET	.CYCLES - 3
     15  663e					      ENDIF
     16  663e
     17  663e					      REPEAT	.CYCLES / 2
     18  663e		       ea		      nop
     17  663e					      REPEND
     18  663f		       ea		      nop
     19  6640					      REPEND
    105  6640
    106  6640		       b9 a3 bd 	      lda	bmp_96x2_4_07,y
    107  6643		       85 1c		      sta	GRP1
    108  6645
    109  6645		       b9 8f bd 	      lda	bmp_96x2_4_03,y	;5
    110  6648		       85 1b		      sta	GRP0	;3 =  8
    111  664a		       b9 99 bd 	      lda	bmp_96x2_4_05,y	;5
    112  664d		       85 1b		      sta	GRP0	;3 =  8
    113  664f
      0  664f					      sleep	2
      1  664f				   .CYCLES    SET	2
      2  664f
      3  664f				  -	      IF	.CYCLES < 2
      4  664f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  664f				  -	      ERR
      6  664f					      ENDIF
      7  664f
      8  664f				  -	      IF	.CYCLES & 1
      9  664f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  664f				  -	      nop	0
     11  664f				  -	      ELSE
     12  664f				  -	      bit	VSYNC
     13  664f				  -	      ENDIF
     14  664f				  -.CYCLES    SET	.CYCLES - 3
     15  664f					      ENDIF
     16  664f
     17  664f					      REPEAT	.CYCLES / 2
     18  664f		       ea		      nop
     19  6650					      REPEND
    115  6650
    116  6650		       b9 ad bd 	      lda	bmp_96x2_4_09,y	;5
    117  6653		       85 1c		      sta	GRP1	;3 =  8
    118  6655		       b9 b7 bd 	      lda	bmp_96x2_4_11,y	;5
    119  6658		       85 1c		      sta	GRP1	;3 =  8
    120  665a
      0  665a					      sleep	2
      1  665a				   .CYCLES    SET	2
      2  665a
      3  665a				  -	      IF	.CYCLES < 2
      4  665a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  665a				  -	      ERR
      6  665a					      ENDIF
      7  665a
      8  665a				  -	      IF	.CYCLES & 1
      9  665a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  665a				  -	      nop	0
     11  665a				  -	      ELSE
     12  665a				  -	      bit	VSYNC
     13  665a				  -	      ENDIF
     14  665a				  -.CYCLES    SET	.CYCLES - 3
     15  665a					      ENDIF
     16  665a
     17  665a					      REPEAT	.CYCLES / 2
     18  665a		       ea		      nop
     19  665b					      REPEND
    122  665b		       86 07		      stx	COLUP1
    123  665d		       86 06		      stx	COLUP0
    124  665f
    125  665f
    126  665f		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  6661					      sleep	2
      1  6661				   .CYCLES    SET	2
      2  6661
      3  6661				  -	      IF	.CYCLES < 2
      4  6661				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6661				  -	      ERR
      6  6661					      ENDIF
      7  6661
      8  6661				  -	      IF	.CYCLES & 1
      9  6661				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6661				  -	      nop	0
     11  6661				  -	      ELSE
     12  6661				  -	      bit	VSYNC
     13  6661				  -	      ENDIF
     14  6661				  -.CYCLES    SET	.CYCLES - 3
     15  6661					      ENDIF
     16  6661
     17  6661					      REPEAT	.CYCLES / 2
     18  6661		       ea		      nop
     19  6662					      REPEND
    128  6662		       88		      dey
    129  6663
    130  6663		       c4 cb		      cpy	temp1	;3
    131  6665		       d0 99		      bne	pfline_96x2_4_frame0	;2/3
    132  6667
    133  6667				   pf96x2_4_0codeend
    134  6667							;echo "critical code #1 in 96x2_4 is ",(pf96x2_4_0codeend-pfline_96x2_4_frame0), " bytes long."
    135  6667
    136  6667		       a9 00		      lda	#0
    137  6669		       85 1b		      sta	GRP0
    138  666b		       85 1c		      sta	GRP1
    139  666d		       4c 6e b7 	      jmp	pfdone_96x2_4
    140  6670
    141  6670
    142  6670				   pf96x2_4_frame1
    143  6670
    144  6670							;postion P0 and P1
    145  6670		       85 02		      sta	WSYNC
    146  6672		       a9 20		      lda	#%00100000
    147  6674		       85 20		      sta	HMP0
    148  6676		       a9 00		      lda	#0
    149  6678		       a9 f0		      lda	#%11110000
    150  667a		       85 21		      sta	HMP1
    151  667c		       85 02		      sta	WSYNC
      0  667e					      sleep	32
      1  667e				   .CYCLES    SET	32
      2  667e
      3  667e				  -	      IF	.CYCLES < 2
      4  667e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  667e				  -	      ERR
      6  667e					      ENDIF
      7  667e
      8  667e				  -	      IF	.CYCLES & 1
      9  667e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  667e				  -	      nop	0
     11  667e				  -	      ELSE
     12  667e				  -	      bit	VSYNC
     13  667e				  -	      ENDIF
     14  667e				  -.CYCLES    SET	.CYCLES - 3
     15  667e					      ENDIF
     16  667e
     17  667e					      REPEAT	.CYCLES / 2
     18  667e		       ea		      nop
     17  667e					      REPEND
     18  667f		       ea		      nop
     17  667f					      REPEND
     18  6680		       ea		      nop
     17  6680					      REPEND
     18  6681		       ea		      nop
     17  6681					      REPEND
     18  6682		       ea		      nop
     17  6682					      REPEND
     18  6683		       ea		      nop
     17  6683					      REPEND
     18  6684		       ea		      nop
     17  6684					      REPEND
     18  6685		       ea		      nop
     17  6685					      REPEND
     18  6686		       ea		      nop
     17  6686					      REPEND
     18  6687		       ea		      nop
     17  6687					      REPEND
     18  6688		       ea		      nop
     17  6688					      REPEND
     18  6689		       ea		      nop
     17  6689					      REPEND
     18  668a		       ea		      nop
     17  668a					      REPEND
     18  668b		       ea		      nop
     17  668b					      REPEND
     18  668c		       ea		      nop
     17  668c					      REPEND
     18  668d		       ea		      nop
     19  668e					      REPEND
    153  668e		       85 10		      sta	RESP0
      0  6690					      sleep	12
      1  6690				   .CYCLES    SET	12
      2  6690
      3  6690				  -	      IF	.CYCLES < 2
      4  6690				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6690				  -	      ERR
      6  6690					      ENDIF
      7  6690
      8  6690				  -	      IF	.CYCLES & 1
      9  6690				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6690				  -	      nop	0
     11  6690				  -	      ELSE
     12  6690				  -	      bit	VSYNC
     13  6690				  -	      ENDIF
     14  6690				  -.CYCLES    SET	.CYCLES - 3
     15  6690					      ENDIF
     16  6690
     17  6690					      REPEAT	.CYCLES / 2
     18  6690		       ea		      nop
     17  6690					      REPEND
     18  6691		       ea		      nop
     17  6691					      REPEND
     18  6692		       ea		      nop
     17  6692					      REPEND
     18  6693		       ea		      nop
     17  6693					      REPEND
     18  6694		       ea		      nop
     17  6694					      REPEND
     18  6695		       ea		      nop
     19  6696					      REPEND
    155  6696		       85 11		      sta	RESP1
    156  6698		       85 02		      sta	WSYNC
    157  669a		       85 2a		      sta	HMOVE
    158  669c
    159  669c		       85 02		      sta	WSYNC
    160  669e		       85 2b		      sta	HMCLR
    161  66a0
    162  66a0
    163  66a0
    164  66a0		       85 02		      sta	WSYNC
      0  66a2					      sleep	3
      1  66a2				   .CYCLES    SET	3
      2  66a2
      3  66a2				  -	      IF	.CYCLES < 2
      4  66a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  66a2				  -	      ERR
      6  66a2					      ENDIF
      7  66a2
      8  66a2					      IF	.CYCLES & 1
      9  66a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  66a2		       04 00		      nop	0
     11  66a4				  -	      ELSE
     12  66a4				  -	      bit	VSYNC
     13  66a4					      ENDIF
     14  66a4				   .CYCLES    SET	.CYCLES - 3
     15  66a4					      ENDIF
     16  66a4
     17  66a4				  -	      REPEAT	.CYCLES / 2
     18  66a4				  -	      nop
     19  66a4					      REPEND
    166  66a4		       4c 00 b7 	      jmp	pfline_96x2_4_frame1
    167  66a7
    168  66a7							;align so our branch doesn't unexpectedly cross a page...
    169  66a7					      if	>. != >[.+$70]
    170  6700		       00 00 00 00*	      align	256
    171  6700					      endif
    172  6700
    173  6700				   pfline_96x2_4_frame1
    174  6700
    175  6700		       85 2a		      sta	HMOVE
    176  6702
    177  6702		       b9 a3 bd 	      lda	bmp_96x2_4_07,y	;4
    178  6705		       85 1c		      sta	GRP1	;3
    179  6707
    180  6707		       a9 00		      lda	#$0	;2
    181  6709		       85 20		      sta	HMP0	;3
    182  670b		       85 21		      sta	HMP1	;3
    183  670d
    184  670d		       b9 85 bd 	      lda	bmp_96x2_4_01,y
    185  6710		       8d 1b 00 	      sta.w	GRP0
    186  6713		       b9 8f bd 	      lda	bmp_96x2_4_03,y
    187  6716		       85 1b		      sta	GRP0
    188  6718		       b9 99 bd 	      lda	bmp_96x2_4_05,y
    189  671b		       85 1b		      sta	GRP0
    190  671d
      0  671d					      sleep	2
      1  671d				   .CYCLES    SET	2
      2  671d
      3  671d				  -	      IF	.CYCLES < 2
      4  671d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  671d				  -	      ERR
      6  671d					      ENDIF
      7  671d
      8  671d				  -	      IF	.CYCLES & 1
      9  671d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  671d				  -	      nop	0
     11  671d				  -	      ELSE
     12  671d				  -	      bit	VSYNC
     13  671d				  -	      ENDIF
     14  671d				  -.CYCLES    SET	.CYCLES - 3
     15  671d					      ENDIF
     16  671d
     17  671d					      REPEAT	.CYCLES / 2
     18  671d		       ea		      nop
     19  671e					      REPEND
    192  671e
    193  671e		       b9 ad bd 	      lda	bmp_96x2_4_09,y
    194  6721		       85 1c		      sta	GRP1
    195  6723		       b9 b7 bd 	      lda	bmp_96x2_4_11,y
    196  6726		       85 1c		      sta	GRP1
    197  6728
    198  6728		       b9 80 bd 	      lda	bmp_96x2_4_00,y
    199  672b		       85 1b		      sta	GRP0
    200  672d
    201  672d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    202  6730
    203  6730							;sta WSYNC	;=0 -----------------------------------------
    204  6730
    205  6730		       b9 9e bd 	      lda	bmp_96x2_4_06,y
    206  6733		       85 1c		      sta	GRP1
    207  6735
      0  6735					      sleep	8
      1  6735				   .CYCLES    SET	8
      2  6735
      3  6735				  -	      IF	.CYCLES < 2
      4  6735				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6735				  -	      ERR
      6  6735					      ENDIF
      7  6735
      8  6735				  -	      IF	.CYCLES & 1
      9  6735				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6735				  -	      nop	0
     11  6735				  -	      ELSE
     12  6735				  -	      bit	VSYNC
     13  6735				  -	      ENDIF
     14  6735				  -.CYCLES    SET	.CYCLES - 3
     15  6735					      ENDIF
     16  6735
     17  6735					      REPEAT	.CYCLES / 2
     18  6735		       ea		      nop
     17  6735					      REPEND
     18  6736		       ea		      nop
     17  6736					      REPEND
     18  6737		       ea		      nop
     17  6737					      REPEND
     18  6738		       ea		      nop
     19  6739					      REPEND
    209  6739
    210  6739		       b9 7a bd 	      lda	bmp_96x2_4_colors-1,y	;get the title color early and store it for later
    211  673c		       aa		      tax		;2
    212  673d
      0  673d					      sleep	3
      1  673d				   .CYCLES    SET	3
      2  673d
      3  673d				  -	      IF	.CYCLES < 2
      4  673d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  673d				  -	      ERR
      6  673d					      ENDIF
      7  673d
      8  673d					      IF	.CYCLES & 1
      9  673d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  673d		       04 00		      nop	0
     11  673f				  -	      ELSE
     12  673f				  -	      bit	VSYNC
     13  673f					      ENDIF
     14  673f				   .CYCLES    SET	.CYCLES - 3
     15  673f					      ENDIF
     16  673f
     17  673f				  -	      REPEAT	.CYCLES / 2
     18  673f				  -	      nop
     19  673f					      REPEND
    214  673f
    215  673f		       a9 80		      lda	#$80	;2
    216  6741		       85 20		      sta	HMP0	;3
    217  6743		       85 21		      sta	HMP1	;3
    218  6745
    219  6745
    220  6745		       b9 8a bd 	      lda	bmp_96x2_4_02,y	;5
    221  6748		       85 1b		      sta	GRP0	;3 =  8
    222  674a
    223  674a		       b9 94 bd 	      lda	bmp_96x2_4_04,y	;5
    224  674d		       85 1b		      sta	GRP0	;3 =  8
    225  674f
      0  674f					      sleep	2
      1  674f				   .CYCLES    SET	2
      2  674f
      3  674f				  -	      IF	.CYCLES < 2
      4  674f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  674f				  -	      ERR
      6  674f					      ENDIF
      7  674f
      8  674f				  -	      IF	.CYCLES & 1
      9  674f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  674f				  -	      nop	0
     11  674f				  -	      ELSE
     12  674f				  -	      bit	VSYNC
     13  674f				  -	      ENDIF
     14  674f				  -.CYCLES    SET	.CYCLES - 3
     15  674f					      ENDIF
     16  674f
     17  674f					      REPEAT	.CYCLES / 2
     18  674f		       ea		      nop
     19  6750					      REPEND
    227  6750
    228  6750		       b9 a8 bd 	      lda	bmp_96x2_4_08,y	;5
    229  6753		       85 1c		      sta	GRP1	;3 =  8
    230  6755
    231  6755		       b9 b2 bd 	      lda	bmp_96x2_4_10,y	;5
    232  6758		       85 1c		      sta	GRP1	;3 =  8
    233  675a
      0  675a					      sleep	4
      1  675a				   .CYCLES    SET	4
      2  675a
      3  675a				  -	      IF	.CYCLES < 2
      4  675a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  675a				  -	      ERR
      6  675a					      ENDIF
      7  675a
      8  675a				  -	      IF	.CYCLES & 1
      9  675a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  675a				  -	      nop	0
     11  675a				  -	      ELSE
     12  675a				  -	      bit	VSYNC
     13  675a				  -	      ENDIF
     14  675a				  -.CYCLES    SET	.CYCLES - 3
     15  675a					      ENDIF
     16  675a
     17  675a					      REPEAT	.CYCLES / 2
     18  675a		       ea		      nop
     17  675a					      REPEND
     18  675b		       ea		      nop
     19  675c					      REPEND
    235  675c
    236  675c		       88		      dey
    237  675d
    238  675d		       8a		      txa
    239  675e				  -	      ifconst	bmp_96x2_4_fade
    240  675e				  -	      and	bmp_96x2_4_fade
    241  675e					      else
      0  675e					      sleep	3
      1  675e				   .CYCLES    SET	3
      2  675e
      3  675e				  -	      IF	.CYCLES < 2
      4  675e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  675e				  -	      ERR
      6  675e					      ENDIF
      7  675e
      8  675e					      IF	.CYCLES & 1
      9  675e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  675e		       04 00		      nop	0
     11  6760				  -	      ELSE
     12  6760				  -	      bit	VSYNC
     13  6760					      ENDIF
     14  6760				   .CYCLES    SET	.CYCLES - 3
     15  6760					      ENDIF
     16  6760
     17  6760				  -	      REPEAT	.CYCLES / 2
     18  6760				  -	      nop
     19  6760					      REPEND
    243  6760					      endif
    244  6760		       85 07		      sta	COLUP1	;3
    245  6762		       85 06		      sta	COLUP0	;3
    246  6764
    247  6764		       c4 cb		      cpy	temp1	;2
    248  6766		       d0 98		      bne	pfline_96x2_4_frame1	;2/3
    249  6768
    250  6768				   pf96x2_4_1codeend
    251  6768							;echo "critical code #2 in 96x2_4 is ",(pf96x2_4_1codeend-pfline_96x2_4_frame1), " bytes long."
    252  6768
    253  6768		       a9 00		      lda	#0
    254  676a		       85 1b		      sta	GRP0
    255  676c		       85 1c		      sta	GRP1
    256  676e
    257  676e				   pfdone_96x2_4
    258  676e		       85 02		      sta	WSYNC	; debug
    259  6770
    260  6770		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    161  6771					      endif		;mk_96x2_4_on
    162  6771
    163  6771					      ifconst	mk_96x2_5_on
------- FILE titlescreen/asm/96x2_5_kernel.asm LEVEL 3 PASS 3
      0  6771					      include	"titlescreen/asm/96x2_5_kernel.asm"
      1  6771				   draw_bmp_96x2_5
      2  6771
      3  6771				  -	      ifconst	bmp_96x2_5_index
      4  6771				  -	      lda	#(bmp_96x2_5_height-1)
      5  6771				  -	      sec
      6  6771				  -	      sbc	bmp_96x2_5_index
      7  6771				  -	      tay
      8  6771				  -	      sbc	#bmp_96x2_5_window
      9  6771				  -	      sta	temp1
     10  6771					      else
     11  6771		       a0 04		      ldy	#(bmp_96x2_5_window-1)
     12  6773		       a9 ff		      lda	#255
     13  6775		       85 cb		      sta	temp1
     14  6777					      endif
     15  6777
     16  6777		       a9 03		      lda	#3
     17  6779		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  677b		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  677d		       a9 00		      lda	#0
     20  677f
     21  677f		       b9 bd bd 	      lda	bmp_96x2_5_colors,y	;4
     22  6782				  -	      ifconst	bmp_96x2_5_fade
     23  6782				  -	      and	bmp_96x2_5_fade
     24  6782					      endif
     25  6782		       85 06		      sta	COLUP0	;3
     26  6784		       85 07		      sta	COLUP1	;3
     27  6786		       85 2b		      sta	HMCLR	;3
     28  6788
     29  6788		       a5 82		      lda	titleframe
     30  678a		       29 01		      and	#1
     31  678c		       f0 03		      beq	jmp_pf96x2_5_frame0
     32  678e		       4c 70 b8 	      jmp	pf96x2_5_frame1
     33  6791				   jmp_pf96x2_5_frame0
     34  6791		       4c 94 b7 	      jmp	pf96x2_5_frame0
     35  6794
     36  6794				   pf96x2_5_frame0
     37  6794							;postion P0 and P1
     38  6794		       85 02		      sta	WSYNC
     39  6796		       a9 e0		      lda	#%11100000
     40  6798		       85 20		      sta	HMP0
     41  679a		       a9 10		      lda	#%00010000
     42  679c		       85 21		      sta	HMP1
     43  679e		       85 02		      sta	WSYNC
      0  67a0					      sleep	28
      1  67a0				   .CYCLES    SET	28
      2  67a0
      3  67a0				  -	      IF	.CYCLES < 2
      4  67a0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  67a0				  -	      ERR
      6  67a0					      ENDIF
      7  67a0
      8  67a0				  -	      IF	.CYCLES & 1
      9  67a0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  67a0				  -	      nop	0
     11  67a0				  -	      ELSE
     12  67a0				  -	      bit	VSYNC
     13  67a0				  -	      ENDIF
     14  67a0				  -.CYCLES    SET	.CYCLES - 3
     15  67a0					      ENDIF
     16  67a0
     17  67a0					      REPEAT	.CYCLES / 2
     18  67a0		       ea		      nop
     17  67a0					      REPEND
     18  67a1		       ea		      nop
     17  67a1					      REPEND
     18  67a2		       ea		      nop
     17  67a2					      REPEND
     18  67a3		       ea		      nop
     17  67a3					      REPEND
     18  67a4		       ea		      nop
     17  67a4					      REPEND
     18  67a5		       ea		      nop
     17  67a5					      REPEND
     18  67a6		       ea		      nop
     17  67a6					      REPEND
     18  67a7		       ea		      nop
     17  67a7					      REPEND
     18  67a8		       ea		      nop
     17  67a8					      REPEND
     18  67a9		       ea		      nop
     17  67a9					      REPEND
     18  67aa		       ea		      nop
     17  67aa					      REPEND
     18  67ab		       ea		      nop
     17  67ab					      REPEND
     18  67ac		       ea		      nop
     17  67ac					      REPEND
     18  67ad		       ea		      nop
     19  67ae					      REPEND
     45  67ae		       85 10		      sta	RESP0
      0  67b0					      sleep	14
      1  67b0				   .CYCLES    SET	14
      2  67b0
      3  67b0				  -	      IF	.CYCLES < 2
      4  67b0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  67b0				  -	      ERR
      6  67b0					      ENDIF
      7  67b0
      8  67b0				  -	      IF	.CYCLES & 1
      9  67b0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  67b0				  -	      nop	0
     11  67b0				  -	      ELSE
     12  67b0				  -	      bit	VSYNC
     13  67b0				  -	      ENDIF
     14  67b0				  -.CYCLES    SET	.CYCLES - 3
     15  67b0					      ENDIF
     16  67b0
     17  67b0					      REPEAT	.CYCLES / 2
     18  67b0		       ea		      nop
     17  67b0					      REPEND
     18  67b1		       ea		      nop
     17  67b1					      REPEND
     18  67b2		       ea		      nop
     17  67b2					      REPEND
     18  67b3		       ea		      nop
     17  67b3					      REPEND
     18  67b4		       ea		      nop
     17  67b4					      REPEND
     18  67b5		       ea		      nop
     17  67b5					      REPEND
     18  67b6		       ea		      nop
     19  67b7					      REPEND
     47  67b7		       85 11		      sta	RESP1
     48  67b9		       85 02		      sta	WSYNC
     49  67bb		       85 2a		      sta	HMOVE
     50  67bd
     51  67bd		       85 02		      sta	WSYNC
     52  67bf		       85 2b		      sta	HMCLR
     53  67c1		       85 02		      sta	WSYNC
     54  67c3
      0  67c3					      sleep	4
      1  67c3				   .CYCLES    SET	4
      2  67c3
      3  67c3				  -	      IF	.CYCLES < 2
      4  67c3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  67c3				  -	      ERR
      6  67c3					      ENDIF
      7  67c3
      8  67c3				  -	      IF	.CYCLES & 1
      9  67c3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  67c3				  -	      nop	0
     11  67c3				  -	      ELSE
     12  67c3				  -	      bit	VSYNC
     13  67c3				  -	      ENDIF
     14  67c3				  -.CYCLES    SET	.CYCLES - 3
     15  67c3					      ENDIF
     16  67c3
     17  67c3					      REPEAT	.CYCLES / 2
     18  67c3		       ea		      nop
     17  67c3					      REPEND
     18  67c4		       ea		      nop
     19  67c5					      REPEND
     56  67c5		       4c 00 b8 	      jmp	pfline_96x2_5_frame0
     57  67c8							;align so our branch doesn't unexpectedly cross a page...
     58  67c8					      if	>. != >[.+$70]
     59  6800		       00 00 00 00*	      align	256
     60  6800					      endif
     61  6800
     62  6800				   pfline_96x2_5_frame0
     63  6800		       a9 80		      lda	#$80	;2
     64  6802		       85 20		      sta	HMP0	;3
     65  6804		       85 21		      sta	HMP1	;3
     66  6806
     67  6806		       b9 e0 bd 	      lda	bmp_96x2_5_06,y	;4
     68  6809		       85 1c		      sta	GRP1	;3
     69  680b
     70  680b		       b9 c2 bd 	      lda	bmp_96x2_5_00,y
     71  680e		       85 1b		      sta	GRP0
     72  6810		       b9 cc bd 	      lda	bmp_96x2_5_02,y
     73  6813		       85 1b		      sta	GRP0
     74  6815		       b9 d6 bd 	      lda	bmp_96x2_5_04,y
     75  6818		       85 1b		      sta	GRP0
     76  681a
      0  681a					      sleep	2
      1  681a				   .CYCLES    SET	2
      2  681a
      3  681a				  -	      IF	.CYCLES < 2
      4  681a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  681a				  -	      ERR
      6  681a					      ENDIF
      7  681a
      8  681a				  -	      IF	.CYCLES & 1
      9  681a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  681a				  -	      nop	0
     11  681a				  -	      ELSE
     12  681a				  -	      bit	VSYNC
     13  681a				  -	      ENDIF
     14  681a				  -.CYCLES    SET	.CYCLES - 3
     15  681a					      ENDIF
     16  681a
     17  681a					      REPEAT	.CYCLES / 2
     18  681a		       ea		      nop
     19  681b					      REPEND
     78  681b
     79  681b		       b9 ea bd 	      lda	bmp_96x2_5_08,y
     80  681e		       85 1c		      sta	GRP1
     81  6820		       b9 f4 bd 	      lda	bmp_96x2_5_10,y
     82  6823		       85 1c		      sta	GRP1
     83  6825
     84  6825		       b9 c7 bd 	      lda	bmp_96x2_5_01,y
     85  6828		       85 1b		      sta	GRP0
     86  682a
      0  682a					      sleep	8
      1  682a				   .CYCLES    SET	8
      2  682a
      3  682a				  -	      IF	.CYCLES < 2
      4  682a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  682a				  -	      ERR
      6  682a					      ENDIF
      7  682a
      8  682a				  -	      IF	.CYCLES & 1
      9  682a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  682a				  -	      nop	0
     11  682a				  -	      ELSE
     12  682a				  -	      bit	VSYNC
     13  682a				  -	      ENDIF
     14  682a				  -.CYCLES    SET	.CYCLES - 3
     15  682a					      ENDIF
     16  682a
     17  682a					      REPEAT	.CYCLES / 2
     18  682a		       ea		      nop
     17  682a					      REPEND
     18  682b		       ea		      nop
     17  682b					      REPEND
     18  682c		       ea		      nop
     17  682c					      REPEND
     18  682d		       ea		      nop
     19  682e					      REPEND
     88  682e
     89  682e							;sta WSYNC	;=0
     90  682e		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  6830
     92  6830		       b9 bc bd 	      lda	bmp_96x2_5_colors-1,y	;4 - get the title color early and store it for later
     93  6833				  -	      ifconst	bmp_96x2_5_fade
     94  6833				  -	      and	bmp_96x2_5_fade
     95  6833					      else
      0  6833					      sleep	3
      1  6833				   .CYCLES    SET	3
      2  6833
      3  6833				  -	      IF	.CYCLES < 2
      4  6833				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6833				  -	      ERR
      6  6833					      ENDIF
      7  6833
      8  6833					      IF	.CYCLES & 1
      9  6833					      IFNCONST	NO_ILLEGAL_OPCODES
     10  6833		       04 00		      nop	0
     11  6835				  -	      ELSE
     12  6835				  -	      bit	VSYNC
     13  6835					      ENDIF
     14  6835				   .CYCLES    SET	.CYCLES - 3
     15  6835					      ENDIF
     16  6835
     17  6835				  -	      REPEAT	.CYCLES / 2
     18  6835				  -	      nop
     19  6835					      REPEND
     97  6835					      endif
     98  6835		       aa		      tax
     99  6836
    100  6836		       a9 00		      lda	#0	;2
    101  6838		       85 20		      sta	HMP0	;3
    102  683a		       85 21		      sta	HMP1	;3
    103  683c
      0  683c					      sleep	7
      1  683c				   .CYCLES    SET	7
      2  683c
      3  683c				  -	      IF	.CYCLES < 2
      4  683c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  683c				  -	      ERR
      6  683c					      ENDIF
      7  683c
      8  683c					      IF	.CYCLES & 1
      9  683c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  683c		       04 00		      nop	0
     11  683e				  -	      ELSE
     12  683e				  -	      bit	VSYNC
     13  683e					      ENDIF
     14  683e				   .CYCLES    SET	.CYCLES - 3
     15  683e					      ENDIF
     16  683e
     17  683e					      REPEAT	.CYCLES / 2
     18  683e		       ea		      nop
     17  683e					      REPEND
     18  683f		       ea		      nop
     19  6840					      REPEND
    105  6840
    106  6840		       b9 e5 bd 	      lda	bmp_96x2_5_07,y
    107  6843		       85 1c		      sta	GRP1
    108  6845
    109  6845		       b9 d1 bd 	      lda	bmp_96x2_5_03,y	;5
    110  6848		       85 1b		      sta	GRP0	;3 =  8
    111  684a		       b9 db bd 	      lda	bmp_96x2_5_05,y	;5
    112  684d		       85 1b		      sta	GRP0	;3 =  8
    113  684f
      0  684f					      sleep	2
      1  684f				   .CYCLES    SET	2
      2  684f
      3  684f				  -	      IF	.CYCLES < 2
      4  684f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  684f				  -	      ERR
      6  684f					      ENDIF
      7  684f
      8  684f				  -	      IF	.CYCLES & 1
      9  684f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  684f				  -	      nop	0
     11  684f				  -	      ELSE
     12  684f				  -	      bit	VSYNC
     13  684f				  -	      ENDIF
     14  684f				  -.CYCLES    SET	.CYCLES - 3
     15  684f					      ENDIF
     16  684f
     17  684f					      REPEAT	.CYCLES / 2
     18  684f		       ea		      nop
     19  6850					      REPEND
    115  6850
    116  6850		       b9 ef bd 	      lda	bmp_96x2_5_09,y	;5
    117  6853		       85 1c		      sta	GRP1	;3 =  8
    118  6855		       b9 f9 bd 	      lda	bmp_96x2_5_11,y	;5
    119  6858		       85 1c		      sta	GRP1	;3 =  8
    120  685a
      0  685a					      sleep	2
      1  685a				   .CYCLES    SET	2
      2  685a
      3  685a				  -	      IF	.CYCLES < 2
      4  685a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  685a				  -	      ERR
      6  685a					      ENDIF
      7  685a
      8  685a				  -	      IF	.CYCLES & 1
      9  685a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  685a				  -	      nop	0
     11  685a				  -	      ELSE
     12  685a				  -	      bit	VSYNC
     13  685a				  -	      ENDIF
     14  685a				  -.CYCLES    SET	.CYCLES - 3
     15  685a					      ENDIF
     16  685a
     17  685a					      REPEAT	.CYCLES / 2
     18  685a		       ea		      nop
     19  685b					      REPEND
    122  685b		       86 07		      stx	COLUP1
    123  685d		       86 06		      stx	COLUP0
    124  685f
    125  685f
    126  685f		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  6861					      sleep	2
      1  6861				   .CYCLES    SET	2
      2  6861
      3  6861				  -	      IF	.CYCLES < 2
      4  6861				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6861				  -	      ERR
      6  6861					      ENDIF
      7  6861
      8  6861				  -	      IF	.CYCLES & 1
      9  6861				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6861				  -	      nop	0
     11  6861				  -	      ELSE
     12  6861				  -	      bit	VSYNC
     13  6861				  -	      ENDIF
     14  6861				  -.CYCLES    SET	.CYCLES - 3
     15  6861					      ENDIF
     16  6861
     17  6861					      REPEAT	.CYCLES / 2
     18  6861		       ea		      nop
     19  6862					      REPEND
    128  6862		       88		      dey
    129  6863
    130  6863		       c4 cb		      cpy	temp1	;3
    131  6865		       d0 99		      bne	pfline_96x2_5_frame0	;2/3
    132  6867
    133  6867				   pf96x2_5_0codeend
    134  6867							;echo "critical code #1 in 96x2_5 is ",(pf96x2_5_0codeend-pfline_96x2_5_frame0), " bytes long."
    135  6867
    136  6867		       a9 00		      lda	#0
    137  6869		       85 1b		      sta	GRP0
    138  686b		       85 1c		      sta	GRP1
    139  686d		       4c 6e b9 	      jmp	pfdone_96x2_5
    140  6870
    141  6870
    142  6870				   pf96x2_5_frame1
    143  6870
    144  6870							;postion P0 and P1
    145  6870		       85 02		      sta	WSYNC
    146  6872		       a9 20		      lda	#%00100000
    147  6874		       85 20		      sta	HMP0
    148  6876		       a9 00		      lda	#0
    149  6878		       a9 f0		      lda	#%11110000
    150  687a		       85 21		      sta	HMP1
    151  687c		       85 02		      sta	WSYNC
      0  687e					      sleep	32
      1  687e				   .CYCLES    SET	32
      2  687e
      3  687e				  -	      IF	.CYCLES < 2
      4  687e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  687e				  -	      ERR
      6  687e					      ENDIF
      7  687e
      8  687e				  -	      IF	.CYCLES & 1
      9  687e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  687e				  -	      nop	0
     11  687e				  -	      ELSE
     12  687e				  -	      bit	VSYNC
     13  687e				  -	      ENDIF
     14  687e				  -.CYCLES    SET	.CYCLES - 3
     15  687e					      ENDIF
     16  687e
     17  687e					      REPEAT	.CYCLES / 2
     18  687e		       ea		      nop
     17  687e					      REPEND
     18  687f		       ea		      nop
     17  687f					      REPEND
     18  6880		       ea		      nop
     17  6880					      REPEND
     18  6881		       ea		      nop
     17  6881					      REPEND
     18  6882		       ea		      nop
     17  6882					      REPEND
     18  6883		       ea		      nop
     17  6883					      REPEND
     18  6884		       ea		      nop
     17  6884					      REPEND
     18  6885		       ea		      nop
     17  6885					      REPEND
     18  6886		       ea		      nop
     17  6886					      REPEND
     18  6887		       ea		      nop
     17  6887					      REPEND
     18  6888		       ea		      nop
     17  6888					      REPEND
     18  6889		       ea		      nop
     17  6889					      REPEND
     18  688a		       ea		      nop
     17  688a					      REPEND
     18  688b		       ea		      nop
     17  688b					      REPEND
     18  688c		       ea		      nop
     17  688c					      REPEND
     18  688d		       ea		      nop
     19  688e					      REPEND
    153  688e		       85 10		      sta	RESP0
      0  6890					      sleep	12
      1  6890				   .CYCLES    SET	12
      2  6890
      3  6890				  -	      IF	.CYCLES < 2
      4  6890				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6890				  -	      ERR
      6  6890					      ENDIF
      7  6890
      8  6890				  -	      IF	.CYCLES & 1
      9  6890				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6890				  -	      nop	0
     11  6890				  -	      ELSE
     12  6890				  -	      bit	VSYNC
     13  6890				  -	      ENDIF
     14  6890				  -.CYCLES    SET	.CYCLES - 3
     15  6890					      ENDIF
     16  6890
     17  6890					      REPEAT	.CYCLES / 2
     18  6890		       ea		      nop
     17  6890					      REPEND
     18  6891		       ea		      nop
     17  6891					      REPEND
     18  6892		       ea		      nop
     17  6892					      REPEND
     18  6893		       ea		      nop
     17  6893					      REPEND
     18  6894		       ea		      nop
     17  6894					      REPEND
     18  6895		       ea		      nop
     19  6896					      REPEND
    155  6896		       85 11		      sta	RESP1
    156  6898		       85 02		      sta	WSYNC
    157  689a		       85 2a		      sta	HMOVE
    158  689c
    159  689c		       85 02		      sta	WSYNC
    160  689e		       85 2b		      sta	HMCLR
    161  68a0
    162  68a0
    163  68a0
    164  68a0		       85 02		      sta	WSYNC
      0  68a2					      sleep	3
      1  68a2				   .CYCLES    SET	3
      2  68a2
      3  68a2				  -	      IF	.CYCLES < 2
      4  68a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  68a2				  -	      ERR
      6  68a2					      ENDIF
      7  68a2
      8  68a2					      IF	.CYCLES & 1
      9  68a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  68a2		       04 00		      nop	0
     11  68a4				  -	      ELSE
     12  68a4				  -	      bit	VSYNC
     13  68a4					      ENDIF
     14  68a4				   .CYCLES    SET	.CYCLES - 3
     15  68a4					      ENDIF
     16  68a4
     17  68a4				  -	      REPEAT	.CYCLES / 2
     18  68a4				  -	      nop
     19  68a4					      REPEND
    166  68a4		       4c 00 b9 	      jmp	pfline_96x2_5_frame1
    167  68a7
    168  68a7							;align so our branch doesn't unexpectedly cross a page...
    169  68a7					      if	>. != >[.+$70]
    170  6900		       00 00 00 00*	      align	256
    171  6900					      endif
    172  6900
    173  6900				   pfline_96x2_5_frame1
    174  6900
    175  6900		       85 2a		      sta	HMOVE
    176  6902
    177  6902		       b9 e5 bd 	      lda	bmp_96x2_5_07,y	;4
    178  6905		       85 1c		      sta	GRP1	;3
    179  6907
    180  6907		       a9 00		      lda	#$0	;2
    181  6909		       85 20		      sta	HMP0	;3
    182  690b		       85 21		      sta	HMP1	;3
    183  690d
    184  690d		       b9 c7 bd 	      lda	bmp_96x2_5_01,y
    185  6910		       8d 1b 00 	      sta.w	GRP0
    186  6913		       b9 d1 bd 	      lda	bmp_96x2_5_03,y
    187  6916		       85 1b		      sta	GRP0
    188  6918		       b9 db bd 	      lda	bmp_96x2_5_05,y
    189  691b		       85 1b		      sta	GRP0
    190  691d
      0  691d					      sleep	2
      1  691d				   .CYCLES    SET	2
      2  691d
      3  691d				  -	      IF	.CYCLES < 2
      4  691d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  691d				  -	      ERR
      6  691d					      ENDIF
      7  691d
      8  691d				  -	      IF	.CYCLES & 1
      9  691d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  691d				  -	      nop	0
     11  691d				  -	      ELSE
     12  691d				  -	      bit	VSYNC
     13  691d				  -	      ENDIF
     14  691d				  -.CYCLES    SET	.CYCLES - 3
     15  691d					      ENDIF
     16  691d
     17  691d					      REPEAT	.CYCLES / 2
     18  691d		       ea		      nop
     19  691e					      REPEND
    192  691e
    193  691e		       b9 ef bd 	      lda	bmp_96x2_5_09,y
    194  6921		       85 1c		      sta	GRP1
    195  6923		       b9 f9 bd 	      lda	bmp_96x2_5_11,y
    196  6926		       85 1c		      sta	GRP1
    197  6928
    198  6928		       b9 c2 bd 	      lda	bmp_96x2_5_00,y
    199  692b		       85 1b		      sta	GRP0
    200  692d
    201  692d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    202  6930
    203  6930							;sta WSYNC	;=0 -----------------------------------------
    204  6930
    205  6930		       b9 e0 bd 	      lda	bmp_96x2_5_06,y
    206  6933		       85 1c		      sta	GRP1
    207  6935
      0  6935					      sleep	8
      1  6935				   .CYCLES    SET	8
      2  6935
      3  6935				  -	      IF	.CYCLES < 2
      4  6935				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6935				  -	      ERR
      6  6935					      ENDIF
      7  6935
      8  6935				  -	      IF	.CYCLES & 1
      9  6935				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6935				  -	      nop	0
     11  6935				  -	      ELSE
     12  6935				  -	      bit	VSYNC
     13  6935				  -	      ENDIF
     14  6935				  -.CYCLES    SET	.CYCLES - 3
     15  6935					      ENDIF
     16  6935
     17  6935					      REPEAT	.CYCLES / 2
     18  6935		       ea		      nop
     17  6935					      REPEND
     18  6936		       ea		      nop
     17  6936					      REPEND
     18  6937		       ea		      nop
     17  6937					      REPEND
     18  6938		       ea		      nop
     19  6939					      REPEND
    209  6939
    210  6939		       b9 bc bd 	      lda	bmp_96x2_5_colors-1,y	;get the title color early and store it for later
    211  693c		       aa		      tax		;2
    212  693d
      0  693d					      sleep	3
      1  693d				   .CYCLES    SET	3
      2  693d
      3  693d				  -	      IF	.CYCLES < 2
      4  693d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  693d				  -	      ERR
      6  693d					      ENDIF
      7  693d
      8  693d					      IF	.CYCLES & 1
      9  693d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  693d		       04 00		      nop	0
     11  693f				  -	      ELSE
     12  693f				  -	      bit	VSYNC
     13  693f					      ENDIF
     14  693f				   .CYCLES    SET	.CYCLES - 3
     15  693f					      ENDIF
     16  693f
     17  693f				  -	      REPEAT	.CYCLES / 2
     18  693f				  -	      nop
     19  693f					      REPEND
    214  693f
    215  693f		       a9 80		      lda	#$80	;2
    216  6941		       85 20		      sta	HMP0	;3
    217  6943		       85 21		      sta	HMP1	;3
    218  6945
    219  6945
    220  6945		       b9 cc bd 	      lda	bmp_96x2_5_02,y	;5
    221  6948		       85 1b		      sta	GRP0	;3 =  8
    222  694a
    223  694a		       b9 d6 bd 	      lda	bmp_96x2_5_04,y	;5
    224  694d		       85 1b		      sta	GRP0	;3 =  8
    225  694f
      0  694f					      sleep	2
      1  694f				   .CYCLES    SET	2
      2  694f
      3  694f				  -	      IF	.CYCLES < 2
      4  694f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  694f				  -	      ERR
      6  694f					      ENDIF
      7  694f
      8  694f				  -	      IF	.CYCLES & 1
      9  694f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  694f				  -	      nop	0
     11  694f				  -	      ELSE
     12  694f				  -	      bit	VSYNC
     13  694f				  -	      ENDIF
     14  694f				  -.CYCLES    SET	.CYCLES - 3
     15  694f					      ENDIF
     16  694f
     17  694f					      REPEAT	.CYCLES / 2
     18  694f		       ea		      nop
     19  6950					      REPEND
    227  6950
    228  6950		       b9 ea bd 	      lda	bmp_96x2_5_08,y	;5
    229  6953		       85 1c		      sta	GRP1	;3 =  8
    230  6955
    231  6955		       b9 f4 bd 	      lda	bmp_96x2_5_10,y	;5
    232  6958		       85 1c		      sta	GRP1	;3 =  8
    233  695a
      0  695a					      sleep	4
      1  695a				   .CYCLES    SET	4
      2  695a
      3  695a				  -	      IF	.CYCLES < 2
      4  695a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  695a				  -	      ERR
      6  695a					      ENDIF
      7  695a
      8  695a				  -	      IF	.CYCLES & 1
      9  695a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  695a				  -	      nop	0
     11  695a				  -	      ELSE
     12  695a				  -	      bit	VSYNC
     13  695a				  -	      ENDIF
     14  695a				  -.CYCLES    SET	.CYCLES - 3
     15  695a					      ENDIF
     16  695a
     17  695a					      REPEAT	.CYCLES / 2
     18  695a		       ea		      nop
     17  695a					      REPEND
     18  695b		       ea		      nop
     19  695c					      REPEND
    235  695c
    236  695c		       88		      dey
    237  695d
    238  695d		       8a		      txa
    239  695e				  -	      ifconst	bmp_96x2_5_fade
    240  695e				  -	      and	bmp_96x2_5_fade
    241  695e					      else
      0  695e					      sleep	3
      1  695e				   .CYCLES    SET	3
      2  695e
      3  695e				  -	      IF	.CYCLES < 2
      4  695e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  695e				  -	      ERR
      6  695e					      ENDIF
      7  695e
      8  695e					      IF	.CYCLES & 1
      9  695e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  695e		       04 00		      nop	0
     11  6960				  -	      ELSE
     12  6960				  -	      bit	VSYNC
     13  6960					      ENDIF
     14  6960				   .CYCLES    SET	.CYCLES - 3
     15  6960					      ENDIF
     16  6960
     17  6960				  -	      REPEAT	.CYCLES / 2
     18  6960				  -	      nop
     19  6960					      REPEND
    243  6960					      endif
    244  6960		       85 07		      sta	COLUP1	;3
    245  6962		       85 06		      sta	COLUP0	;3
    246  6964
    247  6964		       c4 cb		      cpy	temp1	;2
    248  6966		       d0 98		      bne	pfline_96x2_5_frame1	;2/3
    249  6968
    250  6968				   pf96x2_5_1codeend
    251  6968							;echo "critical code #2 in 96x2_5 is ",(pf96x2_5_1codeend-pfline_96x2_5_frame1), " bytes long."
    252  6968
    253  6968		       a9 00		      lda	#0
    254  696a		       85 1b		      sta	GRP0
    255  696c		       85 1c		      sta	GRP1
    256  696e
    257  696e				   pfdone_96x2_5
    258  696e		       85 02		      sta	WSYNC	; debug
    259  6970
    260  6970		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    165  6971					      endif		;mk_96x2_5_on
    166  6971
    167  6971				  -	      ifconst	mk_96x2_6_on
    168  6971				  -	      include	"titlescreen/asm/96x2_6_kernel.asm"
    169  6971					      endif		;mk_96x2_6_on
    170  6971
    171  6971				  -	      ifconst	mk_96x2_7_on
    172  6971				  -	      include	"titlescreen/asm/96x2_7_kernel.asm"
    173  6971					      endif		;mk_96x2_7_on
    174  6971
    175  6971				  -	      ifconst	mk_96x2_8_on
    176  6971				  -	      include	"titlescreen/asm/96x2_8_kernel.asm"
    177  6971					      endif		;mk_96x2_8_on
    178  6971
    179  6971					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 3
      0  6971					      include	"titlescreen/asm/score_kernel.asm"
      1  6971							; The batari Basic score kernel
      2  6971							; This minikernel is not under the same license as the rest of the
      3  6971							; titlescreen code. Refer to the bB license before you use this in
      4  6971							; a non-bB program.
      5  6971
      6  6971				   draw_score_display
      7  6971
      8  6971		       a7 b8		      lax	score+0
      9  6973		       20 43 ba 	      jsr	miniscorepointerset
     10  6976		       84 b3		      sty	scorepointers+8
     11  6978		       86 ab		      stx	scorepointers+0
     12  697a		       a7 b9		      lax	score+1
     13  697c		       20 43 ba 	      jsr	miniscorepointerset
     14  697f		       84 af		      sty	scorepointers+4
     15  6981		       86 b1		      stx	scorepointers+6
     16  6983		       a7 ba		      lax	score+2
     17  6985		       20 43 ba 	      jsr	miniscorepointerset
     18  6988		       84 b5		      sty	scorepointers+10
     19  698a		       86 ad		      stx	scorepointers+2
     20  698c
     21  698c		       85 2b		      sta	HMCLR
     22  698e		       ba		      tsx
     23  698f		       86 f6		      stx	stack1
     24  6991							;ldx #$20
     25  6991		       a2 60		      ldx	#$60
     26  6993		       86 20		      stx	HMP0
     27  6995
     28  6995		       a2 00		      ldx	#0
     29  6997		       85 02		      sta	WSYNC	;   0
     30  6999		       86 1b		      STx	GRP0	; 3 3
     31  699b		       86 1c		      STx	GRP1	; 3 6 seems to be needed because of vdel
     32  699d
      0  699d					      sleep	7	; 7 13
      1  699d				   .CYCLES    SET	7
      2  699d
      3  699d				  -	      IF	.CYCLES < 2
      4  699d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  699d				  -	      ERR
      6  699d					      ENDIF
      7  699d
      8  699d					      IF	.CYCLES & 1
      9  699d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  699d		       04 00		      nop	0
     11  699f				  -	      ELSE
     12  699f				  -	      bit	VSYNC
     13  699f					      ENDIF
     14  699f				   .CYCLES    SET	.CYCLES - 3
     15  699f					      ENDIF
     16  699f
     17  699f					      REPEAT	.CYCLES / 2
     18  699f		       ea		      nop
     17  699f					      REPEND
     18  69a0		       ea		      nop
     19  69a1					      REPEND
     34  69a1
     35  69a1		       a9 be		      lda	#>miniscoretable	; 2 15
     36  69a3		       95 ac		      sta	scorepointers+1,x	; 4 19
     37  69a5		       95 ae		      sta	scorepointers+3,x	; 4 23
     38  69a7		       95 b0		      sta	scorepointers+5,x	; 4 27
     39  69a9		       95 b2		      sta	scorepointers+7,x	; 4 31
     40  69ab		       95 b4		      sta	scorepointers+9,x	; 4 35
     41  69ad		       95 b6		      sta	scorepointers+11,x	; 4 39
     42  69af
     43  69af		       a0 07		      LDY	#7	; 2 41
     44  69b1		       85 10		      STA	RESP0	; 3 44
     45  69b3		       85 11		      STA	RESP1	; 3 47
     46  69b5
     47  69b5		       a9 03		      LDA	#$03	; 2 49
     48  69b7		       85 04		      STA	NUSIZ0	; 3 52
     49  69b9		       95 05		      STA	NUSIZ1,x	; 4 56
     50  69bb		       85 25		      STA	VDELP0	; 3 59
     51  69bd		       85 26		      STA	VDELP1	; 3 62
     52  69bf							;LDA #$30		; 2 64
     53  69bf		       a9 70		      LDA	#$70	; 2 64
     54  69c1		       85 21		      STA	HMP1	; 3 67
     55  69c3		       a5 eb		      LDA	scorecolor	; 3 70
     56  69c5		       85 2a		      STA	HMOVE	; cycle 73 ?
     57  69c7				  -	      ifconst	score_kernel_fade
     58  69c7				  -	      and	score_kernel_fade
     59  69c7					      endif
     60  69c7
     61  69c7		       85 06		      STA	COLUP0
     62  69c9		       85 07		      STA	COLUP1
     63  69cb				  -	      ifconst	scorefade
     64  69cb				  -	      STA	stack2	; scorefade
     65  69cb					      endif
     66  69cb		       b1 ab		      lda	(scorepointers),y
     67  69cd		       85 1b		      sta	GRP0
     68  69cf		       b1 b3		      lda	(scorepointers+8),y
     69  69d1		       85 02		      sta	WSYNC
      0  69d3					      sleep	2
      1  69d3				   .CYCLES    SET	2
      2  69d3
      3  69d3				  -	      IF	.CYCLES < 2
      4  69d3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  69d3				  -	      ERR
      6  69d3					      ENDIF
      7  69d3
      8  69d3				  -	      IF	.CYCLES & 1
      9  69d3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  69d3				  -	      nop	0
     11  69d3				  -	      ELSE
     12  69d3				  -	      bit	VSYNC
     13  69d3				  -	      ENDIF
     14  69d3				  -.CYCLES    SET	.CYCLES - 3
     15  69d3					      ENDIF
     16  69d3
     17  69d3					      REPEAT	.CYCLES / 2
     18  69d3		       ea		      nop
     19  69d4					      REPEND
     71  69d4		       4c 0b ba 	      jmp	beginscoreloop
     72  69d7
     73  69d7					      if	((<*)>$28)
     74  6a00		       00 00 00 00*	      align	256	; kludge that potentially wastes space!  should be fixed!
     75  6a00					      endif
     76  6a00
     77  6a00				   scoreloop2
     78  6a00				  -	      ifconst	scorefade
     79  6a00				  -	      lda	stack2
     80  6a00				  -	      sta	COLUP0
     81  6a00				  -	      sta	COLUP1
     82  6a00					      else
      0  6a00					      sleep	9
      1  6a00				   .CYCLES    SET	9
      2  6a00
      3  6a00				  -	      IF	.CYCLES < 2
      4  6a00				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6a00				  -	      ERR
      6  6a00					      ENDIF
      7  6a00
      8  6a00					      IF	.CYCLES & 1
      9  6a00					      IFNCONST	NO_ILLEGAL_OPCODES
     10  6a00		       04 00		      nop	0
     11  6a02				  -	      ELSE
     12  6a02				  -	      bit	VSYNC
     13  6a02					      ENDIF
     14  6a02				   .CYCLES    SET	.CYCLES - 3
     15  6a02					      ENDIF
     16  6a02
     17  6a02					      REPEAT	.CYCLES / 2
     18  6a02		       ea		      nop
     17  6a02					      REPEND
     18  6a03		       ea		      nop
     17  6a03					      REPEND
     18  6a04		       ea		      nop
     19  6a05					      REPEND
     84  6a05					      endif
     85  6a05		       b1 ab		      lda	(scorepointers),y	;+5  68  204
     86  6a07		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     87  6a09		       b1 b3		      lda	(scorepointers+$8),y	;+5   5   15
     88  6a0b							; cycle 0
     89  6a0b				   beginscoreloop
     90  6a0b		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
     91  6a0d		       b1 b1		      lda	(scorepointers+$6),y	;+5  13   39
     92  6a0f		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
     93  6a11		       b3 ad		      lax	(scorepointers+$2),y	;+5  29   87
     94  6a13		       9a		      txs
     95  6a14		       b3 af		      lax	(scorepointers+$4),y	;+5  36  108
     96  6a16
     97  6a16				  -	      ifconst	scorefade
     98  6a16				  -	      dec	stack2
     99  6a16					      else
      0  6a16					      sleep	5
      1  6a16				   .CYCLES    SET	5
      2  6a16
      3  6a16				  -	      IF	.CYCLES < 2
      4  6a16				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6a16				  -	      ERR
      6  6a16					      ENDIF
      7  6a16
      8  6a16					      IF	.CYCLES & 1
      9  6a16					      IFNCONST	NO_ILLEGAL_OPCODES
     10  6a16		       04 00		      nop	0
     11  6a18				  -	      ELSE
     12  6a18				  -	      bit	VSYNC
     13  6a18					      ENDIF
     14  6a18				   .CYCLES    SET	.CYCLES - 3
     15  6a18					      ENDIF
     16  6a18
     17  6a18					      REPEAT	.CYCLES / 2
     18  6a18		       ea		      nop
     19  6a19					      REPEND
    101  6a19					      endif
      0  6a19					      sleep	2
      1  6a19				   .CYCLES    SET	2
      2  6a19
      3  6a19				  -	      IF	.CYCLES < 2
      4  6a19				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6a19				  -	      ERR
      6  6a19					      ENDIF
      7  6a19
      8  6a19				  -	      IF	.CYCLES & 1
      9  6a19				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6a19				  -	      nop	0
     11  6a19				  -	      ELSE
     12  6a19				  -	      bit	VSYNC
     13  6a19				  -	      ENDIF
     14  6a19				  -.CYCLES    SET	.CYCLES - 3
     15  6a19					      ENDIF
     16  6a19
     17  6a19					      REPEAT	.CYCLES / 2
     18  6a19		       ea		      nop
     19  6a1a					      REPEND
    103  6a1a
    104  6a1a		       b1 b5		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    105  6a1c		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    106  6a1e		       ba		      tsx
    107  6a1f		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    108  6a21		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    109  6a23
    110  6a23		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    111  6a25		       88		      dey
    112  6a26		       10 d8		      bpl	scoreloop2	;+2  60  180
    113  6a28				   scoreloop2end
    114  6a28
    115  6a28							;echo "critical size: ",(scoreloop2end-scoreloop2)
    116  6a28
    117  6a28
    118  6a28		       a6 f6		      ldx	stack1
    119  6a2a		       9a		      txs
    120  6a2b
    121  6a2b		       a9 00		      LDA	#0
    122  6a2d		       85 0e		      sta	PF1
    123  6a2f		       85 1b		      STA	GRP0
    124  6a31		       85 1c		      STA	GRP1
    125  6a33		       85 25		      STA	VDELP0
    126  6a35		       85 26		      STA	VDELP1
    127  6a37		       85 04		      STA	NUSIZ0
    128  6a39		       85 05		      STA	NUSIZ1
    129  6a3b
    130  6a3b							; clear out the score pointers in case they're stolen DPC variables...
    131  6a3b		       a2 0b		      ldx	#11
    132  6a3d				   clearscoreploop
    133  6a3d		       95 ab		      sta	scorepointers,x
    134  6a3f		       ca		      dex
    135  6a40		       10 fb		      bpl	clearscoreploop
    136  6a42
    137  6a42
    138  6a42							;;ldy temp3
    139  6a42							;ldy scorepointers+8
    140  6a42							;sty scorepointers+3
    141  6a42
    142  6a42							;;ldy temp5
    143  6a42							;ldy scorepointers+10
    144  6a42							;sty scorepointers+5
    145  6a42		       60		      rts
    146  6a43
    147  6a43				   miniscorepointerset
    148  6a43		       29 0f		      and	#$0F
    149  6a45		       0a		      asl
    150  6a46		       0a		      asl
    151  6a47		       0a		      asl
    152  6a48		       69 00		      adc	#<miniscoretable
    153  6a4a		       a8		      tay
    154  6a4b		       8a		      txa
    155  6a4c		       29 f0		      and	#$F0
    156  6a4e		       4a		      lsr
    157  6a4f		       69 00		      adc	#<miniscoretable
    158  6a51		       aa		      tax
    159  6a52		       60		      rts
    160  6a53
------- FILE titlescreen/asm/titlescreen.asm
    181  6a53					      endif		;mk_score_on
    182  6a53
    183  6a53					      ifconst	mk_gameselect_on
------- FILE titlescreen/asm/gameselect_kernel.asm LEVEL 3 PASS 3
      0  6a53					      include	"titlescreen/asm/gameselect_kernel.asm"
      1  6a53
      2  6a53				   draw_gameselect_display
      3  6a53		       a9 00		      lda	#0
      4  6a55		       85 1b		      sta	GRP0
      5  6a57		       85 1c		      sta	GRP1
      6  6a59
      7  6a59		       a0 04		      ldy	#4
      8  6a5b		       84 91		      sty	aux2
      9  6a5d
     10  6a5d		       ad 50 be 	      lda	bmp_gameselect_color
     11  6a60		       85 06		      sta	COLUP0
     12  6a62		       85 07		      sta	COLUP1
     13  6a64
     14  6a64							;change gamenumber to a BCD number and stick it in temp5
     15  6a64		       a5 e5		      lda	gamenumber
     16  6a66		       85 cd		      sta	temp3
     17  6a68		       a9 00		      lda	#0
     18  6a6a		       85 ce		      sta	temp4
     19  6a6c		       a2 08		      ldx	#8
     20  6a6e		       18		      clc
     21  6a6f		       f8		      sed
     22  6a70				   converttobcd
     23  6a70		       06 cd		      asl	temp3
     24  6a72		       a5 ce		      lda	temp4
     25  6a74		       65 ce		      adc	temp4
     26  6a76		       85 ce		      sta	temp4
     27  6a78		       ca		      dex
     28  6a79		       d0 f5		      bne	converttobcd
     29  6a7b		       d8		      cld
     30  6a7c
     31  6a7c		       a5 ce		      lda	temp4
     32  6a7e		       29 0f		      and	#$0f
     33  6a80		       85 cd		      sta	temp3
     34  6a82		       0a		      asl
     35  6a83		       0a		      asl
     36  6a84		       18		      clc
     37  6a85		       65 cd		      adc	temp3	; *5
     38  6a87		       18		      clc
     39  6a88		       69 65		      adc	#<(font_gameselect_img)
     40  6a8a		       85 b5		      sta	scorepointers+10
     41  6a8c
     42  6a8c		       a5 ce		      lda	temp4
     43  6a8e		       29 f0		      and	#$f0
     44  6a90		       4a		      lsr
     45  6a91		       4a		      lsr
     46  6a92		       85 cd		      sta	temp3
     47  6a94		       4a		      lsr
     48  6a95		       4a		      lsr
     49  6a96		       18		      clc
     50  6a97		       65 cd		      adc	temp3	; *5
     51  6a99		       18		      clc
     52  6a9a		       69 65		      adc	#<(font_gameselect_img)
     53  6a9c		       85 b3		      sta	scorepointers+8
     54  6a9e
     55  6a9e
     56  6a9e							;setup score pointers to point at my bitmap slices instead
     57  6a9e		       a9 51		      lda	#<(bmp_gameselect_CHAR0)
     58  6aa0		       85 ab		      sta	scorepointers+0
     59  6aa2		       a9 be		      lda	#>(bmp_gameselect_CHAR0)
     60  6aa4		       85 ac		      sta	scorepointers+1
     61  6aa6		       a9 56		      lda	#<(bmp_gameselect_CHAR1)
     62  6aa8		       85 ad		      sta	scorepointers+2
     63  6aaa		       a9 be		      lda	#>(bmp_gameselect_CHAR1)
     64  6aac		       85 ae		      sta	scorepointers+3
     65  6aae		       a9 5b		      lda	#<(bmp_gameselect_CHAR2)
     66  6ab0		       85 af		      sta	scorepointers+4
     67  6ab2		       a9 be		      lda	#>(bmp_gameselect_CHAR2)
     68  6ab4		       85 b0		      sta	scorepointers+5
     69  6ab6		       a9 60		      lda	#<(bmp_gameselect_CHAR3)
     70  6ab8		       85 b1		      sta	scorepointers+6
     71  6aba		       a9 be		      lda	#>(bmp_gameselect_CHAR3)
     72  6abc		       85 b2		      sta	scorepointers+7
     73  6abe
     74  6abe		       a9 be		      lda	#>(font_gameselect_img)
     75  6ac0		       85 b4		      sta	scorepointers+9
     76  6ac2
     77  6ac2		       a9 be		      lda	#>(font_gameselect_img)
     78  6ac4		       85 b6		      sta	scorepointers+11
     79  6ac6
     80  6ac6		       4c 5f b1 	      jmp	draw_bmp_48x1_X
------- FILE titlescreen/asm/titlescreen.asm
    185  6ac9					      endif		;mk_gameselect_on
    186  6ac9
    187  6ac9				   PFWAIT
    188  6ac9		       ad 84 02 	      lda	INTIM
    189  6acc		       d0 fb		      bne	PFWAIT
    190  6ace		       85 02		      sta	WSYNC
    191  6ad0
    192  6ad0				   OVERSCAN
    193  6ad0				  -	      ifnconst	overscan_time
    194  6ad0				  -	      lda	#34+128
    195  6ad0					      else
    196  6ad0		       a9 a0		      lda	#overscan_time+128-5
    197  6ad2					      endif
    198  6ad2		       8d 96 02 	      sta	TIM64T
    199  6ad5
    200  6ad5							;fix height variables we borrowed, so DPC doesn't crash on drawscreen...
    201  6ad5					      ifconst	player9height
    202  6ad5		       a0 08		      ldy	#8
    203  6ad7		       a9 00		      lda	#0
    204  6ad9		       85 a5		      sta	player0height
    205  6adb				   .playerheightfixloop
    206  6adb		       99 a6 00 	      sta	player1height,y
    207  6ade					      ifconst	_NUSIZ1
    208  6ade		       99 af 00 	      sta	_NUSIZ1,y
    209  6ae1					      endif
    210  6ae1		       88		      dey
    211  6ae2		       10 f7		      bpl	.playerheightfixloop
    212  6ae4					      endif
    213  6ae4
    214  6ae4		       a9 c2		      lda	#%11000010
    215  6ae6		       85 02		      sta	WSYNC
    216  6ae8		       85 01		      sta	VBLANK
      0  6aea					      RETURN
      1  6aea				  -	      ifnconst	bankswitch
      2  6aea				  -	      rts
      3  6aea					      else
      4  6aea		       4c e0 df 	      jmp	BS_return
      5  6aed					      endif
    218  6aed
    219  6aed					      ifconst	mk_48x1_1_on
------- FILE titlescreen/48x1_1_image.asm LEVEL 3 PASS 3
      0  6aed					      include	"titlescreen/48x1_1_image.asm"
      1  6aed
      2  6aed							;*** The height of the displayed data...
      3  6aed		       00 32	   bmp_48x1_1_window =	50
      4  6aed
      5  6aed							;*** The height of the bitmap data. This can be larger than
      6  6aed							;*** the displayed data height, if you're scrolling or animating
      7  6aed							;*** the data...
      8  6aed		       00 32	   bmp_48x1_1_height =	50
      9  6aed
     10  6aed				  -	      ifnconst	bmp_48x1_1_PF1
     11  6aed				  -bmp_48x1_1_PF1
     12  6aed					      endif
     13  6aed		       00		      BYTE.b	%00000000
     14  6aee				  -	      ifnconst	bmp_48x1_1_PF2
     15  6aee				  -bmp_48x1_1_PF2
     16  6aee					      endif
     17  6aee		       00		      BYTE.b	%00000000
     18  6aef				  -	      ifnconst	bmp_48x1_1_background
     19  6aef				  -bmp_48x1_1_background
     20  6aef					      endif
     21  6aef		       c2		      BYTE.b	$c2
     22  6af0
     23  6af0				  -	      ifnconst	bmp_48x1_1_color
     24  6af0				  -bmp_48x1_1_color
     25  6af0					      endif
     26  6af0							; *** this is the bitmap color. If you want to change it in a
     27  6af0							; *** variable instead, dim one in bB called "bmp_48x1_1_color"
     28  6af0		       c6		      .byte.b	$C6
     29  6af1
     30  6af1
     31  6af1					      if	>. != >[.+bmp_48x1_1_height]
     32  6b00		       00 00 00 00*	      align	256
     33  6b00					      endif
     34  6b00
     35  6b00				   bmp_48x1_1_00
     36  6b00							; *** replace this block with your bimap_00 data block...
     37  6b00		       00		      BYTE.b	%00000000
     38  6b01		       00		      BYTE.b	%00000000
     39  6b02		       01		      BYTE.b	%00000001
     40  6b03		       03		      BYTE.b	%00000011
     41  6b04		       07		      BYTE.b	%00000111
     42  6b05		       07		      BYTE.b	%00000111
     43  6b06		       0f		      BYTE.b	%00001111
     44  6b07		       1f		      BYTE.b	%00011111
     45  6b08		       1f		      BYTE.b	%00011111
     46  6b09		       1f		      BYTE.b	%00011111
     47  6b0a		       3f		      BYTE.b	%00111111
     48  6b0b		       3f		      BYTE.b	%00111111
     49  6b0c		       3f		      BYTE.b	%00111111
     50  6b0d		       3f		      BYTE.b	%00111111
     51  6b0e		       7f		      BYTE.b	%01111111
     52  6b0f		       7f		      BYTE.b	%01111111
     53  6b10		       7f		      BYTE.b	%01111111
     54  6b11		       7f		      BYTE.b	%01111111
     55  6b12		       7f		      BYTE.b	%01111111
     56  6b13		       7f		      BYTE.b	%01111111
     57  6b14		       7f		      BYTE.b	%01111111
     58  6b15		       7f		      BYTE.b	%01111111
     59  6b16		       7f		      BYTE.b	%01111111
     60  6b17		       7f		      BYTE.b	%01111111
     61  6b18		       7f		      BYTE.b	%01111111
     62  6b19		       7f		      BYTE.b	%01111111
     63  6b1a		       7f		      BYTE.b	%01111111
     64  6b1b		       3f		      BYTE.b	%00111111
     65  6b1c		       3f		      BYTE.b	%00111111
     66  6b1d		       3f		      BYTE.b	%00111111
     67  6b1e		       3f		      BYTE.b	%00111111
     68  6b1f		       1f		      BYTE.b	%00011111
     69  6b20		       1f		      BYTE.b	%00011111
     70  6b21		       1f		      BYTE.b	%00011111
     71  6b22		       0f		      BYTE.b	%00001111
     72  6b23		       0f		      BYTE.b	%00001111
     73  6b24		       07		      BYTE.b	%00000111
     74  6b25		       03		      BYTE.b	%00000011
     75  6b26		       01		      BYTE.b	%00000001
     76  6b27		       00		      BYTE.b	%00000000
     77  6b28		       00		      BYTE.b	%00000000
     78  6b29		       00		      BYTE.b	%00000000
     79  6b2a		       00		      BYTE.b	%00000000
     80  6b2b		       00		      BYTE.b	%00000000
     81  6b2c		       00		      BYTE.b	%00000000
     82  6b2d		       00		      BYTE.b	%00000000
     83  6b2e		       00		      BYTE.b	%00000000
     84  6b2f		       00		      BYTE.b	%00000000
     85  6b30		       00		      BYTE.b	%00000000
     86  6b31		       00		      BYTE.b	%00000000
     87  6b32
     88  6b32
     89  6b32
     90  6b32				  -	      if	>. != >[.+bmp_48x1_1_height]
     91  6b32				  -	      align	256
     92  6b32					      endif
     93  6b32
     94  6b32
     95  6b32				   bmp_48x1_1_01
     96  6b32							; *** replace this block with your bimap_01 data block...
     97  6b32		       00		      BYTE.b	%00000000
     98  6b33		       20		      BYTE.b	%00100000
     99  6b34		       f8		      BYTE.b	%11111000
    100  6b35		       fc		      BYTE.b	%11111100
    101  6b36		       fe		      BYTE.b	%11111110
    102  6b37		       ff		      BYTE.b	%11111111
    103  6b38		       ff		      BYTE.b	%11111111
    104  6b39		       ff		      BYTE.b	%11111111
    105  6b3a		       ff		      BYTE.b	%11111111
    106  6b3b		       ff		      BYTE.b	%11111111
    107  6b3c		       ff		      BYTE.b	%11111111
    108  6b3d		       ff		      BYTE.b	%11111111
    109  6b3e		       ff		      BYTE.b	%11111111
    110  6b3f		       ff		      BYTE.b	%11111111
    111  6b40		       ff		      BYTE.b	%11111111
    112  6b41		       ff		      BYTE.b	%11111111
    113  6b42		       ff		      BYTE.b	%11111111
    114  6b43		       ff		      BYTE.b	%11111111
    115  6b44		       ff		      BYTE.b	%11111111
    116  6b45		       ff		      BYTE.b	%11111111
    117  6b46		       ff		      BYTE.b	%11111111
    118  6b47		       ff		      BYTE.b	%11111111
    119  6b48		       ff		      BYTE.b	%11111111
    120  6b49		       ff		      BYTE.b	%11111111
    121  6b4a		       ff		      BYTE.b	%11111111
    122  6b4b		       ff		      BYTE.b	%11111111
    123  6b4c		       ff		      BYTE.b	%11111111
    124  6b4d		       ff		      BYTE.b	%11111111
    125  6b4e		       ff		      BYTE.b	%11111111
    126  6b4f		       ff		      BYTE.b	%11111111
    127  6b50		       ff		      BYTE.b	%11111111
    128  6b51		       ff		      BYTE.b	%11111111
    129  6b52		       ff		      BYTE.b	%11111111
    130  6b53		       ff		      BYTE.b	%11111111
    131  6b54		       ff		      BYTE.b	%11111111
    132  6b55		       ff		      BYTE.b	%11111111
    133  6b56		       fe		      BYTE.b	%11111110
    134  6b57		       f8		      BYTE.b	%11111000
    135  6b58		       68		      BYTE.b	%01101000
    136  6b59		       60		      BYTE.b	%01100000
    137  6b5a		       00		      BYTE.b	%00000000
    138  6b5b		       00		      BYTE.b	%00000000
    139  6b5c		       00		      BYTE.b	%00000000
    140  6b5d		       00		      BYTE.b	%00000000
    141  6b5e		       00		      BYTE.b	%00000000
    142  6b5f		       00		      BYTE.b	%00000000
    143  6b60		       00		      BYTE.b	%00000000
    144  6b61		       00		      BYTE.b	%00000000
    145  6b62		       00		      BYTE.b	%00000000
    146  6b63		       00		      BYTE.b	%00000000
    147  6b64
    148  6b64
    149  6b64
    150  6b64				  -	      if	>. != >[.+bmp_48x1_1_height]
    151  6b64				  -	      align	256
    152  6b64					      endif
    153  6b64
    154  6b64
    155  6b64				   bmp_48x1_1_02
    156  6b64							; *** replace this block with your bimap_02 data block...
    157  6b64		       00		      BYTE.b	%00000000
    158  6b65		       00		      BYTE.b	%00000000
    159  6b66		       00		      BYTE.b	%00000000
    160  6b67		       00		      BYTE.b	%00000000
    161  6b68		       00		      BYTE.b	%00000000
    162  6b69		       00		      BYTE.b	%00000000
    163  6b6a		       00		      BYTE.b	%00000000
    164  6b6b		       80		      BYTE.b	%10000000
    165  6b6c		       80		      BYTE.b	%10000000
    166  6b6d		       c0		      BYTE.b	%11000000
    167  6b6e		       c0		      BYTE.b	%11000000
    168  6b6f		       c0		      BYTE.b	%11000000
    169  6b70		       c0		      BYTE.b	%11000000
    170  6b71		       e0		      BYTE.b	%11100000
    171  6b72		       e0		      BYTE.b	%11100000
    172  6b73		       e0		      BYTE.b	%11100000
    173  6b74		       e0		      BYTE.b	%11100000
    174  6b75		       e0		      BYTE.b	%11100000
    175  6b76		       ff		      BYTE.b	%11111111
    176  6b77		       ff		      BYTE.b	%11111111
    177  6b78		       ff		      BYTE.b	%11111111
    178  6b79		       e0		      BYTE.b	%11100000
    179  6b7a		       e0		      BYTE.b	%11100000
    180  6b7b		       e0		      BYTE.b	%11100000
    181  6b7c		       e0		      BYTE.b	%11100000
    182  6b7d		       e0		      BYTE.b	%11100000
    183  6b7e		       e0		      BYTE.b	%11100000
    184  6b7f		       e0		      BYTE.b	%11100000
    185  6b80		       c0		      BYTE.b	%11000000
    186  6b81		       c0		      BYTE.b	%11000000
    187  6b82		       c0		      BYTE.b	%11000000
    188  6b83		       e0		      BYTE.b	%11100000
    189  6b84		       f0		      BYTE.b	%11110000
    190  6b85		       b8		      BYTE.b	%10111000
    191  6b86		       1c		      BYTE.b	%00011100
    192  6b87		       0e		      BYTE.b	%00001110
    193  6b88		       07		      BYTE.b	%00000111
    194  6b89		       03		      BYTE.b	%00000011
    195  6b8a		       01		      BYTE.b	%00000001
    196  6b8b		       01		      BYTE.b	%00000001
    197  6b8c		       01		      BYTE.b	%00000001
    198  6b8d		       01		      BYTE.b	%00000001
    199  6b8e		       01		      BYTE.b	%00000001
    200  6b8f		       00		      BYTE.b	%00000000
    201  6b90		       00		      BYTE.b	%00000000
    202  6b91		       00		      BYTE.b	%00000000
    203  6b92		       00		      BYTE.b	%00000000
    204  6b93		       00		      BYTE.b	%00000000
    205  6b94		       00		      BYTE.b	%00000000
    206  6b95		       00		      BYTE.b	%00000000
    207  6b96
    208  6b96
    209  6b96
    210  6b96				  -	      if	>. != >[.+bmp_48x1_1_height]
    211  6b96				  -	      align	256
    212  6b96					      endif
    213  6b96
    214  6b96
    215  6b96				   bmp_48x1_1_03
    216  6b96							; *** replace this block with your bimap_03 data block...
    217  6b96		       00		      BYTE.b	%00000000
    218  6b97		       00		      BYTE.b	%00000000
    219  6b98		       00		      BYTE.b	%00000000
    220  6b99		       00		      BYTE.b	%00000000
    221  6b9a		       00		      BYTE.b	%00000000
    222  6b9b		       00		      BYTE.b	%00000000
    223  6b9c		       00		      BYTE.b	%00000000
    224  6b9d		       00		      BYTE.b	%00000000
    225  6b9e		       00		      BYTE.b	%00000000
    226  6b9f		       00		      BYTE.b	%00000000
    227  6ba0		       00		      BYTE.b	%00000000
    228  6ba1		       00		      BYTE.b	%00000000
    229  6ba2		       00		      BYTE.b	%00000000
    230  6ba3		       00		      BYTE.b	%00000000
    231  6ba4		       00		      BYTE.b	%00000000
    232  6ba5		       00		      BYTE.b	%00000000
    233  6ba6		       00		      BYTE.b	%00000000
    234  6ba7		       00		      BYTE.b	%00000000
    235  6ba8		       ff		      BYTE.b	%11111111
    236  6ba9		       ff		      BYTE.b	%11111111
    237  6baa		       ff		      BYTE.b	%11111111
    238  6bab		       00		      BYTE.b	%00000000
    239  6bac		       00		      BYTE.b	%00000000
    240  6bad		       00		      BYTE.b	%00000000
    241  6bae		       00		      BYTE.b	%00000000
    242  6baf		       00		      BYTE.b	%00000000
    243  6bb0		       00		      BYTE.b	%00000000
    244  6bb1		       00		      BYTE.b	%00000000
    245  6bb2		       00		      BYTE.b	%00000000
    246  6bb3		       00		      BYTE.b	%00000000
    247  6bb4		       00		      BYTE.b	%00000000
    248  6bb5		       00		      BYTE.b	%00000000
    249  6bb6		       00		      BYTE.b	%00000000
    250  6bb7		       20		      BYTE.b	%00100000
    251  6bb8		       70		      BYTE.b	%01110000
    252  6bb9		       f8		      BYTE.b	%11111000
    253  6bba		       f8		      BYTE.b	%11111000
    254  6bbb		       fc		      BYTE.b	%11111100
    255  6bbc		       fc		      BYTE.b	%11111100
    256  6bbd		       fc		      BYTE.b	%11111100
    257  6bbe		       fc		      BYTE.b	%11111100
    258  6bbf		       fc		      BYTE.b	%11111100
    259  6bc0		       fc		      BYTE.b	%11111100
    260  6bc1		       fc		      BYTE.b	%11111100
    261  6bc2		       f8		      BYTE.b	%11111000
    262  6bc3		       f8		      BYTE.b	%11111000
    263  6bc4		       70		      BYTE.b	%01110000
    264  6bc5		       00		      BYTE.b	%00000000
    265  6bc6		       00		      BYTE.b	%00000000
    266  6bc7		       00		      BYTE.b	%00000000
    267  6bc8
    268  6bc8
    269  6bc8
    270  6bc8				  -	      if	>. != >[.+bmp_48x1_1_height]
    271  6bc8				  -	      align	256
    272  6bc8					      endif
    273  6bc8
    274  6bc8
    275  6bc8				   bmp_48x1_1_04
    276  6bc8							; *** replace this block with your bimap_04 data block...
    277  6bc8		       00		      BYTE.b	%00000000
    278  6bc9		       00		      BYTE.b	%00000000
    279  6bca		       00		      BYTE.b	%00000000
    280  6bcb		       00		      BYTE.b	%00000000
    281  6bcc		       00		      BYTE.b	%00000000
    282  6bcd		       00		      BYTE.b	%00000000
    283  6bce		       03		      BYTE.b	%00000011
    284  6bcf		       07		      BYTE.b	%00000111
    285  6bd0		       0f		      BYTE.b	%00001111
    286  6bd1		       1f		      BYTE.b	%00011111
    287  6bd2		       1f		      BYTE.b	%00011111
    288  6bd3		       3f		      BYTE.b	%00111111
    289  6bd4		       3f		      BYTE.b	%00111111
    290  6bd5		       3f		      BYTE.b	%00111111
    291  6bd6		       3f		      BYTE.b	%00111111
    292  6bd7		       3f		      BYTE.b	%00111111
    293  6bd8		       7f		      BYTE.b	%01111111
    294  6bd9		       7f		      BYTE.b	%01111111
    295  6bda		       ff		      BYTE.b	%11111111
    296  6bdb		       ff		      BYTE.b	%11111111
    297  6bdc		       ff		      BYTE.b	%11111111
    298  6bdd		       7f		      BYTE.b	%01111111
    299  6bde		       7f		      BYTE.b	%01111111
    300  6bdf		       7f		      BYTE.b	%01111111
    301  6be0		       3f		      BYTE.b	%00111111
    302  6be1		       3f		      BYTE.b	%00111111
    303  6be2		       3f		      BYTE.b	%00111111
    304  6be3		       3f		      BYTE.b	%00111111
    305  6be4		       1f		      BYTE.b	%00011111
    306  6be5		       1f		      BYTE.b	%00011111
    307  6be6		       0f		      BYTE.b	%00001111
    308  6be7		       0f		      BYTE.b	%00001111
    309  6be8		       07		      BYTE.b	%00000111
    310  6be9		       03		      BYTE.b	%00000011
    311  6bea		       00		      BYTE.b	%00000000
    312  6beb		       00		      BYTE.b	%00000000
    313  6bec		       00		      BYTE.b	%00000000
    314  6bed		       00		      BYTE.b	%00000000
    315  6bee		       00		      BYTE.b	%00000000
    316  6bef		       00		      BYTE.b	%00000000
    317  6bf0		       00		      BYTE.b	%00000000
    318  6bf1		       00		      BYTE.b	%00000000
    319  6bf2		       00		      BYTE.b	%00000000
    320  6bf3		       00		      BYTE.b	%00000000
    321  6bf4		       00		      BYTE.b	%00000000
    322  6bf5		       00		      BYTE.b	%00000000
    323  6bf6		       00		      BYTE.b	%00000000
    324  6bf7		       00		      BYTE.b	%00000000
    325  6bf8		       00		      BYTE.b	%00000000
    326  6bf9		       00		      BYTE.b	%00000000
    327  6bfa
    328  6bfa
    329  6bfa
    330  6bfa					      if	>. != >[.+bmp_48x1_1_height]
    331  6c00		       00 00 00 00*	      align	256
    332  6c00					      endif
    333  6c00
    334  6c00
    335  6c00				   bmp_48x1_1_05
    336  6c00							; *** replace this block with your bimap_05 data block...
    337  6c00		       00		      BYTE.b	%00000000
    338  6c01		       00		      BYTE.b	%00000000
    339  6c02		       00		      BYTE.b	%00000000
    340  6c03		       00		      BYTE.b	%00000000
    341  6c04		       00		      BYTE.b	%00000000
    342  6c05		       00		      BYTE.b	%00000000
    343  6c06		       e0		      BYTE.b	%11100000
    344  6c07		       f0		      BYTE.b	%11110000
    345  6c08		       f0		      BYTE.b	%11110000
    346  6c09		       f8		      BYTE.b	%11111000
    347  6c0a		       f8		      BYTE.b	%11111000
    348  6c0b		       fc		      BYTE.b	%11111100
    349  6c0c		       fc		      BYTE.b	%11111100
    350  6c0d		       fc		      BYTE.b	%11111100
    351  6c0e		       fe		      BYTE.b	%11111110
    352  6c0f		       fe		      BYTE.b	%11111110
    353  6c10		       fe		      BYTE.b	%11111110
    354  6c11		       fe		      BYTE.b	%11111110
    355  6c12		       fe		      BYTE.b	%11111110
    356  6c13		       fe		      BYTE.b	%11111110
    357  6c14		       fe		      BYTE.b	%11111110
    358  6c15		       fe		      BYTE.b	%11111110
    359  6c16		       fe		      BYTE.b	%11111110
    360  6c17		       fe		      BYTE.b	%11111110
    361  6c18		       fe		      BYTE.b	%11111110
    362  6c19		       fc		      BYTE.b	%11111100
    363  6c1a		       fc		      BYTE.b	%11111100
    364  6c1b		       fc		      BYTE.b	%11111100
    365  6c1c		       fc		      BYTE.b	%11111100
    366  6c1d		       f8		      BYTE.b	%11111000
    367  6c1e		       f8		      BYTE.b	%11111000
    368  6c1f		       f0		      BYTE.b	%11110000
    369  6c20		       e0		      BYTE.b	%11100000
    370  6c21		       c0		      BYTE.b	%11000000
    371  6c22		       00		      BYTE.b	%00000000
    372  6c23		       00		      BYTE.b	%00000000
    373  6c24		       00		      BYTE.b	%00000000
    374  6c25		       00		      BYTE.b	%00000000
    375  6c26		       00		      BYTE.b	%00000000
    376  6c27		       00		      BYTE.b	%00000000
    377  6c28		       00		      BYTE.b	%00000000
    378  6c29		       00		      BYTE.b	%00000000
    379  6c2a		       00		      BYTE.b	%00000000
    380  6c2b		       00		      BYTE.b	%00000000
    381  6c2c		       00		      BYTE.b	%00000000
    382  6c2d		       00		      BYTE.b	%00000000
    383  6c2e		       00		      BYTE.b	%00000000
    384  6c2f		       00		      BYTE.b	%00000000
    385  6c30		       00		      BYTE.b	%00000000
    386  6c31		       00		      BYTE.b	%00000000
    387  6c32
    388  6c32
------- FILE titlescreen/asm/titlescreen.asm
    221  6c32					      endif
    222  6c32				  -	      ifconst	mk_48x1_2_on
    223  6c32				  -	      include	"titlescreen/48x1_2_image.asm"
    224  6c32					      endif
    225  6c32				  -	      ifconst	mk_48x1_3_on
    226  6c32				  -	      include	"titlescreen/48x1_3_image.asm"
    227  6c32					      endif
    228  6c32				  -	      ifconst	mk_48x1_4_on
    229  6c32				  -	      include	"titlescreen/48x1_4_image.asm"
    230  6c32					      endif
    231  6c32				  -	      ifconst	mk_48x1_5_on
    232  6c32				  -	      include	"titlescreen/48x1_5_image.asm"
    233  6c32					      endif
    234  6c32				  -	      ifconst	mk_48x1_6_on
    235  6c32				  -	      include	"titlescreen/48x1_6_image.asm"
    236  6c32					      endif
    237  6c32				  -	      ifconst	mk_48x1_7_on
    238  6c32				  -	      include	"titlescreen/48x1_7_image.asm"
    239  6c32					      endif
    240  6c32				  -	      ifconst	mk_48x1_8_on
    241  6c32				  -	      include	"titlescreen/48x1_8_image.asm"
    242  6c32					      endif
    243  6c32
    244  6c32
    245  6c32				  -	      ifconst	mk_48x2_1_on
    246  6c32				  -	      include	"titlescreen/48x2_1_image.asm"
    247  6c32					      endif
    248  6c32				  -	      ifconst	mk_48x2_2_on
    249  6c32				  -	      include	"titlescreen/48x2_2_image.asm"
    250  6c32					      endif
    251  6c32				  -	      ifconst	mk_48x2_3_on
    252  6c32				  -	      include	"titlescreen/48x2_3_image.asm"
    253  6c32					      endif
    254  6c32				  -	      ifconst	mk_48x2_4_on
    255  6c32				  -	      include	"titlescreen/48x2_4_image.asm"
    256  6c32					      endif
    257  6c32				  -	      ifconst	mk_48x2_5_on
    258  6c32				  -	      include	"titlescreen/48x2_5_image.asm"
    259  6c32					      endif
    260  6c32				  -	      ifconst	mk_48x2_6_on
    261  6c32				  -	      include	"titlescreen/48x2_6_image.asm"
    262  6c32					      endif
    263  6c32				  -	      ifconst	mk_48x2_7_on
    264  6c32				  -	      include	"titlescreen/48x2_7_image.asm"
    265  6c32					      endif
    266  6c32
    267  6c32				  -	      ifconst	mk_48x2_8_on
    268  6c32				  -	      include	"titlescreen/48x2_8_image.asm"
    269  6c32					      endif
    270  6c32
    271  6c32
    272  6c32					      ifconst	mk_96x2_1_on
------- FILE titlescreen/96x2_1_image.asm LEVEL 3 PASS 3
      0  6c32					      include	"titlescreen/96x2_1_image.asm"
      1  6c32
      2  6c32
      3  6c32							;*** The height of the displayed data...
      4  6c32		       00 14	   bmp_96x2_1_window =	20
      5  6c32
      6  6c32							;*** The height of the bitmap data. This can be larger than
      7  6c32							;*** the displayed data height, if you're scrolling or animating
      8  6c32							;*** the data...
      9  6c32		       00 14	   bmp_96x2_1_height =	20
     10  6c32
     11  6c32
     12  6c32				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     13  6c32				  -	      align	256
     14  6c32					      endif
     15  6c32		       00		      BYTE.b	$00	; leave this here!
     16  6c33
     17  6c33
     18  6c33							;*** The color of each line in the bitmap, in reverse order...
     19  6c33				   bmp_96x2_1_colors
     20  6c33		       0e		      .byte.b	$0E
     21  6c34		       40		      .byte.b	$40
     22  6c35		       94		      .byte.b	$94
     23  6c36		       94		      .byte.b	$94
     24  6c37		       94		      .byte.b	$94
     25  6c38		       94		      .byte.b	$94
     26  6c39		       94		      .byte.b	$94
     27  6c3a		       94		      .byte.b	$94
     28  6c3b		       94		      .byte.b	$94
     29  6c3c		       94		      .byte.b	$94
     30  6c3d		       94		      .byte.b	$94
     31  6c3e		       94		      .byte.b	$94
     32  6c3f		       94		      .byte.b	$94
     33  6c40		       94		      .byte.b	$94
     34  6c41		       94		      .byte.b	$94
     35  6c42		       94		      .byte.b	$94
     36  6c43		       94		      .byte.b	$94
     37  6c44		       94		      .byte.b	$94
     38  6c45		       94		      .byte.b	$94
     39  6c46		       94		      .byte.b	$94
     40  6c47
     41  6c47
     42  6c47				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     43  6c47				  -	      align	256
     44  6c47					      endif
     45  6c47
     46  6c47
     47  6c47				   bmp_96x2_1_00
     48  6c47							; *** replace this block with your bimap_00 data block...
     49  6c47		       00		      BYTE.b	%00000000
     50  6c48		       00		      BYTE.b	%00000000
     51  6c49		       00		      BYTE.b	%00000000
     52  6c4a		       00		      BYTE.b	%00000000
     53  6c4b		       00		      BYTE.b	%00000000
     54  6c4c		       00		      BYTE.b	%00000000
     55  6c4d		       00		      BYTE.b	%00000000
     56  6c4e		       00		      BYTE.b	%00000000
     57  6c4f		       00		      BYTE.b	%00000000
     58  6c50		       00		      BYTE.b	%00000000
     59  6c51		       00		      BYTE.b	%00000000
     60  6c52		       00		      BYTE.b	%00000000
     61  6c53		       00		      BYTE.b	%00000000
     62  6c54		       00		      BYTE.b	%00000000
     63  6c55		       00		      BYTE.b	%00000000
     64  6c56		       00		      BYTE.b	%00000000
     65  6c57		       00		      BYTE.b	%00000000
     66  6c58		       00		      BYTE.b	%00000000
     67  6c59		       00		      BYTE.b	%00000000
     68  6c5a		       00		      BYTE.b	%00000000
     69  6c5b
     70  6c5b
     71  6c5b
     72  6c5b				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     73  6c5b				  -	      align	256
     74  6c5b					      endif
     75  6c5b
     76  6c5b
     77  6c5b				   bmp_96x2_1_01
     78  6c5b							; *** replace this block with your bimap_01 data block...
     79  6c5b		       00		      BYTE.b	%00000000
     80  6c5c		       00		      BYTE.b	%00000000
     81  6c5d		       00		      BYTE.b	%00000000
     82  6c5e		       0d		      BYTE.b	%00001101
     83  6c5f		       1d		      BYTE.b	%00011101
     84  6c60		       1d		      BYTE.b	%00011101
     85  6c61		       1c		      BYTE.b	%00011100
     86  6c62		       1c		      BYTE.b	%00011100
     87  6c63		       1c		      BYTE.b	%00011100
     88  6c64		       1d		      BYTE.b	%00011101
     89  6c65		       1d		      BYTE.b	%00011101
     90  6c66		       1c		      BYTE.b	%00011100
     91  6c67		       1c		      BYTE.b	%00011100
     92  6c68		       1c		      BYTE.b	%00011100
     93  6c69		       0f		      BYTE.b	%00001111
     94  6c6a		       0f		      BYTE.b	%00001111
     95  6c6b		       03		      BYTE.b	%00000011
     96  6c6c		       00		      BYTE.b	%00000000
     97  6c6d		       00		      BYTE.b	%00000000
     98  6c6e		       00		      BYTE.b	%00000000
     99  6c6f
    100  6c6f
    101  6c6f
    102  6c6f				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    103  6c6f				  -	      align	256
    104  6c6f					      endif
    105  6c6f
    106  6c6f
    107  6c6f				   bmp_96x2_1_02
    108  6c6f							; *** replace this block with your bimap_02 data block...
    109  6c6f		       00		      BYTE.b	%00000000
    110  6c70		       00		      BYTE.b	%00000000
    111  6c71		       00		      BYTE.b	%00000000
    112  6c72		       e1		      BYTE.b	%11100001
    113  6c73		       f1		      BYTE.b	%11110001
    114  6c74		       f9		      BYTE.b	%11111001
    115  6c75		       39		      BYTE.b	%00111001
    116  6c76		       39		      BYTE.b	%00111001
    117  6c77		       39		      BYTE.b	%00111001
    118  6c78		       f1		      BYTE.b	%11110001
    119  6c79		       e1		      BYTE.b	%11100001
    120  6c7a		       71		      BYTE.b	%01110001
    121  6c7b		       71		      BYTE.b	%01110001
    122  6c7c		       71		      BYTE.b	%01110001
    123  6c7d		       f1		      BYTE.b	%11110001
    124  6c7e		       e0		      BYTE.b	%11100000
    125  6c7f		       c0		      BYTE.b	%11000000
    126  6c80		       00		      BYTE.b	%00000000
    127  6c81		       00		      BYTE.b	%00000000
    128  6c82		       00		      BYTE.b	%00000000
    129  6c83
    130  6c83
    131  6c83
    132  6c83				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    133  6c83				  -	      align	256
    134  6c83					      endif
    135  6c83
    136  6c83
    137  6c83				   bmp_96x2_1_03
    138  6c83							; *** replace this block with your bimap_03 data block...
    139  6c83		       00		      BYTE.b	%00000000
    140  6c84		       00		      BYTE.b	%00000000
    141  6c85		       00		      BYTE.b	%00000000
    142  6c86		       83		      BYTE.b	%10000011
    143  6c87		       83		      BYTE.b	%10000011
    144  6c88		       83		      BYTE.b	%10000011
    145  6c89		       83		      BYTE.b	%10000011
    146  6c8a		       83		      BYTE.b	%10000011
    147  6c8b		       8f		      BYTE.b	%10001111
    148  6c8c		       9e		      BYTE.b	%10011110
    149  6c8d		       de		      BYTE.b	%11011110
    150  6c8e		       c7		      BYTE.b	%11000111
    151  6c8f		       c7		      BYTE.b	%11000111
    152  6c90		       c7		      BYTE.b	%11000111
    153  6c91		       ff		      BYTE.b	%11111111
    154  6c92		       fe		      BYTE.b	%11111110
    155  6c93		       38		      BYTE.b	%00111000
    156  6c94		       00		      BYTE.b	%00000000
    157  6c95		       00		      BYTE.b	%00000000
    158  6c96		       00		      BYTE.b	%00000000
    159  6c97
    160  6c97
    161  6c97
    162  6c97				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    163  6c97				  -	      align	256
    164  6c97					      endif
    165  6c97
    166  6c97
    167  6c97				   bmp_96x2_1_04
    168  6c97							; *** replace this block with your bimap_04 data block...
    169  6c97		       00		      BYTE.b	%00000000
    170  6c98		       00		      BYTE.b	%00000000
    171  6c99		       00		      BYTE.b	%00000000
    172  6c9a		       18		      BYTE.b	%00011000
    173  6c9b		       1c		      BYTE.b	%00011100
    174  6c9c		       1c		      BYTE.b	%00011100
    175  6c9d		       1c		      BYTE.b	%00011100
    176  6c9e		       1c		      BYTE.b	%00011100
    177  6c9f		       1d		      BYTE.b	%00011101
    178  6ca0		       1d		      BYTE.b	%00011101
    179  6ca1		       1c		      BYTE.b	%00011100
    180  6ca2		       1c		      BYTE.b	%00011100
    181  6ca3		       1c		      BYTE.b	%00011100
    182  6ca4		       1c		      BYTE.b	%00011100
    183  6ca5		       1f		      BYTE.b	%00011111
    184  6ca6		       0f		      BYTE.b	%00001111
    185  6ca7		       07		      BYTE.b	%00000111
    186  6ca8		       00		      BYTE.b	%00000000
    187  6ca9		       00		      BYTE.b	%00000000
    188  6caa		       00		      BYTE.b	%00000000
    189  6cab
    190  6cab
    191  6cab
    192  6cab				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    193  6cab				  -	      align	256
    194  6cab					      endif
    195  6cab
    196  6cab
    197  6cab				   bmp_96x2_1_05
    198  6cab							; *** replace this block with your bimap_05 data block...
    199  6cab		       00		      BYTE.b	%00000000
    200  6cac		       00		      BYTE.b	%00000000
    201  6cad		       00		      BYTE.b	%00000000
    202  6cae		       38		      BYTE.b	%00111000
    203  6caf		       38		      BYTE.b	%00111000
    204  6cb0		       38		      BYTE.b	%00111000
    205  6cb1		       39		      BYTE.b	%00111001
    206  6cb2		       39		      BYTE.b	%00111001
    207  6cb3		       f9		      BYTE.b	%11111001
    208  6cb4		       f9		      BYTE.b	%11111001
    209  6cb5		       39		      BYTE.b	%00111001
    210  6cb6		       39		      BYTE.b	%00111001
    211  6cb7		       39		      BYTE.b	%00111001
    212  6cb8		       39		      BYTE.b	%00111001
    213  6cb9		       f9		      BYTE.b	%11111001
    214  6cba		       f1		      BYTE.b	%11110001
    215  6cbb		       c1		      BYTE.b	%11000001
    216  6cbc		       00		      BYTE.b	%00000000
    217  6cbd		       00		      BYTE.b	%00000000
    218  6cbe		       00		      BYTE.b	%00000000
    219  6cbf
    220  6cbf
    221  6cbf
    222  6cbf				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    223  6cbf				  -	      align	256
    224  6cbf					      endif
    225  6cbf
    226  6cbf
    227  6cbf				   bmp_96x2_1_06
    228  6cbf							; *** replace this block with your bimap_06 data block...
    229  6cbf		       00		      BYTE.b	%00000000
    230  6cc0		       00		      BYTE.b	%00000000
    231  6cc1		       00		      BYTE.b	%00000000
    232  6cc2		       38		      BYTE.b	%00111000
    233  6cc3		       ff		      BYTE.b	%11111111
    234  6cc4		       ff		      BYTE.b	%11111111
    235  6cc5		       c3		      BYTE.b	%11000011
    236  6cc6		       c3		      BYTE.b	%11000011
    237  6cc7		       c3		      BYTE.b	%11000011
    238  6cc8		       c3		      BYTE.b	%11000011
    239  6cc9		       c3		      BYTE.b	%11000011
    240  6cca		       c3		      BYTE.b	%11000011
    241  6ccb		       c3		      BYTE.b	%11000011
    242  6ccc		       c3		      BYTE.b	%11000011
    243  6ccd		       c3		      BYTE.b	%11000011
    244  6cce		       c3		      BYTE.b	%11000011
    245  6ccf		       c3		      BYTE.b	%11000011
    246  6cd0		       00		      BYTE.b	%00000000
    247  6cd1		       00		      BYTE.b	%00000000
    248  6cd2		       00		      BYTE.b	%00000000
    249  6cd3
    250  6cd3
    251  6cd3
    252  6cd3				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    253  6cd3				  -	      align	256
    254  6cd3					      endif
    255  6cd3
    256  6cd3
    257  6cd3				   bmp_96x2_1_07
    258  6cd3							; *** replace this block with your bimap_07 data block...
    259  6cd3		       00		      BYTE.b	%00000000
    260  6cd4		       00		      BYTE.b	%00000000
    261  6cd5		       00		      BYTE.b	%00000000
    262  6cd6		       70		      BYTE.b	%01110000
    263  6cd7		       fc		      BYTE.b	%11111100
    264  6cd8		       fe		      BYTE.b	%11111110
    265  6cd9		       8e		      BYTE.b	%10001110
    266  6cda		       8e		      BYTE.b	%10001110
    267  6cdb		       8e		      BYTE.b	%10001110
    268  6cdc		       8e		      BYTE.b	%10001110
    269  6cdd		       8e		      BYTE.b	%10001110
    270  6cde		       8e		      BYTE.b	%10001110
    271  6cdf		       8e		      BYTE.b	%10001110
    272  6ce0		       8e		      BYTE.b	%10001110
    273  6ce1		       8e		      BYTE.b	%10001110
    274  6ce2		       8e		      BYTE.b	%10001110
    275  6ce3		       8e		      BYTE.b	%10001110
    276  6ce4		       00		      BYTE.b	%00000000
    277  6ce5		       00		      BYTE.b	%00000000
    278  6ce6		       00		      BYTE.b	%00000000
    279  6ce7
    280  6ce7
    281  6ce7
    282  6ce7				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    283  6ce7				  -	      align	256
    284  6ce7					      endif
    285  6ce7
    286  6ce7
    287  6ce7				   bmp_96x2_1_08
    288  6ce7							; *** replace this block with your bimap_08 data block...
    289  6ce7		       00		      BYTE.b	%00000000
    290  6ce8		       00		      BYTE.b	%00000000
    291  6ce9		       00		      BYTE.b	%00000000
    292  6cea		       77		      BYTE.b	%01110111
    293  6ceb		       77		      BYTE.b	%01110111
    294  6cec		       77		      BYTE.b	%01110111
    295  6ced		       70		      BYTE.b	%01110000
    296  6cee		       70		      BYTE.b	%01110000
    297  6cef		       70		      BYTE.b	%01110000
    298  6cf0		       70		      BYTE.b	%01110000
    299  6cf1		       70		      BYTE.b	%01110000
    300  6cf2		       70		      BYTE.b	%01110000
    301  6cf3		       70		      BYTE.b	%01110000
    302  6cf4		       70		      BYTE.b	%01110000
    303  6cf5		       7f		      BYTE.b	%01111111
    304  6cf6		       7f		      BYTE.b	%01111111
    305  6cf7		       7e		      BYTE.b	%01111110
    306  6cf8		       00		      BYTE.b	%00000000
    307  6cf9		       00		      BYTE.b	%00000000
    308  6cfa		       00		      BYTE.b	%00000000
    309  6cfb
    310  6cfb
    311  6cfb
    312  6cfb					      if	>. != >[.+(bmp_96x2_1_height)]
    313  6d00		       00 00 00 00*	      align	256
    314  6d00					      endif
    315  6d00
    316  6d00
    317  6d00				   bmp_96x2_1_09
    318  6d00							; *** replace this block with your bimap_09 data block...
    319  6d00		       00		      BYTE.b	%00000000
    320  6d01		       00		      BYTE.b	%00000000
    321  6d02		       00		      BYTE.b	%00000000
    322  6d03		       80		      BYTE.b	%10000000
    323  6d04		       c0		      BYTE.b	%11000000
    324  6d05		       e0		      BYTE.b	%11100000
    325  6d06		       f0		      BYTE.b	%11110000
    326  6d07		       78		      BYTE.b	%01111000
    327  6d08		       38		      BYTE.b	%00111000
    328  6d09		       38		      BYTE.b	%00111000
    329  6d0a		       39		      BYTE.b	%00111001
    330  6d0b		       39		      BYTE.b	%00111001
    331  6d0c		       79		      BYTE.b	%01111001
    332  6d0d		       f1		      BYTE.b	%11110001
    333  6d0e		       f1		      BYTE.b	%11110001
    334  6d0f		       c1		      BYTE.b	%11000001
    335  6d10		       01		      BYTE.b	%00000001
    336  6d11		       00		      BYTE.b	%00000000
    337  6d12		       00		      BYTE.b	%00000000
    338  6d13		       00		      BYTE.b	%00000000
    339  6d14
    340  6d14
    341  6d14
    342  6d14				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    343  6d14				  -	      align	256
    344  6d14					      endif
    345  6d14
    346  6d14
    347  6d14				   bmp_96x2_1_10
    348  6d14							; *** replace this block with your bimap_10 data block...
    349  6d14		       00		      BYTE.b	%00000000
    350  6d15		       00		      BYTE.b	%00000000
    351  6d16		       00		      BYTE.b	%00000000
    352  6d17		       38		      BYTE.b	%00111000
    353  6d18		       38		      BYTE.b	%00111000
    354  6d19		       38		      BYTE.b	%00111000
    355  6d1a		       38		      BYTE.b	%00111000
    356  6d1b		       38		      BYTE.b	%00111000
    357  6d1c		       3c		      BYTE.b	%00111100
    358  6d1d		       fe		      BYTE.b	%11111110
    359  6d1e		       ff		      BYTE.b	%11111111
    360  6d1f		       c3		      BYTE.b	%11000011
    361  6d20		       c3		      BYTE.b	%11000011
    362  6d21		       c3		      BYTE.b	%11000011
    363  6d22		       c3		      BYTE.b	%11000011
    364  6d23		       c3		      BYTE.b	%11000011
    365  6d24		       c3		      BYTE.b	%11000011
    366  6d25		       00		      BYTE.b	%00000000
    367  6d26		       00		      BYTE.b	%00000000
    368  6d27		       00		      BYTE.b	%00000000
    369  6d28
    370  6d28
    371  6d28
    372  6d28				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    373  6d28				  -	      align	256
    374  6d28					      endif
    375  6d28
    376  6d28
    377  6d28				   bmp_96x2_1_11
    378  6d28							; *** replace this block with your bimap_11 data block...
    379  6d28		       00		      BYTE.b	%00000000
    380  6d29		       00		      BYTE.b	%00000000
    381  6d2a		       00		      BYTE.b	%00000000
    382  6d2b		       00		      BYTE.b	%00000000
    383  6d2c		       00		      BYTE.b	%00000000
    384  6d2d		       00		      BYTE.b	%00000000
    385  6d2e		       00		      BYTE.b	%00000000
    386  6d2f		       00		      BYTE.b	%00000000
    387  6d30		       00		      BYTE.b	%00000000
    388  6d31		       00		      BYTE.b	%00000000
    389  6d32		       00		      BYTE.b	%00000000
    390  6d33		       00		      BYTE.b	%00000000
    391  6d34		       00		      BYTE.b	%00000000
    392  6d35		       00		      BYTE.b	%00000000
    393  6d36		       00		      BYTE.b	%00000000
    394  6d37		       00		      BYTE.b	%00000000
    395  6d38		       00		      BYTE.b	%00000000
    396  6d39		       00		      BYTE.b	%00000000
    397  6d3a		       00		      BYTE.b	%00000000
    398  6d3b		       00		      BYTE.b	%00000000
    399  6d3c
    400  6d3c
    401  6d3c
------- FILE titlescreen/asm/titlescreen.asm
    274  6d3c					      endif
    275  6d3c					      ifconst	mk_96x2_2_on
------- FILE titlescreen/96x2_2_image.asm LEVEL 3 PASS 3
      0  6d3c					      include	"titlescreen/96x2_2_image.asm"
      1  6d3c
      2  6d3c
      3  6d3c							;*** The height of the displayed data...
      4  6d3c		       00 05	   bmp_96x2_2_window =	5
      5  6d3c
      6  6d3c							;*** The height of the bitmap data. This can be larger than
      7  6d3c							;*** the displayed data height, if you're scrolling or animating
      8  6d3c							;*** the data...
      9  6d3c		       00 05	   bmp_96x2_2_height =	5
     10  6d3c
     11  6d3c
     12  6d3c				  -	      if	>. != >[.+(bmp_96x2_2_height)]
     13  6d3c				  -	      align	256
     14  6d3c					      endif
     15  6d3c		       00		      BYTE.b	$00	; leave this here!
     16  6d3d
     17  6d3d
     18  6d3d							;*** The color of each line in the bitmap, in reverse order...
     19  6d3d				   bmp_96x2_2_colors
     20  6d3d		       40		      .byte.b	$40
     21  6d3e		       40		      .byte.b	$40
     22  6d3f		       40		      .byte.b	$40
     23  6d40		       40		      .byte.b	$40
     24  6d41		       40		      .byte.b	$40
     25  6d42
     26  6d42
     27  6d42
     28  6d42				  -	      if	>. != >[.+(bmp_96x2_2_height)]
     29  6d42				  -	      align	256
     30  6d42					      endif
     31  6d42
     32  6d42				   bmp_96x2_2_00
     33  6d42							; *** replace this block with your bimap_11 data block...
     34  6d42		       00		      BYTE.b	%00000000
     35  6d43		       00		      BYTE.b	%00000000
     36  6d44		       00		      BYTE.b	%00000000
     37  6d45		       00		      BYTE.b	%00000000
     38  6d46		       00		      BYTE.b	%00000000
     39  6d47				  -	      if	>. != >[.+(bmp_96x2_2_height)]
     40  6d47				  -	      align	256
     41  6d47					      endif
     42  6d47
     43  6d47				   bmp_96x2_2_01
     44  6d47							; *** replace this block with your bimap_11 data block...
     45  6d47		       00		      BYTE.b	%00000000
     46  6d48		       00		      BYTE.b	%00000000
     47  6d49		       00		      BYTE.b	%00000000
     48  6d4a		       00		      BYTE.b	%00000000
     49  6d4b		       00		      BYTE.b	%00000000
     50  6d4c				  -	      if	>. != >[.+(bmp_96x2_2_height)]
     51  6d4c				  -	      align	256
     52  6d4c					      endif
     53  6d4c
     54  6d4c				   bmp_96x2_2_02
     55  6d4c							; *** replace this block with your bimap_11 data block...
     56  6d4c		       00		      BYTE.b	%00000000
     57  6d4d		       00		      BYTE.b	%00000000
     58  6d4e		       00		      BYTE.b	%00000000
     59  6d4f		       00		      BYTE.b	%00000000
     60  6d50		       00		      BYTE.b	%00000000
     61  6d51
     62  6d51				  -	      if	>. != >[.+(bmp_96x2_2_height)]
     63  6d51				  -	      align	256
     64  6d51					      endif
     65  6d51
     66  6d51				   bmp_96x2_2_03
     67  6d51							; *** replace this block with your bimap_00 data block...
     68  6d51		       ae		      .byte.b	%10101110	;
     69  6d52		       a8		      .byte.b	%10101000	;
     70  6d53		       e8		      .byte.b	%11101000	;
     71  6d54		       a8		      .byte.b	%10101000	;
     72  6d55		       e8		      .byte.b	%11101000	;
     73  6d56
     74  6d56
     75  6d56
     76  6d56				  -	      if	>. != >[.+(bmp_96x2_2_height)]
     77  6d56				  -	      align	256
     78  6d56					      endif
     79  6d56
     80  6d56
     81  6d56				   bmp_96x2_2_04
     82  6d56							; *** replace this block with your bimap_01 data block...
     83  6d56		       4e		      .byte.b	%01001110	;
     84  6d57		       48		      .byte.b	%01001000	;
     85  6d58		       4c		      .byte.b	%01001100	;
     86  6d59		       48		      .byte.b	%01001000	;
     87  6d5a		       4e		      .byte.b	%01001110	;
     88  6d5b
     89  6d5b
     90  6d5b
     91  6d5b				  -	      if	>. != >[.+(bmp_96x2_2_height)]
     92  6d5b				  -	      align	256
     93  6d5b					      endif
     94  6d5b
     95  6d5b
     96  6d5b				   bmp_96x2_2_05
     97  6d5b							; *** replace this block with your bimap_02 data block...
     98  6d5b		       90		      .byte.b	%10010000	;
     99  6d5c		       b0		      .byte.b	%10110000	;
    100  6d5d		       d0		      .byte.b	%11010000	;
    101  6d5e		       90		      .byte.b	%10010000	;
    102  6d5f		       90		      .byte.b	%10010000	;
    103  6d60
    104  6d60
    105  6d60
    106  6d60				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    107  6d60				  -	      align	256
    108  6d60					      endif
    109  6d60
    110  6d60
    111  6d60				   bmp_96x2_2_06
    112  6d60							; *** replace this block with your bimap_03 data block...
    113  6d60		       a4		      .byte.b	%10100100	;
    114  6d61		       a4		      .byte.b	%10100100	;
    115  6d62		       ac		      .byte.b	%10101100	;
    116  6d63		       b4		      .byte.b	%10110100	;
    117  6d64		       a4		      .byte.b	%10100100	;
    118  6d65
    119  6d65
    120  6d65				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    121  6d65				  -	      align	256
    122  6d65					      endif
    123  6d65
    124  6d65
    125  6d65				   bmp_96x2_2_07
    126  6d65							; *** replace this block with your bimap_04 data block...
    127  6d65		       4a		      .byte.b	%01001010	;
    128  6d66		       aa		      .byte.b	%10101010	;
    129  6d67		       ae		      .byte.b	%10101110	;
    130  6d68		       aa		      .byte.b	%10101010	;
    131  6d69		       ae		      .byte.b	%10101110	;
    132  6d6a
    133  6d6a
    134  6d6a
    135  6d6a				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    136  6d6a				  -	      align	256
    137  6d6a					      endif
    138  6d6a
    139  6d6a
    140  6d6a				   bmp_96x2_2_08
    141  6d6a							; *** replace this block with your bimap_05 data block...
    142  6d6a		       e4		      .byte.b	%11100100	;
    143  6d6b		       24		      .byte.b	%00100100	;
    144  6d6c		       e4		      .byte.b	%11100100	;
    145  6d6d		       84		      .byte.b	%10000100	;
    146  6d6e		       e4		      .byte.b	%11100100	;
    147  6d6f
    148  6d6f
    149  6d6f
    150  6d6f				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    151  6d6f				  -	      align	256
    152  6d6f					      endif
    153  6d6f
    154  6d6f
    155  6d6f				   bmp_96x2_2_09
    156  6d6f							; *** replace this block with your bimap_06 data block...
    157  6d6f		       e9		      .byte.b	%11101001	;
    158  6d70		       a9		      .byte.b	%10101001	;
    159  6d71		       ab		      .byte.b	%10101011	;
    160  6d72		       ad		      .byte.b	%10101101	;
    161  6d73		       e9		      .byte.b	%11101001	;
    162  6d74
    163  6d74
    164  6d74
    165  6d74				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    166  6d74				  -	      align	256
    167  6d74					      endif
    168  6d74
    169  6d74
    170  6d74				   bmp_96x2_2_10
    171  6d74							; *** replace this block with your bimap_07 data block...
    172  6d74		       00		      BYTE.b	%00000000
    173  6d75
    174  6d75
    175  6d75
    176  6d75				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    177  6d75				  -	      align	256
    178  6d75					      endif
    179  6d75
    180  6d75
    181  6d75				   bmp_96x2_2_11
    182  6d75							; *** replace this block with your bimap_08 data block...
    183  6d75		       00		      BYTE.b	%00000000
    184  6d76		       00		      BYTE.b	%00000000
    185  6d77		       00		      BYTE.b	%00000000
    186  6d78		       00		      BYTE.b	%00000000
    187  6d79		       00		      BYTE.b	%00000000
    188  6d7a
    189  6d7a
    190  6d7a
    191  6d7a
    192  6d7a
    193  6d7a
    194  6d7a
    195  6d7a
------- FILE titlescreen/asm/titlescreen.asm
    277  6d7a					      endif
    278  6d7a				  -	      ifconst	mk_96x2_3_on
    279  6d7a				  -	      include	"titlescreen/96x2_3_image.asm"
    280  6d7a					      endif
    281  6d7a					      ifconst	mk_96x2_4_on
------- FILE titlescreen/96x2_4_image.asm LEVEL 3 PASS 3
      0  6d7a					      include	"titlescreen/96x2_4_image.asm"
      1  6d7a
      2  6d7a
      3  6d7a							;*** The height of the displayed data...
      4  6d7a		       00 05	   bmp_96x2_4_window =	5
      5  6d7a
      6  6d7a							;*** The height of the bitmap data. This can be larger than
      7  6d7a							;*** the displayed data height, if you're scrolling or animating
      8  6d7a							;*** the data...
      9  6d7a		       00 05	   bmp_96x2_4_height =	5
     10  6d7a
     11  6d7a
     12  6d7a				  -	      if	>. != >[.+(bmp_96x2_4_height)]
     13  6d7a				  -	      align	256
     14  6d7a					      endif
     15  6d7a		       00		      BYTE.b	$00	; leave this here!
     16  6d7b
     17  6d7b
     18  6d7b							;*** The color of each line in the bitmap, in reverse order...
     19  6d7b				   bmp_96x2_4_colors
     20  6d7b		       c2		      .byte.b	$C2
     21  6d7c		       c2		      .byte.b	$C2
     22  6d7d		       c2		      .byte.b	$C2
     23  6d7e		       c2		      .byte.b	$C2
     24  6d7f		       c2		      .byte.b	$C2
     25  6d80
     26  6d80
     27  6d80				  -	      if	>. != >[.+(bmp_96x2_4_height)]
     28  6d80				  -	      align	256
     29  6d80					      endif
     30  6d80
     31  6d80				   bmp_96x2_4_00
     32  6d80							; *** replace this block with your bimap_09 data block...
     33  6d80
     34  6d80		       00		      .byte.b	%00000000	;
     35  6d81		       00		      .byte.b	%00000000	;
     36  6d82		       00		      .byte.b	%00000000	;
     37  6d83		       00		      .byte.b	%00000000	;
     38  6d84		       00		      .byte.b	%00000000	;
     39  6d85
     40  6d85				  -	      if	>. != >[.+(bmp_96x2_4_height)]
     41  6d85				  -	      align	256
     42  6d85					      endif
     43  6d85				   bmp_96x2_4_01
     44  6d85							; *** replace this block with your bimap_09 data block...
     45  6d85
     46  6d85		       00		      .byte.b	%00000000	;
     47  6d86		       00		      .byte.b	%00000000	;
     48  6d87		       00		      .byte.b	%00000000	;
     49  6d88		       00		      .byte.b	%00000000	;
     50  6d89		       00		      .byte.b	%00000000	;
     51  6d8a
     52  6d8a				  -	      if	>. != >[.+(bmp_96x2_4_height)]
     53  6d8a				  -	      align	256
     54  6d8a					      endif
     55  6d8a
     56  6d8a				   bmp_96x2_4_02
     57  6d8a		       8a		      .byte.b	%10001010	;
     58  6d8b		       8a		      .byte.b	%10001010	;
     59  6d8c		       ec		      .byte.b	%11101100	;
     60  6d8d		       aa		      .byte.b	%10101010	;
     61  6d8e		       ee		      .byte.b	%11101110	;
     62  6d8f
     63  6d8f
     64  6d8f				  -	      if	>. != >[.+(bmp_96x2_4_height)]
     65  6d8f				  -	      align	256
     66  6d8f					      endif
     67  6d8f				   bmp_96x2_4_03
     68  6d8f							; *** replace this block with your bimap_00 data block...
     69  6d8f		       ee		      .byte.b	%11101110	;
     70  6d90		       82		      .byte.b	%10000010	;
     71  6d91		       ce		      .byte.b	%11001110	;
     72  6d92		       88		      .byte.b	%10001000	;
     73  6d93		       ee		      .byte.b	%11101110	;
     74  6d94
     75  6d94
     76  6d94
     77  6d94				  -	      if	>. != >[.+(bmp_96x2_4_height)]
     78  6d94				  -	      align	256
     79  6d94					      endif
     80  6d94
     81  6d94
     82  6d94				   bmp_96x2_4_04
     83  6d94							; *** replace this block with your bimap_01 data block...
     84  6d94		       e0		      .byte.b	%11100000	;
     85  6d95		       20		      .byte.b	%00100000	;
     86  6d96		       e0		      .byte.b	%11100000	;
     87  6d97		       80		      .byte.b	%10000000	;
     88  6d98		       e0		      .byte.b	%11100000	;
     89  6d99
     90  6d99
     91  6d99				  -	      if	>. != >[.+(bmp_96x2_4_height)]
     92  6d99				  -	      align	256
     93  6d99					      endif
     94  6d99
     95  6d99
     96  6d99				   bmp_96x2_4_05
     97  6d99							; *** replace this block with your bimap_02 data block...
     98  6d99		       84		      .byte.b	%10000100	;
     99  6d9a		       84		      .byte.b	%10000100	;
    100  6d9b		       c4		      .byte.b	%11000100	;
    101  6d9c		       84		      .byte.b	%10000100	;
    102  6d9d		       e4		      .byte.b	%11100100	;
    103  6d9e
    104  6d9e
    105  6d9e				  -	      if	>. != >[.+(bmp_96x2_4_height)]
    106  6d9e				  -	      align	256
    107  6d9e					      endif
    108  6d9e
    109  6d9e
    110  6d9e				   bmp_96x2_4_06
    111  6d9e							; *** replace this block with your bimap_03 data block...
    112  6d9e		       ae		      .byte.b	%10101110	;
    113  6d9f		       a8		      .byte.b	%10101000	;
    114  6da0		       cc		      .byte.b	%11001100	;
    115  6da1		       a8		      .byte.b	%10101000	;
    116  6da2		       ee		      .byte.b	%11101110	;
    117  6da3
    118  6da3
    119  6da3
    120  6da3				  -	      if	>. != >[.+(bmp_96x2_4_height)]
    121  6da3				  -	      align	256
    122  6da3					      endif
    123  6da3
    124  6da3
    125  6da3				   bmp_96x2_4_07
    126  6da3							; *** replace this block with your bimap_04 data block...
    127  6da3		       04		      .byte.b	%00000100	;
    128  6da4		       04		      .byte.b	%00000100	;
    129  6da5		       04		      .byte.b	%00000100	;
    130  6da6		       04		      .byte.b	%00000100	;
    131  6da7		       0e		      .byte.b	%00001110	;
    132  6da8
    133  6da8
    134  6da8
    135  6da8				  -	      if	>. != >[.+(bmp_96x2_4_height)]
    136  6da8				  -	      align	256
    137  6da8					      endif
    138  6da8
    139  6da8
    140  6da8				   bmp_96x2_4_08
    141  6da8							; *** replace this block with your bimap_05 data block...
    142  6da8		       e0		      .byte.b	%11100000	;
    143  6da9		       a0		      .byte.b	%10100000	;
    144  6daa		       a0		      .byte.b	%10100000	;
    145  6dab		       a0		      .byte.b	%10100000	;
    146  6dac		       e0		      .byte.b	%11100000	;
    147  6dad
    148  6dad
    149  6dad
    150  6dad				  -	      if	>. != >[.+(bmp_96x2_4_height)]
    151  6dad				  -	      align	256
    152  6dad					      endif
    153  6dad
    154  6dad
    155  6dad				   bmp_96x2_4_09
    156  6dad							; *** replace this block with your bimap_06 data block...
    157  6dad		       8e		      .byte.b	%10001110	;
    158  6dae		       88		      .byte.b	%10001000	;
    159  6daf		       e8		      .byte.b	%11101000	;
    160  6db0		       a8		      .byte.b	%10101000	;
    161  6db1		       e8		      .byte.b	%11101000	;
    162  6db2
    163  6db2
    164  6db2
    165  6db2				  -	      if	>. != >[.+(bmp_96x2_4_height)]
    166  6db2				  -	      align	256
    167  6db2					      endif
    168  6db2
    169  6db2
    170  6db2				   bmp_96x2_4_10
    171  6db2							; *** replace this block with your bimap_07 data block...
    172  6db2		       a4		      .byte.b	%10100100	;
    173  6db3		       a4		      .byte.b	%10100100	;
    174  6db4		       ee		      .byte.b	%11101110	;
    175  6db5		       aa		      .byte.b	%10101010	;
    176  6db6		       ea		      .byte.b	%11101010	;
    177  6db7
    178  6db7
    179  6db7
    180  6db7				  -	      if	>. != >[.+(bmp_96x2_4_height)]
    181  6db7				  -	      align	256
    182  6db7					      endif
    183  6db7
    184  6db7
    185  6db7				   bmp_96x2_4_11
    186  6db7							; *** replace this block with your bimap_08 data block...
    187  6db7
    188  6db7		       00		      .byte.b	%00000000	;
    189  6db8		       00		      .byte.b	%00000000	;
    190  6db9		       00		      .byte.b	%00000000	;
    191  6dba		       00		      .byte.b	%00000000	;
    192  6dbb		       00		      .byte.b	%00000000	;
    193  6dbc
    194  6dbc				  -	      if	>. != >[.+(bmp_96x2_4_height)]
    195  6dbc				  -	      align	256
    196  6dbc					      endif
    197  6dbc
    198  6dbc
    199  6dbc
    200  6dbc
    201  6dbc
    202  6dbc
    203  6dbc
    204  6dbc
    205  6dbc
------- FILE titlescreen/asm/titlescreen.asm
    283  6dbc					      endif
    284  6dbc					      ifconst	mk_96x2_5_on
------- FILE titlescreen/96x2_5_image.asm LEVEL 3 PASS 3
      0  6dbc					      include	"titlescreen/96x2_5_image.asm"
      1  6dbc
      2  6dbc							;*** The height of the displayed data...
      3  6dbc		       00 05	   bmp_96x2_5_window =	5
      4  6dbc
      5  6dbc							;*** The height of the bitmap data. This can be larger than
      6  6dbc							;*** the displayed data height, if you're scrolling or animating
      7  6dbc							;*** the data...
      8  6dbc		       00 05	   bmp_96x2_5_height =	5
      9  6dbc
     10  6dbc
     11  6dbc				  -	      if	>. != >[.+(bmp_96x2_5_height)]
     12  6dbc				  -	      align	256
     13  6dbc					      endif
     14  6dbc		       00		      BYTE.b	$00	; leave this here!
     15  6dbd
     16  6dbd
     17  6dbd							;*** The color of each line in the bitmap, in reverse order...
     18  6dbd				   bmp_96x2_5_colors
     19  6dbd		       9a		      BYTE.b	$9a
     20  6dbe		       7a		      BYTE.b	$7a
     21  6dbf		       5a		      BYTE.b	$5a
     22  6dc0		       3a		      BYTE.b	$3a
     23  6dc1		       1a		      BYTE.b	$1a
     24  6dc2
     25  6dc2
     26  6dc2				  -	      if	>. != >[.+(bmp_96x2_5_height)]
     27  6dc2				  -	      align	256
     28  6dc2					      endif
     29  6dc2
     30  6dc2
     31  6dc2				   bmp_96x2_5_00
     32  6dc2							; *** replace this block with your bimap_11 data block...
     33  6dc2		       00		      BYTE.b	%00000000
     34  6dc3		       00		      BYTE.b	%00000000
     35  6dc4		       00		      BYTE.b	%00000000
     36  6dc5		       00		      BYTE.b	%00000000
     37  6dc6		       00		      BYTE.b	%00000000
     38  6dc7
     39  6dc7				  -	      if	>. != >[.+(bmp_96x2_5_height)]
     40  6dc7				  -	      align	256
     41  6dc7					      endif
     42  6dc7
     43  6dc7				   bmp_96x2_5_01
     44  6dc7							; *** replace this block with your bimap_11 data block...
     45  6dc7		       00		      BYTE.b	%00000000
     46  6dc8		       00		      BYTE.b	%00000000
     47  6dc9		       00		      BYTE.b	%00000000
     48  6dca		       00		      BYTE.b	%00000000
     49  6dcb		       00		      BYTE.b	%00000000
     50  6dcc
     51  6dcc				  -	      if	>. != >[.+(bmp_96x2_5_height)]
     52  6dcc				  -	      align	256
     53  6dcc					      endif
     54  6dcc
     55  6dcc				   bmp_96x2_5_02
     56  6dcc							; *** replace this block with your bimap_11 data block...
     57  6dcc		       00		      BYTE.b	%00000000
     58  6dcd		       00		      BYTE.b	%00000000
     59  6dce		       00		      BYTE.b	%00000000
     60  6dcf		       00		      BYTE.b	%00000000
     61  6dd0		       00		      BYTE.b	%00000000
     62  6dd1
     63  6dd1				  -	      if	>. != >[.+(bmp_96x2_5_height)]
     64  6dd1				  -	      align	256
     65  6dd1					      endif
     66  6dd1
     67  6dd1				   bmp_96x2_5_03
     68  6dd1							; *** replace this block with your bimap_00 data block...
     69  6dd1		       4a		      .byte.b	%01001010	;
     70  6dd2		       4a		      .byte.b	%01001010	;
     71  6dd3		       4e		      .byte.b	%01001110	;
     72  6dd4		       4a		      .byte.b	%01001010	;
     73  6dd5		       e4		      .byte.b	%11100100	;
     74  6dd6
     75  6dd6
     76  6dd6				  -	      if	>. != >[.+(bmp_96x2_5_height)]
     77  6dd6				  -	      align	256
     78  6dd6					      endif
     79  6dd6
     80  6dd6
     81  6dd6				   bmp_96x2_5_04
     82  6dd6							; *** replace this block with your bimap_01 data block...
     83  6dd6		       ea		      .byte.b	%11101010	;
     84  6dd7		       8a		      .byte.b	%10001010	;
     85  6dd8		       4c		      .byte.b	%01001100	;
     86  6dd9		       2a		      .byte.b	%00101010	;
     87  6dda		       ec		      .byte.b	%11101100	;
     88  6ddb
     89  6ddb
     90  6ddb				  -	      if	>. != >[.+(bmp_96x2_5_height)]
     91  6ddb				  -	      align	256
     92  6ddb					      endif
     93  6ddb
     94  6ddb
     95  6ddb				   bmp_96x2_5_05
     96  6ddb							; *** replace this block with your bimap_02 data block...
     97  6ddb		       ee		      .byte.b	%11101110	;
     98  6ddc		       aa		      .byte.b	%10101010	;
     99  6ddd		       aa		      .byte.b	%10101010	;
    100  6dde		       a8		      .byte.b	%10101000	;
    101  6ddf		       ee		      .byte.b	%11101110	;
    102  6de0
    103  6de0
    104  6de0				  -	      if	>. != >[.+(bmp_96x2_5_height)]
    105  6de0				  -	      align	256
    106  6de0					      endif
    107  6de0
    108  6de0
    109  6de0				   bmp_96x2_5_06
    110  6de0							; *** replace this block with your bimap_03 data block...
    111  6de0		       0e		      .byte.b	%00001110	;
    112  6de1		       0a		      .byte.b	%00001010	;
    113  6de2		       0a		      .byte.b	%00001010	;
    114  6de3		       08		      .byte.b	%00001000	;
    115  6de4		       0e		      .byte.b	%00001110	;
    116  6de5
    117  6de5
    118  6de5
    119  6de5				  -	      if	>. != >[.+(bmp_96x2_5_height)]
    120  6de5				  -	      align	256
    121  6de5					      endif
    122  6de5
    123  6de5
    124  6de5				   bmp_96x2_5_07
    125  6de5							; *** replace this block with your bimap_04 data block...
    126  6de5		       aa		      .byte.b	%10101010	;
    127  6de6		       aa		      .byte.b	%10101010	;
    128  6de7		       ea		      .byte.b	%11101010	;
    129  6de8		       ae		      .byte.b	%10101110	;
    130  6de9		       ea		      .byte.b	%11101010	;
    131  6dea
    132  6dea
    133  6dea				  -	      if	>. != >[.+(bmp_96x2_5_height)]
    134  6dea				  -	      align	256
    135  6dea					      endif
    136  6dea
    137  6dea
    138  6dea				   bmp_96x2_5_08
    139  6dea							; *** replace this block with your bimap_05 data block...
    140  6dea		       ee		      .byte.b	%11101110	;
    141  6deb		       82		      .byte.b	%10000010	;
    142  6dec		       ce		      .byte.b	%11001110	;
    143  6ded		       88		      .byte.b	%10001000	;
    144  6dee		       ee		      .byte.b	%11101110	;
    145  6def
    146  6def
    147  6def				  -	      if	>. != >[.+(bmp_96x2_5_height)]
    148  6def				  -	      align	256
    149  6def					      endif
    150  6def
    151  6def
    152  6def				   bmp_96x2_5_09
    153  6def							; *** replace this block with your bimap_06 data block...
    154  6def		       00		      BYTE.b	%00000000
    155  6df0		       00		      BYTE.b	%00000000
    156  6df1		       00		      BYTE.b	%00000000
    157  6df2		       00		      BYTE.b	%00000000
    158  6df3		       00		      BYTE.b	%00000000
    159  6df4
    160  6df4
    161  6df4				  -	      if	>. != >[.+(bmp_96x2_5_height)]
    162  6df4				  -	      align	256
    163  6df4					      endif
    164  6df4
    165  6df4
    166  6df4				   bmp_96x2_5_10
    167  6df4							; *** replace this block with your bimap_07 data block...
    168  6df4		       00		      BYTE.b	%00000000
    169  6df5		       00		      BYTE.b	%00000000
    170  6df6		       00		      BYTE.b	%00000000
    171  6df7		       00		      BYTE.b	%00000000
    172  6df8		       00		      BYTE.b	%00000000
    173  6df9
    174  6df9
    175  6df9				  -	      if	>. != >[.+(bmp_96x2_5_height)]
    176  6df9				  -	      align	256
    177  6df9					      endif
    178  6df9
    179  6df9
    180  6df9				   bmp_96x2_5_11
    181  6df9							; *** replace this block with your bimap_08 data block...
    182  6df9		       00		      BYTE.b	%00000000
    183  6dfa		       00		      BYTE.b	%00000000
    184  6dfb		       00		      BYTE.b	%00000000
    185  6dfc		       00		      BYTE.b	%00000000
    186  6dfd		       00		      BYTE.b	%00000000
    187  6dfe
    188  6dfe
    189  6dfe
------- FILE titlescreen/asm/titlescreen.asm
    286  6dfe					      endif
    287  6dfe				  -	      ifconst	mk_96x2_6_on
    288  6dfe				  -	      include	"titlescreen/96x2_6_image.asm"
    289  6dfe					      endif
    290  6dfe				  -	      ifconst	mk_96x2_7_on
    291  6dfe				  -	      include	"titlescreen/96x2_7_image.asm"
    292  6dfe					      endif
    293  6dfe				  -	      ifconst	mk_96x2_8_on
    294  6dfe				  -	      include	"titlescreen/96x2_8_image.asm"
    295  6dfe					      endif
    296  6dfe
    297  6dfe				  -	      ifconst	mk_player_on
    298  6dfe				  -	      include	"titlescreen/player_image.asm"
    299  6dfe					      endif
    300  6dfe
    301  6dfe					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 3
      0  6dfe					      include	"titlescreen/score_image.asm"
      1  6dfe							; feel free to modify the score graphics - just keep each digit 8 high
      2  6dfe							; if you're looking to want to modify any one font, pick on the
      3  6dfe
      4  6dfe				  -	      ifnconst	scorecolor
      5  6dfe				  -scorecolor
      6  6dfe					      endif
      7  6dfe							; ** change this value for a different scorecolor under DPC+
      8  6dfe							;    for other kernels, just use the scorecolor variable
      9  6dfe		       0f		      .byte.b	$0f
     10  6dff
     11  6dff				  -	      ifnconst	NOFONT
     12  6dff				  -NOFONT     =	0
     13  6dff					      endif
     14  6dff				  -	      ifnconst	STOCK
     15  6dff				  -STOCK      =	1	;_FONTNAME
     16  6dff					      endif
     17  6dff				  -	      ifnconst	NEWCENTURY
     18  6dff				  -NEWCENTURY =	2	;_FONTNAME
     19  6dff					      endif
     20  6dff				  -	      ifnconst	WHIMSEY
     21  6dff				  -WHIMSEY    =	3	;_FONTNAME
     22  6dff					      endif
     23  6dff				  -	      ifnconst	ALARMCLOCK
     24  6dff				  -ALARMCLOCK =	4	;_FONTNAME
     25  6dff					      endif
     26  6dff				  -	      ifnconst	HANDWRITTEN
     27  6dff				  -HANDWRITTEN =	5	;_FONTNAME
     28  6dff					      endif
     29  6dff				  -	      ifnconst	INTERRUPTED
     30  6dff				  -INTERRUPTED =	6	;_FONTNAME
     31  6dff					      endif
     32  6dff				  -	      ifnconst	TINY
     33  6dff				  -TINY       =	7	;_FONTNAME
     34  6dff					      endif
     35  6dff				  -	      ifnconst	RETROPUTER
     36  6dff				  -RETROPUTER =	8	;_FONTNAME
     37  6dff					      endif
     38  6dff				  -	      ifnconst	CURVES
     39  6dff				  -CURVES     =	9	;_FONTNAME
     40  6dff					      endif
     41  6dff				  -	      ifnconst	HUSKY
     42  6dff				  -HUSKY      =	10	;_FONTNAME
     43  6dff					      endif
     44  6dff				  -	      ifnconst	SNAKE
     45  6dff				  -SNAKE      =	11	;_FONTNAME
     46  6dff					      endif
     47  6dff				  -	      ifnconst	PLOK
     48  6dff				  -PLOK       =	13	;_FONTNAME
     49  6dff					      endif
     50  6dff
     51  6dff				  -	      ifnconst	SYMBOLS
     52  6dff				  -SYMBOLS    =	0	;_FONTNAME
     53  6dff					      endif
     54  6dff
     55  6dff							; ### setup some defaults
     56  6dff				  -	      ifnconst	fontstyle
     57  6dff				  -fontstyle  =	STOCK
     58  6dff					      endif
     59  6dff
     60  6dff							;fix up the table alignment, if necessary
     61  6dff					      if	>. != >[.+81]
     62  6e00		       00		      align	256
     63  6e00					      endif
     64  6e00
     65  6e00
     66  6e00				   miniscoretable
     67  6e00
     68  6e00					      if	fontstyle == STOCK
     69  6e00
     70  6e00							;byte %00000000 ; STOCK
     71  6e00
     72  6e00		       3c		      .byte.b	%00111100	; STOCK
     73  6e01		       66		      .byte.b	%01100110	; STOCK
     74  6e02		       66		      .byte.b	%01100110	; STOCK
     75  6e03		       66		      .byte.b	%01100110	; STOCK
     76  6e04		       66		      .byte.b	%01100110	; STOCK
     77  6e05		       66		      .byte.b	%01100110	; STOCK
     78  6e06		       66		      .byte.b	%01100110	; STOCK
     79  6e07		       3c		      .byte.b	%00111100	; STOCK
     80  6e08
     81  6e08							;byte %00000000 ; STOCK
     82  6e08
     83  6e08		       7e		      .byte.b	%01111110	; STOCK
     84  6e09		       18		      .byte.b	%00011000	; STOCK
     85  6e0a		       18		      .byte.b	%00011000	; STOCK
     86  6e0b		       18		      .byte.b	%00011000	; STOCK
     87  6e0c		       18		      .byte.b	%00011000	; STOCK
     88  6e0d		       38		      .byte.b	%00111000	; STOCK
     89  6e0e		       18		      .byte.b	%00011000	; STOCK
     90  6e0f		       08		      .byte.b	%00001000	; STOCK
     91  6e10
     92  6e10							;byte %00000000 ; STOCK
     93  6e10
     94  6e10		       7e		      .byte.b	%01111110	; STOCK
     95  6e11		       60		      .byte.b	%01100000	; STOCK
     96  6e12		       60		      .byte.b	%01100000	; STOCK
     97  6e13		       3c		      .byte.b	%00111100	; STOCK
     98  6e14		       06		      .byte.b	%00000110	; STOCK
     99  6e15		       06		      .byte.b	%00000110	; STOCK
    100  6e16		       46		      .byte.b	%01000110	; STOCK
    101  6e17		       3c		      .byte.b	%00111100	; STOCK
    102  6e18
    103  6e18							;byte %00000000 ; STOCK
    104  6e18
    105  6e18		       3c		      .byte.b	%00111100	; STOCK
    106  6e19		       46		      .byte.b	%01000110	; STOCK
    107  6e1a		       06		      .byte.b	%00000110	; STOCK
    108  6e1b		       06		      .byte.b	%00000110	; STOCK
    109  6e1c		       1c		      .byte.b	%00011100	; STOCK
    110  6e1d		       06		      .byte.b	%00000110	; STOCK
    111  6e1e		       46		      .byte.b	%01000110	; STOCK
    112  6e1f		       3c		      .byte.b	%00111100	; STOCK
    113  6e20
    114  6e20							;byte %00000000 ; STOCK
    115  6e20
    116  6e20		       0c		      .byte.b	%00001100	; STOCK
    117  6e21		       0c		      .byte.b	%00001100	; STOCK
    118  6e22		       7e		      .byte.b	%01111110	; STOCK
    119  6e23		       4c		      .byte.b	%01001100	; STOCK
    120  6e24		       4c		      .byte.b	%01001100	; STOCK
    121  6e25		       2c		      .byte.b	%00101100	; STOCK
    122  6e26		       1c		      .byte.b	%00011100	; STOCK
    123  6e27		       0c		      .byte.b	%00001100	; STOCK
    124  6e28
    125  6e28							;byte %00000000 ; STOCK
    126  6e28
    127  6e28		       3c		      .byte.b	%00111100	; STOCK
    128  6e29		       46		      .byte.b	%01000110	; STOCK
    129  6e2a		       06		      .byte.b	%00000110	; STOCK
    130  6e2b		       06		      .byte.b	%00000110	; STOCK
    131  6e2c		       3c		      .byte.b	%00111100	; STOCK
    132  6e2d		       60		      .byte.b	%01100000	; STOCK
    133  6e2e		       60		      .byte.b	%01100000	; STOCK
    134  6e2f		       7e		      .byte.b	%01111110	; STOCK
    135  6e30
    136  6e30							;byte %00000000 ; STOCK
    137  6e30
    138  6e30		       3c		      .byte.b	%00111100	; STOCK
    139  6e31		       66		      .byte.b	%01100110	; STOCK
    140  6e32		       66		      .byte.b	%01100110	; STOCK
    141  6e33		       66		      .byte.b	%01100110	; STOCK
    142  6e34		       7c		      .byte.b	%01111100	; STOCK
    143  6e35		       60		      .byte.b	%01100000	; STOCK
    144  6e36		       62		      .byte.b	%01100010	; STOCK
    145  6e37		       3c		      .byte.b	%00111100	; STOCK
    146  6e38
    147  6e38							;byte %00000000 ; STOCK
    148  6e38
    149  6e38		       30		      .byte.b	%00110000	; STOCK
    150  6e39		       30		      .byte.b	%00110000	; STOCK
    151  6e3a		       30		      .byte.b	%00110000	; STOCK
    152  6e3b		       18		      .byte.b	%00011000	; STOCK
    153  6e3c		       0c		      .byte.b	%00001100	; STOCK
    154  6e3d		       06		      .byte.b	%00000110	; STOCK
    155  6e3e		       42		      .byte.b	%01000010	; STOCK
    156  6e3f		       3e		      .byte.b	%00111110	; STOCK
    157  6e40
    158  6e40							;byte %00000000 ; STOCK
    159  6e40
    160  6e40		       3c		      .byte.b	%00111100	; STOCK
    161  6e41		       66		      .byte.b	%01100110	; STOCK
    162  6e42		       66		      .byte.b	%01100110	; STOCK
    163  6e43		       66		      .byte.b	%01100110	; STOCK
    164  6e44		       3c		      .byte.b	%00111100	; STOCK
    165  6e45		       66		      .byte.b	%01100110	; STOCK
    166  6e46		       66		      .byte.b	%01100110	; STOCK
    167  6e47		       3c		      .byte.b	%00111100	; STOCK
    168  6e48
    169  6e48							;byte %00000000 ; STOCK
    170  6e48
    171  6e48		       3c		      .byte.b	%00111100	; STOCK
    172  6e49		       46		      .byte.b	%01000110	; STOCK
    173  6e4a		       06		      .byte.b	%00000110	; STOCK
    174  6e4b		       3e		      .byte.b	%00111110	; STOCK
    175  6e4c		       66		      .byte.b	%01100110	; STOCK
    176  6e4d		       66		      .byte.b	%01100110	; STOCK
    177  6e4e		       66		      .byte.b	%01100110	; STOCK
    178  6e4f		       3c		      .byte.b	%00111100	; STOCK
    179  6e50
    180  6e50					      endif		; STOCK
    181  6e50
    182  6e50				  -	      if	fontstyle == NEWCENTURY
    183  6e50				  -			;byte %00000000 ; NEWCENTURY
    184  6e50				  -
    185  6e50				  -	      .byte	%00111100	; NEWCENTURY
    186  6e50				  -	      .byte	%01000010	; NEWCENTURY
    187  6e50				  -	      .byte	%01000010	; NEWCENTURY
    188  6e50				  -	      .byte	%01000010	; NEWCENTURY
    189  6e50				  -	      .byte	%00100100	; NEWCENTURY
    190  6e50				  -	      .byte	%00100100	; NEWCENTURY
    191  6e50				  -	      .byte	%00100100	; NEWCENTURY
    192  6e50				  -	      .byte	%00011000	; NEWCENTURY
    193  6e50				  -
    194  6e50				  -			;byte %00000000 ; NEWCENTURY
    195  6e50				  -
    196  6e50				  -	      .byte	%00001000	; NEWCENTURY
    197  6e50				  -	      .byte	%00001000	; NEWCENTURY
    198  6e50				  -	      .byte	%00001000	; NEWCENTURY
    199  6e50				  -	      .byte	%00001000	; NEWCENTURY
    200  6e50				  -	      .byte	%00001000	; NEWCENTURY
    201  6e50				  -	      .byte	%00001000	; NEWCENTURY
    202  6e50				  -	      .byte	%00001000	; NEWCENTURY
    203  6e50				  -	      .byte	%00001000	; NEWCENTURY
    204  6e50				  -
    205  6e50				  -			;byte %00000000 ; NEWCENTURY
    206  6e50				  -
    207  6e50				  -	      .byte	%01111110	; NEWCENTURY
    208  6e50				  -	      .byte	%01000000	; NEWCENTURY
    209  6e50				  -	      .byte	%01000000	; NEWCENTURY
    210  6e50				  -	      .byte	%00100000	; NEWCENTURY
    211  6e50				  -	      .byte	%00011100	; NEWCENTURY
    212  6e50				  -	      .byte	%00000010	; NEWCENTURY
    213  6e50				  -	      .byte	%00000010	; NEWCENTURY
    214  6e50				  -	      .byte	%00011100	; NEWCENTURY
    215  6e50				  -
    216  6e50				  -			;byte %00000000 ; NEWCENTURY
    217  6e50				  -
    218  6e50				  -	      .byte	%01111100	; NEWCENTURY
    219  6e50				  -	      .byte	%00000010	; NEWCENTURY
    220  6e50				  -	      .byte	%00000010	; NEWCENTURY
    221  6e50				  -	      .byte	%00000010	; NEWCENTURY
    222  6e50				  -	      .byte	%00111100	; NEWCENTURY
    223  6e50				  -	      .byte	%00000010	; NEWCENTURY
    224  6e50				  -	      .byte	%00000010	; NEWCENTURY
    225  6e50				  -	      .byte	%00011100	; NEWCENTURY
    226  6e50				  -
    227  6e50				  -			;byte %00000000 ; NEWCENTURY
    228  6e50				  -
    229  6e50				  -	      .byte	%00000010	; NEWCENTURY
    230  6e50				  -	      .byte	%00000010	; NEWCENTURY
    231  6e50				  -	      .byte	%00000010	; NEWCENTURY
    232  6e50				  -	      .byte	%00111110	; NEWCENTURY
    233  6e50				  -	      .byte	%00100010	; NEWCENTURY
    234  6e50				  -	      .byte	%00100010	; NEWCENTURY
    235  6e50				  -	      .byte	%00010010	; NEWCENTURY
    236  6e50				  -	      .byte	%00010010	; NEWCENTURY
    237  6e50				  -
    238  6e50				  -			;byte %00000000 ; NEWCENTURY
    239  6e50				  -
    240  6e50				  -	      .byte	%01111100	; NEWCENTURY
    241  6e50				  -	      .byte	%00000010	; NEWCENTURY
    242  6e50				  -	      .byte	%00000010	; NEWCENTURY
    243  6e50				  -	      .byte	%00000010	; NEWCENTURY
    244  6e50				  -	      .byte	%01111100	; NEWCENTURY
    245  6e50				  -	      .byte	%01000000	; NEWCENTURY
    246  6e50				  -	      .byte	%01000000	; NEWCENTURY
    247  6e50				  -	      .byte	%01111000	; NEWCENTURY
    248  6e50				  -
    249  6e50				  -			;byte %00000000 ; NEWCENTURY
    250  6e50				  -
    251  6e50				  -	      .byte	%00111100	; NEWCENTURY
    252  6e50				  -	      .byte	%01000010	; NEWCENTURY
    253  6e50				  -	      .byte	%01000010	; NEWCENTURY
    254  6e50				  -	      .byte	%01000010	; NEWCENTURY
    255  6e50				  -	      .byte	%01111100	; NEWCENTURY
    256  6e50				  -	      .byte	%01000000	; NEWCENTURY
    257  6e50				  -	      .byte	%01000000	; NEWCENTURY
    258  6e50				  -	      .byte	%00110000	; NEWCENTURY
    259  6e50				  -
    260  6e50				  -			;byte %00000000 ; NEWCENTURY
    261  6e50				  -
    262  6e50				  -	      .byte	%00010000	; NEWCENTURY
    263  6e50				  -	      .byte	%00010000	; NEWCENTURY
    264  6e50				  -	      .byte	%00001000	; NEWCENTURY
    265  6e50				  -	      .byte	%00001000	; NEWCENTURY
    266  6e50				  -	      .byte	%00000100	; NEWCENTURY
    267  6e50				  -	      .byte	%00000100	; NEWCENTURY
    268  6e50				  -	      .byte	%00000010	; NEWCENTURY
    269  6e50				  -	      .byte	%00011110	; NEWCENTURY
    270  6e50				  -
    271  6e50				  -			;byte %00000000 ; NEWCENTURY
    272  6e50				  -
    273  6e50				  -	      .byte	%00111100	; NEWCENTURY
    274  6e50				  -	      .byte	%01000010	; NEWCENTURY
    275  6e50				  -	      .byte	%01000010	; NEWCENTURY
    276  6e50				  -	      .byte	%01000010	; NEWCENTURY
    277  6e50				  -	      .byte	%00111100	; NEWCENTURY
    278  6e50				  -	      .byte	%00100100	; NEWCENTURY
    279  6e50				  -	      .byte	%00100100	; NEWCENTURY
    280  6e50				  -	      .byte	%00011000	; NEWCENTURY
    281  6e50				  -
    282  6e50				  -			;byte %00000000 ; NEWCENTURY
    283  6e50				  -
    284  6e50				  -	      .byte	%00111100	; NEWCENTURY
    285  6e50				  -	      .byte	%00000010	; NEWCENTURY
    286  6e50				  -	      .byte	%00000010	; NEWCENTURY
    287  6e50				  -	      .byte	%00000010	; NEWCENTURY
    288  6e50				  -	      .byte	%00001110	; NEWCENTURY
    289  6e50				  -	      .byte	%00010010	; NEWCENTURY
    290  6e50				  -	      .byte	%00010010	; NEWCENTURY
    291  6e50				  -	      .byte	%00001100	; NEWCENTURY
    292  6e50				  -
    293  6e50					      endif		; NEWCENTURY
    294  6e50
    295  6e50				  -	      if	fontstyle == WHIMSEY
    296  6e50				  -			;byte %00000000 ; WHIMSEY
    297  6e50				  -
    298  6e50				  -	      .byte	%00111100	; WHIMSEY
    299  6e50				  -	      .byte	%01111110	; WHIMSEY
    300  6e50				  -	      .byte	%01111110	; WHIMSEY
    301  6e50				  -	      .byte	%01111110	; WHIMSEY
    302  6e50				  -	      .byte	%01110110	; WHIMSEY
    303  6e50				  -	      .byte	%01110110	; WHIMSEY
    304  6e50				  -	      .byte	%01110110	; WHIMSEY
    305  6e50				  -	      .byte	%00111100	; WHIMSEY
    306  6e50				  -
    307  6e50				  -			;byte %00000000 ; WHIMSEY
    308  6e50				  -
    309  6e50				  -	      .byte	%01111110	; WHIMSEY
    310  6e50				  -	      .byte	%01111110	; WHIMSEY
    311  6e50				  -	      .byte	%01111110	; WHIMSEY
    312  6e50				  -	      .byte	%00011000	; WHIMSEY
    313  6e50				  -	      .byte	%00011000	; WHIMSEY
    314  6e50				  -	      .byte	%00011000	; WHIMSEY
    315  6e50				  -	      .byte	%01111000	; WHIMSEY
    316  6e50				  -	      .byte	%00011000	; WHIMSEY
    317  6e50				  -
    318  6e50				  -			;byte %00000000 ; WHIMSEY
    319  6e50				  -
    320  6e50				  -	      .byte	%01111110	; WHIMSEY
    321  6e50				  -	      .byte	%01111110	; WHIMSEY
    322  6e50				  -	      .byte	%01111110	; WHIMSEY
    323  6e50				  -	      .byte	%01111000	; WHIMSEY
    324  6e50				  -	      .byte	%00111100	; WHIMSEY
    325  6e50				  -	      .byte	%00001110	; WHIMSEY
    326  6e50				  -	      .byte	%01100110	; WHIMSEY
    327  6e50				  -	      .byte	%00111100	; WHIMSEY
    328  6e50				  -
    329  6e50				  -			;byte %00000000 ; WHIMSEY
    330  6e50				  -
    331  6e50				  -	      .byte	%00111100	; WHIMSEY
    332  6e50				  -	      .byte	%01111110	; WHIMSEY
    333  6e50				  -	      .byte	%01111110	; WHIMSEY
    334  6e50				  -	      .byte	%01101110	; WHIMSEY
    335  6e50				  -	      .byte	%00001110	; WHIMSEY
    336  6e50				  -	      .byte	%00111100	; WHIMSEY
    337  6e50				  -	      .byte	%00011100	; WHIMSEY
    338  6e50				  -	      .byte	%01111110	; WHIMSEY
    339  6e50				  -
    340  6e50				  -			;byte %00000000 ; WHIMSEY
    341  6e50				  -
    342  6e50				  -	      .byte	%00011100	; WHIMSEY
    343  6e50				  -	      .byte	%00011100	; WHIMSEY
    344  6e50				  -	      .byte	%01111110	; WHIMSEY
    345  6e50				  -	      .byte	%01011100	; WHIMSEY
    346  6e50				  -	      .byte	%01011100	; WHIMSEY
    347  6e50				  -	      .byte	%00011100	; WHIMSEY
    348  6e50				  -	      .byte	%00011100	; WHIMSEY
    349  6e50				  -	      .byte	%00011100	; WHIMSEY
    350  6e50				  -
    351  6e50				  -			;byte %00000000 ; WHIMSEY
    352  6e50				  -
    353  6e50				  -	      .byte	%00111100	; WHIMSEY
    354  6e50				  -	      .byte	%01111110	; WHIMSEY
    355  6e50				  -	      .byte	%01111110	; WHIMSEY
    356  6e50				  -	      .byte	%01101110	; WHIMSEY
    357  6e50				  -	      .byte	%00001110	; WHIMSEY
    358  6e50				  -	      .byte	%01111100	; WHIMSEY
    359  6e50				  -	      .byte	%01110000	; WHIMSEY
    360  6e50				  -	      .byte	%01111110	; WHIMSEY
    361  6e50				  -
    362  6e50				  -			;byte %00000000 ; WHIMSEY
    363  6e50				  -
    364  6e50				  -	      .byte	%00111100	; WHIMSEY
    365  6e50				  -	      .byte	%01111110	; WHIMSEY
    366  6e50				  -	      .byte	%01111110	; WHIMSEY
    367  6e50				  -	      .byte	%01110110	; WHIMSEY
    368  6e50				  -	      .byte	%01110110	; WHIMSEY
    369  6e50				  -	      .byte	%01111100	; WHIMSEY
    370  6e50				  -	      .byte	%01110000	; WHIMSEY
    371  6e50				  -	      .byte	%00111110	; WHIMSEY
    372  6e50				  -
    373  6e50				  -			;byte %00000000 ; WHIMSEY
    374  6e50				  -
    375  6e50				  -	      .byte	%01111000	; WHIMSEY
    376  6e50				  -	      .byte	%01111000	; WHIMSEY
    377  6e50				  -	      .byte	%01111000	; WHIMSEY
    378  6e50				  -	      .byte	%00111100	; WHIMSEY
    379  6e50				  -	      .byte	%00011100	; WHIMSEY
    380  6e50				  -	      .byte	%00001110	; WHIMSEY
    381  6e50				  -	      .byte	%00001110	; WHIMSEY
    382  6e50				  -	      .byte	%01111110	; WHIMSEY
    383  6e50				  -
    384  6e50				  -			;byte %00000000 ; WHIMSEY
    385  6e50				  -
    386  6e50				  -	      .byte	%00111100	; WHIMSEY
    387  6e50				  -	      .byte	%01111110	; WHIMSEY
    388  6e50				  -	      .byte	%01111110	; WHIMSEY
    389  6e50				  -	      .byte	%01110110	; WHIMSEY
    390  6e50				  -	      .byte	%01110110	; WHIMSEY
    391  6e50				  -	      .byte	%00111100	; WHIMSEY
    392  6e50				  -	      .byte	%01110110	; WHIMSEY
    393  6e50				  -	      .byte	%00111100	; WHIMSEY
    394  6e50				  -
    395  6e50				  -			;byte %00000000 ; WHIMSEY
    396  6e50				  -
    397  6e50				  -	      .byte	%00111100	; WHIMSEY
    398  6e50				  -	      .byte	%01111110	; WHIMSEY
    399  6e50				  -	      .byte	%01111110	; WHIMSEY
    400  6e50				  -	      .byte	%01110110	; WHIMSEY
    401  6e50				  -	      .byte	%00000110	; WHIMSEY
    402  6e50				  -	      .byte	%00111110	; WHIMSEY
    403  6e50				  -	      .byte	%01110110	; WHIMSEY
    404  6e50				  -	      .byte	%00111100	; WHIMSEY
    405  6e50				  -
    406  6e50					      endif		; WHIMSEY
    407  6e50
    408  6e50				  -	      if	fontstyle == ALARMCLOCK
    409  6e50				  -
    410  6e50				  -			;byte %00000000 ; ALARMCLOCK
    411  6e50				  -
    412  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    413  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    414  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    415  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    416  6e50				  -	      .byte	%00000000	; ALARMCLOCK
    417  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    418  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    419  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    420  6e50				  -
    421  6e50				  -			;byte %00000000 ; ALARMCLOCK
    422  6e50				  -
    423  6e50				  -	      .byte	%00000000	; ALARMCLOCK
    424  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    425  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    426  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    427  6e50				  -	      .byte	%00000000	; ALARMCLOCK
    428  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    429  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    430  6e50				  -	      .byte	%00000000	; ALARMCLOCK
    431  6e50				  -
    432  6e50				  -			;byte %00000000 ; ALARMCLOCK
    433  6e50				  -
    434  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    435  6e50				  -	      .byte	%01000000	; ALARMCLOCK
    436  6e50				  -	      .byte	%01000000	; ALARMCLOCK
    437  6e50				  -	      .byte	%01000000	; ALARMCLOCK
    438  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    439  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    440  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    441  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    442  6e50				  -
    443  6e50				  -			;byte %00000000 ; ALARMCLOCK
    444  6e50				  -
    445  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    446  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    447  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    448  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    449  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    450  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    451  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    452  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    453  6e50				  -
    454  6e50				  -			;byte %00000000 ; ALARMCLOCK
    455  6e50				  -
    456  6e50				  -	      .byte	%00000000	; ALARMCLOCK
    457  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    458  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    459  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    460  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    461  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    462  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    463  6e50				  -	      .byte	%00000000	; ALARMCLOCK
    464  6e50				  -
    465  6e50				  -			;byte %00000000 ; ALARMCLOCK
    466  6e50				  -
    467  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    468  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    469  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    470  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    471  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    472  6e50				  -	      .byte	%01000000	; ALARMCLOCK
    473  6e50				  -	      .byte	%01000000	; ALARMCLOCK
    474  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    475  6e50				  -
    476  6e50				  -			;byte %00000000 ; ALARMCLOCK
    477  6e50				  -
    478  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    479  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    480  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    481  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    482  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    483  6e50				  -	      .byte	%01000000	; ALARMCLOCK
    484  6e50				  -	      .byte	%01000000	; ALARMCLOCK
    485  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    486  6e50				  -
    487  6e50				  -			;byte %00000000 ; ALARMCLOCK
    488  6e50				  -
    489  6e50				  -	      .byte	%00000000	; ALARMCLOCK
    490  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    491  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    492  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    493  6e50				  -	      .byte	%00000000	; ALARMCLOCK
    494  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    495  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    496  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    497  6e50				  -
    498  6e50				  -			;byte %00000000 ; ALARMCLOCK
    499  6e50				  -
    500  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    501  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    502  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    503  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    504  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    505  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    506  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    507  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    508  6e50				  -
    509  6e50				  -			;byte %00000000 ; ALARMCLOCK
    510  6e50				  -
    511  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    512  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    513  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    514  6e50				  -	      .byte	%00000010	; ALARMCLOCK
    515  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    516  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    517  6e50				  -	      .byte	%01000010	; ALARMCLOCK
    518  6e50				  -	      .byte	%00111100	; ALARMCLOCK
    519  6e50				  -
    520  6e50				  -
    521  6e50					      endif		; ALARMCLOCK
    522  6e50
    523  6e50				  -	      if	fontstyle == HANDWRITTEN
    524  6e50				  -
    525  6e50				  -			;byte %00000000 ; HANDWRITTEN
    526  6e50				  -
    527  6e50				  -	      .byte	%00110000	; HANDWRITTEN
    528  6e50				  -	      .byte	%01001000	; HANDWRITTEN
    529  6e50				  -	      .byte	%01001000	; HANDWRITTEN
    530  6e50				  -	      .byte	%01001000	; HANDWRITTEN
    531  6e50				  -	      .byte	%00100100	; HANDWRITTEN
    532  6e50				  -	      .byte	%00100100	; HANDWRITTEN
    533  6e50				  -	      .byte	%00010010	; HANDWRITTEN
    534  6e50				  -	      .byte	%00001100	; HANDWRITTEN
    535  6e50				  -
    536  6e50				  -			;byte %00000000 ; HANDWRITTEN
    537  6e50				  -
    538  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    539  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    540  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    541  6e50				  -	      .byte	%00001000	; HANDWRITTEN
    542  6e50				  -	      .byte	%00001000	; HANDWRITTEN
    543  6e50				  -	      .byte	%00001000	; HANDWRITTEN
    544  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    545  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    546  6e50				  -
    547  6e50				  -			;byte %00000000 ; HANDWRITTEN
    548  6e50				  -
    549  6e50				  -	      .byte	%01110000	; HANDWRITTEN
    550  6e50				  -	      .byte	%01001100	; HANDWRITTEN
    551  6e50				  -	      .byte	%01000000	; HANDWRITTEN
    552  6e50				  -	      .byte	%00100000	; HANDWRITTEN
    553  6e50				  -	      .byte	%00011000	; HANDWRITTEN
    554  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    555  6e50				  -	      .byte	%00100010	; HANDWRITTEN
    556  6e50				  -	      .byte	%00011100	; HANDWRITTEN
    557  6e50				  -
    558  6e50				  -			;byte %00000000 ; HANDWRITTEN
    559  6e50				  -
    560  6e50				  -	      .byte	%00110000	; HANDWRITTEN
    561  6e50				  -	      .byte	%01001000	; HANDWRITTEN
    562  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    563  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    564  6e50				  -	      .byte	%00011000	; HANDWRITTEN
    565  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    566  6e50				  -	      .byte	%00100010	; HANDWRITTEN
    567  6e50				  -	      .byte	%00011100	; HANDWRITTEN
    568  6e50				  -
    569  6e50				  -			;byte %00000000 ; HANDWRITTEN
    570  6e50				  -
    571  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    572  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    573  6e50				  -	      .byte	%00001000	; HANDWRITTEN
    574  6e50				  -	      .byte	%01111000	; HANDWRITTEN
    575  6e50				  -	      .byte	%01000100	; HANDWRITTEN
    576  6e50				  -	      .byte	%00100100	; HANDWRITTEN
    577  6e50				  -	      .byte	%00010010	; HANDWRITTEN
    578  6e50				  -	      .byte	%00000010	; HANDWRITTEN
    579  6e50				  -
    580  6e50				  -			;byte %00000000 ; HANDWRITTEN
    581  6e50				  -
    582  6e50				  -	      .byte	%00110000	; HANDWRITTEN
    583  6e50				  -	      .byte	%01001000	; HANDWRITTEN
    584  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    585  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    586  6e50				  -	      .byte	%00011000	; HANDWRITTEN
    587  6e50				  -	      .byte	%00100000	; HANDWRITTEN
    588  6e50				  -	      .byte	%00010010	; HANDWRITTEN
    589  6e50				  -	      .byte	%00001100	; HANDWRITTEN
    590  6e50				  -
    591  6e50				  -			;byte %00000000 ; HANDWRITTEN
    592  6e50				  -
    593  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    594  6e50				  -	      .byte	%00101000	; HANDWRITTEN
    595  6e50				  -	      .byte	%00100100	; HANDWRITTEN
    596  6e50				  -	      .byte	%00100100	; HANDWRITTEN
    597  6e50				  -	      .byte	%00011000	; HANDWRITTEN
    598  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    599  6e50				  -	      .byte	%00001000	; HANDWRITTEN
    600  6e50				  -	      .byte	%00000110	; HANDWRITTEN
    601  6e50				  -
    602  6e50				  -			;byte %00000000 ; HANDWRITTEN
    603  6e50				  -
    604  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    605  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    606  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    607  6e50				  -	      .byte	%00001000	; HANDWRITTEN
    608  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    609  6e50				  -	      .byte	%00000100	; HANDWRITTEN
    610  6e50				  -	      .byte	%00110010	; HANDWRITTEN
    611  6e50				  -	      .byte	%00001110	; HANDWRITTEN
    612  6e50				  -
    613  6e50				  -			;byte %00000000 ; HANDWRITTEN
    614  6e50				  -
    615  6e50				  -	      .byte	%00110000	; HANDWRITTEN
    616  6e50				  -	      .byte	%01001000	; HANDWRITTEN
    617  6e50				  -	      .byte	%01000100	; HANDWRITTEN
    618  6e50				  -	      .byte	%00100100	; HANDWRITTEN
    619  6e50				  -	      .byte	%00011100	; HANDWRITTEN
    620  6e50				  -	      .byte	%00010010	; HANDWRITTEN
    621  6e50				  -	      .byte	%00001010	; HANDWRITTEN
    622  6e50				  -	      .byte	%00000110	; HANDWRITTEN
    623  6e50				  -
    624  6e50				  -			;byte %00000000 ; HANDWRITTEN
    625  6e50				  -
    626  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    627  6e50				  -	      .byte	%00010000	; HANDWRITTEN
    628  6e50				  -	      .byte	%00001000	; HANDWRITTEN
    629  6e50				  -	      .byte	%00001000	; HANDWRITTEN
    630  6e50				  -	      .byte	%00011100	; HANDWRITTEN
    631  6e50				  -	      .byte	%00100100	; HANDWRITTEN
    632  6e50				  -	      .byte	%00010010	; HANDWRITTEN
    633  6e50				  -	      .byte	%00001100	; HANDWRITTEN
    634  6e50				  -
    635  6e50					      endif		; HANDWRITTEN
    636  6e50
    637  6e50				  -	      if	fontstyle == INTERRUPTED
    638  6e50				  -
    639  6e50				  -			;byte %00000000 ; INTERRUPTED
    640  6e50				  -
    641  6e50				  -	      .byte	%00110100	; INTERRUPTED
    642  6e50				  -	      .byte	%01100110	; INTERRUPTED
    643  6e50				  -	      .byte	%01100110	; INTERRUPTED
    644  6e50				  -	      .byte	%01100110	; INTERRUPTED
    645  6e50				  -	      .byte	%01100110	; INTERRUPTED
    646  6e50				  -	      .byte	%01100110	; INTERRUPTED
    647  6e50				  -	      .byte	%01100110	; INTERRUPTED
    648  6e50				  -	      .byte	%00110100	; INTERRUPTED
    649  6e50				  -
    650  6e50				  -			;byte %00000000 ; INTERRUPTED
    651  6e50				  -
    652  6e50				  -	      .byte	%00111100	; INTERRUPTED
    653  6e50				  -	      .byte	%00000000	; INTERRUPTED
    654  6e50				  -	      .byte	%00011000	; INTERRUPTED
    655  6e50				  -	      .byte	%00011000	; INTERRUPTED
    656  6e50				  -	      .byte	%00011000	; INTERRUPTED
    657  6e50				  -	      .byte	%00011000	; INTERRUPTED
    658  6e50				  -	      .byte	%00011000	; INTERRUPTED
    659  6e50				  -	      .byte	%00111000	; INTERRUPTED
    660  6e50				  -
    661  6e50				  -			;byte %00000000 ; INTERRUPTED
    662  6e50				  -
    663  6e50				  -	      .byte	%01101110	; INTERRUPTED
    664  6e50				  -	      .byte	%01100000	; INTERRUPTED
    665  6e50				  -	      .byte	%00110000	; INTERRUPTED
    666  6e50				  -	      .byte	%00011000	; INTERRUPTED
    667  6e50				  -	      .byte	%00001100	; INTERRUPTED
    668  6e50				  -	      .byte	%00000110	; INTERRUPTED
    669  6e50				  -	      .byte	%01000110	; INTERRUPTED
    670  6e50				  -	      .byte	%00111100	; INTERRUPTED
    671  6e50				  -
    672  6e50				  -			;byte %00000000 ; INTERRUPTED
    673  6e50				  -
    674  6e50				  -	      .byte	%01111100	; INTERRUPTED
    675  6e50				  -	      .byte	%00000110	; INTERRUPTED
    676  6e50				  -	      .byte	%00000110	; INTERRUPTED
    677  6e50				  -	      .byte	%00000110	; INTERRUPTED
    678  6e50				  -	      .byte	%01110110	; INTERRUPTED
    679  6e50				  -	      .byte	%00000110	; INTERRUPTED
    680  6e50				  -	      .byte	%00000110	; INTERRUPTED
    681  6e50				  -	      .byte	%01110100	; INTERRUPTED
    682  6e50				  -
    683  6e50				  -			;byte %00000000 ; INTERRUPTED
    684  6e50				  -
    685  6e50				  -	      .byte	%00000110	; INTERRUPTED
    686  6e50				  -	      .byte	%00000110	; INTERRUPTED
    687  6e50				  -	      .byte	%00000110	; INTERRUPTED
    688  6e50				  -	      .byte	%00000110	; INTERRUPTED
    689  6e50				  -	      .byte	%01110110	; INTERRUPTED
    690  6e50				  -	      .byte	%01100110	; INTERRUPTED
    691  6e50				  -	      .byte	%01100110	; INTERRUPTED
    692  6e50				  -	      .byte	%01100110	; INTERRUPTED
    693  6e50				  -
    694  6e50				  -			;byte %00000000 ; INTERRUPTED
    695  6e50				  -
    696  6e50				  -	      .byte	%01111100	; INTERRUPTED
    697  6e50				  -	      .byte	%00000110	; INTERRUPTED
    698  6e50				  -	      .byte	%00000110	; INTERRUPTED
    699  6e50				  -	      .byte	%00000110	; INTERRUPTED
    700  6e50				  -	      .byte	%01111100	; INTERRUPTED
    701  6e50				  -	      .byte	%01100000	; INTERRUPTED
    702  6e50				  -	      .byte	%01100000	; INTERRUPTED
    703  6e50				  -	      .byte	%01101110	; INTERRUPTED
    704  6e50				  -
    705  6e50				  -			;byte %00000000 ; INTERRUPTED
    706  6e50				  -
    707  6e50				  -	      .byte	%00101100	; INTERRUPTED
    708  6e50				  -	      .byte	%01100110	; INTERRUPTED
    709  6e50				  -	      .byte	%01100110	; INTERRUPTED
    710  6e50				  -	      .byte	%01100110	; INTERRUPTED
    711  6e50				  -	      .byte	%01101100	; INTERRUPTED
    712  6e50				  -	      .byte	%01100000	; INTERRUPTED
    713  6e50				  -	      .byte	%00110000	; INTERRUPTED
    714  6e50				  -	      .byte	%00011100	; INTERRUPTED
    715  6e50				  -
    716  6e50				  -			;byte %00000000 ; INTERRUPTED
    717  6e50				  -
    718  6e50				  -	      .byte	%00011000	; INTERRUPTED
    719  6e50				  -	      .byte	%00011000	; INTERRUPTED
    720  6e50				  -	      .byte	%00011000	; INTERRUPTED
    721  6e50				  -	      .byte	%00011100	; INTERRUPTED
    722  6e50				  -	      .byte	%00001110	; INTERRUPTED
    723  6e50				  -	      .byte	%00000110	; INTERRUPTED
    724  6e50				  -	      .byte	%00000000	; INTERRUPTED
    725  6e50				  -	      .byte	%01111110	; INTERRUPTED
    726  6e50				  -
    727  6e50				  -			;byte %00000000 ; INTERRUPTED
    728  6e50				  -
    729  6e50				  -	      .byte	%00110100	; INTERRUPTED
    730  6e50				  -	      .byte	%01100110	; INTERRUPTED
    731  6e50				  -	      .byte	%01100110	; INTERRUPTED
    732  6e50				  -	      .byte	%01100110	; INTERRUPTED
    733  6e50				  -	      .byte	%00110100	; INTERRUPTED
    734  6e50				  -	      .byte	%01100110	; INTERRUPTED
    735  6e50				  -	      .byte	%01100110	; INTERRUPTED
    736  6e50				  -	      .byte	%00110100	; INTERRUPTED
    737  6e50				  -
    738  6e50				  -			;byte %00000000 ; INTERRUPTED
    739  6e50				  -
    740  6e50				  -	      .byte	%00111000	; INTERRUPTED
    741  6e50				  -	      .byte	%00001100	; INTERRUPTED
    742  6e50				  -	      .byte	%00000110	; INTERRUPTED
    743  6e50				  -	      .byte	%00110110	; INTERRUPTED
    744  6e50				  -	      .byte	%01100110	; INTERRUPTED
    745  6e50				  -	      .byte	%01100110	; INTERRUPTED
    746  6e50				  -	      .byte	%01100110	; INTERRUPTED
    747  6e50				  -	      .byte	%00110100	; INTERRUPTED
    748  6e50				  -
    749  6e50					      endif		; INTERRUPTED
    750  6e50
    751  6e50
    752  6e50				  -	      if	fontstyle == TINY
    753  6e50				  -
    754  6e50				  -			;byte %00000000 ; TINY
    755  6e50				  -
    756  6e50				  -	      .byte	%00000000	; TINY
    757  6e50				  -	      .byte	%00111000	; TINY
    758  6e50				  -	      .byte	%00101000	; TINY
    759  6e50				  -	      .byte	%00101000	; TINY
    760  6e50				  -	      .byte	%00101000	; TINY
    761  6e50				  -	      .byte	%00111000	; TINY
    762  6e50				  -	      .byte	%00000000	; TINY
    763  6e50				  -	      .byte	%00000000	; TINY
    764  6e50				  -
    765  6e50				  -			;byte %00000000 ; TINY
    766  6e50				  -
    767  6e50				  -	      .byte	%00000000	; TINY
    768  6e50				  -	      .byte	%00010000	; TINY
    769  6e50				  -	      .byte	%00010000	; TINY
    770  6e50				  -	      .byte	%00010000	; TINY
    771  6e50				  -	      .byte	%00010000	; TINY
    772  6e50				  -	      .byte	%00010000	; TINY
    773  6e50				  -	      .byte	%00000000	; TINY
    774  6e50				  -	      .byte	%00000000	; TINY
    775  6e50				  -
    776  6e50				  -			;byte %00000000 ; TINY
    777  6e50				  -
    778  6e50				  -	      .byte	%00000000	; TINY
    779  6e50				  -	      .byte	%00111000	; TINY
    780  6e50				  -	      .byte	%00100000	; TINY
    781  6e50				  -	      .byte	%00111000	; TINY
    782  6e50				  -	      .byte	%00001000	; TINY
    783  6e50				  -	      .byte	%00111000	; TINY
    784  6e50				  -	      .byte	%00000000	; TINY
    785  6e50				  -	      .byte	%00000000	; TINY
    786  6e50				  -
    787  6e50				  -			;byte %00000000 ; TINY
    788  6e50				  -
    789  6e50				  -	      .byte	%00000000	; TINY
    790  6e50				  -	      .byte	%00111000	; TINY
    791  6e50				  -	      .byte	%00001000	; TINY
    792  6e50				  -	      .byte	%00111000	; TINY
    793  6e50				  -	      .byte	%00001000	; TINY
    794  6e50				  -	      .byte	%00111000	; TINY
    795  6e50				  -	      .byte	%00000000	; TINY
    796  6e50				  -	      .byte	%00000000	; TINY
    797  6e50				  -
    798  6e50				  -			;byte %00000000 ; TINY
    799  6e50				  -
    800  6e50				  -	      .byte	%00000000	; TINY
    801  6e50				  -	      .byte	%00001000	; TINY
    802  6e50				  -	      .byte	%00001000	; TINY
    803  6e50				  -	      .byte	%00111000	; TINY
    804  6e50				  -	      .byte	%00101000	; TINY
    805  6e50				  -	      .byte	%00101000	; TINY
    806  6e50				  -	      .byte	%00000000	; TINY
    807  6e50				  -	      .byte	%00000000	; TINY
    808  6e50				  -
    809  6e50				  -			;byte %00000000 ; TINY
    810  6e50				  -
    811  6e50				  -	      .byte	%00000000	; TINY
    812  6e50				  -	      .byte	%00111000	; TINY
    813  6e50				  -	      .byte	%00001000	; TINY
    814  6e50				  -	      .byte	%00111000	; TINY
    815  6e50				  -	      .byte	%00100000	; TINY
    816  6e50				  -	      .byte	%00111000	; TINY
    817  6e50				  -	      .byte	%00000000	; TINY
    818  6e50				  -	      .byte	%00000000	; TINY
    819  6e50				  -
    820  6e50				  -			;byte %00000000 ; TINY
    821  6e50				  -
    822  6e50				  -	      .byte	%00000000	; TINY
    823  6e50				  -	      .byte	%00111000	; TINY
    824  6e50				  -	      .byte	%00101000	; TINY
    825  6e50				  -	      .byte	%00111000	; TINY
    826  6e50				  -	      .byte	%00100000	; TINY
    827  6e50				  -	      .byte	%00111000	; TINY
    828  6e50				  -	      .byte	%00000000	; TINY
    829  6e50				  -	      .byte	%00000000	; TINY
    830  6e50				  -
    831  6e50				  -			;byte %00000000 ; TINY
    832  6e50				  -
    833  6e50				  -	      .byte	%00000000	; TINY
    834  6e50				  -	      .byte	%00001000	; TINY
    835  6e50				  -	      .byte	%00001000	; TINY
    836  6e50				  -	      .byte	%00001000	; TINY
    837  6e50				  -	      .byte	%00001000	; TINY
    838  6e50				  -	      .byte	%00111000	; TINY
    839  6e50				  -	      .byte	%00000000	; TINY
    840  6e50				  -	      .byte	%00000000	; TINY
    841  6e50				  -
    842  6e50				  -			;byte %00000000 ; TINY
    843  6e50				  -
    844  6e50				  -	      .byte	%00000000	; TINY
    845  6e50				  -	      .byte	%00111000	; TINY
    846  6e50				  -	      .byte	%00101000	; TINY
    847  6e50				  -	      .byte	%00111000	; TINY
    848  6e50				  -	      .byte	%00101000	; TINY
    849  6e50				  -	      .byte	%00111000	; TINY
    850  6e50				  -	      .byte	%00000000	; TINY
    851  6e50				  -	      .byte	%00000000	; TINY
    852  6e50				  -
    853  6e50				  -			;byte %00000000 ; TINY
    854  6e50				  -
    855  6e50				  -	      .byte	%00000000	; TINY
    856  6e50				  -	      .byte	%00001000	; TINY
    857  6e50				  -	      .byte	%00001000	; TINY
    858  6e50				  -	      .byte	%00111000	; TINY
    859  6e50				  -	      .byte	%00101000	; TINY
    860  6e50				  -	      .byte	%00111000	; TINY
    861  6e50				  -	      .byte	%00000000	; TINY
    862  6e50				  -	      .byte	%00000000	; TINY
    863  6e50				  -
    864  6e50					      endif		; TINY
    865  6e50
    866  6e50				  -	      if	fontstyle == RETROPUTER
    867  6e50				  -
    868  6e50				  -			;byte %00000000 ; RETROPUTER
    869  6e50				  -
    870  6e50				  -	      .byte	%01111110	; RETROPUTER
    871  6e50				  -	      .byte	%01000110	; RETROPUTER
    872  6e50				  -	      .byte	%01000110	; RETROPUTER
    873  6e50				  -	      .byte	%01000110	; RETROPUTER
    874  6e50				  -	      .byte	%01100010	; RETROPUTER
    875  6e50				  -	      .byte	%01100010	; RETROPUTER
    876  6e50				  -	      .byte	%01100010	; RETROPUTER
    877  6e50				  -	      .byte	%01111110	; RETROPUTER
    878  6e50				  -
    879  6e50				  -			;byte %00000000 ; RETROPUTER
    880  6e50				  -
    881  6e50				  -	      .byte	%00111000	; RETROPUTER
    882  6e50				  -	      .byte	%00111000	; RETROPUTER
    883  6e50				  -	      .byte	%00111000	; RETROPUTER
    884  6e50				  -	      .byte	%00111000	; RETROPUTER
    885  6e50				  -	      .byte	%00011000	; RETROPUTER
    886  6e50				  -	      .byte	%00011000	; RETROPUTER
    887  6e50				  -	      .byte	%00011000	; RETROPUTER
    888  6e50				  -	      .byte	%00011000	; RETROPUTER
    889  6e50				  -
    890  6e50				  -			;byte %00000000 ; RETROPUTER
    891  6e50				  -
    892  6e50				  -	      .byte	%01111110	; RETROPUTER
    893  6e50				  -	      .byte	%01100000	; RETROPUTER
    894  6e50				  -	      .byte	%01100000	; RETROPUTER
    895  6e50				  -	      .byte	%01100000	; RETROPUTER
    896  6e50				  -	      .byte	%00111110	; RETROPUTER
    897  6e50				  -	      .byte	%00000010	; RETROPUTER
    898  6e50				  -	      .byte	%01000010	; RETROPUTER
    899  6e50				  -	      .byte	%01111110	; RETROPUTER
    900  6e50				  -
    901  6e50				  -			;byte %00000000 ; RETROPUTER
    902  6e50				  -
    903  6e50				  -	      .byte	%01111110	; RETROPUTER
    904  6e50				  -	      .byte	%01000110	; RETROPUTER
    905  6e50				  -	      .byte	%00000110	; RETROPUTER
    906  6e50				  -	      .byte	%00000110	; RETROPUTER
    907  6e50				  -	      .byte	%00111110	; RETROPUTER
    908  6e50				  -	      .byte	%00000010	; RETROPUTER
    909  6e50				  -	      .byte	%01000010	; RETROPUTER
    910  6e50				  -	      .byte	%01111110	; RETROPUTER
    911  6e50				  -
    912  6e50				  -			;byte %00000000 ; RETROPUTER
    913  6e50				  -
    914  6e50				  -	      .byte	%00001100	; RETROPUTER
    915  6e50				  -	      .byte	%00001100	; RETROPUTER
    916  6e50				  -	      .byte	%00001100	; RETROPUTER
    917  6e50				  -	      .byte	%01111110	; RETROPUTER
    918  6e50				  -	      .byte	%01000100	; RETROPUTER
    919  6e50				  -	      .byte	%01000100	; RETROPUTER
    920  6e50				  -	      .byte	%01000100	; RETROPUTER
    921  6e50				  -	      .byte	%00000100	; RETROPUTER
    922  6e50				  -
    923  6e50				  -			;byte %00000000 ; RETROPUTER
    924  6e50				  -
    925  6e50				  -	      .byte	%01111110	; RETROPUTER
    926  6e50				  -	      .byte	%01000110	; RETROPUTER
    927  6e50				  -	      .byte	%00000110	; RETROPUTER
    928  6e50				  -	      .byte	%00000110	; RETROPUTER
    929  6e50				  -	      .byte	%01111100	; RETROPUTER
    930  6e50				  -	      .byte	%01000000	; RETROPUTER
    931  6e50				  -	      .byte	%01000000	; RETROPUTER
    932  6e50				  -	      .byte	%01111110	; RETROPUTER
    933  6e50				  -
    934  6e50				  -			;byte %00000000 ; RETROPUTER
    935  6e50				  -
    936  6e50				  -	      .byte	%01111110	; RETROPUTER
    937  6e50				  -	      .byte	%01000110	; RETROPUTER
    938  6e50				  -	      .byte	%01000110	; RETROPUTER
    939  6e50				  -	      .byte	%01000110	; RETROPUTER
    940  6e50				  -	      .byte	%01111100	; RETROPUTER
    941  6e50				  -	      .byte	%01000000	; RETROPUTER
    942  6e50				  -	      .byte	%01000010	; RETROPUTER
    943  6e50				  -	      .byte	%01111110	; RETROPUTER
    944  6e50				  -
    945  6e50				  -			;byte %00000000 ; RETROPUTER
    946  6e50				  -
    947  6e50				  -	      .byte	%00001100	; RETROPUTER
    948  6e50				  -	      .byte	%00001100	; RETROPUTER
    949  6e50				  -	      .byte	%00001100	; RETROPUTER
    950  6e50				  -	      .byte	%00001100	; RETROPUTER
    951  6e50				  -	      .byte	%00000100	; RETROPUTER
    952  6e50				  -	      .byte	%00000010	; RETROPUTER
    953  6e50				  -	      .byte	%01000010	; RETROPUTER
    954  6e50				  -	      .byte	%01111110	; RETROPUTER
    955  6e50				  -
    956  6e50				  -			;byte %00000000 ; RETROPUTER
    957  6e50				  -
    958  6e50				  -	      .byte	%01111110	; RETROPUTER
    959  6e50				  -	      .byte	%01000110	; RETROPUTER
    960  6e50				  -	      .byte	%01000110	; RETROPUTER
    961  6e50				  -	      .byte	%01000110	; RETROPUTER
    962  6e50				  -	      .byte	%01111110	; RETROPUTER
    963  6e50				  -	      .byte	%01000010	; RETROPUTER
    964  6e50				  -	      .byte	%01000010	; RETROPUTER
    965  6e50				  -	      .byte	%01111110	; RETROPUTER
    966  6e50				  -
    967  6e50				  -			;byte %00000000 ; RETROPUTER
    968  6e50				  -
    969  6e50				  -	      .byte	%00000110	; RETROPUTER
    970  6e50				  -	      .byte	%00000110	; RETROPUTER
    971  6e50				  -	      .byte	%00000110	; RETROPUTER
    972  6e50				  -	      .byte	%00000010	; RETROPUTER
    973  6e50				  -	      .byte	%01111110	; RETROPUTER
    974  6e50				  -	      .byte	%01000010	; RETROPUTER
    975  6e50				  -	      .byte	%01000010	; RETROPUTER
    976  6e50				  -	      .byte	%01111110	; RETROPUTER
    977  6e50				  -
    978  6e50					      endif		; RETROPUTER
    979  6e50
    980  6e50				  -	      if	fontstyle == CURVES
    981  6e50				  -
    982  6e50				  -			;byte %00000000 ; CURVES
    983  6e50				  -
    984  6e50				  -	      .byte	%00111100	; CURVES
    985  6e50				  -	      .byte	%01111110	; CURVES
    986  6e50				  -	      .byte	%01100110	; CURVES
    987  6e50				  -	      .byte	%01100110	; CURVES
    988  6e50				  -	      .byte	%01100110	; CURVES
    989  6e50				  -	      .byte	%01100110	; CURVES
    990  6e50				  -	      .byte	%01111110	; CURVES
    991  6e50				  -	      .byte	%00111100	; CURVES
    992  6e50				  -
    993  6e50				  -			;byte %00000000 ; CURVES
    994  6e50				  -
    995  6e50				  -	      .byte	%00011000	; CURVES
    996  6e50				  -	      .byte	%00011000	; CURVES
    997  6e50				  -	      .byte	%00011000	; CURVES
    998  6e50				  -	      .byte	%00011000	; CURVES
    999  6e50				  -	      .byte	%00011000	; CURVES
   1000  6e50				  -	      .byte	%00011000	; CURVES
   1001  6e50				  -	      .byte	%01111000	; CURVES
   1002  6e50				  -	      .byte	%01110000	; CURVES
   1003  6e50				  -
   1004  6e50				  -			;byte %00000000 ; CURVES
   1005  6e50				  -
   1006  6e50				  -	      .byte	%01111110	; CURVES
   1007  6e50				  -	      .byte	%01111110	; CURVES
   1008  6e50				  -	      .byte	%01100000	; CURVES
   1009  6e50				  -	      .byte	%01111100	; CURVES
   1010  6e50				  -	      .byte	%00111110	; CURVES
   1011  6e50				  -	      .byte	%00000110	; CURVES
   1012  6e50				  -	      .byte	%01111110	; CURVES
   1013  6e50				  -	      .byte	%01111100	; CURVES
   1014  6e50				  -
   1015  6e50				  -			;byte %00000000 ; CURVES
   1016  6e50				  -
   1017  6e50				  -	      .byte	%01111100	; CURVES
   1018  6e50				  -	      .byte	%01111110	; CURVES
   1019  6e50				  -	      .byte	%00001110	; CURVES
   1020  6e50				  -	      .byte	%00111100	; CURVES
   1021  6e50				  -	      .byte	%00111100	; CURVES
   1022  6e50				  -	      .byte	%00001110	; CURVES
   1023  6e50				  -	      .byte	%01111110	; CURVES
   1024  6e50				  -	      .byte	%01111100	; CURVES
   1025  6e50				  -
   1026  6e50				  -			;byte %00000000 ; CURVES
   1027  6e50				  -
   1028  6e50				  -	      .byte	%00000110	; CURVES
   1029  6e50				  -	      .byte	%00000110	; CURVES
   1030  6e50				  -	      .byte	%00111110	; CURVES
   1031  6e50				  -	      .byte	%01111110	; CURVES
   1032  6e50				  -	      .byte	%01100110	; CURVES
   1033  6e50				  -	      .byte	%01100110	; CURVES
   1034  6e50				  -	      .byte	%01100110	; CURVES
   1035  6e50				  -	      .byte	%01100110	; CURVES
   1036  6e50				  -
   1037  6e50				  -			;byte %00000000 ; CURVES
   1038  6e50				  -
   1039  6e50				  -	      .byte	%01111100	; CURVES
   1040  6e50				  -	      .byte	%01111110	; CURVES
   1041  6e50				  -	      .byte	%00000110	; CURVES
   1042  6e50				  -	      .byte	%01111110	; CURVES
   1043  6e50				  -	      .byte	%01111100	; CURVES
   1044  6e50				  -	      .byte	%01100000	; CURVES
   1045  6e50				  -	      .byte	%01111110	; CURVES
   1046  6e50				  -	      .byte	%01111110	; CURVES
   1047  6e50				  -
   1048  6e50				  -			;byte %00000000 ; CURVES
   1049  6e50				  -
   1050  6e50				  -	      .byte	%00111100	; CURVES
   1051  6e50				  -	      .byte	%01111110	; CURVES
   1052  6e50				  -	      .byte	%01100110	; CURVES
   1053  6e50				  -	      .byte	%01111110	; CURVES
   1054  6e50				  -	      .byte	%01111100	; CURVES
   1055  6e50				  -	      .byte	%01100000	; CURVES
   1056  6e50				  -	      .byte	%01111110	; CURVES
   1057  6e50				  -	      .byte	%00111110	; CURVES
   1058  6e50				  -
   1059  6e50				  -			;byte %00000000 ; CURVES
   1060  6e50				  -
   1061  6e50				  -	      .byte	%00000110	; CURVES
   1062  6e50				  -	      .byte	%00000110	; CURVES
   1063  6e50				  -	      .byte	%00000110	; CURVES
   1064  6e50				  -	      .byte	%00000110	; CURVES
   1065  6e50				  -	      .byte	%00000110	; CURVES
   1066  6e50				  -	      .byte	%01100110	; CURVES
   1067  6e50				  -	      .byte	%01111110	; CURVES
   1068  6e50				  -	      .byte	%00111100	; CURVES
   1069  6e50				  -
   1070  6e50				  -			;byte %00000000 ; CURVES
   1071  6e50				  -
   1072  6e50				  -	      .byte	%00111100	; CURVES
   1073  6e50				  -	      .byte	%01111110	; CURVES
   1074  6e50				  -	      .byte	%01100110	; CURVES
   1075  6e50				  -	      .byte	%01111110	; CURVES
   1076  6e50				  -	      .byte	%00111100	; CURVES
   1077  6e50				  -	      .byte	%01100110	; CURVES
   1078  6e50				  -	      .byte	%01111110	; CURVES
   1079  6e50				  -	      .byte	%00111100	; CURVES
   1080  6e50				  -
   1081  6e50				  -			;byte %00000000 ; CURVES
   1082  6e50				  -
   1083  6e50				  -	      .byte	%01111100	; CURVES
   1084  6e50				  -	      .byte	%01111110	; CURVES
   1085  6e50				  -	      .byte	%00000110	; CURVES
   1086  6e50				  -	      .byte	%00111110	; CURVES
   1087  6e50				  -	      .byte	%01111110	; CURVES
   1088  6e50				  -	      .byte	%01100110	; CURVES
   1089  6e50				  -	      .byte	%01111110	; CURVES
   1090  6e50				  -	      .byte	%00111100	; CURVES
   1091  6e50				  -
   1092  6e50					      endif		; CURVES
   1093  6e50
   1094  6e50
   1095  6e50				  -	      if	fontstyle == HUSKY
   1096  6e50				  -
   1097  6e50				  -			;byte %00000000 ; HUSKY
   1098  6e50				  -
   1099  6e50				  -	      .byte	%01111100	; HUSKY
   1100  6e50				  -	      .byte	%11111110	; HUSKY
   1101  6e50				  -	      .byte	%11101110	; HUSKY
   1102  6e50				  -	      .byte	%11101110	; HUSKY
   1103  6e50				  -	      .byte	%11101110	; HUSKY
   1104  6e50				  -	      .byte	%11101110	; HUSKY
   1105  6e50				  -	      .byte	%11111110	; HUSKY
   1106  6e50				  -	      .byte	%01111100	; HUSKY
   1107  6e50				  -
   1108  6e50				  -			;byte %00000000 ; HUSKY
   1109  6e50				  -
   1110  6e50				  -	      .byte	%00111000	; HUSKY
   1111  6e50				  -	      .byte	%00111000	; HUSKY
   1112  6e50				  -	      .byte	%00111000	; HUSKY
   1113  6e50				  -	      .byte	%00111000	; HUSKY
   1114  6e50				  -	      .byte	%00111000	; HUSKY
   1115  6e50				  -	      .byte	%00111000	; HUSKY
   1116  6e50				  -	      .byte	%00111000	; HUSKY
   1117  6e50				  -	      .byte	%00111000	; HUSKY
   1118  6e50				  -
   1119  6e50				  -			;byte %00000000 ; HUSKY
   1120  6e50				  -
   1121  6e50				  -	      .byte	%11111110	; HUSKY
   1122  6e50				  -	      .byte	%11111110	; HUSKY
   1123  6e50				  -	      .byte	%11100000	; HUSKY
   1124  6e50				  -	      .byte	%11111100	; HUSKY
   1125  6e50				  -	      .byte	%01111110	; HUSKY
   1126  6e50				  -	      .byte	%00001110	; HUSKY
   1127  6e50				  -	      .byte	%11111110	; HUSKY
   1128  6e50				  -	      .byte	%11111100	; HUSKY
   1129  6e50				  -
   1130  6e50				  -			;byte %00000000 ; HUSKY
   1131  6e50				  -
   1132  6e50				  -	      .byte	%11111100	; HUSKY
   1133  6e50				  -	      .byte	%11111110	; HUSKY
   1134  6e50				  -	      .byte	%00001110	; HUSKY
   1135  6e50				  -	      .byte	%11111100	; HUSKY
   1136  6e50				  -	      .byte	%11111100	; HUSKY
   1137  6e50				  -	      .byte	%00001110	; HUSKY
   1138  6e50				  -	      .byte	%11111110	; HUSKY
   1139  6e50				  -	      .byte	%11111100	; HUSKY
   1140  6e50				  -
   1141  6e50				  -			;byte %00000000 ; HUSKY
   1142  6e50				  -
   1143  6e50				  -	      .byte	%00011100	; HUSKY
   1144  6e50				  -	      .byte	%00011100	; HUSKY
   1145  6e50				  -	      .byte	%11111110	; HUSKY
   1146  6e50				  -	      .byte	%11111110	; HUSKY
   1147  6e50				  -	      .byte	%11011100	; HUSKY
   1148  6e50				  -	      .byte	%11011100	; HUSKY
   1149  6e50				  -	      .byte	%00011100	; HUSKY
   1150  6e50				  -	      .byte	%00011100	; HUSKY
   1151  6e50				  -
   1152  6e50				  -			;byte %00000000 ; HUSKY
   1153  6e50				  -
   1154  6e50				  -	      .byte	%11111100	; HUSKY
   1155  6e50				  -	      .byte	%11111110	; HUSKY
   1156  6e50				  -	      .byte	%00001110	; HUSKY
   1157  6e50				  -	      .byte	%11111110	; HUSKY
   1158  6e50				  -	      .byte	%11111100	; HUSKY
   1159  6e50				  -	      .byte	%11100000	; HUSKY
   1160  6e50				  -	      .byte	%11111110	; HUSKY
   1161  6e50				  -	      .byte	%11111110	; HUSKY
   1162  6e50				  -
   1163  6e50				  -			;byte %00000000 ; HUSKY
   1164  6e50				  -
   1165  6e50				  -	      .byte	%01111100	; HUSKY
   1166  6e50				  -	      .byte	%11111110	; HUSKY
   1167  6e50				  -	      .byte	%11101110	; HUSKY
   1168  6e50				  -	      .byte	%11111110	; HUSKY
   1169  6e50				  -	      .byte	%11111100	; HUSKY
   1170  6e50				  -	      .byte	%11100000	; HUSKY
   1171  6e50				  -	      .byte	%11111110	; HUSKY
   1172  6e50				  -	      .byte	%01111110	; HUSKY
   1173  6e50				  -
   1174  6e50				  -			;byte %00000000 ; HUSKY
   1175  6e50				  -
   1176  6e50				  -	      .byte	%00111000	; HUSKY
   1177  6e50				  -	      .byte	%00111000	; HUSKY
   1178  6e50				  -	      .byte	%00111000	; HUSKY
   1179  6e50				  -	      .byte	%00111000	; HUSKY
   1180  6e50				  -	      .byte	%00011100	; HUSKY
   1181  6e50				  -	      .byte	%00001110	; HUSKY
   1182  6e50				  -	      .byte	%11111110	; HUSKY
   1183  6e50				  -	      .byte	%11111110	; HUSKY
   1184  6e50				  -
   1185  6e50				  -			;byte %00000000 ; HUSKY
   1186  6e50				  -
   1187  6e50				  -	      .byte	%01111100	; HUSKY
   1188  6e50				  -	      .byte	%11111110	; HUSKY
   1189  6e50				  -	      .byte	%11101110	; HUSKY
   1190  6e50				  -	      .byte	%11111110	; HUSKY
   1191  6e50				  -	      .byte	%01111100	; HUSKY
   1192  6e50				  -	      .byte	%11101110	; HUSKY
   1193  6e50				  -	      .byte	%11111110	; HUSKY
   1194  6e50				  -	      .byte	%01111100	; HUSKY
   1195  6e50				  -
   1196  6e50				  -			;byte %00000000 ; HUSKY
   1197  6e50				  -
   1198  6e50				  -	      .byte	%11111100	; HUSKY
   1199  6e50				  -	      .byte	%11111110	; HUSKY
   1200  6e50				  -	      .byte	%00001110	; HUSKY
   1201  6e50				  -	      .byte	%01111110	; HUSKY
   1202  6e50				  -	      .byte	%11111110	; HUSKY
   1203  6e50				  -	      .byte	%11101110	; HUSKY
   1204  6e50				  -	      .byte	%11111110	; HUSKY
   1205  6e50				  -	      .byte	%01111100	; HUSKY
   1206  6e50				  -
   1207  6e50					      endif		; HUSKY
   1208  6e50
   1209  6e50
   1210  6e50				  -	      if	fontstyle == SNAKE
   1211  6e50				  -
   1212  6e50				  -			;byte %00000000 ; SNAKE
   1213  6e50				  -
   1214  6e50				  -	      .byte	%01111110	; SNAKE
   1215  6e50				  -	      .byte	%01000010	; SNAKE
   1216  6e50				  -	      .byte	%01000010	; SNAKE
   1217  6e50				  -	      .byte	%01000010	; SNAKE
   1218  6e50				  -	      .byte	%01000010	; SNAKE
   1219  6e50				  -	      .byte	%01000010	; SNAKE
   1220  6e50				  -	      .byte	%01000010	; SNAKE
   1221  6e50				  -	      .byte	%01111110	; SNAKE
   1222  6e50				  -
   1223  6e50				  -			;byte %00000000 ; SNAKE
   1224  6e50				  -
   1225  6e50				  -	      .byte	%00111000	; SNAKE
   1226  6e50				  -	      .byte	%00101000	; SNAKE
   1227  6e50				  -	      .byte	%00001000	; SNAKE
   1228  6e50				  -	      .byte	%00001000	; SNAKE
   1229  6e50				  -	      .byte	%00001000	; SNAKE
   1230  6e50				  -	      .byte	%00001000	; SNAKE
   1231  6e50				  -	      .byte	%00001000	; SNAKE
   1232  6e50				  -	      .byte	%00111000	; SNAKE
   1233  6e50				  -
   1234  6e50				  -			;byte %00000000 ; SNAKE
   1235  6e50				  -
   1236  6e50				  -	      .byte	%01111110	; SNAKE
   1237  6e50				  -	      .byte	%01000010	; SNAKE
   1238  6e50				  -	      .byte	%01000110	; SNAKE
   1239  6e50				  -	      .byte	%01000000	; SNAKE
   1240  6e50				  -	      .byte	%01111110	; SNAKE
   1241  6e50				  -	      .byte	%00000010	; SNAKE
   1242  6e50				  -	      .byte	%01000010	; SNAKE
   1243  6e50				  -	      .byte	%01111110	; SNAKE
   1244  6e50				  -
   1245  6e50				  -			;byte %00000000 ; SNAKE
   1246  6e50				  -
   1247  6e50				  -	      .byte	%01111110	; SNAKE
   1248  6e50				  -	      .byte	%01000010	; SNAKE
   1249  6e50				  -	      .byte	%01100010	; SNAKE
   1250  6e50				  -	      .byte	%00000010	; SNAKE
   1251  6e50				  -	      .byte	%01111110	; SNAKE
   1252  6e50				  -	      .byte	%00000010	; SNAKE
   1253  6e50				  -	      .byte	%01000010	; SNAKE
   1254  6e50				  -	      .byte	%01111110	; SNAKE
   1255  6e50				  -
   1256  6e50				  -			;byte %00000000 ; SNAKE
   1257  6e50				  -
   1258  6e50				  -	      .byte	%00001110	; SNAKE
   1259  6e50				  -	      .byte	%00001010	; SNAKE
   1260  6e50				  -	      .byte	%00000010	; SNAKE
   1261  6e50				  -	      .byte	%01111110	; SNAKE
   1262  6e50				  -	      .byte	%01000010	; SNAKE
   1263  6e50				  -	      .byte	%01000010	; SNAKE
   1264  6e50				  -	      .byte	%01000010	; SNAKE
   1265  6e50				  -	      .byte	%01100110	; SNAKE
   1266  6e50				  -
   1267  6e50				  -			;byte %00000000 ; SNAKE
   1268  6e50				  -
   1269  6e50				  -	      .byte	%01111110	; SNAKE
   1270  6e50				  -	      .byte	%01000010	; SNAKE
   1271  6e50				  -	      .byte	%01100010	; SNAKE
   1272  6e50				  -	      .byte	%00000010	; SNAKE
   1273  6e50				  -	      .byte	%01111110	; SNAKE
   1274  6e50				  -	      .byte	%01000000	; SNAKE
   1275  6e50				  -	      .byte	%01000010	; SNAKE
   1276  6e50				  -	      .byte	%01111110	; SNAKE
   1277  6e50				  -
   1278  6e50				  -			;byte %00000000 ; SNAKE
   1279  6e50				  -
   1280  6e50				  -	      .byte	%01111110	; SNAKE
   1281  6e50				  -	      .byte	%01000010	; SNAKE
   1282  6e50				  -	      .byte	%01000010	; SNAKE
   1283  6e50				  -	      .byte	%01111110	; SNAKE
   1284  6e50				  -	      .byte	%01000000	; SNAKE
   1285  6e50				  -	      .byte	%01000110	; SNAKE
   1286  6e50				  -	      .byte	%01000010	; SNAKE
   1287  6e50				  -	      .byte	%01111110	; SNAKE
   1288  6e50				  -
   1289  6e50				  -			;byte %00000000 ; SNAKE
   1290  6e50				  -
   1291  6e50				  -	      .byte	%00000110	; SNAKE
   1292  6e50				  -	      .byte	%00000010	; SNAKE
   1293  6e50				  -	      .byte	%00000010	; SNAKE
   1294  6e50				  -	      .byte	%00000010	; SNAKE
   1295  6e50				  -	      .byte	%00000010	; SNAKE
   1296  6e50				  -	      .byte	%01100010	; SNAKE
   1297  6e50				  -	      .byte	%01000010	; SNAKE
   1298  6e50				  -	      .byte	%01111110	; SNAKE
   1299  6e50				  -
   1300  6e50				  -			;byte %00000000 ; SNAKE
   1301  6e50				  -
   1302  6e50				  -	      .byte	%01111110	; SNAKE
   1303  6e50				  -	      .byte	%01000010	; SNAKE
   1304  6e50				  -	      .byte	%01000010	; SNAKE
   1305  6e50				  -	      .byte	%01000010	; SNAKE
   1306  6e50				  -	      .byte	%01111110	; SNAKE
   1307  6e50				  -	      .byte	%01000010	; SNAKE
   1308  6e50				  -	      .byte	%01000010	; SNAKE
   1309  6e50				  -	      .byte	%01111110	; SNAKE
   1310  6e50				  -
   1311  6e50				  -			;byte %00000000 ; SNAKE
   1312  6e50				  -
   1313  6e50				  -	      .byte	%00001110	; SNAKE
   1314  6e50				  -	      .byte	%00001010	; SNAKE
   1315  6e50				  -	      .byte	%00000010	; SNAKE
   1316  6e50				  -	      .byte	%00000010	; SNAKE
   1317  6e50				  -	      .byte	%01111110	; SNAKE
   1318  6e50				  -	      .byte	%01000010	; SNAKE
   1319  6e50				  -	      .byte	%01000010	; SNAKE
   1320  6e50				  -	      .byte	%01111110	; SNAKE
   1321  6e50				  -
   1322  6e50				  -
   1323  6e50					      endif		; SNAKE
   1324  6e50
   1325  6e50				  -	      if	fontstyle == PLOK
   1326  6e50				  -
   1327  6e50				  -			;byte %00000000 ; PLOK
   1328  6e50				  -
   1329  6e50				  -	      .byte	%00000000	; PLOK
   1330  6e50				  -	      .byte	%00111000	; PLOK
   1331  6e50				  -	      .byte	%01100100	; PLOK
   1332  6e50				  -	      .byte	%01100010	; PLOK
   1333  6e50				  -	      .byte	%01100010	; PLOK
   1334  6e50				  -	      .byte	%00110110	; PLOK
   1335  6e50				  -	      .byte	%00011100	; PLOK
   1336  6e50				  -	      .byte	%00000000	; PLOK
   1337  6e50				  -
   1338  6e50				  -			;byte %00000000 ; PLOK
   1339  6e50				  -
   1340  6e50				  -	      .byte	%00000000	; PLOK
   1341  6e50				  -	      .byte	%00010000	; PLOK
   1342  6e50				  -	      .byte	%00011100	; PLOK
   1343  6e50				  -	      .byte	%00011100	; PLOK
   1344  6e50				  -	      .byte	%00011000	; PLOK
   1345  6e50				  -	      .byte	%00111000	; PLOK
   1346  6e50				  -	      .byte	%00011000	; PLOK
   1347  6e50				  -	      .byte	%00000000	; PLOK
   1348  6e50				  -
   1349  6e50				  -			;byte %00000000 ; PLOK
   1350  6e50				  -
   1351  6e50				  -	      .byte	%00000000	; PLOK
   1352  6e50				  -	      .byte	%00001110	; PLOK
   1353  6e50				  -	      .byte	%01111110	; PLOK
   1354  6e50				  -	      .byte	%00011000	; PLOK
   1355  6e50				  -	      .byte	%00001100	; PLOK
   1356  6e50				  -	      .byte	%00000110	; PLOK
   1357  6e50				  -	      .byte	%00111100	; PLOK
   1358  6e50				  -	      .byte	%00000000	; PLOK
   1359  6e50				  -
   1360  6e50				  -			;byte %00000000 ; PLOK
   1361  6e50				  -
   1362  6e50				  -	      .byte	%00000000	; PLOK
   1363  6e50				  -	      .byte	%00111100	; PLOK
   1364  6e50				  -	      .byte	%01101110	; PLOK
   1365  6e50				  -	      .byte	%00001110	; PLOK
   1366  6e50				  -	      .byte	%00011100	; PLOK
   1367  6e50				  -	      .byte	%00000110	; PLOK
   1368  6e50				  -	      .byte	%01111100	; PLOK
   1369  6e50				  -	      .byte	%00000000	; PLOK
   1370  6e50				  -
   1371  6e50				  -			;byte %00000000 ; PLOK
   1372  6e50				  -
   1373  6e50				  -	      .byte	%00000000	; PLOK
   1374  6e50				  -	      .byte	%00011000	; PLOK
   1375  6e50				  -	      .byte	%01111110	; PLOK
   1376  6e50				  -	      .byte	%01101100	; PLOK
   1377  6e50				  -	      .byte	%00100100	; PLOK
   1378  6e50				  -	      .byte	%00110000	; PLOK
   1379  6e50				  -	      .byte	%00110000	; PLOK
   1380  6e50				  -	      .byte	%00000000	; PLOK
   1381  6e50				  -
   1382  6e50				  -			;byte %00000000 ; PLOK
   1383  6e50				  -
   1384  6e50				  -	      .byte	%00000000	; PLOK
   1385  6e50				  -	      .byte	%00111100	; PLOK
   1386  6e50				  -	      .byte	%01001110	; PLOK
   1387  6e50				  -	      .byte	%00011100	; PLOK
   1388  6e50				  -	      .byte	%01100000	; PLOK
   1389  6e50				  -	      .byte	%01111100	; PLOK
   1390  6e50				  -	      .byte	%00011100	; PLOK
   1391  6e50				  -	      .byte	%00000000	; PLOK
   1392  6e50				  -
   1393  6e50				  -			;byte %00000000 ; PLOK
   1394  6e50				  -
   1395  6e50				  -	      .byte	%00000000	; PLOK
   1396  6e50				  -	      .byte	%00111100	; PLOK
   1397  6e50				  -	      .byte	%01000110	; PLOK
   1398  6e50				  -	      .byte	%01101100	; PLOK
   1399  6e50				  -	      .byte	%01110000	; PLOK
   1400  6e50				  -	      .byte	%00111000	; PLOK
   1401  6e50				  -	      .byte	%00010000	; PLOK
   1402  6e50				  -	      .byte	%00000000	; PLOK
   1403  6e50				  -
   1404  6e50				  -			;byte %00000000 ; PLOK
   1405  6e50				  -
   1406  6e50				  -	      .byte	%00000000	; PLOK
   1407  6e50				  -	      .byte	%00111100	; PLOK
   1408  6e50				  -	      .byte	%00011100	; PLOK
   1409  6e50				  -	      .byte	%00001100	; PLOK
   1410  6e50				  -	      .byte	%00000110	; PLOK
   1411  6e50				  -	      .byte	%01111110	; PLOK
   1412  6e50				  -	      .byte	%00110000	; PLOK
   1413  6e50				  -	      .byte	%00000000	; PLOK
   1414  6e50				  -
   1415  6e50				  -			;byte %00000000 ; PLOK
   1416  6e50				  -
   1417  6e50				  -	      .byte	%00000000	; PLOK
   1418  6e50				  -	      .byte	%00111100	; PLOK
   1419  6e50				  -	      .byte	%01001110	; PLOK
   1420  6e50				  -	      .byte	%01101110	; PLOK
   1421  6e50				  -	      .byte	%00111100	; PLOK
   1422  6e50				  -	      .byte	%01100100	; PLOK
   1423  6e50				  -	      .byte	%00111000	; PLOK
   1424  6e50				  -	      .byte	%00000000	; PLOK
   1425  6e50				  -
   1426  6e50				  -			;byte %00000000 ; PLOK
   1427  6e50				  -
   1428  6e50				  -	      .byte	%00000000	; PLOK
   1429  6e50				  -	      .byte	%00011000	; PLOK
   1430  6e50				  -	      .byte	%00001100	; PLOK
   1431  6e50				  -	      .byte	%00011100	; PLOK
   1432  6e50				  -	      .byte	%00100110	; PLOK
   1433  6e50				  -	      .byte	%01001110	; PLOK
   1434  6e50				  -	      .byte	%00111100	; PLOK
   1435  6e50				  -	      .byte	%00000000	; PLOK
   1436  6e50				  -
   1437  6e50					      endif		; PLOK
   1438  6e50
   1439  6e50							; ### any characters that aren't font specific follow...
   1440  6e50
   1441  6e50				  -	      ifconst	fontcharSPACE
   1442  6e50				  -			;byte %00000000 ; SYMBOLS
   1443  6e50				  -
   1444  6e50				  -	      .byte	%00000000	; SYMBOLS
   1445  6e50				  -	      .byte	%00000000	; SYMBOLS
   1446  6e50				  -	      .byte	%00000000	; SYMBOLS
   1447  6e50				  -	      .byte	%00000000	; SYMBOLS
   1448  6e50				  -	      .byte	%00000000	; SYMBOLS
   1449  6e50				  -	      .byte	%00000000	; SYMBOLS
   1450  6e50				  -	      .byte	%00000000	; SYMBOLS
   1451  6e50				  -	      .byte	%00000000	; SYMBOLS
   1452  6e50				  -
   1453  6e50				  -			;byte %00000000 ; SYMBOLS
   1454  6e50					      endif		; fontcharSPACE
   1455  6e50
   1456  6e50				  -	      ifconst	fontcharDOLLAR
   1457  6e50				  -			;byte %00000000 ; SYMBOLS
   1458  6e50				  -
   1459  6e50				  -	      .byte	%00000000	; SYMBOLS
   1460  6e50				  -	      .byte	%00010000	; SYMBOLS
   1461  6e50				  -	      .byte	%01111100	; SYMBOLS
   1462  6e50				  -	      .byte	%00010010	; SYMBOLS
   1463  6e50				  -	      .byte	%01111100	; SYMBOLS
   1464  6e50				  -	      .byte	%10010000	; SYMBOLS
   1465  6e50				  -	      .byte	%01111100	; SYMBOLS
   1466  6e50				  -	      .byte	%00010000	; SYMBOLS
   1467  6e50				  -
   1468  6e50				  -			;byte %00000000 ; SYMBOLS
   1469  6e50				  -
   1470  6e50					      endif		; fontcharDOLLAR
   1471  6e50
   1472  6e50				  -	      ifconst	fontcharPOUND
   1473  6e50				  -			;byte %00000000 ; SYMBOLS
   1474  6e50				  -
   1475  6e50				  -	      .byte	%01111110	; SYMBOLS
   1476  6e50				  -	      .byte	%01000000	; SYMBOLS
   1477  6e50				  -	      .byte	%00100000	; SYMBOLS
   1478  6e50				  -	      .byte	%00100000	; SYMBOLS
   1479  6e50				  -	      .byte	%01111000	; SYMBOLS
   1480  6e50				  -	      .byte	%00100000	; SYMBOLS
   1481  6e50				  -	      .byte	%00100010	; SYMBOLS
   1482  6e50				  -	      .byte	%00011100	; SYMBOLS
   1483  6e50				  -
   1484  6e50				  -			;byte %00000000 ; SYMBOLS
   1485  6e50				  -
   1486  6e50					      endif		; fontcharPOUND
   1487  6e50
   1488  6e50
   1489  6e50				  -	      ifconst	fontcharMRHAPPY
   1490  6e50				  -			;byte %00000000 ; SYMBOLS
   1491  6e50				  -
   1492  6e50				  -	      .byte	%00111100	; SYMBOLS
   1493  6e50				  -	      .byte	%01100110	; SYMBOLS
   1494  6e50				  -	      .byte	%01011010	; SYMBOLS
   1495  6e50				  -	      .byte	%01111110	; SYMBOLS
   1496  6e50				  -	      .byte	%01111110	; SYMBOLS
   1497  6e50				  -	      .byte	%01011010	; SYMBOLS
   1498  6e50				  -	      .byte	%01111110	; SYMBOLS
   1499  6e50				  -	      .byte	%00111100	; SYMBOLS
   1500  6e50				  -
   1501  6e50				  -			;byte %00000000 ; SYMBOLS
   1502  6e50				  -
   1503  6e50					      endif		; fontcharMRHAPPY
   1504  6e50
   1505  6e50				  -	      ifconst	fontcharMRSAD
   1506  6e50				  -			;byte %00000000 ; SYMBOLS
   1507  6e50				  -
   1508  6e50				  -	      .byte	%00111100	; SYMBOLS
   1509  6e50				  -	      .byte	%01011010	; SYMBOLS
   1510  6e50				  -	      .byte	%01100110	; SYMBOLS
   1511  6e50				  -	      .byte	%01111110	; SYMBOLS
   1512  6e50				  -	      .byte	%01111110	; SYMBOLS
   1513  6e50				  -	      .byte	%01011010	; SYMBOLS
   1514  6e50				  -	      .byte	%01111110	; SYMBOLS
   1515  6e50				  -	      .byte	%00111100	; SYMBOLS
   1516  6e50				  -
   1517  6e50				  -			;byte %00000000 ; SYMBOLS
   1518  6e50				  -
   1519  6e50					      endif		; fontcharMRSAD
   1520  6e50
   1521  6e50
   1522  6e50				  -	      ifconst	fontcharCOPYRIGHT
   1523  6e50				  -			;byte %00000000 ; SYMBOLS
   1524  6e50				  -
   1525  6e50				  -	      .byte	%00000000	; SYMBOLS
   1526  6e50				  -	      .byte	%00111000	; SYMBOLS
   1527  6e50				  -	      .byte	%01000100	; SYMBOLS
   1528  6e50				  -	      .byte	%10111010	; SYMBOLS
   1529  6e50				  -	      .byte	%10100010	; SYMBOLS
   1530  6e50				  -	      .byte	%10111010	; SYMBOLS
   1531  6e50				  -	      .byte	%01000100	; SYMBOLS
   1532  6e50				  -	      .byte	%00111000	; SYMBOLS
   1533  6e50				  -
   1534  6e50				  -			;byte %00000000 ; SYMBOLS
   1535  6e50				  -
   1536  6e50					      endif		; fontcharCOPYRIGHT
   1537  6e50
   1538  6e50
   1539  6e50				  -	      ifconst	fontcharFUJI
   1540  6e50				  -
   1541  6e50				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   1542  6e50				  -
   1543  6e50				  -	      .byte	%01110000	; SYMBOLS
   1544  6e50				  -	      .byte	%01111001	; SYMBOLS
   1545  6e50				  -	      .byte	%00011101	; SYMBOLS
   1546  6e50				  -	      .byte	%00001101	; SYMBOLS
   1547  6e50				  -	      .byte	%00001101	; SYMBOLS
   1548  6e50				  -	      .byte	%00001101	; SYMBOLS
   1549  6e50				  -	      .byte	%00001101	; SYMBOLS
   1550  6e50				  -	      .byte	%00000000	; SYMBOLS
   1551  6e50				  -
   1552  6e50				  -			;byte %00000000 ; SYMBOLS
   1553  6e50				  -
   1554  6e50				  -	      .byte	%00001110	; SYMBOLS
   1555  6e50				  -	      .byte	%10011110	; SYMBOLS
   1556  6e50				  -	      .byte	%10111000	; SYMBOLS
   1557  6e50				  -	      .byte	%10110000	; SYMBOLS
   1558  6e50				  -	      .byte	%10110000	; SYMBOLS
   1559  6e50				  -	      .byte	%10110000	; SYMBOLS
   1560  6e50				  -	      .byte	%10110000	; SYMBOLS
   1561  6e50				  -	      .byte	%00000000	; SYMBOLS
   1562  6e50				  -
   1563  6e50				  -			;byte %00000000 ; SYMBOLS
   1564  6e50				  -
   1565  6e50					      endif		; fontcharFUJI
   1566  6e50
   1567  6e50
   1568  6e50				  -	      ifconst	fontcharHEART
   1569  6e50				  -			;byte %00000000 ; SYMBOLS
   1570  6e50				  -
   1571  6e50				  -	      .byte	%00010000	; SYMBOLS
   1572  6e50				  -	      .byte	%00111000	; SYMBOLS
   1573  6e50				  -	      .byte	%01111100	; SYMBOLS
   1574  6e50				  -	      .byte	%01111100	; SYMBOLS
   1575  6e50				  -	      .byte	%11111110	; SYMBOLS
   1576  6e50				  -	      .byte	%11111110	; SYMBOLS
   1577  6e50				  -	      .byte	%11101110	; SYMBOLS
   1578  6e50				  -	      .byte	%01000100	; SYMBOLS
   1579  6e50				  -
   1580  6e50				  -			;byte %00000000 ; SYMBOLS
   1581  6e50				  -
   1582  6e50					      endif		; fontcharHEART
   1583  6e50
   1584  6e50				  -	      ifconst	fontcharDIAMOND
   1585  6e50				  -			;byte %00000000 ; SYMBOLS
   1586  6e50				  -
   1587  6e50				  -	      .byte	%00010000	; SYMBOLS
   1588  6e50				  -	      .byte	%00111000	; SYMBOLS
   1589  6e50				  -	      .byte	%01111100	; SYMBOLS
   1590  6e50				  -	      .byte	%11111110	; SYMBOLS
   1591  6e50				  -	      .byte	%11111110	; SYMBOLS
   1592  6e50				  -	      .byte	%01111100	; SYMBOLS
   1593  6e50				  -	      .byte	%00111000	; SYMBOLS
   1594  6e50				  -	      .byte	%00010000	; SYMBOLS
   1595  6e50				  -
   1596  6e50				  -			;byte %00000000 ; SYMBOLS
   1597  6e50				  -
   1598  6e50					      endif		; fontcharDIAMOND
   1599  6e50
   1600  6e50				  -	      ifconst	fontcharSPADE
   1601  6e50				  -			;byte %00000000 ; SYMBOLS
   1602  6e50				  -
   1603  6e50				  -	      .byte	%00111000	; SYMBOLS
   1604  6e50				  -	      .byte	%00010000	; SYMBOLS
   1605  6e50				  -	      .byte	%01010100	; SYMBOLS
   1606  6e50				  -	      .byte	%11111110	; SYMBOLS
   1607  6e50				  -	      .byte	%11111110	; SYMBOLS
   1608  6e50				  -	      .byte	%01111100	; SYMBOLS
   1609  6e50				  -	      .byte	%00111000	; SYMBOLS
   1610  6e50				  -	      .byte	%00010000	; SYMBOLS
   1611  6e50				  -
   1612  6e50				  -			;byte %00000000 ; SYMBOLS
   1613  6e50				  -
   1614  6e50					      endif		; fontcharSPADE
   1615  6e50
   1616  6e50				  -	      ifconst	fontcharCLUB
   1617  6e50				  -			;byte %00000000 ; SYMBOLS
   1618  6e50				  -
   1619  6e50				  -	      .byte	%00111000	; SYMBOLS
   1620  6e50				  -	      .byte	%00010000	; SYMBOLS
   1621  6e50				  -	      .byte	%11010110	; SYMBOLS
   1622  6e50				  -	      .byte	%11111110	; SYMBOLS
   1623  6e50				  -	      .byte	%11010110	; SYMBOLS
   1624  6e50				  -	      .byte	%00111000	; SYMBOLS
   1625  6e50				  -	      .byte	%00111000	; SYMBOLS
   1626  6e50				  -	      .byte	%00000000	; SYMBOLS
   1627  6e50				  -
   1628  6e50				  -			;byte %00000000 ; SYMBOLS
   1629  6e50				  -
   1630  6e50					      endif		; fontcharCLUB
   1631  6e50
   1632  6e50
   1633  6e50				  -	      ifconst	fontcharCOLON
   1634  6e50				  -			;byte %00000000 ; SYMBOLS
   1635  6e50				  -
   1636  6e50				  -	      .byte	%00000000	; SYMBOLS
   1637  6e50				  -	      .byte	%00011000	; SYMBOLS
   1638  6e50				  -	      .byte	%00011000	; SYMBOLS
   1639  6e50				  -	      .byte	%00000000	; SYMBOLS
   1640  6e50				  -	      .byte	%00000000	; SYMBOLS
   1641  6e50				  -	      .byte	%00011000	; SYMBOLS
   1642  6e50				  -	      .byte	%00011000	; SYMBOLS
   1643  6e50				  -	      .byte	%00000000	; SYMBOLS
   1644  6e50				  -
   1645  6e50				  -			;byte %00000000 ; SYMBOLS
   1646  6e50				  -
   1647  6e50					      endif		; fontcharCOLON
   1648  6e50
   1649  6e50
   1650  6e50				  -	      ifconst	fontcharBLOCK
   1651  6e50				  -
   1652  6e50				  -			;byte %00000000 ; SYMBOLS
   1653  6e50				  -
   1654  6e50				  -	      .byte	%11111111	; SYMBOLS
   1655  6e50				  -	      .byte	%11111111	; SYMBOLS
   1656  6e50				  -	      .byte	%11111111	; SYMBOLS
   1657  6e50				  -	      .byte	%11111111	; SYMBOLS
   1658  6e50				  -	      .byte	%11111111	; SYMBOLS
   1659  6e50				  -	      .byte	%11111111	; SYMBOLS
   1660  6e50				  -	      .byte	%11111111	; SYMBOLS
   1661  6e50				  -	      .byte	%11111111	; SYMBOLS
   1662  6e50				  -
   1663  6e50				  -			;byte %00000000 ; SYMBOLS
   1664  6e50				  -
   1665  6e50					      endif		; fontcharBLOCK
   1666  6e50
   1667  6e50				  -	      ifconst	fontcharUNDERLINE
   1668  6e50				  -
   1669  6e50				  -			;byte %00000000 ; SYMBOLS
   1670  6e50				  -
   1671  6e50				  -	      .byte	%11111111	; SYMBOLS
   1672  6e50				  -	      .byte	%00000000	; SYMBOLS
   1673  6e50				  -	      .byte	%00000000	; SYMBOLS
   1674  6e50				  -	      .byte	%00000000	; SYMBOLS
   1675  6e50				  -	      .byte	%00000000	; SYMBOLS
   1676  6e50				  -	      .byte	%00000000	; SYMBOLS
   1677  6e50				  -	      .byte	%00000000	; SYMBOLS
   1678  6e50				  -	      .byte	%00000000	; SYMBOLS
   1679  6e50				  -
   1680  6e50				  -			;byte %00000000 ; SYMBOLS
   1681  6e50				  -
   1682  6e50					      endif		; fontcharUNDERLINE
   1683  6e50
   1684  6e50				  -	      ifconst	fontcharARISIDE
   1685  6e50				  -			;byte %00000000 ; SYMBOLS
   1686  6e50				  -
   1687  6e50				  -	      .byte	%00000000	; SYMBOLS
   1688  6e50				  -	      .byte	%00101010	; SYMBOLS
   1689  6e50				  -	      .byte	%00101010	; SYMBOLS
   1690  6e50				  -	      .byte	%00101100	; SYMBOLS
   1691  6e50				  -	      .byte	%01111111	; SYMBOLS
   1692  6e50				  -	      .byte	%00110111	; SYMBOLS
   1693  6e50				  -	      .byte	%00000010	; SYMBOLS
   1694  6e50				  -	      .byte	%00000001	; SYMBOLS
   1695  6e50				  -
   1696  6e50				  -			;byte %00000000 ; SYMBOLS
   1697  6e50				  -
   1698  6e50					      endif		; fontcharARISIDE
   1699  6e50
   1700  6e50				  -	      ifconst	fontcharARIFACE
   1701  6e50				  -			;byte %00000000 ; SYMBOLS
   1702  6e50				  -
   1703  6e50				  -	      .byte	%00001000	; SYMBOLS
   1704  6e50				  -	      .byte	%00011100	; SYMBOLS
   1705  6e50				  -	      .byte	%00111110	; SYMBOLS
   1706  6e50				  -	      .byte	%00101010	; SYMBOLS
   1707  6e50				  -	      .byte	%00011100	; SYMBOLS
   1708  6e50				  -	      .byte	%01010100	; SYMBOLS
   1709  6e50				  -	      .byte	%00100100	; SYMBOLS
   1710  6e50				  -	      .byte	%00000010	; SYMBOLS
   1711  6e50				  -
   1712  6e50				  -			;byte %00000000 ; SYMBOLS
   1713  6e50				  -
   1714  6e50				  -
   1715  6e50					      endif		; fontcharARIRACE
   1716  6e50
------- FILE titlescreen/asm/titlescreen.asm
    303  6e50					      endif
    304  6e50
    305  6e50					      ifconst	mk_gameselect_on
------- FILE titlescreen/gameselect_image.asm LEVEL 3 PASS 3
      0  6e50					      include	"titlescreen/gameselect_image.asm"
      1  6e50				  -	      ifnconst	bmp_gameselect_color
      2  6e50				  -bmp_gameselect_color
      3  6e50					      endif
      4  6e50		       0f		      .byte.b	$0f
      5  6e51
      6  6e51				  -	      if	>. != >[.+5]
      7  6e51				  -	      align	256
      8  6e51					      endif
      9  6e51				   bmp_gameselect_CHAR0
     10  6e51
     11  6e51		       ee		      .byte.b	%11101110	;
     12  6e52		       88		      .byte.b	%10001000	;
     13  6e53		       8c		      .byte.b	%10001100	;
     14  6e54		       88		      .byte.b	%10001000	;
     15  6e55		       8e		      .byte.b	%10001110	;
     16  6e56
     17  6e56				  -	      if	>. != >[.+5]
     18  6e56				  -	      align	256
     19  6e56					      endif
     20  6e56				   bmp_gameselect_CHAR1
     21  6e56
     22  6e56		       4e		      .byte.b	%01001110	;
     23  6e57		       48		      .byte.b	%01001000	;
     24  6e58		       ac		      .byte.b	%10101100	;
     25  6e59		       a8		      .byte.b	%10101000	;
     26  6e5a		       ae		      .byte.b	%10101110	;
     27  6e5b
     28  6e5b				  -	      if	>. != >[.+5]
     29  6e5b				  -	      align	256
     30  6e5b					      endif
     31  6e5b				   bmp_gameselect_CHAR2
     32  6e5b		       e0		      .byte.b	%11100000	;
     33  6e5c		       80		      .byte.b	%10000000	;
     34  6e5d		       80		      .byte.b	%10000000	;
     35  6e5e		       80		      .byte.b	%10000000	;
     36  6e5f		       80		      .byte.b	%10000000	;
     37  6e60
     38  6e60				  -	      if	>. != >[.+5]
     39  6e60				  -	      align	256
     40  6e60					      endif
     41  6e60				   bmp_gameselect_CHAR3
     42  6e60		       00		      .byte.b	%00000000
     43  6e61		       00		      .byte.b	%00000000
     44  6e62		       00		      .byte.b	%00000000
     45  6e63		       00		      .byte.b	%00000000
     46  6e64		       00		      .byte.b	%00000000
     47  6e65
     48  6e65				  -	      if	>. != >[.+80]
     49  6e65				  -	      align	256
     50  6e65					      endif
     51  6e65
     52  6e65
     53  6e65
     54  6e65				  -	      if	>. != >[.+80]
     55  6e65				  -	      align	256
     56  6e65					      endif
     57  6e65
     58  6e65				   font_gameselect_img
     59  6e65		       3c		      .byte.b	%00111100
     60  6e66		       66		      .byte.b	%01100110
     61  6e67		       66		      .byte.b	%01100110
     62  6e68		       66		      .byte.b	%01100110
     63  6e69		       3c		      .byte.b	%00111100
     64  6e6a
     65  6e6a		       3c		      .byte.b	%00111100
     66  6e6b		       18		      .byte.b	%00011000
     67  6e6c		       18		      .byte.b	%00011000
     68  6e6d		       18		      .byte.b	%00011000
     69  6e6e		       38		      .byte.b	%00111000
     70  6e6f
     71  6e6f		       7e		      .byte.b	%01111110
     72  6e70		       60		      .byte.b	%01100000
     73  6e71		       3c		      .byte.b	%00111100
     74  6e72		       06		      .byte.b	%00000110
     75  6e73		       7c		      .byte.b	%01111100
     76  6e74
     77  6e74		       7c		      .byte.b	%01111100
     78  6e75		       06		      .byte.b	%00000110
     79  6e76		       1c		      .byte.b	%00011100
     80  6e77		       06		      .byte.b	%00000110
     81  6e78		       7c		      .byte.b	%01111100
     82  6e79
     83  6e79		       06		      .byte.b	%00000110
     84  6e7a		       06		      .byte.b	%00000110
     85  6e7b		       7e		      .byte.b	%01111110
     86  6e7c		       66		      .byte.b	%01100110
     87  6e7d		       66		      .byte.b	%01100110
     88  6e7e
     89  6e7e		       7c		      .byte.b	%01111100
     90  6e7f		       06		      .byte.b	%00000110
     91  6e80		       7c		      .byte.b	%01111100
     92  6e81		       60		      .byte.b	%01100000
     93  6e82		       7e		      .byte.b	%01111110
     94  6e83
     95  6e83		       3c		      .byte.b	%00111100
     96  6e84		       66		      .byte.b	%01100110
     97  6e85		       7c		      .byte.b	%01111100
     98  6e86		       60		      .byte.b	%01100000
     99  6e87		       3c		      .byte.b	%00111100
    100  6e88
    101  6e88		       18		      .byte.b	%00011000
    102  6e89		       18		      .byte.b	%00011000
    103  6e8a		       0c		      .byte.b	%00001100
    104  6e8b		       06		      .byte.b	%00000110
    105  6e8c		       7e		      .byte.b	%01111110
    106  6e8d
    107  6e8d		       3c		      .byte.b	%00111100
    108  6e8e		       66		      .byte.b	%01100110
    109  6e8f		       3c		      .byte.b	%00111100
    110  6e90		       66		      .byte.b	%01100110
    111  6e91		       3c		      .byte.b	%00111100
    112  6e92
    113  6e92		       3c		      .byte.b	%00111100
    114  6e93		       06		      .byte.b	%00000110
    115  6e94		       3e		      .byte.b	%00111110
    116  6e95		       66		      .byte.b	%01100110
    117  6e96		       3c		      .byte.b	%00111100
    118  6e97
    119  6e97				  -	      ifnconst	gamenumber
    120  6e97				  -gamenumber
    121  6e97					      endif
    122  6e97		       00		      .byte.b	0
    123  6e98
------- FILE titlescreen/asm/titlescreen.asm
    307  6e98					      endif
    308  6e98
    309  6e98				  -	      ifconst	mk_player_on
    310  6e98				  -	      include	"titlescreen/asm/player_kernel.asm"
    311  6e98					      endif		;mk_player_on
    312  6e98
    313  6e98
------- FILE c:\Users\roger\OneDrive\Documents\Atari\BrawdyBAS\brawdy.bas.asm
   8091  6e98
   8092  6e98				   .L0640		;  return
   8093  6e98
   8094  6e98		       ba		      tsx
   8095  6e99		       b5 02		      lda	2,x	; check return address
   8096  6e9b		       49 be		      eor	#(>*)	; vs. current PCH
   8097  6e9d		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   8098  6e9f		       f0 03		      beq	*+5	; if equal, do normal return
   8099  6ea1		       4c e0 df 	      JMP	BS_return
   8100  6ea4		       60		      RTS
   8101  6ea5				   .
   8102  6ea5							; 
   8103  6ea5
   8104  6ea5				   .
   8105  6ea5							; 
   8106  6ea5
   8107  6ea5				   .
   8108  6ea5							; 
   8109  6ea5
   8110  6ea5					      if	ECHO6
      303 bytes of ROM space left in bank 6
   8111  6ea5					      echo	"    ",[(start_bank6 - *)]d , "bytes of ROM space left in bank 6")
   8112  6ea5					      endif
   8113  6ea5		       00 01	   ECHO6      =	1
   8114  6fd4					      ORG	$6FF4-bscode_length
   8115  6fd4					      RORG	$BFF4-bscode_length
   8116  6fd4		       a2 ff	   start_bank6 ldx	#$ff
   8117  6fd6					      ifconst	FASTFETCH	; using DPC+
   8118  6fd6		       8e 58 10 	      stx	FASTFETCH
   8119  6fd9					      endif
   8120  6fd9		       9a		      txs
   8121  6fda				  -	      if	bankswitch == 64
   8122  6fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   8123  6fda					      else
   8124  6fda		       a9 18		      lda	#>(start-1)
   8125  6fdc					      endif
   8126  6fdc		       48		      pha
   8127  6fdd		       a9 e3		      lda	#<(start-1)
   8128  6fdf		       48		      pha
   8129  6fe0		       48		      pha
   8130  6fe1		       8a		      txa
   8131  6fe2		       48		      pha
   8132  6fe3		       ba		      tsx
   8133  6fe4					      if	bankswitch != 64
   8134  6fe4		       b5 04		      lda	4,x	; get high byte of return address
   8135  6fe6		       2a		      rol
   8136  6fe7		       2a		      rol
   8137  6fe8		       2a		      rol
   8138  6fe9		       2a		      rol
   8139  6fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   8140  6fec		       aa		      tax
   8141  6fed		       e8		      inx
   8142  6fee				  -	      else
   8143  6fee				  -	      lda	4,x	; get high byte of return address
   8144  6fee				  -	      tay
   8145  6fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   8146  6fee				  -	      sta	4,x
   8147  6fee				  -	      tya
   8148  6fee				  -	      lsr
   8149  6fee				  -	      lsr
   8150  6fee				  -	      lsr
   8151  6fee				  -	      lsr
   8152  6fee				  -	      tax
   8153  6fee				  -	      inx
   8154  6fee					      endif
   8155  6fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   8156  6ff1		       68		      pla
   8157  6ff2		       aa		      tax
   8158  6ff3		       68		      pla
   8159  6ff4		       60		      rts
   8160  6ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   8161  6ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   8162  6ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   8163  6ff5					      endif
   8164  6ffc					      ORG	$6FFC
   8165  6ffc					      RORG	$BFFC
   8166  6ffc		       d4 bf		      .word.w	(start_bank6 & $ffff)
   8167  6ffe		       d4 bf		      .word.w	(start_bank6 & $ffff)
   8168  7000					      ORG	$7000
   8169  7000					      RORG	$D000
   8170  7000					      repeat	129
   8171  7000		       00		      .byte.b	0
   8170  7000					      repend
   8171  7001		       00		      .byte.b	0
   8170  7001					      repend
   8171  7002		       00		      .byte.b	0
   8170  7002					      repend
   8171  7003		       00		      .byte.b	0
   8170  7003					      repend
   8171  7004		       00		      .byte.b	0
   8170  7004					      repend
   8171  7005		       00		      .byte.b	0
   8170  7005					      repend
   8171  7006		       00		      .byte.b	0
   8170  7006					      repend
   8171  7007		       00		      .byte.b	0
   8170  7007					      repend
   8171  7008		       00		      .byte.b	0
   8170  7008					      repend
   8171  7009		       00		      .byte.b	0
   8170  7009					      repend
   8171  700a		       00		      .byte.b	0
   8170  700a					      repend
   8171  700b		       00		      .byte.b	0
   8170  700b					      repend
   8171  700c		       00		      .byte.b	0
   8170  700c					      repend
   8171  700d		       00		      .byte.b	0
   8170  700d					      repend
   8171  700e		       00		      .byte.b	0
   8170  700e					      repend
   8171  700f		       00		      .byte.b	0
   8170  700f					      repend
   8171  7010		       00		      .byte.b	0
   8170  7010					      repend
   8171  7011		       00		      .byte.b	0
   8170  7011					      repend
   8171  7012		       00		      .byte.b	0
   8170  7012					      repend
   8171  7013		       00		      .byte.b	0
   8170  7013					      repend
   8171  7014		       00		      .byte.b	0
   8170  7014					      repend
   8171  7015		       00		      .byte.b	0
   8170  7015					      repend
   8171  7016		       00		      .byte.b	0
   8170  7016					      repend
   8171  7017		       00		      .byte.b	0
   8170  7017					      repend
   8171  7018		       00		      .byte.b	0
   8170  7018					      repend
   8171  7019		       00		      .byte.b	0
   8170  7019					      repend
   8171  701a		       00		      .byte.b	0
   8170  701a					      repend
   8171  701b		       00		      .byte.b	0
   8170  701b					      repend
   8171  701c		       00		      .byte.b	0
   8170  701c					      repend
   8171  701d		       00		      .byte.b	0
   8170  701d					      repend
   8171  701e		       00		      .byte.b	0
   8170  701e					      repend
   8171  701f		       00		      .byte.b	0
   8170  701f					      repend
   8171  7020		       00		      .byte.b	0
   8170  7020					      repend
   8171  7021		       00		      .byte.b	0
   8170  7021					      repend
   8171  7022		       00		      .byte.b	0
   8170  7022					      repend
   8171  7023		       00		      .byte.b	0
   8170  7023					      repend
   8171  7024		       00		      .byte.b	0
   8170  7024					      repend
   8171  7025		       00		      .byte.b	0
   8170  7025					      repend
   8171  7026		       00		      .byte.b	0
   8170  7026					      repend
   8171  7027		       00		      .byte.b	0
   8170  7027					      repend
   8171  7028		       00		      .byte.b	0
   8170  7028					      repend
   8171  7029		       00		      .byte.b	0
   8170  7029					      repend
   8171  702a		       00		      .byte.b	0
   8170  702a					      repend
   8171  702b		       00		      .byte.b	0
   8170  702b					      repend
   8171  702c		       00		      .byte.b	0
   8170  702c					      repend
   8171  702d		       00		      .byte.b	0
   8170  702d					      repend
   8171  702e		       00		      .byte.b	0
   8170  702e					      repend
   8171  702f		       00		      .byte.b	0
   8170  702f					      repend
   8171  7030		       00		      .byte.b	0
   8170  7030					      repend
   8171  7031		       00		      .byte.b	0
   8170  7031					      repend
   8171  7032		       00		      .byte.b	0
   8170  7032					      repend
   8171  7033		       00		      .byte.b	0
   8170  7033					      repend
   8171  7034		       00		      .byte.b	0
   8170  7034					      repend
   8171  7035		       00		      .byte.b	0
   8170  7035					      repend
   8171  7036		       00		      .byte.b	0
   8170  7036					      repend
   8171  7037		       00		      .byte.b	0
   8170  7037					      repend
   8171  7038		       00		      .byte.b	0
   8170  7038					      repend
   8171  7039		       00		      .byte.b	0
   8170  7039					      repend
   8171  703a		       00		      .byte.b	0
   8170  703a					      repend
   8171  703b		       00		      .byte.b	0
   8170  703b					      repend
   8171  703c		       00		      .byte.b	0
   8170  703c					      repend
   8171  703d		       00		      .byte.b	0
   8170  703d					      repend
   8171  703e		       00		      .byte.b	0
   8170  703e					      repend
   8171  703f		       00		      .byte.b	0
   8170  703f					      repend
   8171  7040		       00		      .byte.b	0
   8170  7040					      repend
   8171  7041		       00		      .byte.b	0
   8170  7041					      repend
   8171  7042		       00		      .byte.b	0
   8170  7042					      repend
   8171  7043		       00		      .byte.b	0
   8170  7043					      repend
   8171  7044		       00		      .byte.b	0
   8170  7044					      repend
   8171  7045		       00		      .byte.b	0
   8170  7045					      repend
   8171  7046		       00		      .byte.b	0
   8170  7046					      repend
   8171  7047		       00		      .byte.b	0
   8170  7047					      repend
   8171  7048		       00		      .byte.b	0
   8170  7048					      repend
   8171  7049		       00		      .byte.b	0
   8170  7049					      repend
   8171  704a		       00		      .byte.b	0
   8170  704a					      repend
   8171  704b		       00		      .byte.b	0
   8170  704b					      repend
   8171  704c		       00		      .byte.b	0
   8170  704c					      repend
   8171  704d		       00		      .byte.b	0
   8170  704d					      repend
   8171  704e		       00		      .byte.b	0
   8170  704e					      repend
   8171  704f		       00		      .byte.b	0
   8170  704f					      repend
   8171  7050		       00		      .byte.b	0
   8170  7050					      repend
   8171  7051		       00		      .byte.b	0
   8170  7051					      repend
   8171  7052		       00		      .byte.b	0
   8170  7052					      repend
   8171  7053		       00		      .byte.b	0
   8170  7053					      repend
   8171  7054		       00		      .byte.b	0
   8170  7054					      repend
   8171  7055		       00		      .byte.b	0
   8170  7055					      repend
   8171  7056		       00		      .byte.b	0
   8170  7056					      repend
   8171  7057		       00		      .byte.b	0
   8170  7057					      repend
   8171  7058		       00		      .byte.b	0
   8170  7058					      repend
   8171  7059		       00		      .byte.b	0
   8170  7059					      repend
   8171  705a		       00		      .byte.b	0
   8170  705a					      repend
   8171  705b		       00		      .byte.b	0
   8170  705b					      repend
   8171  705c		       00		      .byte.b	0
   8170  705c					      repend
   8171  705d		       00		      .byte.b	0
   8170  705d					      repend
   8171  705e		       00		      .byte.b	0
   8170  705e					      repend
   8171  705f		       00		      .byte.b	0
   8170  705f					      repend
   8171  7060		       00		      .byte.b	0
   8170  7060					      repend
   8171  7061		       00		      .byte.b	0
   8170  7061					      repend
   8171  7062		       00		      .byte.b	0
   8170  7062					      repend
   8171  7063		       00		      .byte.b	0
   8170  7063					      repend
   8171  7064		       00		      .byte.b	0
   8170  7064					      repend
   8171  7065		       00		      .byte.b	0
   8170  7065					      repend
   8171  7066		       00		      .byte.b	0
   8170  7066					      repend
   8171  7067		       00		      .byte.b	0
   8170  7067					      repend
   8171  7068		       00		      .byte.b	0
   8170  7068					      repend
   8171  7069		       00		      .byte.b	0
   8170  7069					      repend
   8171  706a		       00		      .byte.b	0
   8170  706a					      repend
   8171  706b		       00		      .byte.b	0
   8170  706b					      repend
   8171  706c		       00		      .byte.b	0
   8170  706c					      repend
   8171  706d		       00		      .byte.b	0
   8170  706d					      repend
   8171  706e		       00		      .byte.b	0
   8170  706e					      repend
   8171  706f		       00		      .byte.b	0
   8170  706f					      repend
   8171  7070		       00		      .byte.b	0
   8170  7070					      repend
   8171  7071		       00		      .byte.b	0
   8170  7071					      repend
   8171  7072		       00		      .byte.b	0
   8170  7072					      repend
   8171  7073		       00		      .byte.b	0
   8170  7073					      repend
   8171  7074		       00		      .byte.b	0
   8170  7074					      repend
   8171  7075		       00		      .byte.b	0
   8170  7075					      repend
   8171  7076		       00		      .byte.b	0
   8170  7076					      repend
   8171  7077		       00		      .byte.b	0
   8170  7077					      repend
   8171  7078		       00		      .byte.b	0
   8170  7078					      repend
   8171  7079		       00		      .byte.b	0
   8170  7079					      repend
   8171  707a		       00		      .byte.b	0
   8170  707a					      repend
   8171  707b		       00		      .byte.b	0
   8170  707b					      repend
   8171  707c		       00		      .byte.b	0
   8170  707c					      repend
   8171  707d		       00		      .byte.b	0
   8170  707d					      repend
   8171  707e		       00		      .byte.b	0
   8170  707e					      repend
   8171  707f		       00		      .byte.b	0
   8170  707f					      repend
   8171  7080		       00		      .byte.b	0
   8172  7081					      repend
   8173  7081							; Provided under the CC0 license. See the included LICENSE.txt for details.
   8174  7081
   8175  7081							;----------------------------------------
   8176  7081							; Display Data
   8177  7081							;----------------------------------------
   8178  7081							; The Display Data bank is copied into RAM when DPC+ initializes the cartridge.
   8179  7081							; This allows us to manipulate the data during run-time, but have a known
   8180  7081							; starting state when the Atari is first turned on.
   8181  7081							;
   8182  7081							; Unlike normal Atari VCS/2600 sprite definitions, the sprite data in the
   8183  7081							; Display Data bank is stored right-side-up.
   8184  7081							;
   8185  7081							;----------------------------------------
   8186  7081
   8187  7081				   Zeros32
   8188  7081		       00 84	   SOUND_OFF  =	(* & $1fff)/32
   8189  7081				   DisplayDataDigitBlank
   8190  7081		       00		      .byte.b	0	;--
   8191  7082		       00		      .byte.b	0	;--
   8192  7083		       00		      .byte.b	0	;--
   8193  7084		       00		      .byte.b	0	;--
   8194  7085		       00		      .byte.b	0	;--
   8195  7086		       00		      .byte.b	0	;--
   8196  7087		       00		      .byte.b	0	;--
   8197  7088		       00		      .byte.b	0	;--
   8198  7089
   8199  7089							;	align 32
   8200  7089							;Zeros32:
   8201  7089							;SOUND_OFF = (* & $1fff)/32
   8202  7089							;	.byte 0,0,0,0,0,0,0,0
   8203  7089		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8204  7091		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8205  7099		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8206  70a1
   8207  70a1		       00 85	   SINE_WAVE  =	(* & $1fff)/32
   8208  70a1		       03 03 03 04*	      .byte.b	3,3,3,4,4,5,5,5
   8209  70a9		       05 05 05 05*	      .byte.b	5,5,5,5,4,4,3,3
   8210  70b1		       03 02 02 01*	      .byte.b	3,2,2,1,1,0,0,0
   8211  70b9		       00 00 00 00*	      .byte.b	0,0,0,0,1,1,2,2
   8212  70c1
   8213  70e0		       00 00 00 00*	      align	32
   8214  70e0		       00 87	   TRIANGLE_WAVE =	(* & $1fff)/32
   8215  70e0		       00 00 01 01*	      .byte.b	0,0,1,1,1,2,2,2
   8216  70e8		       03 03 03 04*	      .byte.b	3,3,3,4,4,4,5,5
   8217  70f0		       05 05 04 04*	      .byte.b	5,5,4,4,4,3,3,3
   8218  70f8		       02 02 02 01*	      .byte.b	2,2,2,1,1,1,0,0
   8219  7100
   8220  7100					      align	32
   8221  7100		       00 88	   SAWTOOTH_WAVE =	(* & $1fff)/32
   8222  7100		       00 00 00 00*	      .byte.b	0,0,0,0,1,1,1,1
   8223  7108		       01 01 02 02*	      .byte.b	1,1,2,2,2,2,2,2
   8224  7110		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,4,4
   8225  7118		       04 04 04 04*	      .byte.b	4,4,4,4,5,5,5,5
   8226  7120
   8227  7120					      align	32
   8228  7120		       00 89	   SQUARE_WAVE_VOL5 =	(* & $1fff)/32
   8229  7120		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8230  7128		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8231  7130		       05 05 05 05*	      .byte.b	5,5,5,5,5,5,5,5
   8232  7138		       05 05 05 05*	      .byte.b	5,5,5,5,5,5,5,5
   8233  7140
   8234  7140					      align	32
   8235  7140		       00 8a	   SQUARE_WAVE_VOL4 =	(* & $1fff)/32
   8236  7140		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8237  7148		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8238  7150		       04 04 04 04*	      .byte.b	4,4,4,4,4,4,4,4
   8239  7158		       04 04 04 04*	      .byte.b	4,4,4,4,4,4,4,4
   8240  7160
   8241  7160					      align	32
   8242  7160		       00 8b	   SQUARE_WAVE_VOL3 =	(* & $1fff)/32
   8243  7160		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8244  7168		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   8245  7170		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,3,3
   8246  7178		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,3,3
   8247  7180
   8248  7180					      align	32
   8249  7180		       00 8c	   NOISE_WAVE =	(* & $1fff)/32
   8250  7180		       07 01 09 0a*	      .byte.b	7, 1, 9,10, 2, 8, 8,14
   8251  7188		       03 0d 08 05*	      .byte.b	3,13, 8, 5,12, 2, 3, 7
   8252  7190		       07 01 08 04*	      .byte.b	7, 1, 8, 4,15, 1,13, 5
   8253  7198		       08 05 0b 06*	      .byte.b	8, 5,11, 6, 8, 7, 9, 2
   8254  71a0
   8255  71a0							; low and high byte of address table (for ROMdata array in C)
   8256  71a0		       57		      .byte.b	<fetcher_address_table
   8257  71a1		       0d		      .byte.b	((>fetcher_address_table) & $0f) | (((>fetcher_address_table) / 2) & $70)
   8258  71a2		       00		      .byte.b	0
   8259  71a3		       00		      .byte.b	0
   8260  71a4				   FETCHER_BEGIN
   8261  71a4		       10		      .byte.b	16
   8262  71a5		       10		      .byte.b	16
   8263  71a6		       10		      .byte.b	16
   8264  71a7		       10		      .byte.b	16	; to zero-fill on boot
   8265  71a8							;bB.asm
   8266  71a8							; bB.asm file is split here
   8267  71a8				   backgroundcolorL0251
   8268  71a8		       08		      .byte.b	_08
   8269  71a9		       06		      .byte.b	_06
   8270  71aa		       08		      .byte.b	_08
   8271  71ab		       08		      .byte.b	_08
   8272  71ac		       06		      .byte.b	_06
   8273  71ad		       08		      .byte.b	_08
   8274  71ae		       06		      .byte.b	_06
   8275  71af		       08		      .byte.b	_08
   8276  71b0		       06		      .byte.b	_06
   8277  71b1		       06		      .byte.b	_06
   8278  71b2		       08		      .byte.b	_08
   8279  71b3		       08		      .byte.b	_08
   8280  71b4		       06		      .byte.b	_06
   8281  71b5		       06		      .byte.b	_06
   8282  71b6		       06		      .byte.b	_06
   8283  71b7		       06		      .byte.b	_06
   8284  71b8		       06		      .byte.b	_06
   8285  71b9		       06		      .byte.b	_06
   8286  71ba		       06		      .byte.b	_06
   8287  71bb		       06		      .byte.b	_06
   8288  71bc		       06		      .byte.b	_06
   8289  71bd		       06		      .byte.b	_06
   8290  71be		       06		      .byte.b	_06
   8291  71bf		       06		      .byte.b	_06
   8292  71c0		       06		      .byte.b	_06
   8293  71c1		       06		      .byte.b	_06
   8294  71c2		       06		      .byte.b	_06
   8295  71c3		       06		      .byte.b	_06
   8296  71c4		       06		      .byte.b	_06
   8297  71c5		       06		      .byte.b	_06
   8298  71c6		       06		      .byte.b	_06
   8299  71c7		       06		      .byte.b	_06
   8300  71c8		       06		      .byte.b	_06
   8301  71c9		       06		      .byte.b	_06
   8302  71ca		       06		      .byte.b	_06
   8303  71cb		       06		      .byte.b	_06
   8304  71cc		       06		      .byte.b	_06
   8305  71cd		       06		      .byte.b	_06
   8306  71ce		       06		      .byte.b	_06
   8307  71cf		       06		      .byte.b	_06
   8308  71d0		       06		      .byte.b	_06
   8309  71d1		       06		      .byte.b	_06
   8310  71d2		       06		      .byte.b	_06
   8311  71d3		       06		      .byte.b	_06
   8312  71d4		       06		      .byte.b	_06
   8313  71d5		       06		      .byte.b	_06
   8314  71d6		       06		      .byte.b	_06
   8315  71d7		       06		      .byte.b	_06
   8316  71d8		       06		      .byte.b	_06
   8317  71d9		       06		      .byte.b	_06
   8318  71da		       06		      .byte.b	_06
   8319  71db		       06		      .byte.b	_06
   8320  71dc		       06		      .byte.b	_06
   8321  71dd		       06		      .byte.b	_06
   8322  71de		       06		      .byte.b	_06
   8323  71df		       06		      .byte.b	_06
   8324  71e0		       06		      .byte.b	_06
   8325  71e1		       06		      .byte.b	_06
   8326  71e2		       06		      .byte.b	_06
   8327  71e3		       06		      .byte.b	_06
   8328  71e4		       06		      .byte.b	_06
   8329  71e5		       06		      .byte.b	_06
   8330  71e6		       06		      .byte.b	_06
   8331  71e7		       06		      .byte.b	_06
   8332  71e8		       06		      .byte.b	_06
   8333  71e9		       06		      .byte.b	_06
   8334  71ea		       06		      .byte.b	_06
   8335  71eb		       06		      .byte.b	_06
   8336  71ec		       06		      .byte.b	_06
   8337  71ed		       06		      .byte.b	_06
   8338  71ee		       06		      .byte.b	_06
   8339  71ef		       06		      .byte.b	_06
   8340  71f0		       06		      .byte.b	_06
   8341  71f1		       06		      .byte.b	_06
   8342  71f2		       06		      .byte.b	_06
   8343  71f3		       06		      .byte.b	_06
   8344  71f4		       06		      .byte.b	_06
   8345  71f5		       06		      .byte.b	_06
   8346  71f6		       06		      .byte.b	_06
   8347  71f7		       06		      .byte.b	_06
   8348  71f8		       06		      .byte.b	_06
   8349  71f9		       06		      .byte.b	_06
   8350  71fa		       06		      .byte.b	_06
   8351  71fb		       06		      .byte.b	_06
   8352  71fc		       06		      .byte.b	_06
   8353  71fd		       06		      .byte.b	_06
   8354  71fe		       c6		      .byte.b	_C6
   8355  71ff		       c6		      .byte.b	_C6
   8356  7200				   PF_data1
   8357  7200		       00		      .byte.b	%00000000
   8358  7201		       00		      .byte.b	%00000000
   8359  7202		       00		      .byte.b	%00000000
   8360  7203		       00		      .byte.b	%00000000
   8361  7204		       00		      .byte.b	%00000000
   8362  7205		       00		      .byte.b	%00000000
   8363  7206		       00		      .byte.b	%00000000
   8364  7207		       00		      .byte.b	%00000000
   8365  7208		       00		      .byte.b	%00000000
   8366  7209		       00		      .byte.b	%00000000
   8367  720a		       00		      .byte.b	%00000000
   8368  720b		       00		      .byte.b	%00000000
   8369  720c		       00		      .byte.b	%00000000
   8370  720d		       00		      .byte.b	%00000000
   8371  720e		       00		      .byte.b	%00000000
   8372  720f		       00		      .byte.b	%00000000
   8373  7210		       00		      .byte.b	%00000000
   8374  7211		       00		      .byte.b	%00000000
   8375  7212		       00		      .byte.b	%00000000
   8376  7213		       00		      .byte.b	%00000000
   8377  7214		       00		      .byte.b	%00000000
   8378  7215		       00		      .byte.b	%00000000
   8379  7216		       00		      .byte.b	%00000000
   8380  7217		       00		      .byte.b	%00000000
   8381  7218		       00		      .byte.b	%00000000
   8382  7219		       00		      .byte.b	%00000000
   8383  721a		       00		      .byte.b	%00000000
   8384  721b		       00		      .byte.b	%00000000
   8385  721c		       00		      .byte.b	%00000000
   8386  721d		       00		      .byte.b	%00000000
   8387  721e		       00		      .byte.b	%00000000
   8388  721f		       00		      .byte.b	%00000000
   8389  7220		       00		      .byte.b	%00000000
   8390  7221		       00		      .byte.b	%00000000
   8391  7222		       00		      .byte.b	%00000000
   8392  7223		       00		      .byte.b	%00000000
   8393  7224		       00		      .byte.b	%00000000
   8394  7225		       00		      .byte.b	%00000000
   8395  7226		       00		      .byte.b	%00000000
   8396  7227		       00		      .byte.b	%00000000
   8397  7228		       00		      .byte.b	%00000000
   8398  7229		       00		      .byte.b	%00000000
   8399  722a		       00		      .byte.b	%00000000
   8400  722b		       00		      .byte.b	%00000000
   8401  722c		       00		      .byte.b	%00000000
   8402  722d		       00		      .byte.b	%00000000
   8403  722e		       00		      .byte.b	%00000000
   8404  722f		       00		      .byte.b	%00000000
   8405  7230		       00		      .byte.b	%00000000
   8406  7231		       00		      .byte.b	%00000000
   8407  7232		       00		      .byte.b	%00000000
   8408  7233		       00		      .byte.b	%00000000
   8409  7234		       00		      .byte.b	%00000000
   8410  7235		       00		      .byte.b	%00000000
   8411  7236		       00		      .byte.b	%00000000
   8412  7237		       00		      .byte.b	%00000000
   8413  7238		       00		      .byte.b	%00000000
   8414  7239		       00		      .byte.b	%00000000
   8415  723a		       00		      .byte.b	%00000000
   8416  723b		       00		      .byte.b	%00000000
   8417  723c		       00		      .byte.b	%00000000
   8418  723d		       00		      .byte.b	%00000000
   8419  723e		       00		      .byte.b	%00000000
   8420  723f		       00		      .byte.b	%00000000
   8421  7240		       00		      .byte.b	%00000000
   8422  7241		       00		      .byte.b	%00000000
   8423  7242		       00		      .byte.b	%00000000
   8424  7243		       00		      .byte.b	%00000000
   8425  7244		       00		      .byte.b	%00000000
   8426  7245		       00		      .byte.b	%00000000
   8427  7246		       00		      .byte.b	%00000000
   8428  7247		       00		      .byte.b	%00000000
   8429  7248		       00		      .byte.b	%00000000
   8430  7249		       00		      .byte.b	%00000000
   8431  724a		       00		      .byte.b	%00000000
   8432  724b		       00		      .byte.b	%00000000
   8433  724c		       00		      .byte.b	%00000000
   8434  724d		       00		      .byte.b	%00000000
   8435  724e		       00		      .byte.b	%00000000
   8436  724f		       00		      .byte.b	%00000000
   8437  7250		       00		      .byte.b	%00000000
   8438  7251		       00		      .byte.b	%00000000
   8439  7252		       00		      .byte.b	%00000000
   8440  7253		       00		      .byte.b	%00000000
   8441  7254		       00		      .byte.b	%00000000
   8442  7255		       00		      .byte.b	%00000000
   8443  7256		       00		      .byte.b	%00000000
   8444  7257		       00		      .byte.b	%00000000
   8445  7258		       00		      .byte.b	%00000000
   8446  7259		       00		      .byte.b	%00000000
   8447  725a		       00		      .byte.b	%00000000
   8448  725b		       00		      .byte.b	%00000000
   8449  725c		       00		      .byte.b	%00000000
   8450  725d		       00		      .byte.b	%00000000
   8451  725e		       00		      .byte.b	%00000000
   8452  725f		       00		      .byte.b	%00000000
   8453  7260		       00		      .byte.b	%00000000
   8454  7261		       00		      .byte.b	%00000000
   8455  7262		       00		      .byte.b	%00000000
   8456  7263		       00		      .byte.b	%00000000
   8457  7264		       00		      .byte.b	%00000000
   8458  7265		       00		      .byte.b	%00000000
   8459  7266		       00		      .byte.b	%00000000
   8460  7267		       00		      .byte.b	%00000000
   8461  7268		       00		      .byte.b	%00000000
   8462  7269		       00		      .byte.b	%00000000
   8463  726a		       00		      .byte.b	%00000000
   8464  726b		       00		      .byte.b	%00000000
   8465  726c		       00		      .byte.b	%00000000
   8466  726d		       00		      .byte.b	%00000000
   8467  726e		       00		      .byte.b	%00000000
   8468  726f		       00		      .byte.b	%00000000
   8469  7270		       00		      .byte.b	%00000000
   8470  7271		       00		      .byte.b	%00000000
   8471  7272		       00		      .byte.b	%00000000
   8472  7273		       00		      .byte.b	%00000000
   8473  7274		       00		      .byte.b	%00000000
   8474  7275		       00		      .byte.b	%00000000
   8475  7276		       00		      .byte.b	%00000000
   8476  7277		       00		      .byte.b	%00000000
   8477  7278		       00		      .byte.b	%00000000
   8478  7279		       00		      .byte.b	%00000000
   8479  727a		       00		      .byte.b	%00000000
   8480  727b		       00		      .byte.b	%00000000
   8481  727c		       00		      .byte.b	%00000000
   8482  727d		       00		      .byte.b	%00000000
   8483  727e		       00		      .byte.b	%00000000
   8484  727f		       00		      .byte.b	%00000000
   8485  7280		       00		      .byte.b	%00000000
   8486  7281		       00		      .byte.b	%00000000
   8487  7282		       00		      .byte.b	%00000000
   8488  7283		       00		      .byte.b	%00000000
   8489  7284		       00		      .byte.b	%00000000
   8490  7285		       00		      .byte.b	%00000000
   8491  7286		       00		      .byte.b	%00000000
   8492  7287		       00		      .byte.b	%00000000
   8493  7288		       00		      .byte.b	%00000000
   8494  7289		       00		      .byte.b	%00000000
   8495  728a		       00		      .byte.b	%00000000
   8496  728b		       00		      .byte.b	%00000000
   8497  728c		       00		      .byte.b	%00000000
   8498  728d		       00		      .byte.b	%00000000
   8499  728e		       00		      .byte.b	%00000000
   8500  728f		       00		      .byte.b	%00000000
   8501  7290		       00		      .byte.b	%00000000
   8502  7291		       00		      .byte.b	%00000000
   8503  7292		       00		      .byte.b	%00000000
   8504  7293		       00		      .byte.b	%00000000
   8505  7294		       00		      .byte.b	%00000000
   8506  7295		       fe		      .byte.b	%11111110
   8507  7296		       fe		      .byte.b	%11111110
   8508  7297		       fe		      .byte.b	%11111110
   8509  7298		       fe		      .byte.b	%11111110
   8510  7299		       fc		      .byte.b	%11111100
   8511  729a		       fc		      .byte.b	%11111100
   8512  729b		       fc		      .byte.b	%11111100
   8513  729c		       fc		      .byte.b	%11111100
   8514  729d		       c4		      .byte.b	%11000100
   8515  729e		       c4		      .byte.b	%11000100
   8516  729f		       c4		      .byte.b	%11000100
   8517  72a0		       c4		      .byte.b	%11000100
   8518  72a1		       c4		      .byte.b	%11000100
   8519  72a2		       c4		      .byte.b	%11000100
   8520  72a3		       fc		      .byte.b	%11111100
   8521  72a4		       c4		      .byte.b	%11000100
   8522  72a5		       c4		      .byte.b	%11000100
   8523  72a6		       c4		      .byte.b	%11000100
   8524  72a7		       c4		      .byte.b	%11000100
   8525  72a8		       c4		      .byte.b	%11000100
   8526  72a9		       c4		      .byte.b	%11000100
   8527  72aa		       c4		      .byte.b	%11000100
   8528  72ab		       fc		      .byte.b	%11111100
   8529  72ac		       fc		      .byte.b	%11111100
   8530  72ad		       fc		      .byte.b	%11111100
   8531  72ae		       fc		      .byte.b	%11111100
   8532  72af		       fc		      .byte.b	%11111100
   8533  72b0		       00		      .byte.b	%00000000
   8534  72b1		       00		      .byte.b	%00000000
   8535  72b2		       00		      .byte.b	%00000000
   8536  72b3		       00		      .byte.b	%00000000
   8537  72b4		       00		      .byte.b	%00000000
   8538  72b5		       00		      .byte.b	%00000000
   8539  72b6		       00		      .byte.b	%00000000
   8540  72b7		       00		      .byte.b	%00000000
   8541  72b8		       00		      .byte.b	%00000000
   8542  72b9		       00		      .byte.b	%00000000
   8543  72ba		       00		      .byte.b	%00000000
   8544  72bb		       00		      .byte.b	%00000000
   8545  72bc		       00		      .byte.b	%00000000
   8546  72bd		       00		      .byte.b	%00000000
   8547  72be		       00		      .byte.b	%00000000
   8548  72bf		       00		      .byte.b	%00000000
   8549  72c0		       00		      .byte.b	%00000000
   8550  72c1		       00		      .byte.b	%00000000
   8551  72c2		       00		      .byte.b	%00000000
   8552  72c3		       00		      .byte.b	%00000000
   8553  72c4		       00		      .byte.b	%00000000
   8554  72c5		       00		      .byte.b	%00000000
   8555  72c6		       00		      .byte.b	%00000000
   8556  72c7		       00		      .byte.b	%00000000
   8557  72c8		       00		      .byte.b	%00000000
   8558  72c9		       00		      .byte.b	%00000000
   8559  72ca		       00		      .byte.b	%00000000
   8560  72cb		       00		      .byte.b	%00000000
   8561  72cc		       00		      .byte.b	%00000000
   8562  72cd		       00		      .byte.b	%00000000
   8563  72ce		       00		      .byte.b	%00000000
   8564  72cf		       00		      .byte.b	%00000000
   8565  72d0		       00		      .byte.b	%00000000
   8566  72d1		       00		      .byte.b	%00000000
   8567  72d2		       00		      .byte.b	%00000000
   8568  72d3		       00		      .byte.b	%00000000
   8569  72d4		       00		      .byte.b	%00000000
   8570  72d5		       00		      .byte.b	%00000000
   8571  72d6		       00		      .byte.b	%00000000
   8572  72d7		       00		      .byte.b	%00000000
   8573  72d8		       00		      .byte.b	%00000000
   8574  72d9		       00		      .byte.b	%00000000
   8575  72da		       00		      .byte.b	%00000000
   8576  72db		       00		      .byte.b	%00000000
   8577  72dc		       00		      .byte.b	%00000000
   8578  72dd		       00		      .byte.b	%00000000
   8579  72de		       00		      .byte.b	%00000000
   8580  72df		       00		      .byte.b	%00000000
   8581  72e0		       00		      .byte.b	%00000000
   8582  72e1		       00		      .byte.b	%00000000
   8583  72e2		       00		      .byte.b	%00000000
   8584  72e3		       00		      .byte.b	%00000000
   8585  72e4		       00		      .byte.b	%00000000
   8586  72e5		       00		      .byte.b	%00000000
   8587  72e6		       00		      .byte.b	%00000000
   8588  72e7		       00		      .byte.b	%00000000
   8589  72e8		       00		      .byte.b	%00000000
   8590  72e9		       00		      .byte.b	%00000000
   8591  72ea		       00		      .byte.b	%00000000
   8592  72eb		       00		      .byte.b	%00000000
   8593  72ec		       00		      .byte.b	%00000000
   8594  72ed		       fe		      .byte.b	%11111110
   8595  72ee		       fe		      .byte.b	%11111110
   8596  72ef		       fe		      .byte.b	%11111110
   8597  72f0		       fe		      .byte.b	%11111110
   8598  72f1		       fc		      .byte.b	%11111100
   8599  72f2		       fc		      .byte.b	%11111100
   8600  72f3		       fc		      .byte.b	%11111100
   8601  72f4		       fc		      .byte.b	%11111100
   8602  72f5		       c4		      .byte.b	%11000100
   8603  72f6		       c4		      .byte.b	%11000100
   8604  72f7		       c4		      .byte.b	%11000100
   8605  72f8		       c4		      .byte.b	%11000100
   8606  72f9		       c4		      .byte.b	%11000100
   8607  72fa		       c4		      .byte.b	%11000100
   8608  72fb		       fc		      .byte.b	%11111100
   8609  72fc		       c4		      .byte.b	%11000100
   8610  72fd		       c4		      .byte.b	%11000100
   8611  72fe		       c4		      .byte.b	%11000100
   8612  72ff		       c4		      .byte.b	%11000100
   8613  7300		       c4		      .byte.b	%11000100
   8614  7301		       c4		      .byte.b	%11000100
   8615  7302		       c4		      .byte.b	%11000100
   8616  7303		       fc		      .byte.b	%11111100
   8617  7304		       fc		      .byte.b	%11111100
   8618  7305		       fc		      .byte.b	%11111100
   8619  7306		       fc		      .byte.b	%11111100
   8620  7307		       fc		      .byte.b	%11111100
   8621  7308		       00		      .byte.b	%00000000
   8622  7309		       00		      .byte.b	%00000000
   8623  730a		       00		      .byte.b	%00000000
   8624  730b		       00		      .byte.b	%00000000
   8625  730c		       00		      .byte.b	%00000000
   8626  730d		       00		      .byte.b	%00000000
   8627  730e		       00		      .byte.b	%00000000
   8628  730f		       00		      .byte.b	%00000000
   8629  7310		       00		      .byte.b	%00000000
   8630  7311		       00		      .byte.b	%00000000
   8631  7312		       00		      .byte.b	%00000000
   8632  7313		       00		      .byte.b	%00000000
   8633  7314		       00		      .byte.b	%00000000
   8634  7315		       00		      .byte.b	%00000000
   8635  7316		       00		      .byte.b	%00000000
   8636  7317		       00		      .byte.b	%00000000
   8637  7318		       00		      .byte.b	%00000000
   8638  7319		       00		      .byte.b	%00000000
   8639  731a		       00		      .byte.b	%00000000
   8640  731b		       00		      .byte.b	%00000000
   8641  731c		       00		      .byte.b	%00000000
   8642  731d		       00		      .byte.b	%00000000
   8643  731e		       00		      .byte.b	%00000000
   8644  731f		       00		      .byte.b	%00000000
   8645  7320		       00		      .byte.b	%00000000
   8646  7321		       00		      .byte.b	%00000000
   8647  7322		       00		      .byte.b	%00000000
   8648  7323		       00		      .byte.b	%00000000
   8649  7324		       00		      .byte.b	%00000000
   8650  7325		       00		      .byte.b	%00000000
   8651  7326		       00		      .byte.b	%00000000
   8652  7327		       00		      .byte.b	%00000000
   8653  7328		       00		      .byte.b	%00000000
   8654  7329		       00		      .byte.b	%00000000
   8655  732a		       00		      .byte.b	%00000000
   8656  732b		       00		      .byte.b	%00000000
   8657  732c		       00		      .byte.b	%00000000
   8658  732d		       00		      .byte.b	%00000000
   8659  732e		       00		      .byte.b	%00000000
   8660  732f		       00		      .byte.b	%00000000
   8661  7330		       00		      .byte.b	%00000000
   8662  7331		       00		      .byte.b	%00000000
   8663  7332		       00		      .byte.b	%00000000
   8664  7333		       00		      .byte.b	%00000000
   8665  7334		       00		      .byte.b	%00000000
   8666  7335		       00		      .byte.b	%00000000
   8667  7336		       00		      .byte.b	%00000000
   8668  7337		       00		      .byte.b	%00000000
   8669  7338		       00		      .byte.b	%00000000
   8670  7339		       00		      .byte.b	%00000000
   8671  733a		       00		      .byte.b	%00000000
   8672  733b		       00		      .byte.b	%00000000
   8673  733c		       00		      .byte.b	%00000000
   8674  733d		       00		      .byte.b	%00000000
   8675  733e		       00		      .byte.b	%00000000
   8676  733f		       00		      .byte.b	%00000000
   8677  7340		       00		      .byte.b	%00000000
   8678  7341		       00		      .byte.b	%00000000
   8679  7342		       00		      .byte.b	%00000000
   8680  7343		       00		      .byte.b	%00000000
   8681  7344		       00		      .byte.b	%00000000
   8682  7345		       00		      .byte.b	%00000000
   8683  7346		       00		      .byte.b	%00000000
   8684  7347		       00		      .byte.b	%00000000
   8685  7348		       00		      .byte.b	%00000000
   8686  7349		       00		      .byte.b	%00000000
   8687  734a		       00		      .byte.b	%00000000
   8688  734b		       00		      .byte.b	%00000000
   8689  734c		       00		      .byte.b	%00000000
   8690  734d		       00		      .byte.b	%00000000
   8691  734e		       00		      .byte.b	%00000000
   8692  734f		       00		      .byte.b	%00000000
   8693  7350		       00		      .byte.b	%00000000
   8694  7351		       00		      .byte.b	%00000000
   8695  7352		       00		      .byte.b	%00000000
   8696  7353		       00		      .byte.b	%00000000
   8697  7354		       00		      .byte.b	%00000000
   8698  7355		       00		      .byte.b	%00000000
   8699  7356		       00		      .byte.b	%00000000
   8700  7357		       00		      .byte.b	%00000000
   8701  7358		       00		      .byte.b	%00000000
   8702  7359		       00		      .byte.b	%00000000
   8703  735a		       00		      .byte.b	%00000000
   8704  735b		       00		      .byte.b	%00000000
   8705  735c		       00		      .byte.b	%00000000
   8706  735d		       00		      .byte.b	%00000000
   8707  735e		       00		      .byte.b	%00000000
   8708  735f		       00		      .byte.b	%00000000
   8709  7360				   playfieldcolorL0411
   8710  7360		       c2		      .byte.b	_C2
   8711  7361		       c2		      .byte.b	_C2
   8712  7362		       00		      .byte.b	_00
   8713  7363		       00		      .byte.b	_00
   8714  7364		       00		      .byte.b	_00
   8715  7365		       00		      .byte.b	_00
   8716  7366		       00		      .byte.b	_00
   8717  7367		       00		      .byte.b	_00
   8718  7368		       00		      .byte.b	_00
   8719  7369		       00		      .byte.b	_00
   8720  736a		       00		      .byte.b	_00
   8721  736b		       00		      .byte.b	_00
   8722  736c		       00		      .byte.b	_00
   8723  736d		       00		      .byte.b	_00
   8724  736e		       00		      .byte.b	_00
   8725  736f		       00		      .byte.b	_00
   8726  7370		       00		      .byte.b	_00
   8727  7371		       00		      .byte.b	_00
   8728  7372		       00		      .byte.b	_00
   8729  7373		       00		      .byte.b	_00
   8730  7374		       00		      .byte.b	_00
   8731  7375		       00		      .byte.b	_00
   8732  7376		       00		      .byte.b	_00
   8733  7377		       00		      .byte.b	_00
   8734  7378		       00		      .byte.b	_00
   8735  7379		       00		      .byte.b	_00
   8736  737a		       00		      .byte.b	_00
   8737  737b		       00		      .byte.b	_00
   8738  737c		       00		      .byte.b	_00
   8739  737d		       00		      .byte.b	_00
   8740  737e		       00		      .byte.b	_00
   8741  737f		       00		      .byte.b	_00
   8742  7380		       00		      .byte.b	_00
   8743  7381		       00		      .byte.b	_00
   8744  7382		       00		      .byte.b	_00
   8745  7383		       00		      .byte.b	_00
   8746  7384		       00		      .byte.b	_00
   8747  7385		       00		      .byte.b	_00
   8748  7386		       00		      .byte.b	_00
   8749  7387		       00		      .byte.b	_00
   8750  7388		       00		      .byte.b	_00
   8751  7389		       00		      .byte.b	_00
   8752  738a		       00		      .byte.b	_00
   8753  738b		       00		      .byte.b	_00
   8754  738c		       00		      .byte.b	_00
   8755  738d		       00		      .byte.b	_00
   8756  738e		       00		      .byte.b	_00
   8757  738f		       00		      .byte.b	_00
   8758  7390		       00		      .byte.b	_00
   8759  7391		       00		      .byte.b	_00
   8760  7392		       00		      .byte.b	_00
   8761  7393		       00		      .byte.b	_00
   8762  7394		       00		      .byte.b	_00
   8763  7395		       00		      .byte.b	_00
   8764  7396		       00		      .byte.b	_00
   8765  7397		       00		      .byte.b	_00
   8766  7398		       00		      .byte.b	_00
   8767  7399		       00		      .byte.b	_00
   8768  739a		       00		      .byte.b	_00
   8769  739b		       00		      .byte.b	_00
   8770  739c		       00		      .byte.b	_00
   8771  739d		       00		      .byte.b	_00
   8772  739e		       f2		      .byte.b	_F2
   8773  739f		       f2		      .byte.b	_F2
   8774  73a0		       f0		      .byte.b	_F0
   8775  73a1		       f0		      .byte.b	_F0
   8776  73a2		       f2		      .byte.b	_F2
   8777  73a3		       f2		      .byte.b	_F2
   8778  73a4		       f0		      .byte.b	_F0
   8779  73a5		       f0		      .byte.b	_F0
   8780  73a6		       f2		      .byte.b	_F2
   8781  73a7		       f2		      .byte.b	_F2
   8782  73a8		       f0		      .byte.b	_F0
   8783  73a9		       f0		      .byte.b	_F0
   8784  73aa		       f2		      .byte.b	_F2
   8785  73ab		       f2		      .byte.b	_F2
   8786  73ac		       f0		      .byte.b	_F0
   8787  73ad		       f0		      .byte.b	_F0
   8788  73ae		       f2		      .byte.b	_F2
   8789  73af		       f2		      .byte.b	_F2
   8790  73b0		       f0		      .byte.b	_F0
   8791  73b1		       f0		      .byte.b	_F0
   8792  73b2		       f2		      .byte.b	_F2
   8793  73b3		       f2		      .byte.b	_F2
   8794  73b4		       f0		      .byte.b	_F0
   8795  73b5		       f0		      .byte.b	_F0
   8796  73b6		       00		      .byte.b	_00
   8797  73b7		       00		      .byte.b	_00
   8798  73b8				   playfieldcolorL0414
   8799  73b8		       c2		      .byte.b	_C2
   8800  73b9		       c2		      .byte.b	_C2
   8801  73ba		       00		      .byte.b	_00
   8802  73bb		       00		      .byte.b	_00
   8803  73bc		       00		      .byte.b	_00
   8804  73bd		       00		      .byte.b	_00
   8805  73be		       00		      .byte.b	_00
   8806  73bf		       00		      .byte.b	_00
   8807  73c0		       00		      .byte.b	_00
   8808  73c1		       00		      .byte.b	_00
   8809  73c2		       00		      .byte.b	_00
   8810  73c3		       00		      .byte.b	_00
   8811  73c4		       00		      .byte.b	_00
   8812  73c5		       00		      .byte.b	_00
   8813  73c6		       00		      .byte.b	_00
   8814  73c7		       00		      .byte.b	_00
   8815  73c8		       00		      .byte.b	_00
   8816  73c9		       00		      .byte.b	_00
   8817  73ca		       00		      .byte.b	_00
   8818  73cb		       00		      .byte.b	_00
   8819  73cc		       00		      .byte.b	_00
   8820  73cd		       00		      .byte.b	_00
   8821  73ce		       00		      .byte.b	_00
   8822  73cf		       00		      .byte.b	_00
   8823  73d0		       00		      .byte.b	_00
   8824  73d1		       00		      .byte.b	_00
   8825  73d2		       00		      .byte.b	_00
   8826  73d3		       00		      .byte.b	_00
   8827  73d4		       00		      .byte.b	_00
   8828  73d5		       00		      .byte.b	_00
   8829  73d6		       00		      .byte.b	_00
   8830  73d7		       00		      .byte.b	_00
   8831  73d8		       00		      .byte.b	_00
   8832  73d9		       00		      .byte.b	_00
   8833  73da		       00		      .byte.b	_00
   8834  73db		       00		      .byte.b	_00
   8835  73dc		       00		      .byte.b	_00
   8836  73dd		       00		      .byte.b	_00
   8837  73de		       00		      .byte.b	_00
   8838  73df		       00		      .byte.b	_00
   8839  73e0		       00		      .byte.b	_00
   8840  73e1		       00		      .byte.b	_00
   8841  73e2		       00		      .byte.b	_00
   8842  73e3		       00		      .byte.b	_00
   8843  73e4		       00		      .byte.b	_00
   8844  73e5		       00		      .byte.b	_00
   8845  73e6		       00		      .byte.b	_00
   8846  73e7		       00		      .byte.b	_00
   8847  73e8		       00		      .byte.b	_00
   8848  73e9		       00		      .byte.b	_00
   8849  73ea		       00		      .byte.b	_00
   8850  73eb		       00		      .byte.b	_00
   8851  73ec		       00		      .byte.b	_00
   8852  73ed		       00		      .byte.b	_00
   8853  73ee		       00		      .byte.b	_00
   8854  73ef		       34		      .byte.b	_34
   8855  73f0		       34		      .byte.b	_34
   8856  73f1		       34		      .byte.b	_34
   8857  73f2		       34		      .byte.b	_34
   8858  73f3		       34		      .byte.b	_34
   8859  73f4		       34		      .byte.b	_34
   8860  73f5		       34		      .byte.b	_34
   8861  73f6		       34		      .byte.b	_34
   8862  73f7		       34		      .byte.b	_34
   8863  73f8		       f0		      .byte.b	_F0
   8864  73f9		       f0		      .byte.b	_F0
   8865  73fa		       f2		      .byte.b	_F2
   8866  73fb		       f2		      .byte.b	_F2
   8867  73fc		       f0		      .byte.b	_F0
   8868  73fd		       f0		      .byte.b	_F0
   8869  73fe		       f2		      .byte.b	_F2
   8870  73ff		       f2		      .byte.b	_F2
   8871  7400		       f0		      .byte.b	_F0
   8872  7401		       f0		      .byte.b	_F0
   8873  7402		       f2		      .byte.b	_F2
   8874  7403		       f2		      .byte.b	_F2
   8875  7404		       f0		      .byte.b	_F0
   8876  7405		       f0		      .byte.b	_F0
   8877  7406		       f2		      .byte.b	_F2
   8878  7407		       f2		      .byte.b	_F2
   8879  7408		       f0		      .byte.b	_F0
   8880  7409		       f0		      .byte.b	_F0
   8881  740a		       f2		      .byte.b	_F2
   8882  740b		       f2		      .byte.b	_F2
   8883  740c		       f0		      .byte.b	_F0
   8884  740d		       f0		      .byte.b	_F0
   8885  740e		       00		      .byte.b	_00
   8886  740f		       00		      .byte.b	_00
   8887  7410				   playfieldcolorL0417
   8888  7410		       c2		      .byte.b	_C2
   8889  7411		       c2		      .byte.b	_C2
   8890  7412		       00		      .byte.b	_00
   8891  7413		       00		      .byte.b	_00
   8892  7414		       00		      .byte.b	_00
   8893  7415		       00		      .byte.b	_00
   8894  7416		       00		      .byte.b	_00
   8895  7417		       00		      .byte.b	_00
   8896  7418		       00		      .byte.b	_00
   8897  7419		       00		      .byte.b	_00
   8898  741a		       00		      .byte.b	_00
   8899  741b		       00		      .byte.b	_00
   8900  741c		       00		      .byte.b	_00
   8901  741d		       00		      .byte.b	_00
   8902  741e		       00		      .byte.b	_00
   8903  741f		       00		      .byte.b	_00
   8904  7420		       00		      .byte.b	_00
   8905  7421		       00		      .byte.b	_00
   8906  7422		       00		      .byte.b	_00
   8907  7423		       00		      .byte.b	_00
   8908  7424		       00		      .byte.b	_00
   8909  7425		       00		      .byte.b	_00
   8910  7426		       00		      .byte.b	_00
   8911  7427		       00		      .byte.b	_00
   8912  7428		       00		      .byte.b	_00
   8913  7429		       00		      .byte.b	_00
   8914  742a		       00		      .byte.b	_00
   8915  742b		       00		      .byte.b	_00
   8916  742c		       00		      .byte.b	_00
   8917  742d		       00		      .byte.b	_00
   8918  742e		       00		      .byte.b	_00
   8919  742f		       00		      .byte.b	_00
   8920  7430		       00		      .byte.b	_00
   8921  7431		       00		      .byte.b	_00
   8922  7432		       00		      .byte.b	_00
   8923  7433		       00		      .byte.b	_00
   8924  7434		       00		      .byte.b	_00
   8925  7435		       00		      .byte.b	_00
   8926  7436		       00		      .byte.b	_00
   8927  7437		       00		      .byte.b	_00
   8928  7438		       00		      .byte.b	_00
   8929  7439		       00		      .byte.b	_00
   8930  743a		       00		      .byte.b	_00
   8931  743b		       00		      .byte.b	_00
   8932  743c		       00		      .byte.b	_00
   8933  743d		       00		      .byte.b	_00
   8934  743e		       00		      .byte.b	_00
   8935  743f		       00		      .byte.b	_00
   8936  7440		       00		      .byte.b	_00
   8937  7441		       00		      .byte.b	_00
   8938  7442		       00		      .byte.b	_00
   8939  7443		       00		      .byte.b	_00
   8940  7444		       00		      .byte.b	_00
   8941  7445		       00		      .byte.b	_00
   8942  7446		       00		      .byte.b	_00
   8943  7447		       34		      .byte.b	_34
   8944  7448		       34		      .byte.b	_34
   8945  7449		       34		      .byte.b	_34
   8946  744a		       34		      .byte.b	_34
   8947  744b		       34		      .byte.b	_34
   8948  744c		       34		      .byte.b	_34
   8949  744d		       34		      .byte.b	_34
   8950  744e		       34		      .byte.b	_34
   8951  744f		       34		      .byte.b	_34
   8952  7450		       34		      .byte.b	_34
   8953  7451		       34		      .byte.b	_34
   8954  7452		       f2		      .byte.b	_F2
   8955  7453		       f2		      .byte.b	_F2
   8956  7454		       f0		      .byte.b	_F0
   8957  7455		       f0		      .byte.b	_F0
   8958  7456		       f2		      .byte.b	_F2
   8959  7457		       f2		      .byte.b	_F2
   8960  7458		       f0		      .byte.b	_F0
   8961  7459		       f0		      .byte.b	_F0
   8962  745a		       f2		      .byte.b	_F2
   8963  745b		       f2		      .byte.b	_F2
   8964  745c		       f0		      .byte.b	_F0
   8965  745d		       f0		      .byte.b	_F0
   8966  745e		       f2		      .byte.b	_F2
   8967  745f		       f2		      .byte.b	_F2
   8968  7460		       f0		      .byte.b	_F0
   8969  7461		       f0		      .byte.b	_F0
   8970  7462		       f2		      .byte.b	_F2
   8971  7463		       f2		      .byte.b	_F2
   8972  7464		       f0		      .byte.b	_F0
   8973  7465		       f0		      .byte.b	_F0
   8974  7466		       00		      .byte.b	_00
   8975  7467		       00		      .byte.b	_00
   8976  7468				   playfieldcolorL0420
   8977  7468		       c2		      .byte.b	_C2
   8978  7469		       c2		      .byte.b	_C2
   8979  746a		       00		      .byte.b	_00
   8980  746b		       00		      .byte.b	_00
   8981  746c		       00		      .byte.b	_00
   8982  746d		       00		      .byte.b	_00
   8983  746e		       00		      .byte.b	_00
   8984  746f		       00		      .byte.b	_00
   8985  7470		       00		      .byte.b	_00
   8986  7471		       00		      .byte.b	_00
   8987  7472		       00		      .byte.b	_00
   8988  7473		       00		      .byte.b	_00
   8989  7474		       00		      .byte.b	_00
   8990  7475		       00		      .byte.b	_00
   8991  7476		       00		      .byte.b	_00
   8992  7477		       00		      .byte.b	_00
   8993  7478		       00		      .byte.b	_00
   8994  7479		       00		      .byte.b	_00
   8995  747a		       00		      .byte.b	_00
   8996  747b		       00		      .byte.b	_00
   8997  747c		       00		      .byte.b	_00
   8998  747d		       00		      .byte.b	_00
   8999  747e		       00		      .byte.b	_00
   9000  747f		       00		      .byte.b	_00
   9001  7480		       00		      .byte.b	_00
   9002  7481		       00		      .byte.b	_00
   9003  7482		       00		      .byte.b	_00
   9004  7483		       00		      .byte.b	_00
   9005  7484		       00		      .byte.b	_00
   9006  7485		       00		      .byte.b	_00
   9007  7486		       00		      .byte.b	_00
   9008  7487		       00		      .byte.b	_00
   9009  7488		       00		      .byte.b	_00
   9010  7489		       00		      .byte.b	_00
   9011  748a		       00		      .byte.b	_00
   9012  748b		       00		      .byte.b	_00
   9013  748c		       00		      .byte.b	_00
   9014  748d		       00		      .byte.b	_00
   9015  748e		       00		      .byte.b	_00
   9016  748f		       00		      .byte.b	_00
   9017  7490		       00		      .byte.b	_00
   9018  7491		       00		      .byte.b	_00
   9019  7492		       00		      .byte.b	_00
   9020  7493		       00		      .byte.b	_00
   9021  7494		       00		      .byte.b	_00
   9022  7495		       00		      .byte.b	_00
   9023  7496		       00		      .byte.b	_00
   9024  7497		       00		      .byte.b	_00
   9025  7498		       00		      .byte.b	_00
   9026  7499		       00		      .byte.b	_00
   9027  749a		       00		      .byte.b	_00
   9028  749b		       00		      .byte.b	_00
   9029  749c		       00		      .byte.b	_00
   9030  749d		       00		      .byte.b	_00
   9031  749e		       00		      .byte.b	_00
   9032  749f		       34		      .byte.b	_34
   9033  74a0		       34		      .byte.b	_34
   9034  74a1		       34		      .byte.b	_34
   9035  74a2		       34		      .byte.b	_34
   9036  74a3		       34		      .byte.b	_34
   9037  74a4		       34		      .byte.b	_34
   9038  74a5		       34		      .byte.b	_34
   9039  74a6		       34		      .byte.b	_34
   9040  74a7		       34		      .byte.b	_34
   9041  74a8		       34		      .byte.b	_34
   9042  74a9		       34		      .byte.b	_34
   9043  74aa		       34		      .byte.b	_34
   9044  74ab		       34		      .byte.b	_34
   9045  74ac		       f0		      .byte.b	_F0
   9046  74ad		       f0		      .byte.b	_F0
   9047  74ae		       f2		      .byte.b	_F2
   9048  74af		       f2		      .byte.b	_F2
   9049  74b0		       f0		      .byte.b	_F0
   9050  74b1		       f0		      .byte.b	_F0
   9051  74b2		       f2		      .byte.b	_F2
   9052  74b3		       f2		      .byte.b	_F2
   9053  74b4		       f0		      .byte.b	_F0
   9054  74b5		       f0		      .byte.b	_F0
   9055  74b6		       f2		      .byte.b	_F2
   9056  74b7		       f2		      .byte.b	_F2
   9057  74b8		       f0		      .byte.b	_F0
   9058  74b9		       f0		      .byte.b	_F0
   9059  74ba		       f2		      .byte.b	_F2
   9060  74bb		       f2		      .byte.b	_F2
   9061  74bc		       f0		      .byte.b	_F0
   9062  74bd		       f0		      .byte.b	_F0
   9063  74be		       00		      .byte.b	_00
   9064  74bf		       00		      .byte.b	_00
   9065  74c0				   playfieldcolorL0424
   9066  74c0		       c2		      .byte.b	_C2
   9067  74c1		       c2		      .byte.b	_C2
   9068  74c2		       00		      .byte.b	_00
   9069  74c3		       00		      .byte.b	_00
   9070  74c4		       00		      .byte.b	_00
   9071  74c5		       00		      .byte.b	_00
   9072  74c6		       00		      .byte.b	_00
   9073  74c7		       00		      .byte.b	_00
   9074  74c8		       00		      .byte.b	_00
   9075  74c9		       00		      .byte.b	_00
   9076  74ca		       00		      .byte.b	_00
   9077  74cb		       00		      .byte.b	_00
   9078  74cc		       00		      .byte.b	_00
   9079  74cd		       00		      .byte.b	_00
   9080  74ce		       00		      .byte.b	_00
   9081  74cf		       00		      .byte.b	_00
   9082  74d0		       00		      .byte.b	_00
   9083  74d1		       00		      .byte.b	_00
   9084  74d2		       00		      .byte.b	_00
   9085  74d3		       00		      .byte.b	_00
   9086  74d4		       00		      .byte.b	_00
   9087  74d5		       00		      .byte.b	_00
   9088  74d6		       00		      .byte.b	_00
   9089  74d7		       00		      .byte.b	_00
   9090  74d8		       00		      .byte.b	_00
   9091  74d9		       00		      .byte.b	_00
   9092  74da		       00		      .byte.b	_00
   9093  74db		       00		      .byte.b	_00
   9094  74dc		       00		      .byte.b	_00
   9095  74dd		       00		      .byte.b	_00
   9096  74de		       00		      .byte.b	_00
   9097  74df		       00		      .byte.b	_00
   9098  74e0		       00		      .byte.b	_00
   9099  74e1		       00		      .byte.b	_00
   9100  74e2		       00		      .byte.b	_00
   9101  74e3		       00		      .byte.b	_00
   9102  74e4		       00		      .byte.b	_00
   9103  74e5		       00		      .byte.b	_00
   9104  74e6		       00		      .byte.b	_00
   9105  74e7		       00		      .byte.b	_00
   9106  74e8		       00		      .byte.b	_00
   9107  74e9		       00		      .byte.b	_00
   9108  74ea		       00		      .byte.b	_00
   9109  74eb		       00		      .byte.b	_00
   9110  74ec		       00		      .byte.b	_00
   9111  74ed		       00		      .byte.b	_00
   9112  74ee		       00		      .byte.b	_00
   9113  74ef		       00		      .byte.b	_00
   9114  74f0		       00		      .byte.b	_00
   9115  74f1		       00		      .byte.b	_00
   9116  74f2		       00		      .byte.b	_00
   9117  74f3		       00		      .byte.b	_00
   9118  74f4		       00		      .byte.b	_00
   9119  74f5		       00		      .byte.b	_00
   9120  74f6		       00		      .byte.b	_00
   9121  74f7		       34		      .byte.b	_34
   9122  74f8		       34		      .byte.b	_34
   9123  74f9		       34		      .byte.b	_34
   9124  74fa		       34		      .byte.b	_34
   9125  74fb		       34		      .byte.b	_34
   9126  74fc		       34		      .byte.b	_34
   9127  74fd		       34		      .byte.b	_34
   9128  74fe		       34		      .byte.b	_34
   9129  74ff		       34		      .byte.b	_34
   9130  7500		       34		      .byte.b	_34
   9131  7501		       34		      .byte.b	_34
   9132  7502		       34		      .byte.b	_34
   9133  7503		       34		      .byte.b	_34
   9134  7504		       34		      .byte.b	_34
   9135  7505		       34		      .byte.b	_34
   9136  7506		       f2		      .byte.b	_F2
   9137  7507		       f2		      .byte.b	_F2
   9138  7508		       f0		      .byte.b	_F0
   9139  7509		       f0		      .byte.b	_F0
   9140  750a		       f2		      .byte.b	_F2
   9141  750b		       f2		      .byte.b	_F2
   9142  750c		       f0		      .byte.b	_F0
   9143  750d		       f0		      .byte.b	_F0
   9144  750e		       f2		      .byte.b	_F2
   9145  750f		       f2		      .byte.b	_F2
   9146  7510		       f0		      .byte.b	_F0
   9147  7511		       f0		      .byte.b	_F0
   9148  7512		       f2		      .byte.b	_F2
   9149  7513		       f2		      .byte.b	_F2
   9150  7514		       f0		      .byte.b	_F0
   9151  7515		       f0		      .byte.b	_F0
   9152  7516		       00		      .byte.b	_00
   9153  7517		       00		      .byte.b	_00
   9154  7518				   playfieldcolorL0427
   9155  7518		       c2		      .byte.b	_C2
   9156  7519		       c2		      .byte.b	_C2
   9157  751a		       00		      .byte.b	_00
   9158  751b		       00		      .byte.b	_00
   9159  751c		       00		      .byte.b	_00
   9160  751d		       00		      .byte.b	_00
   9161  751e		       00		      .byte.b	_00
   9162  751f		       00		      .byte.b	_00
   9163  7520		       00		      .byte.b	_00
   9164  7521		       00		      .byte.b	_00
   9165  7522		       00		      .byte.b	_00
   9166  7523		       00		      .byte.b	_00
   9167  7524		       00		      .byte.b	_00
   9168  7525		       00		      .byte.b	_00
   9169  7526		       00		      .byte.b	_00
   9170  7527		       00		      .byte.b	_00
   9171  7528		       00		      .byte.b	_00
   9172  7529		       00		      .byte.b	_00
   9173  752a		       00		      .byte.b	_00
   9174  752b		       00		      .byte.b	_00
   9175  752c		       00		      .byte.b	_00
   9176  752d		       00		      .byte.b	_00
   9177  752e		       00		      .byte.b	_00
   9178  752f		       00		      .byte.b	_00
   9179  7530		       00		      .byte.b	_00
   9180  7531		       00		      .byte.b	_00
   9181  7532		       00		      .byte.b	_00
   9182  7533		       00		      .byte.b	_00
   9183  7534		       00		      .byte.b	_00
   9184  7535		       00		      .byte.b	_00
   9185  7536		       00		      .byte.b	_00
   9186  7537		       00		      .byte.b	_00
   9187  7538		       00		      .byte.b	_00
   9188  7539		       00		      .byte.b	_00
   9189  753a		       00		      .byte.b	_00
   9190  753b		       00		      .byte.b	_00
   9191  753c		       00		      .byte.b	_00
   9192  753d		       00		      .byte.b	_00
   9193  753e		       00		      .byte.b	_00
   9194  753f		       00		      .byte.b	_00
   9195  7540		       00		      .byte.b	_00
   9196  7541		       00		      .byte.b	_00
   9197  7542		       00		      .byte.b	_00
   9198  7543		       00		      .byte.b	_00
   9199  7544		       00		      .byte.b	_00
   9200  7545		       00		      .byte.b	_00
   9201  7546		       00		      .byte.b	_00
   9202  7547		       00		      .byte.b	_00
   9203  7548		       00		      .byte.b	_00
   9204  7549		       00		      .byte.b	_00
   9205  754a		       00		      .byte.b	_00
   9206  754b		       00		      .byte.b	_00
   9207  754c		       00		      .byte.b	_00
   9208  754d		       00		      .byte.b	_00
   9209  754e		       00		      .byte.b	_00
   9210  754f		       34		      .byte.b	_34
   9211  7550		       34		      .byte.b	_34
   9212  7551		       34		      .byte.b	_34
   9213  7552		       34		      .byte.b	_34
   9214  7553		       34		      .byte.b	_34
   9215  7554		       34		      .byte.b	_34
   9216  7555		       34		      .byte.b	_34
   9217  7556		       34		      .byte.b	_34
   9218  7557		       34		      .byte.b	_34
   9219  7558		       34		      .byte.b	_34
   9220  7559		       34		      .byte.b	_34
   9221  755a		       34		      .byte.b	_34
   9222  755b		       34		      .byte.b	_34
   9223  755c		       34		      .byte.b	_34
   9224  755d		       34		      .byte.b	_34
   9225  755e		       34		      .byte.b	_34
   9226  755f		       34		      .byte.b	_34
   9227  7560		       f0		      .byte.b	_F0
   9228  7561		       f0		      .byte.b	_F0
   9229  7562		       f2		      .byte.b	_F2
   9230  7563		       f2		      .byte.b	_F2
   9231  7564		       f0		      .byte.b	_F0
   9232  7565		       f0		      .byte.b	_F0
   9233  7566		       f2		      .byte.b	_F2
   9234  7567		       f2		      .byte.b	_F2
   9235  7568		       f0		      .byte.b	_F0
   9236  7569		       f0		      .byte.b	_F0
   9237  756a		       f2		      .byte.b	_F2
   9238  756b		       f2		      .byte.b	_F2
   9239  756c		       f0		      .byte.b	_F0
   9240  756d		       f0		      .byte.b	_F0
   9241  756e		       00		      .byte.b	_00
   9242  756f		       00		      .byte.b	_00
   9243  7570				   playfieldcolorL0429
   9244  7570		       c2		      .byte.b	_C2
   9245  7571		       c2		      .byte.b	_C2
   9246  7572		       00		      .byte.b	_00
   9247  7573		       00		      .byte.b	_00
   9248  7574		       00		      .byte.b	_00
   9249  7575		       00		      .byte.b	_00
   9250  7576		       00		      .byte.b	_00
   9251  7577		       00		      .byte.b	_00
   9252  7578		       00		      .byte.b	_00
   9253  7579		       00		      .byte.b	_00
   9254  757a		       00		      .byte.b	_00
   9255  757b		       00		      .byte.b	_00
   9256  757c		       00		      .byte.b	_00
   9257  757d		       00		      .byte.b	_00
   9258  757e		       00		      .byte.b	_00
   9259  757f		       00		      .byte.b	_00
   9260  7580		       00		      .byte.b	_00
   9261  7581		       00		      .byte.b	_00
   9262  7582		       00		      .byte.b	_00
   9263  7583		       00		      .byte.b	_00
   9264  7584		       00		      .byte.b	_00
   9265  7585		       00		      .byte.b	_00
   9266  7586		       00		      .byte.b	_00
   9267  7587		       00		      .byte.b	_00
   9268  7588		       00		      .byte.b	_00
   9269  7589		       00		      .byte.b	_00
   9270  758a		       00		      .byte.b	_00
   9271  758b		       00		      .byte.b	_00
   9272  758c		       00		      .byte.b	_00
   9273  758d		       00		      .byte.b	_00
   9274  758e		       00		      .byte.b	_00
   9275  758f		       00		      .byte.b	_00
   9276  7590		       00		      .byte.b	_00
   9277  7591		       00		      .byte.b	_00
   9278  7592		       00		      .byte.b	_00
   9279  7593		       00		      .byte.b	_00
   9280  7594		       00		      .byte.b	_00
   9281  7595		       00		      .byte.b	_00
   9282  7596		       00		      .byte.b	_00
   9283  7597		       00		      .byte.b	_00
   9284  7598		       00		      .byte.b	_00
   9285  7599		       00		      .byte.b	_00
   9286  759a		       00		      .byte.b	_00
   9287  759b		       00		      .byte.b	_00
   9288  759c		       00		      .byte.b	_00
   9289  759d		       00		      .byte.b	_00
   9290  759e		       00		      .byte.b	_00
   9291  759f		       00		      .byte.b	_00
   9292  75a0		       00		      .byte.b	_00
   9293  75a1		       00		      .byte.b	_00
   9294  75a2		       00		      .byte.b	_00
   9295  75a3		       00		      .byte.b	_00
   9296  75a4		       00		      .byte.b	_00
   9297  75a5		       00		      .byte.b	_00
   9298  75a6		       00		      .byte.b	_00
   9299  75a7		       34		      .byte.b	_34
   9300  75a8		       34		      .byte.b	_34
   9301  75a9		       34		      .byte.b	_34
   9302  75aa		       34		      .byte.b	_34
   9303  75ab		       34		      .byte.b	_34
   9304  75ac		       34		      .byte.b	_34
   9305  75ad		       34		      .byte.b	_34
   9306  75ae		       34		      .byte.b	_34
   9307  75af		       34		      .byte.b	_34
   9308  75b0		       34		      .byte.b	_34
   9309  75b1		       34		      .byte.b	_34
   9310  75b2		       34		      .byte.b	_34
   9311  75b3		       34		      .byte.b	_34
   9312  75b4		       34		      .byte.b	_34
   9313  75b5		       34		      .byte.b	_34
   9314  75b6		       34		      .byte.b	_34
   9315  75b7		       34		      .byte.b	_34
   9316  75b8		       34		      .byte.b	_34
   9317  75b9		       34		      .byte.b	_34
   9318  75ba		       f2		      .byte.b	_F2
   9319  75bb		       f2		      .byte.b	_F2
   9320  75bc		       f0		      .byte.b	_F0
   9321  75bd		       f0		      .byte.b	_F0
   9322  75be		       f2		      .byte.b	_F2
   9323  75bf		       f2		      .byte.b	_F2
   9324  75c0		       f0		      .byte.b	_F0
   9325  75c1		       f0		      .byte.b	_F0
   9326  75c2		       f2		      .byte.b	_F2
   9327  75c3		       f2		      .byte.b	_F2
   9328  75c4		       f0		      .byte.b	_F0
   9329  75c5		       f0		      .byte.b	_F0
   9330  75c6		       00		      .byte.b	_00
   9331  75c7		       00		      .byte.b	_00
   9332  75c8				   playfieldcolorL0433
   9333  75c8		       c2		      .byte.b	_C2
   9334  75c9		       c2		      .byte.b	_C2
   9335  75ca		       00		      .byte.b	_00
   9336  75cb		       00		      .byte.b	_00
   9337  75cc		       00		      .byte.b	_00
   9338  75cd		       00		      .byte.b	_00
   9339  75ce		       00		      .byte.b	_00
   9340  75cf		       00		      .byte.b	_00
   9341  75d0		       00		      .byte.b	_00
   9342  75d1		       00		      .byte.b	_00
   9343  75d2		       00		      .byte.b	_00
   9344  75d3		       00		      .byte.b	_00
   9345  75d4		       00		      .byte.b	_00
   9346  75d5		       00		      .byte.b	_00
   9347  75d6		       00		      .byte.b	_00
   9348  75d7		       00		      .byte.b	_00
   9349  75d8		       00		      .byte.b	_00
   9350  75d9		       00		      .byte.b	_00
   9351  75da		       00		      .byte.b	_00
   9352  75db		       00		      .byte.b	_00
   9353  75dc		       00		      .byte.b	_00
   9354  75dd		       00		      .byte.b	_00
   9355  75de		       00		      .byte.b	_00
   9356  75df		       00		      .byte.b	_00
   9357  75e0		       00		      .byte.b	_00
   9358  75e1		       00		      .byte.b	_00
   9359  75e2		       00		      .byte.b	_00
   9360  75e3		       00		      .byte.b	_00
   9361  75e4		       00		      .byte.b	_00
   9362  75e5		       00		      .byte.b	_00
   9363  75e6		       00		      .byte.b	_00
   9364  75e7		       00		      .byte.b	_00
   9365  75e8		       00		      .byte.b	_00
   9366  75e9		       00		      .byte.b	_00
   9367  75ea		       00		      .byte.b	_00
   9368  75eb		       00		      .byte.b	_00
   9369  75ec		       00		      .byte.b	_00
   9370  75ed		       00		      .byte.b	_00
   9371  75ee		       00		      .byte.b	_00
   9372  75ef		       00		      .byte.b	_00
   9373  75f0		       00		      .byte.b	_00
   9374  75f1		       00		      .byte.b	_00
   9375  75f2		       00		      .byte.b	_00
   9376  75f3		       00		      .byte.b	_00
   9377  75f4		       00		      .byte.b	_00
   9378  75f5		       00		      .byte.b	_00
   9379  75f6		       00		      .byte.b	_00
   9380  75f7		       00		      .byte.b	_00
   9381  75f8		       00		      .byte.b	_00
   9382  75f9		       00		      .byte.b	_00
   9383  75fa		       00		      .byte.b	_00
   9384  75fb		       00		      .byte.b	_00
   9385  75fc		       00		      .byte.b	_00
   9386  75fd		       00		      .byte.b	_00
   9387  75fe		       00		      .byte.b	_00
   9388  75ff		       34		      .byte.b	_34
   9389  7600		       34		      .byte.b	_34
   9390  7601		       34		      .byte.b	_34
   9391  7602		       34		      .byte.b	_34
   9392  7603		       34		      .byte.b	_34
   9393  7604		       34		      .byte.b	_34
   9394  7605		       34		      .byte.b	_34
   9395  7606		       34		      .byte.b	_34
   9396  7607		       34		      .byte.b	_34
   9397  7608		       34		      .byte.b	_34
   9398  7609		       34		      .byte.b	_34
   9399  760a		       34		      .byte.b	_34
   9400  760b		       34		      .byte.b	_34
   9401  760c		       34		      .byte.b	_34
   9402  760d		       34		      .byte.b	_34
   9403  760e		       34		      .byte.b	_34
   9404  760f		       34		      .byte.b	_34
   9405  7610		       34		      .byte.b	_34
   9406  7611		       34		      .byte.b	_34
   9407  7612		       34		      .byte.b	_34
   9408  7613		       34		      .byte.b	_34
   9409  7614		       f0		      .byte.b	_F0
   9410  7615		       f0		      .byte.b	_F0
   9411  7616		       f2		      .byte.b	_F2
   9412  7617		       f2		      .byte.b	_F2
   9413  7618		       f0		      .byte.b	_F0
   9414  7619		       f0		      .byte.b	_F0
   9415  761a		       f2		      .byte.b	_F2
   9416  761b		       f2		      .byte.b	_F2
   9417  761c		       f0		      .byte.b	_F0
   9418  761d		       f0		      .byte.b	_F0
   9419  761e		       00		      .byte.b	_00
   9420  761f		       00		      .byte.b	_00
   9421  7620				   playfieldcolorL0435
   9422  7620		       c2		      .byte.b	_C2
   9423  7621		       c2		      .byte.b	_C2
   9424  7622		       00		      .byte.b	_00
   9425  7623		       00		      .byte.b	_00
   9426  7624		       00		      .byte.b	_00
   9427  7625		       00		      .byte.b	_00
   9428  7626		       00		      .byte.b	_00
   9429  7627		       00		      .byte.b	_00
   9430  7628		       00		      .byte.b	_00
   9431  7629		       00		      .byte.b	_00
   9432  762a		       00		      .byte.b	_00
   9433  762b		       00		      .byte.b	_00
   9434  762c		       00		      .byte.b	_00
   9435  762d		       00		      .byte.b	_00
   9436  762e		       00		      .byte.b	_00
   9437  762f		       00		      .byte.b	_00
   9438  7630		       00		      .byte.b	_00
   9439  7631		       00		      .byte.b	_00
   9440  7632		       00		      .byte.b	_00
   9441  7633		       00		      .byte.b	_00
   9442  7634		       00		      .byte.b	_00
   9443  7635		       00		      .byte.b	_00
   9444  7636		       00		      .byte.b	_00
   9445  7637		       00		      .byte.b	_00
   9446  7638		       00		      .byte.b	_00
   9447  7639		       00		      .byte.b	_00
   9448  763a		       00		      .byte.b	_00
   9449  763b		       00		      .byte.b	_00
   9450  763c		       00		      .byte.b	_00
   9451  763d		       00		      .byte.b	_00
   9452  763e		       00		      .byte.b	_00
   9453  763f		       00		      .byte.b	_00
   9454  7640		       00		      .byte.b	_00
   9455  7641		       00		      .byte.b	_00
   9456  7642		       00		      .byte.b	_00
   9457  7643		       00		      .byte.b	_00
   9458  7644		       00		      .byte.b	_00
   9459  7645		       00		      .byte.b	_00
   9460  7646		       00		      .byte.b	_00
   9461  7647		       00		      .byte.b	_00
   9462  7648		       00		      .byte.b	_00
   9463  7649		       00		      .byte.b	_00
   9464  764a		       00		      .byte.b	_00
   9465  764b		       00		      .byte.b	_00
   9466  764c		       00		      .byte.b	_00
   9467  764d		       00		      .byte.b	_00
   9468  764e		       00		      .byte.b	_00
   9469  764f		       00		      .byte.b	_00
   9470  7650		       00		      .byte.b	_00
   9471  7651		       00		      .byte.b	_00
   9472  7652		       00		      .byte.b	_00
   9473  7653		       00		      .byte.b	_00
   9474  7654		       00		      .byte.b	_00
   9475  7655		       00		      .byte.b	_00
   9476  7656		       00		      .byte.b	_00
   9477  7657		       34		      .byte.b	_34
   9478  7658		       34		      .byte.b	_34
   9479  7659		       34		      .byte.b	_34
   9480  765a		       34		      .byte.b	_34
   9481  765b		       34		      .byte.b	_34
   9482  765c		       34		      .byte.b	_34
   9483  765d		       34		      .byte.b	_34
   9484  765e		       34		      .byte.b	_34
   9485  765f		       34		      .byte.b	_34
   9486  7660		       34		      .byte.b	_34
   9487  7661		       34		      .byte.b	_34
   9488  7662		       34		      .byte.b	_34
   9489  7663		       34		      .byte.b	_34
   9490  7664		       34		      .byte.b	_34
   9491  7665		       34		      .byte.b	_34
   9492  7666		       34		      .byte.b	_34
   9493  7667		       34		      .byte.b	_34
   9494  7668		       34		      .byte.b	_34
   9495  7669		       34		      .byte.b	_34
   9496  766a		       34		      .byte.b	_34
   9497  766b		       34		      .byte.b	_34
   9498  766c		       34		      .byte.b	_34
   9499  766d		       34		      .byte.b	_34
   9500  766e		       f2		      .byte.b	_F2
   9501  766f		       f2		      .byte.b	_F2
   9502  7670		       f0		      .byte.b	_F0
   9503  7671		       f0		      .byte.b	_F0
   9504  7672		       f2		      .byte.b	_F2
   9505  7673		       f2		      .byte.b	_F2
   9506  7674		       f0		      .byte.b	_F0
   9507  7675		       f0		      .byte.b	_F0
   9508  7676		       00		      .byte.b	_00
   9509  7677		       00		      .byte.b	_00
   9510  7678				   playfieldcolorL0437
   9511  7678		       c2		      .byte.b	_C2
   9512  7679		       c2		      .byte.b	_C2
   9513  767a		       00		      .byte.b	_00
   9514  767b		       00		      .byte.b	_00
   9515  767c		       00		      .byte.b	_00
   9516  767d		       00		      .byte.b	_00
   9517  767e		       00		      .byte.b	_00
   9518  767f		       00		      .byte.b	_00
   9519  7680		       00		      .byte.b	_00
   9520  7681		       00		      .byte.b	_00
   9521  7682		       00		      .byte.b	_00
   9522  7683		       00		      .byte.b	_00
   9523  7684		       00		      .byte.b	_00
   9524  7685		       00		      .byte.b	_00
   9525  7686		       00		      .byte.b	_00
   9526  7687		       00		      .byte.b	_00
   9527  7688		       00		      .byte.b	_00
   9528  7689		       00		      .byte.b	_00
   9529  768a		       00		      .byte.b	_00
   9530  768b		       00		      .byte.b	_00
   9531  768c		       00		      .byte.b	_00
   9532  768d		       00		      .byte.b	_00
   9533  768e		       00		      .byte.b	_00
   9534  768f		       00		      .byte.b	_00
   9535  7690		       00		      .byte.b	_00
   9536  7691		       00		      .byte.b	_00
   9537  7692		       00		      .byte.b	_00
   9538  7693		       00		      .byte.b	_00
   9539  7694		       00		      .byte.b	_00
   9540  7695		       00		      .byte.b	_00
   9541  7696		       00		      .byte.b	_00
   9542  7697		       00		      .byte.b	_00
   9543  7698		       00		      .byte.b	_00
   9544  7699		       00		      .byte.b	_00
   9545  769a		       00		      .byte.b	_00
   9546  769b		       00		      .byte.b	_00
   9547  769c		       00		      .byte.b	_00
   9548  769d		       00		      .byte.b	_00
   9549  769e		       00		      .byte.b	_00
   9550  769f		       00		      .byte.b	_00
   9551  76a0		       00		      .byte.b	_00
   9552  76a1		       00		      .byte.b	_00
   9553  76a2		       00		      .byte.b	_00
   9554  76a3		       00		      .byte.b	_00
   9555  76a4		       00		      .byte.b	_00
   9556  76a5		       00		      .byte.b	_00
   9557  76a6		       00		      .byte.b	_00
   9558  76a7		       00		      .byte.b	_00
   9559  76a8		       00		      .byte.b	_00
   9560  76a9		       00		      .byte.b	_00
   9561  76aa		       00		      .byte.b	_00
   9562  76ab		       00		      .byte.b	_00
   9563  76ac		       00		      .byte.b	_00
   9564  76ad		       00		      .byte.b	_00
   9565  76ae		       00		      .byte.b	_00
   9566  76af		       40		      .byte.b	_40
   9567  76b0		       40		      .byte.b	_40
   9568  76b1		       40		      .byte.b	_40
   9569  76b2		       40		      .byte.b	_40
   9570  76b3		       40		      .byte.b	_40
   9571  76b4		       40		      .byte.b	_40
   9572  76b5		       40		      .byte.b	_40
   9573  76b6		       40		      .byte.b	_40
   9574  76b7		       40		      .byte.b	_40
   9575  76b8		       40		      .byte.b	_40
   9576  76b9		       40		      .byte.b	_40
   9577  76ba		       40		      .byte.b	_40
   9578  76bb		       40		      .byte.b	_40
   9579  76bc		       40		      .byte.b	_40
   9580  76bd		       40		      .byte.b	_40
   9581  76be		       40		      .byte.b	_40
   9582  76bf		       40		      .byte.b	_40
   9583  76c0		       40		      .byte.b	_40
   9584  76c1		       40		      .byte.b	_40
   9585  76c2		       40		      .byte.b	_40
   9586  76c3		       40		      .byte.b	_40
   9587  76c4		       40		      .byte.b	_40
   9588  76c5		       40		      .byte.b	_40
   9589  76c6		       40		      .byte.b	_40
   9590  76c7		       40		      .byte.b	_40
   9591  76c8		       f0		      .byte.b	_F0
   9592  76c9		       f0		      .byte.b	_F0
   9593  76ca		       f2		      .byte.b	_F2
   9594  76cb		       f2		      .byte.b	_F2
   9595  76cc		       f0		      .byte.b	_F0
   9596  76cd		       f0		      .byte.b	_F0
   9597  76ce		       00		      .byte.b	_00
   9598  76cf		       00		      .byte.b	_00
   9599  76d0				   playfieldcolorL0439
   9600  76d0		       c2		      .byte.b	_C2
   9601  76d1		       c2		      .byte.b	_C2
   9602  76d2		       00		      .byte.b	_00
   9603  76d3		       00		      .byte.b	_00
   9604  76d4		       00		      .byte.b	_00
   9605  76d5		       00		      .byte.b	_00
   9606  76d6		       00		      .byte.b	_00
   9607  76d7		       00		      .byte.b	_00
   9608  76d8		       00		      .byte.b	_00
   9609  76d9		       00		      .byte.b	_00
   9610  76da		       00		      .byte.b	_00
   9611  76db		       00		      .byte.b	_00
   9612  76dc		       00		      .byte.b	_00
   9613  76dd		       00		      .byte.b	_00
   9614  76de		       00		      .byte.b	_00
   9615  76df		       00		      .byte.b	_00
   9616  76e0		       00		      .byte.b	_00
   9617  76e1		       00		      .byte.b	_00
   9618  76e2		       00		      .byte.b	_00
   9619  76e3		       00		      .byte.b	_00
   9620  76e4		       00		      .byte.b	_00
   9621  76e5		       00		      .byte.b	_00
   9622  76e6		       00		      .byte.b	_00
   9623  76e7		       00		      .byte.b	_00
   9624  76e8		       00		      .byte.b	_00
   9625  76e9		       00		      .byte.b	_00
   9626  76ea		       00		      .byte.b	_00
   9627  76eb		       00		      .byte.b	_00
   9628  76ec		       00		      .byte.b	_00
   9629  76ed		       00		      .byte.b	_00
   9630  76ee		       00		      .byte.b	_00
   9631  76ef		       00		      .byte.b	_00
   9632  76f0		       00		      .byte.b	_00
   9633  76f1		       00		      .byte.b	_00
   9634  76f2		       00		      .byte.b	_00
   9635  76f3		       00		      .byte.b	_00
   9636  76f4		       00		      .byte.b	_00
   9637  76f5		       00		      .byte.b	_00
   9638  76f6		       00		      .byte.b	_00
   9639  76f7		       00		      .byte.b	_00
   9640  76f8		       00		      .byte.b	_00
   9641  76f9		       00		      .byte.b	_00
   9642  76fa		       00		      .byte.b	_00
   9643  76fb		       00		      .byte.b	_00
   9644  76fc		       00		      .byte.b	_00
   9645  76fd		       00		      .byte.b	_00
   9646  76fe		       00		      .byte.b	_00
   9647  76ff		       00		      .byte.b	_00
   9648  7700		       00		      .byte.b	_00
   9649  7701		       00		      .byte.b	_00
   9650  7702		       00		      .byte.b	_00
   9651  7703		       00		      .byte.b	_00
   9652  7704		       00		      .byte.b	_00
   9653  7705		       00		      .byte.b	_00
   9654  7706		       00		      .byte.b	_00
   9655  7707		       40		      .byte.b	_40
   9656  7708		       40		      .byte.b	_40
   9657  7709		       40		      .byte.b	_40
   9658  770a		       40		      .byte.b	_40
   9659  770b		       40		      .byte.b	_40
   9660  770c		       40		      .byte.b	_40
   9661  770d		       40		      .byte.b	_40
   9662  770e		       40		      .byte.b	_40
   9663  770f		       40		      .byte.b	_40
   9664  7710		       40		      .byte.b	_40
   9665  7711		       40		      .byte.b	_40
   9666  7712		       40		      .byte.b	_40
   9667  7713		       40		      .byte.b	_40
   9668  7714		       40		      .byte.b	_40
   9669  7715		       40		      .byte.b	_40
   9670  7716		       40		      .byte.b	_40
   9671  7717		       40		      .byte.b	_40
   9672  7718		       40		      .byte.b	_40
   9673  7719		       40		      .byte.b	_40
   9674  771a		       40		      .byte.b	_40
   9675  771b		       40		      .byte.b	_40
   9676  771c		       40		      .byte.b	_40
   9677  771d		       40		      .byte.b	_40
   9678  771e		       40		      .byte.b	_40
   9679  771f		       40		      .byte.b	_40
   9680  7720		       40		      .byte.b	_40
   9681  7721		       40		      .byte.b	_40
   9682  7722		       40		      .byte.b	_40
   9683  7723		       f2		      .byte.b	_F2
   9684  7724		       f0		      .byte.b	_F0
   9685  7725		       f0		      .byte.b	_F0
   9686  7726		       00		      .byte.b	_00
   9687  7727		       00		      .byte.b	_00
   9688  7728				   playfieldcolorL0441
   9689  7728		       c2		      .byte.b	_C2
   9690  7729		       c2		      .byte.b	_C2
   9691  772a		       00		      .byte.b	_00
   9692  772b		       00		      .byte.b	_00
   9693  772c		       00		      .byte.b	_00
   9694  772d		       00		      .byte.b	_00
   9695  772e		       00		      .byte.b	_00
   9696  772f		       00		      .byte.b	_00
   9697  7730		       00		      .byte.b	_00
   9698  7731		       00		      .byte.b	_00
   9699  7732		       00		      .byte.b	_00
   9700  7733		       00		      .byte.b	_00
   9701  7734		       00		      .byte.b	_00
   9702  7735		       00		      .byte.b	_00
   9703  7736		       00		      .byte.b	_00
   9704  7737		       00		      .byte.b	_00
   9705  7738		       00		      .byte.b	_00
   9706  7739		       00		      .byte.b	_00
   9707  773a		       00		      .byte.b	_00
   9708  773b		       00		      .byte.b	_00
   9709  773c		       00		      .byte.b	_00
   9710  773d		       00		      .byte.b	_00
   9711  773e		       00		      .byte.b	_00
   9712  773f		       00		      .byte.b	_00
   9713  7740		       00		      .byte.b	_00
   9714  7741		       00		      .byte.b	_00
   9715  7742		       00		      .byte.b	_00
   9716  7743		       00		      .byte.b	_00
   9717  7744		       00		      .byte.b	_00
   9718  7745		       00		      .byte.b	_00
   9719  7746		       00		      .byte.b	_00
   9720  7747		       00		      .byte.b	_00
   9721  7748		       00		      .byte.b	_00
   9722  7749		       00		      .byte.b	_00
   9723  774a		       00		      .byte.b	_00
   9724  774b		       00		      .byte.b	_00
   9725  774c		       00		      .byte.b	_00
   9726  774d		       00		      .byte.b	_00
   9727  774e		       00		      .byte.b	_00
   9728  774f		       00		      .byte.b	_00
   9729  7750		       00		      .byte.b	_00
   9730  7751		       00		      .byte.b	_00
   9731  7752		       00		      .byte.b	_00
   9732  7753		       00		      .byte.b	_00
   9733  7754		       00		      .byte.b	_00
   9734  7755		       00		      .byte.b	_00
   9735  7756		       00		      .byte.b	_00
   9736  7757		       00		      .byte.b	_00
   9737  7758		       00		      .byte.b	_00
   9738  7759		       00		      .byte.b	_00
   9739  775a		       00		      .byte.b	_00
   9740  775b		       00		      .byte.b	_00
   9741  775c		       00		      .byte.b	_00
   9742  775d		       00		      .byte.b	_00
   9743  775e		       00		      .byte.b	_00
   9744  775f		       40		      .byte.b	_40
   9745  7760		       40		      .byte.b	_40
   9746  7761		       40		      .byte.b	_40
   9747  7762		       40		      .byte.b	_40
   9748  7763		       40		      .byte.b	_40
   9749  7764		       40		      .byte.b	_40
   9750  7765		       40		      .byte.b	_40
   9751  7766		       40		      .byte.b	_40
   9752  7767		       40		      .byte.b	_40
   9753  7768		       40		      .byte.b	_40
   9754  7769		       40		      .byte.b	_40
   9755  776a		       40		      .byte.b	_40
   9756  776b		       40		      .byte.b	_40
   9757  776c		       40		      .byte.b	_40
   9758  776d		       40		      .byte.b	_40
   9759  776e		       40		      .byte.b	_40
   9760  776f		       40		      .byte.b	_40
   9761  7770		       40		      .byte.b	_40
   9762  7771		       40		      .byte.b	_40
   9763  7772		       40		      .byte.b	_40
   9764  7773		       40		      .byte.b	_40
   9765  7774		       40		      .byte.b	_40
   9766  7775		       40		      .byte.b	_40
   9767  7776		       40		      .byte.b	_40
   9768  7777		       40		      .byte.b	_40
   9769  7778		       40		      .byte.b	_40
   9770  7779		       40		      .byte.b	_40
   9771  777a		       40		      .byte.b	_40
   9772  777b		       40		      .byte.b	_40
   9773  777c		       40		      .byte.b	_40
   9774  777d		       40		      .byte.b	_40
   9775  777e		       00		      .byte.b	_00
   9776  777f		       00		      .byte.b	_00
   9777  7780				   backgroundcolorL0480
   9778  7780		       0e		      .byte.b	_0E
   9779  7781		       42		      .byte.b	_42
   9780  7782		       42		      .byte.b	_42
   9781  7783		       42		      .byte.b	_42
   9782  7784		       42		      .byte.b	_42
   9783  7785		       42		      .byte.b	_42
   9784  7786		       42		      .byte.b	_42
   9785  7787		       42		      .byte.b	_42
   9786  7788		       42		      .byte.b	_42
   9787  7789		       42		      .byte.b	_42
   9788  778a		       42		      .byte.b	_42
   9789  778b		       42		      .byte.b	_42
   9790  778c		       42		      .byte.b	_42
   9791  778d		       42		      .byte.b	_42
   9792  778e		       42		      .byte.b	_42
   9793  778f		       42		      .byte.b	_42
   9794  7790		       42		      .byte.b	_42
   9795  7791		       42		      .byte.b	_42
   9796  7792		       42		      .byte.b	_42
   9797  7793		       42		      .byte.b	_42
   9798  7794		       42		      .byte.b	_42
   9799  7795		       42		      .byte.b	_42
   9800  7796		       42		      .byte.b	_42
   9801  7797		       42		      .byte.b	_42
   9802  7798		       42		      .byte.b	_42
   9803  7799		       42		      .byte.b	_42
   9804  779a		       42		      .byte.b	_42
   9805  779b		       42		      .byte.b	_42
   9806  779c		       42		      .byte.b	_42
   9807  779d		       42		      .byte.b	_42
   9808  779e		       42		      .byte.b	_42
   9809  779f		       42		      .byte.b	_42
   9810  77a0		       42		      .byte.b	_42
   9811  77a1		       42		      .byte.b	_42
   9812  77a2		       42		      .byte.b	_42
   9813  77a3		       42		      .byte.b	_42
   9814  77a4		       42		      .byte.b	_42
   9815  77a5		       42		      .byte.b	_42
   9816  77a6		       42		      .byte.b	_42
   9817  77a7		       42		      .byte.b	_42
   9818  77a8		       42		      .byte.b	_42
   9819  77a9		       42		      .byte.b	_42
   9820  77aa		       42		      .byte.b	_42
   9821  77ab		       42		      .byte.b	_42
   9822  77ac		       42		      .byte.b	_42
   9823  77ad		       42		      .byte.b	_42
   9824  77ae		       42		      .byte.b	_42
   9825  77af		       42		      .byte.b	_42
   9826  77b0		       42		      .byte.b	_42
   9827  77b1		       42		      .byte.b	_42
   9828  77b2		       42		      .byte.b	_42
   9829  77b3		       42		      .byte.b	_42
   9830  77b4		       42		      .byte.b	_42
   9831  77b5		       42		      .byte.b	_42
   9832  77b6		       42		      .byte.b	_42
   9833  77b7		       42		      .byte.b	_42
   9834  77b8		       42		      .byte.b	_42
   9835  77b9		       42		      .byte.b	_42
   9836  77ba		       42		      .byte.b	_42
   9837  77bb		       42		      .byte.b	_42
   9838  77bc		       42		      .byte.b	_42
   9839  77bd		       42		      .byte.b	_42
   9840  77be		       42		      .byte.b	_42
   9841  77bf		       42		      .byte.b	_42
   9842  77c0		       42		      .byte.b	_42
   9843  77c1		       42		      .byte.b	_42
   9844  77c2		       42		      .byte.b	_42
   9845  77c3		       42		      .byte.b	_42
   9846  77c4		       42		      .byte.b	_42
   9847  77c5		       42		      .byte.b	_42
   9848  77c6		       42		      .byte.b	_42
   9849  77c7		       42		      .byte.b	_42
   9850  77c8		       42		      .byte.b	_42
   9851  77c9		       42		      .byte.b	_42
   9852  77ca		       42		      .byte.b	_42
   9853  77cb		       42		      .byte.b	_42
   9854  77cc		       42		      .byte.b	_42
   9855  77cd		       42		      .byte.b	_42
   9856  77ce		       42		      .byte.b	_42
   9857  77cf		       42		      .byte.b	_42
   9858  77d0		       42		      .byte.b	_42
   9859  77d1		       42		      .byte.b	_42
   9860  77d2		       42		      .byte.b	_42
   9861  77d3		       42		      .byte.b	_42
   9862  77d4		       42		      .byte.b	_42
   9863  77d5		       42		      .byte.b	_42
   9864  77d6		       42		      .byte.b	_42
   9865  77d7		       42		      .byte.b	_42
   9866  77d8				   playerL0489_0
   9867  77d8		       00		      .byte.b	%00000000
   9868  77d9		       42		      .byte.b	%01000010
   9869  77da		       42		      .byte.b	%01000010
   9870  77db		       5a		      .byte.b	%01011010
   9871  77dc		       7e		      .byte.b	%01111110
   9872  77dd		       24		      .byte.b	%00100100
   9873  77de		       18		      .byte.b	%00011000
   9874  77df		       18		      .byte.b	%00011000
   9875  77e0		       3c		      .byte.b	%00111100
   9876  77e1		       5a		      .byte.b	%01011010
   9877  77e2		       18		      .byte.b	%00011000
   9878  77e3		       18		      .byte.b	%00011000
   9879  77e4		       18		      .byte.b	%00011000
   9880  77e5		       3c		      .byte.b	%00111100
   9881  77e6		       24		      .byte.b	%00100100
   9882  77e7				   playercolorL0490_0
   9883  77e7		       00		      .byte.b	$00	;
   9884  77e8		       00		      .byte.b	$00	;
   9885  77e9		       00		      .byte.b	$00	;
   9886  77ea		       00		      .byte.b	$00	;
   9887  77eb		       00		      .byte.b	$00	;
   9888  77ec		       0e		      .byte.b	$0E	;
   9889  77ed		       70		      .byte.b	$70	;
   9890  77ee		       70		      .byte.b	$70	;
   9891  77ef		       70		      .byte.b	$70	;
   9892  77f0		       94		      .byte.b	$94	;
   9893  77f1		       70		      .byte.b	$70	;
   9894  77f2		       70		      .byte.b	$70	;
   9895  77f3		       70		      .byte.b	$70	;
   9896  77f4		       70		      .byte.b	$70	;
   9897  77f5		       40		      .byte.b	$40	;
   9898  77f6				   playerL0492_0
   9899  77f6		       18		      .byte.b	%00011000
   9900  77f7		       bd		      .byte.b	%10111101
   9901  77f8		       99		      .byte.b	%10011001
   9902  77f9		       5a		      .byte.b	%01011010
   9903  77fa		       7e		      .byte.b	%01111110
   9904  77fb		       24		      .byte.b	%00100100
   9905  77fc		       18		      .byte.b	%00011000
   9906  77fd		       18		      .byte.b	%00011000
   9907  77fe		       3c		      .byte.b	%00111100
   9908  77ff		       5a		      .byte.b	%01011010
   9909  7800		       18		      .byte.b	%00011000
   9910  7801		       18		      .byte.b	%00011000
   9911  7802		       18		      .byte.b	%00011000
   9912  7803		       3c		      .byte.b	%00111100
   9913  7804		       24		      .byte.b	%00100100
   9914  7805				   playercolorL0493_0
   9915  7805		       40		      .byte.b	$40	;
   9916  7806		       40		      .byte.b	$40	;
   9917  7807		       40		      .byte.b	$40	;
   9918  7808		       40		      .byte.b	$40	;
   9919  7809		       40		      .byte.b	$40	;
   9920  780a		       f6		      .byte.b	$F6	;
   9921  780b		       70		      .byte.b	$70	;
   9922  780c		       70		      .byte.b	$70	;
   9923  780d		       70		      .byte.b	$70	;
   9924  780e		       94		      .byte.b	$94	;
   9925  780f		       70		      .byte.b	$70	;
   9926  7810		       70		      .byte.b	$70	;
   9927  7811		       70		      .byte.b	$70	;
   9928  7812		       70		      .byte.b	$70	;
   9929  7813		       00		      .byte.b	$00	;
   9930  7814				   playerL0495_0
   9931  7814		       00		      .byte.b	%00000000
   9932  7815		       42		      .byte.b	%01000010
   9933  7816		       42		      .byte.b	%01000010
   9934  7817		       5a		      .byte.b	%01011010
   9935  7818		       7e		      .byte.b	%01111110
   9936  7819		       24		      .byte.b	%00100100
   9937  781a		       18		      .byte.b	%00011000
   9938  781b		       19		      .byte.b	%00011001
   9939  781c		       3d		      .byte.b	%00111101
   9940  781d		       5b		      .byte.b	%01011011
   9941  781e		       19		      .byte.b	%00011001
   9942  781f		       19		      .byte.b	%00011001
   9943  7820		       19		      .byte.b	%00011001
   9944  7821		       3c		      .byte.b	%00111100
   9945  7822		       24		      .byte.b	%00100100
   9946  7823				   playercolorL0496_0
   9947  7823		       00		      .byte.b	$00	;
   9948  7824		       00		      .byte.b	$00	;
   9949  7825		       00		      .byte.b	$00	;
   9950  7826		       00		      .byte.b	$00	;
   9951  7827		       00		      .byte.b	$00	;
   9952  7828		       70		      .byte.b	$70	;
   9953  7829		       70		      .byte.b	$70	;
   9954  782a		       40		      .byte.b	$40	;
   9955  782b		       40		      .byte.b	$40	;
   9956  782c		       40		      .byte.b	$40	;
   9957  782d		       40		      .byte.b	$40	;
   9958  782e		       40		      .byte.b	$40	;
   9959  782f		       40		      .byte.b	$40	;
   9960  7830		       70		      .byte.b	$70	;
   9961  7831		       c6		      .byte.b	$C6	;
   9962  7832				   playerL0498_0
   9963  7832		       00		      .byte.b	%00000000
   9964  7833		       42		      .byte.b	%01000010
   9965  7834		       42		      .byte.b	%01000010
   9966  7835		       5a		      .byte.b	%01011010
   9967  7836		       7e		      .byte.b	%01111110
   9968  7837		       24		      .byte.b	%00100100
   9969  7838		       18		      .byte.b	%00011000
   9970  7839		       19		      .byte.b	%00011001
   9971  783a		       3d		      .byte.b	%00111101
   9972  783b		       5b		      .byte.b	%01011011
   9973  783c		       19		      .byte.b	%00011001
   9974  783d		       19		      .byte.b	%00011001
   9975  783e		       19		      .byte.b	%00011001
   9976  783f		       3c		      .byte.b	%00111100
   9977  7840		       24		      .byte.b	%00100100
   9978  7841				   playercolorL0499_0
   9979  7841		       00		      .byte.b	$00	;
   9980  7842		       00		      .byte.b	$00	;
   9981  7843		       00		      .byte.b	$00	;
   9982  7844		       00		      .byte.b	$00	;
   9983  7845		       00		      .byte.b	$00	;
   9984  7846		       70		      .byte.b	$70	;
   9985  7847		       70		      .byte.b	$70	;
   9986  7848		       40		      .byte.b	$40	;
   9987  7849		       40		      .byte.b	$40	;
   9988  784a		       40		      .byte.b	$40	;
   9989  784b		       40		      .byte.b	$40	;
   9990  784c		       40		      .byte.b	$40	;
   9991  784d		       40		      .byte.b	$40	;
   9992  784e		       70		      .byte.b	$70	;
   9993  784f		       c5		      .byte.b	$C5	;
   9994  7850				   playercolor212then_0
   9995  7850		       1c		      .byte.b	$1C	;
   9996  7851		       1c		      .byte.b	$1C	;
   9997  7852		       1c		      .byte.b	$1C	;
   9998  7853		       1c		      .byte.b	$1C	;
   9999  7854		       1c		      .byte.b	$1C	;
  10000  7855		       1c		      .byte.b	$1C	;
  10001  7856		       1c		      .byte.b	$1C	;
  10002  7857		       1c		      .byte.b	$1C	;
  10003  7858		       1c		      .byte.b	$1C	;
  10004  7859		       1c		      .byte.b	$1C	;
  10005  785a		       1c		      .byte.b	$1C	;  
  10006  785b		       1c		      .byte.b	$1C	;
  10007  785c		       1c		      .byte.b	$1C	;
  10008  785d		       1c		      .byte.b	$1C	;
  10009  785e		       1c		      .byte.b	$1C	;
  10010  785f		       1c		      .byte.b	$1C
  10011  7860				   playercolor213then_0
  10012  7860		       cc		      .byte.b	$CC	;
  10013  7861		       cc		      .byte.b	$CC	;
  10014  7862		       cc		      .byte.b	$CC	;
  10015  7863		       cc		      .byte.b	$CC	;
  10016  7864		       cc		      .byte.b	$CC	;
  10017  7865		       cc		      .byte.b	$CC	;
  10018  7866		       cc		      .byte.b	$CC	;
  10019  7867		       cc		      .byte.b	$CC	;
  10020  7868		       cc		      .byte.b	$CC	;
  10021  7869		       cc		      .byte.b	$CC	;
  10022  786a		       cc		      .byte.b	$CC	;  
  10023  786b		       cc		      .byte.b	$CC	;
  10024  786c		       cc		      .byte.b	$CC	;
  10025  786d		       cc		      .byte.b	$CC	;
  10026  786e		       cc		      .byte.b	$CC	;
  10027  786f		       cc		      .byte.b	$CC
  10028  7870		       cc		      .byte.b	$CC	;
  10029  7871		       cc		      .byte.b	$CC
  10030  7872				   player215then_2
  10031  7872		       81		      .byte.b	%10000001
  10032  7873		       42		      .byte.b	%01000010
  10033  7874		       5a		      .byte.b	%01011010
  10034  7875		       5a		      .byte.b	%01011010
  10035  7876		       24		      .byte.b	%00100100
  10036  7877		       99		      .byte.b	%10011001
  10037  7878		       5a		      .byte.b	%01011010
  10038  7879		       24		      .byte.b	%00100100
  10039  787a				   player217then_2
  10040  787a		       00		      .byte.b	%00000000
  10041  787b		       40		      .byte.b	%01000000
  10042  787c		       00		      .byte.b	%00000000
  10043  787d		       30		      .byte.b	%00110000
  10044  787e		       14		      .byte.b	%00010100
  10045  787f		       00		      .byte.b	%00000000
  10046  7880		       48		      .byte.b	%01001000
  10047  7881		       00		      .byte.b	%00000000
  10048  7882				   player219then_3
  10049  7882		       18		      .byte.b	%00011000
  10050  7883		       7e		      .byte.b	%01111110
  10051  7884		       5a		      .byte.b	%01011010
  10052  7885		       db		      .byte.b	%11011011
  10053  7886		       ff		      .byte.b	%11111111
  10054  7887		       3c		      .byte.b	%00111100
  10055  7888		       18		      .byte.b	%00011000
  10056  7889		       00		      .byte.b	%00000000
  10057  788a				   player221then_3
  10058  788a		       00		      .byte.b	%00000000
  10059  788b		       40		      .byte.b	%01000000
  10060  788c		       00		      .byte.b	%00000000
  10061  788d		       30		      .byte.b	%00110000
  10062  788e		       14		      .byte.b	%00010100
  10063  788f		       00		      .byte.b	%00000000
  10064  7890		       48		      .byte.b	%01001000
  10065  7891		       00		      .byte.b	%00000000
  10066  7892				   player223then_1
  10067  7892		       81		      .byte.b	%10000001
  10068  7893		       42		      .byte.b	%01000010
  10069  7894		       5a		      .byte.b	%01011010
  10070  7895		       5a		      .byte.b	%01011010
  10071  7896		       24		      .byte.b	%00100100
  10072  7897		       99		      .byte.b	%10011001
  10073  7898		       5a		      .byte.b	%01011010
  10074  7899		       24		      .byte.b	%00100100
  10075  789a				   player225then_1
  10076  789a		       00		      .byte.b	%00000000
  10077  789b		       40		      .byte.b	%01000000
  10078  789c		       00		      .byte.b	%00000000
  10079  789d		       30		      .byte.b	%00110000
  10080  789e		       14		      .byte.b	%00010100
  10081  789f		       00		      .byte.b	%00000000
  10082  78a0		       48		      .byte.b	%01001000
  10083  78a1		       00		      .byte.b	%00000000
  10084  78a2				   playercolor226then_2
  10085  78a2		       b4		      .byte.b	$B4	;
  10086  78a3		       d0		      .byte.b	$D0	;
  10087  78a4		       d0		      .byte.b	$D0	;
  10088  78a5		       d0		      .byte.b	$D0	;
  10089  78a6		       d0		      .byte.b	$D0	;
  10090  78a7		       d0		      .byte.b	$D0	;
  10091  78a8		       c2		      .byte.b	$C2	;
  10092  78a9		       c6		      .byte.b	$C6	;
  10093  78aa				   playercolor227then_3
  10094  78aa		       30		      .byte.b	$30	;
  10095  78ab		       e0		      .byte.b	$E0	;
  10096  78ac		       b2		      .byte.b	$B2	;
  10097  78ad		       c4		      .byte.b	$C4	;
  10098  78ae		       b0		      .byte.b	$B0	;
  10099  78af		       70		      .byte.b	$70	;
  10100  78b0		       1e		      .byte.b	$1E	;
  10101  78b1		       0e		      .byte.b	$0E	;
  10102  78b2				   playercolor228then_1
  10103  78b2		       30		      .byte.b	$30	;
  10104  78b3		       44		      .byte.b	$44	;
  10105  78b4		       b2		      .byte.b	$B2	;
  10106  78b5		       c4		      .byte.b	$C4	;
  10107  78b6		       42		      .byte.b	$42	;
  10108  78b7		       c0		      .byte.b	$C0	;
  10109  78b8		       30		      .byte.b	$30	;
  10110  78b9		       0e		      .byte.b	$0E	;
  10111  78ba				   player230then_2
  10112  78ba		       42		      .byte.b	%01000010
  10113  78bb		       42		      .byte.b	%01000010
  10114  78bc		       5a		      .byte.b	%01011010
  10115  78bd		       5a		      .byte.b	%01011010
  10116  78be		       24		      .byte.b	%00100100
  10117  78bf		       18		      .byte.b	%00011000
  10118  78c0		       db		      .byte.b	%11011011
  10119  78c1		       24		      .byte.b	%00100100
  10120  78c2				   player232then_2
  10121  78c2		       04		      .byte.b	%00000100
  10122  78c3		       40		      .byte.b	%01000000
  10123  78c4		       01		      .byte.b	%00000001
  10124  78c5		       00		      .byte.b	%00000000
  10125  78c6		       02		      .byte.b	%00000010
  10126  78c7		       80		      .byte.b	%10000000
  10127  78c8		       02		      .byte.b	%00000010
  10128  78c9		       20		      .byte.b	%00100000
  10129  78ca				   player234then_3
  10130  78ca		       00		      .byte.b	%00000000
  10131  78cb		       7e		      .byte.b	%01111110
  10132  78cc		       5a		      .byte.b	%01011010
  10133  78cd		       db		      .byte.b	%11011011
  10134  78ce		       ff		      .byte.b	%11111111
  10135  78cf		       3c		      .byte.b	%00111100
  10136  78d0		       18		      .byte.b	%00011000
  10137  78d1		       00		      .byte.b	%00000000
  10138  78d2				   player236then_3
  10139  78d2		       04		      .byte.b	%00000100
  10140  78d3		       40		      .byte.b	%01000000
  10141  78d4		       01		      .byte.b	%00000001
  10142  78d5		       00		      .byte.b	%00000000
  10143  78d6		       02		      .byte.b	%00000010
  10144  78d7		       80		      .byte.b	%10000000
  10145  78d8		       02		      .byte.b	%00000010
  10146  78d9		       20		      .byte.b	%00100000
  10147  78da				   player238then_1
  10148  78da		       42		      .byte.b	%01000010
  10149  78db		       42		      .byte.b	%01000010
  10150  78dc		       5a		      .byte.b	%01011010
  10151  78dd		       5a		      .byte.b	%01011010
  10152  78de		       24		      .byte.b	%00100100
  10153  78df		       18		      .byte.b	%00011000
  10154  78e0		       db		      .byte.b	%11011011
  10155  78e1		       24		      .byte.b	%00100100
  10156  78e2				   player240then_1
  10157  78e2		       04		      .byte.b	%00000100
  10158  78e3		       40		      .byte.b	%01000000
  10159  78e4		       01		      .byte.b	%00000001
  10160  78e5		       00		      .byte.b	%00000000
  10161  78e6		       02		      .byte.b	%00000010
  10162  78e7		       80		      .byte.b	%10000000
  10163  78e8		       02		      .byte.b	%00000010
  10164  78e9		       20		      .byte.b	%00100000
  10165  78ea				   playercolor241then_2
  10166  78ea		       b4		      .byte.b	$B4	;
  10167  78eb		       d0		      .byte.b	$D0	;
  10168  78ec		       d0		      .byte.b	$D0	;
  10169  78ed		       d0		      .byte.b	$D0	;
  10170  78ee		       d0		      .byte.b	$D0	;
  10171  78ef		       d0		      .byte.b	$D0	;
  10172  78f0		       c2		      .byte.b	$C2	;
  10173  78f1		       c4		      .byte.b	$C4	;
  10174  78f2				   playercolor242then_3
  10175  78f2		       30		      .byte.b	$30	;
  10176  78f3		       e0		      .byte.b	$E0	;
  10177  78f4		       b2		      .byte.b	$B2	;
  10178  78f5		       c4		      .byte.b	$C4	;
  10179  78f6		       b0		      .byte.b	$B0	;
  10180  78f7		       70		      .byte.b	$70	;
  10181  78f8		       1e		      .byte.b	$1E	;
  10182  78f9		       0e		      .byte.b	$0E	;
  10183  78fa				   playercolor243then_1
  10184  78fa		       30		      .byte.b	$30	;
  10185  78fb		       44		      .byte.b	$44	;
  10186  78fc		       b2		      .byte.b	$B2	;
  10187  78fd		       c4		      .byte.b	$C4	;
  10188  78fe		       42		      .byte.b	$42	;
  10189  78ff		       c0		      .byte.b	$C0	;
  10190  7900		       30		      .byte.b	$30	;
  10191  7901		       0e		      .byte.b	$0E	;
  10192  7902				   player245then_2
  10193  7902		       24		      .byte.b	%00100100
  10194  7903		       42		      .byte.b	%01000010
  10195  7904		       5a		      .byte.b	%01011010
  10196  7905		       5a		      .byte.b	%01011010
  10197  7906		       24		      .byte.b	%00100100
  10198  7907		       99		      .byte.b	%10011001
  10199  7908		       5a		      .byte.b	%01011010
  10200  7909		       24		      .byte.b	%00100100
  10201  790a				   player247then_2
  10202  790a		       08		      .byte.b	%00001000
  10203  790b		       00		      .byte.b	%00000000
  10204  790c		       00		      .byte.b	%00000000
  10205  790d		       00		      .byte.b	%00000000
  10206  790e		       80		      .byte.b	%10000000
  10207  790f		       00		      .byte.b	%00000000
  10208  7910		       00		      .byte.b	%00000000
  10209  7911		       21		      .byte.b	%00100001
  10210  7912				   player248then_3
  10211  7912		       18		      .byte.b	%00011000
  10212  7913		       7e		      .byte.b	%01111110
  10213  7914		       7e		      .byte.b	%01111110
  10214  7915		       ff		      .byte.b	%11111111
  10215  7916		       ff		      .byte.b	%11111111
  10216  7917		       3c		      .byte.b	%00111100
  10217  7918		       18		      .byte.b	%00011000
  10218  7919		       00		      .byte.b	%00000000
  10219  791a				   player250then_1
  10220  791a		       24		      .byte.b	%00100100
  10221  791b		       42		      .byte.b	%01000010
  10222  791c		       5a		      .byte.b	%01011010
  10223  791d		       5a		      .byte.b	%01011010
  10224  791e		       24		      .byte.b	%00100100
  10225  791f		       99		      .byte.b	%10011001
  10226  7920		       5a		      .byte.b	%01011010
  10227  7921		       24		      .byte.b	%00100100
  10228  7922				   player252then_1
  10229  7922		       08		      .byte.b	%00001000
  10230  7923		       00		      .byte.b	%00000000
  10231  7924		       00		      .byte.b	%00000000
  10232  7925		       00		      .byte.b	%00000000
  10233  7926		       80		      .byte.b	%10000000
  10234  7927		       00		      .byte.b	%00000000
  10235  7928		       00		      .byte.b	%00000000
  10236  7929		       21		      .byte.b	%00100001
  10237  792a				   playercolor253then_2
  10238  792a		       b4		      .byte.b	$B4	;
  10239  792b		       d0		      .byte.b	$D0	;
  10240  792c		       d0		      .byte.b	$D0	;
  10241  792d		       d0		      .byte.b	$D0	;
  10242  792e		       d0		      .byte.b	$D0	;
  10243  792f		       d0		      .byte.b	$D0	;
  10244  7930		       c2		      .byte.b	$C2	;
  10245  7931		       c6		      .byte.b	$C6	;
  10246  7932				   playercolor254then_3
  10247  7932		       16		      .byte.b	$16	;
  10248  7933		       e0		      .byte.b	$E0	;
  10249  7934		       b2		      .byte.b	$B2	;
  10250  7935		       c4		      .byte.b	$C4	;
  10251  7936		       b0		      .byte.b	$B0	;
  10252  7937		       70		      .byte.b	$70	;
  10253  7938		       30		      .byte.b	$30	;
  10254  7939		       0e		      .byte.b	$0E	;
  10255  793a				   playercolor255then_1
  10256  793a		       30		      .byte.b	$30	;
  10257  793b		       44		      .byte.b	$44	;
  10258  793c		       b2		      .byte.b	$B2	;
  10259  793d		       c4		      .byte.b	$C4	;
  10260  793e		       42		      .byte.b	$42	;
  10261  793f		       c0		      .byte.b	$C0	;
  10262  7940		       30		      .byte.b	$30	;
  10263  7941		       0e		      .byte.b	$0E	;
  10264  7942				   player256then_5
  10265  7942		       09		      .byte.b	%00001001
  10266  7943		       04		      .byte.b	%00000100
  10267  7944		       08		      .byte.b	%00001000
  10268  7945		       0c		      .byte.b	%00001100
  10269  7946		       1c		      .byte.b	%00011100
  10270  7947		       1c		      .byte.b	%00011100
  10271  7948		       1c		      .byte.b	%00011100
  10272  7949		       18		      .byte.b	%00011000
  10273  794a				   playercolor257then_5
  10274  794a		       0e		      .byte.b	$0E	;
  10275  794b		       06		      .byte.b	$06	;
  10276  794c		       40		      .byte.b	$40	;
  10277  794d		       32		      .byte.b	$32	;
  10278  794e		       40		      .byte.b	$40	;
  10279  794f		       34		      .byte.b	$34	;
  10280  7950		       42		      .byte.b	$42	;
  10281  7951		       40		      .byte.b	$40	;
  10282  7952				   player258then_5
  10283  7952		       02		      .byte.b	%00000010
  10284  7953		       05		      .byte.b	%00000101
  10285  7954		       0c		      .byte.b	%00001100
  10286  7955		       0e		      .byte.b	%00001110
  10287  7956		       0e		      .byte.b	%00001110
  10288  7957		       0c		      .byte.b	%00001100
  10289  7958		       1c		      .byte.b	%00011100
  10290  7959		       18		      .byte.b	%00011000
  10291  795a				   playercolor259then_5
  10292  795a		       0e		      .byte.b	$0E	;
  10293  795b		       06		      .byte.b	$06	;
  10294  795c		       40		      .byte.b	$40	;
  10295  795d		       32		      .byte.b	$32	;
  10296  795e		       40		      .byte.b	$40	;
  10297  795f		       34		      .byte.b	$34	;
  10298  7960		       42		      .byte.b	$42	;
  10299  7961		       40		      .byte.b	$40	;
  10300  7962				   player260then_5
  10301  7962		       05		      .byte.b	%00000101
  10302  7963		       08		      .byte.b	%00001000
  10303  7964		       06		      .byte.b	%00000110
  10304  7965		       0c		      .byte.b	%00001100
  10305  7966		       0e		      .byte.b	%00001110
  10306  7967		       1c		      .byte.b	%00011100
  10307  7968		       18		      .byte.b	%00011000
  10308  7969		       18		      .byte.b	%00011000
  10309  796a				   playercolor261then_5
  10310  796a		       0e		      .byte.b	$0E	;
  10311  796b		       06		      .byte.b	$06	;
  10312  796c		       40		      .byte.b	$40	;
  10313  796d		       32		      .byte.b	$32	;
  10314  796e		       40		      .byte.b	$40	;
  10315  796f		       34		      .byte.b	$34	;
  10316  7970		       42		      .byte.b	$42	;
  10317  7971		       40		      .byte.b	$40	;
  10318  7972				   player263then_4
  10319  7972		       fe		      .byte.b	%11111110
  10320  7973		       82		      .byte.b	%10000010
  10321  7974		       92		      .byte.b	%10010010
  10322  7975		       92		      .byte.b	%10010010
  10323  7976		       ba		      .byte.b	%10111010
  10324  7977		       92		      .byte.b	%10010010
  10325  7978		       92		      .byte.b	%10010010
  10326  7979		       82		      .byte.b	%10000010
  10327  797a		       fe		      .byte.b	%11111110
  10328  797b				   playercolor265then_4
  10329  797b		       30		      .byte.b	$30	;
  10330  797c		       30		      .byte.b	$30	;
  10331  797d		       30		      .byte.b	$30	;
  10332  797e		       30		      .byte.b	$30	;
  10333  797f		       30		      .byte.b	$30	;
  10334  7980		       30		      .byte.b	$30	;
  10335  7981		       30		      .byte.b	$30	;
  10336  7982		       40		      .byte.b	$40	;
  10337  7983		       40		      .byte.b	$40	;
  10338  7984				   player267then_4
  10339  7984		       3c		      .byte.b	%00111100
  10340  7985		       5a		      .byte.b	%01011010
  10341  7986		       99		      .byte.b	%10011001
  10342  7987		       3c		      .byte.b	%00111100
  10343  7988		       5a		      .byte.b	%01011010
  10344  7989		       99		      .byte.b	%10011001
  10345  798a		       18		      .byte.b	%00011000
  10346  798b		       3c		      .byte.b	%00111100
  10347  798c		       5a		      .byte.b	%01011010
  10348  798d				   playercolor269then_4
  10349  798d		       d0		      .byte.b	$D0	;
  10350  798e		       d0		      .byte.b	$D0	;
  10351  798f		       d2		      .byte.b	$D2	;
  10352  7990		       d2		      .byte.b	$D2	;
  10353  7991		       d0		      .byte.b	$D0	;
  10354  7992		       d2		      .byte.b	$D2	;
  10355  7993		       d2		      .byte.b	$D2	;
  10356  7994		       d0		      .byte.b	$D0	;
  10357  7995		       d0		      .byte.b	$D0	;
  10358  7996				   playercolor271then_4
  10359  7996		       d2		      .byte.b	$D2	;
  10360  7997		       d2		      .byte.b	$D2	;
  10361  7998		       d0		      .byte.b	$D0	;
  10362  7999		       d0		      .byte.b	$D0	;
  10363  799a		       d2		      .byte.b	$D2	;
  10364  799b		       d0		      .byte.b	$D0	;
  10365  799c		       d0		      .byte.b	$D0	;
  10366  799d		       d2		      .byte.b	$D2	;
  10367  799e		       d2		      .byte.b	$D2	;
  10368  799f				   player273then_4
  10369  799f		       18		      .byte.b	%00011000
  10370  79a0		       10		      .byte.b	%00010000
  10371  79a1		       38		      .byte.b	%00111000
  10372  79a2		       7c		      .byte.b	%01111100
  10373  79a3		       fe		      .byte.b	%11111110
  10374  79a4		       fe		      .byte.b	%11111110
  10375  79a5		       fe		      .byte.b	%11111110
  10376  79a6		       7c		      .byte.b	%01111100
  10377  79a7		       38		      .byte.b	%00111000
  10378  79a8				   playercolor275then_4
  10379  79a8		       30		      .byte.b	$30	;
  10380  79a9		       30		      .byte.b	$30	;
  10381  79aa		       00		      .byte.b	$00	;
  10382  79ab		       00		      .byte.b	$00	;
  10383  79ac		       00		      .byte.b	$00	;
  10384  79ad		       00		      .byte.b	$00	;
  10385  79ae		       00		      .byte.b	$00	;
  10386  79af		       00		      .byte.b	$00	;
  10387  79b0		       00		      .byte.b	$00	;
  10388  79b1				   playercolor277then_4
  10389  79b1		       0f		      .byte.b	$0F	;
  10390  79b2		       0f		      .byte.b	$0F	;
  10391  79b3		       00		      .byte.b	$00	;
  10392  79b4		       00		      .byte.b	$00	;
  10393  79b5		       00		      .byte.b	$00	;
  10394  79b6		       00		      .byte.b	$00	;
  10395  79b7		       00		      .byte.b	$00	;
  10396  79b8		       00		      .byte.b	$00	;
  10397  79b9		       00		      .byte.b	$00	;
  10398  79ba				   PF_data2
  10399  79ba		       00		      .byte.b	%00000000
  10400  79bb		       00		      .byte.b	%00000000
  10401  79bc		       00		      .byte.b	%00000000
  10402  79bd		       00		      .byte.b	%00000000
  10403  79be		       00		      .byte.b	%00000000
  10404  79bf		       00		      .byte.b	%00000000
  10405  79c0		       00		      .byte.b	%00000000
  10406  79c1		       00		      .byte.b	%00000000
  10407  79c2		       00		      .byte.b	%00000000
  10408  79c3		       00		      .byte.b	%00000000
  10409  79c4		       00		      .byte.b	%00000000
  10410  79c5		       00		      .byte.b	%00000000
  10411  79c6		       00		      .byte.b	%00000000
  10412  79c7		       1e		      .byte.b	%00011110
  10413  79c8		       1e		      .byte.b	%00011110
  10414  79c9		       02		      .byte.b	%00000010
  10415  79ca		       02		      .byte.b	%00000010
  10416  79cb		       02		      .byte.b	%00000010
  10417  79cc		       02		      .byte.b	%00000010
  10418  79cd		       02		      .byte.b	%00000010
  10419  79ce		       02		      .byte.b	%00000010
  10420  79cf		       02		      .byte.b	%00000010
  10421  79d0		       02		      .byte.b	%00000010
  10422  79d1		       0e		      .byte.b	%00001110
  10423  79d2		       0e		      .byte.b	%00001110
  10424  79d3		       02		      .byte.b	%00000010
  10425  79d4		       02		      .byte.b	%00000010
  10426  79d5		       02		      .byte.b	%00000010
  10427  79d6		       02		      .byte.b	%00000010
  10428  79d7		       02		      .byte.b	%00000010
  10429  79d8		       02		      .byte.b	%00000010
  10430  79d9		       02		      .byte.b	%00000010
  10431  79da		       02		      .byte.b	%00000010
  10432  79db		       02		      .byte.b	%00000010
  10433  79dc		       02		      .byte.b	%00000010
  10434  79dd		       1e		      .byte.b	%00011110
  10435  79de		       1e		      .byte.b	%00011110
  10436  79df		       00		      .byte.b	%00000000
  10437  79e0		       00		      .byte.b	%00000000
  10438  79e1		       00		      .byte.b	%00000000
  10439  79e2		       00		      .byte.b	%00000000
  10440  79e3		       00		      .byte.b	%00000000
  10441  79e4		       00		      .byte.b	%00000000
  10442  79e5		       00		      .byte.b	%00000000
  10443  79e6		       00		      .byte.b	%00000000
  10444  79e7		       00		      .byte.b	%00000000
  10445  79e8		       1e		      .byte.b	%00011110
  10446  79e9		       1e		      .byte.b	%00011110
  10447  79ea		       12		      .byte.b	%00010010
  10448  79eb		       12		      .byte.b	%00010010
  10449  79ec		       12		      .byte.b	%00010010
  10450  79ed		       12		      .byte.b	%00010010
  10451  79ee		       12		      .byte.b	%00010010
  10452  79ef		       12		      .byte.b	%00010010
  10453  79f0		       12		      .byte.b	%00010010
  10454  79f1		       1e		      .byte.b	%00011110
  10455  79f2		       0e		      .byte.b	%00001110
  10456  79f3		       0e		      .byte.b	%00001110
  10457  79f4		       0a		      .byte.b	%00001010
  10458  79f5		       0a		      .byte.b	%00001010
  10459  79f6		       0a		      .byte.b	%00001010
  10460  79f7		       0a		      .byte.b	%00001010
  10461  79f8		       1a		      .byte.b	%00011010
  10462  79f9		       12		      .byte.b	%00010010
  10463  79fa		       12		      .byte.b	%00010010
  10464  79fb		       12		      .byte.b	%00010010
  10465  79fc		       12		      .byte.b	%00010010
  10466  79fd		       12		      .byte.b	%00010010
  10467  79fe		       12		      .byte.b	%00010010
  10468  79ff		       12		      .byte.b	%00010010
  10469  7a00		       00		      .byte.b	%00000000
  10470  7a01		       00		      .byte.b	%00000000
  10471  7a02		       00		      .byte.b	%00000000
  10472  7a03		       00		      .byte.b	%00000000
  10473  7a04		       00		      .byte.b	%00000000
  10474  7a05		       00		      .byte.b	%00000000
  10475  7a06		       00		      .byte.b	%00000000
  10476  7a07		       00		      .byte.b	%00000000
  10477  7a08		       00		      .byte.b	%00000000
  10478  7a09		       00		      .byte.b	%00000000
  10479  7a0a		       00		      .byte.b	%00000000
  10480  7a0b		       00		      .byte.b	%00000000
  10481  7a0c		       00		      .byte.b	%00000000
  10482  7a0d		       00		      .byte.b	%00000000
  10483  7a0e		       00		      .byte.b	%00000000
  10484  7a0f		       00		      .byte.b	%00000000
  10485  7a10		       00		      .byte.b	%00000000
  10486  7a11		       00		      .byte.b	%00000000
  10487  7a12		       00		      .byte.b	%00000000
  10488  7a13		       00		      .byte.b	%00000000
  10489  7a14		       00		      .byte.b	%00000000
  10490  7a15		       00		      .byte.b	%00000000
  10491  7a16		       00		      .byte.b	%00000000
  10492  7a17		       00		      .byte.b	%00000000
  10493  7a18		       00		      .byte.b	%00000000
  10494  7a19		       00		      .byte.b	%00000000
  10495  7a1a		       00		      .byte.b	%00000000
  10496  7a1b		       00		      .byte.b	%00000000
  10497  7a1c		       00		      .byte.b	%00000000
  10498  7a1d		       00		      .byte.b	%00000000
  10499  7a1e		       00		      .byte.b	%00000000
  10500  7a1f		       1b		      .byte.b	%00011011
  10501  7a20		       1f		      .byte.b	%00011111
  10502  7a21		       15		      .byte.b	%00010101
  10503  7a22		       15		      .byte.b	%00010101
  10504  7a23		       15		      .byte.b	%00010101
  10505  7a24		       15		      .byte.b	%00010101
  10506  7a25		       95		      .byte.b	%10010101
  10507  7a26		       95		      .byte.b	%10010101
  10508  7a27		       95		      .byte.b	%10010101
  10509  7a28		       95		      .byte.b	%10010101
  10510  7a29		       91		      .byte.b	%10010001
  10511  7a2a		       91		      .byte.b	%10010001
  10512  7a2b		       91		      .byte.b	%10010001
  10513  7a2c		       91		      .byte.b	%10010001
  10514  7a2d		       91		      .byte.b	%10010001
  10515  7a2e		       91		      .byte.b	%10010001
  10516  7a2f		       91		      .byte.b	%10010001
  10517  7a30		       91		      .byte.b	%10010001
  10518  7a31		       91		      .byte.b	%10010001
  10519  7a32		       91		      .byte.b	%10010001
  10520  7a33		       91		      .byte.b	%10010001
  10521  7a34		       91		      .byte.b	%10010001
  10522  7a35		       91		      .byte.b	%10010001
  10523  7a36		       91		      .byte.b	%10010001
  10524  7a37		       00		      .byte.b	%00000000
  10525  7a38		       00		      .byte.b	%00000000
  10526  7a39		       00		      .byte.b	%00000000
  10527  7a3a		       00		      .byte.b	%00000000
  10528  7a3b		       00		      .byte.b	%00000000
  10529  7a3c		       00		      .byte.b	%00000000
  10530  7a3d		       00		      .byte.b	%00000000
  10531  7a3e		       00		      .byte.b	%00000000
  10532  7a3f		       00		      .byte.b	%00000000
  10533  7a40		       1e		      .byte.b	%00011110
  10534  7a41		       1e		      .byte.b	%00011110
  10535  7a42		       10		      .byte.b	%00010000
  10536  7a43		       10		      .byte.b	%00010000
  10537  7a44		       10		      .byte.b	%00010000
  10538  7a45		       10		      .byte.b	%00010000
  10539  7a46		       10		      .byte.b	%00010000
  10540  7a47		       10		      .byte.b	%00010000
  10541  7a48		       10		      .byte.b	%00010000
  10542  7a49		       10		      .byte.b	%00010000
  10543  7a4a		       1c		      .byte.b	%00011100
  10544  7a4b		       1c		      .byte.b	%00011100
  10545  7a4c		       10		      .byte.b	%00010000
  10546  7a4d		       10		      .byte.b	%00010000
  10547  7a4e		       10		      .byte.b	%00010000
  10548  7a4f		       10		      .byte.b	%00010000
  10549  7a50		       10		      .byte.b	%00010000
  10550  7a51		       10		      .byte.b	%00010000
  10551  7a52		       10		      .byte.b	%00010000
  10552  7a53		       10		      .byte.b	%00010000
  10553  7a54		       10		      .byte.b	%00010000
  10554  7a55		       10		      .byte.b	%00010000
  10555  7a56		       1e		      .byte.b	%00011110
  10556  7a57		       1e		      .byte.b	%00011110
  10557  7a58		       00		      .byte.b	%00000000
  10558  7a59		       00		      .byte.b	%00000000
  10559  7a5a		       00		      .byte.b	%00000000
  10560  7a5b		       00		      .byte.b	%00000000
  10561  7a5c		       00		      .byte.b	%00000000
  10562  7a5d		       00		      .byte.b	%00000000
  10563  7a5e		       00		      .byte.b	%00000000
  10564  7a5f		       00		      .byte.b	%00000000
  10565  7a60		       00		      .byte.b	%00000000
  10566  7a61		       00		      .byte.b	%00000000
  10567  7a62		       00		      .byte.b	%00000000
  10568  7a63		       00		      .byte.b	%00000000
  10569  7a64		       00		      .byte.b	%00000000
  10570  7a65		       00		      .byte.b	%00000000
  10571  7a66		       00		      .byte.b	%00000000
  10572  7a67		       00		      .byte.b	%00000000
  10573  7a68		       00		      .byte.b	%00000000
  10574  7a69		       00		      .byte.b	%00000000
  10575  7a6a		       00		      .byte.b	%00000000
  10576  7a6b		       00		      .byte.b	%00000000
  10577  7a6c		       00		      .byte.b	%00000000
  10578  7a6d		       00		      .byte.b	%00000000
  10579  7a6e		       00		      .byte.b	%00000000
  10580  7a6f		       00		      .byte.b	%00000000
  10581  7a70		       00		      .byte.b	%00000000
  10582  7a71		       00		      .byte.b	%00000000
  10583  7a72		       00		      .byte.b	%00000000
  10584  7a73		       00		      .byte.b	%00000000
  10585  7a74		       00		      .byte.b	%00000000
  10586  7a75		       00		      .byte.b	%00000000
  10587  7a76		       00		      .byte.b	%00000000
  10588  7a77		       f1		      .byte.b	%11110001
  10589  7a78		       f1		      .byte.b	%11110001
  10590  7a79		       90		      .byte.b	%10010000
  10591  7a7a		       90		      .byte.b	%10010000
  10592  7a7b		       90		      .byte.b	%10010000
  10593  7a7c		       90		      .byte.b	%10010000
  10594  7a7d		       90		      .byte.b	%10010000
  10595  7a7e		       08		      .byte.b	%00001000
  10596  7a7f		       08		      .byte.b	%00001000
  10597  7a80		       08		      .byte.b	%00001000
  10598  7a81		       08		      .byte.b	%00001000
  10599  7a82		       08		      .byte.b	%00001000
  10600  7a83		       08		      .byte.b	%00001000
  10601  7a84		       08		      .byte.b	%00001000
  10602  7a85		       f9		      .byte.b	%11111001
  10603  7a86		       09		      .byte.b	%00001001
  10604  7a87		       09		      .byte.b	%00001001
  10605  7a88		       09		      .byte.b	%00001001
  10606  7a89		       09		      .byte.b	%00001001
  10607  7a8a		       09		      .byte.b	%00001001
  10608  7a8b		       09		      .byte.b	%00001001
  10609  7a8c		       09		      .byte.b	%00001001
  10610  7a8d		       09		      .byte.b	%00001001
  10611  7a8e		       09		      .byte.b	%00001001
  10612  7a8f		       00		      .byte.b	%00000000
  10613  7a90		       00		      .byte.b	%00000000
  10614  7a91		       00		      .byte.b	%00000000
  10615  7a92		       00		      .byte.b	%00000000
  10616  7a93		       00		      .byte.b	%00000000
  10617  7a94		       00		      .byte.b	%00000000
  10618  7a95		       00		      .byte.b	%00000000
  10619  7a96		       00		      .byte.b	%00000000
  10620  7a97		       89		      .byte.b	%10001001
  10621  7a98		       89		      .byte.b	%10001001
  10622  7a99		       89		      .byte.b	%10001001
  10623  7a9a		       89		      .byte.b	%10001001
  10624  7a9b		       89		      .byte.b	%10001001
  10625  7a9c		       89		      .byte.b	%10001001
  10626  7a9d		       89		      .byte.b	%10001001
  10627  7a9e		       d1		      .byte.b	%11010001
  10628  7a9f		       51		      .byte.b	%01010001
  10629  7aa0		       51		      .byte.b	%01010001
  10630  7aa1		       51		      .byte.b	%01010001
  10631  7aa2		       51		      .byte.b	%01010001
  10632  7aa3		       51		      .byte.b	%01010001
  10633  7aa4		       51		      .byte.b	%01010001
  10634  7aa5		       51		      .byte.b	%01010001
  10635  7aa6		       51		      .byte.b	%01010001
  10636  7aa7		       51		      .byte.b	%01010001
  10637  7aa8		       51		      .byte.b	%01010001
  10638  7aa9		       71		      .byte.b	%01110001
  10639  7aaa		       71		      .byte.b	%01110001
  10640  7aab		       21		      .byte.b	%00100001
  10641  7aac		       21		      .byte.b	%00100001
  10642  7aad		       21		      .byte.b	%00100001
  10643  7aae		       21		      .byte.b	%00100001
  10644  7aaf		       21		      .byte.b	%00100001
  10645  7ab0		       00		      .byte.b	%00000000
  10646  7ab1		       00		      .byte.b	%00000000
  10647  7ab2		       00		      .byte.b	%00000000
  10648  7ab3		       00		      .byte.b	%00000000
  10649  7ab4		       00		      .byte.b	%00000000
  10650  7ab5		       00		      .byte.b	%00000000
  10651  7ab6		       00		      .byte.b	%00000000
  10652  7ab7		       00		      .byte.b	%00000000
  10653  7ab8		       00		      .byte.b	%00000000
  10654  7ab9		       00		      .byte.b	%00000000
  10655  7aba		       00		      .byte.b	%00000000
  10656  7abb		       00		      .byte.b	%00000000
  10657  7abc		       00		      .byte.b	%00000000
  10658  7abd		       00		      .byte.b	%00000000
  10659  7abe		       00		      .byte.b	%00000000
  10660  7abf		       00		      .byte.b	%00000000
  10661  7ac0		       00		      .byte.b	%00000000
  10662  7ac1		       00		      .byte.b	%00000000
  10663  7ac2		       00		      .byte.b	%00000000
  10664  7ac3		       00		      .byte.b	%00000000
  10665  7ac4		       00		      .byte.b	%00000000
  10666  7ac5		       00		      .byte.b	%00000000
  10667  7ac6		       00		      .byte.b	%00000000
  10668  7ac7		       00		      .byte.b	%00000000
  10669  7ac8		       00		      .byte.b	%00000000
  10670  7ac9		       00		      .byte.b	%00000000
  10671  7aca		       00		      .byte.b	%00000000
  10672  7acb		       00		      .byte.b	%00000000
  10673  7acc		       00		      .byte.b	%00000000
  10674  7acd		       00		      .byte.b	%00000000
  10675  7ace		       00		      .byte.b	%00000000
  10676  7acf		       0f		      .byte.b	%00001111
  10677  7ad0		       0f		      .byte.b	%00001111
  10678  7ad1		       08		      .byte.b	%00001000
  10679  7ad2		       08		      .byte.b	%00001000
  10680  7ad3		       08		      .byte.b	%00001000
  10681  7ad4		       08		      .byte.b	%00001000
  10682  7ad5		       08		      .byte.b	%00001000
  10683  7ad6		       08		      .byte.b	%00001000
  10684  7ad7		       08		      .byte.b	%00001000
  10685  7ad8		       08		      .byte.b	%00001000
  10686  7ad9		       08		      .byte.b	%00001000
  10687  7ada		       08		      .byte.b	%00001000
  10688  7adb		       08		      .byte.b	%00001000
  10689  7adc		       08		      .byte.b	%00001000
  10690  7add		       0b		      .byte.b	%00001011
  10691  7ade		       0b		      .byte.b	%00001011
  10692  7adf		       08		      .byte.b	%00001000
  10693  7ae0		       08		      .byte.b	%00001000
  10694  7ae1		       08		      .byte.b	%00001000
  10695  7ae2		       08		      .byte.b	%00001000
  10696  7ae3		       08		      .byte.b	%00001000
  10697  7ae4		       08		      .byte.b	%00001000
  10698  7ae5		       0f		      .byte.b	%00001111
  10699  7ae6		       0f		      .byte.b	%00001111
  10700  7ae7		       00		      .byte.b	%00000000
  10701  7ae8		       00		      .byte.b	%00000000
  10702  7ae9		       00		      .byte.b	%00000000
  10703  7aea		       00		      .byte.b	%00000000
  10704  7aeb		       00		      .byte.b	%00000000
  10705  7aec		       00		      .byte.b	%00000000
  10706  7aed		       00		      .byte.b	%00000000
  10707  7aee		       00		      .byte.b	%00000000
  10708  7aef		       0f		      .byte.b	%00001111
  10709  7af0		       0f		      .byte.b	%00001111
  10710  7af1		       08		      .byte.b	%00001000
  10711  7af2		       08		      .byte.b	%00001000
  10712  7af3		       08		      .byte.b	%00001000
  10713  7af4		       08		      .byte.b	%00001000
  10714  7af5		       08		      .byte.b	%00001000
  10715  7af6		       08		      .byte.b	%00001000
  10716  7af7		       08		      .byte.b	%00001000
  10717  7af8		       08		      .byte.b	%00001000
  10718  7af9		       08		      .byte.b	%00001000
  10719  7afa		       08		      .byte.b	%00001000
  10720  7afb		       08		      .byte.b	%00001000
  10721  7afc		       08		      .byte.b	%00001000
  10722  7afd		       08		      .byte.b	%00001000
  10723  7afe		       08		      .byte.b	%00001000
  10724  7aff		       08		      .byte.b	%00001000
  10725  7b00		       08		      .byte.b	%00001000
  10726  7b01		       08		      .byte.b	%00001000
  10727  7b02		       08		      .byte.b	%00001000
  10728  7b03		       08		      .byte.b	%00001000
  10729  7b04		       08		      .byte.b	%00001000
  10730  7b05		       08		      .byte.b	%00001000
  10731  7b06		       0f		      .byte.b	%00001111
  10732  7b07		       0f		      .byte.b	%00001111
  10733  7b08		       00		      .byte.b	%00000000
  10734  7b09		       00		      .byte.b	%00000000
  10735  7b0a		       00		      .byte.b	%00000000
  10736  7b0b		       00		      .byte.b	%00000000
  10737  7b0c		       00		      .byte.b	%00000000
  10738  7b0d		       00		      .byte.b	%00000000
  10739  7b0e		       00		      .byte.b	%00000000
  10740  7b0f		       00		      .byte.b	%00000000
  10741  7b10		       00		      .byte.b	%00000000
  10742  7b11		       00		      .byte.b	%00000000
  10743  7b12		       00		      .byte.b	%00000000
  10744  7b13		       00		      .byte.b	%00000000
  10745  7b14		       00		      .byte.b	%00000000
  10746  7b15		       00		      .byte.b	%00000000
  10747  7b16		       00		      .byte.b	%00000000
  10748  7b17		       00		      .byte.b	%00000000
  10749  7b18		       00		      .byte.b	%00000000
  10750  7b19		       00		      .byte.b	%00000000
  10751  7b1a				   playfieldcolorL0576
  10752  7b1a		       00		      .byte.b	_00
  10753  7b1b		       00		      .byte.b	_00
  10754  7b1c		       00		      .byte.b	_00
  10755  7b1d		       00		      .byte.b	_00
  10756  7b1e		       00		      .byte.b	_00
  10757  7b1f		       00		      .byte.b	_00
  10758  7b20		       00		      .byte.b	_00
  10759  7b21		       00		      .byte.b	_00
  10760  7b22		       00		      .byte.b	_00
  10761  7b23		       00		      .byte.b	_00
  10762  7b24		       00		      .byte.b	_00
  10763  7b25		       00		      .byte.b	_00
  10764  7b26		       00		      .byte.b	_00
  10765  7b27		       00		      .byte.b	_00
  10766  7b28		       00		      .byte.b	_00
  10767  7b29		       00		      .byte.b	_00
  10768  7b2a		       00		      .byte.b	_00
  10769  7b2b		       00		      .byte.b	_00
  10770  7b2c		       00		      .byte.b	_00
  10771  7b2d		       00		      .byte.b	_00
  10772  7b2e		       00		      .byte.b	_00
  10773  7b2f		       00		      .byte.b	_00
  10774  7b30		       00		      .byte.b	_00
  10775  7b31		       00		      .byte.b	_00
  10776  7b32		       00		      .byte.b	_00
  10777  7b33		       00		      .byte.b	_00
  10778  7b34		       00		      .byte.b	_00
  10779  7b35		       00		      .byte.b	_00
  10780  7b36		       00		      .byte.b	_00
  10781  7b37		       00		      .byte.b	_00
  10782  7b38		       00		      .byte.b	_00
  10783  7b39		       00		      .byte.b	_00
  10784  7b3a		       00		      .byte.b	_00
  10785  7b3b		       00		      .byte.b	_00
  10786  7b3c		       00		      .byte.b	_00
  10787  7b3d		       00		      .byte.b	_00
  10788  7b3e		       00		      .byte.b	_00
  10789  7b3f		       00		      .byte.b	_00
  10790  7b40		       00		      .byte.b	_00
  10791  7b41		       00		      .byte.b	_00
  10792  7b42		       00		      .byte.b	_00
  10793  7b43		       00		      .byte.b	_00
  10794  7b44		       00		      .byte.b	_00
  10795  7b45		       00		      .byte.b	_00
  10796  7b46		       00		      .byte.b	_00
  10797  7b47		       00		      .byte.b	_00
  10798  7b48		       00		      .byte.b	_00
  10799  7b49		       00		      .byte.b	_00
  10800  7b4a		       00		      .byte.b	_00
  10801  7b4b		       00		      .byte.b	_00
  10802  7b4c		       00		      .byte.b	_00
  10803  7b4d		       00		      .byte.b	_00
  10804  7b4e		       00		      .byte.b	_00
  10805  7b4f		       00		      .byte.b	_00
  10806  7b50		       00		      .byte.b	_00
  10807  7b51		       00		      .byte.b	_00
  10808  7b52		       00		      .byte.b	_00
  10809  7b53		       00		      .byte.b	_00
  10810  7b54		       00		      .byte.b	_00
  10811  7b55		       00		      .byte.b	_00
  10812  7b56		       00		      .byte.b	_00
  10813  7b57		       00		      .byte.b	_00
  10814  7b58		       00		      .byte.b	_00
  10815  7b59		       00		      .byte.b	_00
  10816  7b5a		       00		      .byte.b	_00
  10817  7b5b		       00		      .byte.b	_00
  10818  7b5c		       00		      .byte.b	_00
  10819  7b5d		       00		      .byte.b	_00
  10820  7b5e		       00		      .byte.b	_00
  10821  7b5f		       00		      .byte.b	_00
  10822  7b60		       00		      .byte.b	_00
  10823  7b61		       00		      .byte.b	_00
  10824  7b62		       00		      .byte.b	_00
  10825  7b63		       00		      .byte.b	_00
  10826  7b64		       00		      .byte.b	_00
  10827  7b65		       00		      .byte.b	_00
  10828  7b66		       00		      .byte.b	_00
  10829  7b67		       00		      .byte.b	_00
  10830  7b68		       00		      .byte.b	_00
  10831  7b69		       00		      .byte.b	_00
  10832  7b6a		       00		      .byte.b	_00
  10833  7b6b		       00		      .byte.b	_00
  10834  7b6c		       00		      .byte.b	_00
  10835  7b6d		       00		      .byte.b	_00
  10836  7b6e		       00		      .byte.b	_00
  10837  7b6f		       00		      .byte.b	_00
  10838  7b70		       00		      .byte.b	_00
  10839  7b71		       00		      .byte.b	_00
  10840  7b72					      if	ECHOFIRST
      1122 bytes of ROM space left in graphics bank
  10841  7b72					      echo	"    ",[(DPC_graphics_end - *)]d , "bytes of ROM space left in graphics bank")
  10842  7b72					      endif
  10843  7b72		       00 01	   ECHOFIRST  =	1
  10844  7b72
  10845  7b72
  10846  7b72							; Provided under the CC0 license. See the included LICENSE.txt for details.
  10847  7b72
  10848  7fd4					      ORG	$7FF4-bscode_length
  10849  7fd4					      RORG	$DFF4-bscode_length
  10850  7fd4				   DPC_graphics_end
  10851  7fd4
  10852  7fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
  10853  7fd4
  10854  7fd4							; every bank has this stuff at the same place
  10855  7fd4							; this code can switch to/from any bank at any entry point
  10856  7fd4							; and can preserve register values
  10857  7fd4							; note: lines not starting with a space are not placed in all banks
  10858  7fd4							;
  10859  7fd4							; line below tells the compiler how long this is - do not remove
  10860  7fd4							;size=32
  10861  7fd4
  10862  7fd4				   begin_bscode
  10863  7fd4		       a2 ff		      ldx	#$ff
  10864  7fd6					      ifconst	FASTFETCH	; using DPC+
  10865  7fd6		       8e 58 10 	      stx	FASTFETCH
  10866  7fd9					      endif
  10867  7fd9		       9a		      txs
  10868  7fda				  -	      if	bankswitch == 64
  10869  7fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  10870  7fda					      else
  10871  7fda		       a9 18		      lda	#>(start-1)
  10872  7fdc					      endif
  10873  7fdc		       48		      pha
  10874  7fdd		       a9 e3		      lda	#<(start-1)
  10875  7fdf		       48		      pha
  10876  7fe0
  10877  7fe0				   BS_return
  10878  7fe0		       48		      pha
  10879  7fe1		       8a		      txa
  10880  7fe2		       48		      pha
  10881  7fe3		       ba		      tsx
  10882  7fe4
  10883  7fe4					      if	bankswitch != 64
  10884  7fe4		       b5 04		      lda	4,x	; get high byte of return address
  10885  7fe6
  10886  7fe6		       2a		      rol
  10887  7fe7		       2a		      rol
  10888  7fe8		       2a		      rol
  10889  7fe9		       2a		      rol
  10890  7fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  10891  7fec		       aa		      tax
  10892  7fed		       e8		      inx
  10893  7fee				  -	      else
  10894  7fee				  -	      lda	4,x	; get high byte of return address
  10895  7fee				  -	      tay
  10896  7fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  10897  7fee				  -	      sta	4,x
  10898  7fee				  -	      tya
  10899  7fee				  -	      lsr
  10900  7fee				  -	      lsr
  10901  7fee				  -	      lsr
  10902  7fee				  -	      lsr
  10903  7fee				  -	      tax
  10904  7fee				  -	      inx
  10905  7fee					      endif
  10906  7fee
  10907  7fee				   BS_jsr
  10908  7fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
  10909  7ff1		       68		      pla
  10910  7ff2		       aa		      tax
  10911  7ff3		       68		      pla
  10912  7ff4		       60		      rts
  10913  7ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  10914  7ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  10915  7ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  10916  7ff5					      endif
  10917  7ff5							; Provided under the CC0 license. See the included LICENSE.txt for details.
  10918  7ff5
  10919  8000					      org	$8000
  10920  8000					      rorg	$1000
  10921  8000							; Provided under the CC0 license. See the included LICENSE.txt for details.
  10922  8000
  10923  8000							; 1K Frequency Table.
  10924  8000							; Fred Quimby, Darrell Spice Jr, Chris Walton 2010
  10925  8000							;
  10926  8000							; The 1K Frequency Table can contain up to 256 frequency values
  10927  8000							;
  10928  8000							; Table entries are defined as 2^32*freq/20000
  10929  8000							;
  10930  8000							; If User ARM code is being used, then the last 512 bytes of the frequency
  10931  8000							; table will no longer be available, reducing the number of frequencies you can
  10932  8000							; use to 128.
  10933  8000
  10934  8000							; piano key frequencies (s = sharp)
  10935  8000
  10936  8000				   .freq_table_start
  10937  8000
  10938  8000		       00 00 00 00	      DC.L	0
  10939  8000		       00 01	   A0	      =	(* & $3ff)/4
  10940  8004		       ac 1c 5a 00	      DC.L	5905580
  10941  8008
  10942  8008		       00 02	   A0s	      =	(* & $3ff)/4
  10943  8008		       68 78 5f 00	      DC.L	6256744
  10944  800c
  10945  800c		       00 03	   B0	      =	(* & $3ff)/4
  10946  800c		       b5 25 65 00	      DC.L	6628789
  10947  8010
  10948  8010		       00 04	   C1	      =	(* & $3ff)/4
  10949  8010		       6e 29 6b 00	      DC.L	7022958
  10950  8014
  10951  8014		       00 05	   C1s	      =	(* & $3ff)/4
  10952  8014		       b5 88 71 00	      DC.L	7440565
  10953  8018
  10954  8018		       00 06	   D1	      =	(* & $3ff)/4
  10955  8018		       fc 48 78 00	      DC.L	7883004
  10956  801c
  10957  801c		       00 07	   D1s	      =	(* & $3ff)/4
  10958  801c		       07 70 7f 00	      DC.L	8351751
  10959  8020
  10960  8020		       00 08	   E1	      =	(* & $3ff)/4
  10961  8020		       f4 03 87 00	      DC.L	8848372
  10962  8024
  10963  8024		       00 09	   F1	      =	(* & $3ff)/4
  10964  8024		       3c 0b 8f 00	      DC.L	9374524
  10965  8028
  10966  8028		       00 0a	   F1s	      =	(* & $3ff)/4
  10967  8028		       ba 8c 97 00	      DC.L	9931962
  10968  802c
  10969  802c		       00 0b	   G1	      =	(* & $3ff)/4
  10970  802c		       b3 8f a0 00	      DC.L	10522547
  10971  8030
  10972  8030		       00 0c	   G1s	      =	(* & $3ff)/4
  10973  8030		       db 1b aa 00	      DC.L	11148251
  10974  8034
  10975  8034		       00 0d	   A1	      =	(* & $3ff)/4
  10976  8034		       58 39 b4 00	      DC.L	11811160
  10977  8038
  10978  8038		       00 0e	   A1s	      =	(* & $3ff)/4
  10979  8038		       d0 f0 be 00	      DC.L	12513488
  10980  803c
  10981  803c		       00 0f	   B1	      =	(* & $3ff)/4
  10982  803c		       6b 4b ca 00	      DC.L	13257579
  10983  8040
  10984  8040		       00 10	   C2	      =	(* & $3ff)/4
  10985  8040		       dc 52 d6 00	      DC.L	14045916
  10986  8044
  10987  8044		       00 11	   C2s	      =	(* & $3ff)/4
  10988  8044		       69 11 e3 00	      DC.L	14881129
  10989  8048
  10990  8048		       00 12	   D2	      =	(* & $3ff)/4
  10991  8048		       f7 91 f0 00	      DC.L	15766007
  10992  804c
  10993  804c		       00 13	   D2s	      =	(* & $3ff)/4
  10994  804c		       0f e0 fe 00	      DC.L	16703503
  10995  8050
  10996  8050		       00 14	   E2	      =	(* & $3ff)/4
  10997  8050		       e9 07 0e 01	      DC.L	17696745
  10998  8054
  10999  8054		       00 15	   F2	      =	(* & $3ff)/4
  11000  8054		       78 16 1e 01	      DC.L	18749048
  11001  8058
  11002  8058		       00 16	   F2s	      =	(* & $3ff)/4
  11003  8058		       74 19 2f 01	      DC.L	19863924
  11004  805c
  11005  805c		       00 17	   G2	      =	(* & $3ff)/4
  11006  805c		       67 1f 41 01	      DC.L	21045095
  11007  8060
  11008  8060		       00 18	   G2s	      =	(* & $3ff)/4
  11009  8060		       b5 37 54 01	      DC.L	22296501
  11010  8064
  11011  8064		       00 19	   A2	      =	(* & $3ff)/4
  11012  8064		       b0 72 68 01	      DC.L	23622320
  11013  8068
  11014  8068		       00 1a	   A2s	      =	(* & $3ff)/4
  11015  8068		       a0 e1 7d 01	      DC.L	25026976
  11016  806c
  11017  806c		       00 1b	   B2	      =	(* & $3ff)/4
  11018  806c		       d6 96 94 01	      DC.L	26515158
  11019  8070
  11020  8070		       00 1c	   C3	      =	(* & $3ff)/4
  11021  8070		       b7 a5 ac 01	      DC.L	28091831
  11022  8074
  11023  8074		       00 1d	   C3s	      =	(* & $3ff)/4
  11024  8074		       d2 22 c6 01	      DC.L	29762258
  11025  8078
  11026  8078		       00 1e	   D3	      =	(* & $3ff)/4
  11027  8078		       ee 23 e1 01	      DC.L	31532014
  11028  807c
  11029  807c		       00 1f	   D3s	      =	(* & $3ff)/4
  11030  807c		       1d c0 fd 01	      DC.L	33407005
  11031  8080
  11032  8080		       00 20	   E3	      =	(* & $3ff)/4
  11033  8080		       d1 0f 1c 02	      DC.L	35393489
  11034  8084
  11035  8084		       00 21	   F3	      =	(* & $3ff)/4
  11036  8084		       f0 2c 3c 02	      DC.L	37498096
  11037  8088
  11038  8088		       00 22	   F3s	      =	(* & $3ff)/4
  11039  8088		       e9 32 5e 02	      DC.L	39727849
  11040  808c
  11041  808c		       00 23	   G3	      =	(* & $3ff)/4
  11042  808c		       cd 3e 82 02	      DC.L	42090189
  11043  8090
  11044  8090		       00 24	   G3s	      =	(* & $3ff)/4
  11045  8090		       6a 6f a8 02	      DC.L	44593002
  11046  8094
  11047  8094		       00 25	   A3	      =	(* & $3ff)/4
  11048  8094		       60 e5 d0 02	      DC.L	47244640
  11049  8098
  11050  8098		       00 26	   A3s	      =	(* & $3ff)/4
  11051  8098		       41 c3 fb 02	      DC.L	50053953
  11052  809c
  11053  809c		       00 27	   B3	      =	(* & $3ff)/4
  11054  809c		       ac 2d 29 03	      DC.L	53030316
  11055  80a0
  11056  80a0		       00 28	   C4	      =	(* & $3ff)/4
  11057  80a0		       6e 4b 59 03	      DC.L	56183662
  11058  80a4
  11059  80a4		       00 29	   C4s	      =	(* & $3ff)/4
  11060  80a4		       a5 45 8c 03	      DC.L	59524517
  11061  80a8
  11062  80a8		       00 2a	   D4	      =	(* & $3ff)/4
  11063  80a8		       dd 47 c2 03	      DC.L	63064029
  11064  80ac
  11065  80ac		       00 2b	   D4s	      =	(* & $3ff)/4
  11066  80ac		       3b 80 fb 03	      DC.L	66814011
  11067  80b0
  11068  80b0		       00 2c	   E4	      =	(* & $3ff)/4
  11069  80b0		       a3 1f 38 04	      DC.L	70786979
  11070  80b4
  11071  80b4		       00 2d	   F4	      =	(* & $3ff)/4
  11072  80b4		       e0 59 78 04	      DC.L	74996192
  11073  80b8
  11074  80b8		       00 2e	   F4s	      =	(* & $3ff)/4
  11075  80b8		       d1 65 bc 04	      DC.L	79455697
  11076  80bc
  11077  80bc		       00 2f	   G4	      =	(* & $3ff)/4
  11078  80bc		       9b 7d 04 05	      DC.L	84180379
  11079  80c0
  11080  80c0		       00 30	   G4s	      =	(* & $3ff)/4
  11081  80c0		       d5 de 50 05	      DC.L	89186005
  11082  80c4
  11083  80c4		       00 31	   A4	      =	(* & $3ff)/4
  11084  80c4		       c1 ca a1 05	      DC.L	94489281
  11085  80c8
  11086  80c8		       00 32	   A4s	      =	(* & $3ff)/4
  11087  80c8		       82 86 f7 05	      DC.L	100107906
  11088  80cc
  11089  80cc		       00 33	   B4	      =	(* & $3ff)/4
  11090  80cc		       57 5b 52 06	      DC.L	106060631
  11091  80d0
  11092  80d0		       00 34	   C5	      =	(* & $3ff)/4
  11093  80d0		       dd 96 b2 06	      DC.L	112367325
  11094  80d4
  11095  80d4		       00 35	   C5s	      =	(* & $3ff)/4
  11096  80d4		       4a 8b 18 07	      DC.L	119049034
  11097  80d8
  11098  80d8		       00 36	   D5	      =	(* & $3ff)/4
  11099  80d8		       b9 8f 84 07	      DC.L	126128057
  11100  80dc
  11101  80dc		       00 37	   D5s	      =	(* & $3ff)/4
  11102  80dc		       76 00 f7 07	      DC.L	133628022
  11103  80e0
  11104  80e0		       00 38	   E5	      =	(* & $3ff)/4
  11105  80e0		       46 3f 70 08	      DC.L	141573958
  11106  80e4
  11107  80e4		       00 39	   F5	      =	(* & $3ff)/4
  11108  80e4		       bf b3 f0 08	      DC.L	149992383
  11109  80e8
  11110  80e8		       00 3a	   F5s	      =	(* & $3ff)/4
  11111  80e8		       a3 cb 78 09	      DC.L	158911395
  11112  80ec
  11113  80ec		       00 3b	   G5	      =	(* & $3ff)/4
  11114  80ec		       36 fb 08 0a	      DC.L	168360758
  11115  80f0
  11116  80f0		       00 3c	   G5s	      =	(* & $3ff)/4
  11117  80f0		       a9 bd a1 0a	      DC.L	178372009
  11118  80f4
  11119  80f4		       00 3d	   A5	      =	(* & $3ff)/4
  11120  80f4		       81 95 43 0b	      DC.L	188978561
  11121  80f8
  11122  80f8		       00 3e	   A5s	      =	(* & $3ff)/4
  11123  80f8		       03 0d ef 0b	      DC.L	200215811
  11124  80fc
  11125  80fc		       00 3f	   B5	      =	(* & $3ff)/4
  11126  80fc		       af b6 a4 0c	      DC.L	212121263
  11127  8100
  11128  8100		       00 40	   C6	      =	(* & $3ff)/4
  11129  8100		       b9 2d 65 0d	      DC.L	224734649
  11130  8104
  11131  8104		       00 41	   C6s	      =	(* & $3ff)/4
  11132  8104		       93 16 31 0e	      DC.L	238098067
  11133  8108
  11134  8108		       00 42	   D6	      =	(* & $3ff)/4
  11135  8108		       73 1f 09 0f	      DC.L	252256115
  11136  810c
  11137  810c		       00 43	   D6s	      =	(* & $3ff)/4
  11138  810c		       ec 00 ee 0f	      DC.L	267256044
  11139  8110
  11140  8110		       00 44	   E6	      =	(* & $3ff)/4
  11141  8110		       8b 7e e0 10	      DC.L	283147915
  11142  8114
  11143  8114		       00 45	   F6	      =	(* & $3ff)/4
  11144  8114		       7f 67 e1 11	      DC.L	299984767
  11145  8118
  11146  8118		       00 46	   F6s	      =	(* & $3ff)/4
  11147  8118		       45 97 f1 12	      DC.L	317822789
  11148  811c
  11149  811c		       00 47	   G6	      =	(* & $3ff)/4
  11150  811c		       6c f6 11 14	      DC.L	336721516
  11151  8120
  11152  8120		       00 48	   G6s	      =	(* & $3ff)/4
  11153  8120		       53 7b 43 15	      DC.L	356744019
  11154  8124
  11155  8124		       00 49	   A6	      =	(* & $3ff)/4
  11156  8124		       02 2b 87 16	      DC.L	377957122
  11157  8128
  11158  8128		       00 4a	   A6s	      =	(* & $3ff)/4
  11159  8128		       06 1a de 17	      DC.L	400431622
  11160  812c
  11161  812c		       00 4b	   B6	      =	(* & $3ff)/4
  11162  812c		       5d 6d 49 19	      DC.L	424242525
  11163  8130
  11164  8130		       00 4c	   C7	      =	(* & $3ff)/4
  11165  8130		       73 5b ca 1a	      DC.L	449469299
  11166  8134
  11167  8134		       00 4d	   C7s	      =	(* & $3ff)/4
  11168  8134		       26 2d 62 1c	      DC.L	476196134
  11169  8138
  11170  8138		       00 4e	   D7	      =	(* & $3ff)/4
  11171  8138		       e6 3e 12 1e	      DC.L	504512230
  11172  813c
  11173  813c		       00 4f	   D7s	      =	(* & $3ff)/4
  11174  813c		       d8 01 dc 1f	      DC.L	534512088
  11175  8140
  11176  8140		       00 50	   E7	      =	(* & $3ff)/4
  11177  8140		       17 fd c0 21	      DC.L	566295831
  11178  8144
  11179  8144		       00 51	   F7	      =	(* & $3ff)/4
  11180  8144		       fd ce c2 23	      DC.L	599969533
  11181  8148
  11182  8148		       00 52	   F7s	      =	(* & $3ff)/4
  11183  8148		       8a 2e e3 25	      DC.L	635645578
  11184  814c
  11185  814c		       00 53	   G7	      =	(* & $3ff)/4
  11186  814c		       d7 ec 23 28	      DC.L	673443031
  11187  8150
  11188  8150		       00 54	   G7s	      =	(* & $3ff)/4
  11189  8150		       a6 f6 86 2a	      DC.L	713488038
  11190  8154
  11191  8154		       00 55	   A7	      =	(* & $3ff)/4
  11192  8154		       04 56 0e 2d	      DC.L	755914244
  11193  8158
  11194  8158		       00 56	   A7s	      =	(* & $3ff)/4
  11195  8158		       0c 34 bc 2f	      DC.L	800863244
  11196  815c
  11197  815c		       00 57	   B7	      =	(* & $3ff)/4
  11198  815c		       bb da 92 32	      DC.L	848485051
  11199  8160
  11200  8160		       00 58	   C8	      =	(* & $3ff)/4
  11201  8160		       e5 b6 94 35	      DC.L	898938597
  11202  8164
  11203  8164							;values for 89-255 may go here 
  11204  8164
  11205  8164					      if	(* <= $1400)
  11206  8164		       00 00 00 00*	      ds	($1400-*)	; pad out remaining space in frequency table
  11207  8400				  -	      else
  11208  8400				  -	      echo	"FATAL ERROR - Frequency table exceeds 1K"
  11209  8400				  -	      err
  11210  8400					      endif
