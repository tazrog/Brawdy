------- FILE c:\Users\tazrog\Documents\Atari\BrawdyBAS\brawdy.bas.asm LEVEL 1 PASS 4
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 4
      0  8400 ????				      include	"vcs.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????						; VCS.H
      4  8400 ????						; Version 1.05, 13/November/2003
      5  8400 ????
      6  8400 ????	       00 69	   VERSION_VCS =	105
      7  8400 ????
      8  8400 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  8400 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  8400 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  8400 ????						;
     12  8400 ????						; This file defines hardware registers and memory mapping for the
     13  8400 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  8400 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  8400 ????						; available at at http://www.atari2600.org/dasm
     16  8400 ????						;
     17  8400 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  8400 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  8400 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  8400 ????						; with your views.  Please contribute, if you think you can improve this
     21  8400 ????						; file!
     22  8400 ????						;
     23  8400 ????						; Latest Revisions...
     24  8400 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  8400 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  8400 ????						;			    This will allow conditional code to verify VCS.H being
     27  8400 ????						;			    used for code assembly.
     28  8400 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  8400 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  8400 ????						;			 mirrored reading/writing differences.	This is more a 
     31  8400 ????						;			 readability issue, and binary compatibility with disassembled
     32  8400 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  8400 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  8400 ????						;			 which was broken by the use of segments in this file, as
     35  8400 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  8400 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  8400 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  8400 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  8400 ????						;						   it is safe to leave it undefined, and the base address will
     40  8400 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  8400 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  8400 ????						;			  - register definitions are now generated through assignment
     43  8400 ????						;			    in uninitialised segments.	This allows a changeable base
     44  8400 ????						;			    address architecture.
     45  8400 ????						; 1.0	22/MAR/2003		Initial release
     46  8400 ????
     47  8400 ????
     48  8400 ????						;-------------------------------------------------------------------------------
     49  8400 ????
     50  8400 ????						; TIA_BASE_ADDRESS
     51  8400 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  8400 ????						; Normally 0, the base address should (externally, before including this file)
     53  8400 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  8400 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  8400 ????						; < $40 as a bankswitch.
     56  8400 ????
     57  8400 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  8400 ????			  -TIA_BASE_ADDRESS =	0
     59  8400 ????				      ENDIF
     60  8400 ????
     61  8400 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  8400 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  8400 ????						; *OR* by declaring the label before including this file, eg:
     64  8400 ????						; TIA_BASE_ADDRESS = $40
     65  8400 ????						;   include "vcs.h"
     66  8400 ????
     67  8400 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  8400 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  8400 ????						; for the mirrored ROM hardware registers.
     70  8400 ????
     71  8400 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  8400 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  8400 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  8400 ????
     75  8400 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  8400 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  8400 ????				      ENDIF
     78  8400 ????
     79  8400 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  8400 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  8400 ????				      ENDIF
     82  8400 ????
     83  8400 ????						;-------------------------------------------------------------------------------
     84  8400 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  8400 ????				      SEG
    201  8400 ????
    202  8400 ????						; EOF
------- FILE c:\Users\tazrog\Documents\Atari\BrawdyBAS\brawdy.bas.asm
------- FILE macro.h LEVEL 2 PASS 4
      0  8400 ????				      include	"macro.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????						; MACRO.H
      4  8400 ????						; Version 1.05, 13/NOVEMBER/2003
      5  8400 ????
      6  8400 ????	       00 69	   VERSION_MACRO =	105
      7  8400 ????
      8  8400 ????						;
      9  8400 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  8400 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  8400 ????						;
     12  8400 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  8400 ????						; It is distributed as a companion machine-specific support package
     14  8400 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  8400 ????						; available at at http://www.atari2600.org/dasm
     16  8400 ????						;
     17  8400 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  8400 ????						; contents, or would like to add something, please write to me
     19  8400 ????						; (atari2600@taswegian.com) with your contribution.
     20  8400 ????						;
     21  8400 ????						; Latest Revisions...
     22  8400 ????						;
     23  8400 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  8400 ????						;			    This will allow conditional code to verify MACRO.H being
     25  8400 ????						;			    used for code assembly.
     26  8400 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  8400 ????						;
     28  8400 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  8400 ????						;
     30  8400 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  8400 ????						;			   (standardised macro for vertical synch code)
     32  8400 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  8400 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  8400 ????						; 1.0	22/MAR/2003		Initial release
     35  8400 ????
     36  8400 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  8400 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  8400 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  8400 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  8400 ????						;   registers and require them to be defined first).
     41  8400 ????
     42  8400 ????						; Available macros...
     43  8400 ????						;   SLEEP n		 - sleep for n cycles
     44  8400 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  8400 ????						;   CLEAN_START	 - set machine to known state on startup
     46  8400 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  8400 ????
     48  8400 ????						;-------------------------------------------------------------------------------
     49  8400 ????						; SLEEP duration
     50  8400 ????						; Original author: Thomas Jentzsch
     51  8400 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  8400 ????						; useful for code where precise timing is required.
     53  8400 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  8400 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  8400 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  8400 ????
     57  8400 ????				      MAC	sleep
     58  8400 ????			   .CYCLES    SET	{1}
     59  8400 ????
     60  8400 ????				      IF	.CYCLES < 2
     61  8400 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  8400 ????				      ERR
     63  8400 ????				      ENDIF
     64  8400 ????
     65  8400 ????				      IF	.CYCLES & 1
     66  8400 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  8400 ????				      nop	0
     68  8400 ????				      ELSE
     69  8400 ????				      bit	VSYNC
     70  8400 ????				      ENDIF
     71  8400 ????			   .CYCLES    SET	.CYCLES - 3
     72  8400 ????				      ENDIF
     73  8400 ????
     74  8400 ????				      REPEAT	.CYCLES / 2
     75  8400 ????				      nop
     76  8400 ????				      REPEND
     77  8400 ????				      ENDM		;usage: SLEEP n (n>1)
     78  8400 ????
     79  8400 ????						;-------------------------------------------------------------------------------
     80  8400 ????						; VERTICAL_SYNC
     81  8400 ????						; Original author: Manuel Polik
     82  8400 ????						; Inserts the code required for a proper 3 scannline 
     83  8400 ????						; vertical sync sequence
     84  8400 ????						;
     85  8400 ????						; Note: Alters the accumulator
     86  8400 ????						;
     87  8400 ????						; IN:
     88  8400 ????						; OUT: A = 1
     89  8400 ????
     90  8400 ????				      MAC	vertical_sync
     91  8400 ????				      LDA	#$02	; A = VSYNC enable
     92  8400 ????				      STA	WSYNC	; Finish current line
     93  8400 ????				      STA	VSYNC	; Start vertical sync
     94  8400 ????				      STA	WSYNC	; 1st line vertical sync
     95  8400 ????				      STA	WSYNC	; 2nd line vertical sync
     96  8400 ????				      LSR		; A = VSYNC disable
     97  8400 ????				      STA	WSYNC	; 3rd line vertical sync
     98  8400 ????				      STA	VSYNC	; Stop vertical sync
     99  8400 ????				      ENDM
    100  8400 ????
    101  8400 ????						;-------------------------------------------------------------------------------
    102  8400 ????						; CLEAN_START
    103  8400 ????						; Original author: Andrew Davie
    104  8400 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  8400 ????						; Sets stack pointer to $FF, and all registers to 0
    106  8400 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  8400 ????						; Use as very first section of code on boot (ie: at reset)
    108  8400 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  8400 ????
    110  8400 ????				      MAC	clean_start
    111  8400 ????				      sei
    112  8400 ????				      cld
    113  8400 ????
    114  8400 ????				      ldx	#0
    115  8400 ????				      txa
    116  8400 ????				      tay
    117  8400 ????			   .CLEAR_STACK dex
    118  8400 ????				      txs
    119  8400 ????				      pha
    120  8400 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  8400 ????
    122  8400 ????				      ENDM
    123  8400 ????
    124  8400 ????						;-------------------------------------------------------
    125  8400 ????						; SET_POINTER
    126  8400 ????						; Original author: Manuel Rotschkar
    127  8400 ????						;
    128  8400 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  8400 ????						;
    130  8400 ????						; Usage: SET_POINTER pointer, address
    131  8400 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  8400 ????						;
    133  8400 ????						; Note: Alters the accumulator, NZ flags
    134  8400 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  8400 ????						; IN 2: absolute address
    136  8400 ????
    137  8400 ????				      MAC	set_pointer
    138  8400 ????			   .POINTER   SET	{1}
    139  8400 ????			   .ADDRESS   SET	{2}
    140  8400 ????
    141  8400 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  8400 ????				      STA	.POINTER	; Store in pointer
    143  8400 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  8400 ????				      STA	.POINTER+1	; Store in pointer+1
    145  8400 ????
    146  8400 ????				      ENDM
    147  8400 ????
    148  8400 ????						; EOF
------- FILE c:\Users\tazrog\Documents\Atari\BrawdyBAS\brawdy.bas.asm
------- FILE DPCplus.h LEVEL 2 PASS 4
      0  8400 ????				      include	"DPCplus.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????						; DPCplus.H - Display Processor Chip Plus Definitions
      4  8400 ????						; Chris Walton, Fred Quimby, Darrell Spice 2010
      5  8400 ????						; Version 0.00
      6  8400 ????
      7  8400 ????						; DPC Base Address
      8  8400 ????			  -	      IFNCONST	DPC_BASE_ADDRESS
      9  8400 ????			  -DPC_BASE_ADDRESS =	$1000
     10  8400 ????				      ENDIF
     11  8400 ????
     12  8400 ????						; DPC Read Base
     13  8400 ????			  -	      IFNCONST	DPC_BASE_READ_ADDRESS
     14  8400 ????			  -DPC_BASE_READ_ADDRESS =	DPC_BASE_ADDRESS
     15  8400 ????				      ENDIF
     16  8400 ????
     17  8400 ????						; DPC Write Base
     18  8400 ????			  -	      IFNCONST	DPC_BASE_WRITE_ADDRESS
     19  8400 ????			  -DPC_BASE_WRITE_ADDRESS =	DPC_BASE_ADDRESS+$28
     20  8400 ????				      ENDIF
     21  8400 ????
     22 U1028 ????				      SEG.U	DPC_REGISTERS_READ
     23 U1000					      ORG	DPC_BASE_READ_ADDRESS
     24 U1000
     25 U1000							;****************************************
     26 U1000							; DPC+ Read Registers
     27 U1000							;****************************************
     28 U1000							;
     29 U1000							;----------------------------------------
     30 U1000							; Random Numbers
     31 U1000							;----------------------------------------
     32 U1000							; DPC+ provides a 32 bit LFSR (Linear feedback shift register)
     33 U1000							; which is used as a random number generator.	Each individual byte of the
     34 U1000							; random number will return values from 0-255.  The random numbers will follow
     35 U1000							; an exact sequence, so it's best to clock them at least once per frame even if 
     36 U1000							; you don't need the value (this allows the amount of time it takes the user to
     37 U1000							; start the game to select a random starting point in the sequence)
     38 U1000							;----------------------------------------
     39 U1000		       00	   RANDOM0NEXT DS	1	; $00 clock next 32 bit number and returns byte 0
     40 U1001		       00	   RANDOM0PRIOR DS	1	; $01 clock prior 32 bit number and returns byte 0
     41 U1002		       00	   RANDOM1    DS	1	; $02 returns byte 1 of random number w/out clock
     42 U1003		       00	   RANDOM2    DS	1	; $03 returns byte 2 of random number w/out clock
     43 U1004		       00	   RANDOM3    DS	1	; $04 returns byte 3 of random number w/out clock
     44 U1005
     45 U1005							;----------------------------------------
     46 U1005							; Music Fetcher
     47 U1005							;----------------------------------------
     48 U1005							; When generating music, this value must be read every single scanline and
     49 U1005							; stored into AUDV0.
     50 U1005							;----------------------------------------
     51 U1005		       00	   AMPLITUDE  DS	1	; $05
     52 U1006
     53 U1006							;----------------------------------------
     54 U1006							; Reserved
     55 U1006							;----------------------------------------
     56 U1006		       00		      DS	1	; $06
     57 U1007		       00		      DS	1	; $07
     58 U1008
     59 U1008							;----------------------------------------
     60 U1008							; Data Fetcher
     61 U1008							;----------------------------------------
     62 U1008							; There are 8 Data Fetchers which are used to access data stored in the Display
     63 U1008							; Data bank.  Before using, you must point the Data Fetcher at the data to read
     64 U1008							; via DFxLOW and DFxHI.  After each read the Data Fetcher will update to point
     65 U1008							; to the next byte of data to return.
     66 U1008							;
     67 U1008							; psuedo code* to point Data Fetcher 1 to the color data
     68 U1008							;	lda #<(ColorDataPosition - HowFarDownScreen)
     69 U1008							;	sta DF1LOW
     70 U1008							;	lda #>(ColorDataPosition - HowFarDownScreen)
     71 U1008							;	sta DF1HI 
     72 U1008							;	....
     73 U1008							; then in the kernel read the Data Fetcher and update the color, takes 7 cycles
     74 U1008							;	LDA DF1DATA
     75 U1008							;	STA COLUP0
     76 U1008							;
     77 U1008							; * see DPCplus.asm for actual code
     78 U1008							;----------------------------------------
     79 U1008		       00	   DF0DATA    DS	1	; $08
     80 U1009		       00	   DF1DATA    DS	1	; $09
     81 U100a		       00	   DF2DATA    DS	1	; $0A
     82 U100b		       00	   DF3DATA    DS	1	; $0B
     83 U100c		       00	   DF4DATA    DS	1	; $0C
     84 U100d		       00	   DF5DATA    DS	1	; $0D
     85 U100e		       00	   DF6DATA    DS	1	; $0E
     86 U100f		       00	   DF7DATA    DS	1	; $0F
     87 U1010
     88 U1010							;----------------------------------------
     89 U1010							; Data Fetcher, Windowed
     90 U1010							;----------------------------------------
     91 U1010							; The 8 Data Fetchers can also be read in a "windowed" mode, which is most
     92 U1010							; commonly used to update sprites.  To use windowed mode, point the Data
     93 U1010							; Fetcher the same as above, but then also set the Top and Bottom of the
     94 U1010							; Window using DFxTOP and DFxBOT.  When reading via the DFxDATAW registers, a 0
     95 U1010							; value will be returned for anything that's outside of the window.
     96 U1010							;
     97 U1010							; psuedo code to point Data Fetcher0 to the sprite data
     98 U1010							;	lda #<(SpriteDataPosition - HowFarDownScreen)
     99 U1010							;	sta DF0LOW
    100 U1010							;	lda #>(SpriteDataPosition - HowFarDownScreen)
    101 U1010							;	sta DF0HI
    102 U1010							;	
    103 U1010							; set the window for Data Fetcher 0
    104 U1010							;	lda #<(SpriteDataPosition - 1)
    105 U1010							;	sta DF0TOP
    106 U1010							;	lda #<(SpriteDataPosition + ImageHeight)
    107 U1010							;	sta DF0BOT
    108 U1010							;	....
    109 U1010							; then in the kernel read the Data Fetcher and update the sprite, takes 7 cycles
    110 U1010							;	LDA DF0DATAW
    111 U1010							;	STA GRP0
    112 U1010							;----------------------------------------
    113 U1010		       00	   DF0DATAW   DS	1	; $10
    114 U1011		       00	   DF1DATAW   DS	1	; $11
    115 U1012		       00	   DF2DATAW   DS	1	; $12
    116 U1013		       00	   DF3DATAW   DS	1	; $13
    117 U1014		       00	   DF4DATAW   DS	1	; $14
    118 U1015		       00	   DF5DATAW   DS	1	; $15
    119 U1016		       00	   DF6DATAW   DS	1	; $16
    120 U1017		       00	   DF7DATAW   DS	1	; $17
    121 U1018
    122 U1018							;----------------------------------------
    123 U1018							; Fractional Data Fetcher
    124 U1018							;----------------------------------------
    125 U1018							; Another 8 Data Fetchers exist which work differently than the first 8.
    126 U1018							; These allow you to fractionally increment the Data Fetcher so a single
    127 U1018							; value can be read a set number of times before advancing to the next value.
    128 U1018							; This is commonly used to draw asymmetrical playfields without needing to 
    129 U1018							; use 1200 bytes of data (200 scanlines * 6 playfield updates).
    130 U1018							; Before using, you must point the Fractional Data Fetcher at the data to read
    131 U1018							; via DFxFRACLOW and DFxFRACHI.  You must also set the increment value via
    132 U1018							; DFxFRACINC.
    133 U1018							;
    134 U1018							; Set pointer
    135 U1018							;	LDA #<PlayfieldPF0l
    136 U1018							;	STA DF0FRACLOW
    137 U1018							;	... repeat for PF1l, PF2l, PF0r, PF1r and PF2r
    138 U1018							;	lda #>PlayFieldPF0l
    139 U1018							;	STA DF0FRACHI
    140 U1018							;	... repeat for PF1l, PF2l, PF0r, PF1r and PF2r
    141 U1018							; Set the increment to repeat the value for x reads
    142 U1018							;	LDA #(256/x)
    143 U1018							;	STA DF0FRACINC
    144 U1018							;	 STA DF1FRACINC
    145 U1018							;	... repeat for 2-5
    146 U1018							;
    147 U1018							; Special Condition - IF you want to increment the pointer after every read 
    148 U1018							; (just like the normal Data Fetcher), then use the following to set the
    149 U1018							; increment AND prime the Fractional Data Fetcher
    150 U1018							;	LDA #255
    151 U1018							;	STA DF0FRACINC
    152 U1018							;	 STA DF1FRACINC
    153 U1018							;	... repeat for 2-5
    154 U1018							;	LDA DF0FRACDATA - priming read (first value will be read twice)
    155 U1018							;	LDA DF1FRACDATA - priming read (first value will be read twice)
    156 U1018							;	... repeat for 2-5
    157 U1018							;
    158 U1018							; then in the kernel read the Fractional Data Fetchers and update the playfield
    159 U1018							;	LDA DF0FRACDATA
    160 U1018							;	STA PF0
    161 U1018							;	LDA PF1FRACDATA
    162 U1018							;	STA PF1
    163 U1018							;	... repeat for Data Fetchers 2-5, putting them in PF2, PF0, PF1 and PF2
    164 U1018							;----------------------------------------
    165 U1018		       00	   DF0FRACDATA DS	1	; $18
    166 U1019		       00	   DF1FRACDATA DS	1	; $19
    167 U101a		       00	   DF2FRACDATA DS	1	; $1A
    168 U101b		       00	   DF3FRACDATA DS	1	; $1B
    169 U101c		       00	   DF4FRACDATA DS	1	; $1C
    170 U101d		       00	   DF5FRACDATA DS	1	; $1D
    171 U101e		       00	   DF6FRACDATA DS	1	; $1E
    172 U101f		       00	   DF7FRACDATA DS	1	; $1F
    173 U1020
    174 U1020							;----------------------------------------
    175 U1020							; Data Fetcher Window Flag
    176 U1020							;----------------------------------------
    177 U1020							; The Data Fetcher Window Flag allows you to dual-purpose the first four
    178 U1020							; Data Fetchers.  The Window is not required when a Data Fetcher is used to
    179 U1020							; update a sprite's color.  The Flag will return $FF if it's within the window,
    180 U1020							; or 0 if it's not - this value can be used to control the display of the ball
    181 U1020							; and missiles. The Data Fetcher will NOT increment when reading the flag.
    182 U1020							;
    183 U1020							; psuedo code to point Data Fetcher 1 to the color data
    184 U1020							;	lda #<(ColorDataPosition - HowFarDownScreen)
    185 U1020							;	sta DF1LOW
    186 U1020							;	lda #>(ColorDataPosition - HowFarDownScreen)
    187 U1020							;	sta DF1HI
    188 U1020							;
    189 U1020							; set the window based on the missile's Y position and height (number of
    190 U1020							; scanlines to draw missile on)
    191 U1020							;	lda #<(ColorDataPosition + MissileYposition - 1)
    192 U1020							;	sta DF1TOP
    193 U1020							;	lda #<(ColorDataPosition + MissileYposition + MissileHeight)
    194 U1020							;	sta DF1BOT
    195 U1020							;
    196 U1020							; then in the kernel read the Data Fetcher and update the color, then read the
    197 U1020							; flag and update the missile
    198 U1020							;	LDA DF1DATA
    199 U1020							;	STA COLUP0
    200 U1020							;	LDA DF1FLAG
    201 U1020							;	STA ENAM0
    202 U1020							;----------------------------------------
    203 U1020		       00	   DF0FLAG    DS	1	; $20
    204 U1021		       00	   DF1FLAG    DS	1	; $21
    205 U1022		       00	   DF2FLAG    DS	1	; $22
    206 U1023		       00	   DF3FLAG    DS	1	; $23
    207 U1024
    208 U1024							;----------------------------------------
    209 U1024							; Reserved
    210 U1024							;----------------------------------------
    211 U1024		       00		      DS	1	; $24
    212 U1025		       00		      DS	1	; $25
    213 U1026		       00		      DS	1	; $26
    214 U1027		       00		      DS	1	; $27
    215 U1028
    216 U1028
    217 U1080 ????				      SEG.U	DPC_REGISTERS_WRITE
    218 U1028					      ORG	DPC_BASE_WRITE_ADDRESS
    219 U1028
    220 U1028							;****************************************
    221 U1028							; SECTION 2 - DPC+ Write Registers
    222 U1028							;****************************************
    223 U1028							;
    224 U1028							;----------------------------------------
    225 U1028							; Fractional Data Fetcher, Low Pointer
    226 U1028							;----------------------------------------
    227 U1028							; These are used in conjunction with DFxFRACHI to point a Fractional Data
    228 U1028							; Fetcher to the data to read.  For usage, see "Fractional Data Fetcher"
    229 U1028							; in SECTION 1.
    230 U1028							;----------------------------------------
    231 U1028		       00	   DF0FRACLOW DS	1	; $28
    232 U1029		       00	   DF1FRACLOW DS	1	; $29
    233 U102a		       00	   DF2FRACLOW DS	1	; $2A
    234 U102b		       00	   DF3FRACLOW DS	1	; $2B
    235 U102c		       00	   DF4FRACLOW DS	1	; $2C
    236 U102d		       00	   DF5FRACLOW DS	1	; $2D
    237 U102e		       00	   DF6FRACLOW DS	1	; $2E
    238 U102f		       00	   DF7FRACLOW DS	1	; $2F
    239 U1030
    240 U1030							;----------------------------------------
    241 U1030							; Fractional Data Fetcher, High Pointer
    242 U1030							;----------------------------------------
    243 U1030							; These are used in conjunction with DFxFRACLOW to point a Fractional Data
    244 U1030							; Fetcher to the data to read.  For usage, see "Fractional Data Fetcher"
    245 U1030							; in SECTION 1.
    246 U1030							;
    247 U1030							; NOTE: for only the lower 4 bits are used.
    248 U1030							;----------------------------------------
    249 U1030		       00	   DF0FRACHI  DS	1	; $30
    250 U1031		       00	   DF1FRACHI  DS	1	; $31
    251 U1032		       00	   DF2FRACHI  DS	1	; $32
    252 U1033		       00	   DF3FRACHI  DS	1	; $33
    253 U1034		       00	   DF4FRACHI  DS	1	; $34
    254 U1035		       00	   DF5FRACHI  DS	1	; $35 
    255 U1036		       00	   DF6FRACHI  DS	1	; $36 
    256 U1037		       00	   DF7FRACHI  DS	1	; $37 
    257 U1038
    258 U1038							;----------------------------------------
    259 U1038							; Fractional Data Fetcher, Increment
    260 U1038							;----------------------------------------
    261 U1038							; These are used to set the increment amount for the Fractional Data Fetcher.
    262 U1038							; To increment pointer after every Xth read use int(256/X)
    263 U1038							; For usage, see "Fractional Data Fetcher" in SECTION 1.
    264 U1038							;----------------------------------------
    265 U1038		       00	   DF0FRACINC DS	1	; $38
    266 U1039		       00	   DF1FRACINC DS	1	; $39
    267 U103a		       00	   DF2FRACINC DS	1	; $3A
    268 U103b		       00	   DF3FRACINC DS	1	; $3B
    269 U103c		       00	   DF4FRACINC DS	1	; $3C
    270 U103d		       00	   DF5FRACINC DS	1	; $3D
    271 U103e		       00	   DF6FRACINC DS	1	; $3E
    272 U103f		       00	   DF7FRACINC DS	1	; $3F
    273 U1040
    274 U1040							;----------------------------------------
    275 U1040							; Data Fetcher, Window Top
    276 U1040							;----------------------------------------
    277 U1040							; These are used with DFxBOT to define the Data Fetcher Window
    278 U1040							; For usage, see "Data Fetcher, Windowed" in SECTION 1.
    279 U1040							;----------------------------------------
    280 U1040		       00	   DF0TOP     DS	1	; $40
    281 U1041		       00	   DF1TOP     DS	1	; $41
    282 U1042		       00	   DF2TOP     DS	1	; $42
    283 U1043		       00	   DF3TOP     DS	1	; $43
    284 U1044		       00	   DF4TOP     DS	1	; $44
    285 U1045		       00	   DF5TOP     DS	1	; $45
    286 U1046		       00	   DF6TOP     DS	1	; $46
    287 U1047		       00	   DF7TOP     DS	1	; $47
    288 U1048
    289 U1048							;----------------------------------------
    290 U1048							; Data Fetcher, Window Bottom
    291 U1048							;----------------------------------------
    292 U1048							; These are used with DFxTOP to define the Data Fetcher Window
    293 U1048							; For usage, see "Data Fetcher, Windowed" in SECTION 1.
    294 U1048							;----------------------------------------
    295 U1048		       00	   DF0BOT     DS	1	; $48
    296 U1049		       00	   DF1BOT     DS	1	; $49
    297 U104a		       00	   DF2BOT     DS	1	; $4A
    298 U104b		       00	   DF3BOT     DS	1	; $4B
    299 U104c		       00	   DF4BOT     DS	1	; $4C
    300 U104d		       00	   DF5BOT     DS	1	; $4D
    301 U104e		       00	   DF6BOT     DS	1	; $4E
    302 U104f		       00	   DF7BOT     DS	1	; $4F
    303 U1050
    304 U1050							;----------------------------------------
    305 U1050							; Data Fetcher, Low Pointer
    306 U1050							;----------------------------------------
    307 U1050							; These are used in conjunction with DFxHI to point a Data Fetcher to the data
    308 U1050							; to read.  For usage, see "Data Fetcher" in SECTION 1.
    309 U1050							;----------------------------------------
    310 U1050		       00	   DF0LOW     DS	1	; $50
    311 U1051		       00	   DF1LOW     DS	1	; $51
    312 U1052		       00	   DF2LOW     DS	1	; $52
    313 U1053		       00	   DF3LOW     DS	1	; $53
    314 U1054		       00	   DF4LOW     DS	1	; $54
    315 U1055		       00	   DF5LOW     DS	1	; $55
    316 U1056		       00	   DF6LOW     DS	1	; $56
    317 U1057		       00	   DF7LOW     DS	1	; $57
    318 U1058
    319 U1058							;----------------------------------------
    320 U1058							; Fast Fetch Mode
    321 U1058							;----------------------------------------
    322 U1058							; Fast Fetch Mode enables the fastest way to read DPC+ registers.  Normal
    323 U1058							; reads use LDA Absolute addressing (LDA DF0DATA) which takes 4 cycles to
    324 U1058							; process.  Fast Fetch Mode intercepts LDA Immediate addressing (LDA #<DF0DATA)
    325 U1058							; which takes only 2 cycles!  Only immediate values < $28 are intercepted
    326 U1058							; 
    327 U1058							; set Fast Fetch Mode
    328 U1058							;	LDA #0
    329 U1058							;	STA FASTFETCH
    330 U1058							;
    331 U1058							; then use immediate mode to read the registers, takes just 5 cycles to update
    332 U1058							; any TIA register
    333 U1058							;
    334 U1058							;	LDA #<DF0DATA
    335 U1058							;	STA GRP0
    336 U1058							;
    337 U1058							; when done, turn off Fast Fetch Mode using any non-zero value
    338 U1058							;	LDA #$FF
    339 U1058							;	STA FASTFETCH
    340 U1058							;
    341 U1058							; NOTE: if you forget to turn off FASTFETCH mode, then code like this will not
    342 U1058							;	 work as you expect
    343 U1058							;	LDA #0	; returns a RANDOM NUMBER, not 0.
    344 U1058							;	STA COLUPF
    345 U1058							;----------------------------------------
    346 U1058		       00	   FASTFETCH  DS	1	; $58
    347 U1059
    348 U1059							;----------------------------------------
    349 U1059							; Function Support
    350 U1059							;----------------------------------------
    351 U1059							; Currently only Function 255 is defined, and it is used to call user
    352 U1059							; written ARM routines (or C code compiled for the ARM processor.)
    353 U1059							;
    354 U1059							; PARAMETER is not used by function 255, it may be used by future functions.
    355 U1059							; 
    356 U1059							; call custom ARM routine
    357 U1059							;	LDA #$FF
    358 U1059							;	STA CALLFUNCTION
    359 U1059							;
    360 U1059							; A custom ARM demo will be released in the near future
    361 U1059							;----------------------------------------
    362 U1059		       00	   PARAMETER  DS	1	; $59
    363 U105a		       00	   CALLFUNCTION DS	1	; $5A
    364 U105b
    365 U105b							;----------------------------------------
    366 U105b							; Reserved
    367 U105b							;----------------------------------------
    368 U105b		       00		      DS	1	; $5B	 ; reserved
    369 U105c		       00		      DS	1	; $5C	 ; reserved
    370 U105d
    371 U105d							;----------------------------------------
    372 U105d							; Waveforms
    373 U105d							;----------------------------------------
    374 U105d							; Waveforms are 32 byte tables that define a waveform.  Waveforms must be 32
    375 U105d							; byte aligned, and can only be stored in the 4K Display Data Bank. You MUST
    376 U105d							; define an "OFF" waveform,  comprised of all zeros.  The sum of all waveforms
    377 U105d							; being played should be <= 15, so typically you'll use a maximum of 5 for any
    378 U105d							; given value.
    379 U105d							;
    380 U105d							; Valid values are 0-127 and point to the 4K Display Data bank.  The formula
    381 U105d							; (* & $1fff)/32 as shown below will calculate the value for you
    382 U105d							;
    383 U105d							;
    384 U105d							; example waveforms
    385 U105d							;	align 32		; forces the waveform to a 32 byte boundary
    386 U105d							;SOUND_OFF = (* & $1fff)/32	; calculates waveform pointer
    387 U105d							;	.byte 0,0,0,0,0,0,0,0
    388 U105d							;	.byte 0,0,0,0,0,0,0,0
    389 U105d							;	.byte 0,0,0,0,0,0,0,0
    390 U105d							;	.byte 0,0,0,0,0,0,0,0 
    391 U105d							; 
    392 U105d							;	align 32
    393 U105d							;SINE_WAVE = (* & $1fff)/32
    394 U105d							;	.byte 3,3,3,4,4,5,5,5
    395 U105d							;	.byte 5,5,5,5,4,4,3,3
    396 U105d							;	.byte 3,2,2,1,1,0,0,0
    397 U105d							;	.byte 0,0,0,0,1,1,2,2 
    398 U105d							;
    399 U105d							; usage, set voice 0 to Sine Wave, set voice 1 & 2 off
    400 U105d							;	LDA #SINE_WAVE
    401 U105d							;	STA WAVEFORM0
    402 U105d							;	LDA #SOUND_OFF
    403 U105d							;	STA WAVEFORM1
    404 U105d							;	STA WAVEFORM2	
    405 U105d							;----------------------------------------
    406 U105d		       00	   WAVEFORM0  DS	1	; $5D
    407 U105e		       00	   WAVEFORM1  DS	1	; $5E
    408 U105f		       00	   WAVEFORM2  DS	1	; $5F
    409 U1060
    410 U1060							;----------------------------------------
    411 U1060							; Data Fetcher Push (stack)
    412 U1060							;----------------------------------------
    413 U1060							; The Data Fetchers can also be used to update the contents of the 4K
    414 U1060							; Display Data bank.  Point the Data Fetcher to the data to change,
    415 U1060							; then Push to it.  The Data Fetcher's pointer will be decremented BEFORE
    416 U1060							; the data is written.
    417 U1060							;
    418 U1060							; point Data Fetcher 1 to the sprite data
    419 U1060							;	lda #<DisplayData
    420 U1060							;	sta DF1LOW
    421 U1060							;	lda #>DisplayData
    422 U1060							;	sta DF1HI 
    423 U1060							;
    424 U1060							; then update it
    425 U1060							;	LDA #$FF
    426 U1060							;	STA DF1PUSH ; changes data at DisplayData - 1
    427 U1060							;	LDA #$81
    428 U1060							;	STA DF1OUSH ; changes data at DisplayData - 2
    429 U1060							;----------------------------------------
    430 U1060		       00	   DF0PUSH    DS	1	; $60
    431 U1061		       00	   DF1PUSH    DS	1	; $61
    432 U1062		       00	   DF2PUSH    DS	1	; $62
    433 U1063		       00	   DF3PUSH    DS	1	; $63
    434 U1064		       00	   DF4PUSH    DS	1	; $64
    435 U1065		       00	   DF5PUSH    DS	1	; $65
    436 U1066		       00	   DF6PUSH    DS	1	; $66
    437 U1067		       00	   DF7PUSH    DS	1	; $67
    438 U1068
    439 U1068							;----------------------------------------
    440 U1068							; Data Fetcher, High Pointer
    441 U1068							;----------------------------------------
    442 U1068							; These are used in conjunction with DFxLOW to point a Data Fetcher to the data
    443 U1068							; to read.  For usage, see "Data Fetcher" in SECTION 1.
    444 U1068							;----------------------------------------
    445 U1068		       00	   DF0HI      DS	1	; $68
    446 U1069		       00	   DF1HI      DS	1	; $69
    447 U106a		       00	   DF2HI      DS	1	; $6A
    448 U106b		       00	   DF3HI      DS	1	; $6B
    449 U106c		       00	   DF4HI      DS	1	; $6C
    450 U106d		       00	   DF5HI      DS	1	; $6D 
    451 U106e		       00	   DF6HI      DS	1	; $6E 
    452 U106f		       00	   DF7HI      DS	1	; $6F 
    453 U1070
    454 U1070							;----------------------------------------
    455 U1070							; Random Number Initialization
    456 U1070							;----------------------------------------
    457 U1070							; The random number generate defaults to a value that spells out DPC+.
    458 U1070							; Store any value to RRESET to set the random number back to DPC+, or you
    459 U1070							; can use RWRITE0-3 to change the 32 bit value to anything you desire.
    460 U1070							;
    461 U1070							; reset random number
    462 U1070							;	LDA #0
    463 U1070							;	STA RRESET
    464 U1070							;
    465 U1070							; set a specific random number (spells out 2600)
    466 U1070							;	LDA #$32
    467 U1070							;	STA RWRITE0
    468 U1070							;	LDA #$36
    469 U1070							;	STA RWRITE1
    470 U1070							;	LDA #$30
    471 U1070							;	STA RWRITE2
    472 U1070							;	STA RWRITE3
    473 U1070							;
    474 U1070							; NOTE: do not set all 4 bytes to 0, as that will disable the generator.
    475 U1070							;----------------------------------------
    476 U1070		       00	   RRESET     DS	1	; $70
    477 U1071		       00	   RWRITE0    DS	1	; $71
    478 U1072		       00	   RWRITE1    DS	1	; $72
    479 U1073		       00	   RWRITE2    DS	1	; $73
    480 U1074		       00	   RWRITE3    DS	1	; $74
    481 U1075
    482 U1075							;----------------------------------------
    483 U1075							; Notes
    484 U1075							;----------------------------------------
    485 U1075							; These are used to select a value from the frequency table to play.
    486 U1075							; The default table, store in DPC_frequencies.h, only defines frequencies
    487 U1075							; for 1-88, which cover the keys of a piano.  You are free to add additional
    488 U1075							; frequencies from 88-255.  Piano keys are defined at the end of this file
    489 U1075							;
    490 U1075							; set voice 0 to middle C
    491 U1075							;	LDA #C4
    492 U1075							;	STA NOTE0
    493 U1075							;
    494 U1075							; Note: if you are using ARM USER CODE then you can only use notes to 128.
    495 U1075							;----------------------------------------
    496 U1075		       00	   NOTE0      DS	1	; $75
    497 U1076		       00	   NOTE1      DS	1	; $76
    498 U1077		       00	   NOTE2      DS	1	; $77
    499 U1078
    500 U1078							;----------------------------------------
    501 U1078							; Data Fetcher Write (queue)
    502 U1078							;----------------------------------------
    503 U1078							; The Data Fetchers can also be used to update the contents of the 4K
    504 U1078							; Display Data bank.  Point the Data Fetcher to the data to change,
    505 U1078							; then Write to it  The Data Fetcher's pointer will be incremented AFTER
    506 U1078							; the data is written.
    507 U1078							;
    508 U1078							; point Data Fetcher 1 to the sprite data
    509 U1078							;	lda #<SpriteData
    510 U1078							;	sta DF1LOW
    511 U1078							;	lda #>SpriteData
    512 U1078							;	sta DF1HI 
    513 U1078							;
    514 U1078							; then update it
    515 U1078							;	LDA #$FF
    516 U1078							;	STA DF1WRITE ; changes data at SpriteData
    517 U1078							;	LDA #$81
    518 U1078							;	STA DF1WRITE ; changes data at SpriteData + 1
    519 U1078							;----------------------------------------
    520 U1078		       00	   DF0WRITE   DS	1	; $78
    521 U1079		       00	   DF1WRITE   DS	1	; $79
    522 U107a		       00	   DF2WRITE   DS	1	; $7A
    523 U107b		       00	   DF3WRITE   DS	1	; $7B
    524 U107c		       00	   DF4WRITE   DS	1	; $7C
    525 U107d		       00	   DF5WRITE   DS	1	; $7D
    526 U107e		       00	   DF6WRITE   DS	1	; $7E
    527 U107f		       00	   DF7WRITE   DS	1	; $7F
    528 U1080
    529 U1080							;-------------------------------------------------------------------------------
    530 U1080							; The following required for back-compatibility with code which does not use
    531 U1080							; segments.
    532 U1080
    533  8400 ????				      SEG
------- FILE c:\Users\tazrog\Documents\Atari\BrawdyBAS\brawdy.bas.asm
------- FILE DPCplusbB.h LEVEL 2 PASS 4
      0  8400 ????				      include	"DPCplusbB.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3 U00f5 ????				      SEG.U	vars
      4 U0080					      org	$80
      5 U0080		       00	   player0x   ds	1
      6 U0081		       00	   topP1x     ds	1
      7 U0082		       00	   missile0x  ds	1
      8 U0083		       00	   missile1x  ds	1
      9 U0084		       00	   ballx      ds	1
     10 U0085
     11 U0085		       00 00 00 00*SpriteGfxIndex ds	9
     12 U008e
     13 U008e		       00	   spritedisplay ds	1
     14 U008f
     15 U008f		       00	   player0xcoll ds	1	; to detect p0x colls
     16 U0090		       00	   NewSpriteX ds	1	;		X position
     17 U0090		       00 90	   player1x   =	NewSpriteX
     18 U0091		       00	   player2x   ds	1
     19 U0092		       00	   player3x   ds	1
     20 U0093		       00	   player4x   ds	1
     21 U0094		       00	   player5x   ds	1
     22 U0095		       00	   player6x   ds	1
     23 U0096		       00	   player7x   ds	1
     24 U0097		       00	   player8x   ds	1
     25 U0098		       00	   player9x   ds	1
     26 U0099
     27 U0099		       00	   player0y   ds	1
     28 U009a		       00	   NewSpriteY ds	1	;		Y position
     29 U009a		       00 9a	   player1y   =	NewSpriteY
     30 U009b		       00	   player2y   ds	1
     31 U009c		       00	   player3y   ds	1
     32 U009d		       00	   player4y   ds	1
     33 U009e		       00	   player5y   ds	1
     34 U009f		       00	   player6y   ds	1
     35 U00a0		       00	   player7y   ds	1
     36 U00a1		       00	   player8y   ds	1
     37 U00a2		       00	   player9y   ds	1
     38 U00a3
     39 U00a3		       00 00	   player0color ds	2
     40 U00a5
     41 U00a5		       00	   player0height ds	1
     42 U00a6		       00	   player1height ds	1
     43 U00a7		       00	   player2height ds	1
     44 U00a8		       00	   player3height ds	1
     45 U00a9		       00	   player4height ds	1
     46 U00aa		       00	   player5height ds	1
     47 U00ab		       00	   player6height ds	1
     48 U00ac		       00	   player7height ds	1
     49 U00ad		       00	   player8height ds	1
     50 U00ae		       00	   player9height ds	1
     51 U00af
     52 U00af		       00	   _NUSIZ1    ds	1
     53 U00b0		       00	   NUSIZ2     ds	1
     54 U00b1		       00	   NUSIZ3     ds	1
     55 U00b2		       00	   NUSIZ4     ds	1
     56 U00b3		       00	   NUSIZ5     ds	1
     57 U00b4		       00	   NUSIZ6     ds	1
     58 U00b5		       00	   NUSIZ7     ds	1
     59 U00b6		       00	   NUSIZ8     ds	1
     60 U00b7		       00	   NUSIZ9     ds	1
     61 U00b8
     62 U00b8		       00 00 00    score      ds	3
     63 U00bb		       00	   COLUM0     ds	1
     64 U00bc		       00	   COLUM1     ds	1
     65 U00bd		       00	   player0pointerlo ds	1
     66 U00be		       00	   player0pointerhi ds	1
     67 U00bf
     68 U00bf		       00 85	   RAMcopybegin =	SpriteGfxIndex
     69 U00bf		       00 3a	   RAMcopylength =	*-RAMcopybegin
     70 U00bf
     71 U00bf		       00	   missile0y  ds	1
     72 U00c0		       00	   missile1y  ds	1
     73 U00c1		       00	   bally      ds	1
     74 U00c2
     75 U00c2		       00	   missile0height ds	1
     76 U00c3		       00	   missile1height ds	1
     77 U00c4		       00	   ballheight ds	1
     78 U00c5
     79 U00c5		       00	   statusbarlength ds	1	; needed?
     80 U00c5		       00 c5	   aux3       =	statusbarlength
     81 U00c6
     82 U00c6		       00	   lifecolor  ds	1
     83 U00c6		       00 c6	   pfscorecolor =	lifecolor
     84 U00c7		       00	   aux4       ds	1
     85 U00c8
     86 U00c8		       00	   lifepointer ds	1
     87 U00c9		       00	   lives      ds	1
     88 U00c9		       00 c8	   pfscore1   =	lifepointer
     89 U00c9		       00 c9	   pfscore2   =	lives
     90 U00c9		       00 c8	   aux5       =	pfscore1
     91 U00c9		       00 c9	   aux6       =	pfscore2
     92 U00ca
     93 U00ca		       00	   playfieldpos ds	1
     94 U00cb
     95 U00cb		       00	   temp1      ds	1	; used in sprite flickering
     96 U00cc		       00	   temp2      ds	1	;are obliterated when drawscreen is called.
     97 U00cd		       00	   temp3      ds	1
     98 U00ce		       00	   temp4      ds	1
     99 U00cf		       00	   temp5      ds	1
    100 U00d0		       00	   temp6      ds	1
    101 U00d0		       00 81	   temp7      =	topP1x	; This is used to aid in bankswitching
    102 U00d1
    103 U00d1		       00	   A	      ds	1
    104 U00d1		       00 d1	   a	      =	A
    105 U00d2		       00	   B	      ds	1
    106 U00d2		       00 d2	   b	      =	B
    107 U00d3		       00	   C	      ds	1
    108 U00d3		       00 d3	   c	      =	C
    109 U00d4		       00	   D	      ds	1
    110 U00d4		       00 d4	   d	      =	D
    111 U00d5		       00	   E	      ds	1
    112 U00d5		       00 d5	   e	      =	E
    113 U00d6		       00	   F	      ds	1
    114 U00d6		       00 d6	   f	      =	F
    115 U00d7		       00	   G	      ds	1
    116 U00d7		       00 d7	   g	      =	G
    117 U00d8		       00	   H	      ds	1
    118 U00d8		       00 d8	   h	      =	H
    119 U00d9		       00	   I	      ds	1
    120 U00d9		       00 d9	   i	      =	I
    121 U00da		       00	   J	      ds	1
    122 U00da		       00 da	   j	      =	J
    123 U00db		       00	   K	      ds	1
    124 U00db		       00 db	   k	      =	K
    125 U00dc		       00	   L	      ds	1
    126 U00dc		       00 dc	   l	      =	L
    127 U00dd		       00	   M	      ds	1
    128 U00dd		       00 dd	   m	      =	M
    129 U00de		       00	   N	      ds	1
    130 U00de		       00 de	   n	      =	N
    131 U00df		       00	   O	      ds	1
    132 U00df		       00 df	   o	      =	O
    133 U00e0		       00	   P	      ds	1
    134 U00e0		       00 e0	   p	      =	P
    135 U00e1		       00	   Q	      ds	1
    136 U00e1		       00 e1	   q	      =	Q
    137 U00e2		       00	   R	      ds	1
    138 U00e2		       00 e2	   r	      =	R
    139 U00e3		       00	   S	      ds	1
    140 U00e3		       00 e3	   s	      =	S
    141 U00e4		       00	   T	      ds	1
    142 U00e4		       00 e4	   t	      =	T
    143 U00e5		       00	   U	      ds	1
    144 U00e5		       00 e5	   u	      =	U
    145 U00e6		       00	   V	      ds	1
    146 U00e6		       00 e6	   v	      =	V
    147 U00e7		       00	   W	      ds	1
    148 U00e7		       00 e7	   w	      =	W
    149 U00e8		       00	   X	      ds	1
    150 U00e8		       00 e8	   x	      =	X
    151 U00e9		       00	   Y	      ds	1
    152 U00e9		       00 e9	   y	      =	Y
    153 U00ea		       00	   Z	      ds	1
    154 U00ea		       00 ea	   z	      =	Z
    155 U00eb		       00	   scorecolor ds	1
    156 U00ec
    157 U00ec		       00	   var0       ds	1
    158 U00ed		       00	   var1       ds	1
    159 U00ee		       00	   var2       ds	1
    160 U00ef		       00	   var3       ds	1
    161 U00f0		       00	   var4       ds	1
    162 U00f1		       00	   var5       ds	1
    163 U00f2		       00	   var6       ds	1
    164 U00f3		       00	   var7       ds	1
    165 U00f4		       00	   var8       ds	1
    166 U00f5
 free ram: 0
    167 U00f5					      echo	"free ram:",($f5-*)d
    168 U00f5
    169 U00f5		       00 f6	   stack1     =	$f6
    170 U00f5		       00 f7	   stack2     =	$f7
    171 U00f5		       00 f8	   stack3     =	$f8
    172 U00f5		       00 f9	   stack4     =	$f9
    173 U00f5							; the stack bytes above may be used in the kernel
    174 U00f5							; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    175 U00f5
    176 U00f5					      MAC	return
    177 U00f5					      ifnconst	bankswitch
    178 U00f5					      rts
    179 U00f5					      else
    180 U00f5					      jmp	BS_return
    181 U00f5					      endif
    182 U00f5					      ENDM		; auto-return from either a regular or bankswitched module
    183  8400 ????				      seg
    184  8400 ????	       10 00	   rand       =	RANDOM0NEXT
    185  8400 ????	       00 d3	   KERNEL_LINES =	178*76/64	; warning: not all values will work
    186  8400 ????	       00 a7	   OVERSCAN_LINES =	128+33*76/64	; again, not all values work
    187  8400 ????	       d1 a4	   C_function =	FETCHER_BEGIN
    188  8400 ????	       d1 a8	   CcodeData  =	C_function + 4
    189  8400 ????	       d1 e2	   playerpointers =	CcodeData + RAMcopylength
    190  8400 ????	       d2 08	   P1GFX      =	playerpointers + 38
    191  8400 ????	       d3 08	   P1COLOR    =	P1GFX + 256
    192  8400 ????	       d4 08	   P0GFX      =	P1COLOR + 256
    193  8400 ????	       d5 08	   P0COLOR    =	P0GFX + 256
    194  8400 ????	       d6 08	   PF1L       =	P0COLOR + 256
    195  8400 ????	       d7 08	   PF2L       =	PF1L + 256
    196  8400 ????	       d8 08	   PF1R       =	PF2L + 256
    197  8400 ????	       d9 08	   PF2R       =	PF1R + 256
    198  8400 ????	       da 08	   PFCOLS     =	PF2R + 256
    199  8400 ????	       db 08	   JUMPTABLELO =	PFCOLS + 256
    200  8400 ????	       db 14	   JUMPTABLEHI =	JUMPTABLELO + 12
    201  8400 ????	       db 20	   P1HMP      =	JUMPTABLEHI + 12
    202  8400 ????	       db 2d	   P1SKIP     =	P1HMP + 13
    203  8400 ????	       db 39	   NUSIZREFP  =	P1SKIP + 12
    204  8400 ????	       db 45	   scoredata  =	NUSIZREFP + 12
    205  8400 ????	       db a5	   BKCOLS     =	scoredata + 96
    206  8400 ????	       dc a5	   STACKbegin =	BKCOLS + 256
    207  8400 ????	       dd a5	   USERSTACK  =	STACKbegin + 256	; stack starts here and goes down!!!!
 DPC free RAM= 603
    208  8400 ????				      echo	"DPC free RAM=",($1000-(USERSTACK&$0FFF))d
------- FILE c:\Users\tazrog\Documents\Atari\BrawdyBAS\brawdy.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 4
      0  8400 ????				      include	"2600basic_variable_redefs.h"
      1  8400 ????						; This file contains variable mapping and other information for the current project.
      2  8400 ????
      3  8400 ????	       00 b8	   sc1	      =	score
      4  8400 ????
      5  8400 ????	       00 d5	   PlayerHealth =	e
      6  8400 ????
      7  8400 ????	       00 e2	   splitKernelVar =	r
      8  8400 ????
      9  8400 ????	       00 e6	   swdebounce =	v
     10  8400 ????
     11  8400 ????	       00 e5	   gamenumber =	u
     12  8400 ????
     13  8400 ????	       00 dd	   PlayerDamage =	m
     14  8400 ????
     15  8400 ????	       00 ea	   Bit0_NewLevel =	z
     16  8400 ????
     17  8400 ????	       00 ea	   Bit5_hit   =	z
     18  8400 ????
     19  8400 ????	       00 e9	   Ch0_Counter =	y
     20  8400 ????
     21  8400 ????	       00 e8	   Ch0_Duration =	x
     22  8400 ????
     23  8400 ????	       00 e7	   Ch0_Sound  =	w
     24  8400 ????
     25  8400 ????	       00 e6	   V0	      =	v
     26  8400 ????
     27  8400 ????	       00 e0	   Ch1_Counter =	p
     28  8400 ????
     29  8400 ????	       00 db	   Ch1_Duration =	k
     30  8400 ????
     31  8400 ????	       00 da	   Ch1_Sound  =	j
     32  8400 ????
     33  8400 ????	       00 d8	   V1	      =	h
     34  8400 ????
     35  8400 ????	       00 e3	   LEdge      =	s
     36  8400 ????
     37  8400 ????	       00 d7	   REdge      =	g
     38  8400 ????
     39  8400 ????	       00 ea	   Bit4_gameover =	z
     40  8400 ????
     41  8400 ????	       00 e4	   Timer      =	t
     42  8400 ????
     43  8400 ????	       00 e1	   Househit   =	q
     44  8400 ????
     45  8400 ????	       00 ea	   Bit3_ShootorNot =	z
     46  8400 ????
     47  8400 ????	       00 df	   delay      =	o
     48  8400 ????
     49  8400 ????	       00 de	   HealthDrop =	n
     50  8400 ????
     51  8400 ????	       00 ea	   Bit1_missleOn =	z
     52  8400 ????
     53  8400 ????	       00 dc	   level      =	l
     54  8400 ????
     55  8400 ????	       00 ea	   Bit2_EnemyMove =	z
     56  8400 ????
     57  8400 ????	       00 d6	   frame      =	f
     58  8400 ????
     59  8400 ????	       00 d4	   Points     =	d
     60  8400 ????
     61  8400 ????	       00 d3	   EnemySpeed =	c
     62  8400 ????
     63  8400 ????	       00 d2	   Moverate   =	b
     64  8400 ????
     65  8400 ????	       00 d1	   drop       =	a
     66  8400 ????
     67  8400 ????	       00 d9	   EnemyHit   =	i
     68  8400 ????
     69  8400 ????	       00 00	   SPLIT_KERN_BIT =	BIT_7
     70  8400 ????
     71  8400 ????	       00 01	   splitscore_2_4 =	1
     72  8400 ????
     73  8400 ????	       00 96	   _P_Edge_Right =	150
     74  8400 ????
     75  8400 ????	       00 00	   _P_Edge_Left =	0
     76  8400 ????
     77  8400 ????	       00 a0	   _P_Edge_Bottom =	160
     78  8400 ????
     79  8400 ????	       00 09	   _P_Edge_Top =	9
     80  8400 ????
     81  8400 ????	       00 20	   bscode_length =	32
     82  8400 ????	       00 fe	   _FE	      =	$FE
     83  8400 ????
     84  8400 ????	       00 fc	   _FC	      =	$FC
     85  8400 ????
     86  8400 ????	       00 fa	   _FA	      =	$FA
     87  8400 ????
     88  8400 ????	       00 f8	   _F8	      =	$F8
     89  8400 ????
     90  8400 ????	       00 f6	   _F6	      =	$F6
     91  8400 ????
     92  8400 ????	       00 f4	   _F4	      =	$F4
     93  8400 ????
     94  8400 ????	       00 f2	   _F2	      =	$F2
     95  8400 ????
     96  8400 ????	       00 f0	   _F0	      =	$F0
     97  8400 ????
     98  8400 ????	       00 ee	   _EE	      =	$EE
     99  8400 ????
    100  8400 ????	       00 ec	   _EC	      =	$EC
    101  8400 ????
    102  8400 ????	       00 ea	   _EA	      =	$EA
    103  8400 ????
    104  8400 ????	       00 e8	   _E8	      =	$E8
    105  8400 ????
    106  8400 ????	       00 e6	   _E6	      =	$E6
    107  8400 ????
    108  8400 ????	       00 e4	   _E4	      =	$E4
    109  8400 ????
    110  8400 ????	       00 e2	   _E2	      =	$E2
    111  8400 ????
    112  8400 ????	       00 e0	   _E0	      =	$E0
    113  8400 ????
    114  8400 ????	       00 de	   _DE	      =	$DE
    115  8400 ????
    116  8400 ????	       00 dc	   _DC	      =	$DC
    117  8400 ????
    118  8400 ????	       00 da	   _DA	      =	$DA
    119  8400 ????
    120  8400 ????	       00 d8	   _D8	      =	$D8
    121  8400 ????
    122  8400 ????	       00 d6	   _D6	      =	$D6
    123  8400 ????
    124  8400 ????	       00 d4	   _D4	      =	$D4
    125  8400 ????
    126  8400 ????	       00 d2	   _D2	      =	$D2
    127  8400 ????
    128  8400 ????	       00 d0	   _D0	      =	$D0
    129  8400 ????
    130  8400 ????	       00 ce	   _CE	      =	$CE
    131  8400 ????
    132  8400 ????	       00 cc	   _CC	      =	$CC
    133  8400 ????
    134  8400 ????	       00 ca	   _CA	      =	$CA
    135  8400 ????
    136  8400 ????	       00 c8	   _C8	      =	$C8
    137  8400 ????
    138  8400 ????	       00 c6	   _C6	      =	$C6
    139  8400 ????
    140  8400 ????	       00 c4	   _C4	      =	$C4
    141  8400 ????
    142  8400 ????	       00 c2	   _C2	      =	$C2
    143  8400 ????
    144  8400 ????	       00 c0	   _C0	      =	$C0
    145  8400 ????
    146  8400 ????	       00 be	   _BE	      =	$BE
    147  8400 ????
    148  8400 ????	       00 bc	   _BC	      =	$BC
    149  8400 ????
    150  8400 ????	       00 ba	   _BA	      =	$BA
    151  8400 ????
    152  8400 ????	       00 b8	   _B8	      =	$B8
    153  8400 ????
    154  8400 ????	       00 b6	   _B6	      =	$B6
    155  8400 ????
    156  8400 ????	       00 b4	   _B4	      =	$B4
    157  8400 ????
    158  8400 ????	       00 b2	   _B2	      =	$B2
    159  8400 ????
    160  8400 ????	       00 b0	   _B0	      =	$B0
    161  8400 ????
    162  8400 ????	       00 ae	   _AE	      =	$AE
    163  8400 ????
    164  8400 ????	       00 ac	   _AC	      =	$AC
    165  8400 ????
    166  8400 ????	       00 aa	   _AA	      =	$AA
    167  8400 ????
    168  8400 ????	       00 a8	   _A8	      =	$A8
    169  8400 ????
    170  8400 ????	       00 a6	   _A6	      =	$A6
    171  8400 ????
    172  8400 ????	       00 a4	   _A4	      =	$A4
    173  8400 ????
    174  8400 ????	       00 a2	   _A2	      =	$A2
    175  8400 ????
    176  8400 ????	       00 a0	   _A0	      =	$A0
    177  8400 ????
    178  8400 ????	       00 9e	   _9E	      =	$9E
    179  8400 ????
    180  8400 ????	       00 9c	   _9C	      =	$9C
    181  8400 ????
    182  8400 ????	       00 9a	   _9A	      =	$9A
    183  8400 ????
    184  8400 ????	       00 98	   _98	      =	$98
    185  8400 ????
    186  8400 ????	       00 96	   _96	      =	$96
    187  8400 ????
    188  8400 ????	       00 94	   _94	      =	$94
    189  8400 ????
    190  8400 ????	       00 92	   _92	      =	$92
    191  8400 ????
    192  8400 ????	       00 90	   _90	      =	$90
    193  8400 ????
    194  8400 ????	       00 8e	   _8E	      =	$8E
    195  8400 ????
    196  8400 ????	       00 8c	   _8C	      =	$8C
    197  8400 ????
    198  8400 ????	       00 8a	   _8A	      =	$8A
    199  8400 ????
    200  8400 ????	       00 88	   _88	      =	$88
    201  8400 ????
    202  8400 ????	       00 86	   _86	      =	$86
    203  8400 ????
    204  8400 ????	       00 84	   _84	      =	$84
    205  8400 ????
    206  8400 ????	       00 82	   _82	      =	$82
    207  8400 ????
    208  8400 ????	       00 80	   _80	      =	$80
    209  8400 ????
    210  8400 ????	       00 7e	   _7E	      =	$7E
    211  8400 ????
    212  8400 ????	       00 7c	   _7C	      =	$7C
    213  8400 ????
    214  8400 ????	       00 7a	   _7A	      =	$7A
    215  8400 ????
    216  8400 ????	       00 78	   _78	      =	$78
    217  8400 ????
    218  8400 ????	       00 76	   _76	      =	$76
    219  8400 ????
    220  8400 ????	       00 74	   _74	      =	$74
    221  8400 ????
    222  8400 ????	       00 72	   _72	      =	$72
    223  8400 ????
    224  8400 ????	       00 70	   _70	      =	$70
    225  8400 ????
    226  8400 ????	       00 6e	   _6E	      =	$6E
    227  8400 ????
    228  8400 ????	       00 6c	   _6C	      =	$6C
    229  8400 ????
    230  8400 ????	       00 6a	   _6A	      =	$6A
    231  8400 ????
    232  8400 ????	       00 68	   _68	      =	$68
    233  8400 ????
    234  8400 ????	       00 66	   _66	      =	$66
    235  8400 ????
    236  8400 ????	       00 64	   _64	      =	$64
    237  8400 ????
    238  8400 ????	       00 62	   _62	      =	$62
    239  8400 ????
    240  8400 ????	       00 60	   _60	      =	$60
    241  8400 ????
    242  8400 ????	       00 5e	   _5E	      =	$5E
    243  8400 ????
    244  8400 ????	       00 5c	   _5C	      =	$5C
    245  8400 ????
    246  8400 ????	       00 5a	   _5A	      =	$5A
    247  8400 ????
    248  8400 ????	       00 58	   _58	      =	$58
    249  8400 ????
    250  8400 ????	       00 56	   _56	      =	$56
    251  8400 ????
    252  8400 ????	       00 54	   _54	      =	$54
    253  8400 ????
    254  8400 ????	       00 52	   _52	      =	$52
    255  8400 ????
    256  8400 ????	       00 50	   _50	      =	$50
    257  8400 ????
    258  8400 ????	       00 4e	   _4E	      =	$4E
    259  8400 ????
    260  8400 ????	       00 4c	   _4C	      =	$4C
    261  8400 ????
    262  8400 ????	       00 4a	   _4A	      =	$4A
    263  8400 ????
    264  8400 ????	       00 48	   _48	      =	$48
    265  8400 ????
    266  8400 ????	       00 46	   _46	      =	$46
    267  8400 ????
    268  8400 ????	       00 44	   _44	      =	$44
    269  8400 ????
    270  8400 ????	       00 42	   _42	      =	$42
    271  8400 ????
    272  8400 ????	       00 40	   _40	      =	$40
    273  8400 ????
    274  8400 ????	       00 3e	   _3E	      =	$3E
    275  8400 ????
    276  8400 ????	       00 3c	   _3C	      =	$3C
    277  8400 ????
    278  8400 ????	       00 3a	   _3A	      =	$3A
    279  8400 ????
    280  8400 ????	       00 38	   _38	      =	$38
    281  8400 ????
    282  8400 ????	       00 36	   _36	      =	$36
    283  8400 ????
    284  8400 ????	       00 34	   _34	      =	$34
    285  8400 ????
    286  8400 ????	       00 32	   _32	      =	$32
    287  8400 ????
    288  8400 ????	       00 30	   _30	      =	$30
    289  8400 ????
    290  8400 ????	       00 2e	   _2E	      =	$2E
    291  8400 ????
    292  8400 ????	       00 2c	   _2C	      =	$2C
    293  8400 ????
    294  8400 ????	       00 2a	   _2A	      =	$2A
    295  8400 ????
    296  8400 ????	       00 28	   _28	      =	$28
    297  8400 ????
    298  8400 ????	       00 26	   _26	      =	$26
    299  8400 ????
    300  8400 ????	       00 24	   _24	      =	$24
    301  8400 ????
    302  8400 ????	       00 22	   _22	      =	$22
    303  8400 ????
    304  8400 ????	       00 20	   _20	      =	$20
    305  8400 ????
    306  8400 ????	       00 1e	   _1E	      =	$1E
    307  8400 ????
    308  8400 ????	       00 1c	   _1C	      =	$1C
    309  8400 ????
    310  8400 ????	       00 1a	   _1A	      =	$1A
    311  8400 ????
    312  8400 ????	       00 18	   _18	      =	$18
    313  8400 ????
    314  8400 ????	       00 16	   _16	      =	$16
    315  8400 ????
    316  8400 ????	       00 14	   _14	      =	$14
    317  8400 ????
    318  8400 ????	       00 12	   _12	      =	$12
    319  8400 ????
    320  8400 ????	       00 10	   _10	      =	$10
    321  8400 ????
    322  8400 ????	       00 0e	   _0E	      =	$0E
    323  8400 ????
    324  8400 ????	       00 0c	   _0C	      =	$0C
    325  8400 ????
    326  8400 ????	       00 0a	   _0A	      =	$0A
    327  8400 ????
    328  8400 ????	       00 08	   _08	      =	$08
    329  8400 ????
    330  8400 ????	       00 06	   _06	      =	$06
    331  8400 ????
    332  8400 ????	       00 04	   _04	      =	$04
    333  8400 ????
    334  8400 ????	       00 02	   _02	      =	$02
    335  8400 ????
    336  8400 ????	       00 00	   _00	      =	$00
    337  8400 ????
    338  8400 ????	       00 05	   font       =	retroputer
    339  8400 ????
    340  8400 ????	       00 2b	   vblank_time =	43
    341  8400 ????	       00 25	   overscan_time =	37
    342  8400 ????	       00 07	   bs_mask    =	7
    343  8400 ????	       00 1c	   bankswitch =	28
    344  8400 ????	       1f f6	   bankswitch_hotspot =	$1FF6
    345  8400 ????	       00 02	   multisprite =	2
------- FILE c:\Users\tazrog\Documents\Atari\BrawdyBAS\brawdy.bas.asm
      9  0400					      ORG	$400
     10  0400					      RORG	$0
     11  0400					      incbin	DPCplus.arm
     12  1000					      ORG	$1000
     13  1000					      RORG	$1000
     14  1000					      incbin	custom/bin/custom2.bin
     15  1894							; assume custom2.bin > 128 bytes
     16  1894							; repeat $80
     17  1894							; .byte 0
     18  1894							; repend
     19  1894							; Provided under the CC0 license. See the included LICENSE.txt for details.
     20  1894
     21  1894							; feel free to modify the score graphics - just keep each digit 8 high
     22  1894							; and keep the conditional compilation stuff intact
     23  1894				  -	      ifconst	ROM2k
     24  1894				  -	      ORG	$F7AC-8
     25  1894					      else
     26  1894					      ifconst	bankswitch
     27  1894				  -	      if	bankswitch == 8
     28  1894				  -	      ORG	$2F94-bscode_length
     29  1894				  -	      RORG	$FF94-bscode_length
     30  1894					      endif
     31  1894				  -	      if	bankswitch == 16
     32  1894				  -	      ORG	$4F94-bscode_length
     33  1894				  -	      RORG	$FF94-bscode_length
     34  1894					      endif
     35  1894				  -	      if	bankswitch == 32
     36  1894				  -	      ORG	$8F94-bscode_length
     37  1894				  -	      RORG	$FF94-bscode_length
     38  1894					      endif
     39  1894				  -	      if	bankswitch == 64
     40  1894				  -	      ORG	$10F80-bscode_length
     41  1894				  -	      RORG	$1FF80-bscode_length
     42  1894					      endif
     43  1894				  -	      else
     44  1894				  -	      ORG	$FF9C
     45  1894					      endif
     46  1894					      endif
     47  1894
     48  1894							; font equates
     49  1894		       00 01	   .21stcentury =	1
     50  1894		       00 02	   alarmclock =	2
     51  1894		       00 03	   handwritten =	3
     52  1894		       00 04	   interrupted =	4
     53  1894		       00 05	   retroputer =	5
     54  1894		       00 06	   whimsey    =	6
     55  1894		       00 07	   tiny       =	7
     56  1894		       00 08	   hex	      =	8
     57  1894
     58  1894					      ifconst	font
     59  1894				  -	      if	font == hex
     60  1894				  -	      ORG	. - 48
     61  1894					      endif
     62  1894					      endif
     63  1894
     64  1894				   scoretable
     65  1894
     66  1894					      ifconst	font
     67  1894				  -	      if	font == .21stcentury
     68  1894				  -	      include	"score_graphics.asm.21stcentury"
     69  1894					      endif
     70  1894				  -	      if	font == alarmclock
     71  1894				  -	      include	"score_graphics.asm.alarmclock"
     72  1894					      endif
     73  1894				  -	      if	font == handwritten
     74  1894				  -	      include	"score_graphics.asm.handwritten"
     75  1894					      endif
     76  1894				  -	      if	font == interrupted
     77  1894				  -	      include	"score_graphics.asm.interrupted"
     78  1894					      endif
     79  1894					      if	font == retroputer
------- FILE score_graphics.asm.retroputer LEVEL 2 PASS 4
      0  1894					      include	"score_graphics.asm.retroputer"
      1  1894							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  1894
      3  1894		       7e		      .byte.b	%01111110
      4  1895		       46		      .byte.b	%01000110
      5  1896		       46		      .byte.b	%01000110
      6  1897		       46		      .byte.b	%01000110
      7  1898		       62		      .byte.b	%01100010
      8  1899		       62		      .byte.b	%01100010
      9  189a		       62		      .byte.b	%01100010
     10  189b		       7e		      .byte.b	%01111110
     11  189c
     12  189c		       38		      .byte.b	%00111000
     13  189d		       38		      .byte.b	%00111000
     14  189e		       38		      .byte.b	%00111000
     15  189f		       38		      .byte.b	%00111000
     16  18a0		       18		      .byte.b	%00011000
     17  18a1		       18		      .byte.b	%00011000
     18  18a2		       18		      .byte.b	%00011000
     19  18a3		       18		      .byte.b	%00011000
     20  18a4
     21  18a4		       7e		      .byte.b	%01111110
     22  18a5		       60		      .byte.b	%01100000
     23  18a6		       60		      .byte.b	%01100000
     24  18a7		       60		      .byte.b	%01100000
     25  18a8		       3e		      .byte.b	%00111110
     26  18a9		       02		      .byte.b	%00000010
     27  18aa		       42		      .byte.b	%01000010
     28  18ab		       7e		      .byte.b	%01111110
     29  18ac
     30  18ac		       7e		      .byte.b	%01111110
     31  18ad		       46		      .byte.b	%01000110
     32  18ae		       06		      .byte.b	%00000110
     33  18af		       06		      .byte.b	%00000110
     34  18b0		       3e		      .byte.b	%00111110
     35  18b1		       02		      .byte.b	%00000010
     36  18b2		       42		      .byte.b	%01000010
     37  18b3		       7e		      .byte.b	%01111110
     38  18b4
     39  18b4		       0c		      .byte.b	%00001100
     40  18b5		       0c		      .byte.b	%00001100
     41  18b6		       0c		      .byte.b	%00001100
     42  18b7		       7e		      .byte.b	%01111110
     43  18b8		       44		      .byte.b	%01000100
     44  18b9		       44		      .byte.b	%01000100
     45  18ba		       44		      .byte.b	%01000100
     46  18bb		       04		      .byte.b	%00000100
     47  18bc
     48  18bc		       7e		      .byte.b	%01111110
     49  18bd		       46		      .byte.b	%01000110
     50  18be		       06		      .byte.b	%00000110
     51  18bf		       06		      .byte.b	%00000110
     52  18c0		       7c		      .byte.b	%01111100
     53  18c1		       40		      .byte.b	%01000000
     54  18c2		       40		      .byte.b	%01000000
     55  18c3		       7e		      .byte.b	%01111110
     56  18c4
     57  18c4		       7e		      .byte.b	%01111110
     58  18c5		       46		      .byte.b	%01000110
     59  18c6		       46		      .byte.b	%01000110
     60  18c7		       46		      .byte.b	%01000110
     61  18c8		       7c		      .byte.b	%01111100
     62  18c9		       40		      .byte.b	%01000000
     63  18ca		       42		      .byte.b	%01000010
     64  18cb		       7e		      .byte.b	%01111110
     65  18cc
     66  18cc		       0c		      .byte.b	%00001100
     67  18cd		       0c		      .byte.b	%00001100
     68  18ce		       0c		      .byte.b	%00001100
     69  18cf		       0c		      .byte.b	%00001100
     70  18d0		       04		      .byte.b	%00000100
     71  18d1		       02		      .byte.b	%00000010
     72  18d2		       42		      .byte.b	%01000010
     73  18d3		       7e		      .byte.b	%01111110
     74  18d4
     75  18d4		       7e		      .byte.b	%01111110
     76  18d5		       46		      .byte.b	%01000110
     77  18d6		       46		      .byte.b	%01000110
     78  18d7		       46		      .byte.b	%01000110
     79  18d8		       7e		      .byte.b	%01111110
     80  18d9		       42		      .byte.b	%01000010
     81  18da		       42		      .byte.b	%01000010
     82  18db		       7e		      .byte.b	%01111110
     83  18dc
     84  18dc		       06		      .byte.b	%00000110
     85  18dd		       06		      .byte.b	%00000110
     86  18de		       06		      .byte.b	%00000110
     87  18df		       02		      .byte.b	%00000010
     88  18e0		       7e		      .byte.b	%01111110
     89  18e1		       42		      .byte.b	%01000010
     90  18e2		       42		      .byte.b	%01000010
     91  18e3		       7e		      .byte.b	%01111110
     92  18e4
     93  18e4				  -	      ifnconst	DPC_kernel_options
     94  18e4				  -
     95  18e4				  -	      .byte	%00000000
     96  18e4				  -	      .byte	%00000000
     97  18e4				  -	      .byte	%00000000
     98  18e4				  -	      .byte	%00000000
     99  18e4				  -	      .byte	%00000000
    100  18e4				  -	      .byte	%00000000
    101  18e4				  -	      .byte	%00000000
    102  18e4				  -	      .byte	%00000000
    103  18e4				  -
    104  18e4					      endif
------- FILE c:\Users\tazrog\Documents\Atari\BrawdyBAS\brawdy.bas.asm
     81  18e4					      endif
     82  18e4				  -	      if	font == whimsey
     83  18e4				  -	      include	"score_graphics.asm.whimsey"
     84  18e4					      endif
     85  18e4				  -	      if	font == tiny
     86  18e4				  -	      include	"score_graphics.asm.tiny"
     87  18e4					      endif
     88  18e4				  -	      if	font == hex
     89  18e4				  -	      include	"score_graphics.asm.hex"
     90  18e4					      endif
     91  18e4				  -	      else		; default font
     92  18e4				  -
     93  18e4				  -	      .byte	%00111100
     94  18e4				  -	      .byte	%01100110
     95  18e4				  -	      .byte	%01100110
     96  18e4				  -	      .byte	%01100110
     97  18e4				  -	      .byte	%01100110
     98  18e4				  -	      .byte	%01100110
     99  18e4				  -	      .byte	%01100110
    100  18e4				  -	      .byte	%00111100
    101  18e4				  -
    102  18e4				  -	      .byte	%01111110
    103  18e4				  -	      .byte	%00011000
    104  18e4				  -	      .byte	%00011000
    105  18e4				  -	      .byte	%00011000
    106  18e4				  -	      .byte	%00011000
    107  18e4				  -	      .byte	%00111000
    108  18e4				  -	      .byte	%00011000
    109  18e4				  -	      .byte	%00001000
    110  18e4				  -
    111  18e4				  -	      .byte	%01111110
    112  18e4				  -	      .byte	%01100000
    113  18e4				  -	      .byte	%01100000
    114  18e4				  -	      .byte	%00111100
    115  18e4				  -	      .byte	%00000110
    116  18e4				  -	      .byte	%00000110
    117  18e4				  -	      .byte	%01000110
    118  18e4				  -	      .byte	%00111100
    119  18e4				  -
    120  18e4				  -	      .byte	%00111100
    121  18e4				  -	      .byte	%01000110
    122  18e4				  -	      .byte	%00000110
    123  18e4				  -	      .byte	%00000110
    124  18e4				  -	      .byte	%00011100
    125  18e4				  -	      .byte	%00000110
    126  18e4				  -	      .byte	%01000110
    127  18e4				  -	      .byte	%00111100
    128  18e4				  -
    129  18e4				  -	      .byte	%00001100
    130  18e4				  -	      .byte	%00001100
    131  18e4				  -	      .byte	%01111110
    132  18e4				  -	      .byte	%01001100
    133  18e4				  -	      .byte	%01001100
    134  18e4				  -	      .byte	%00101100
    135  18e4				  -	      .byte	%00011100
    136  18e4				  -	      .byte	%00001100
    137  18e4				  -
    138  18e4				  -	      .byte	%00111100
    139  18e4				  -	      .byte	%01000110
    140  18e4				  -	      .byte	%00000110
    141  18e4				  -	      .byte	%00000110
    142  18e4				  -	      .byte	%00111100
    143  18e4				  -	      .byte	%01100000
    144  18e4				  -	      .byte	%01100000
    145  18e4				  -	      .byte	%01111110
    146  18e4				  -
    147  18e4				  -	      .byte	%00111100
    148  18e4				  -	      .byte	%01100110
    149  18e4				  -	      .byte	%01100110
    150  18e4				  -	      .byte	%01100110
    151  18e4				  -	      .byte	%01111100
    152  18e4				  -	      .byte	%01100000
    153  18e4				  -	      .byte	%01100010
    154  18e4				  -	      .byte	%00111100
    155  18e4				  -
    156  18e4				  -	      .byte	%00110000
    157  18e4				  -	      .byte	%00110000
    158  18e4				  -	      .byte	%00110000
    159  18e4				  -	      .byte	%00011000
    160  18e4				  -	      .byte	%00001100
    161  18e4				  -	      .byte	%00000110
    162  18e4				  -	      .byte	%01000010
    163  18e4				  -	      .byte	%00111110
    164  18e4				  -
    165  18e4				  -	      .byte	%00111100
    166  18e4				  -	      .byte	%01100110
    167  18e4				  -	      .byte	%01100110
    168  18e4				  -	      .byte	%01100110
    169  18e4				  -	      .byte	%00111100
    170  18e4				  -	      .byte	%01100110
    171  18e4				  -	      .byte	%01100110
    172  18e4				  -	      .byte	%00111100
    173  18e4				  -
    174  18e4				  -	      .byte	%00111100
    175  18e4				  -	      .byte	%01000110
    176  18e4				  -	      .byte	%00000110
    177  18e4				  -	      .byte	%00111110
    178  18e4				  -	      .byte	%01100110
    179  18e4				  -	      .byte	%01100110
    180  18e4				  -	      .byte	%01100110
    181  18e4				  -	      .byte	%00111100
    182  18e4				  -
    183  18e4				  -	      ifnconst	DPC_kernel_options
    184  18e4				  -
    185  18e4				  -	      .byte	%00000000
    186  18e4				  -	      .byte	%00000000
    187  18e4				  -	      .byte	%00000000
    188  18e4				  -	      .byte	%00000000
    189  18e4				  -	      .byte	%00000000
    190  18e4				  -	      .byte	%00000000
    191  18e4				  -	      .byte	%00000000
    192  18e4				  -	      .byte	%00000000
    193  18e4				  -
    194  18e4				  -	      endif
    195  18e4				  -
    196  18e4					      endif
    197  18e4
    198  18e4				  -	      ifconst	ROM2k
    199  18e4				  -	      ORG	$F7FC
    200  18e4					      else
    201  18e4					      ifconst	bankswitch
    202  18e4				  -	      if	bankswitch == 8
    203  18e4				  -	      ORG	$2FF4-bscode_length
    204  18e4				  -	      RORG	$FFF4-bscode_length
    205  18e4					      endif
    206  18e4				  -	      if	bankswitch == 16
    207  18e4				  -	      ORG	$4FF4-bscode_length
    208  18e4				  -	      RORG	$FFF4-bscode_length
    209  18e4					      endif
    210  18e4				  -	      if	bankswitch == 32
    211  18e4				  -	      ORG	$8FF4-bscode_length
    212  18e4				  -	      RORG	$FFF4-bscode_length
    213  18e4					      endif
    214  18e4				  -	      if	bankswitch == 64
    215  18e4				  -	      ORG	$10FE0-bscode_length
    216  18e4				  -	      RORG	$1FFE0-bscode_length
    217  18e4					      endif
    218  18e4				  -	      else
    219  18e4				  -	      ORG	$FFFC
    220  18e4					      endif
    221  18e4					      endif
    222  18e4							; Provided under the CC0 license. See the included LICENSE.txt for details.
    223  18e4
    224  18e4				   start
    225  18e4		       78		      sei
    226  18e5		       d8		      cld
    227  18e6		       a0 00		      ldy	#0
    228  18e8		       a5 d0		      lda	$D0
    229  18ea		       c9 2c		      cmp	#$2C	;check RAM location #1
    230  18ec		       d0 07		      bne	MachineIs2600
    231  18ee		       a5 d1		      lda	$D1
    232  18f0		       c9 a9		      cmp	#$A9	;check RAM location #2
    233  18f2		       d0 01		      bne	MachineIs2600
    234  18f4		       88		      dey
    235  18f5				   MachineIs2600
    236  18f5		       a2 00		      ldx	#0
    237  18f7		       8a		      txa
    238  18f8				   clearmem
    239  18f8		       e8		      inx
    240  18f9		       9a		      txs
    241  18fa		       48		      pha
    242  18fb		       d0 fb		      bne	clearmem
    243  18fd		       84 cb		      sty	temp1
    244  18ff		       a2 08		      ldx	#8
    245  1901		       86 ca		      stx	playfieldpos
    246  1903		       8e 58 10 	      stx	FASTFETCH
    247  1906		       a2 08		      ldx	#8
    248  1908		       a9 e0		      lda	#224
    249  190a				   inityloop
    250  190a		       95 9a		      sta	player1y,x
    251  190c		       ca		      dex
    252  190d		       10 fb		      bpl	inityloop
    253  190f
    254  190f		       a9 01		      lda	#1
    255  1911		       85 0a		      sta	CTRLPF
    256  1913		       ad 84 02 	      lda	INTIM
    257  1916		       8d 71 10 	      sta	RWRITE0
    258  1919		       a9 00		      lda	#0
    259  191b		       8d 38 10 	      STA	DF0FRACINC
    260  191e		       8d 39 10 	      STA	DF1FRACINC
    261  1921		       8d 3a 10 	      STA	DF2FRACINC
    262  1924		       8d 3b 10 	      STA	DF3FRACINC
    263  1927		       8d 3c 10 	      STA	DF4FRACINC
    264  192a		       8d 3e 10 	      STA	DF6FRACINC
    265  192d		       a9 a5		      lda	#<USERSTACK
    266  192f		       8d 57 10 	      STA	DF7LOW
    267  1932		       a9 0d		      lda	#(>USERSTACK) & $0F
    268  1934		       8d 6f 10 	      STA	DF7HI
    269  1937		       a9 ff		      lda	#255
    270  1939		       8d 5a 10 	      sta	CALLFUNCTION	; zero-fill fetcher
    271  193c
    272  193c		       a9 1f		      lda	#>(game-1)
    273  193e		       48		      pha
    274  193f		       a9 90		      lda	#<(game-1)
    275  1941		       48		      pha
    276  1942		       48		      pha
    277  1943		       48		      pha
    278  1944		       a2 01		      ldx	#1
    279  1946		       4c ee df 	      jmp	BS_jsr
    280  1949				   drawscreen
    281  1949		       a9 01		      lda	#1
    282  194b		       85 2c		      sta	CXCLR
    283  194d		       85 09		      sta	COLUBK	; REVENG - don't start with the lastline color
    284  194f
    285  194f				   fufu
    286  194f		       ad 84 02 	      lda	INTIM
    287  1952		       30 fb		      bmi	fufu
    288  1954
      0  1954					      VERTICAL_SYNC
      1  1954		       a9 02		      LDA	#$02
      2  1956		       85 02		      STA	WSYNC
      3  1958		       85 00		      STA	VSYNC
      4  195a		       85 02		      STA	WSYNC
      5  195c		       85 02		      STA	WSYNC
      6  195e		       4a		      LSR
      7  195f		       85 02		      STA	WSYNC
      8  1961		       85 00		      STA	VSYNC
    290  1963
    291  1963		       a9 a9		      lda	#41+128	;was 37 - do more w/c code
    292  1965		       8d 96 02 	      sta	TIM64T
    293  1968
    294  1968							; adjust for pfpos?
    295  1968
    296  1968							; set zero to properly enter C code
    297  1968		       a9 a4		      lda	#<C_function
    298  196a		       8d 50 10 	      sta	DF0LOW
    299  196d		       a9 01		      lda	#(>C_function) & $0F
    300  196f		       8d 68 10 	      sta	DF0HI
    301  1972		       a9 00		      lda	#0
    302  1974		       8d 78 10 	      sta	DF0WRITE
    303  1977
    304  1977							; REVENG - pass the number of vsprites we want...
    305  1977					      ifnconst	dpcspritemax
    306  1977				  -	      ifconst	readpaddle
    307  1977				  -	      lda	#8
    308  1977					      else
    309  1977		       a9 09		      lda	#9
    310  1979					      endif
    311  1979				  -	      else
    312  1979				  -	      lda	#dpcspritemax
    313  1979					      endif
    314  1979		       8d 78 10 	      sta	DF0WRITE
    315  197c
    316  197c		       a5 80		      lda	player0x
    317  197e		       85 8f		      sta	player0xcoll	; detect p0x colls
    318  1980
    319  1980							; copy RAM to fetcher for C-code
    320  1980		       a9 e2		      lda	#<(CcodeData + RAMcopylength)
    321  1982		       8d 50 10 	      sta	DF0LOW
    322  1985		       a9 01		      lda	#(>(CcodeData + RAMcopylength)) & $0F
    323  1987		       8d 68 10 	      sta	DF0HI
    324  198a		       a2 39		      ldx	#RAMcopylength-1
    325  198c				   copy2fetcherloop
    326  198c		       b5 85		      lda	RAMcopybegin,x
    327  198e		       8d 60 10 	      sta	DF0PUSH
    328  1991		       ca		      dex
    329  1992		       10 f8		      bpl	copy2fetcherloop
    330  1994
    331  1994		       a9 ff		      lda	#255
    332  1996		       8d 5a 10 	      sta	CALLFUNCTION
    333  1999
    334  1999							; copy modified data back (just need first 6 bytes, which is sprite sort data)
    335  1999		       a2 ed		      ldx	#256-19
    336  199b				   copyfromfetcherloop
    337  199b		       ad 08 10 	      lda	DF0DATA
    338  199e		       95 98		      sta	RAMcopybegin+19,x
    339  19a0		       e8		      inx
    340  19a1		       30 f8		      bmi	copyfromfetcherloop
    341  19a3
    342  19a3		       20 3a 1e 	      jsr	kernel_setup
    343  19a6		       85 02		      sta	WSYNC
    344  19a8		       a0 80		      ldy	#$80
    345  19aa		       84 20		      sty	HMP0
    346  19ac		       84 21		      sty	HMP1
    347  19ae		       84 22		      sty	HMM0
    348  19b0		       84 23		      sty	HMM1
    349  19b2		       84 24		      sty	HMBL
    350  19b4
    351  19b4							; run possible vblank bB code
    352  19b4				  -	      ifconst	vblank_bB_code
    353  19b4				  -	      jsr	vblank_bB_code
    354  19b4					      endif
    355  19b4
    356  19b4		       20 02 1d 	      jsr	set_fetchers
    357  19b7
    358  19b7		       a2 07		      ldx	#7
    359  19b9				   setloopfrac
    360  19b9		       bd 7d 1d 	      lda	dffraclow,x
    361  19bc		       9d 28 10 	      sta	DF0FRACLOW,x
    362  19bf		       bd 85 1d 	      lda	dffrachi,x
    363  19c2		       9d 30 10 	      sta	DF0FRACHI,x
    364  19c5		       ca		      dex
    365  19c6		       10 f1		      bpl	setloopfrac
    366  19c8							; lda #255
    367  19c8		       8e 3d 10 	      STx	DF5FRACINC	; x=255 right now
    368  19cb		       8e 3f 10 	      STx	DF7FRACINC
    369  19ce		       ad 1d 10 	      lda	DF5FRACDATA	; priming read
    370  19d1		       ad 1f 10 	      lda	DF7FRACDATA	; priming read
    371  19d4
    372  19d4		       a6 85		      ldx	SpriteGfxIndex
    373  19d6		       b5 af		      lda	_NUSIZ1,x	; top NUSIZ/REFP
    374  19d8		       85 05		      sta	NUSIZ1
    375  19da		       85 0c		      sta	REFP1
    376  19dc
    377  19dc							;REVENG - allow P0 to wrap at the top
    378  19dc				   startwrapfix
    379  19dc		       a9 ff		      lda	#255
    380  19de		       85 cc		      sta	temp2
    381  19e0		       18		      clc
    382  19e1		       a5 99		      lda	player0y
    383  19e3		       65 a5		      adc	player0height
    384  19e5		       38		      sec
    385  19e6		       c5 a5		      cmp	player0height
    386  19e8		       90 04		      bcc	skipwrapfix
    387  19ea		       a9 00		      lda	#0
    388  19ec		       85 cc		      sta	temp2
    389  19ee				   skipwrapfix
    390  19ee
    391  19ee		       38		      sec
    392  19ef		       a9 08		      lda	#<P0GFX
    393  19f1		       e5 99		      sbc	player0y
    394  19f3		       8d 52 10 	      sta	DF2LOW
    395  19f6		       a9 d4		      lda	#>P0GFX
    396  19f8							;sbc #0
    397  19f8		       e5 cc		      sbc	temp2
    398  19fa		       8d 6a 10 	      sta	DF2HI
    399  19fd		       a9 07		      lda	#<(P0GFX-1)
    400  19ff		       8d 42 10 	      sta	DF2TOP
    401  1a02		       38		      sec
    402  1a03		       65 a5		      adc	player0height
    403  1a05		       8d 4a 10 	      sta	DF2BOT
    404  1a08
    405  1a08							;REVENG - 1/2 of the COLUM0 fix. the rest is in main.c
    406  1a08		       a9 08		      lda	#<(P0COLOR)
    407  1a0a		       8d 50 10 	      sta	DF0LOW
    408  1a0d		       85 cc		      sta	temp2
    409  1a0f		       a9 d5		      lda	#>(P0COLOR)
    410  1a11		       8d 68 10 	      sta	DF0HI
    411  1a14
    412  1a14							; ball
    413  1a14		       a9 07		      lda	#<(P1GFX-1)
    414  1a16		       18		      clc
    415  1a17		       65 c1		      adc	bally
    416  1a19		       8d 43 10 	      sta	DF3TOP
    417  1a1c		       38		      sec
    418  1a1d		       65 c4		      adc	ballheight
    419  1a1f		       8d 4b 10 	      sta	DF3BOT
    420  1a22
    421  1a22							; missile0
    422  1a22		       a5 cc		      lda	temp2
    423  1a24		       18		      clc
    424  1a25		       65 bf		      adc	missile0y
    425  1a27		       8d 40 10 	      sta	DF0TOP
    426  1a2a		       38		      sec
    427  1a2b		       65 c2		      adc	missile0height
    428  1a2d		       8d 48 10 	      sta	DF0BOT
    429  1a30
    430  1a30
    431  1a30				   fuu
    432  1a30		       ad 84 02 	      lda	INTIM
    433  1a33		       30 fb		      bmi	fuu
    434  1a35		       85 02		      sta	WSYNC
    435  1a37							;     ldy #$80
    436  1a37							;     sty HMP0
    437  1a37							;     sty HMP1
    438  1a37							;     sty HMM0 
    439  1a37							;     sty HMM1
    440  1a37							;     sty HMBL
    441  1a37							; relocated code above prior to vblank, to allow for Cosmic Ark starfield
    442  1a37							; and/or skewed players
      0  1a37					      sleep	17
      1  1a37				   .CYCLES    SET	17
      2  1a37
      3  1a37				  -	      IF	.CYCLES < 2
      4  1a37				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1a37				  -	      ERR
      6  1a37					      ENDIF
      7  1a37
      8  1a37					      IF	.CYCLES & 1
      9  1a37					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1a37		       04 00		      nop	0
     11  1a39				  -	      ELSE
     12  1a39				  -	      bit	VSYNC
     13  1a39					      ENDIF
     14  1a39				   .CYCLES    SET	.CYCLES - 3
     15  1a39					      ENDIF
     16  1a39
     17  1a39					      REPEAT	.CYCLES / 2
     18  1a39		       ea		      nop
     17  1a39					      REPEND
     18  1a3a		       ea		      nop
     17  1a3a					      REPEND
     18  1a3b		       ea		      nop
     17  1a3b					      REPEND
     18  1a3c		       ea		      nop
     17  1a3c					      REPEND
     18  1a3d		       ea		      nop
     17  1a3d					      REPEND
     18  1a3e		       ea		      nop
     17  1a3e					      REPEND
     18  1a3f		       ea		      nop
     19  1a40					      REPEND
    444  1a40
    445  1a40		       a9 d3		      lda	#KERNEL_LINES
    446  1a42		       8d 96 02 	      sta	TIM64T
    447  1a45		       a9 01		      lda	#1
    448  1a47		       85 27		      sta	VDELBL
    449  1a49		       85 25		      sta	VDELP0
    450  1a4b
    451  1a4b							; missile1
    452  1a4b		       a9 07		      lda	#<(P1COLOR-1)
    453  1a4d		       18		      clc
    454  1a4e		       65 c0		      adc	missile1y
    455  1a50		       8d 41 10 	      sta	DF1TOP
    456  1a53		       38		      sec
    457  1a54		       65 c3		      adc	missile1height
    458  1a56		       8d 49 10 	      sta	DF1BOT
    459  1a59
    460  1a59		       a9 00		      lda	#0
    461  1a5b		       85 01		      sta	VBLANK
    462  1a5d		       8d 58 10 	      sta	FASTFETCH
    463  1a60							;sleep 7
    464  1a60		       a9 12		      lda	#<DF2DATAW	; REVENG - added so GRP0 is at TOP
    465  1a62		       85 1b		      STA	GRP0	; 36 (VDEL)   ; ""
      0  1a64					      sleep	2	; ""
      1  1a64				   .CYCLES    SET	2
      2  1a64
      3  1a64				  -	      IF	.CYCLES < 2
      4  1a64				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1a64				  -	      ERR
      6  1a64					      ENDIF
      7  1a64
      8  1a64				  -	      IF	.CYCLES & 1
      9  1a64				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1a64				  -	      nop	0
     11  1a64				  -	      ELSE
     12  1a64				  -	      bit	VSYNC
     13  1a64				  -	      ENDIF
     14  1a64				  -.CYCLES    SET	.CYCLES - 3
     15  1a64					      ENDIF
     16  1a64
     17  1a64					      REPEAT	.CYCLES / 2
     18  1a64		       ea		      nop
     19  1a65					      REPEND
    467  1a65
    468  1a65		       a9 18		      lda	#<DF0FRACDATA
    469  1a67		       85 0e		      sta	PF1	; (PF1L)
    470  1a69
    471  1a69							; enter at cycle ??
    472  1a69				   loop
    473  1a69		       a9 08		      lda	#<DF0DATA	;74
    474  1a6b		       85 06		      STA	COLUP0	; 1
    475  1a6d		       a9 09		      lda	#<DF1DATA	;3
    476  1a6f				   loop2
    477  1a6f		       85 07		      STA	COLUP1	; 6
    478  1a71		       a9 0b		      lda	#<DF3DATA
    479  1a73		       85 1c		      STA	GRP1	; 11
    480  1a75		       a9 20		      lda	#<DF0FLAG
    481  1a77		       85 1d		      STA	ENAM0	; 16
    482  1a79
    483  1a79		       a9 1e		      lda	#<DF6FRACDATA
    484  1a7b		       85 09		      sta	COLUBK	; 21
    485  1a7d		       a9 1c		      lda	#<DF4FRACDATA
    486  1a7f		       85 08		      sta	COLUPF	; 26
    487  1a81		       a9 19		      lda	#<DF1FRACDATA
    488  1a83		       85 0f		      sta	PF2	; 31 (PF2L)
    489  1a85				   loop3
    490  1a85		       a9 12		      lda	#<DF2DATAW
    491  1a87		       85 1b		      STA	GRP0	; 36 (VDEL)
    492  1a89		       a9 23		      lda	#<DF3FLAG
    493  1a8b		       85 1f		      STA	ENABL	; 41 (VDEL)
    494  1a8d		       a2 70		      ldx	#$70	;in case we get kernel 6
    495  1a8f		       a9 1a		      lda	#<DF2FRACDATA	;45
    496  1a91		       85 0f		      sta	PF2	; 48
    497  1a93		       84 21		      sty	HMP1	; 51 ; from prev. cycle: $80=nomove
    498  1a95		       a9 1b		      lda	#<DF3FRACDATA	;53
    499  1a97		       85 0e		      sta	PF1	; 56
    500  1a99		       a9 0c		      lda	#<DF4DATA	; 58 this is the repos info
    501  1a9b		       f0 4d		      beq	repo	;60/61
    502  1a9d				   norepo		; 60
    503  1a9d		       a8		      tay		; 62
    504  1a9e		       a9 08		      lda	#<DF0DATA	; 64
    505  1aa0
    506  1aa0		       ae 84 02 	      ldx	INTIM	; 68 timed for 192 lines
    507  1aa3		       f0 60		      beq	exitkernel	; 70/71
    508  1aa5		       85 2a		      sta	HMOVE	; 73
    509  1aa7
    510  1aa7		       85 06		      STA	COLUP0	; 0
    511  1aa9		       a9 09		      lda	#<DF1DATA	;2
    512  1aab		       85 07		      STA	COLUP1	;5
    513  1aad		       a9 0b		      lda	#<DF3DATA
    514  1aaf		       85 1c		      STA	GRP1	; 10
    515  1ab1		       a9 21		      lda	#<DF1FLAG
    516  1ab3		       85 1e		      STA	ENAM1	; 15
    517  1ab5		       a9 18		      lda	#<DF0FRACDATA
    518  1ab7		       85 0e		      sta	PF1	; 20 (PF1L)
    519  1ab9		       a9 19		      lda	#<DF1FRACDATA
    520  1abb		       85 0f		      sta	PF2	; 25 (PF2L)
    521  1abd		       a9 12		      lda	#<DF2DATAW
    522  1abf		       85 1b		      STA	GRP0	; 30 (VDEL)
    523  1ac1		       a9 23		      lda	#<DF3FLAG
    524  1ac3		       85 1f		      STA	ENABL	; 35 (VDEL)
    525  1ac5		       88		      dey		; 37
    526  1ac6		       8c 64 10 	      STY	DF4PUSH	; 41
    527  1ac9		       a0 80		      ldy	#$80	; 43 no movement next line
    528  1acb		       a9 1a		      lda	#<DF2FRACDATA	;45
    529  1acd		       85 0f		      sta	PF2	; 48
    530  1acf		       84 21		      sty	HMP1	; 51 ; from prev. cycle: $80=nomove
    531  1ad1		       a9 1b		      lda	#<DF3FRACDATA	;53
    532  1ad3		       85 0e		      sta	PF1	; 56
    533  1ad5				  -	      ifnconst	DPC_kernel_options
    534  1ad5				  -			;sleep 8 ; REVENG - timing is off - results in a garbled screen
    535  1ad5				  -	      sleep	5	; this is better
    536  1ad5					      else
    537  1ad5		       24 43		      bit	DPC_kernel_options
    538  1ad7					      if	(DPC_kernel_options > $3F)
    539  1ad7		       30 09		      bmi	COLfound
    540  1ad9				  -	      else
    541  1ad9				  -	      bpl	COLfound
    542  1ad9					      endif
    543  1ad9					      endif
    544  1ad9		       86 ce		      stx	temp4	; +3
    545  1adb
    546  1adb				   getbackearly
    547  1adb		       a9 18		      lda	#<DF0FRACDATA	; +2
    548  1add		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    549  1adf		       4c 69 5a 	      JMP	loop+$4000	; 72
    550  1ae2
    551  1ae2					      ifconst	DPC_kernel_options
    552  1ae2				   COLfound
    553  1ae2		       ad 18 10 	      lda	DF0FRACDATA
    554  1ae5		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    555  1ae7		       4c 69 5a 	      JMP	loop+$4000	; 72
    556  1aea					      endif
    557  1aea
    558  1aea				   repo
    559  1aea		       ac 1f 10 	      ldy	DF7FRACDATA	; 65
    560  1aed		       a9 18		      lda	#<DF0FRACDATA	; 67 preload PF1L for next line
    561  1aef				  -	      if	((>repo) > (>norepo))
    562  1aef				  -	      STA	PF1
    563  1aef					      else
    564  1aef		       8d 0e 00 	      STA.w	PF1	; 71 ; sta.w if page doesn't wrap
    565  1af2					      endif
    566  1af2		       a9 08		      lda	#<DF0DATA	;73
    567  1af4		       85 06		      STA	COLUP0	; 0
    568  1af6		       a9 09		      lda	#<DF1DATA
    569  1af8		       85 07		      STA	COLUP1	;5
    570  1afa		       a9 0b		      lda	#<DF3DATA
    571  1afc		       85 1c		      STA	GRP1	; 10
    572  1afe		       a9 21		      lda	#<DF1FLAG
    573  1b00		       85 1e		      STA	ENAM1	; 15
    574  1b02							; repos info holds HMMx
    575  1b02		       6c 0d 10 	      jmp	(DF5DATA)	; 20 grabs df6/df7=lo/hi
    576  1b05
    577  1b05				   exitkernel		; exit the kernel
    578  1b05		       20 c9 5e 	      jsr	scorekernel+$4000	; 1
    579  1b08				   exit
    580  1b08		       a2 ff		      ldx	#255
    581  1b0a		       8e 58 10 	      stx	FASTFETCH
    582  1b0d		       85 02		      sta	WSYNC
    583  1b0f				  -	      ifconst	qtcontroller
    584  1b0f				  -	      lda	qtcontroller
    585  1b0f				  -	      lsr		; bit 0 in carry
    586  1b0f				  -	      lda	#4
    587  1b0f				  -	      ror		; carry into top of A
    588  1b0f					      else
    589  1b0f		       a9 02		      lda	#2
    590  1b11					      endif		; qtcontroller
    591  1b11		       85 01		      STA	VBLANK
    592  1b13		       a9 a7		      lda	#OVERSCAN_LINES
    593  1b15		       8d 96 02 	      sta	TIM64T
    594  1b18		       38		      sec
    595  1b19		       a9 d3		      lda	#KERNEL_LINES
    596  1b1b		       e5 ce		      sbc	temp4
    597  1b1d		       aa		      tax
    598  1b1e		       4a		      lsr
    599  1b1f		       4a		      lsr
    600  1b20		       85 cd		      sta	temp3	; div4
    601  1b22		       4a		      lsr
    602  1b23		       4a		      lsr
    603  1b24		       85 cc		      sta	temp2	; div16
    604  1b26		       4a		      lsr
    605  1b27		       85 cb		      sta	temp1	; div32
    606  1b29		       18		      clc
    607  1b2a		       8a		      txa
    608  1b2b		       65 cc		      adc	temp2
    609  1b2d		       65 cb		      adc	temp1
    610  1b2f		       38		      sec
    611  1b30		       e5 cd		      sbc	temp3
    612  1b32		       85 ce		      sta	temp4	; approx line of first pf coll
      0  1b34					      RETURN
      1  1b34				  -	      ifnconst	bankswitch
      2  1b34				  -	      rts
      3  1b34					      else
      4  1b34		       4c e0 df 	      jmp	BS_return
      5  1b37					      endif
    614  1b37
    615  1b37							; jmp exit
    616  1b37
    617  1b37							; kernels resp1 23/28/33/38/43/48/53/58/63/68/73
    618  1b37
    619  1b37				   kernel1
    620  1b37		       85 11		      sta	RESP1	; 23
    621  1b39		       a9 12		      lda	#<DF2DATAW
    622  1b3b		       85 1b		      STA	GRP0	; 28 (VDEL)
    623  1b3d		       a9 19		      lda	#<DF1FRACDATA
    624  1b3f		       85 0f		      STA	PF2	; 33
    625  1b41		       a9 23		      lda	#<DF3FLAG
    626  1b43		       85 1f		      STA	ENABL	; 38 (VDEL)
      0  1b45					      sleep	5
      1  1b45				   .CYCLES    SET	5
      2  1b45
      3  1b45				  -	      IF	.CYCLES < 2
      4  1b45				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b45				  -	      ERR
      6  1b45					      ENDIF
      7  1b45
      8  1b45					      IF	.CYCLES & 1
      9  1b45					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b45		       04 00		      nop	0
     11  1b47				  -	      ELSE
     12  1b47				  -	      bit	VSYNC
     13  1b47					      ENDIF
     14  1b47				   .CYCLES    SET	.CYCLES - 3
     15  1b47					      ENDIF
     16  1b47
     17  1b47					      REPEAT	.CYCLES / 2
     18  1b47		       ea		      nop
     19  1b48					      REPEND
    628  1b48		       a9 1a		      lda	#<DF2FRACDATA	;45
    629  1b4a		       85 0f		      sta	PF2	; 48
    630  1b4c		       a9 1b		      lda	#<DF3FRACDATA	;50
    631  1b4e		       85 0e		      sta	PF1	; 53
    632  1b50		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    633  1b52		       85 05		      STA	NUSIZ1	; 58
    634  1b54		       85 0c		      STA	REFP1	; 61
    635  1b56		       4c db 1a 	      jmp	getbackearly	;64
    636  1b59
    637  1b59				   kernel2
    638  1b59		       a9 12		      lda	#<DF2DATAW
    639  1b5b		       85 1b		      STA	GRP0	; 25 (VDEL)
    640  1b5d		       85 11		      sta	RESP1	;28
    641  1b5f		       a9 19		      lda	#<DF1FRACDATA
    642  1b61		       85 0f		      STA	PF2	; 33
    643  1b63		       a9 23		      lda	#<DF3FLAG
    644  1b65		       85 1f		      STA	ENABL	; 38 (VDEL)
      0  1b67					      sleep	5
      1  1b67				   .CYCLES    SET	5
      2  1b67
      3  1b67				  -	      IF	.CYCLES < 2
      4  1b67				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b67				  -	      ERR
      6  1b67					      ENDIF
      7  1b67
      8  1b67					      IF	.CYCLES & 1
      9  1b67					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b67		       04 00		      nop	0
     11  1b69				  -	      ELSE
     12  1b69				  -	      bit	VSYNC
     13  1b69					      ENDIF
     14  1b69				   .CYCLES    SET	.CYCLES - 3
     15  1b69					      ENDIF
     16  1b69
     17  1b69					      REPEAT	.CYCLES / 2
     18  1b69		       ea		      nop
     19  1b6a					      REPEND
    646  1b6a		       a9 1a		      lda	#<DF2FRACDATA	;45
    647  1b6c		       85 0f		      sta	PF2	; 48
    648  1b6e		       a9 1b		      lda	#<DF3FRACDATA	;50
    649  1b70		       85 0e		      sta	PF1	; 53
    650  1b72		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    651  1b74		       85 05		      STA	NUSIZ1
    652  1b76		       85 0c		      STA	REFP1
    653  1b78		       4c db 1a 	      jmp	getbackearly	;64
    654  1b7b
    655  1b7b				   kernel3
    656  1b7b		       a9 12		      lda	#<DF2DATAW
    657  1b7d		       85 1b		      STA	GRP0	; 25 (VDEL)
    658  1b7f		       a9 19		      lda	#<DF1FRACDATA
    659  1b81		       85 0f		      STA	PF2	; 30
    660  1b83		       85 11		      sta	RESP1	;33
    661  1b85		       a9 23		      lda	#<DF3FLAG
    662  1b87		       85 1f		      STA	ENABL	; 38 (VDEL)
      0  1b89					      sleep	5
      1  1b89				   .CYCLES    SET	5
      2  1b89
      3  1b89				  -	      IF	.CYCLES < 2
      4  1b89				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b89				  -	      ERR
      6  1b89					      ENDIF
      7  1b89
      8  1b89					      IF	.CYCLES & 1
      9  1b89					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b89		       04 00		      nop	0
     11  1b8b				  -	      ELSE
     12  1b8b				  -	      bit	VSYNC
     13  1b8b					      ENDIF
     14  1b8b				   .CYCLES    SET	.CYCLES - 3
     15  1b8b					      ENDIF
     16  1b8b
     17  1b8b					      REPEAT	.CYCLES / 2
     18  1b8b		       ea		      nop
     19  1b8c					      REPEND
    664  1b8c		       a9 1a		      lda	#<DF2FRACDATA	;45
    665  1b8e		       85 0f		      sta	PF2	; 48
    666  1b90		       a9 1b		      lda	#<DF3FRACDATA	;50
    667  1b92		       85 0e		      sta	PF1	; 53
    668  1b94		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    669  1b96		       85 05		      STA	NUSIZ1
    670  1b98		       85 0c		      STA	REFP1
    671  1b9a		       4c db 1a 	      JMP	getbackearly	; 64
    672  1b9d
    673  1b9d				   kernel4
    674  1b9d		       a9 12		      lda	#<DF2DATAW
    675  1b9f		       85 1b		      STA	GRP0	; 25 (VDEL)
    676  1ba1		       a9 23		      lda	#<DF3FLAG
    677  1ba3		       85 1f		      STA	ENABL	; 30(VDEL)
    678  1ba5		       a9 19		      lda	#<DF1FRACDATA
    679  1ba7		       85 0f		      STA	PF2	; 35
    680  1ba9		       85 11		      sta	RESP1	;38
      0  1bab					      sleep	5
      1  1bab				   .CYCLES    SET	5
      2  1bab
      3  1bab				  -	      IF	.CYCLES < 2
      4  1bab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1bab				  -	      ERR
      6  1bab					      ENDIF
      7  1bab
      8  1bab					      IF	.CYCLES & 1
      9  1bab					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1bab		       04 00		      nop	0
     11  1bad				  -	      ELSE
     12  1bad				  -	      bit	VSYNC
     13  1bad					      ENDIF
     14  1bad				   .CYCLES    SET	.CYCLES - 3
     15  1bad					      ENDIF
     16  1bad
     17  1bad					      REPEAT	.CYCLES / 2
     18  1bad		       ea		      nop
     19  1bae					      REPEND
    682  1bae		       a9 1a		      lda	#<DF2FRACDATA	;45
    683  1bb0		       85 0f		      sta	PF2	; 48
    684  1bb2		       a9 1b		      lda	#<DF3FRACDATA	;50
    685  1bb4		       85 0e		      sta	PF1	; 53
    686  1bb6		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    687  1bb8		       85 05		      STA	NUSIZ1	; 58
    688  1bba		       85 0c		      STA	REFP1	; 61
    689  1bbc		       4c db 1a 	      JMP	getbackearly	; 64
    690  1bbf
    691  1bbf				   kernel5
    692  1bbf		       a9 12		      lda	#<DF2DATAW
    693  1bc1		       85 1b		      STA	GRP0	; (VDEL)
    694  1bc3		       a9 23		      lda	#<DF3FLAG
    695  1bc5		       85 1f		      STA	ENABL	; (VDEL)
    696  1bc7		       a9 19		      lda	#<DF1FRACDATA
    697  1bc9		       85 0f		      STA	PF2	; 35
      0  1bcb					      sleep	5
      1  1bcb				   .CYCLES    SET	5
      2  1bcb
      3  1bcb				  -	      IF	.CYCLES < 2
      4  1bcb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1bcb				  -	      ERR
      6  1bcb					      ENDIF
      7  1bcb
      8  1bcb					      IF	.CYCLES & 1
      9  1bcb					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1bcb		       04 00		      nop	0
     11  1bcd				  -	      ELSE
     12  1bcd				  -	      bit	VSYNC
     13  1bcd					      ENDIF
     14  1bcd				   .CYCLES    SET	.CYCLES - 3
     15  1bcd					      ENDIF
     16  1bcd
     17  1bcd					      REPEAT	.CYCLES / 2
     18  1bcd		       ea		      nop
     19  1bce					      REPEND
    699  1bce		       85 11		      sta	RESP1	;43
    700  1bd0		       a9 1a		      lda	#<DF2FRACDATA	;45
    701  1bd2		       85 0f		      sta	PF2	; 48
    702  1bd4		       a9 1b		      lda	#<DF3FRACDATA	;50
    703  1bd6		       85 0e		      sta	PF1	; 53
    704  1bd8		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    705  1bda		       85 05		      STA	NUSIZ1
    706  1bdc		       85 0c		      STA	REFP1
    707  1bde		       4c db 1a 	      JMP	getbackearly	; 64
    708  1be1
    709  1be1				   kernel6
    710  1be1		       a9 12		      lda	#<DF2DATAW
    711  1be3		       85 1b		      STA	GRP0	; 25 (VDEL)
    712  1be5		       a9 23		      lda	#<DF3FLAG
    713  1be7		       85 1f		      STA	ENABL	; 30 (VDEL)
    714  1be9		       a9 19		      lda	#<DF1FRACDATA
    715  1beb		       85 0f		      STA	PF2	; 35
    716  1bed		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    717  1bef		       85 05		      STA	NUSIZ1	; 40
    718  1bf1		       85 0c		      STA	REFP1	; 43
    719  1bf3		       a9 1a		      lda	#<DF2FRACDATA	;45
    720  1bf5		       85 0f		      sta	PF2	; 48
    721  1bf7		       a9 1b		      lda	#<DF3FRACDATA	;50
    722  1bf9		       85 11		      sta	RESP1	;53
    723  1bfb							; do a move right by 15
    724  1bfb		       85 0e		      sta	PF1	; 56
    725  1bfd		       86 21		      stx	HMP1	; 59
    726  1bff		       a9 19		      lda	#<DF1FRACDATA
    727  1c01		       85 0f		      sta	PF2	; 64 (PF2L)
    728  1c03		       a9 18		      lda	#<DF0FRACDATA
    729  1c05		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    730  1c07		       a9 08		      lda	#<DF0DATA	; 71
    731  1c09		       85 2a		      sta	HMOVE	; 74 adjust to +15 right
    732  1c0b
    733  1c0b		       85 06		      STA	COLUP0	; 1
    734  1c0d		       a9 09		      lda	#<DF1DATA
    735  1c0f		       85 07		      sta	COLUP1	; 6
    736  1c11		       a9 0b		      lda	#<DF3DATA
    737  1c13		       85 1c		      STA	GRP1	; 11
    738  1c15		       a9 20		      lda	#<DF0FLAG
    739  1c17		       85 1d		      STA	ENAM0	; 16
    740  1c19		       a9 1e		      lda	#<DF6FRACDATA
    741  1c1b		       85 09		      STA	COLUBK	; 21
    742  1c1d		       a9 1c		      lda	#<DF4FRACDATA
    743  1c1f		       85 08		      sta	COLUPF	; 26
      0  1c21					      sleep	2
      1  1c21				   .CYCLES    SET	2
      2  1c21
      3  1c21				  -	      IF	.CYCLES < 2
      4  1c21				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c21				  -	      ERR
      6  1c21					      ENDIF
      7  1c21
      8  1c21				  -	      IF	.CYCLES & 1
      9  1c21				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c21				  -	      nop	0
     11  1c21				  -	      ELSE
     12  1c21				  -	      bit	VSYNC
     13  1c21				  -	      ENDIF
     14  1c21				  -.CYCLES    SET	.CYCLES - 3
     15  1c21					      ENDIF
     16  1c21
     17  1c21					      REPEAT	.CYCLES / 2
     18  1c21		       ea		      nop
     19  1c22					      REPEND
    745  1c22		       4c 85 1a 	      jmp	loop3	; 31
    746  1c25
    747  1c25				   kernel7
    748  1c25		       a9 12		      lda	#<DF2DATAW
    749  1c27		       85 1b		      STA	GRP0	; 25 (VDEL)
    750  1c29		       a9 23		      lda	#<DF3FLAG
    751  1c2b		       85 1f		      STA	ENABL	; 30 (VDEL)
    752  1c2d		       a9 19		      lda	#<DF1FRACDATA
    753  1c2f		       85 0f		      STA	PF2	; 35
    754  1c31		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    755  1c33		       85 05		      STA	NUSIZ1	; 40
    756  1c35		       85 0c		      STA	REFP1	; 43
    757  1c37		       a9 1a		      lda	#<DF2FRACDATA	;45
    758  1c39		       85 0f		      sta	PF2	; 48
      0  1c3b					      sleep	2
      1  1c3b				   .CYCLES    SET	2
      2  1c3b
      3  1c3b				  -	      IF	.CYCLES < 2
      4  1c3b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c3b				  -	      ERR
      6  1c3b					      ENDIF
      7  1c3b
      8  1c3b				  -	      IF	.CYCLES & 1
      9  1c3b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c3b				  -	      nop	0
     11  1c3b				  -	      ELSE
     12  1c3b				  -	      bit	VSYNC
     13  1c3b				  -	      ENDIF
     14  1c3b				  -.CYCLES    SET	.CYCLES - 3
     15  1c3b					      ENDIF
     16  1c3b
     17  1c3b					      REPEAT	.CYCLES / 2
     18  1c3b		       ea		      nop
     19  1c3c					      REPEND
    760  1c3c		       85 11		      sta	RESP1	;53
    761  1c3e		       a9 1b		      lda	#<DF3FRACDATA	;55
    762  1c40		       85 0e		      sta	PF1	; 58
      0  1c42					      sleep	3
      1  1c42				   .CYCLES    SET	3
      2  1c42
      3  1c42				  -	      IF	.CYCLES < 2
      4  1c42				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c42				  -	      ERR
      6  1c42					      ENDIF
      7  1c42
      8  1c42					      IF	.CYCLES & 1
      9  1c42					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c42		       04 00		      nop	0
     11  1c44				  -	      ELSE
     12  1c44				  -	      bit	VSYNC
     13  1c44					      ENDIF
     14  1c44				   .CYCLES    SET	.CYCLES - 3
     15  1c44					      ENDIF
     16  1c44
     17  1c44				  -	      REPEAT	.CYCLES / 2
     18  1c44				  -	      nop
     19  1c44					      REPEND
    764  1c44		       4c db 1a 	      JMP	getbackearly	; 64
    765  1c47
    766  1c47				   kernel8
    767  1c47		       a9 12		      lda	#<DF2DATAW
    768  1c49		       85 1b		      STA	GRP0	; (VDEL)
    769  1c4b		       a9 23		      lda	#<DF3FLAG
    770  1c4d		       85 1f		      STA	ENABL	; (VDEL)
    771  1c4f		       a9 19		      lda	#<DF1FRACDATA
    772  1c51		       85 0f		      STA	PF2	; 35
    773  1c53		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    774  1c55		       85 05		      STA	NUSIZ1	; 40
    775  1c57		       85 0c		      STA	REFP1	; 43
    776  1c59		       a9 1a		      lda	#<DF2FRACDATA	;45
    777  1c5b		       85 0f		      sta	PF2	; 48
    778  1c5d		       a9 1b		      lda	#<DF3FRACDATA	;50
    779  1c5f		       85 0e		      sta	PF1	; 53
      0  1c61					      sleep	2
      1  1c61				   .CYCLES    SET	2
      2  1c61
      3  1c61				  -	      IF	.CYCLES < 2
      4  1c61				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c61				  -	      ERR
      6  1c61					      ENDIF
      7  1c61
      8  1c61				  -	      IF	.CYCLES & 1
      9  1c61				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c61				  -	      nop	0
     11  1c61				  -	      ELSE
     12  1c61				  -	      bit	VSYNC
     13  1c61				  -	      ENDIF
     14  1c61				  -.CYCLES    SET	.CYCLES - 3
     15  1c61					      ENDIF
     16  1c61
     17  1c61					      REPEAT	.CYCLES / 2
     18  1c61		       ea		      nop
     19  1c62					      REPEND
    781  1c62		       85 11		      sta	RESP1	;58
      0  1c64					      sleep	3
      1  1c64				   .CYCLES    SET	3
      2  1c64
      3  1c64				  -	      IF	.CYCLES < 2
      4  1c64				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c64				  -	      ERR
      6  1c64					      ENDIF
      7  1c64
      8  1c64					      IF	.CYCLES & 1
      9  1c64					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c64		       04 00		      nop	0
     11  1c66				  -	      ELSE
     12  1c66				  -	      bit	VSYNC
     13  1c66					      ENDIF
     14  1c66				   .CYCLES    SET	.CYCLES - 3
     15  1c66					      ENDIF
     16  1c66
     17  1c66				  -	      REPEAT	.CYCLES / 2
     18  1c66				  -	      nop
     19  1c66					      REPEND
    783  1c66		       4c db 1a 	      JMP	getbackearly	; 64
    784  1c69
    785  1c69				   kernel9
    786  1c69		       a9 12		      lda	#<DF2DATAW
    787  1c6b		       85 1b		      STA	GRP0	; (VDEL)
    788  1c6d		       a9 23		      lda	#<DF3FLAG
    789  1c6f		       85 1f		      STA	ENABL	; (VDEL)
    790  1c71		       a9 19		      lda	#<DF1FRACDATA
    791  1c73		       85 0f		      STA	PF2	; 35
    792  1c75		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    793  1c77		       85 05		      STA	NUSIZ1	; 40
    794  1c79		       85 0c		      STA	REFP1	; 43
    795  1c7b		       a9 1a		      lda	#<DF2FRACDATA	;45
    796  1c7d		       85 0f		      sta	PF2	; 48
    797  1c7f		       a9 1b		      lda	#<DF3FRACDATA	;50
    798  1c81		       85 0e		      sta	PF1	; 53
      0  1c83					      sleep	5
      1  1c83				   .CYCLES    SET	5
      2  1c83
      3  1c83				  -	      IF	.CYCLES < 2
      4  1c83				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c83				  -	      ERR
      6  1c83					      ENDIF
      7  1c83
      8  1c83					      IF	.CYCLES & 1
      9  1c83					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c83		       04 00		      nop	0
     11  1c85				  -	      ELSE
     12  1c85				  -	      bit	VSYNC
     13  1c85					      ENDIF
     14  1c85				   .CYCLES    SET	.CYCLES - 3
     15  1c85					      ENDIF
     16  1c85
     17  1c85					      REPEAT	.CYCLES / 2
     18  1c85		       ea		      nop
     19  1c86					      REPEND
    800  1c86		       a9 18		      lda	#<DF0FRACDATA
    801  1c88		       85 11		      sta	RESP1	;63
      0  1c8a					      sleep	3
      1  1c8a				   .CYCLES    SET	3
      2  1c8a
      3  1c8a				  -	      IF	.CYCLES < 2
      4  1c8a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c8a				  -	      ERR
      6  1c8a					      ENDIF
      7  1c8a
      8  1c8a					      IF	.CYCLES & 1
      9  1c8a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c8a		       04 00		      nop	0
     11  1c8c				  -	      ELSE
     12  1c8c				  -	      bit	VSYNC
     13  1c8c					      ENDIF
     14  1c8c				   .CYCLES    SET	.CYCLES - 3
     15  1c8c					      ENDIF
     16  1c8c
     17  1c8c				  -	      REPEAT	.CYCLES / 2
     18  1c8c				  -	      nop
     19  1c8c					      REPEND
    803  1c8c		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    804  1c8e		       4c 69 1a 	      jmp	loop	;72
    805  1c91
    806  1c91				   kernel10
    807  1c91		       a9 12		      lda	#<DF2DATAW
    808  1c93		       85 1b		      STA	GRP0	; 25 (VDEL)
    809  1c95		       a9 23		      lda	#<DF3FLAG
    810  1c97		       85 1f		      STA	ENABL	; 30 (VDEL)
    811  1c99		       a9 19		      lda	#<DF1FRACDATA
    812  1c9b		       85 0f		      STA	PF2	; 35
    813  1c9d		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    814  1c9f		       85 05		      STA	NUSIZ1	; 40
    815  1ca1		       85 0c		      STA	REFP1	; 43
    816  1ca3		       a9 1a		      lda	#<DF2FRACDATA	;45
    817  1ca5		       85 0f		      sta	PF2	; 48
    818  1ca7		       a9 1b		      lda	#<DF3FRACDATA	;50
    819  1ca9		       85 0e		      sta	PF1	; 53
      0  1cab					      sleep	6
      1  1cab				   .CYCLES    SET	6
      2  1cab
      3  1cab				  -	      IF	.CYCLES < 2
      4  1cab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1cab				  -	      ERR
      6  1cab					      ENDIF
      7  1cab
      8  1cab				  -	      IF	.CYCLES & 1
      9  1cab				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1cab				  -	      nop	0
     11  1cab				  -	      ELSE
     12  1cab				  -	      bit	VSYNC
     13  1cab				  -	      ENDIF
     14  1cab				  -.CYCLES    SET	.CYCLES - 3
     15  1cab					      ENDIF
     16  1cab
     17  1cab					      REPEAT	.CYCLES / 2
     18  1cab		       ea		      nop
     17  1cab					      REPEND
     18  1cac		       ea		      nop
     17  1cac					      REPEND
     18  1cad		       ea		      nop
     19  1cae					      REPEND
    821  1cae		       a9 18		      lda	#<DF0FRACDATA
    822  1cb0		       ae 08 10 	      LDX	DF0DATA	; 65
    823  1cb3		       85 11		      sta	RESP1	; 68
    824  1cb5		       85 0e		      STA	PF1	; 71
    825  1cb7		       a9 09		      lda	#<DF1DATA	; 74
    826  1cb9		       86 06		      STX	COLUP0	; 0
    827  1cbb		       4c 6f 1a 	      jmp	loop2	; 3
    828  1cbe
    829  1cbe				   kernel11
    830  1cbe		       a9 12		      lda	#<DF2DATAW
    831  1cc0		       85 1b		      STA	GRP0	; (VDEL)
    832  1cc2		       a9 23		      lda	#<DF3FLAG
    833  1cc4		       85 1f		      STA	ENABL	; (VDEL)
    834  1cc6		       a9 19		      lda	#<DF1FRACDATA
    835  1cc8		       85 0f		      STA	PF2	; 35
    836  1cca		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    837  1ccc		       85 05		      STA	NUSIZ1
    838  1cce		       85 0c		      STA	REFP1
    839  1cd0		       a9 1a		      lda	#<DF2FRACDATA	;45
    840  1cd2		       85 0f		      sta	PF2	; 48
    841  1cd4		       a9 1b		      lda	#<DF3FRACDATA	;50
    842  1cd6		       85 0e		      sta	PF1	; 53
      0  1cd8					      sleep	3
      1  1cd8				   .CYCLES    SET	3
      2  1cd8
      3  1cd8				  -	      IF	.CYCLES < 2
      4  1cd8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1cd8				  -	      ERR
      6  1cd8					      ENDIF
      7  1cd8
      8  1cd8					      IF	.CYCLES & 1
      9  1cd8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1cd8		       04 00		      nop	0
     11  1cda				  -	      ELSE
     12  1cda				  -	      bit	VSYNC
     13  1cda					      ENDIF
     14  1cda				   .CYCLES    SET	.CYCLES - 3
     15  1cda					      ENDIF
     16  1cda
     17  1cda				  -	      REPEAT	.CYCLES / 2
     18  1cda				  -	      nop
     19  1cda					      REPEND
    844  1cda		       a9 19		      lda	#<DF1FRACDATA	;45
    845  1cdc		       85 0f		      sta	PF2	; 61
    846  1cde		       ae 08 10 	      LDX	DF0DATA	; 65
    847  1ce1
    848  1ce1		       a9 18		      lda	#<DF0FRACDATA	; 67
    849  1ce3		       85 0e		      sta	PF1	; 70
    850  1ce5		       85 11		      sta	RESP1	; 73
    851  1ce7		       86 06		      STX	COLUP0	; 0
    852  1ce9		       a9 09		      lda	#<DF1DATA	; 2
    853  1ceb		       85 07		      sta	COLUP1	; 5
    854  1ced		       a9 0b		      lda	#<DF3DATA
    855  1cef		       85 1c		      STA	GRP1	; 10
    856  1cf1		       a9 20		      lda	#<DF0FLAG
    857  1cf3		       85 1d		      STA	ENAM0	; 25
    858  1cf5		       a9 1e		      lda	#<DF6FRACDATA
    859  1cf7		       85 09		      STA	COLUBK	; 20
    860  1cf9		       a9 1c		      lda	#<DF4FRACDATA
    861  1cfb		       85 08		      sta	COLUPF	; 25
      0  1cfd					      sleep	3
      1  1cfd				   .CYCLES    SET	3
      2  1cfd
      3  1cfd				  -	      IF	.CYCLES < 2
      4  1cfd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1cfd				  -	      ERR
      6  1cfd					      ENDIF
      7  1cfd
      8  1cfd					      IF	.CYCLES & 1
      9  1cfd					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1cfd		       04 00		      nop	0
     11  1cff				  -	      ELSE
     12  1cff				  -	      bit	VSYNC
     13  1cff					      ENDIF
     14  1cff				   .CYCLES    SET	.CYCLES - 3
     15  1cff					      ENDIF
     16  1cff
     17  1cff				  -	      REPEAT	.CYCLES / 2
     18  1cff				  -	      nop
     19  1cff					      REPEND
    863  1cff		       4c 85 1a 	      jmp	loop3	; 31
    864  1d02
    865  1d02				   set_fetchers
    866  1d02		       ad 6d 1d 	      lda	dflow
    867  1d05		       8d 50 10 	      sta	DF0LOW
    868  1d08		       ad 75 1d 	      lda	dfhigh
    869  1d0b		       8d 68 10 	      sta	DF0HI
    870  1d0e
    871  1d0e		       ad 6e 1d 	      lda	dflow+1
    872  1d11		       8d 51 10 	      sta	DF1LOW
    873  1d14		       ad 76 1d 	      lda	dfhigh+1
    874  1d17		       8d 69 10 	      sta	DF1HI
    875  1d1a
    876  1d1a		       ad 6f 1d 	      lda	dflow+2
    877  1d1d		       8d 52 10 	      sta	DF2LOW
    878  1d20		       ad 77 1d 	      lda	dfhigh+2
    879  1d23		       8d 6a 10 	      sta	DF2HI
    880  1d26
    881  1d26				   set_fetchers36		; sets just 3-6
    882  1d26		       ad 70 1d 	      lda	dflow+3
    883  1d29		       8d 53 10 	      sta	DF3LOW
    884  1d2c		       ad 78 1d 	      lda	dfhigh+3
    885  1d2f		       8d 6b 10 	      sta	DF3HI
    886  1d32
    887  1d32		       ad 71 1d 	      lda	dflow+4
    888  1d35		       8d 54 10 	      sta	DF4LOW
    889  1d38		       ad 79 1d 	      lda	dfhigh+4
    890  1d3b		       8d 6c 10 	      sta	DF4HI
    891  1d3e
    892  1d3e		       ad 72 1d 	      lda	dflow+5
    893  1d41		       8d 55 10 	      sta	DF5LOW
    894  1d44		       ad 7a 1d 	      lda	dfhigh+5
    895  1d47		       8d 6d 10 	      sta	DF5HI
    896  1d4a
    897  1d4a		       ad 73 1d 	      lda	dflow+6
    898  1d4d		       8d 56 10 	      sta	DF6LOW
    899  1d50		       ad 7b 1d 	      lda	dfhigh+6
    900  1d53		       8d 6e 10 	      sta	DF6HI
    901  1d56
    902  1d56		       60		      rts
    903  1d57
    904  1d57							;9d bad
    905  1d57							; the below isn't quite right
    906  1d57							;DF0DATA: COLUP0
    907  1d57							;DF1DATA: COLUP1
    908  1d57							;DF2DATAW: GRP0
    909  1d57							;DF3DATA: GRP1 
    910  1d57							;DF4DATA: 2lk lines until repos/HMP1
    911  1d57							;DF5DATA: low byte of repo kernels (xpos mod 15)
    912  1d57							;DF6DATA: High byte of repo kernels (x pos div 15)
    913  1d57							;DF7DATA: Programmer's stack
    914  1d57							;DF0FRACDATA: PF1L
    915  1d57							;DF1FRACDATA: PF2L
    916  1d57							;DF4FRACDATA: COLUPF
    917  1d57							;DF2FRACDATA: PF2R
    918  1d57							;DF3FRACDATA: PF2L
    919  1d57							;DF5FRACDATA: Sprite NUSIZ1/REFP1 (only during repos)
    920  1d57							;DF6FRACDATA: COLUBK
    921  1d57							;DF7FRACDATA: HMP1
    922  1d57							;DF3FLAG: kernel exit loop ?? (use flags instead?)
    923  1d57							;DF0FLAG: ENAM0
    924  1d57							;DF1FLAG: ENAM1 
    925  1d57							;DF3FLAG: ENABL 
    926  1d57
    927  1d57				   fetcher_address_table
    928  1d57				   kernello
    929  1d57		       37		      .byte.b	<kernel1
    930  1d58		       59		      .byte.b	<kernel2
    931  1d59		       7b		      .byte.b	<kernel3
    932  1d5a		       9d		      .byte.b	<kernel4
    933  1d5b		       bf		      .byte.b	<kernel5
    934  1d5c		       e1		      .byte.b	<kernel6
    935  1d5d		       25		      .byte.b	<kernel7
    936  1d5e		       47		      .byte.b	<kernel8
    937  1d5f		       69		      .byte.b	<kernel9
    938  1d60		       91		      .byte.b	<kernel10
    939  1d61		       be		      .byte.b	<kernel11
    940  1d62				   kernelhi
    941  1d62		       1b		      .byte.b	>kernel1
    942  1d63		       1b		      .byte.b	>kernel2
    943  1d64		       1b		      .byte.b	>kernel3
    944  1d65		       1b		      .byte.b	>kernel4
    945  1d66		       1b		      .byte.b	>kernel5
    946  1d67		       1b		      .byte.b	>kernel6
    947  1d68		       1c		      .byte.b	>kernel7
    948  1d69		       1c		      .byte.b	>kernel8
    949  1d6a		       1c		      .byte.b	>kernel9
    950  1d6b		       1c		      .byte.b	>kernel10
    951  1d6c		       1c		      .byte.b	>kernel11
    952  1d6d				   dflow
    953  1d6d		       08		      .byte.b	<P0COLOR
    954  1d6e		       08		      .byte.b	<P1COLOR
    955  1d6f		       08		      .byte.b	<P0GFX
    956  1d70		       08		      .byte.b	<P1GFX
    957  1d71		       2d		      .byte.b	<P1SKIP
    958  1d72		       08		      .byte.b	<JUMPTABLELO
    959  1d73		       14		      .byte.b	<JUMPTABLEHI
    960  1d74		       a5		      .byte.b	<USERSTACK
    961  1d75				   dfhigh
    962  1d75		       05		      .byte.b	(>P0COLOR) & $0F
    963  1d76		       03		      .byte.b	(>P1COLOR) & $0F
    964  1d77		       04		      .byte.b	(>P0GFX) & $0F
    965  1d78		       02		      .byte.b	(>P1GFX) & $0F
    966  1d79		       0b		      .byte.b	(>P1SKIP) & $0F
    967  1d7a		       0b		      .byte.b	(>JUMPTABLELO) & $0F
    968  1d7b		       0b		      .byte.b	(>JUMPTABLEHI) & $0F
    969  1d7c		       0d		      .byte.b	(>USERSTACK) & $0F
    970  1d7d				   dffraclow
    971  1d7d		       08		      .byte.b	<PF1L
    972  1d7e		       08		      .byte.b	<PF2L
    973  1d7f		       08		      .byte.b	<PF1R
    974  1d80		       08		      .byte.b	<PF2R
    975  1d81		       08		      .byte.b	<PFCOLS
    976  1d82		       39		      .byte.b	<NUSIZREFP
    977  1d83		       a5		      .byte.b	<BKCOLS
    978  1d84		       20		      .byte.b	<P1HMP
    979  1d85				   dffrachi
    980  1d85		       06		      .byte.b	(>PF1L) & $0F
    981  1d86		       07		      .byte.b	(>PF2L) & $0F
    982  1d87		       08		      .byte.b	(>PF1R) & $0F
    983  1d88		       09		      .byte.b	(>PF2R) & $0F
    984  1d89		       0a		      .byte.b	(>PFCOLS) & $0F
    985  1d8a		       0b		      .byte.b	(>NUSIZREFP) & $0F
    986  1d8b		       0b		      .byte.b	(>BKCOLS) & $0F
    987  1d8c		       0b		      .byte.b	(>P1HMP) & $0F
    988  1d8d				   scorepointer
    989  1d8d		       94		      .byte.b	<scoretable
    990  1d8e		       08		      .byte.b	((>scoretable) & $0f) | (((>scoretable) / 2) & $70)
    991  1d8f				   scoresetup		; pointers to digit graphics
    992  1d8f		       45		      .byte.b	<scoredata
    993  1d90		       0b		      .byte.b	(>scoredata) & $0F
    994  1d91				   Hmval		; 112 wuz first
    995  1d91		       60 50 40 30*	      .byte.b	96, 80, 64, 48, 32, 16, 1, 240
    996  1d99				   Hmval74
    997  1d99		       e0 d0 c0 b0*	      .byte.b	224, 208, 192, 176, 160, 144, 128
    998  1da0		       60 50 40 30*	      .byte.b	96, 80, 64, 48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96
    999  1db0		       50 40 30 20*	      .byte.b	80, 64, 48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80
   1000  1dc0		       40 30 20 10*	      .byte.b	64, 48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64
   1001  1dd0		       30 20 10 01*	      .byte.b	48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48
   1002  1de0		       20 10 01 f0*	      .byte.b	32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32
   1003  1df0		       10 01 f0 e0*	      .byte.b	16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16
   1004  1e00		       01 f0 e0 d0*	      .byte.b	1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16, 1
   1005  1e10		       f0 e0 d0 c0*	      .byte.b	240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16, 1, 240
   1006  1e20		       e0 d0 c0 b0*	      .byte.b	224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16, 1, 240, 224, 208, 192
   1007  1e32		       b0 a0 90 80*	      .byte.b	176,160,144,128,16,1,240,224
   1008  1e3a
   1009  1e3a
   1010  1e3a				   kernel_setup
   1011  1e3a							;--position P0, top P1, M0, M1, BL
   1012  1e3a		       a2 00		      ldx	#0	; first sprite displayed
   1013  1e3c		       b5 85		      lda	SpriteGfxIndex,x
   1014  1e3e		       aa		      tax
   1015  1e3f		       b5 90		      lda	player1x,x
   1016  1e41		       c9 a0		      cmp	#160
   1017  1e43		       90 0a		      bcc	nostorep1
   1018  1e45		       c9 d0		      cmp	#208
   1019  1e47		       b0 02		      bcs	ksadjustdown
   1020  1e49							; 160-208: minus 160
   1021  1e49							;add 160 is like minus 96
   1022  1e49							; so minus 64
   1023  1e49		       e9 3f		      sbc	#63	;cc
   1024  1e4b				   ksadjustdown
   1025  1e4b							; 209-255: add 160 
   1026  1e4b		       69 9f		      adc	#159	; cs
   1027  1e4d		       95 90		      sta	player1x,x
   1028  1e4f				   nostorep1
   1029  1e4f		       85 02		      sta	WSYNC
   1030  1e51		       a2 04		      ldx	#4
   1031  1e53		       85 81		      sta	topP1x	; cache top p1
   1032  1e55				   HorPosLoop
   1033  1e55		       b5 80		      lda	player0x,X
   1034  1e57		       38		      sec
   1035  1e58				   DivideLoop
   1036  1e58		       e9 0f		      sbc	#15
   1037  1e5a		       b0 fc		      bcs	DivideLoop
      0  1e5c					      sleep	4
      1  1e5c				   .CYCLES    SET	4
      2  1e5c
      3  1e5c				  -	      IF	.CYCLES < 2
      4  1e5c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1e5c				  -	      ERR
      6  1e5c					      ENDIF
      7  1e5c
      8  1e5c				  -	      IF	.CYCLES & 1
      9  1e5c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1e5c				  -	      nop	0
     11  1e5c				  -	      ELSE
     12  1e5c				  -	      bit	VSYNC
     13  1e5c				  -	      ENDIF
     14  1e5c				  -.CYCLES    SET	.CYCLES - 3
     15  1e5c					      ENDIF
     16  1e5c
     17  1e5c					      REPEAT	.CYCLES / 2
     18  1e5c		       ea		      nop
     17  1e5c					      REPEND
     18  1e5d		       ea		      nop
     19  1e5e					      REPEND
   1039  1e5e		       95 10		      sta	RESP0,X
   1040  1e60		       85 02		      sta	WSYNC
   1041  1e62		       ca		      dex		;2
   1042  1e63		       10 f0		      bpl	HorPosLoop	;4/5
   1043  1e65
   1044  1e65		       a4 80		      ldy	player0x	; 7
   1045  1e67		       b9 91 1d 	      lda	Hmval,y	; 11
   1046  1e6a		       85 20		      sta	HMP0	; 14
   1047  1e6c
   1048  1e6c		       a4 81		      ldy	player0x+1
   1049  1e6e		       b9 91 1d 	      lda	Hmval,y
   1050  1e71		       85 21		      sta	HMP0+1	; 24
   1051  1e73
   1052  1e73		       a4 82		      ldy	player0x+2
   1053  1e75		       b9 91 1d 	      lda	Hmval,y
   1054  1e78		       85 22		      sta	HMP0+2	; 34
   1055  1e7a
   1056  1e7a		       a4 83		      ldy	player0x+3
   1057  1e7c		       b9 91 1d 	      lda	Hmval,y
   1058  1e7f		       85 23		      sta	HMP0+3	; 44
   1059  1e81
   1060  1e81		       a4 84		      ldy	player0x+4
   1061  1e83		       b9 91 1d 	      lda	Hmval,y
   1062  1e86		       85 24		      sta	HMP0+4	; 54
   1063  1e88
   1064  1e88		       85 02		      sta	WSYNC
   1065  1e8a		       85 2a		      sta	HMOVE
   1066  1e8c
   1067  1e8c				   myrts
   1068  1e8c		       60		      rts
   1069  1e8d
   1070  1e8d
   1071  1e8d				   pfsetup
   1072  1e8d
   1073  1e8d		       84 cb		      sty	temp1
   1074  1e8f		       85 cc		      sta	temp2
   1075  1e91		       86 cd		      stx	temp3
   1076  1e93		       a2 03		      ldx	#3
   1077  1e95				   pfsetupp
   1078  1e95		       bd 7d 1d 	      lda	dffraclow,x
   1079  1e98		       9d 50 10 	      sta	DF0LOW,x
   1080  1e9b		       bd 85 1d 	      lda	dffrachi,x
   1081  1e9e		       9d 68 10 	      sta	DF0HI,x
   1082  1ea1		       a5 cc		      lda	temp2
   1083  1ea3		       8d 59 10 	      sta	PARAMETER
   1084  1ea6		       a5 cd		      lda	temp3
   1085  1ea8		       8d 59 10 	      sta	PARAMETER
   1086  1eab		       8e 59 10 	      stx	PARAMETER
   1087  1eae		       8c 59 10 	      sty	PARAMETER
   1088  1eb1		       a9 01		      LDA	#1
   1089  1eb3		       8d 5a 10 	      sta	CALLFUNCTION
   1090  1eb6		       18		      clc
   1091  1eb7		       a5 cc		      lda	temp2
   1092  1eb9		       65 cb		      adc	temp1
   1093  1ebb		       85 cc		      sta	temp2
   1094  1ebd		       a5 cd		      lda	temp3
   1095  1ebf		       69 00		      adc	#0
   1096  1ec1		       85 cd		      sta	temp3
   1097  1ec3		       ca		      dex
   1098  1ec4		       10 cf		      bpl	pfsetupp
      0  1ec6					      RETURN
      1  1ec6				  -	      ifnconst	bankswitch
      2  1ec6				  -	      rts
      3  1ec6					      else
      4  1ec6		       4c e0 df 	      jmp	BS_return
      5  1ec9					      endif
   1100  1ec9
   1101  1ec9
   1102  1ec9				   scorekernel
   1103  1ec9				  -	      ifconst	minikernel
   1104  1ec9				  -			;; disable fast fetch, call the minikernel, and re-enable fast fetch
   1105  1ec9				  -	      lda	#255
   1106  1ec9				  -	      sta	FASTFETCH
   1107  1ec9				  -	      jsr	minikernel
   1108  1ec9				  -	      lda	#0
   1109  1ec9				  -	      sta.w	FASTFETCH
   1110  1ec9					      endif
   1111  1ec9		       a6 eb		      ldx	scorecolor
   1112  1ecb		       86 06		      stx	COLUP0
   1113  1ecd		       86 07		      stx	COLUP1
   1114  1ecf		       a2 00		      ldx	#0
   1115  1ed1		       86 0e		      STx	PF1
   1116  1ed3		       86 0b		      stx	REFP0
   1117  1ed5		       86 0c		      stx	REFP1
   1118  1ed7		       86 1b		      STx	GRP0
   1119  1ed9		       86 1c		      STx	GRP1
   1120  1edb		       86 0f		      STx	PF2
   1121  1edd		       86 2b		      stx	HMCLR
   1122  1edf		       86 1d		      stx	ENAM0
   1123  1ee1		       86 1e		      stx	ENAM1
   1124  1ee3		       86 1f		      stx	ENABL
   1125  1ee5
   1126  1ee5
   1127  1ee5				  -	      ifconst	pfscore
   1128  1ee5				  -	      lda	pfscorecolor
   1129  1ee5				  -	      sta	COLUPF
   1130  1ee5					      endif
   1131  1ee5
   1132  1ee5				  -	      ifconst	noscore
   1133  1ee5				  -	      ldx	#10
   1134  1ee5				  -noscoreloop
   1135  1ee5				  -	      sta	WSYNC
   1136  1ee5				  -	      dex
   1137  1ee5				  -	      bpl	noscoreloop
   1138  1ee5				  -	      rts
   1139  1ee5					      else
   1140  1ee5
   1141  1ee5		       85 2b		      sta	HMCLR
   1142  1ee7		       a2 f0		      ldx	#$f0
   1143  1ee9		       86 20		      stx	HMP0
   1144  1eeb
   1145  1eeb							; set up fetchers 0-5 to handle score digits
   1146  1eeb		       a2 45		      ldx	#<(scoredata)
   1147  1eed		       8e 56 10 	      stx	DF6LOW
   1148  1ef0		       a2 0b		      ldx	#(>(scoredata)) & $0F
   1149  1ef2		       8e 6e 10 	      stx	DF6HI
   1150  1ef5		       a2 4d		      ldx	#<(scoredata+8)
   1151  1ef7		       8e 50 10 	      stx	DF0LOW
   1152  1efa		       a2 0b		      ldx	#(>(scoredata+8)) & $0F
   1153  1efc		       8e 68 10 	      stx	DF0HI
   1154  1eff		       a2 55		      ldx	#<(scoredata+16)
   1155  1f01		       8e 51 10 	      stx	DF1LOW
   1156  1f04							; cycle 0??
   1157  1f04		       a2 0b		      ldx	#(>(scoredata+16)) & $0F
   1158  1f06		       8e 69 10 	      stx	DF1HI
   1159  1f09		       a2 5d		      ldx	#<(scoredata+24)
   1160  1f0b		       8e 52 10 	      stx	DF2LOW
   1161  1f0e		       a2 0b		      ldx	#(>(scoredata+24)) & $0F
   1162  1f10		       8e 6a 10 	      stx	DF2HI
   1163  1f13
   1164  1f13		       85 02		      sta	WSYNC
   1165  1f15		       a2 00		      ldx	#0
   1166  1f17		       86 1b		      STx	GRP0
   1167  1f19		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   1168  1f1b
   1169  1f1b		       a2 65		      ldx	#<(scoredata+32)
   1170  1f1d		       8e 53 10 	      stx	DF3LOW
   1171  1f20		       a2 0b		      ldx	#(>(scoredata+32)) & $0F
   1172  1f22		       8e 6b 10 	      stx	DF3HI
   1173  1f25		       a2 6d		      ldx	#<(scoredata+40)
   1174  1f27		       8e 54 10 	      stx	DF4LOW
   1175  1f2a		       a2 0b		      ldx	#(>(scoredata+40)) & $0F
   1176  1f2c		       8e 6c 10 	      stx	DF4HI
   1177  1f2f
   1178  1f2f		       a0 07		      LDY	#7
   1179  1f31		       a2 03		      LDx	#$03
   1180  1f33		       84 25		      STY	VDELP0
   1181  1f35		       85 10		      STA	RESP0
   1182  1f37		       85 11		      STA	RESP1
   1183  1f39		       84 cb		      sty	temp1
   1184  1f3b
   1185  1f3b		       86 04		      STx	NUSIZ0
   1186  1f3d		       86 05		      STx	NUSIZ1
   1187  1f3f		       86 26		      STx	VDELP1
   1188  1f41		       a2 75		      ldx	#<(scoredata+48)
   1189  1f43		       8e 55 10 	      stx	DF5LOW
   1190  1f46		       a2 0b		      ldx	#(>(scoredata+48)) & $0F
   1191  1f48		       8e 6d 10 	      stx	DF5HI
   1192  1f4b		       8d 2a 00 	      STA.w	HMOVE	; cycle 73 ?
   1193  1f4e				   scoreloop
   1194  1f4e		       a9 0e		      lda	#<DF6DATA	;59
   1195  1f50		       85 06		      sta	COLUP0	;62
   1196  1f52		       85 07		      sta	COLUP1	;65
   1197  1f54		       a9 09		      lda	#<DF1DATA	;75
   1198  1f56		       85 1b		      sta	GRP0	;2
   1199  1f58		       a9 08		      lda	#<DF0DATA	;4
   1200  1f5a		       85 1c		      sta	GRP1	;7
   1201  1f5c		       a9 0b		      lda	#<DF3DATA	;9
   1202  1f5e		       85 1b		      sta	GRP0	;12
   1203  1f60
   1204  1f60							; REVENG - rearranged to correct pf write timing and A register overwrite
   1205  1f60				  -	      ifconst	pfscore
   1206  1f60				  -	      lda	pfscore1
   1207  1f60				  -	      sta	PF1
   1208  1f60					      else
      0  1f60					      sleep	6
      1  1f60				   .CYCLES    SET	6
      2  1f60
      3  1f60				  -	      IF	.CYCLES < 2
      4  1f60				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f60				  -	      ERR
      6  1f60					      ENDIF
      7  1f60
      8  1f60				  -	      IF	.CYCLES & 1
      9  1f60				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f60				  -	      nop	0
     11  1f60				  -	      ELSE
     12  1f60				  -	      bit	VSYNC
     13  1f60				  -	      ENDIF
     14  1f60				  -.CYCLES    SET	.CYCLES - 3
     15  1f60					      ENDIF
     16  1f60
     17  1f60					      REPEAT	.CYCLES / 2
     18  1f60		       ea		      nop
     17  1f60					      REPEND
     18  1f61		       ea		      nop
     17  1f61					      REPEND
     18  1f62		       ea		      nop
     19  1f63					      REPEND
   1210  1f63					      endif
      0  1f63					      sleep	5
      1  1f63				   .CYCLES    SET	5
      2  1f63
      3  1f63				  -	      IF	.CYCLES < 2
      4  1f63				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f63				  -	      ERR
      6  1f63					      ENDIF
      7  1f63
      8  1f63					      IF	.CYCLES & 1
      9  1f63					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f63		       04 00		      nop	0
     11  1f65				  -	      ELSE
     12  1f65				  -	      bit	VSYNC
     13  1f65					      ENDIF
     14  1f65				   .CYCLES    SET	.CYCLES - 3
     15  1f65					      ENDIF
     16  1f65
     17  1f65					      REPEAT	.CYCLES / 2
     18  1f65		       ea		      nop
     19  1f66					      REPEND
   1212  1f66		       ae 0a 10 	      ldx	DF2DATA	;16
   1213  1f69		       ac 0d 10 	      ldy	DF5DATA	;20
   1214  1f6c		       a9 0c		      lda	#<DF4DATA	;22 
   1215  1f6e
   1216  1f6e		       86 1c		      stx	GRP1	;40
   1217  1f70		       84 1b		      sty	GRP0	;43
   1218  1f72		       85 1c		      sta	GRP1	;46
   1219  1f74		       85 1b		      sta	GRP0	;49
   1220  1f76				  -	      ifconst	pfscore
   1221  1f76				  -	      lda	pfscore2
   1222  1f76				  -	      sta	PF1
   1223  1f76					      else
      0  1f76					      sleep	6
      1  1f76				   .CYCLES    SET	6
      2  1f76
      3  1f76				  -	      IF	.CYCLES < 2
      4  1f76				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f76				  -	      ERR
      6  1f76					      ENDIF
      7  1f76
      8  1f76				  -	      IF	.CYCLES & 1
      9  1f76				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f76				  -	      nop	0
     11  1f76				  -	      ELSE
     12  1f76				  -	      bit	VSYNC
     13  1f76				  -	      ENDIF
     14  1f76				  -.CYCLES    SET	.CYCLES - 3
     15  1f76					      ENDIF
     16  1f76
     17  1f76					      REPEAT	.CYCLES / 2
     18  1f76		       ea		      nop
     17  1f76					      REPEND
     18  1f77		       ea		      nop
     17  1f77					      REPEND
     18  1f78		       ea		      nop
     19  1f79					      REPEND
   1225  1f79					      endif
   1226  1f79							; sleep 2 ;57
      0  1f79					      sleep	6
      1  1f79				   .CYCLES    SET	6
      2  1f79
      3  1f79				  -	      IF	.CYCLES < 2
      4  1f79				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f79				  -	      ERR
      6  1f79					      ENDIF
      7  1f79
      8  1f79				  -	      IF	.CYCLES & 1
      9  1f79				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f79				  -	      nop	0
     11  1f79				  -	      ELSE
     12  1f79				  -	      bit	VSYNC
     13  1f79				  -	      ENDIF
     14  1f79				  -.CYCLES    SET	.CYCLES - 3
     15  1f79					      ENDIF
     16  1f79
     17  1f79					      REPEAT	.CYCLES / 2
     18  1f79		       ea		      nop
     17  1f79					      REPEND
     18  1f7a		       ea		      nop
     17  1f7a					      REPEND
     18  1f7b		       ea		      nop
     19  1f7c					      REPEND
   1228  1f7c		       c6 cb		      dec	temp1	;70
   1229  1f7e		       10 ce		      bpl	scoreloop	;72/73
   1230  1f80		       a2 00		      LDx	#0
   1231  1f82		       86 0e		      stx	PF1
   1232  1f84		       86 1b		      STx	GRP0
   1233  1f86		       86 1c		      STx	GRP1
   1234  1f88		       86 25		      STx	VDELP0
   1235  1f8a		       86 26		      STx	VDELP1	;do we need these
   1236  1f8c		       86 04		      STx	NUSIZ0
   1237  1f8e		       86 05		      STx	NUSIZ1
   1238  1f90
   1239  1f90		       60		      rts
   1240  1f91
   1241  1f91
   1242  1f91					      endif		; noscore
   1243  1f91				   game
   1244  1f91				   .
   1245  1f91							; 
   1246  1f91
   1247  1f91				   .
   1248  1f91							; 
   1249  1f91
   1250  1f91				   .
   1251  1f91							; 
   1252  1f91
   1253  1f91				   .
   1254  1f91							; 
   1255  1f91
   1256  1f91				   .
   1257  1f91							; 
   1258  1f91
   1259  1f91				   .L00 		;  set kernel DPC + 
   1260  1f91
   1261  1f91				   .L01 		;  set optimization inlinerand
   1262  1f91
   1263  1f91				   .L02 		;  set kernel_options collision(player1,playfield)
   1264  1f91
   1265  1f91		       00 43	   DPC_kernel_options =	CXP1FB+$40
   1266  1f91				   .L03 		;  set smartbranching on
   1267  1f91
   1268  1f91				   .L04 		;  set tv ntsc
   1269  1f91
   1270  1f91				   .
   1271  1f91							; 
   1272  1f91
   1273  1f91				   .
   1274  1f91							; 
   1275  1f91
   1276  1f91				   .L05 		;  const font	=  retroputer
   1277  1f91
   1278  1f91				   .L06 		;  const _00  =  $00
   1279  1f91
   1280  1f91				   .L07 		;  const _02  =  $02
   1281  1f91
   1282  1f91				   .L08 		;  const _04  =  $04
   1283  1f91
   1284  1f91				   .L09 		;  const _06  =  $06
   1285  1f91
   1286  1f91				   .L010		;  const _08  =  $08
   1287  1f91
   1288  1f91				   .L011		;  const _0A  =  $0A
   1289  1f91
   1290  1f91				   .L012		;  const _0C  =  $0C
   1291  1f91
   1292  1f91				   .L013		;  const _0E  =  $0E
   1293  1f91
   1294  1f91				   .L014		;  const _10  =  $10
   1295  1f91
   1296  1f91				   .L015		;  const _12  =  $12
   1297  1f91
   1298  1f91				   .L016		;  const _14  =  $14
   1299  1f91
   1300  1f91				   .L017		;  const _16  =  $16
   1301  1f91
   1302  1f91				   .L018		;  const _18  =  $18
   1303  1f91
   1304  1f91				   .L019		;  const _1A  =  $1A
   1305  1f91
   1306  1f91				   .L020		;  const _1C  =  $1C
   1307  1f91
   1308  1f91				   .L021		;  const _1E  =  $1E
   1309  1f91
   1310  1f91				   .L022		;  const _20  =  $20
   1311  1f91
   1312  1f91				   .L023		;  const _22  =  $22
   1313  1f91
   1314  1f91				   .L024		;  const _24  =  $24
   1315  1f91
   1316  1f91				   .L025		;  const _26  =  $26
   1317  1f91
   1318  1f91				   .L026		;  const _28  =  $28
   1319  1f91
   1320  1f91				   .L027		;  const _2A  =  $2A
   1321  1f91
   1322  1f91				   .L028		;  const _2C  =  $2C
   1323  1f91
   1324  1f91				   .L029		;  const _2E  =  $2E
   1325  1f91
   1326  1f91				   .L030		;  const _30  =  $30
   1327  1f91
   1328  1f91				   .L031		;  const _32  =  $32
   1329  1f91
   1330  1f91				   .L032		;  const _34  =  $34
   1331  1f91
   1332  1f91				   .L033		;  const _36  =  $36
   1333  1f91
   1334  1f91				   .L034		;  const _38  =  $38
   1335  1f91
   1336  1f91				   .L035		;  const _3A  =  $3A
   1337  1f91
   1338  1f91				   .L036		;  const _3C  =  $3C
   1339  1f91
   1340  1f91				   .L037		;  const _3E  =  $3E
   1341  1f91
   1342  1f91				   .L038		;  const _40  =  $40
   1343  1f91
   1344  1f91				   .L039		;  const _42  =  $42
   1345  1f91
   1346  1f91				   .L040		;  const _44  =  $44
   1347  1f91
   1348  1f91				   .L041		;  const _46  =  $46
   1349  1f91
   1350  1f91				   .L042		;  const _48  =  $48
   1351  1f91
   1352  1f91				   .L043		;  const _4A  =  $4A
   1353  1f91
   1354  1f91				   .L044		;  const _4C  =  $4C
   1355  1f91
   1356  1f91				   .L045		;  const _4E  =  $4E
   1357  1f91
   1358  1f91				   .L046		;  const _50  =  $50
   1359  1f91
   1360  1f91				   .L047		;  const _52  =  $52
   1361  1f91
   1362  1f91				   .L048		;  const _54  =  $54
   1363  1f91
   1364  1f91				   .L049		;  const _56  =  $56
   1365  1f91
   1366  1f91				   .L050		;  const _58  =  $58
   1367  1f91
   1368  1f91				   .L051		;  const _5A  =  $5A
   1369  1f91
   1370  1f91				   .L052		;  const _5C  =  $5C
   1371  1f91
   1372  1f91				   .L053		;  const _5E  =  $5E
   1373  1f91
   1374  1f91				   .L054		;  const _60  =  $60
   1375  1f91
   1376  1f91				   .L055		;  const _62  =  $62
   1377  1f91
   1378  1f91				   .L056		;  const _64  =  $64
   1379  1f91
   1380  1f91				   .L057		;  const _66  =  $66
   1381  1f91
   1382  1f91				   .L058		;  const _68  =  $68
   1383  1f91
   1384  1f91				   .L059		;  const _6A  =  $6A
   1385  1f91
   1386  1f91				   .L060		;  const _6C  =  $6C
   1387  1f91
   1388  1f91				   .L061		;  const _6E  =  $6E
   1389  1f91
   1390  1f91				   .L062		;  const _70  =  $70
   1391  1f91
   1392  1f91				   .L063		;  const _72  =  $72
   1393  1f91
   1394  1f91				   .L064		;  const _74  =  $74
   1395  1f91
   1396  1f91				   .L065		;  const _76  =  $76
   1397  1f91
   1398  1f91				   .L066		;  const _78  =  $78
   1399  1f91
   1400  1f91				   .L067		;  const _7A  =  $7A
   1401  1f91
   1402  1f91				   .L068		;  const _7C  =  $7C
   1403  1f91
   1404  1f91				   .L069		;  const _7E  =  $7E
   1405  1f91
   1406  1f91				   .L070		;  const _80  =  $80
   1407  1f91
   1408  1f91				   .L071		;  const _82  =  $82
   1409  1f91
   1410  1f91				   .L072		;  const _84  =  $84
   1411  1f91
   1412  1f91				   .L073		;  const _86  =  $86
   1413  1f91
   1414  1f91				   .L074		;  const _88  =  $88
   1415  1f91
   1416  1f91				   .L075		;  const _8A  =  $8A
   1417  1f91
   1418  1f91				   .L076		;  const _8C  =  $8C
   1419  1f91
   1420  1f91				   .L077		;  const _8E  =  $8E
   1421  1f91
   1422  1f91				   .L078		;  const _90  =  $90
   1423  1f91
   1424  1f91				   .L079		;  const _92  =  $92
   1425  1f91
   1426  1f91				   .L080		;  const _94  =  $94
   1427  1f91
   1428  1f91				   .L081		;  const _96  =  $96
   1429  1f91
   1430  1f91				   .L082		;  const _98  =  $98
   1431  1f91
   1432  1f91				   .L083		;  const _9A  =  $9A
   1433  1f91
   1434  1f91				   .L084		;  const _9C  =  $9C
   1435  1f91
   1436  1f91				   .L085		;  const _9E  =  $9E
   1437  1f91
   1438  1f91				   .L086		;  const _A0  =  $A0
   1439  1f91
   1440  1f91				   .L087		;  const _A2  =  $A2
   1441  1f91
   1442  1f91				   .L088		;  const _A4  =  $A4
   1443  1f91
   1444  1f91				   .L089		;  const _A6  =  $A6
   1445  1f91
   1446  1f91				   .L090		;  const _A8  =  $A8
   1447  1f91
   1448  1f91				   .L091		;  const _AA  =  $AA
   1449  1f91
   1450  1f91				   .L092		;  const _AC  =  $AC
   1451  1f91
   1452  1f91				   .L093		;  const _AE  =  $AE
   1453  1f91
   1454  1f91				   .L094		;  const _B0  =  $B0
   1455  1f91
   1456  1f91				   .L095		;  const _B2  =  $B2
   1457  1f91
   1458  1f91				   .L096		;  const _B4  =  $B4
   1459  1f91
   1460  1f91				   .L097		;  const _B6  =  $B6
   1461  1f91
   1462  1f91				   .L098		;  const _B8  =  $B8
   1463  1f91
   1464  1f91				   .L099		;  const _BA  =  $BA
   1465  1f91
   1466  1f91				   .L0100		;  const _BC  =  $BC
   1467  1f91
   1468  1f91				   .L0101		;  const _BE  =  $BE
   1469  1f91
   1470  1f91				   .L0102		;  const _C0  =  $C0
   1471  1f91
   1472  1f91				   .L0103		;  const _C2  =  $C2
   1473  1f91
   1474  1f91				   .L0104		;  const _C4  =  $C4
   1475  1f91
   1476  1f91				   .L0105		;  const _C6  =  $C6
   1477  1f91
   1478  1f91				   .L0106		;  const _C8  =  $C8
   1479  1f91
   1480  1f91				   .L0107		;  const _CA  =  $CA
   1481  1f91
   1482  1f91				   .L0108		;  const _CC  =  $CC
   1483  1f91
   1484  1f91				   .L0109		;  const _CE  =  $CE
   1485  1f91
   1486  1f91				   .L0110		;  const _D0  =  $D0
   1487  1f91
   1488  1f91				   .L0111		;  const _D2  =  $D2
   1489  1f91
   1490  1f91				   .L0112		;  const _D4  =  $D4
   1491  1f91
   1492  1f91				   .L0113		;  const _D6  =  $D6
   1493  1f91
   1494  1f91				   .L0114		;  const _D8  =  $D8
   1495  1f91
   1496  1f91				   .L0115		;  const _DA  =  $DA
   1497  1f91
   1498  1f91				   .L0116		;  const _DC  =  $DC
   1499  1f91
   1500  1f91				   .L0117		;  const _DE  =  $DE
   1501  1f91
   1502  1f91				   .L0118		;  const _E0  =  $E0
   1503  1f91
   1504  1f91				   .L0119		;  const _E2  =  $E2
   1505  1f91
   1506  1f91				   .L0120		;  const _E4  =  $E4
   1507  1f91
   1508  1f91				   .L0121		;  const _E6  =  $E6
   1509  1f91
   1510  1f91				   .L0122		;  const _E8  =  $E8
   1511  1f91
   1512  1f91				   .L0123		;  const _EA  =  $EA
   1513  1f91
   1514  1f91				   .L0124		;  const _EC  =  $EC
   1515  1f91
   1516  1f91				   .L0125		;  const _EE  =  $EE
   1517  1f91
   1518  1f91				   .L0126		;  const _F0  =  $F0
   1519  1f91
   1520  1f91				   .L0127		;  const _F2  =  $F2
   1521  1f91
   1522  1f91				   .L0128		;  const _F4  =  $F4
   1523  1f91
   1524  1f91				   .L0129		;  const _F6  =  $F6
   1525  1f91
   1526  1f91				   .L0130		;  const _F8  =  $F8
   1527  1f91
   1528  1f91				   .L0131		;  const _FA  =  $FA
   1529  1f91
   1530  1f91				   .L0132		;  const _FC  =  $FC
   1531  1f91
   1532  1f91				   .L0133		;  const _FE  =  $FE
   1533  1f91
   1534  1f91				   .
   1535  1f91							; 
   1536  1f91
   1537  1f91				   .L0134		;  goto __Bank_2 bank2
   1538  1f91
   1539  1f91		       85 81		      sta	temp7
   1540  1f93		       a9 30		      lda	#>(.__Bank_2-1)
   1541  1f95		       48		      pha
   1542  1f96		       a9 ed		      lda	#<(.__Bank_2-1)
   1543  1f98		       48		      pha
   1544  1f99		       a5 81		      lda	temp7
   1545  1f9b		       48		      pha
   1546  1f9c		       8a		      txa
   1547  1f9d		       48		      pha
   1548  1f9e		       a2 02		      ldx	#2
   1549  1fa0		       4c ee df 	      jmp	BS_jsr
   1550  1fa3				   .
   1551  1fa3							; 
   1552  1fa3
   1553  1fa3				   .L0135		;  bank 2
   1554  1fa3
   1555  1fa3					      if	ECHO1
      49 bytes of ROM space left in bank 1
   1556  1fa3					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   1557  1fa3					      endif
   1558  1fa3		       00 01	   ECHO1      =	1
   1559  1fd4					      ORG	$1FF4-bscode_length
   1560  1fd4					      RORG	$1FF4-bscode_length
   1561  1fd4		       a2 ff	   start_bank1 ldx	#$ff
   1562  1fd6					      ifconst	FASTFETCH	; using DPC+
   1563  1fd6		       8e 58 10 	      stx	FASTFETCH
   1564  1fd9					      endif
   1565  1fd9		       9a		      txs
   1566  1fda				  -	      if	bankswitch == 64
   1567  1fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   1568  1fda					      else
   1569  1fda		       a9 18		      lda	#>(start-1)
   1570  1fdc					      endif
   1571  1fdc		       48		      pha
   1572  1fdd		       a9 e3		      lda	#<(start-1)
   1573  1fdf		       48		      pha
   1574  1fe0		       48		      pha
   1575  1fe1		       8a		      txa
   1576  1fe2		       48		      pha
   1577  1fe3		       ba		      tsx
   1578  1fe4					      if	bankswitch != 64
   1579  1fe4		       b5 04		      lda	4,x	; get high byte of return address
   1580  1fe6		       2a		      rol
   1581  1fe7		       2a		      rol
   1582  1fe8		       2a		      rol
   1583  1fe9		       2a		      rol
   1584  1fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   1585  1fec		       aa		      tax
   1586  1fed		       e8		      inx
   1587  1fee				  -	      else
   1588  1fee				  -	      lda	4,x	; get high byte of return address
   1589  1fee				  -	      tay
   1590  1fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   1591  1fee				  -	      sta	4,x
   1592  1fee				  -	      tya
   1593  1fee				  -	      lsr
   1594  1fee				  -	      lsr
   1595  1fee				  -	      lsr
   1596  1fee				  -	      lsr
   1597  1fee				  -	      tax
   1598  1fee				  -	      inx
   1599  1fee					      endif
   1600  1fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   1601  1ff1		       68		      pla
   1602  1ff2		       aa		      tax
   1603  1ff3		       68		      pla
   1604  1ff4		       60		      rts
   1605  1ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   1606  1ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   1607  1ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   1608  1ff5					      endif
   1609  1ffc					      ORG	$1FFC
   1610  1ffc					      RORG	$1FFC
   1611  1ffc		       d4 1f		      .word.w	(start_bank1 & $ffff)
   1612  1ffe		       d4 1f		      .word.w	(start_bank1 & $ffff)
   1613  2000					      ORG	$2000
   1614  2000					      RORG	$3000
   1615  2000				   HMdiv
   1616  2000		       00 00 00 00*	      .byte.b	0, 0, 0, 0, 0, 0, 0
   1617  2007		       01 01 01 01*	      .byte.b	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
   1618  2017		       02 02 02 02*	      .byte.b	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3
   1619  2027		       03 03 03 03*	      .byte.b	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4
   1620  2037		       04 04 04 04*	      .byte.b	4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5
   1621  2047		       05 05 05 05*	      .byte.b	5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6
   1622  2057		       06 06 06 06*	      .byte.b	6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7
   1623  2067		       07 07 07 07*	      .byte.b	7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8
   1624  2077		       08 08 08 08*	      .byte.b	8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9
   1625  2087		       09 09 09 09*	      .byte.b	9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10
   1626  2097		       0a 0a 0a 0a*	      .byte.b	10,10,10,10,10,10,0,0,0
   1627  20a0				   .L0136		;  temp1 = temp1
   1628  20a0
   1629  20a0		       a5 cb		      LDA	temp1
   1630  20a2		       85 cb		      STA	temp1
   1631  20a4				   .__Reset
   1632  20a4							; __Reset
   1633  20a4
   1634  20a4				   .
   1635  20a4							; 
   1636  20a4
   1637  20a4				   .
   1638  20a4							; 
   1639  20a4
   1640  20a4				   .L0137		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   1641  20a4
   1642  20a4		       a9 00		      LDA	#0
   1643  20a6		       85 d1		      STA	a
   1644  20a8		       85 d2		      STA	b
   1645  20aa		       85 d3		      STA	c
   1646  20ac		       85 d4		      STA	d
   1647  20ae		       85 d5		      STA	e
   1648  20b0		       85 d6		      STA	f
   1649  20b2		       85 d7		      STA	g
   1650  20b4		       85 d8		      STA	h
   1651  20b6		       85 d9		      STA	i
   1652  20b8				   .L0138		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   1653  20b8
   1654  20b8		       a9 00		      LDA	#0
   1655  20ba		       85 da		      STA	j
   1656  20bc		       85 db		      STA	k
   1657  20be		       85 dc		      STA	l
   1658  20c0		       85 dd		      STA	m
   1659  20c2		       85 de		      STA	n
   1660  20c4		       85 df		      STA	o
   1661  20c6		       85 e0		      STA	p
   1662  20c8		       85 e1		      STA	q
   1663  20ca		       85 e2		      STA	r
   1664  20cc				   .L0139		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  y  =  0  :	z  =  0  :  var0  =  0
   1665  20cc
   1666  20cc		       a9 00		      LDA	#0
   1667  20ce		       85 e3		      STA	s
   1668  20d0		       85 e4		      STA	t
   1669  20d2		       85 e5		      STA	u
   1670  20d4		       85 e6		      STA	v
   1671  20d6		       85 e7		      STA	w
   1672  20d8		       85 e8		      STA	x
   1673  20da		       85 e9		      STA	y
   1674  20dc		       85 ea		      STA	z
   1675  20de		       85 ec		      STA	var0
   1676  20e0				   .L0140		;  var1  =  0	:  var2  =  0  :  var3	=  0  :  var4  =  0  :	var5  =  0  :  var6  =	0
   1677  20e0
   1678  20e0		       a9 00		      LDA	#0
   1679  20e2		       85 ed		      STA	var1
   1680  20e4		       85 ee		      STA	var2
   1681  20e6		       85 ef		      STA	var3
   1682  20e8		       85 f0		      STA	var4
   1683  20ea		       85 f1		      STA	var5
   1684  20ec		       85 f2		      STA	var6
   1685  20ee				   .
   1686  20ee							; 
   1687  20ee
   1688  20ee				   .__Bank_2
   1689  20ee							; __Bank_2
   1690  20ee
   1691  20ee				   .
   1692  20ee							; 
   1693  20ee
   1694  20ee				   .__Variables
   1695  20ee							; __Variables
   1696  20ee
   1697  20ee				   .
   1698  20ee							; 
   1699  20ee
   1700  20ee				   .L0141		;  const _P_Edge_Top  =  9
   1701  20ee
   1702  20ee				   .L0142		;  const _P_Edge_Bottom  =  160
   1703  20ee
   1704  20ee				   .L0143		;  const _P_Edge_Left	=  0
   1705  20ee
   1706  20ee				   .L0144		;  const _P_Edge_Right  =  150
   1707  20ee
   1708  20ee				   .L0145		;  const splitscore_2_4  =  1
   1709  20ee
   1710  20ee				   .L0146		;  const SPLIT_KERN_BIT  =  BIT_7
   1711  20ee
   1712  20ee				   .L0147		;  dim EnemyHit  =  i
   1713  20ee
   1714  20ee				   .L0148		;  dim drop  =  a
   1715  20ee
   1716  20ee				   .L0149		;  dim Moverate  = b
   1717  20ee
   1718  20ee				   .L0150		;  dim EnemySpeed  =  c
   1719  20ee
   1720  20ee				   .L0151		;  dim Points	=  d
   1721  20ee
   1722  20ee				   .L0152		;  dim frame  = f
   1723  20ee
   1724  20ee				   .L0153		;  dim Bit2_EnemyMove	= z
   1725  20ee
   1726  20ee				   .L0154		;  dim level  =  l
   1727  20ee
   1728  20ee				   .L0155		;  dim Bit1_missleOn  = z
   1729  20ee
   1730  20ee				   .L0156		;  dim HealthDrop  =  n
   1731  20ee
   1732  20ee				   .L0157		;  dim delay  =  o
   1733  20ee
   1734  20ee				   .L0158		;  dim Bit3_ShootorNot  = z
   1735  20ee
   1736  20ee				   .L0159		;  dim Househit  =  q
   1737  20ee
   1738  20ee				   .L0160		;  dim Timer  = t
   1739  20ee
   1740  20ee				   .L0161		;  dim Bit4_gameover  =  z
   1741  20ee
   1742  20ee				   .L0162		;  dim REdge  =  g
   1743  20ee
   1744  20ee				   .L0163		;  dim LEdge  =  s
   1745  20ee
   1746  20ee				   .L0164		;  dim V1  =  h
   1747  20ee
   1748  20ee				   .L0165		;  dim Ch1_Sound  =  j
   1749  20ee
   1750  20ee				   .L0166		;  dim Ch1_Duration  =  k
   1751  20ee
   1752  20ee				   .L0167		;  dim Ch1_Counter  =	p
   1753  20ee
   1754  20ee				   .L0168		;  dim V0  =  v
   1755  20ee
   1756  20ee				   .L0169		;  dim Ch0_Sound  =  w
   1757  20ee
   1758  20ee				   .L0170		;  dim Ch0_Duration  =  x
   1759  20ee
   1760  20ee				   .L0171		;  dim Ch0_Counter  =	y
   1761  20ee
   1762  20ee				   .L0172		;  dim Bit5_hit  =  z
   1763  20ee
   1764  20ee				   .L0173		;  dim Bit0_NewLevel  =  z
   1765  20ee
   1766  20ee				   .L0174		;  dim PlayerDamage  =  m
   1767  20ee
   1768  20ee				   .L0175		;  dim gamenumber = u
   1769  20ee
   1770  20ee				   .L0176		;  dim swdebounce = v
   1771  20ee
   1772  20ee				   .L0177		;  dim splitKernelVar	=  r
   1773  20ee
   1774  20ee				   .L0178		;  dim PlayerHealth  =  e
   1775  20ee
   1776  20ee				   .
   1777  20ee							; 
   1778  20ee
   1779  20ee				   .L0179		;  swdebounce = 0
   1780  20ee
   1781  20ee		       a9 00		      LDA	#0
   1782  20f0		       85 e6		      STA	swdebounce
   1783  20f2				   .L0180		;  gamenumber = 1
   1784  20f2
   1785  20f2		       a9 01		      LDA	#1
   1786  20f4		       85 e5		      STA	gamenumber
   1787  20f6				   .__titlepage
   1788  20f6							; __titlepage
   1789  20f6
   1790  20f6				   .L0181		;  delay  =  delay  + 1
   1791  20f6
   1792  20f6		       e6 df		      INC	delay
   1793  20f8				   .L0182		;  if Bit0_NewLevel{0}  &&  delay  <  120 then __TitleDelay
   1794  20f8
   1795  20f8		       a5 ea		      LDA	Bit0_NewLevel
   1796  20fa		       4a		      LSR
   1797  20fb		       90 06		      BCC	.skipL0182
   1798  20fd				   .condpart0
   1799  20fd		       a5 df		      LDA	delay
   1800  20ff		       c9 78		      CMP	#120
   1801  2101					      if	((* - .__TitleDelay) < 127) && ((* - .__TitleDelay) > -128)
   1802  2101		       90 56		      bcc	.__TitleDelay
   1803  2103				  -	      else
   1804  2103				  -	      bcs	.0skip__TitleDelay
   1805  2103				  -	      jmp	.__TitleDelay
   1806  2103				  -.0skip__TitleDelay
   1807  2103					      endif
   1808  2103				   .skipL0182
   1809  2103				   .L0183		;  gosub __Titlesceen bank6
   1810  2103
   1811  2103		       85 81		      sta	temp7
   1812  2105		       a9 31		      lda	#>(ret_point1-1)
   1813  2107		       48		      pha
   1814  2108		       a9 1a		      lda	#<(ret_point1-1)
   1815  210a		       48		      pha
   1816  210b		       a9 b0		      lda	#>(.__Titlesceen-1)
   1817  210d		       48		      pha
   1818  210e		       a9 84		      lda	#<(.__Titlesceen-1)
   1819  2110		       48		      pha
   1820  2111		       a5 81		      lda	temp7
   1821  2113		       48		      pha
   1822  2114		       8a		      txa
   1823  2115		       48		      pha
   1824  2116		       a2 06		      ldx	#6
   1825  2118		       4c ee df 	      jmp	BS_jsr
   1826  211b				   ret_point1
   1827  211b				   .L0184		;  if joy0fire  ||  switchreset then goto __Gamestart
   1828  211b
   1829  211b		       24 0c		      bit	INPT4
   1830  211d		       30 03		      BMI	.skipL0184
   1831  211f				   .condpart1
   1832  211f		       4c 29 31 	      jmp	.condpart2
   1833  2122				   .skipL0184
   1834  2122		       a9 01		      lda	#1
   1835  2124		       2c 82 02 	      bit	SWCHB
   1836  2127		       d0 03		      BNE	.skip1OR
   1837  2129				   .condpart2
   1838  2129		       4c 5c 31 	      jmp	.__Gamestart
   1839  212c
   1840  212c				   .skip1OR
   1841  212c				   .L0185		;  if !switchselect then swdebounce = 0
   1842  212c
   1843  212c		       a9 02		      lda	#2
   1844  212e		       2c 82 02 	      bit	SWCHB
   1845  2131		       f0 04		      BEQ	.skipL0185
   1846  2133				   .condpart3
   1847  2133		       a9 00		      LDA	#0
   1848  2135		       85 e6		      STA	swdebounce
   1849  2137				   .skipL0185
   1850  2137				   .L0186		;  if swdebounce > 0 then swdebounce = swdebounce - 1 :  goto __titlepage
   1851  2137
   1852  2137		       a9 00		      LDA	#0
   1853  2139		       c5 e6		      CMP	swdebounce
   1854  213b		       b0 05		      BCS	.skipL0186
   1855  213d				   .condpart4
   1856  213d		       c6 e6		      DEC	swdebounce
   1857  213f		       4c f6 30 	      jmp	.__titlepage
   1858  2142
   1859  2142				   .skipL0186
   1860  2142				   .L0187		;  if switchselect then swdebounce = 30 :  gamenumber = gamenumber + 1
   1861  2142
   1862  2142		       a9 02		      lda	#2
   1863  2144		       2c 82 02 	      bit	SWCHB
   1864  2147		       d0 06		      BNE	.skipL0187
   1865  2149				   .condpart5
   1866  2149		       a9 1e		      LDA	#30
   1867  214b		       85 e6		      STA	swdebounce
   1868  214d		       e6 e5		      INC	gamenumber
   1869  214f				   .skipL0187
   1870  214f				   .L0188		;  if gamenumber = 21 then gamenumber = 1
   1871  214f
   1872  214f		       a5 e5		      LDA	gamenumber
   1873  2151		       c9 15		      CMP	#21
   1874  2153		       d0 04		      BNE	.skipL0188
   1875  2155				   .condpart6
   1876  2155		       a9 01		      LDA	#1
   1877  2157		       85 e5		      STA	gamenumber
   1878  2159				   .skipL0188
   1879  2159				   .
   1880  2159							; 
   1881  2159
   1882  2159				   .__TitleDelay
   1883  2159							; __TitleDelay
   1884  2159
   1885  2159				   .L0189		;  goto __titlepage
   1886  2159
   1887  2159		       4c f6 30 	      jmp	.__titlepage
   1888  215c
   1889  215c				   .
   1890  215c							; 
   1891  215c
   1892  215c				   .__Gamestart
   1893  215c							; __Gamestart
   1894  215c
   1895  215c				   .L0190		;  Ch0_Counter = 0 :  Ch0_Duration = 0 :  Ch0_Sound = 0
   1896  215c
   1897  215c		       a9 00		      LDA	#0
   1898  215e		       85 e9		      STA	Ch0_Counter
   1899  2160		       85 e8		      STA	Ch0_Duration
   1900  2162		       85 e7		      STA	Ch0_Sound
   1901  2164				   .L0191		;  Ch1_Counter = 0 :  Ch1_Sound = 0 :	Ch1_Duration = 0
   1902  2164
   1903  2164		       a9 00		      LDA	#0
   1904  2166		       85 e0		      STA	Ch1_Counter
   1905  2168		       85 da		      STA	Ch1_Sound
   1906  216a		       85 db		      STA	Ch1_Duration
   1907  216c				   .L0192		;  swdebounce = 0
   1908  216c
   1909  216c		       a9 00		      LDA	#0
   1910  216e		       85 e6		      STA	swdebounce
   1911  2170				   .L0193		;  if Bit0_NewLevel{0} then goto __NextLevel
   1912  2170
   1913  2170		       a5 ea		      LDA	Bit0_NewLevel
   1914  2172		       4a		      LSR
   1915  2173		       90 03		      BCC	.skipL0193
   1916  2175				   .condpart7
   1917  2175		       4c ca 31 	      jmp	.__NextLevel
   1918  2178
   1919  2178				   .skipL0193
   1920  2178				   .L0194		;  for Timer  =  1 to 255
   1921  2178
   1922  2178		       a9 01		      LDA	#1
   1923  217a		       85 e4		      STA	Timer
   1924  217c				   .L0194forTimer
   1925  217c				   .L0195		;  next Timer
   1926  217c
   1927  217c		       a5 e4		      LDA	Timer
   1928  217e		       c9 ff		      CMP	#255
   1929  2180
   1930  2180		       e6 e4		      INC	Timer
   1931  2182					      if	((* - .L0194forTimer) < 127) && ((* - .L0194forTimer) > -128)
   1932  2182		       90 f8		      bcc	.L0194forTimer
   1933  2184				  -	      else
   1934  2184				  -	      bcs	.1skipL0194forTimer
   1935  2184				  -	      jmp	.L0194forTimer
   1936  2184				  -.1skipL0194forTimer
   1937  2184					      endif
   1938  2184				   .L0196		;  AUDV0  =  0  :  AUDV1  =  0
   1939  2184
   1940  2184		       a9 00		      LDA	#0
   1941  2186		       85 19		      STA	AUDV0
   1942  2188		       85 1a		      STA	AUDV1
   1943  218a				   .L0197		;  if switchrightb then level = 0  : EnemySpeed  = 3
   1944  218a
   1945  218a		       2c 82 02 	      bit	SWCHB
   1946  218d		       30 08		      BMI	.skipL0197
   1947  218f				   .condpart8
   1948  218f		       a9 00		      LDA	#0
   1949  2191		       85 dc		      STA	level
   1950  2193		       a9 03		      LDA	#3
   1951  2195		       85 d3		      STA	EnemySpeed
   1952  2197				   .skipL0197
   1953  2197				   .L0198		;  if !switchrightb then level  = 2  : EnemySpeed = 5
   1954  2197
   1955  2197		       2c 82 02 	      bit	SWCHB
   1956  219a		       10 08		      BPL	.skipL0198
   1957  219c				   .condpart9
   1958  219c		       a9 02		      LDA	#2
   1959  219e		       85 dc		      STA	level
   1960  21a0		       a9 05		      LDA	#5
   1961  21a2		       85 d3		      STA	EnemySpeed
   1962  21a4				   .skipL0198
   1963  21a4				   .L0199		;  EnemySpeed	= 3
   1964  21a4
   1965  21a4		       a9 03		      LDA	#3
   1966  21a6		       85 d3		      STA	EnemySpeed
   1967  21a8				   .L0200		;  score = 000000
   1968  21a8
   1969  21a8		       a9 00		      LDA	#$00
   1970  21aa		       85 ba		      STA	score+2
   1971  21ac		       a9 00		      LDA	#$00
   1972  21ae		       85 b9		      STA	score+1
   1973  21b0		       a9 00		      LDA	#$00
   1974  21b2		       85 b8		      STA	score
   1975  21b4				   .L0201		;  Bit4_gameover{4}  = 0
   1976  21b4
   1977  21b4		       a5 ea		      LDA	Bit4_gameover
   1978  21b6		       29 ef		      AND	#239
   1979  21b8		       85 ea		      STA	Bit4_gameover
   1980  21ba				   .L0202		;  V0	= 2
   1981  21ba
   1982  21ba		       a9 02		      LDA	#2
   1983  21bc		       85 e6		      STA	V0
   1984  21be				   .L0203		;  Ch0_Duration  =  10
   1985  21be
   1986  21be		       a9 0a		      LDA	#10
   1987  21c0		       85 e8		      STA	Ch0_Duration
   1988  21c2				   .L0204		;  V1	= 2
   1989  21c2
   1990  21c2		       a9 02		      LDA	#2
   1991  21c4		       85 d8		      STA	V1
   1992  21c6				   .L0205		;  Ch1_Duration  =  10
   1993  21c6
   1994  21c6		       a9 0a		      LDA	#10
   1995  21c8		       85 db		      STA	Ch1_Duration
   1996  21ca				   .
   1997  21ca							; 
   1998  21ca
   1999  21ca				   .__NextLevel
   2000  21ca							; __NextLevel
   2001  21ca
   2002  21ca				   .L0206		;  Bit0_NewLevel{0}  =  0
   2003  21ca
   2004  21ca		       a5 ea		      LDA	Bit0_NewLevel
   2005  21cc		       29 fe		      AND	#254
   2006  21ce		       85 ea		      STA	Bit0_NewLevel
   2007  21d0				   .L0207		;  PlayerHealth  =  80
   2008  21d0
   2009  21d0		       a9 50		      LDA	#80
   2010  21d2		       85 d5		      STA	PlayerHealth
   2011  21d4				   .L0208		;  AUDV0  =  0  :  AUDV1  =  0
   2012  21d4
   2013  21d4		       a9 00		      LDA	#0
   2014  21d6		       85 19		      STA	AUDV0
   2015  21d8		       85 1a		      STA	AUDV1
   2016  21da				   .L0209		;  Ch0_Counter = 0 :  Ch0_Duration = 0 :  Ch0_Sound = 0
   2017  21da
   2018  21da		       a9 00		      LDA	#0
   2019  21dc		       85 e9		      STA	Ch0_Counter
   2020  21de		       85 e8		      STA	Ch0_Duration
   2021  21e0		       85 e7		      STA	Ch0_Sound
   2022  21e2				   .L0210		;  Ch1_Counter = 0 :  Ch1_Sound = 0 :	Ch1_Duration = 0
   2023  21e2
   2024  21e2		       a9 00		      LDA	#0
   2025  21e4		       85 e0		      STA	Ch1_Counter
   2026  21e6		       85 da		      STA	Ch1_Sound
   2027  21e8		       85 db		      STA	Ch1_Duration
   2028  21ea				   .L0211		;  delay  =  0
   2029  21ea
   2030  21ea		       a9 00		      LDA	#0
   2031  21ec		       85 df		      STA	delay
   2032  21ee				   .L0212		;  player5x  = 200 :  player5y  = 200
   2033  21ee
   2034  21ee		       a9 c8		      LDA	#200
   2035  21f0		       85 94		      STA	player5x
   2036  21f2		       85 9e		      STA	player5y
   2037  21f4				   .L0213		;  player6x  = 200 :  player6y  = 200
   2038  21f4
   2039  21f4		       a9 c8		      LDA	#200
   2040  21f6		       85 95		      STA	player6x
   2041  21f8		       85 9f		      STA	player6y
   2042  21fa				   .L0214		;  player7x  = 200 :  player7y  = 200
   2043  21fa
   2044  21fa		       a9 c8		      LDA	#200
   2045  21fc		       85 96		      STA	player7x
   2046  21fe		       85 a0		      STA	player7y
   2047  2200				   .L0215		;  player1y  =  25 :  player1x  =  rand
   2048  2200
   2049  2200		       a9 19		      LDA	#25
   2050  2202		       85 9a		      STA	player1y
   2051  2204		       ad 00 10 	      lda	rand
   2052  2207		       4a		      lsr
   2053  2208				  -	      ifconst	rand16
   2054  2208				  -	      rol	rand16
   2055  2208					      endif
   2056  2208		       90 02		      bcc	*+4
   2057  220a		       49 b4		      eor	#$B4
   2058  220c		       8d 00 10 	      sta	rand
   2059  220f				  -	      ifconst	rand16
   2060  220f				  -	      eor	rand16
   2061  220f					      endif
   2062  220f		       85 90		      STA	player1x
   2063  2211				   .L0216		;  player2y  =  10 :  player2x  =  rand
   2064  2211
   2065  2211		       a9 0a		      LDA	#10
   2066  2213		       85 9b		      STA	player2y
   2067  2215		       ad 00 10 	      lda	rand
   2068  2218		       4a		      lsr
   2069  2219				  -	      ifconst	rand16
   2070  2219				  -	      rol	rand16
   2071  2219					      endif
   2072  2219		       90 02		      bcc	*+4
   2073  221b		       49 b4		      eor	#$B4
   2074  221d		       8d 00 10 	      sta	rand
   2075  2220				  -	      ifconst	rand16
   2076  2220				  -	      eor	rand16
   2077  2220					      endif
   2078  2220		       85 91		      STA	player2x
   2079  2222				   .L0217		;  if LEdge  <  80 then player3y  =  15 :  player3x  = 150
   2080  2222
   2081  2222		       a5 e3		      LDA	LEdge
   2082  2224		       c9 50		      CMP	#80
   2083  2226		       b0 08		      BCS	.skipL0217
   2084  2228				   .condpart10
   2085  2228		       a9 0f		      LDA	#15
   2086  222a		       85 9c		      STA	player3y
   2087  222c		       a9 96		      LDA	#150
   2088  222e		       85 92		      STA	player3x
   2089  2230				   .skipL0217
   2090  2230				   .L0218		;  if LEdge  >  80 then player3y  =  15 :  player3x  = 15
   2091  2230
   2092  2230		       a9 50		      LDA	#80
   2093  2232		       c5 e3		      CMP	LEdge
   2094  2234		       b0 06		      BCS	.skipL0218
   2095  2236				   .condpart11
   2096  2236		       a9 0f		      LDA	#15
   2097  2238		       85 9c		      STA	player3y
   2098  223a		       85 92		      STA	player3x
   2099  223c				   .skipL0218
   2100  223c				   .L0219		;  player4y  = 200
   2101  223c
   2102  223c		       a9 c8		      LDA	#200
   2103  223e		       85 9d		      STA	player4y
   2104  2240				   .L0220		;  dec level = level + 1
   2105  2240
   2106  2240		       f8		      SED
   2107  2241		       a5 dc		      LDA	level
   2108  2243		       18		      CLC
   2109  2244		       69 01		      ADC	#1
   2110  2246		       85 dc		      STA	level
   2111  2248		       d8		      CLD
   2112  2249				   .L0221		;  Bit1_missleOn{1}  =  0
   2113  2249
   2114  2249		       a5 ea		      LDA	Bit1_missleOn
   2115  224b		       29 fd		      AND	#253
   2116  224d		       85 ea		      STA	Bit1_missleOn
   2117  224f				   .L0222		;  Househit = 1
   2118  224f
   2119  224f		       a9 01		      LDA	#1
   2120  2251		       85 e1		      STA	Househit
   2121  2253				   .L0223		;  Bit2_EnemyMove{2} = 0
   2122  2253
   2123  2253		       a5 ea		      LDA	Bit2_EnemyMove
   2124  2255		       29 fb		      AND	#251
   2125  2257		       85 ea		      STA	Bit2_EnemyMove
   2126  2259				   .L0224		;  if level  <  8 then EnemySpeed = EnemySpeed + 1
   2127  2259
   2128  2259		       a5 dc		      LDA	level
   2129  225b		       c9 08		      CMP	#8
   2130  225d		       b0 02		      BCS	.skipL0224
   2131  225f				   .condpart12
   2132  225f		       e6 d3		      INC	EnemySpeed
   2133  2261				   .skipL0224
   2134  2261				   .L0225		;  PlayerDamage = 0
   2135  2261
   2136  2261		       a9 00		      LDA	#0
   2137  2263		       85 dd		      STA	PlayerDamage
   2138  2265				   .L0226		;  frame = 0
   2139  2265
   2140  2265		       a9 00		      LDA	#0
   2141  2267		       85 d6		      STA	frame
   2142  2269				   .L0227		;  gosub __Playfield1 bank3
   2143  2269
   2144  2269		       85 81		      sta	temp7
   2145  226b		       a9 32		      lda	#>(ret_point2-1)
   2146  226d		       48		      pha
   2147  226e		       a9 80		      lda	#<(ret_point2-1)
   2148  2270		       48		      pha
   2149  2271		       a9 50		      lda	#>(.__Playfield1-1)
   2150  2273		       48		      pha
   2151  2274		       a9 84		      lda	#<(.__Playfield1-1)
   2152  2276		       48		      pha
   2153  2277		       a5 81		      lda	temp7
   2154  2279		       48		      pha
   2155  227a		       8a		      txa
   2156  227b		       48		      pha
   2157  227c		       a2 03		      ldx	#3
   2158  227e		       4c ee df 	      jmp	BS_jsr
   2159  2281				   ret_point2
   2160  2281				   .L0228		;  Bit5_hit{5}  = 0
   2161  2281
   2162  2281		       a5 ea		      LDA	Bit5_hit
   2163  2283		       29 df		      AND	#223
   2164  2285		       85 ea		      STA	Bit5_hit
   2165  2287				   .
   2166  2287							; 
   2167  2287
   2168  2287				   .
   2169  2287							; 
   2170  2287
   2171  2287				   .
   2172  2287							; 
   2173  2287
   2174  2287				   .
   2175  2287							; 
   2176  2287
   2177  2287				   .__GameVar
   2178  2287							; __GameVar
   2179  2287
   2180  2287				   .L0229		;  PlayerHealth  =  80
   2181  2287
   2182  2287		       a9 50		      LDA	#80
   2183  2289		       85 d5		      STA	PlayerHealth
   2184  228b				   .L0230		;  ballx  =  155
   2185  228b
   2186  228b		       a9 9b		      LDA	#155
   2187  228d		       85 84		      STA	ballx
   2188  228f				   .L0231		;  bally  =  24
   2189  228f
   2190  228f		       a9 18		      LDA	#24
   2191  2291		       85 c1		      STA	bally
   2192  2293				   .L0232		;  player0x  =  75
   2193  2293
   2194  2293		       a9 4b		      LDA	#75
   2195  2295		       85 80		      STA	player0x
   2196  2297				   .L0233		;  player0y  =  160
   2197  2297
   2198  2297		       a9 a0		      LDA	#160
   2199  2299		       85 99		      STA	player0y
   2200  229b				   .L0234		;  missile0x  =  200  :  missile0y  =	200
   2201  229b
   2202  229b		       a9 c8		      LDA	#200
   2203  229d		       85 82		      STA	missile0x
   2204  229f		       85 bf		      STA	missile0y
   2205  22a1				   .L0235		;  missile0height  =  12
   2206  22a1
   2207  22a1		       a9 0c		      LDA	#12
   2208  22a3		       85 c2		      STA	missile0height
   2209  22a5				   .L0236		;  missile1x  =  200  :  missile1y  =	200
   2210  22a5
   2211  22a5		       a9 c8		      LDA	#200
   2212  22a7		       85 83		      STA	missile1x
   2213  22a9		       85 c0		      STA	missile1y
   2214  22ab				   .L0237		;  missile1height  =  8
   2215  22ab
   2216  22ab		       a9 08		      LDA	#8
   2217  22ad		       85 c3		      STA	missile1height
   2218  22af				   .L0238		;  Bit1_missleOn{1} = 0
   2219  22af
   2220  22af		       a5 ea		      LDA	Bit1_missleOn
   2221  22b1		       29 fd		      AND	#253
   2222  22b3		       85 ea		      STA	Bit1_missleOn
   2223  22b5				   .L0239		;  drop  = 0
   2224  22b5
   2225  22b5		       a9 00		      LDA	#0
   2226  22b7		       85 d1		      STA	drop
   2227  22b9				   .L0240		;  dim sc1  =	score
   2228  22b9
   2229  22b9				   .L0241		;  CTRLPF = $21
   2230  22b9
   2231  22b9		       a9 21		      LDA	#$21
   2232  22bb		       85 0a		      STA	CTRLPF
   2233  22bd				   .L0242		;  EnemyHit  =  0
   2234  22bd
   2235  22bd		       a9 00		      LDA	#0
   2236  22bf		       85 d9		      STA	EnemyHit
   2237  22c1				   .
   2238  22c1							; 
   2239  22c1
   2240  22c1				   .__Main_Loop
   2241  22c1							; __Main_Loop
   2242  22c1
   2243  22c1				   .L0243		;  ballheight	=  PlayerHealth
   2244  22c1
   2245  22c1		       a5 d5		      LDA	PlayerHealth
   2246  22c3		       85 c4		      STA	ballheight
   2247  22c5				   .L0244		;  NUSIZ0  =  $00
   2248  22c5
   2249  22c5		       a9 00		      LDA	#$00
   2250  22c7		       85 04		      STA	NUSIZ0
   2251  22c9				   .L0245		;  temp1  =  #BIT_7
   2252  22c9
   2253  22c9		       a9 00		      LDA	##BIT_7
   2254  22cb		       85 cb		      STA	temp1
   2255  22cd				   .L0246		;  splitKernelVar  =  splitKernelVar  |  temp1
   2256  22cd
   2257  22cd		       a5 e2		      LDA	splitKernelVar
   2258  22cf		       05 cb		      ORA	temp1
   2259  22d1		       85 e2		      STA	splitKernelVar
   2260  22d3				   .L0247		;  dec sc1 =  level
   2261  22d3
   2262  22d3		       f8		      SED
   2263  22d4		       a5 dc		      LDA	level
   2264  22d6		       85 b8		      STA	sc1
   2265  22d8		       d8		      CLD
   2266  22d9				   .L0248		;  delay  =  delay  + 1
   2267  22d9
   2268  22d9		       e6 df		      INC	delay
   2269  22db				   .L0249		;  if delay  <  60 then __Resume
   2270  22db
   2271  22db		       a5 df		      LDA	delay
   2272  22dd		       c9 3c		      CMP	#60
   2273  22df				  -	      if	((* - .__Resume) < 127) && ((* - .__Resume) > -128)
   2274  22df				  -	      bcc	.__Resume
   2275  22df					      else
   2276  22df		       b0 03		      bcs	.2skip__Resume
   2277  22e1		       4c 49 3e 	      jmp	.__Resume
   2278  22e4				   .2skip__Resume
   2279  22e4					      endif
   2280  22e4				   .L0250		;  if delay  >  61 then delay	=  71
   2281  22e4
   2282  22e4		       a9 3d		      LDA	#61
   2283  22e6		       c5 df		      CMP	delay
   2284  22e8		       b0 04		      BCS	.skipL0250
   2285  22ea				   .condpart13
   2286  22ea		       a9 47		      LDA	#71
   2287  22ec		       85 df		      STA	delay
   2288  22ee				   .skipL0250
   2289  22ee				   .L0251		;  if switchreset goto __Reset
   2290  22ee
   2291  22ee		       a9 01		      lda	#1
   2292  22f0		       2c 82 02 	      bit	SWCHB
   2293  22f3				  -	      if	((* - .__Reset) < 127) && ((* - .__Reset) > -128)
   2294  22f3				  -	      BEQ	.__Reset
   2295  22f3					      else
   2296  22f3		       d0 03		      bne	.3skip__Reset
   2297  22f5		       4c a4 30 	      jmp	.__Reset
   2298  22f8				   .3skip__Reset
   2299  22f8					      endif
   2300  22f8				   .L0252		;  if Bit4_gameover{4} then goto __SkipMove
   2301  22f8
   2302  22f8		       a5 ea		      LDA	Bit4_gameover
   2303  22fa		       29 10		      AND	#16
   2304  22fc		       f0 03		      BEQ	.skipL0252
   2305  22fe				   .condpart14
   2306  22fe		       4c a5 3b 	      jmp	.__SkipMove
   2307  2301
   2308  2301				   .skipL0252
   2309  2301				   .L0253		;  if PlayerHealth  <= 0 then Bit4_gameover{4}  = 1
   2310  2301
   2311  2301		       a9 00		      LDA	#0
   2312  2303		       c5 d5		      CMP	PlayerHealth
   2313  2305		       90 06		      BCC	.skipL0253
   2314  2307				   .condpart15
   2315  2307		       a5 ea		      LDA	Bit4_gameover
   2316  2309		       09 10		      ORA	#16
   2317  230b		       85 ea		      STA	Bit4_gameover
   2318  230d				   .skipL0253
   2319  230d				   .L0254		;  if Bit4_gameover{4} then gosub __GameOver bank4
   2320  230d
   2321  230d		       a5 ea		      LDA	Bit4_gameover
   2322  230f		       29 10		      AND	#16
   2323  2311		       f0 18		      BEQ	.skipL0254
   2324  2313				   .condpart16
   2325  2313		       85 81		      sta	temp7
   2326  2315		       a9 33		      lda	#>(ret_point3-1)
   2327  2317		       48		      pha
   2328  2318		       a9 2a		      lda	#<(ret_point3-1)
   2329  231a		       48		      pha
   2330  231b		       a9 75		      lda	#>(.__GameOver-1)
   2331  231d		       48		      pha
   2332  231e		       a9 a5		      lda	#<(.__GameOver-1)
   2333  2320		       48		      pha
   2334  2321		       a5 81		      lda	temp7
   2335  2323		       48		      pha
   2336  2324		       8a		      txa
   2337  2325		       48		      pha
   2338  2326		       a2 04		      ldx	#4
   2339  2328		       4c ee df 	      jmp	BS_jsr
   2340  232b				   ret_point3
   2341  232b				   .skipL0254
   2342  232b				   .L0255		;  if Househit = 2 then gosub __PFColors bank3
   2343  232b
   2344  232b		       a5 e1		      LDA	Househit
   2345  232d		       c9 02		      CMP	#2
   2346  232f		       d0 18		      BNE	.skipL0255
   2347  2331				   .condpart17
   2348  2331		       85 81		      sta	temp7
   2349  2333		       a9 33		      lda	#>(ret_point4-1)
   2350  2335		       48		      pha
   2351  2336		       a9 48		      lda	#<(ret_point4-1)
   2352  2338		       48		      pha
   2353  2339		       a9 51		      lda	#>(.__PFColors-1)
   2354  233b		       48		      pha
   2355  233c		       a9 54		      lda	#<(.__PFColors-1)
   2356  233e		       48		      pha
   2357  233f		       a5 81		      lda	temp7
   2358  2341		       48		      pha
   2359  2342		       8a		      txa
   2360  2343		       48		      pha
   2361  2344		       a2 03		      ldx	#3
   2362  2346		       4c ee df 	      jmp	BS_jsr
   2363  2349				   ret_point4
   2364  2349				   .skipL0255
   2365  2349				   .L0256		;  if Househit = 3 then gosub __PFColors1 bank3
   2366  2349
   2367  2349		       a5 e1		      LDA	Househit
   2368  234b		       c9 03		      CMP	#3
   2369  234d		       d0 18		      BNE	.skipL0256
   2370  234f				   .condpart18
   2371  234f		       85 81		      sta	temp7
   2372  2351		       a9 33		      lda	#>(ret_point5-1)
   2373  2353		       48		      pha
   2374  2354		       a9 66		      lda	#<(ret_point5-1)
   2375  2356		       48		      pha
   2376  2357		       a9 51		      lda	#>(.__PFColors1-1)
   2377  2359		       48		      pha
   2378  235a		       a9 8f		      lda	#<(.__PFColors1-1)
   2379  235c		       48		      pha
   2380  235d		       a5 81		      lda	temp7
   2381  235f		       48		      pha
   2382  2360		       8a		      txa
   2383  2361		       48		      pha
   2384  2362		       a2 03		      ldx	#3
   2385  2364		       4c ee df 	      jmp	BS_jsr
   2386  2367				   ret_point5
   2387  2367				   .skipL0256
   2388  2367				   .L0257		;  if Househit = 4 then gosub __PFColors2 bank3
   2389  2367
   2390  2367		       a5 e1		      LDA	Househit
   2391  2369		       c9 04		      CMP	#4
   2392  236b		       d0 18		      BNE	.skipL0257
   2393  236d				   .condpart19
   2394  236d		       85 81		      sta	temp7
   2395  236f		       a9 33		      lda	#>(ret_point6-1)
   2396  2371		       48		      pha
   2397  2372		       a9 84		      lda	#<(ret_point6-1)
   2398  2374		       48		      pha
   2399  2375		       a9 51		      lda	#>(.__PFColors2-1)
   2400  2377		       48		      pha
   2401  2378		       a9 ca		      lda	#<(.__PFColors2-1)
   2402  237a		       48		      pha
   2403  237b		       a5 81		      lda	temp7
   2404  237d		       48		      pha
   2405  237e		       8a		      txa
   2406  237f		       48		      pha
   2407  2380		       a2 03		      ldx	#3
   2408  2382		       4c ee df 	      jmp	BS_jsr
   2409  2385				   ret_point6
   2410  2385				   .skipL0257
   2411  2385				   .L0258		;  if Househit = 5 then gosub __PFColors3 bank3
   2412  2385
   2413  2385		       a5 e1		      LDA	Househit
   2414  2387		       c9 05		      CMP	#5
   2415  2389		       d0 18		      BNE	.skipL0258
   2416  238b				   .condpart20
   2417  238b		       85 81		      sta	temp7
   2418  238d		       a9 33		      lda	#>(ret_point7-1)
   2419  238f		       48		      pha
   2420  2390		       a9 a2		      lda	#<(ret_point7-1)
   2421  2392		       48		      pha
   2422  2393		       a9 52		      lda	#>(.__PFColors3-1)
   2423  2395		       48		      pha
   2424  2396		       a9 05		      lda	#<(.__PFColors3-1)
   2425  2398		       48		      pha
   2426  2399		       a5 81		      lda	temp7
   2427  239b		       48		      pha
   2428  239c		       8a		      txa
   2429  239d		       48		      pha
   2430  239e		       a2 03		      ldx	#3
   2431  23a0		       4c ee df 	      jmp	BS_jsr
   2432  23a3				   ret_point7
   2433  23a3				   .skipL0258
   2434  23a3				   .L0259		;  if Househit = 6 then gosub __PFColors4 bank3
   2435  23a3
   2436  23a3		       a5 e1		      LDA	Househit
   2437  23a5		       c9 06		      CMP	#6
   2438  23a7		       d0 18		      BNE	.skipL0259
   2439  23a9				   .condpart21
   2440  23a9		       85 81		      sta	temp7
   2441  23ab		       a9 33		      lda	#>(ret_point8-1)
   2442  23ad		       48		      pha
   2443  23ae		       a9 c0		      lda	#<(ret_point8-1)
   2444  23b0		       48		      pha
   2445  23b1		       a9 52		      lda	#>(.__PFColors4-1)
   2446  23b3		       48		      pha
   2447  23b4		       a9 44		      lda	#<(.__PFColors4-1)
   2448  23b6		       48		      pha
   2449  23b7		       a5 81		      lda	temp7
   2450  23b9		       48		      pha
   2451  23ba		       8a		      txa
   2452  23bb		       48		      pha
   2453  23bc		       a2 03		      ldx	#3
   2454  23be		       4c ee df 	      jmp	BS_jsr
   2455  23c1				   ret_point8
   2456  23c1				   .skipL0259
   2457  23c1				   .L0260		;  if Househit = 7 then gosub __PFColors5 bank3
   2458  23c1
   2459  23c1		       a5 e1		      LDA	Househit
   2460  23c3		       c9 07		      CMP	#7
   2461  23c5		       d0 18		      BNE	.skipL0260
   2462  23c7				   .condpart22
   2463  23c7		       85 81		      sta	temp7
   2464  23c9		       a9 33		      lda	#>(ret_point9-1)
   2465  23cb		       48		      pha
   2466  23cc		       a9 de		      lda	#<(ret_point9-1)
   2467  23ce		       48		      pha
   2468  23cf		       a9 52		      lda	#>(.__PFColors5-1)
   2469  23d1		       48		      pha
   2470  23d2		       a9 7f		      lda	#<(.__PFColors5-1)
   2471  23d4		       48		      pha
   2472  23d5		       a5 81		      lda	temp7
   2473  23d7		       48		      pha
   2474  23d8		       8a		      txa
   2475  23d9		       48		      pha
   2476  23da		       a2 03		      ldx	#3
   2477  23dc		       4c ee df 	      jmp	BS_jsr
   2478  23df				   ret_point9
   2479  23df				   .skipL0260
   2480  23df				   .L0261		;  if Househit = 8 then gosub __PFColors6 bank3
   2481  23df
   2482  23df		       a5 e1		      LDA	Househit
   2483  23e1		       c9 08		      CMP	#8
   2484  23e3		       d0 18		      BNE	.skipL0261
   2485  23e5				   .condpart23
   2486  23e5		       85 81		      sta	temp7
   2487  23e7		       a9 33		      lda	#>(ret_point10-1)
   2488  23e9		       48		      pha
   2489  23ea		       a9 fc		      lda	#<(ret_point10-1)
   2490  23ec		       48		      pha
   2491  23ed		       a9 52		      lda	#>(.__PFColors6-1)
   2492  23ef		       48		      pha
   2493  23f0		       a9 af		      lda	#<(.__PFColors6-1)
   2494  23f2		       48		      pha
   2495  23f3		       a5 81		      lda	temp7
   2496  23f5		       48		      pha
   2497  23f6		       8a		      txa
   2498  23f7		       48		      pha
   2499  23f8		       a2 03		      ldx	#3
   2500  23fa		       4c ee df 	      jmp	BS_jsr
   2501  23fd				   ret_point10
   2502  23fd				   .skipL0261
   2503  23fd				   .L0262		;  if Househit = 9 then gosub __PFColors7 bank3
   2504  23fd
   2505  23fd		       a5 e1		      LDA	Househit
   2506  23ff		       c9 09		      CMP	#9
   2507  2401		       d0 18		      BNE	.skipL0262
   2508  2403				   .condpart24
   2509  2403		       85 81		      sta	temp7
   2510  2405		       a9 34		      lda	#>(ret_point11-1)
   2511  2407		       48		      pha
   2512  2408		       a9 1a		      lda	#<(ret_point11-1)
   2513  240a		       48		      pha
   2514  240b		       a9 52		      lda	#>(.__PFColors7-1)
   2515  240d		       48		      pha
   2516  240e		       a9 ee		      lda	#<(.__PFColors7-1)
   2517  2410		       48		      pha
   2518  2411		       a5 81		      lda	temp7
   2519  2413		       48		      pha
   2520  2414		       8a		      txa
   2521  2415		       48		      pha
   2522  2416		       a2 03		      ldx	#3
   2523  2418		       4c ee df 	      jmp	BS_jsr
   2524  241b				   ret_point11
   2525  241b				   .skipL0262
   2526  241b				   .L0263		;  if Househit = 10 then gosub __PFColors8 bank3
   2527  241b
   2528  241b		       a5 e1		      LDA	Househit
   2529  241d		       c9 0a		      CMP	#10
   2530  241f		       d0 18		      BNE	.skipL0263
   2531  2421				   .condpart25
   2532  2421		       85 81		      sta	temp7
   2533  2423		       a9 34		      lda	#>(ret_point12-1)
   2534  2425		       48		      pha
   2535  2426		       a9 38		      lda	#<(ret_point12-1)
   2536  2428		       48		      pha
   2537  2429		       a9 53		      lda	#>(.__PFColors8-1)
   2538  242b		       48		      pha
   2539  242c		       a9 1e		      lda	#<(.__PFColors8-1)
   2540  242e		       48		      pha
   2541  242f		       a5 81		      lda	temp7
   2542  2431		       48		      pha
   2543  2432		       8a		      txa
   2544  2433		       48		      pha
   2545  2434		       a2 03		      ldx	#3
   2546  2436		       4c ee df 	      jmp	BS_jsr
   2547  2439				   ret_point12
   2548  2439				   .skipL0263
   2549  2439				   .L0264		;  if Househit = 11 then gosub __PFColors9 bank3
   2550  2439
   2551  2439		       a5 e1		      LDA	Househit
   2552  243b		       c9 0b		      CMP	#11
   2553  243d		       d0 18		      BNE	.skipL0264
   2554  243f				   .condpart26
   2555  243f		       85 81		      sta	temp7
   2556  2441		       a9 34		      lda	#>(ret_point13-1)
   2557  2443		       48		      pha
   2558  2444		       a9 56		      lda	#<(ret_point13-1)
   2559  2446		       48		      pha
   2560  2447		       a9 53		      lda	#>(.__PFColors9-1)
   2561  2449		       48		      pha
   2562  244a		       a9 4e		      lda	#<(.__PFColors9-1)
   2563  244c		       48		      pha
   2564  244d		       a5 81		      lda	temp7
   2565  244f		       48		      pha
   2566  2450		       8a		      txa
   2567  2451		       48		      pha
   2568  2452		       a2 03		      ldx	#3
   2569  2454		       4c ee df 	      jmp	BS_jsr
   2570  2457				   ret_point13
   2571  2457				   .skipL0264
   2572  2457				   .L0265		;  if Househit = 12 then gosub __PFColors10 bank3
   2573  2457
   2574  2457		       a5 e1		      LDA	Househit
   2575  2459		       c9 0c		      CMP	#12
   2576  245b		       d0 18		      BNE	.skipL0265
   2577  245d				   .condpart27
   2578  245d		       85 81		      sta	temp7
   2579  245f		       a9 34		      lda	#>(ret_point14-1)
   2580  2461		       48		      pha
   2581  2462		       a9 74		      lda	#<(ret_point14-1)
   2582  2464		       48		      pha
   2583  2465		       a9 53		      lda	#>(.__PFColors10-1)
   2584  2467		       48		      pha
   2585  2468		       a9 7e		      lda	#<(.__PFColors10-1)
   2586  246a		       48		      pha
   2587  246b		       a5 81		      lda	temp7
   2588  246d		       48		      pha
   2589  246e		       8a		      txa
   2590  246f		       48		      pha
   2591  2470		       a2 03		      ldx	#3
   2592  2472		       4c ee df 	      jmp	BS_jsr
   2593  2475				   ret_point14
   2594  2475				   .skipL0265
   2595  2475				   .L0266		;  if Househit > 12 then gosub __GameOver bank4
   2596  2475
   2597  2475		       a9 0c		      LDA	#12
   2598  2477		       c5 e1		      CMP	Househit
   2599  2479		       b0 18		      BCS	.skipL0266
   2600  247b				   .condpart28
   2601  247b		       85 81		      sta	temp7
   2602  247d		       a9 34		      lda	#>(ret_point15-1)
   2603  247f		       48		      pha
   2604  2480		       a9 92		      lda	#<(ret_point15-1)
   2605  2482		       48		      pha
   2606  2483		       a9 75		      lda	#>(.__GameOver-1)
   2607  2485		       48		      pha
   2608  2486		       a9 a5		      lda	#<(.__GameOver-1)
   2609  2488		       48		      pha
   2610  2489		       a5 81		      lda	temp7
   2611  248b		       48		      pha
   2612  248c		       8a		      txa
   2613  248d		       48		      pha
   2614  248e		       a2 04		      ldx	#4
   2615  2490		       4c ee df 	      jmp	BS_jsr
   2616  2493				   ret_point15
   2617  2493				   .skipL0266
   2618  2493				   .L0267		;  if EnemyHit  >  0 then Bit1_missleOn{1}  =	0 :  missile0y = 200
   2619  2493
   2620  2493		       a9 00		      LDA	#0
   2621  2495		       c5 d9		      CMP	EnemyHit
   2622  2497		       b0 0a		      BCS	.skipL0267
   2623  2499				   .condpart29
   2624  2499		       a5 ea		      LDA	Bit1_missleOn
   2625  249b		       29 fd		      AND	#253
   2626  249d		       85 ea		      STA	Bit1_missleOn
   2627  249f		       a9 c8		      LDA	#200
   2628  24a1		       85 bf		      STA	missile0y
   2629  24a3				   .skipL0267
   2630  24a3				   .L0268		;  pfpixel 12 1 on
   2631  24a3
   2632  24a3		       a9 a4		      lda	#<C_function
   2633  24a5		       8d 50 10 	      sta	DF0LOW
   2634  24a8		       a9 01		      lda	#(>C_function) & $0F
   2635  24aa		       8d 68 10 	      sta	DF0HI
   2636  24ad		       a2 0c		      LDX	#12
   2637  24af		       8e 78 10 	      STX	DF0WRITE
   2638  24b2		       8e 78 10 	      STX	DF0WRITE
   2639  24b5		       a0 01		      LDY	#1
   2640  24b7		       8c 78 10 	      STY	DF0WRITE
   2641  24ba		       a9 0c		      LDA	#12
   2642  24bc		       8d 78 10 	      STA	DF0WRITE
   2643  24bf		       a9 ff		      lda	#255
   2644  24c1		       8d 5a 10 	      sta	CALLFUNCTION
   2645  24c4				   .L0269		;  pfpixel 13 1 on
   2646  24c4
   2647  24c4		       a9 a4		      lda	#<C_function
   2648  24c6		       8d 50 10 	      sta	DF0LOW
   2649  24c9		       a9 01		      lda	#(>C_function) & $0F
   2650  24cb		       8d 68 10 	      sta	DF0HI
   2651  24ce		       a2 0c		      LDX	#12
   2652  24d0		       8e 78 10 	      STX	DF0WRITE
   2653  24d3		       8e 78 10 	      STX	DF0WRITE
   2654  24d6		       a0 01		      LDY	#1
   2655  24d8		       8c 78 10 	      STY	DF0WRITE
   2656  24db		       a9 0d		      LDA	#13
   2657  24dd		       8d 78 10 	      STA	DF0WRITE
   2658  24e0		       a9 ff		      lda	#255
   2659  24e2		       8d 5a 10 	      sta	CALLFUNCTION
   2660  24e5				   .L0270		;  pfpixel 14 1 on
   2661  24e5
   2662  24e5		       a9 a4		      lda	#<C_function
   2663  24e7		       8d 50 10 	      sta	DF0LOW
   2664  24ea		       a9 01		      lda	#(>C_function) & $0F
   2665  24ec		       8d 68 10 	      sta	DF0HI
   2666  24ef		       a2 0c		      LDX	#12
   2667  24f1		       8e 78 10 	      STX	DF0WRITE
   2668  24f4		       8e 78 10 	      STX	DF0WRITE
   2669  24f7		       a0 01		      LDY	#1
   2670  24f9		       8c 78 10 	      STY	DF0WRITE
   2671  24fc		       a9 0e		      LDA	#14
   2672  24fe		       8d 78 10 	      STA	DF0WRITE
   2673  2501		       a9 ff		      lda	#255
   2674  2503		       8d 5a 10 	      sta	CALLFUNCTION
   2675  2506				   .L0271		;  pfpixel 15 1 on
   2676  2506
   2677  2506		       a9 a4		      lda	#<C_function
   2678  2508		       8d 50 10 	      sta	DF0LOW
   2679  250b		       a9 01		      lda	#(>C_function) & $0F
   2680  250d		       8d 68 10 	      sta	DF0HI
   2681  2510		       a2 0c		      LDX	#12
   2682  2512		       8e 78 10 	      STX	DF0WRITE
   2683  2515		       8e 78 10 	      STX	DF0WRITE
   2684  2518		       a0 01		      LDY	#1
   2685  251a		       8c 78 10 	      STY	DF0WRITE
   2686  251d		       a9 0f		      LDA	#15
   2687  251f		       8d 78 10 	      STA	DF0WRITE
   2688  2522		       a9 ff		      lda	#255
   2689  2524		       8d 5a 10 	      sta	CALLFUNCTION
   2690  2527				   .L0272		;  pfpixel 16 1 on
   2691  2527
   2692  2527		       a9 a4		      lda	#<C_function
   2693  2529		       8d 50 10 	      sta	DF0LOW
   2694  252c		       a9 01		      lda	#(>C_function) & $0F
   2695  252e		       8d 68 10 	      sta	DF0HI
   2696  2531		       a2 0c		      LDX	#12
   2697  2533		       8e 78 10 	      STX	DF0WRITE
   2698  2536		       8e 78 10 	      STX	DF0WRITE
   2699  2539		       a0 01		      LDY	#1
   2700  253b		       8c 78 10 	      STY	DF0WRITE
   2701  253e		       a9 10		      LDA	#16
   2702  2540		       8d 78 10 	      STA	DF0WRITE
   2703  2543		       a9 ff		      lda	#255
   2704  2545		       8d 5a 10 	      sta	CALLFUNCTION
   2705  2548				   .L0273		;  if drop  >	10 then pfpixel 16 1 off
   2706  2548
   2707  2548		       a9 0a		      LDA	#10
   2708  254a		       c5 d1		      CMP	drop
   2709  254c		       b0 21		      BCS	.skipL0273
   2710  254e				   .condpart30
   2711  254e		       a9 a4		      lda	#<C_function
   2712  2550		       8d 50 10 	      sta	DF0LOW
   2713  2553		       a9 01		      lda	#(>C_function) & $0F
   2714  2555		       8d 68 10 	      sta	DF0HI
   2715  2558		       a2 0d		      LDX	#13
   2716  255a		       8e 78 10 	      STX	DF0WRITE
   2717  255d		       8e 78 10 	      STX	DF0WRITE
   2718  2560		       a0 01		      LDY	#1
   2719  2562		       8c 78 10 	      STY	DF0WRITE
   2720  2565		       a9 10		      LDA	#16
   2721  2567		       8d 78 10 	      STA	DF0WRITE
   2722  256a		       a9 ff		      lda	#255
   2723  256c		       8d 5a 10 	      sta	CALLFUNCTION
   2724  256f				   .skipL0273
   2725  256f				   .L0274		;  if drop  >	20 then pfpixel 15 1 off
   2726  256f
   2727  256f		       a9 14		      LDA	#20
   2728  2571		       c5 d1		      CMP	drop
   2729  2573		       b0 21		      BCS	.skipL0274
   2730  2575				   .condpart31
   2731  2575		       a9 a4		      lda	#<C_function
   2732  2577		       8d 50 10 	      sta	DF0LOW
   2733  257a		       a9 01		      lda	#(>C_function) & $0F
   2734  257c		       8d 68 10 	      sta	DF0HI
   2735  257f		       a2 0d		      LDX	#13
   2736  2581		       8e 78 10 	      STX	DF0WRITE
   2737  2584		       8e 78 10 	      STX	DF0WRITE
   2738  2587		       a0 01		      LDY	#1
   2739  2589		       8c 78 10 	      STY	DF0WRITE
   2740  258c		       a9 0f		      LDA	#15
   2741  258e		       8d 78 10 	      STA	DF0WRITE
   2742  2591		       a9 ff		      lda	#255
   2743  2593		       8d 5a 10 	      sta	CALLFUNCTION
   2744  2596				   .skipL0274
   2745  2596				   .L0275		;  if drop  >	30 then pfpixel 14 1 off
   2746  2596
   2747  2596		       a9 1e		      LDA	#30
   2748  2598		       c5 d1		      CMP	drop
   2749  259a		       b0 21		      BCS	.skipL0275
   2750  259c				   .condpart32
   2751  259c		       a9 a4		      lda	#<C_function
   2752  259e		       8d 50 10 	      sta	DF0LOW
   2753  25a1		       a9 01		      lda	#(>C_function) & $0F
   2754  25a3		       8d 68 10 	      sta	DF0HI
   2755  25a6		       a2 0d		      LDX	#13
   2756  25a8		       8e 78 10 	      STX	DF0WRITE
   2757  25ab		       8e 78 10 	      STX	DF0WRITE
   2758  25ae		       a0 01		      LDY	#1
   2759  25b0		       8c 78 10 	      STY	DF0WRITE
   2760  25b3		       a9 0e		      LDA	#14
   2761  25b5		       8d 78 10 	      STA	DF0WRITE
   2762  25b8		       a9 ff		      lda	#255
   2763  25ba		       8d 5a 10 	      sta	CALLFUNCTION
   2764  25bd				   .skipL0275
   2765  25bd				   .L0276		;  if drop  >	40 then pfpixel 13 1 off
   2766  25bd
   2767  25bd		       a9 28		      LDA	#40
   2768  25bf		       c5 d1		      CMP	drop
   2769  25c1		       b0 21		      BCS	.skipL0276
   2770  25c3				   .condpart33
   2771  25c3		       a9 a4		      lda	#<C_function
   2772  25c5		       8d 50 10 	      sta	DF0LOW
   2773  25c8		       a9 01		      lda	#(>C_function) & $0F
   2774  25ca		       8d 68 10 	      sta	DF0HI
   2775  25cd		       a2 0d		      LDX	#13
   2776  25cf		       8e 78 10 	      STX	DF0WRITE
   2777  25d2		       8e 78 10 	      STX	DF0WRITE
   2778  25d5		       a0 01		      LDY	#1
   2779  25d7		       8c 78 10 	      STY	DF0WRITE
   2780  25da		       a9 0d		      LDA	#13
   2781  25dc		       8d 78 10 	      STA	DF0WRITE
   2782  25df		       a9 ff		      lda	#255
   2783  25e1		       8d 5a 10 	      sta	CALLFUNCTION
   2784  25e4				   .skipL0276
   2785  25e4				   .L0277		;  if drop  >	49 then pfpixel 12 1 off
   2786  25e4
   2787  25e4		       a9 31		      LDA	#49
   2788  25e6		       c5 d1		      CMP	drop
   2789  25e8		       b0 21		      BCS	.skipL0277
   2790  25ea				   .condpart34
   2791  25ea		       a9 a4		      lda	#<C_function
   2792  25ec		       8d 50 10 	      sta	DF0LOW
   2793  25ef		       a9 01		      lda	#(>C_function) & $0F
   2794  25f1		       8d 68 10 	      sta	DF0HI
   2795  25f4		       a2 0d		      LDX	#13
   2796  25f6		       8e 78 10 	      STX	DF0WRITE
   2797  25f9		       8e 78 10 	      STX	DF0WRITE
   2798  25fc		       a0 01		      LDY	#1
   2799  25fe		       8c 78 10 	      STY	DF0WRITE
   2800  2601		       a9 0c		      LDA	#12
   2801  2603		       8d 78 10 	      STA	DF0WRITE
   2802  2606		       a9 ff		      lda	#255
   2803  2608		       8d 5a 10 	      sta	CALLFUNCTION
   2804  260b				   .skipL0277
   2805  260b				   .L0278		;  if drop  >=  50 then AUDV0	=  0  :  AUDV1	=  0
   2806  260b
   2807  260b		       a5 d1		      LDA	drop
   2808  260d		       c9 32		      CMP	#50
   2809  260f		       90 06		      BCC	.skipL0278
   2810  2611				   .condpart35
   2811  2611		       a9 00		      LDA	#0
   2812  2613		       85 19		      STA	AUDV0
   2813  2615		       85 1a		      STA	AUDV1
   2814  2617				   .skipL0278
   2815  2617				   .L0279		;  if drop  >=  50 then Bit0_NewLevel{0} = 1 :  delay	=  0 :	goto __titlepage
   2816  2617
   2817  2617		       a5 d1		      LDA	drop
   2818  2619		       c9 32		      CMP	#50
   2819  261b		       90 0d		      BCC	.skipL0279
   2820  261d				   .condpart36
   2821  261d		       a5 ea		      LDA	Bit0_NewLevel
   2822  261f		       09 01		      ORA	#1
   2823  2621		       85 ea		      STA	Bit0_NewLevel
   2824  2623		       a9 00		      LDA	#0
   2825  2625		       85 df		      STA	delay
   2826  2627		       4c f6 30 	      jmp	.__titlepage
   2827  262a
   2828  262a				   .skipL0279
   2829  262a				   .L0280		;  frame = frame + 1
   2830  262a
   2831  262a		       e6 d6		      INC	frame
   2832  262c				   .L0281		;  gosub __FrameAnimation bank4
   2833  262c
   2834  262c		       85 81		      sta	temp7
   2835  262e		       a9 36		      lda	#>(ret_point16-1)
   2836  2630		       48		      pha
   2837  2631		       a9 43		      lda	#<(ret_point16-1)
   2838  2633		       48		      pha
   2839  2634		       a9 70		      lda	#>(.__FrameAnimation-1)
   2840  2636		       48		      pha
   2841  2637		       a9 84		      lda	#<(.__FrameAnimation-1)
   2842  2639		       48		      pha
   2843  263a		       a5 81		      lda	temp7
   2844  263c		       48		      pha
   2845  263d		       8a		      txa
   2846  263e		       48		      pha
   2847  263f		       a2 04		      ldx	#4
   2848  2641		       4c ee df 	      jmp	BS_jsr
   2849  2644				   ret_point16
   2850  2644				   .
   2851  2644							; 
   2852  2644
   2853  2644				   .__Movement
   2854  2644							; __Movement
   2855  2644
   2856  2644				   .L0282		;  Moverate = Moverate  + 1
   2857  2644
   2858  2644		       e6 d2		      INC	Moverate
   2859  2646				   .
   2860  2646							; 
   2861  2646
   2862  2646				   .__HealthDrop
   2863  2646							; __HealthDrop
   2864  2646
   2865  2646				   .L0283		;  if HealthDrop  >  4  &&  !Bit2_EnemyMove{2} then if player4y  >  190 then player4y	=  5 : player4x  =   ( rand + 44 )  / 2  :  Bit2_EnemyMove{2} = 1
   2866  2646
   2867  2646		       a9 04		      LDA	#4
   2868  2648		       c5 de		      CMP	HealthDrop
   2869  264a		       b0 27		      BCS	.skipL0283
   2870  264c				   .condpart37
   2871  264c		       a5 ea		      LDA	Bit2_EnemyMove
   2872  264e		       29 04		      AND	#4
   2873  2650		       d0 21		      BNE	.skip37then
   2874  2652				   .condpart38
   2875  2652		       a9 be		      LDA	#190
   2876  2654		       c5 9d		      CMP	player4y
   2877  2656		       b0 1b		      BCS	.skip38then
   2878  2658				   .condpart39
   2879  2658		       a9 05		      LDA	#5
   2880  265a		       85 9d		      STA	player4y
   2881  265c							; complex statement detected
   2882  265c		       ad 00 10 	      lda	rand
   2883  265f		       4a		      lsr
   2884  2660				  -	      ifconst	rand16
   2885  2660				  -	      rol	rand16
   2886  2660					      endif
   2887  2660		       90 02		      bcc	*+4
   2888  2662		       49 b4		      eor	#$B4
   2889  2664		       8d 00 10 	      sta	rand
   2890  2667				  -	      ifconst	rand16
   2891  2667				  -	      eor	rand16
   2892  2667					      endif
   2893  2667		       18		      CLC
   2894  2668		       69 2c		      ADC	#44
   2895  266a		       4a		      lsr
   2896  266b		       85 93		      STA	player4x
   2897  266d		       a5 ea		      LDA	Bit2_EnemyMove
   2898  266f		       09 04		      ORA	#4
   2899  2671		       85 ea		      STA	Bit2_EnemyMove
   2900  2673				   .skip38then
   2901  2673				   .skip37then
   2902  2673				   .skipL0283
   2903  2673				   .L0284		;  if HealthDrop  >  4  &&  player4y  > 190 then Bit2_EnemyMove{2} = 0
   2904  2673
   2905  2673		       a9 04		      LDA	#4
   2906  2675		       c5 de		      CMP	HealthDrop
   2907  2677		       b0 0c		      BCS	.skipL0284
   2908  2679				   .condpart40
   2909  2679		       a9 be		      LDA	#190
   2910  267b		       c5 9d		      CMP	player4y
   2911  267d		       b0 06		      BCS	.skip40then
   2912  267f				   .condpart41
   2913  267f		       a5 ea		      LDA	Bit2_EnemyMove
   2914  2681		       29 fb		      AND	#251
   2915  2683		       85 ea		      STA	Bit2_EnemyMove
   2916  2685				   .skip40then
   2917  2685				   .skipL0284
   2918  2685				   .L0285		;  if Bit2_EnemyMove{2}  &&  player4y > 170 then HealthDrop = 0 :  Bit2_EnemyMove{2} = 0  :  player4y	=  200 : 
   2919  2685
   2920  2685		       a5 ea		      LDA	Bit2_EnemyMove
   2921  2687		       29 04		      AND	#4
   2922  2689		       f0 14		      BEQ	.skipL0285
   2923  268b				   .condpart42
   2924  268b		       a9 aa		      LDA	#170
   2925  268d		       c5 9d		      CMP	player4y
   2926  268f		       b0 0e		      BCS	.skip42then
   2927  2691				   .condpart43
   2928  2691		       a9 00		      LDA	#0
   2929  2693		       85 de		      STA	HealthDrop
   2930  2695		       a5 ea		      LDA	Bit2_EnemyMove
   2931  2697		       29 fb		      AND	#251
   2932  2699		       85 ea		      STA	Bit2_EnemyMove
   2933  269b		       a9 c8		      LDA	#200
   2934  269d		       85 9d		      STA	player4y
   2935  269f				   .skip42then
   2936  269f				   .skipL0285
   2937  269f				   .L0286		;  if player4x  <  10 then player4x = 10
   2938  269f
   2939  269f		       a5 93		      LDA	player4x
   2940  26a1		       c9 0a		      CMP	#10
   2941  26a3		       b0 04		      BCS	.skipL0286
   2942  26a5				   .condpart44
   2943  26a5		       a9 0a		      LDA	#10
   2944  26a7		       85 93		      STA	player4x
   2945  26a9				   .skipL0286
   2946  26a9				   .L0287		;  if player4x  >  148 then player4x  = 148
   2947  26a9
   2948  26a9		       a9 94		      LDA	#148
   2949  26ab		       c5 93		      CMP	player4x
   2950  26ad		       b0 04		      BCS	.skipL0287
   2951  26af				   .condpart45
   2952  26af		       a9 94		      LDA	#148
   2953  26b1		       85 93		      STA	player4x
   2954  26b3				   .skipL0287
   2955  26b3				   .
   2956  26b3							; 
   2957  26b3
   2958  26b3				   .L0288		;  if Moverate  <  7 then goto __Player1Move
   2959  26b3
   2960  26b3		       a5 d2		      LDA	Moverate
   2961  26b5		       c9 07		      CMP	#7
   2962  26b7		       b0 03		      BCS	.skipL0288
   2963  26b9				   .condpart46
   2964  26b9		       4c cf 36 	      jmp	.__Player1Move
   2965  26bc
   2966  26bc				   .skipL0288
   2967  26bc				   .L0289		;  scorecolor = scorecolor + 1
   2968  26bc
   2969  26bc		       e6 eb		      INC	scorecolor
   2970  26be				   .L0290		;  if Bit2_EnemyMove{2} then player4y	=  player4y  + 2  :  HealthDrop  =  0
   2971  26be
   2972  26be		       a5 ea		      LDA	Bit2_EnemyMove
   2973  26c0		       29 04		      AND	#4
   2974  26c2		       f0 0b		      BEQ	.skipL0290
   2975  26c4				   .condpart47
   2976  26c4		       a5 9d		      LDA	player4y
   2977  26c6		       18		      CLC
   2978  26c7		       69 02		      ADC	#2
   2979  26c9		       85 9d		      STA	player4y
   2980  26cb		       a9 00		      LDA	#0
   2981  26cd		       85 de		      STA	HealthDrop
   2982  26cf				   .skipL0290
   2983  26cf				   .
   2984  26cf							; 
   2985  26cf
   2986  26cf				   .__Player1Move
   2987  26cf							; __Player1Move
   2988  26cf
   2989  26cf				   .L0291		;  if drop  >=  48  &&  player1y  =  200 then goto __Player2Move
   2990  26cf
   2991  26cf		       a5 d1		      LDA	drop
   2992  26d1		       c9 30		      CMP	#48
   2993  26d3		       90 09		      BCC	.skipL0291
   2994  26d5				   .condpart48
   2995  26d5		       a5 9a		      LDA	player1y
   2996  26d7		       c9 c8		      CMP	#200
   2997  26d9		       d0 03		      BNE	.skip48then
   2998  26db				   .condpart49
   2999  26db		       4c 91 37 	      jmp	.__Player2Move
   3000  26de
   3001  26de				   .skip48then
   3002  26de				   .skipL0291
   3003  26de				   .L0292		;  if player1y  > 190	&&  EnemyHit  <>  1 then player1y  =   ( rand & 5 )  + 5 :  player1x  =   ( rand + 20 )  / 2 :	HealthDrop = HealthDrop  + 1  :  drop  =  drop	+ 1
   3004  26de
   3005  26de		       a9 be		      LDA	#190
   3006  26e0		       c5 9a		      CMP	player1y
   3007  26e2		       b0 2d		      BCS	.skipL0292
   3008  26e4				   .condpart50
   3009  26e4		       a5 d9		      LDA	EnemyHit
   3010  26e6		       c9 01		      CMP	#1
   3011  26e8		       f0 27		      BEQ	.skip50then
   3012  26ea				   .condpart51
   3013  26ea							; complex statement detected
   3014  26ea		       ad 00 10 	      lda	rand
   3015  26ed		       4a		      lsr
   3016  26ee				  -	      ifconst	rand16
   3017  26ee				  -	      rol	rand16
   3018  26ee					      endif
   3019  26ee		       90 02		      bcc	*+4
   3020  26f0		       49 b4		      eor	#$B4
   3021  26f2		       8d 00 10 	      sta	rand
   3022  26f5				  -	      ifconst	rand16
   3023  26f5				  -	      eor	rand16
   3024  26f5					      endif
   3025  26f5		       29 05		      AND	#5
   3026  26f7		       18		      CLC
   3027  26f8		       69 05		      ADC	#5
   3028  26fa		       85 9a		      STA	player1y
   3029  26fc							; complex statement detected
   3030  26fc		       ad 00 10 	      lda	rand
   3031  26ff		       4a		      lsr
   3032  2700				  -	      ifconst	rand16
   3033  2700				  -	      rol	rand16
   3034  2700					      endif
   3035  2700		       90 02		      bcc	*+4
   3036  2702		       49 b4		      eor	#$B4
   3037  2704		       8d 00 10 	      sta	rand
   3038  2707				  -	      ifconst	rand16
   3039  2707				  -	      eor	rand16
   3040  2707					      endif
   3041  2707		       18		      CLC
   3042  2708		       69 14		      ADC	#20
   3043  270a		       4a		      lsr
   3044  270b		       85 90		      STA	player1x
   3045  270d		       e6 de		      INC	HealthDrop
   3046  270f		       e6 d1		      INC	drop
   3047  2711				   .skip50then
   3048  2711				   .skipL0292
   3049  2711				   .L0293		;  if player1y  >=  164 then goto __Player1SideMove
   3050  2711
   3051  2711		       a5 9a		      LDA	player1y
   3052  2713		       c9 a4		      CMP	#164
   3053  2715		       90 03		      BCC	.skipL0293
   3054  2717				   .condpart52
   3055  2717		       4c 4a 37 	      jmp	.__Player1SideMove
   3056  271a
   3057  271a				   .skipL0293
   3058  271a				   .L0294		;  if player1x  <  10 then player1x  = 10
   3059  271a
   3060  271a		       a5 90		      LDA	player1x
   3061  271c		       c9 0a		      CMP	#10
   3062  271e		       b0 04		      BCS	.skipL0294
   3063  2720				   .condpart53
   3064  2720		       a9 0a		      LDA	#10
   3065  2722		       85 90		      STA	player1x
   3066  2724				   .skipL0294
   3067  2724				   .L0295		;  if player1x  >  148 then player1x  = 148
   3068  2724
   3069  2724		       a9 94		      LDA	#148
   3070  2726		       c5 90		      CMP	player1x
   3071  2728		       b0 04		      BCS	.skipL0295
   3072  272a				   .condpart54
   3073  272a		       a9 94		      LDA	#148
   3074  272c		       85 90		      STA	player1x
   3075  272e				   .skipL0295
   3076  272e				   .L0296		;  if Moverate  <  8 then goto __CheckCollision
   3077  272e
   3078  272e		       a5 d2		      LDA	Moverate
   3079  2730		       c9 08		      CMP	#8
   3080  2732		       b0 03		      BCS	.skipL0296
   3081  2734				   .condpart55
   3082  2734		       4c 20 39 	      jmp	.__CheckCollision
   3083  2737
   3084  2737				   .skipL0296
   3085  2737				   .L0297		;  if EnemyHit  =  1 then goto __Player2Move
   3086  2737
   3087  2737		       a5 d9		      LDA	EnemyHit
   3088  2739		       c9 01		      CMP	#1
   3089  273b		       d0 03		      BNE	.skipL0297
   3090  273d				   .condpart56
   3091  273d		       4c 91 37 	      jmp	.__Player2Move
   3092  2740
   3093  2740				   .skipL0297
   3094  2740				   .L0298		;  player1y  =  player1y  +  EnemySpeed
   3095  2740
   3096  2740		       a5 9a		      LDA	player1y
   3097  2742		       18		      CLC
   3098  2743		       65 d3		      ADC	EnemySpeed
   3099  2745		       85 9a		      STA	player1y
   3100  2747				   .L0299		;  goto __Player2Move
   3101  2747
   3102  2747		       4c 91 37 	      jmp	.__Player2Move
   3103  274a
   3104  274a				   .
   3105  274a							; 
   3106  274a
   3107  274a				   .__Player1SideMove
   3108  274a							; __Player1SideMove
   3109  274a
   3110  274a				   .L0300		;  player1y  = 165
   3111  274a
   3112  274a		       a9 a5		      LDA	#165
   3113  274c		       85 9a		      STA	player1y
   3114  274e				   .L0301		;  if player1x  <  REdge  &&  player1x  >  LEdge then Househit = Househit + 1 :  player1y = 200  :  goto __Player2Move : Moverate = Moverate - 1
   3115  274e
   3116  274e		       a5 90		      LDA	player1x
   3117  2750		       c5 d7		      CMP	REdge
   3118  2752		       b0 11		      BCS	.skipL0301
   3119  2754				   .condpart57
   3120  2754		       a5 e3		      LDA	LEdge
   3121  2756		       c5 90		      CMP	player1x
   3122  2758		       b0 0b		      BCS	.skip57then
   3123  275a				   .condpart58
   3124  275a		       e6 e1		      INC	Househit
   3125  275c		       a9 c8		      LDA	#200
   3126  275e		       85 9a		      STA	player1y
   3127  2760		       4c 91 37 	      jmp	.__Player2Move
   3128  2763		       c6 d2		      DEC	Moverate
   3129  2765				   .skip57then
   3130  2765				   .skipL0301
   3131  2765				   .L0302		;  if Moverate  <  8 then goto __CheckCollision
   3132  2765
   3133  2765		       a5 d2		      LDA	Moverate
   3134  2767		       c9 08		      CMP	#8
   3135  2769		       b0 03		      BCS	.skipL0302
   3136  276b				   .condpart59
   3137  276b		       4c 20 39 	      jmp	.__CheckCollision
   3138  276e
   3139  276e				   .skipL0302
   3140  276e				   .L0303		;  if EnemyHit  =  1 then goto __Player2Move
   3141  276e
   3142  276e		       a5 d9		      LDA	EnemyHit
   3143  2770		       c9 01		      CMP	#1
   3144  2772		       d0 03		      BNE	.skipL0303
   3145  2774				   .condpart60
   3146  2774		       4c 91 37 	      jmp	.__Player2Move
   3147  2777
   3148  2777				   .skipL0303
   3149  2777				   .L0304		;  if player1x  >  REdge then player1x  =  player1x  -  EnemySpeed
   3150  2777
   3151  2777		       a5 d7		      LDA	REdge
   3152  2779		       c5 90		      CMP	player1x
   3153  277b		       b0 07		      BCS	.skipL0304
   3154  277d				   .condpart61
   3155  277d		       a5 90		      LDA	player1x
   3156  277f		       38		      SEC
   3157  2780		       e5 d3		      SBC	EnemySpeed
   3158  2782		       85 90		      STA	player1x
   3159  2784				   .skipL0304
   3160  2784				   .L0305		;  if player1x  <  LEdge then player1x  =  player1x  +  EnemySpeed
   3161  2784
   3162  2784		       a5 90		      LDA	player1x
   3163  2786		       c5 e3		      CMP	LEdge
   3164  2788		       b0 07		      BCS	.skipL0305
   3165  278a				   .condpart62
   3166  278a		       a5 90		      LDA	player1x
   3167  278c		       18		      CLC
   3168  278d		       65 d3		      ADC	EnemySpeed
   3169  278f		       85 90		      STA	player1x
   3170  2791				   .skipL0305
   3171  2791				   .
   3172  2791							; 
   3173  2791
   3174  2791				   .__Player2Move
   3175  2791							; __Player2Move
   3176  2791
   3177  2791				   .L0306		;  if drop  >=  48  &&  player2y  =  200 then goto __Player3Move
   3178  2791
   3179  2791		       a5 d1		      LDA	drop
   3180  2793		       c9 30		      CMP	#48
   3181  2795		       90 09		      BCC	.skipL0306
   3182  2797				   .condpart63
   3183  2797		       a5 9b		      LDA	player2y
   3184  2799		       c9 c8		      CMP	#200
   3185  279b		       d0 03		      BNE	.skip63then
   3186  279d				   .condpart64
   3187  279d		       4c 61 38 	      jmp	.__Player3Move
   3188  27a0
   3189  27a0				   .skip63then
   3190  27a0				   .skipL0306
   3191  27a0				   .L0307		;  if player2y  > 170	&&  EnemyHit  <>  2 then player2y  =   ( rand & 5 )  :	player2x  =   ( rand + 20 )  / 2 :  drop  =  drop  + 1
   3192  27a0
   3193  27a0		       a9 aa		      LDA	#170
   3194  27a2		       c5 9b		      CMP	player2y
   3195  27a4		       b0 28		      BCS	.skipL0307
   3196  27a6				   .condpart65
   3197  27a6		       a5 d9		      LDA	EnemyHit
   3198  27a8		       c9 02		      CMP	#2
   3199  27aa		       f0 22		      BEQ	.skip65then
   3200  27ac				   .condpart66
   3201  27ac							; complex statement detected
   3202  27ac		       ad 00 10 	      lda	rand
   3203  27af		       4a		      lsr
   3204  27b0				  -	      ifconst	rand16
   3205  27b0				  -	      rol	rand16
   3206  27b0					      endif
   3207  27b0		       90 02		      bcc	*+4
   3208  27b2		       49 b4		      eor	#$B4
   3209  27b4		       8d 00 10 	      sta	rand
   3210  27b7				  -	      ifconst	rand16
   3211  27b7				  -	      eor	rand16
   3212  27b7					      endif
   3213  27b7		       29 05		      AND	#5
   3214  27b9		       85 9b		      STA	player2y
   3215  27bb							; complex statement detected
   3216  27bb		       ad 00 10 	      lda	rand
   3217  27be		       4a		      lsr
   3218  27bf				  -	      ifconst	rand16
   3219  27bf				  -	      rol	rand16
   3220  27bf					      endif
   3221  27bf		       90 02		      bcc	*+4
   3222  27c1		       49 b4		      eor	#$B4
   3223  27c3		       8d 00 10 	      sta	rand
   3224  27c6				  -	      ifconst	rand16
   3225  27c6				  -	      eor	rand16
   3226  27c6					      endif
   3227  27c6		       18		      CLC
   3228  27c7		       69 14		      ADC	#20
   3229  27c9		       4a		      lsr
   3230  27ca		       85 91		      STA	player2x
   3231  27cc		       e6 d1		      INC	drop
   3232  27ce				   .skip65then
   3233  27ce				   .skipL0307
   3234  27ce				   .L0308		;  if player2x  <  15 then player2x  =  15
   3235  27ce
   3236  27ce		       a5 91		      LDA	player2x
   3237  27d0		       c9 0f		      CMP	#15
   3238  27d2		       b0 04		      BCS	.skipL0308
   3239  27d4				   .condpart67
   3240  27d4		       a9 0f		      LDA	#15
   3241  27d6		       85 91		      STA	player2x
   3242  27d8				   .skipL0308
   3243  27d8				   .L0309		;  if player2x  >  148 then player2x  =  148
   3244  27d8
   3245  27d8		       a9 94		      LDA	#148
   3246  27da		       c5 91		      CMP	player2x
   3247  27dc		       b0 04		      BCS	.skipL0309
   3248  27de				   .condpart68
   3249  27de		       a9 94		      LDA	#148
   3250  27e0		       85 91		      STA	player2x
   3251  27e2				   .skipL0309
   3252  27e2				   .L0310		;  if player2y  <  20	&&  player2y  >=  player4y  - 30  &&  player2y	<=  player4y + 30 then goto __Player3Move  : Moverate = Moverate - 1
   3253  27e2
   3254  27e2		       a5 9b		      LDA	player2y
   3255  27e4		       c9 14		      CMP	#20
   3256  27e6		       b0 1c		      BCS	.skipL0310
   3257  27e8				   .condpart69
   3258  27e8							; complex condition detected
   3259  27e8		       a5 9d		      LDA	player4y
   3260  27ea		       38		      SEC
   3261  27eb		       e9 1e		      SBC	#30
   3262  27ed		       48		      PHA
   3263  27ee		       ba		      TSX
   3264  27ef		       68		      PLA
   3265  27f0		       a5 9b		      LDA	player2y
   3266  27f2		       d5 01		      CMP	1,x
   3267  27f4		       90 0e		      BCC	.skip69then
   3268  27f6				   .condpart70
   3269  27f6							; complex condition detected
   3270  27f6		       a5 9d		      LDA	player4y
   3271  27f8		       18		      CLC
   3272  27f9		       69 1e		      ADC	#30
   3273  27fb		       c5 9b		      CMP	player2y
   3274  27fd		       90 05		      BCC	.skip70then
   3275  27ff				   .condpart71
   3276  27ff		       4c 61 38 	      jmp	.__Player3Move
   3277  2802		       c6 d2		      DEC	Moverate
   3278  2804				   .skip70then
   3279  2804				   .skip69then
   3280  2804				   .skipL0310
   3281  2804				   .L0311		;  if player2y  <  20	&&  player2y  >=  player1y  - 30  &&  player2y	<=  player1y + 30 then goto __Player3Move  : Moverate = Moverate - 1
   3282  2804
   3283  2804		       a5 9b		      LDA	player2y
   3284  2806		       c9 14		      CMP	#20
   3285  2808		       b0 1c		      BCS	.skipL0311
   3286  280a				   .condpart72
   3287  280a							; complex condition detected
   3288  280a		       a5 9a		      LDA	player1y
   3289  280c		       38		      SEC
   3290  280d		       e9 1e		      SBC	#30
   3291  280f		       48		      PHA
   3292  2810		       ba		      TSX
   3293  2811		       68		      PLA
   3294  2812		       a5 9b		      LDA	player2y
   3295  2814		       d5 01		      CMP	1,x
   3296  2816		       90 0e		      BCC	.skip72then
   3297  2818				   .condpart73
   3298  2818							; complex condition detected
   3299  2818		       a5 9a		      LDA	player1y
   3300  281a		       18		      CLC
   3301  281b		       69 1e		      ADC	#30
   3302  281d		       c5 9b		      CMP	player2y
   3303  281f		       90 05		      BCC	.skip73then
   3304  2821				   .condpart74
   3305  2821		       4c 61 38 	      jmp	.__Player3Move
   3306  2824		       c6 d2		      DEC	Moverate
   3307  2826				   .skip73then
   3308  2826				   .skip72then
   3309  2826				   .skipL0311
   3310  2826				   .L0312		;  if player2y  <  20	&&  player2y  >=  player3y  - 30  &&  player2y	<=  player3y + 30 then goto __Player3Move  : Moverate = Moverate - 1
   3311  2826
   3312  2826		       a5 9b		      LDA	player2y
   3313  2828		       c9 14		      CMP	#20
   3314  282a		       b0 1c		      BCS	.skipL0312
   3315  282c				   .condpart75
   3316  282c							; complex condition detected
   3317  282c		       a5 9c		      LDA	player3y
   3318  282e		       38		      SEC
   3319  282f		       e9 1e		      SBC	#30
   3320  2831		       48		      PHA
   3321  2832		       ba		      TSX
   3322  2833		       68		      PLA
   3323  2834		       a5 9b		      LDA	player2y
   3324  2836		       d5 01		      CMP	1,x
   3325  2838		       90 0e		      BCC	.skip75then
   3326  283a				   .condpart76
   3327  283a							; complex condition detected
   3328  283a		       a5 9c		      LDA	player3y
   3329  283c		       18		      CLC
   3330  283d		       69 1e		      ADC	#30
   3331  283f		       c5 9b		      CMP	player2y
   3332  2841		       90 05		      BCC	.skip76then
   3333  2843				   .condpart77
   3334  2843		       4c 61 38 	      jmp	.__Player3Move
   3335  2846		       c6 d2		      DEC	Moverate
   3336  2848				   .skip76then
   3337  2848				   .skip75then
   3338  2848				   .skipL0312
   3339  2848				   .__SkipP2drop
   3340  2848							; __SkipP2drop
   3341  2848
   3342  2848				   .L0313		;  if EnemyHit  =  2 then goto __Player3Move
   3343  2848
   3344  2848		       a5 d9		      LDA	EnemyHit
   3345  284a		       c9 02		      CMP	#2
   3346  284c		       d0 03		      BNE	.skipL0313
   3347  284e				   .condpart78
   3348  284e		       4c 61 38 	      jmp	.__Player3Move
   3349  2851
   3350  2851				   .skipL0313
   3351  2851				   .L0314		;  if Moverate  <  8 then goto __CheckCollision
   3352  2851
   3353  2851		       a5 d2		      LDA	Moverate
   3354  2853		       c9 08		      CMP	#8
   3355  2855		       b0 03		      BCS	.skipL0314
   3356  2857				   .condpart79
   3357  2857		       4c 20 39 	      jmp	.__CheckCollision
   3358  285a
   3359  285a				   .skipL0314
   3360  285a				   .L0315		;  player2y  =  player2y  +  EnemySpeed
   3361  285a
   3362  285a		       a5 9b		      LDA	player2y
   3363  285c		       18		      CLC
   3364  285d		       65 d3		      ADC	EnemySpeed
   3365  285f		       85 9b		      STA	player2y
   3366  2861				   .
   3367  2861							; 
   3368  2861
   3369  2861				   .__Player3Move
   3370  2861							; __Player3Move
   3371  2861
   3372  2861				   .L0316		;  if drop  <	50 then if player3y  >	170  &&  LEdge	<  80 then player3y  =	( rand & 40 )  + 30 : player3x	=  148	:  drop  =  drop  + 1
   3373  2861
   3374  2861		       a5 d1		      LDA	drop
   3375  2863		       c9 32		      CMP	#50
   3376  2865		       b0 24		      BCS	.skipL0316
   3377  2867				   .condpart80
   3378  2867		       a9 aa		      LDA	#170
   3379  2869		       c5 9c		      CMP	player3y
   3380  286b		       b0 1e		      BCS	.skip80then
   3381  286d				   .condpart81
   3382  286d		       a5 e3		      LDA	LEdge
   3383  286f		       c9 50		      CMP	#80
   3384  2871		       b0 18		      BCS	.skip81then
   3385  2873				   .condpart82
   3386  2873							; complex statement detected
   3387  2873		       ad 00 10 	      lda	rand
   3388  2876		       4a		      lsr
   3389  2877				  -	      ifconst	rand16
   3390  2877				  -	      rol	rand16
   3391  2877					      endif
   3392  2877		       90 02		      bcc	*+4
   3393  2879		       49 b4		      eor	#$B4
   3394  287b		       8d 00 10 	      sta	rand
   3395  287e				  -	      ifconst	rand16
   3396  287e				  -	      eor	rand16
   3397  287e					      endif
   3398  287e		       29 28		      AND	#40
   3399  2880		       18		      CLC
   3400  2881		       69 1e		      ADC	#30
   3401  2883		       85 9c		      STA	player3y
   3402  2885		       a9 94		      LDA	#148
   3403  2887		       85 92		      STA	player3x
   3404  2889		       e6 d1		      INC	drop
   3405  288b				   .skip81then
   3406  288b				   .skip80then
   3407  288b				   .skipL0316
   3408  288b				   .L0317		;  if drop  <	50 then if player3y  >	170  &&  LEdge	>  80 then player3y  =	( rand & 40 )  + 30 : player3x	=  10  :  drop	=  drop  + 1
   3409  288b
   3410  288b		       a5 d1		      LDA	drop
   3411  288d		       c9 32		      CMP	#50
   3412  288f		       b0 24		      BCS	.skipL0317
   3413  2891				   .condpart83
   3414  2891		       a9 aa		      LDA	#170
   3415  2893		       c5 9c		      CMP	player3y
   3416  2895		       b0 1e		      BCS	.skip83then
   3417  2897				   .condpart84
   3418  2897		       a9 50		      LDA	#80
   3419  2899		       c5 e3		      CMP	LEdge
   3420  289b		       b0 18		      BCS	.skip84then
   3421  289d				   .condpart85
   3422  289d							; complex statement detected
   3423  289d		       ad 00 10 	      lda	rand
   3424  28a0		       4a		      lsr
   3425  28a1				  -	      ifconst	rand16
   3426  28a1				  -	      rol	rand16
   3427  28a1					      endif
   3428  28a1		       90 02		      bcc	*+4
   3429  28a3		       49 b4		      eor	#$B4
   3430  28a5		       8d 00 10 	      sta	rand
   3431  28a8				  -	      ifconst	rand16
   3432  28a8				  -	      eor	rand16
   3433  28a8					      endif
   3434  28a8		       29 28		      AND	#40
   3435  28aa		       18		      CLC
   3436  28ab		       69 1e		      ADC	#30
   3437  28ad		       85 9c		      STA	player3y
   3438  28af		       a9 0a		      LDA	#10
   3439  28b1		       85 92		      STA	player3x
   3440  28b3		       e6 d1		      INC	drop
   3441  28b5				   .skip84then
   3442  28b5				   .skip83then
   3443  28b5				   .skipL0317
   3444  28b5				   .
   3445  28b5							; 
   3446  28b5
   3447  28b5				   .__SkipP3drop
   3448  28b5							; __SkipP3drop
   3449  28b5
   3450  28b5				   .L0318		;  if Moverate  <  8 then goto __CheckCollision
   3451  28b5
   3452  28b5		       a5 d2		      LDA	Moverate
   3453  28b7		       c9 08		      CMP	#8
   3454  28b9		       b0 03		      BCS	.skipL0318
   3455  28bb				   .condpart86
   3456  28bb		       4c 20 39 	      jmp	.__CheckCollision
   3457  28be
   3458  28be				   .skipL0318
   3459  28be				   .L0319		;  if level  >  2  &&	player3x  >  LEdge  &&	player3x  <  REdge then player3y  =  player3y  +  3 :  goto __SkipHMove
   3460  28be
   3461  28be		       a9 02		      LDA	#2
   3462  28c0		       c5 dc		      CMP	level
   3463  28c2		       b0 16		      BCS	.skipL0319
   3464  28c4				   .condpart87
   3465  28c4		       a5 e3		      LDA	LEdge
   3466  28c6		       c5 92		      CMP	player3x
   3467  28c8		       b0 10		      BCS	.skip87then
   3468  28ca				   .condpart88
   3469  28ca		       a5 92		      LDA	player3x
   3470  28cc		       c5 d7		      CMP	REdge
   3471  28ce		       b0 0a		      BCS	.skip88then
   3472  28d0				   .condpart89
   3473  28d0		       a5 9c		      LDA	player3y
   3474  28d2		       18		      CLC
   3475  28d3		       69 03		      ADC	#3
   3476  28d5		       85 9c		      STA	player3y
   3477  28d7		       4c 1c 39 	      jmp	.__SkipHMove
   3478  28da
   3479  28da				   .skip88then
   3480  28da				   .skip87then
   3481  28da				   .skipL0319
   3482  28da				   .L0320		;  if EnemyHit  =  3 then goto __SkipHMove
   3483  28da
   3484  28da		       a5 d9		      LDA	EnemyHit
   3485  28dc		       c9 03		      CMP	#3
   3486  28de		       d0 03		      BNE	.skipL0320
   3487  28e0				   .condpart90
   3488  28e0		       4c 1c 39 	      jmp	.__SkipHMove
   3489  28e3
   3490  28e3				   .skipL0320
   3491  28e3				   .
   3492  28e3							; 
   3493  28e3
   3494  28e3				   .L0321		;  if rand  <	179 then if LEdge  <  80 then player3x	=  player3x  -	EnemySpeed
   3495  28e3
   3496  28e3		       ad 00 10 	      LDA	rand
   3497  28e6		       c9 b3		      CMP	#179
   3498  28e8		       b0 0d		      BCS	.skipL0321
   3499  28ea				   .condpart91
   3500  28ea		       a5 e3		      LDA	LEdge
   3501  28ec		       c9 50		      CMP	#80
   3502  28ee		       b0 07		      BCS	.skip91then
   3503  28f0				   .condpart92
   3504  28f0		       a5 92		      LDA	player3x
   3505  28f2		       38		      SEC
   3506  28f3		       e5 d3		      SBC	EnemySpeed
   3507  28f5		       85 92		      STA	player3x
   3508  28f7				   .skip91then
   3509  28f7				   .skipL0321
   3510  28f7				   .L0322		;  if rand  <	179 then if LEdge  >  80 then player3x	=  player3x  +	EnemySpeed
   3511  28f7
   3512  28f7		       ad 00 10 	      LDA	rand
   3513  28fa		       c9 b3		      CMP	#179
   3514  28fc		       b0 0d		      BCS	.skipL0322
   3515  28fe				   .condpart93
   3516  28fe		       a9 50		      LDA	#80
   3517  2900		       c5 e3		      CMP	LEdge
   3518  2902		       b0 07		      BCS	.skip93then
   3519  2904				   .condpart94
   3520  2904		       a5 92		      LDA	player3x
   3521  2906		       18		      CLC
   3522  2907		       65 d3		      ADC	EnemySpeed
   3523  2909		       85 92		      STA	player3x
   3524  290b				   .skip93then
   3525  290b				   .skipL0322
   3526  290b				   .L0323		;  if player3x  >  170  ||  player3x  <  5 then drop  = drop  + 1
   3527  290b
   3528  290b		       a9 aa		      LDA	#170
   3529  290d		       c5 92		      CMP	player3x
   3530  290f		       b0 03		      BCS	.skipL0323
   3531  2911				   .condpart95
   3532  2911		       4c 1a 39 	      jmp	.condpart96
   3533  2914				   .skipL0323
   3534  2914		       a5 92		      LDA	player3x
   3535  2916		       c9 05		      CMP	#5
   3536  2918		       b0 02		      BCS	.skip20OR
   3537  291a				   .condpart96
   3538  291a		       e6 d1		      INC	drop
   3539  291c				   .skip20OR
   3540  291c				   .
   3541  291c							; 
   3542  291c
   3543  291c				   .__SkipHMove
   3544  291c							; __SkipHMove
   3545  291c
   3546  291c				   .L0324		;  Moverate = 0
   3547  291c
   3548  291c		       a9 00		      LDA	#0
   3549  291e		       85 d2		      STA	Moverate
   3550  2920				   .
   3551  2920							; 
   3552  2920
   3553  2920				   .__EnemyMove
   3554  2920							; __EnemyMove
   3555  2920
   3556  2920				   .
   3557  2920							; 
   3558  2920
   3559  2920				   .__CheckCollision
   3560  2920							; __CheckCollision
   3561  2920
   3562  2920				   .L0325		;  if EnemyHit  > 0 then __EnemyCollision
   3563  2920
   3564  2920		       a9 00		      LDA	#0
   3565  2922		       c5 d9		      CMP	EnemyHit
   3566  2924				  -	      if	((* - .__EnemyCollision) < 127) && ((* - .__EnemyCollision) > -128)
   3567  2924				  -	      bcc	.__EnemyCollision
   3568  2924					      else
   3569  2924		       b0 03		      bcs	.4skip__EnemyCollision
   3570  2926		       4c b3 39 	      jmp	.__EnemyCollision
   3571  2929				   .4skip__EnemyCollision
   3572  2929					      endif
   3573  2929				   .L0326		;  if !collision(player1,playfield) then goto __EnemyCollision
   3574  2929
   3575  2929		       24 03		      bit	CXP1FB
   3576  292b		       30 03		      BMI	.skipL0326
   3577  292d				   .condpart97
   3578  292d		       4c b3 39 	      jmp	.__EnemyCollision
   3579  2930
   3580  2930				   .skipL0326
   3581  2930				   .L0327		;  if	( temp4  +  5 )   >=  player1y	&&  temp4  <=	( player1y  +  5 )  then player1y = 200  :  Househit = Househit + 1  :	Bit5_hit{5}  = 1  :  goto __Explosion
   3582  2930
   3583  2930							; complex condition detected
   3584  2930							; complex statement detected
   3585  2930		       a5 ce		      LDA	temp4
   3586  2932		       18		      CLC
   3587  2933		       69 05		      ADC	#5
   3588  2935							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3589  2935		       c5 9a		      CMP	player1y
   3590  2937		       90 18		      BCC	.skipL0327
   3591  2939				   .condpart98
   3592  2939							; complex condition detected
   3593  2939							; complex statement detected
   3594  2939		       a5 9a		      LDA	player1y
   3595  293b		       18		      CLC
   3596  293c		       69 05		      ADC	#5
   3597  293e		       c5 ce		      CMP	temp4
   3598  2940		       90 0f		      BCC	.skip98then
   3599  2942				   .condpart99
   3600  2942		       a9 c8		      LDA	#200
   3601  2944		       85 9a		      STA	player1y
   3602  2946		       e6 e1		      INC	Househit
   3603  2948		       a5 ea		      LDA	Bit5_hit
   3604  294a		       09 20		      ORA	#32
   3605  294c		       85 ea		      STA	Bit5_hit
   3606  294e		       4c 75 3c 	      jmp	.__Explosion
   3607  2951
   3608  2951				   .skip98then
   3609  2951				   .skipL0327
   3610  2951				   .L0328		;  if	( temp4  +  5 )   >=  player2y	&&  temp4  <=	( player2y  +  5 )  then player2y = 200  :  Househit = Househit + 1  :	Bit5_hit{5}  = 1  :  goto __Explosion
   3611  2951
   3612  2951							; complex condition detected
   3613  2951							; complex statement detected
   3614  2951		       a5 ce		      LDA	temp4
   3615  2953		       18		      CLC
   3616  2954		       69 05		      ADC	#5
   3617  2956							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3618  2956		       c5 9b		      CMP	player2y
   3619  2958		       90 18		      BCC	.skipL0328
   3620  295a				   .condpart100
   3621  295a							; complex condition detected
   3622  295a							; complex statement detected
   3623  295a		       a5 9b		      LDA	player2y
   3624  295c		       18		      CLC
   3625  295d		       69 05		      ADC	#5
   3626  295f		       c5 ce		      CMP	temp4
   3627  2961		       90 0f		      BCC	.skip100then
   3628  2963				   .condpart101
   3629  2963		       a9 c8		      LDA	#200
   3630  2965		       85 9b		      STA	player2y
   3631  2967		       e6 e1		      INC	Househit
   3632  2969		       a5 ea		      LDA	Bit5_hit
   3633  296b		       09 20		      ORA	#32
   3634  296d		       85 ea		      STA	Bit5_hit
   3635  296f		       4c 75 3c 	      jmp	.__Explosion
   3636  2972
   3637  2972				   .skip100then
   3638  2972				   .skipL0328
   3639  2972				   .L0329		;  if	( temp4  +  5 )   >=  player3y	&&  temp4  <=	( player3y  +  5 )  then player3y = 200  :  Househit = Househit + 1  :	Bit5_hit{5}  = 1  :  goto __Explosion
   3640  2972
   3641  2972							; complex condition detected
   3642  2972							; complex statement detected
   3643  2972		       a5 ce		      LDA	temp4
   3644  2974		       18		      CLC
   3645  2975		       69 05		      ADC	#5
   3646  2977							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3647  2977		       c5 9c		      CMP	player3y
   3648  2979		       90 18		      BCC	.skipL0329
   3649  297b				   .condpart102
   3650  297b							; complex condition detected
   3651  297b							; complex statement detected
   3652  297b		       a5 9c		      LDA	player3y
   3653  297d		       18		      CLC
   3654  297e		       69 05		      ADC	#5
   3655  2980		       c5 ce		      CMP	temp4
   3656  2982		       90 0f		      BCC	.skip102then
   3657  2984				   .condpart103
   3658  2984		       a9 c8		      LDA	#200
   3659  2986		       85 9c		      STA	player3y
   3660  2988		       e6 e1		      INC	Househit
   3661  298a		       a5 ea		      LDA	Bit5_hit
   3662  298c		       09 20		      ORA	#32
   3663  298e		       85 ea		      STA	Bit5_hit
   3664  2990		       4c 75 3c 	      jmp	.__Explosion
   3665  2993
   3666  2993				   .skip102then
   3667  2993				   .skipL0329
   3668  2993				   .L0330		;  if	( temp4  +  5 )   >=  player4y	&&  temp4  <=	( player4y  +  5 )  then player4y = 200  :  HealthDrop = 0 :  Bit2_EnemyMove{2} = 0
   3669  2993
   3670  2993							; complex condition detected
   3671  2993							; complex statement detected
   3672  2993		       a5 ce		      LDA	temp4
   3673  2995		       18		      CLC
   3674  2996		       69 05		      ADC	#5
   3675  2998							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3676  2998		       c5 9d		      CMP	player4y
   3677  299a		       90 17		      BCC	.skipL0330
   3678  299c				   .condpart104
   3679  299c							; complex condition detected
   3680  299c							; complex statement detected
   3681  299c		       a5 9d		      LDA	player4y
   3682  299e		       18		      CLC
   3683  299f		       69 05		      ADC	#5
   3684  29a1		       c5 ce		      CMP	temp4
   3685  29a3		       90 0e		      BCC	.skip104then
   3686  29a5				   .condpart105
   3687  29a5		       a9 c8		      LDA	#200
   3688  29a7		       85 9d		      STA	player4y
   3689  29a9		       a9 00		      LDA	#0
   3690  29ab		       85 de		      STA	HealthDrop
   3691  29ad		       a5 ea		      LDA	Bit2_EnemyMove
   3692  29af		       29 fb		      AND	#251
   3693  29b1		       85 ea		      STA	Bit2_EnemyMove
   3694  29b3				   .skip104then
   3695  29b3				   .skipL0330
   3696  29b3				   .
   3697  29b3							; 
   3698  29b3
   3699  29b3				   .__EnemyCollision
   3700  29b3							; __EnemyCollision
   3701  29b3
   3702  29b3				   .L0331		;  if !collision(player0,player1) then goto __Skip_p0_Collision
   3703  29b3
   3704  29b3		       24 07		      bit	CXPPMM
   3705  29b5		       30 03		      BMI	.skipL0331
   3706  29b7				   .condpart106
   3707  29b7		       4c bd 3a 	      jmp	.__Skip_p0_Collision
   3708  29ba
   3709  29ba				   .skipL0331
   3710  29ba				   .L0332		;  temp5  =  16
   3711  29ba
   3712  29ba		       a9 10		      LDA	#16
   3713  29bc		       85 cf		      STA	temp5
   3714  29be				   .L0333		;  if EnemyHit  <>  1 then if	( player0y  +  10 )   >=  player1y  &&	player0y  <=   ( player1y  +  10 )   &&   ( player0x  +  temp5 )   >=  player1x  &&  player0x  <=   ( player1x	+  7 )	then EnemyHit  =  1  :	goto __EnemyBlock
   3715  29be
   3716  29be		       a5 d9		      LDA	EnemyHit
   3717  29c0		       c9 01		      CMP	#1
   3718  29c2		       f0 2b		      BEQ	.skipL0333
   3719  29c4				   .condpart107
   3720  29c4							; complex condition detected
   3721  29c4							; complex statement detected
   3722  29c4		       a5 99		      LDA	player0y
   3723  29c6		       18		      CLC
   3724  29c7		       69 0a		      ADC	#10
   3725  29c9							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3726  29c9		       c5 9a		      CMP	player1y
   3727  29cb		       90 22		      BCC	.skip107then
   3728  29cd				   .condpart108
   3729  29cd							; complex condition detected
   3730  29cd							; complex statement detected
   3731  29cd		       a5 9a		      LDA	player1y
   3732  29cf		       18		      CLC
   3733  29d0		       69 0a		      ADC	#10
   3734  29d2							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3735  29d2		       c5 99		      CMP	player0y
   3736  29d4		       90 19		      BCC	.skip108then
   3737  29d6				   .condpart109
   3738  29d6							; complex condition detected
   3739  29d6							; complex statement detected
   3740  29d6		       a5 80		      LDA	player0x
   3741  29d8		       18		      CLC
   3742  29d9		       65 cf		      ADC	temp5
   3743  29db							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3744  29db		       c5 90		      CMP	player1x
   3745  29dd		       90 10		      BCC	.skip109then
   3746  29df				   .condpart110
   3747  29df							; complex condition detected
   3748  29df							; complex statement detected
   3749  29df		       a5 90		      LDA	player1x
   3750  29e1		       18		      CLC
   3751  29e2		       69 07		      ADC	#7
   3752  29e4		       c5 80		      CMP	player0x
   3753  29e6		       90 07		      BCC	.skip110then
   3754  29e8				   .condpart111
   3755  29e8		       a9 01		      LDA	#1
   3756  29ea		       85 d9		      STA	EnemyHit
   3757  29ec		       4c e1 3d 	      jmp	.__EnemyBlock
   3758  29ef
   3759  29ef				   .skip110then
   3760  29ef				   .skip109then
   3761  29ef				   .skip108then
   3762  29ef				   .skip107then
   3763  29ef				   .skipL0333
   3764  29ef				   .L0334		;  if EnemyHit  <>  2 then if	( player0y  +  10 )   >=  player2y  &&	player0y  <=   ( player2y  +  10 )   &&   ( player0x  +  temp5 )   >=  player2x  &&  player0x  <=   ( player2x	+  7 )	then EnemyHit  =  2 :  goto __EnemyBlock
   3765  29ef
   3766  29ef		       a5 d9		      LDA	EnemyHit
   3767  29f1		       c9 02		      CMP	#2
   3768  29f3		       f0 2b		      BEQ	.skipL0334
   3769  29f5				   .condpart112
   3770  29f5							; complex condition detected
   3771  29f5							; complex statement detected
   3772  29f5		       a5 99		      LDA	player0y
   3773  29f7		       18		      CLC
   3774  29f8		       69 0a		      ADC	#10
   3775  29fa							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3776  29fa		       c5 9b		      CMP	player2y
   3777  29fc		       90 22		      BCC	.skip112then
   3778  29fe				   .condpart113
   3779  29fe							; complex condition detected
   3780  29fe							; complex statement detected
   3781  29fe		       a5 9b		      LDA	player2y
   3782  2a00		       18		      CLC
   3783  2a01		       69 0a		      ADC	#10
   3784  2a03							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3785  2a03		       c5 99		      CMP	player0y
   3786  2a05		       90 19		      BCC	.skip113then
   3787  2a07				   .condpart114
   3788  2a07							; complex condition detected
   3789  2a07							; complex statement detected
   3790  2a07		       a5 80		      LDA	player0x
   3791  2a09		       18		      CLC
   3792  2a0a		       65 cf		      ADC	temp5
   3793  2a0c							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3794  2a0c		       c5 91		      CMP	player2x
   3795  2a0e		       90 10		      BCC	.skip114then
   3796  2a10				   .condpart115
   3797  2a10							; complex condition detected
   3798  2a10							; complex statement detected
   3799  2a10		       a5 91		      LDA	player2x
   3800  2a12		       18		      CLC
   3801  2a13		       69 07		      ADC	#7
   3802  2a15		       c5 80		      CMP	player0x
   3803  2a17		       90 07		      BCC	.skip115then
   3804  2a19				   .condpart116
   3805  2a19		       a9 02		      LDA	#2
   3806  2a1b		       85 d9		      STA	EnemyHit
   3807  2a1d		       4c e1 3d 	      jmp	.__EnemyBlock
   3808  2a20
   3809  2a20				   .skip115then
   3810  2a20				   .skip114then
   3811  2a20				   .skip113then
   3812  2a20				   .skip112then
   3813  2a20				   .skipL0334
   3814  2a20				   .L0335		;  if EnemyHit  <>  3 then if	( player0y  +  10 )   >=  player3y  &&	player0y  <=   ( player3y  +  10 )   &&   ( player0x  +  temp5 )   >=  player3x  &&  player0x  <=   ( player3x	+  7 )	then EnemyHit  =  3  :	goto __EnemyBlock
   3815  2a20
   3816  2a20		       a5 d9		      LDA	EnemyHit
   3817  2a22		       c9 03		      CMP	#3
   3818  2a24		       f0 2b		      BEQ	.skipL0335
   3819  2a26				   .condpart117
   3820  2a26							; complex condition detected
   3821  2a26							; complex statement detected
   3822  2a26		       a5 99		      LDA	player0y
   3823  2a28		       18		      CLC
   3824  2a29		       69 0a		      ADC	#10
   3825  2a2b							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3826  2a2b		       c5 9c		      CMP	player3y
   3827  2a2d		       90 22		      BCC	.skip117then
   3828  2a2f				   .condpart118
   3829  2a2f							; complex condition detected
   3830  2a2f							; complex statement detected
   3831  2a2f		       a5 9c		      LDA	player3y
   3832  2a31		       18		      CLC
   3833  2a32		       69 0a		      ADC	#10
   3834  2a34							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3835  2a34		       c5 99		      CMP	player0y
   3836  2a36		       90 19		      BCC	.skip118then
   3837  2a38				   .condpart119
   3838  2a38							; complex condition detected
   3839  2a38							; complex statement detected
   3840  2a38		       a5 80		      LDA	player0x
   3841  2a3a		       18		      CLC
   3842  2a3b		       65 cf		      ADC	temp5
   3843  2a3d							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3844  2a3d		       c5 92		      CMP	player3x
   3845  2a3f		       90 10		      BCC	.skip119then
   3846  2a41				   .condpart120
   3847  2a41							; complex condition detected
   3848  2a41							; complex statement detected
   3849  2a41		       a5 92		      LDA	player3x
   3850  2a43		       18		      CLC
   3851  2a44		       69 07		      ADC	#7
   3852  2a46		       c5 80		      CMP	player0x
   3853  2a48		       90 07		      BCC	.skip120then
   3854  2a4a				   .condpart121
   3855  2a4a		       a9 03		      LDA	#3
   3856  2a4c		       85 d9		      STA	EnemyHit
   3857  2a4e		       4c e1 3d 	      jmp	.__EnemyBlock
   3858  2a51
   3859  2a51				   .skip120then
   3860  2a51				   .skip119then
   3861  2a51				   .skip118then
   3862  2a51				   .skip117then
   3863  2a51				   .skipL0335
   3864  2a51				   .L0336		;  if	( player0y  +  10 )   >=  player4y  &&	player0y  <=   ( player4y  +  10 )   &&   ( player0x  +  temp5 )   >=  player4x  &&  player0x  <=   ( player4x	+  7 )	then gosub __Health bank3
   3865  2a51
   3866  2a51							; complex condition detected
   3867  2a51							; complex statement detected
   3868  2a51		       a5 99		      LDA	player0y
   3869  2a53		       18		      CLC
   3870  2a54		       69 0a		      ADC	#10
   3871  2a56							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3872  2a56		       c5 9d		      CMP	player4y
   3873  2a58		       90 33		      BCC	.skipL0336
   3874  2a5a				   .condpart122
   3875  2a5a							; complex condition detected
   3876  2a5a							; complex statement detected
   3877  2a5a		       a5 9d		      LDA	player4y
   3878  2a5c		       18		      CLC
   3879  2a5d		       69 0a		      ADC	#10
   3880  2a5f							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3881  2a5f		       c5 99		      CMP	player0y
   3882  2a61		       90 2a		      BCC	.skip122then
   3883  2a63				   .condpart123
   3884  2a63							; complex condition detected
   3885  2a63							; complex statement detected
   3886  2a63		       a5 80		      LDA	player0x
   3887  2a65		       18		      CLC
   3888  2a66		       65 cf		      ADC	temp5
   3889  2a68							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3890  2a68		       c5 93		      CMP	player4x
   3891  2a6a		       90 21		      BCC	.skip123then
   3892  2a6c				   .condpart124
   3893  2a6c							; complex condition detected
   3894  2a6c							; complex statement detected
   3895  2a6c		       a5 93		      LDA	player4x
   3896  2a6e		       18		      CLC
   3897  2a6f		       69 07		      ADC	#7
   3898  2a71		       c5 80		      CMP	player0x
   3899  2a73		       90 18		      BCC	.skip124then
   3900  2a75				   .condpart125
   3901  2a75		       85 81		      sta	temp7
   3902  2a77		       a9 3a		      lda	#>(ret_point17-1)
   3903  2a79		       48		      pha
   3904  2a7a		       a9 8c		      lda	#<(ret_point17-1)
   3905  2a7c		       48		      pha
   3906  2a7d		       a9 53		      lda	#>(.__Health-1)
   3907  2a7f		       48		      pha
   3908  2a80		       a9 ae		      lda	#<(.__Health-1)
   3909  2a82		       48		      pha
   3910  2a83		       a5 81		      lda	temp7
   3911  2a85		       48		      pha
   3912  2a86		       8a		      txa
   3913  2a87		       48		      pha
   3914  2a88		       a2 03		      ldx	#3
   3915  2a8a		       4c ee df 	      jmp	BS_jsr
   3916  2a8d				   ret_point17
   3917  2a8d				   .skip124then
   3918  2a8d				   .skip123then
   3919  2a8d				   .skip122then
   3920  2a8d				   .skipL0336
   3921  2a8d				   .L0337		;  if	( player0y  +  10 )   >=  player5y  &&	player0y  <=   ( player5y  +  10 )   &&   ( player0x  +  temp5 )   >=  player5x  &&  player0x  <=   ( player5x	+  7 )	then goto __JoystickControls
   3922  2a8d
   3923  2a8d							; complex condition detected
   3924  2a8d							; complex statement detected
   3925  2a8d		       a5 99		      LDA	player0y
   3926  2a8f		       18		      CLC
   3927  2a90		       69 0a		      ADC	#10
   3928  2a92							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3929  2a92		       c5 9e		      CMP	player5y
   3930  2a94		       90 1e		      BCC	.skipL0337
   3931  2a96				   .condpart126
   3932  2a96							; complex condition detected
   3933  2a96							; complex statement detected
   3934  2a96		       a5 9e		      LDA	player5y
   3935  2a98		       18		      CLC
   3936  2a99		       69 0a		      ADC	#10
   3937  2a9b							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3938  2a9b		       c5 99		      CMP	player0y
   3939  2a9d		       90 15		      BCC	.skip126then
   3940  2a9f				   .condpart127
   3941  2a9f							; complex condition detected
   3942  2a9f							; complex statement detected
   3943  2a9f		       a5 80		      LDA	player0x
   3944  2aa1		       18		      CLC
   3945  2aa2		       65 cf		      ADC	temp5
   3946  2aa4							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3947  2aa4		       c5 94		      CMP	player5x
   3948  2aa6		       90 0c		      BCC	.skip127then
   3949  2aa8				   .condpart128
   3950  2aa8							; complex condition detected
   3951  2aa8							; complex statement detected
   3952  2aa8		       a5 94		      LDA	player5x
   3953  2aaa		       18		      CLC
   3954  2aab		       69 07		      ADC	#7
   3955  2aad		       c5 80		      CMP	player0x
   3956  2aaf		       90 03		      BCC	.skip128then
   3957  2ab1				   .condpart129
   3958  2ab1		       4c c3 3b 	      jmp	.__JoystickControls
   3959  2ab4
   3960  2ab4				   .skip128then
   3961  2ab4				   .skip127then
   3962  2ab4				   .skip126then
   3963  2ab4				   .skipL0337
   3964  2ab4				   .L0338		;  if EnemyHit  <  1 then goto __EnemyScore
   3965  2ab4
   3966  2ab4		       a5 d9		      LDA	EnemyHit
   3967  2ab6		       c9 01		      CMP	#1
   3968  2ab8		       b0 03		      BCS	.skipL0338
   3969  2aba				   .condpart130
   3970  2aba		       4c 16 3e 	      jmp	.__EnemyScore
   3971  2abd
   3972  2abd				   .skipL0338
   3973  2abd				   .
   3974  2abd							; 
   3975  2abd
   3976  2abd				   .__Skip_p0_Collision
   3977  2abd							; __Skip_p0_Collision
   3978  2abd
   3979  2abd				   .L0339		;  if !collision(missile0,player1) then goto __Skip_PF_Collision
   3980  2abd
   3981  2abd		       24 00		      bit	CXM0P
   3982  2abf		       30 03		      BMI	.skipL0339
   3983  2ac1				   .condpart131
   3984  2ac1		       4c a5 3b 	      jmp	.__Skip_PF_Collision
   3985  2ac4
   3986  2ac4				   .skipL0339
   3987  2ac4				   .L0340		;  temp5  =  missile0height[8]
   3988  2ac4
   3989  2ac4		       a2 08		      LDX	#8
   3990  2ac6		       b5 c2		      LDA	missile0height,x
   3991  2ac8		       85 cf		      STA	temp5
   3992  2aca				   .L0341		;  if EnemyHit  <  1 then if  ( missile0y  +  missile0height )   >=  player1y	&&  missile0y  <=   ( player1y	+  10 )   &&   ( missile0x  +  temp5 )	 >=  player1x  &&  missile0x  <=   ( player1x  +  15 )	then EnemyHit  =  1 :  Points = $10  :	goto __Score
   3993  2aca
   3994  2aca		       a5 d9		      LDA	EnemyHit
   3995  2acc		       c9 01		      CMP	#1
   3996  2ace		       b0 2f		      BCS	.skipL0341
   3997  2ad0				   .condpart132
   3998  2ad0							; complex condition detected
   3999  2ad0							; complex statement detected
   4000  2ad0		       a5 bf		      LDA	missile0y
   4001  2ad2		       18		      CLC
   4002  2ad3		       65 c2		      ADC	missile0height
   4003  2ad5							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4004  2ad5		       c5 9a		      CMP	player1y
   4005  2ad7		       90 26		      BCC	.skip132then
   4006  2ad9				   .condpart133
   4007  2ad9							; complex condition detected
   4008  2ad9							; complex statement detected
   4009  2ad9		       a5 9a		      LDA	player1y
   4010  2adb		       18		      CLC
   4011  2adc		       69 0a		      ADC	#10
   4012  2ade							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4013  2ade		       c5 bf		      CMP	missile0y
   4014  2ae0		       90 1d		      BCC	.skip133then
   4015  2ae2				   .condpart134
   4016  2ae2							; complex condition detected
   4017  2ae2							; complex statement detected
   4018  2ae2		       a5 82		      LDA	missile0x
   4019  2ae4		       18		      CLC
   4020  2ae5		       65 cf		      ADC	temp5
   4021  2ae7							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4022  2ae7		       c5 90		      CMP	player1x
   4023  2ae9		       90 14		      BCC	.skip134then
   4024  2aeb				   .condpart135
   4025  2aeb							; complex condition detected
   4026  2aeb							; complex statement detected
   4027  2aeb		       a5 90		      LDA	player1x
   4028  2aed		       18		      CLC
   4029  2aee		       69 0f		      ADC	#15
   4030  2af0		       c5 82		      CMP	missile0x
   4031  2af2		       90 0b		      BCC	.skip135then
   4032  2af4				   .condpart136
   4033  2af4		       a9 01		      LDA	#1
   4034  2af6		       85 d9		      STA	EnemyHit
   4035  2af8		       a9 10		      LDA	#$10
   4036  2afa		       85 d4		      STA	Points
   4037  2afc		       4c 08 3d 	      jmp	.__Score
   4038  2aff
   4039  2aff				   .skip135then
   4040  2aff				   .skip134then
   4041  2aff				   .skip133then
   4042  2aff				   .skip132then
   4043  2aff				   .skipL0341
   4044  2aff				   .L0342		;  if EnemyHit  <  2 then if  ( missile0y  +  missile0height )   >=  player2y	&&  missile0y  <=   ( player2y	+  10 )   &&   ( missile0x  +  temp5 )	 >=  player2x  &&  missile0x  <=   ( player2x  +  15 )	then EnemyHit  =  2  :	Points = $05  :  goto __Score
   4045  2aff
   4046  2aff		       a5 d9		      LDA	EnemyHit
   4047  2b01		       c9 02		      CMP	#2
   4048  2b03		       b0 2f		      BCS	.skipL0342
   4049  2b05				   .condpart137
   4050  2b05							; complex condition detected
   4051  2b05							; complex statement detected
   4052  2b05		       a5 bf		      LDA	missile0y
   4053  2b07		       18		      CLC
   4054  2b08		       65 c2		      ADC	missile0height
   4055  2b0a							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4056  2b0a		       c5 9b		      CMP	player2y
   4057  2b0c		       90 26		      BCC	.skip137then
   4058  2b0e				   .condpart138
   4059  2b0e							; complex condition detected
   4060  2b0e							; complex statement detected
   4061  2b0e		       a5 9b		      LDA	player2y
   4062  2b10		       18		      CLC
   4063  2b11		       69 0a		      ADC	#10
   4064  2b13							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4065  2b13		       c5 bf		      CMP	missile0y
   4066  2b15		       90 1d		      BCC	.skip138then
   4067  2b17				   .condpart139
   4068  2b17							; complex condition detected
   4069  2b17							; complex statement detected
   4070  2b17		       a5 82		      LDA	missile0x
   4071  2b19		       18		      CLC
   4072  2b1a		       65 cf		      ADC	temp5
   4073  2b1c							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4074  2b1c		       c5 91		      CMP	player2x
   4075  2b1e		       90 14		      BCC	.skip139then
   4076  2b20				   .condpart140
   4077  2b20							; complex condition detected
   4078  2b20							; complex statement detected
   4079  2b20		       a5 91		      LDA	player2x
   4080  2b22		       18		      CLC
   4081  2b23		       69 0f		      ADC	#15
   4082  2b25		       c5 82		      CMP	missile0x
   4083  2b27		       90 0b		      BCC	.skip140then
   4084  2b29				   .condpart141
   4085  2b29		       a9 02		      LDA	#2
   4086  2b2b		       85 d9		      STA	EnemyHit
   4087  2b2d		       a9 05		      LDA	#$05
   4088  2b2f		       85 d4		      STA	Points
   4089  2b31		       4c 08 3d 	      jmp	.__Score
   4090  2b34
   4091  2b34				   .skip140then
   4092  2b34				   .skip139then
   4093  2b34				   .skip138then
   4094  2b34				   .skip137then
   4095  2b34				   .skipL0342
   4096  2b34				   .L0343		;  if EnemyHit  <  3 then if  ( missile0y  +  missile0height )   >=  player3y	&&  missile0y  <=   ( player3y	+  10 )   &&   ( missile0x  +  temp5 )	 >=  player3x  &&  missile0x  <=   ( player3x  +  15 )	then EnemyHit  =  3  :	Points = $15  :  goto __Score
   4097  2b34
   4098  2b34		       a5 d9		      LDA	EnemyHit
   4099  2b36		       c9 03		      CMP	#3
   4100  2b38		       b0 2f		      BCS	.skipL0343
   4101  2b3a				   .condpart142
   4102  2b3a							; complex condition detected
   4103  2b3a							; complex statement detected
   4104  2b3a		       a5 bf		      LDA	missile0y
   4105  2b3c		       18		      CLC
   4106  2b3d		       65 c2		      ADC	missile0height
   4107  2b3f							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4108  2b3f		       c5 9c		      CMP	player3y
   4109  2b41		       90 26		      BCC	.skip142then
   4110  2b43				   .condpart143
   4111  2b43							; complex condition detected
   4112  2b43							; complex statement detected
   4113  2b43		       a5 9c		      LDA	player3y
   4114  2b45		       18		      CLC
   4115  2b46		       69 0a		      ADC	#10
   4116  2b48							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4117  2b48		       c5 bf		      CMP	missile0y
   4118  2b4a		       90 1d		      BCC	.skip143then
   4119  2b4c				   .condpart144
   4120  2b4c							; complex condition detected
   4121  2b4c							; complex statement detected
   4122  2b4c		       a5 82		      LDA	missile0x
   4123  2b4e		       18		      CLC
   4124  2b4f		       65 cf		      ADC	temp5
   4125  2b51							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4126  2b51		       c5 92		      CMP	player3x
   4127  2b53		       90 14		      BCC	.skip144then
   4128  2b55				   .condpart145
   4129  2b55							; complex condition detected
   4130  2b55							; complex statement detected
   4131  2b55		       a5 92		      LDA	player3x
   4132  2b57		       18		      CLC
   4133  2b58		       69 0f		      ADC	#15
   4134  2b5a		       c5 82		      CMP	missile0x
   4135  2b5c		       90 0b		      BCC	.skip145then
   4136  2b5e				   .condpart146
   4137  2b5e		       a9 03		      LDA	#3
   4138  2b60		       85 d9		      STA	EnemyHit
   4139  2b62		       a9 15		      LDA	#$15
   4140  2b64		       85 d4		      STA	Points
   4141  2b66		       4c 08 3d 	      jmp	.__Score
   4142  2b69
   4143  2b69				   .skip145then
   4144  2b69				   .skip144then
   4145  2b69				   .skip143then
   4146  2b69				   .skip142then
   4147  2b69				   .skipL0343
   4148  2b69				   .L0344		;  if	( missile0y  +	missile0height )   >=  player4y  &&  missile0y	<=   ( player4y  +  10 )   &&	( missile0x  +	temp5 )   >=  player4x	&&  missile0x  <=   ( player4x	+  15 )  then gosub __Health bank3
   4149  2b69
   4150  2b69							; complex condition detected
   4151  2b69							; complex statement detected
   4152  2b69		       a5 bf		      LDA	missile0y
   4153  2b6b		       18		      CLC
   4154  2b6c		       65 c2		      ADC	missile0height
   4155  2b6e							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4156  2b6e		       c5 9d		      CMP	player4y
   4157  2b70		       90 33		      BCC	.skipL0344
   4158  2b72				   .condpart147
   4159  2b72							; complex condition detected
   4160  2b72							; complex statement detected
   4161  2b72		       a5 9d		      LDA	player4y
   4162  2b74		       18		      CLC
   4163  2b75		       69 0a		      ADC	#10
   4164  2b77							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4165  2b77		       c5 bf		      CMP	missile0y
   4166  2b79		       90 2a		      BCC	.skip147then
   4167  2b7b				   .condpart148
   4168  2b7b							; complex condition detected
   4169  2b7b							; complex statement detected
   4170  2b7b		       a5 82		      LDA	missile0x
   4171  2b7d		       18		      CLC
   4172  2b7e		       65 cf		      ADC	temp5
   4173  2b80							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4174  2b80		       c5 93		      CMP	player4x
   4175  2b82		       90 21		      BCC	.skip148then
   4176  2b84				   .condpart149
   4177  2b84							; complex condition detected
   4178  2b84							; complex statement detected
   4179  2b84		       a5 93		      LDA	player4x
   4180  2b86		       18		      CLC
   4181  2b87		       69 0f		      ADC	#15
   4182  2b89		       c5 82		      CMP	missile0x
   4183  2b8b		       90 18		      BCC	.skip149then
   4184  2b8d				   .condpart150
   4185  2b8d		       85 81		      sta	temp7
   4186  2b8f		       a9 3b		      lda	#>(ret_point18-1)
   4187  2b91		       48		      pha
   4188  2b92		       a9 a4		      lda	#<(ret_point18-1)
   4189  2b94		       48		      pha
   4190  2b95		       a9 53		      lda	#>(.__Health-1)
   4191  2b97		       48		      pha
   4192  2b98		       a9 ae		      lda	#<(.__Health-1)
   4193  2b9a		       48		      pha
   4194  2b9b		       a5 81		      lda	temp7
   4195  2b9d		       48		      pha
   4196  2b9e		       8a		      txa
   4197  2b9f		       48		      pha
   4198  2ba0		       a2 03		      ldx	#3
   4199  2ba2		       4c ee df 	      jmp	BS_jsr
   4200  2ba5				   ret_point18
   4201  2ba5				   .skip149then
   4202  2ba5				   .skip148then
   4203  2ba5				   .skip147then
   4204  2ba5				   .skipL0344
   4205  2ba5				   .
   4206  2ba5							; 
   4207  2ba5
   4208  2ba5				   .__Skip_PF_Collision
   4209  2ba5							; __Skip_PF_Collision
   4210  2ba5
   4211  2ba5				   .
   4212  2ba5							; 
   4213  2ba5
   4214  2ba5				   .__SkipMove
   4215  2ba5							; __SkipMove
   4216  2ba5
   4217  2ba5				   .
   4218  2ba5							; 
   4219  2ba5
   4220  2ba5				   .L0345		;  DF6FRACINC	=  255
   4221  2ba5
   4222  2ba5		       a9 ff		      LDA	#255
   4223  2ba7		       8d 3e 10 	      STA	DF6FRACINC
   4224  2baa				   .L0346		;  DF4FRACINC	=  255
   4225  2baa
   4226  2baa		       a9 ff		      LDA	#255
   4227  2bac		       8d 3c 10 	      STA	DF4FRACINC
   4228  2baf				   .
   4229  2baf							; 
   4230  2baf
   4231  2baf				   .L0347		;  DF0FRACINC	=  128
   4232  2baf
   4233  2baf		       a9 80		      LDA	#128
   4234  2bb1		       8d 38 10 	      STA	DF0FRACINC
   4235  2bb4				   .L0348		;  DF1FRACINC	=  128
   4236  2bb4
   4237  2bb4		       a9 80		      LDA	#128
   4238  2bb6		       8d 39 10 	      STA	DF1FRACINC
   4239  2bb9				   .L0349		;  DF2FRACINC	=  128
   4240  2bb9
   4241  2bb9		       a9 80		      LDA	#128
   4242  2bbb		       8d 3a 10 	      STA	DF2FRACINC
   4243  2bbe				   .L0350		;  DF3FRACINC	=  128
   4244  2bbe
   4245  2bbe		       a9 80		      LDA	#128
   4246  2bc0		       8d 3b 10 	      STA	DF3FRACINC
   4247  2bc3				   .
   4248  2bc3							; 
   4249  2bc3
   4250  2bc3				   .__JoystickControls
   4251  2bc3							; __JoystickControls
   4252  2bc3
   4253  2bc3				   .L0351		;  if joy0left  &&  player0x  >  _P_Edge_Left then player0x  =  player0x  -  1
   4254  2bc3
   4255  2bc3		       2c 80 02 	      bit	SWCHA
   4256  2bc6		       70 08		      BVS	.skipL0351
   4257  2bc8				   .condpart151
   4258  2bc8		       a9 00		      LDA	#_P_Edge_Left
   4259  2bca		       c5 80		      CMP	player0x
   4260  2bcc		       b0 02		      BCS	.skip151then
   4261  2bce				   .condpart152
   4262  2bce		       c6 80		      DEC	player0x
   4263  2bd0				   .skip151then
   4264  2bd0				   .skipL0351
   4265  2bd0				   .L0352		;  if joy0right  &&  player0x	<  _P_Edge_Right then player0x	=  player0x  +	1
   4266  2bd0
   4267  2bd0		       2c 80 02 	      bit	SWCHA
   4268  2bd3		       30 08		      BMI	.skipL0352
   4269  2bd5				   .condpart153
   4270  2bd5		       a5 80		      LDA	player0x
   4271  2bd7		       c9 96		      CMP	#_P_Edge_Right
   4272  2bd9		       b0 02		      BCS	.skip153then
   4273  2bdb				   .condpart154
   4274  2bdb		       e6 80		      INC	player0x
   4275  2bdd				   .skip153then
   4276  2bdd				   .skipL0352
   4277  2bdd				   .
   4278  2bdd							; 
   4279  2bdd
   4280  2bdd				   .
   4281  2bdd							; 
   4282  2bdd
   4283  2bdd				   .__FireSound
   4284  2bdd							; __FireSound
   4285  2bdd
   4286  2bdd				   .L0353		;  if joy0fire  &&  !Bit4_gameover{4} then if !Ch0_Sound  &&  !Bit1_missleOn{1} then Ch0_Sound  =  1  :  Ch0_Duration	=  15
   4287  2bdd
   4288  2bdd		       24 0c		      bit	INPT4
   4289  2bdf		       30 18		      BMI	.skipL0353
   4290  2be1				   .condpart155
   4291  2be1		       a5 ea		      LDA	Bit4_gameover
   4292  2be3		       29 10		      AND	#16
   4293  2be5		       d0 12		      BNE	.skip155then
   4294  2be7				   .condpart156
   4295  2be7		       a5 e7		      LDA	Ch0_Sound
   4296  2be9		       d0 0e		      BNE	.skip156then
   4297  2beb				   .condpart157
   4298  2beb		       a5 ea		      LDA	Bit1_missleOn
   4299  2bed		       29 02		      AND	#2
   4300  2bef		       d0 08		      BNE	.skip157then
   4301  2bf1				   .condpart158
   4302  2bf1		       a9 01		      LDA	#1
   4303  2bf3		       85 e7		      STA	Ch0_Sound
   4304  2bf5		       a9 0f		      LDA	#15
   4305  2bf7		       85 e8		      STA	Ch0_Duration
   4306  2bf9				   .skip157then
   4307  2bf9				   .skip156then
   4308  2bf9				   .skip155then
   4309  2bf9				   .skipL0353
   4310  2bf9				   .L0354		;  if !Ch0_Sound then goto __Skip_Ch_0
   4311  2bf9
   4312  2bf9		       a5 e7		      LDA	Ch0_Sound
   4313  2bfb		       d0 03		      BNE	.skipL0354
   4314  2bfd				   .condpart159
   4315  2bfd		       4c 4e 3c 	      jmp	.__Skip_Ch_0
   4316  2c00
   4317  2c00				   .skipL0354
   4318  2c00				   .
   4319  2c00							; 
   4320  2c00
   4321  2c00				   .L0355		;  Ch0_Duration  =  Ch0_Duration  -  1
   4322  2c00
   4323  2c00		       c6 e8		      DEC	Ch0_Duration
   4324  2c02				   .L0356		;  if !Ch0_Duration then goto __Clear_Ch_0
   4325  2c02
   4326  2c02		       a5 e8		      LDA	Ch0_Duration
   4327  2c04		       d0 03		      BNE	.skipL0356
   4328  2c06				   .condpart160
   4329  2c06		       4c 48 3c 	      jmp	.__Clear_Ch_0
   4330  2c09
   4331  2c09				   .skipL0356
   4332  2c09				   .L0357		;  if Ch0_Sound  <>  1 then goto __Skip_Ch0_Sound_001
   4333  2c09
   4334  2c09		       a5 e7		      LDA	Ch0_Sound
   4335  2c0b		       c9 01		      CMP	#1
   4336  2c0d		       f0 03		      BEQ	.skipL0357
   4337  2c0f				   .condpart161
   4338  2c0f		       4c 45 3c 	      jmp	.__Skip_Ch0_Sound_001
   4339  2c12
   4340  2c12				   .skipL0357
   4341  2c12				   .L0358		;  AUDC0  =  8  :  AUDV0  =  2  :  AUDF0  =  4
   4342  2c12
   4343  2c12		       a9 08		      LDA	#8
   4344  2c14		       85 15		      STA	AUDC0
   4345  2c16		       a9 02		      LDA	#2
   4346  2c18		       85 19		      STA	AUDV0
   4347  2c1a		       a9 04		      LDA	#4
   4348  2c1c		       85 17		      STA	AUDF0
   4349  2c1e				   .L0359		;  if Ch0_Duration  <	10 then AUDC0  =  6  :	AUDV0  =  2  :	AUDF0  =  12
   4350  2c1e
   4351  2c1e		       a5 e8		      LDA	Ch0_Duration
   4352  2c20		       c9 0a		      CMP	#10
   4353  2c22		       b0 0c		      BCS	.skipL0359
   4354  2c24				   .condpart162
   4355  2c24		       a9 06		      LDA	#6
   4356  2c26		       85 15		      STA	AUDC0
   4357  2c28		       a9 02		      LDA	#2
   4358  2c2a		       85 19		      STA	AUDV0
   4359  2c2c		       a9 0c		      LDA	#12
   4360  2c2e		       85 17		      STA	AUDF0
   4361  2c30				   .skipL0359
   4362  2c30				   .L0360		;  if Ch0_Duration  <	5 then AUDC0  =  6  :  AUDV0  =  1  :  AUDF0  =  14
   4363  2c30
   4364  2c30		       a5 e8		      LDA	Ch0_Duration
   4365  2c32		       c9 05		      CMP	#5
   4366  2c34		       b0 0c		      BCS	.skipL0360
   4367  2c36				   .condpart163
   4368  2c36		       a9 06		      LDA	#6
   4369  2c38		       85 15		      STA	AUDC0
   4370  2c3a		       a9 01		      LDA	#1
   4371  2c3c		       85 19		      STA	AUDV0
   4372  2c3e		       a9 0e		      LDA	#14
   4373  2c40		       85 17		      STA	AUDF0
   4374  2c42				   .skipL0360
   4375  2c42				   .
   4376  2c42							; 
   4377  2c42
   4378  2c42				   .L0361		;  goto __Skip_Ch_0
   4379  2c42
   4380  2c42		       4c 4e 3c 	      jmp	.__Skip_Ch_0
   4381  2c45
   4382  2c45				   .__Skip_Ch0_Sound_001
   4383  2c45							; __Skip_Ch0_Sound_001
   4384  2c45
   4385  2c45				   .L0362		;  goto __Skip_Ch_0
   4386  2c45
   4387  2c45		       4c 4e 3c 	      jmp	.__Skip_Ch_0
   4388  2c48
   4389  2c48				   .__Clear_Ch_0
   4390  2c48							; __Clear_Ch_0
   4391  2c48
   4392  2c48				   .L0363		;  Ch0_Sound  =  0  :	AUDV0  =  0
   4393  2c48
   4394  2c48		       a9 00		      LDA	#0
   4395  2c4a		       85 e7		      STA	Ch0_Sound
   4396  2c4c		       85 19		      STA	AUDV0
   4397  2c4e				   .__Skip_Ch_0
   4398  2c4e							; __Skip_Ch_0
   4399  2c4e
   4400  2c4e				   .L0364		;  if !Bit4_gameover{4} then if joy0fire  &&  !Bit1_missleOn{1} then if EnemyHit  <  1 then Bit1_missleOn{1}  =  1  :	missile0x  =  player0x	+  5 :	missile0y  =  player0y
   4401  2c4e
   4402  2c4e		       a5 ea		      LDA	Bit4_gameover
   4403  2c50		       29 10		      AND	#16
   4404  2c52		       d0 21		      BNE	.skipL0364
   4405  2c54				   .condpart164
   4406  2c54		       24 0c		      bit	INPT4
   4407  2c56		       30 1d		      BMI	.skip164then
   4408  2c58				   .condpart165
   4409  2c58		       a5 ea		      LDA	Bit1_missleOn
   4410  2c5a		       29 02		      AND	#2
   4411  2c5c		       d0 17		      BNE	.skip165then
   4412  2c5e				   .condpart166
   4413  2c5e		       a5 d9		      LDA	EnemyHit
   4414  2c60		       c9 01		      CMP	#1
   4415  2c62		       b0 11		      BCS	.skip166then
   4416  2c64				   .condpart167
   4417  2c64		       a5 ea		      LDA	Bit1_missleOn
   4418  2c66		       09 02		      ORA	#2
   4419  2c68		       85 ea		      STA	Bit1_missleOn
   4420  2c6a		       a5 80		      LDA	player0x
   4421  2c6c		       18		      CLC
   4422  2c6d		       69 05		      ADC	#5
   4423  2c6f		       85 82		      STA	missile0x
   4424  2c71		       a5 99		      LDA	player0y
   4425  2c73		       85 bf		      STA	missile0y
   4426  2c75				   .skip166then
   4427  2c75				   .skip165then
   4428  2c75				   .skip164then
   4429  2c75				   .skipL0364
   4430  2c75				   .__Explosion
   4431  2c75							; __Explosion
   4432  2c75
   4433  2c75				   .L0365		;  if Bit5_hit{5}  &&	!Ch1_Sound then Ch1_Sound  =  1  :  Ch1_Duration  =  30
   4434  2c75
   4435  2c75		       a5 ea		      LDA	Bit5_hit
   4436  2c77		       29 20		      AND	#32
   4437  2c79		       f0 0c		      BEQ	.skipL0365
   4438  2c7b				   .condpart168
   4439  2c7b		       a5 da		      LDA	Ch1_Sound
   4440  2c7d		       d0 08		      BNE	.skip168then
   4441  2c7f				   .condpart169
   4442  2c7f		       a9 01		      LDA	#1
   4443  2c81		       85 da		      STA	Ch1_Sound
   4444  2c83		       a9 1e		      LDA	#30
   4445  2c85		       85 db		      STA	Ch1_Duration
   4446  2c87				   .skip168then
   4447  2c87				   .skipL0365
   4448  2c87				   .L0366		;  if !Ch1_Sound then goto __Skip_Fire
   4449  2c87
   4450  2c87		       a5 da		      LDA	Ch1_Sound
   4451  2c89		       d0 03		      BNE	.skipL0366
   4452  2c8b				   .condpart170
   4453  2c8b		       4c e6 3c 	      jmp	.__Skip_Fire
   4454  2c8e
   4455  2c8e				   .skipL0366
   4456  2c8e				   .L0367		;  Ch1_Duration  =  Ch1_Duration  -  1
   4457  2c8e
   4458  2c8e		       c6 db		      DEC	Ch1_Duration
   4459  2c90				   .L0368		;  if !Ch1_Duration then goto __Exp_Clear_Ch_1
   4460  2c90
   4461  2c90		       a5 db		      LDA	Ch1_Duration
   4462  2c92		       d0 03		      BNE	.skipL0368
   4463  2c94				   .condpart171
   4464  2c94		       4c d6 3c 	      jmp	.__Exp_Clear_Ch_1
   4465  2c97
   4466  2c97				   .skipL0368
   4467  2c97				   .L0369		;  if Ch1_Sound  <>  1 then goto __Exp_Skip_Ch0_Sound_001
   4468  2c97
   4469  2c97		       a5 da		      LDA	Ch1_Sound
   4470  2c99		       c9 01		      CMP	#1
   4471  2c9b		       f0 03		      BEQ	.skipL0369
   4472  2c9d				   .condpart172
   4473  2c9d		       4c d3 3c 	      jmp	.__Exp_Skip_Ch0_Sound_001
   4474  2ca0
   4475  2ca0				   .skipL0369
   4476  2ca0				   .L0370		;  AUDC1  =  8  :  AUDV1  =  4  :  AUDF1  =  16
   4477  2ca0
   4478  2ca0		       a9 08		      LDA	#8
   4479  2ca2		       85 16		      STA	AUDC1
   4480  2ca4		       a9 04		      LDA	#4
   4481  2ca6		       85 1a		      STA	AUDV1
   4482  2ca8		       a9 10		      LDA	#16
   4483  2caa		       85 18		      STA	AUDF1
   4484  2cac				   .L0371		;  if Ch1_Duration  <	20 then AUDC1  =  8  :	AUDV1  =  2  :	AUDF1  =  24
   4485  2cac
   4486  2cac		       a5 db		      LDA	Ch1_Duration
   4487  2cae		       c9 14		      CMP	#20
   4488  2cb0		       b0 0c		      BCS	.skipL0371
   4489  2cb2				   .condpart173
   4490  2cb2		       a9 08		      LDA	#8
   4491  2cb4		       85 16		      STA	AUDC1
   4492  2cb6		       a9 02		      LDA	#2
   4493  2cb8		       85 1a		      STA	AUDV1
   4494  2cba		       a9 18		      LDA	#24
   4495  2cbc		       85 18		      STA	AUDF1
   4496  2cbe				   .skipL0371
   4497  2cbe				   .L0372		;  if Ch1_Duration  <	10 then AUDC1  =  8  :	AUDV1  =  2  :	AUDF1  =  16
   4498  2cbe
   4499  2cbe		       a5 db		      LDA	Ch1_Duration
   4500  2cc0		       c9 0a		      CMP	#10
   4501  2cc2		       b0 0c		      BCS	.skipL0372
   4502  2cc4				   .condpart174
   4503  2cc4		       a9 08		      LDA	#8
   4504  2cc6		       85 16		      STA	AUDC1
   4505  2cc8		       a9 02		      LDA	#2
   4506  2cca		       85 1a		      STA	AUDV1
   4507  2ccc		       a9 10		      LDA	#16
   4508  2cce		       85 18		      STA	AUDF1
   4509  2cd0				   .skipL0372
   4510  2cd0				   .L0373		;  goto __Skip_Fire
   4511  2cd0
   4512  2cd0		       4c e6 3c 	      jmp	.__Skip_Fire
   4513  2cd3
   4514  2cd3				   .__Exp_Skip_Ch0_Sound_001
   4515  2cd3							; __Exp_Skip_Ch0_Sound_001
   4516  2cd3
   4517  2cd3				   .L0374		;  goto __Skip_Fire
   4518  2cd3
   4519  2cd3		       4c e6 3c 	      jmp	.__Skip_Fire
   4520  2cd6
   4521  2cd6				   .__Exp_Clear_Ch_1
   4522  2cd6							; __Exp_Clear_Ch_1
   4523  2cd6
   4524  2cd6				   .L0375		;  Ch1_Sound  =  0  :	AUDV1  =  0 :  AUDC1  =  0 :  AUDF1  =	0 :  Bit5_hit{5}  = 0
   4525  2cd6
   4526  2cd6		       a9 00		      LDA	#0
   4527  2cd8		       85 da		      STA	Ch1_Sound
   4528  2cda		       85 1a		      STA	AUDV1
   4529  2cdc		       85 16		      STA	AUDC1
   4530  2cde		       85 18		      STA	AUDF1
   4531  2ce0		       a5 ea		      LDA	Bit5_hit
   4532  2ce2		       29 df		      AND	#223
   4533  2ce4		       85 ea		      STA	Bit5_hit
   4534  2ce6				   .
   4535  2ce6							; 
   4536  2ce6
   4537  2ce6				   .__Skip_Fire
   4538  2ce6							; __Skip_Fire
   4539  2ce6
   4540  2ce6				   .L0376		;  if Bit1_missleOn{1} then missile0y	=  missile0y  -  5
   4541  2ce6
   4542  2ce6		       a5 ea		      LDA	Bit1_missleOn
   4543  2ce8		       29 02		      AND	#2
   4544  2cea		       f0 07		      BEQ	.skipL0376
   4545  2cec				   .condpart175
   4546  2cec		       a5 bf		      LDA	missile0y
   4547  2cee		       38		      SEC
   4548  2cef		       e9 05		      SBC	#5
   4549  2cf1		       85 bf		      STA	missile0y
   4550  2cf3				   .skipL0376
   4551  2cf3				   .L0377		;  if missile0y  <  1 then Bit1_missleOn{1}  =  0 :  missile0x  = 200 :  missile0y  =	200
   4552  2cf3
   4553  2cf3		       a5 bf		      LDA	missile0y
   4554  2cf5		       c9 01		      CMP	#1
   4555  2cf7		       b0 0c		      BCS	.skipL0377
   4556  2cf9				   .condpart176
   4557  2cf9		       a5 ea		      LDA	Bit1_missleOn
   4558  2cfb		       29 fd		      AND	#253
   4559  2cfd		       85 ea		      STA	Bit1_missleOn
   4560  2cff		       a9 c8		      LDA	#200
   4561  2d01		       85 82		      STA	missile0x
   4562  2d03		       85 bf		      STA	missile0y
   4563  2d05				   .skipL0377
   4564  2d05				   .L0378		;  goto __EnemyFire
   4565  2d05
   4566  2d05		       4c 4d 3d 	      jmp	.__EnemyFire
   4567  2d08
   4568  2d08				   .
   4569  2d08							; 
   4570  2d08
   4571  2d08				   .__Score
   4572  2d08							; __Score
   4573  2d08
   4574  2d08				   .L0379		;  Bit5_hit{5}  =  1
   4575  2d08
   4576  2d08		       a5 ea		      LDA	Bit5_hit
   4577  2d0a		       09 20		      ORA	#32
   4578  2d0c		       85 ea		      STA	Bit5_hit
   4579  2d0e				   .L0380		;  frame  =  0
   4580  2d0e
   4581  2d0e		       a9 00		      LDA	#0
   4582  2d10		       85 d6		      STA	frame
   4583  2d12				   .L0381		;  score  = score  +  Points
   4584  2d12
   4585  2d12		       f8		      SED
   4586  2d13		       18		      CLC
   4587  2d14		       a5 ba		      LDA	score+2
   4588  2d16		       65 d4		      ADC	Points
   4589  2d18
   4590  2d18		       85 ba		      STA	score+2
   4591  2d1a		       a5 b9		      LDA	score+1
   4592  2d1c		       69 00		      ADC	#0
   4593  2d1e		       85 b9		      STA	score+1
   4594  2d20		       a5 b8		      LDA	score
   4595  2d22		       69 00		      ADC	#0
   4596  2d24		       85 b8		      STA	score
   4597  2d26		       d8		      CLD
   4598  2d27				   .L0382		;  missile0x  =  200  :  missile0y  =	200
   4599  2d27
   4600  2d27		       a9 c8		      LDA	#200
   4601  2d29		       85 82		      STA	missile0x
   4602  2d2b		       85 bf		      STA	missile0y
   4603  2d2d				   .L0383		;  Bit1_missleOn{1} = 0
   4604  2d2d
   4605  2d2d		       a5 ea		      LDA	Bit1_missleOn
   4606  2d2f		       29 fd		      AND	#253
   4607  2d31		       85 ea		      STA	Bit1_missleOn
   4608  2d33				   .L0384		;  for Timer  =  1 to 10
   4609  2d33
   4610  2d33		       a9 01		      LDA	#1
   4611  2d35		       85 e4		      STA	Timer
   4612  2d37				   .L0384forTimer
   4613  2d37				   .L0385		;  next
   4614  2d37
   4615  2d37		       a5 e4		      LDA	Timer
   4616  2d39		       c9 0a		      CMP	#10
   4617  2d3b
   4618  2d3b		       e6 e4		      INC	Timer
   4619  2d3d					      if	((* - .L0384forTimer) < 127) && ((* - .L0384forTimer) > -128)
   4620  2d3d		       90 f8		      bcc	.L0384forTimer
   4621  2d3f				  -	      else
   4622  2d3f				  -	      bcs	.5skipL0384forTimer
   4623  2d3f				  -	      jmp	.L0384forTimer
   4624  2d3f				  -.5skipL0384forTimer
   4625  2d3f					      endif
   4626  2d3f				   .L0386		;  Points = 0
   4627  2d3f
   4628  2d3f		       a9 00		      LDA	#0
   4629  2d41		       85 d4		      STA	Points
   4630  2d43				   .L0387		;  Ch1_Sound  =  0  :	AUDV1  =  0 :  AUDC1  =  0 :  AUDF1  =	0
   4631  2d43
   4632  2d43		       a9 00		      LDA	#0
   4633  2d45		       85 da		      STA	Ch1_Sound
   4634  2d47		       85 1a		      STA	AUDV1
   4635  2d49		       85 16		      STA	AUDC1
   4636  2d4b		       85 18		      STA	AUDF1
   4637  2d4d				   .
   4638  2d4d							; 
   4639  2d4d
   4640  2d4d				   .__EnemyFire
   4641  2d4d							; __EnemyFire
   4642  2d4d
   4643  2d4d				   .L0388		;  if !Bit3_ShootorNot{3} then goto __EnemyShoot
   4644  2d4d
   4645  2d4d		       a5 ea		      LDA	Bit3_ShootorNot
   4646  2d4f		       29 08		      AND	#8
   4647  2d51		       d0 03		      BNE	.skipL0388
   4648  2d53				   .condpart177
   4649  2d53		       4c b0 3d 	      jmp	.__EnemyShoot
   4650  2d56
   4651  2d56				   .skipL0388
   4652  2d56				   .L0389		;  if missile1y  >  170 then missile1y = 200 : 
   4653  2d56
   4654  2d56		       a9 aa		      LDA	#170
   4655  2d58		       c5 c0		      CMP	missile1y
   4656  2d5a		       b0 04		      BCS	.skipL0389
   4657  2d5c				   .condpart178
   4658  2d5c		       a9 c8		      LDA	#200
   4659  2d5e		       85 c0		      STA	missile1y
   4660  2d60				   .skipL0389
   4661  2d60				   .L0390		;  if level  <= 5 then if !Bit4_gameover{4} then if Bit3_ShootorNot{3} then missile1y	=  missile1y  +  3
   4662  2d60
   4663  2d60		       a9 05		      LDA	#5
   4664  2d62		       c5 dc		      CMP	level
   4665  2d64		       90 13		      BCC	.skipL0390
   4666  2d66				   .condpart179
   4667  2d66		       a5 ea		      LDA	Bit4_gameover
   4668  2d68		       29 10		      AND	#16
   4669  2d6a		       d0 0d		      BNE	.skip179then
   4670  2d6c				   .condpart180
   4671  2d6c		       a5 ea		      LDA	Bit3_ShootorNot
   4672  2d6e		       29 08		      AND	#8
   4673  2d70		       f0 07		      BEQ	.skip180then
   4674  2d72				   .condpart181
   4675  2d72		       a5 c0		      LDA	missile1y
   4676  2d74		       18		      CLC
   4677  2d75		       69 03		      ADC	#3
   4678  2d77		       85 c0		      STA	missile1y
   4679  2d79				   .skip180then
   4680  2d79				   .skip179then
   4681  2d79				   .skipL0390
   4682  2d79				   .
   4683  2d79							; 
   4684  2d79
   4685  2d79				   .L0391		;  if level  > 5 then if !Bit4_gameover{4} then if Bit3_ShootorNot{3} then missile1y  =  missile1y  +	5
   4686  2d79
   4687  2d79		       a9 05		      LDA	#5
   4688  2d7b		       c5 dc		      CMP	level
   4689  2d7d		       b0 13		      BCS	.skipL0391
   4690  2d7f				   .condpart182
   4691  2d7f		       a5 ea		      LDA	Bit4_gameover
   4692  2d81		       29 10		      AND	#16
   4693  2d83		       d0 0d		      BNE	.skip182then
   4694  2d85				   .condpart183
   4695  2d85		       a5 ea		      LDA	Bit3_ShootorNot
   4696  2d87		       29 08		      AND	#8
   4697  2d89		       f0 07		      BEQ	.skip183then
   4698  2d8b				   .condpart184
   4699  2d8b		       a5 c0		      LDA	missile1y
   4700  2d8d		       18		      CLC
   4701  2d8e		       69 05		      ADC	#5
   4702  2d90		       85 c0		      STA	missile1y
   4703  2d92				   .skip183then
   4704  2d92				   .skip182then
   4705  2d92				   .skipL0391
   4706  2d92				   .L0392		;  if missile1y  >  170 then missile1y = 200 :  Bit3_ShootorNot{3} = 0
   4707  2d92
   4708  2d92		       a9 aa		      LDA	#170
   4709  2d94		       c5 c0		      CMP	missile1y
   4710  2d96		       b0 0a		      BCS	.skipL0392
   4711  2d98				   .condpart185
   4712  2d98		       a9 c8		      LDA	#200
   4713  2d9a		       85 c0		      STA	missile1y
   4714  2d9c		       a5 ea		      LDA	Bit3_ShootorNot
   4715  2d9e		       29 f7		      AND	#247
   4716  2da0		       85 ea		      STA	Bit3_ShootorNot
   4717  2da2				   .skipL0392
   4718  2da2				   .L0393		;  if collision(missile1,player0) then Points = 1  : goto __EnemyScore
   4719  2da2
   4720  2da2		       24 01		      bit	CXM1P
   4721  2da4		       10 07		      BPL	.skipL0393
   4722  2da6				   .condpart186
   4723  2da6		       a9 01		      LDA	#1
   4724  2da8		       85 d4		      STA	Points
   4725  2daa		       4c 16 3e 	      jmp	.__EnemyScore
   4726  2dad
   4727  2dad				   .skipL0393
   4728  2dad				   .L0394		;  goto __Resume
   4729  2dad
   4730  2dad		       4c 49 3e 	      jmp	.__Resume
   4731  2db0
   4732  2db0				   .
   4733  2db0							; 
   4734  2db0
   4735  2db0				   .__EnemyShoot
   4736  2db0							; __EnemyShoot
   4737  2db0
   4738  2db0				   .L0395		;  if !Bit4_gameover{4} then if player3x - 15	<  player0x  &&  player3x + 15	>  player0x then missile1x  =  player3x  + 3  :  missile1y  =  player3y
   4739  2db0
   4740  2db0		       a5 ea		      LDA	Bit4_gameover
   4741  2db2		       29 10		      AND	#16
   4742  2db4		       d0 22		      BNE	.skipL0395
   4743  2db6				   .condpart187
   4744  2db6							; complex condition detected
   4745  2db6		       a5 92		      LDA	player3x
   4746  2db8		       38		      SEC
   4747  2db9		       e9 0f		      SBC	#15
   4748  2dbb							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   4749  2dbb		       c5 80		      CMP	player0x
   4750  2dbd		       b0 19		      BCS	.skip187then
   4751  2dbf				   .condpart188
   4752  2dbf							; complex condition detected
   4753  2dbf		       a5 92		      LDA	player3x
   4754  2dc1		       18		      CLC
   4755  2dc2		       69 0f		      ADC	#15
   4756  2dc4		       48		      PHA
   4757  2dc5		       ba		      TSX
   4758  2dc6		       68		      PLA
   4759  2dc7		       a5 80		      LDA	player0x
   4760  2dc9		       d5 01		      CMP	1,x
   4761  2dcb		       b0 0b		      BCS	.skip188then
   4762  2dcd				   .condpart189
   4763  2dcd		       a5 92		      LDA	player3x
   4764  2dcf		       18		      CLC
   4765  2dd0		       69 03		      ADC	#3
   4766  2dd2		       85 83		      STA	missile1x
   4767  2dd4		       a5 9c		      LDA	player3y
   4768  2dd6		       85 c0		      STA	missile1y
   4769  2dd8				   .skip188then
   4770  2dd8				   .skip187then
   4771  2dd8				   .skipL0395
   4772  2dd8				   .L0396		;  Bit3_ShootorNot{3} = 1
   4773  2dd8
   4774  2dd8		       a5 ea		      LDA	Bit3_ShootorNot
   4775  2dda		       09 08		      ORA	#8
   4776  2ddc		       85 ea		      STA	Bit3_ShootorNot
   4777  2dde				   .L0397		;  goto __Resume
   4778  2dde
   4779  2dde		       4c 49 3e 	      jmp	.__Resume
   4780  2de1
   4781  2de1				   .
   4782  2de1							; 
   4783  2de1
   4784  2de1				   .__EnemyBlock
   4785  2de1							; __EnemyBlock
   4786  2de1
   4787  2de1				   .L0398		;  frame  =  0
   4788  2de1
   4789  2de1		       a9 00		      LDA	#0
   4790  2de3		       85 d6		      STA	frame
   4791  2de5				   .L0399		;  if !joy0left  ||  !joy0right then Points  =  10
   4792  2de5
   4793  2de5		       2c 80 02 	      bit	SWCHA
   4794  2de8		       50 03		      BVC	.skipL0399
   4795  2dea				   .condpart190
   4796  2dea		       4c f2 3d 	      jmp	.condpart191
   4797  2ded				   .skipL0399
   4798  2ded		       2c 80 02 	      bit	SWCHA
   4799  2df0		       10 04		      BPL	.skip59OR
   4800  2df2				   .condpart191
   4801  2df2		       a9 0a		      LDA	#10
   4802  2df4		       85 d4		      STA	Points
   4803  2df6				   .skip59OR
   4804  2df6				   .L0400		;  if joy0left  ||  joy0right then if !joy0fire then Points  =  5 :  PlayerDamage  = 2  :  goto __Score
   4805  2df6
   4806  2df6		       2c 80 02 	      bit	SWCHA
   4807  2df9		       70 03		      BVS	.skipL0400
   4808  2dfb				   .condpart192
   4809  2dfb		       4c 03 3e 	      jmp	.condpart193
   4810  2dfe				   .skipL0400
   4811  2dfe		       2c 80 02 	      bit	SWCHA
   4812  2e01		       30 0f		      BMI	.skip60OR
   4813  2e03				   .condpart193
   4814  2e03		       24 0c		      bit	INPT4
   4815  2e05		       10 0b		      BPL	.skip193then
   4816  2e07				   .condpart194
   4817  2e07		       a9 05		      LDA	#5
   4818  2e09		       85 d4		      STA	Points
   4819  2e0b		       a9 02		      LDA	#2
   4820  2e0d		       85 dd		      STA	PlayerDamage
   4821  2e0f		       4c 08 3d 	      jmp	.__Score
   4822  2e12
   4823  2e12				   .skip193then
   4824  2e12				   .skip60OR
   4825  2e12				   .L0401		;  PlayerDamage  = 1
   4826  2e12
   4827  2e12		       a9 01		      LDA	#1
   4828  2e14		       85 dd		      STA	PlayerDamage
   4829  2e16				   .
   4830  2e16							; 
   4831  2e16
   4832  2e16				   .__EnemyScore
   4833  2e16							; __EnemyScore
   4834  2e16
   4835  2e16				   .L0402		;  if PlayerDamage  <	1 then PlayerHealth  =	PlayerHealth  -  10
   4836  2e16
   4837  2e16		       a5 dd		      LDA	PlayerDamage
   4838  2e18		       c9 01		      CMP	#1
   4839  2e1a		       b0 07		      BCS	.skipL0402
   4840  2e1c				   .condpart195
   4841  2e1c		       a5 d5		      LDA	PlayerHealth
   4842  2e1e		       38		      SEC
   4843  2e1f		       e9 0a		      SBC	#10
   4844  2e21		       85 d5		      STA	PlayerHealth
   4845  2e23				   .skipL0402
   4846  2e23				   .L0403		;  PlayerDamage  =  1
   4847  2e23
   4848  2e23		       a9 01		      LDA	#1
   4849  2e25		       85 dd		      STA	PlayerDamage
   4850  2e27				   .L0404		;  Points = 0
   4851  2e27
   4852  2e27		       a9 00		      LDA	#0
   4853  2e29		       85 d4		      STA	Points
   4854  2e2b				   .L0405		;  missile1y  = 200 :	missile1x =  200
   4855  2e2b
   4856  2e2b		       a9 c8		      LDA	#200
   4857  2e2d		       85 c0		      STA	missile1y
   4858  2e2f		       85 83		      STA	missile1x
   4859  2e31				   .L0406		;  gosub __P0Explosion bank5
   4860  2e31
   4861  2e31		       85 81		      sta	temp7
   4862  2e33		       a9 3e		      lda	#>(ret_point19-1)
   4863  2e35		       48		      pha
   4864  2e36		       a9 48		      lda	#<(ret_point19-1)
   4865  2e38		       48		      pha
   4866  2e39		       a9 90		      lda	#>(.__P0Explosion-1)
   4867  2e3b		       48		      pha
   4868  2e3c		       a9 84		      lda	#<(.__P0Explosion-1)
   4869  2e3e		       48		      pha
   4870  2e3f		       a5 81		      lda	temp7
   4871  2e41		       48		      pha
   4872  2e42		       8a		      txa
   4873  2e43		       48		      pha
   4874  2e44		       a2 05		      ldx	#5
   4875  2e46		       4c ee df 	      jmp	BS_jsr
   4876  2e49				   ret_point19
   4877  2e49				   .
   4878  2e49							; 
   4879  2e49
   4880  2e49				   .__Resume
   4881  2e49							; __Resume
   4882  2e49
   4883  2e49				   .L0407		;  drawscreen
   4884  2e49
   4885  2e49		       85 81		      sta	temp7
   4886  2e4b		       a9 3e		      lda	#>(ret_point20-1)
   4887  2e4d		       48		      pha
   4888  2e4e		       a9 60		      lda	#<(ret_point20-1)
   4889  2e50		       48		      pha
   4890  2e51		       a9 19		      lda	#>(drawscreen-1)
   4891  2e53		       48		      pha
   4892  2e54		       a9 48		      lda	#<(drawscreen-1)
   4893  2e56		       48		      pha
   4894  2e57		       a5 81		      lda	temp7
   4895  2e59		       48		      pha
   4896  2e5a		       8a		      txa
   4897  2e5b		       48		      pha
   4898  2e5c		       a2 01		      ldx	#1
   4899  2e5e		       4c ee df 	      jmp	BS_jsr
   4900  2e61				   ret_point20
   4901  2e61				   .L0408		;  PF0 = %00000000
   4902  2e61
   4903  2e61		       a9 00		      LDA	#%00000000
   4904  2e63		       85 0d		      STA	PF0
   4905  2e65				   .L0409		;  goto __Main_Loop
   4906  2e65
   4907  2e65		       4c c1 32 	      jmp	.__Main_Loop
   4908  2e68
   4909  2e68				   .
   4910  2e68							; 
   4911  2e68
   4912  2e68				   .L0410		;  bank 3
   4913  2e68
   4914  2e68					      if	ECHO2
      364 bytes of ROM space left in bank 2
   4915  2e68					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
   4916  2e68					      endif
   4917  2e68		       00 01	   ECHO2      =	1
   4918  2fd4					      ORG	$2FF4-bscode_length
   4919  2fd4					      RORG	$3FF4-bscode_length
   4920  2fd4		       a2 ff	   start_bank2 ldx	#$ff
   4921  2fd6					      ifconst	FASTFETCH	; using DPC+
   4922  2fd6		       8e 58 10 	      stx	FASTFETCH
   4923  2fd9					      endif
   4924  2fd9		       9a		      txs
   4925  2fda				  -	      if	bankswitch == 64
   4926  2fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   4927  2fda					      else
   4928  2fda		       a9 18		      lda	#>(start-1)
   4929  2fdc					      endif
   4930  2fdc		       48		      pha
   4931  2fdd		       a9 e3		      lda	#<(start-1)
   4932  2fdf		       48		      pha
   4933  2fe0		       48		      pha
   4934  2fe1		       8a		      txa
   4935  2fe2		       48		      pha
   4936  2fe3		       ba		      tsx
   4937  2fe4					      if	bankswitch != 64
   4938  2fe4		       b5 04		      lda	4,x	; get high byte of return address
   4939  2fe6		       2a		      rol
   4940  2fe7		       2a		      rol
   4941  2fe8		       2a		      rol
   4942  2fe9		       2a		      rol
   4943  2fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   4944  2fec		       aa		      tax
   4945  2fed		       e8		      inx
   4946  2fee				  -	      else
   4947  2fee				  -	      lda	4,x	; get high byte of return address
   4948  2fee				  -	      tay
   4949  2fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   4950  2fee				  -	      sta	4,x
   4951  2fee				  -	      tya
   4952  2fee				  -	      lsr
   4953  2fee				  -	      lsr
   4954  2fee				  -	      lsr
   4955  2fee				  -	      lsr
   4956  2fee				  -	      tax
   4957  2fee				  -	      inx
   4958  2fee					      endif
   4959  2fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   4960  2ff1		       68		      pla
   4961  2ff2		       aa		      tax
   4962  2ff3		       68		      pla
   4963  2ff4		       60		      rts
   4964  2ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   4965  2ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   4966  2ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   4967  2ff5					      endif
   4968  2ffc					      ORG	$2FFC
   4969  2ffc					      RORG	$3FFC
   4970  2ffc		       d4 3f		      .word.w	(start_bank2 & $ffff)
   4971  2ffe		       d4 3f		      .word.w	(start_bank2 & $ffff)
   4972  3000					      ORG	$3000
   4973  3000					      RORG	$5000
   4974  3000					      repeat	129
   4975  3000		       00		      .byte.b	0
   4974  3000					      repend
   4975  3001		       00		      .byte.b	0
   4974  3001					      repend
   4975  3002		       00		      .byte.b	0
   4974  3002					      repend
   4975  3003		       00		      .byte.b	0
   4974  3003					      repend
   4975  3004		       00		      .byte.b	0
   4974  3004					      repend
   4975  3005		       00		      .byte.b	0
   4974  3005					      repend
   4975  3006		       00		      .byte.b	0
   4974  3006					      repend
   4975  3007		       00		      .byte.b	0
   4974  3007					      repend
   4975  3008		       00		      .byte.b	0
   4974  3008					      repend
   4975  3009		       00		      .byte.b	0
   4974  3009					      repend
   4975  300a		       00		      .byte.b	0
   4974  300a					      repend
   4975  300b		       00		      .byte.b	0
   4974  300b					      repend
   4975  300c		       00		      .byte.b	0
   4974  300c					      repend
   4975  300d		       00		      .byte.b	0
   4974  300d					      repend
   4975  300e		       00		      .byte.b	0
   4974  300e					      repend
   4975  300f		       00		      .byte.b	0
   4974  300f					      repend
   4975  3010		       00		      .byte.b	0
   4974  3010					      repend
   4975  3011		       00		      .byte.b	0
   4974  3011					      repend
   4975  3012		       00		      .byte.b	0
   4974  3012					      repend
   4975  3013		       00		      .byte.b	0
   4974  3013					      repend
   4975  3014		       00		      .byte.b	0
   4974  3014					      repend
   4975  3015		       00		      .byte.b	0
   4974  3015					      repend
   4975  3016		       00		      .byte.b	0
   4974  3016					      repend
   4975  3017		       00		      .byte.b	0
   4974  3017					      repend
   4975  3018		       00		      .byte.b	0
   4974  3018					      repend
   4975  3019		       00		      .byte.b	0
   4974  3019					      repend
   4975  301a		       00		      .byte.b	0
   4974  301a					      repend
   4975  301b		       00		      .byte.b	0
   4974  301b					      repend
   4975  301c		       00		      .byte.b	0
   4974  301c					      repend
   4975  301d		       00		      .byte.b	0
   4974  301d					      repend
   4975  301e		       00		      .byte.b	0
   4974  301e					      repend
   4975  301f		       00		      .byte.b	0
   4974  301f					      repend
   4975  3020		       00		      .byte.b	0
   4974  3020					      repend
   4975  3021		       00		      .byte.b	0
   4974  3021					      repend
   4975  3022		       00		      .byte.b	0
   4974  3022					      repend
   4975  3023		       00		      .byte.b	0
   4974  3023					      repend
   4975  3024		       00		      .byte.b	0
   4974  3024					      repend
   4975  3025		       00		      .byte.b	0
   4974  3025					      repend
   4975  3026		       00		      .byte.b	0
   4974  3026					      repend
   4975  3027		       00		      .byte.b	0
   4974  3027					      repend
   4975  3028		       00		      .byte.b	0
   4974  3028					      repend
   4975  3029		       00		      .byte.b	0
   4974  3029					      repend
   4975  302a		       00		      .byte.b	0
   4974  302a					      repend
   4975  302b		       00		      .byte.b	0
   4974  302b					      repend
   4975  302c		       00		      .byte.b	0
   4974  302c					      repend
   4975  302d		       00		      .byte.b	0
   4974  302d					      repend
   4975  302e		       00		      .byte.b	0
   4974  302e					      repend
   4975  302f		       00		      .byte.b	0
   4974  302f					      repend
   4975  3030		       00		      .byte.b	0
   4974  3030					      repend
   4975  3031		       00		      .byte.b	0
   4974  3031					      repend
   4975  3032		       00		      .byte.b	0
   4974  3032					      repend
   4975  3033		       00		      .byte.b	0
   4974  3033					      repend
   4975  3034		       00		      .byte.b	0
   4974  3034					      repend
   4975  3035		       00		      .byte.b	0
   4974  3035					      repend
   4975  3036		       00		      .byte.b	0
   4974  3036					      repend
   4975  3037		       00		      .byte.b	0
   4974  3037					      repend
   4975  3038		       00		      .byte.b	0
   4974  3038					      repend
   4975  3039		       00		      .byte.b	0
   4974  3039					      repend
   4975  303a		       00		      .byte.b	0
   4974  303a					      repend
   4975  303b		       00		      .byte.b	0
   4974  303b					      repend
   4975  303c		       00		      .byte.b	0
   4974  303c					      repend
   4975  303d		       00		      .byte.b	0
   4974  303d					      repend
   4975  303e		       00		      .byte.b	0
   4974  303e					      repend
   4975  303f		       00		      .byte.b	0
   4974  303f					      repend
   4975  3040		       00		      .byte.b	0
   4974  3040					      repend
   4975  3041		       00		      .byte.b	0
   4974  3041					      repend
   4975  3042		       00		      .byte.b	0
   4974  3042					      repend
   4975  3043		       00		      .byte.b	0
   4974  3043					      repend
   4975  3044		       00		      .byte.b	0
   4974  3044					      repend
   4975  3045		       00		      .byte.b	0
   4974  3045					      repend
   4975  3046		       00		      .byte.b	0
   4974  3046					      repend
   4975  3047		       00		      .byte.b	0
   4974  3047					      repend
   4975  3048		       00		      .byte.b	0
   4974  3048					      repend
   4975  3049		       00		      .byte.b	0
   4974  3049					      repend
   4975  304a		       00		      .byte.b	0
   4974  304a					      repend
   4975  304b		       00		      .byte.b	0
   4974  304b					      repend
   4975  304c		       00		      .byte.b	0
   4974  304c					      repend
   4975  304d		       00		      .byte.b	0
   4974  304d					      repend
   4975  304e		       00		      .byte.b	0
   4974  304e					      repend
   4975  304f		       00		      .byte.b	0
   4974  304f					      repend
   4975  3050		       00		      .byte.b	0
   4974  3050					      repend
   4975  3051		       00		      .byte.b	0
   4974  3051					      repend
   4975  3052		       00		      .byte.b	0
   4974  3052					      repend
   4975  3053		       00		      .byte.b	0
   4974  3053					      repend
   4975  3054		       00		      .byte.b	0
   4974  3054					      repend
   4975  3055		       00		      .byte.b	0
   4974  3055					      repend
   4975  3056		       00		      .byte.b	0
   4974  3056					      repend
   4975  3057		       00		      .byte.b	0
   4974  3057					      repend
   4975  3058		       00		      .byte.b	0
   4974  3058					      repend
   4975  3059		       00		      .byte.b	0
   4974  3059					      repend
   4975  305a		       00		      .byte.b	0
   4974  305a					      repend
   4975  305b		       00		      .byte.b	0
   4974  305b					      repend
   4975  305c		       00		      .byte.b	0
   4974  305c					      repend
   4975  305d		       00		      .byte.b	0
   4974  305d					      repend
   4975  305e		       00		      .byte.b	0
   4974  305e					      repend
   4975  305f		       00		      .byte.b	0
   4974  305f					      repend
   4975  3060		       00		      .byte.b	0
   4974  3060					      repend
   4975  3061		       00		      .byte.b	0
   4974  3061					      repend
   4975  3062		       00		      .byte.b	0
   4974  3062					      repend
   4975  3063		       00		      .byte.b	0
   4974  3063					      repend
   4975  3064		       00		      .byte.b	0
   4974  3064					      repend
   4975  3065		       00		      .byte.b	0
   4974  3065					      repend
   4975  3066		       00		      .byte.b	0
   4974  3066					      repend
   4975  3067		       00		      .byte.b	0
   4974  3067					      repend
   4975  3068		       00		      .byte.b	0
   4974  3068					      repend
   4975  3069		       00		      .byte.b	0
   4974  3069					      repend
   4975  306a		       00		      .byte.b	0
   4974  306a					      repend
   4975  306b		       00		      .byte.b	0
   4974  306b					      repend
   4975  306c		       00		      .byte.b	0
   4974  306c					      repend
   4975  306d		       00		      .byte.b	0
   4974  306d					      repend
   4975  306e		       00		      .byte.b	0
   4974  306e					      repend
   4975  306f		       00		      .byte.b	0
   4974  306f					      repend
   4975  3070		       00		      .byte.b	0
   4974  3070					      repend
   4975  3071		       00		      .byte.b	0
   4974  3071					      repend
   4975  3072		       00		      .byte.b	0
   4974  3072					      repend
   4975  3073		       00		      .byte.b	0
   4974  3073					      repend
   4975  3074		       00		      .byte.b	0
   4974  3074					      repend
   4975  3075		       00		      .byte.b	0
   4974  3075					      repend
   4975  3076		       00		      .byte.b	0
   4974  3076					      repend
   4975  3077		       00		      .byte.b	0
   4974  3077					      repend
   4975  3078		       00		      .byte.b	0
   4974  3078					      repend
   4975  3079		       00		      .byte.b	0
   4974  3079					      repend
   4975  307a		       00		      .byte.b	0
   4974  307a					      repend
   4975  307b		       00		      .byte.b	0
   4974  307b					      repend
   4975  307c		       00		      .byte.b	0
   4974  307c					      repend
   4975  307d		       00		      .byte.b	0
   4974  307d					      repend
   4975  307e		       00		      .byte.b	0
   4974  307e					      repend
   4975  307f		       00		      .byte.b	0
   4974  307f					      repend
   4975  3080		       00		      .byte.b	0
   4976  3081					      repend
   4977  3081				   .L0411		;  temp1 = temp1
   4978  3081
   4979  3081		       a5 cb		      LDA	temp1
   4980  3083		       85 cb		      STA	temp1
   4981  3085				   .
   4982  3085							; 
   4983  3085
   4984  3085				   .__Playfield1
   4985  3085							; __Playfield1
   4986  3085
   4987  3085				   .L0412		;  bkcolors:
   4988  3085
   4989  3085		       a9 a5		      LDA	#<BKCOLS
   4990  3087		       8d 50 10 	      STA	DF0LOW
   4991  308a		       a9 0b		      LDA	#(>BKCOLS) & $0F
   4992  308c		       8d 68 10 	      STA	DF0HI
   4993  308f		       a9 a8		      LDA	#<backgroundcolorL0412
   4994  3091		       8d 59 10 	      STA	PARAMETER
   4995  3094		       a9 61		      LDA	#((>backgroundcolorL0412) & $0f) | (((>backgroundcolorL0412) / 2) & $70)
   4996  3096		       8d 59 10 	      STA	PARAMETER
   4997  3099		       a9 00		      LDA	#0
   4998  309b		       8d 59 10 	      STA	PARAMETER
   4999  309e		       a9 58		      LDA	#88
   5000  30a0		       8d 59 10 	      STA	PARAMETER
   5001  30a3		       a9 01		      LDA	#1
   5002  30a5		       8d 5a 10 	      STA	CALLFUNCTION
   5003  30a8				   .L0413		;  if Bit4_gameover{4} then goto __GameOver
   5004  30a8
   5005  30a8		       a5 ea		      LDA	Bit4_gameover
   5006  30aa		       29 10		      AND	#16
   5007  30ac		       f0 03		      BEQ	.skipL0413
   5008  30ae				   .condpart196
   5009  30ae		       4c a6 75 	      jmp	.__GameOver
   5010  30b1
   5011  30b1				   .skipL0413
   5012  30b1				   .L0414		;  if level  =  3 then goto __Playfield2
   5013  30b1
   5014  30b1		       a5 dc		      LDA	level
   5015  30b3		       c9 03		      CMP	#3
   5016  30b5		       d0 03		      BNE	.skipL0414
   5017  30b7				   .condpart197
   5018  30b7		       4c ff 50 	      jmp	.__Playfield2
   5019  30ba
   5020  30ba				   .skipL0414
   5021  30ba				   .L0415		;  temp5  =  rand  :  if level  >  4  &&  temp5  <  128 then goto __Playfield2
   5022  30ba
   5023  30ba		       ad 00 10 	      lda	rand
   5024  30bd		       4a		      lsr
   5025  30be				  -	      ifconst	rand16
   5026  30be				  -	      rol	rand16
   5027  30be					      endif
   5028  30be		       90 02		      bcc	*+4
   5029  30c0		       49 b4		      eor	#$B4
   5030  30c2		       8d 00 10 	      sta	rand
   5031  30c5				  -	      ifconst	rand16
   5032  30c5				  -	      eor	rand16
   5033  30c5					      endif
   5034  30c5		       85 cf		      STA	temp5
   5035  30c7		       a9 04		      LDA	#4
   5036  30c9		       c5 dc		      CMP	level
   5037  30cb		       b0 09		      BCS	.skipL0415
   5038  30cd				   .condpart198
   5039  30cd		       a5 cf		      LDA	temp5
   5040  30cf		       c9 80		      CMP	#128
   5041  30d1		       b0 03		      BCS	.skip198then
   5042  30d3				   .condpart199
   5043  30d3		       4c ff 50 	      jmp	.__Playfield2
   5044  30d6
   5045  30d6				   .skip198then
   5046  30d6				   .skipL0415
   5047  30d6				   .L0416		;  REdge  = 51
   5048  30d6
   5049  30d6		       a9 33		      LDA	#51
   5050  30d8		       85 d7		      STA	REdge
   5051  30da				   .L0417		;  LEdge  = 25
   5052  30da
   5053  30da		       a9 19		      LDA	#25
   5054  30dc		       85 e3		      STA	LEdge
   5055  30de				   ._PlayfieldLevel1
   5056  30de							; _PlayfieldLevel1
   5057  30de
   5058  30de				   .L0418		;  playfield:
   5059  30de
   5060  30de		       a0 58		      ldy	#88
   5061  30e0		       a9 00		      LDA	#<PF_data1
   5062  30e2		       a2 62		      LDX	#((>PF_data1) & $0f) | (((>PF_data1) / 2) & $70)
   5063  30e4		       85 81		      sta	temp7
   5064  30e6		       a9 50		      lda	#>(ret_point21-1)
   5065  30e8		       48		      pha
   5066  30e9		       a9 fb		      lda	#<(ret_point21-1)
   5067  30eb		       48		      pha
   5068  30ec		       a9 1e		      lda	#>(pfsetup-1)
   5069  30ee		       48		      pha
   5070  30ef		       a9 8c		      lda	#<(pfsetup-1)
   5071  30f1		       48		      pha
   5072  30f2		       a5 81		      lda	temp7
   5073  30f4		       48		      pha
   5074  30f5		       8a		      txa
   5075  30f6		       48		      pha
   5076  30f7		       a2 01		      ldx	#1
   5077  30f9		       4c ee df 	      jmp	BS_jsr
   5078  30fc				   ret_point21
   5079  30fc				   .
   5080  30fc							; 
   5081  30fc
   5082  30fc				   .L0419		;  goto __Colors
   5083  30fc
   5084  30fc		       4c 25 51 	      jmp	.__Colors
   5085  30ff
   5086  30ff				   .
   5087  30ff							; 
   5088  30ff
   5089  30ff				   .__Playfield2
   5090  30ff							; __Playfield2
   5091  30ff
   5092  30ff				   .L0420		;  REdge  =  125
   5093  30ff
   5094  30ff		       a9 7d		      LDA	#125
   5095  3101		       85 d7		      STA	REdge
   5096  3103				   .L0421		;  LEdge  = 88
   5097  3103
   5098  3103		       a9 58		      LDA	#88
   5099  3105		       85 e3		      STA	LEdge
   5100  3107				   .L0422		;  playfield:
   5101  3107
   5102  3107		       a0 58		      ldy	#88
   5103  3109		       a9 60		      LDA	#<PF_data2
   5104  310b		       a2 63		      LDX	#((>PF_data2) & $0f) | (((>PF_data2) / 2) & $70)
   5105  310d		       85 81		      sta	temp7
   5106  310f		       a9 51		      lda	#>(ret_point22-1)
   5107  3111		       48		      pha
   5108  3112		       a9 24		      lda	#<(ret_point22-1)
   5109  3114		       48		      pha
   5110  3115		       a9 1e		      lda	#>(pfsetup-1)
   5111  3117		       48		      pha
   5112  3118		       a9 8c		      lda	#<(pfsetup-1)
   5113  311a		       48		      pha
   5114  311b		       a5 81		      lda	temp7
   5115  311d		       48		      pha
   5116  311e		       8a		      txa
   5117  311f		       48		      pha
   5118  3120		       a2 01		      ldx	#1
   5119  3122		       4c ee df 	      jmp	BS_jsr
   5120  3125				   ret_point22
   5121  3125				   .
   5122  3125							; 
   5123  3125
   5124  3125				   .
   5125  3125							; 
   5126  3125
   5127  3125				   .__Colors
   5128  3125							; __Colors
   5129  3125
   5130  3125				   .L0423		;  pfcolors:
   5131  3125
   5132  3125		       a9 08		      LDA	#<PFCOLS
   5133  3127		       8d 50 10 	      STA	DF0LOW
   5134  312a		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5135  312c		       8d 68 10 	      STA	DF0HI
   5136  312f		       a9 c0		      LDA	#<playfieldcolorL0423
   5137  3131		       8d 59 10 	      STA	PARAMETER
   5138  3134		       a9 64		      LDA	#((>playfieldcolorL0423) & $0f) | (((>playfieldcolorL0423) / 2) & $70)
   5139  3136		       8d 59 10 	      STA	PARAMETER
   5140  3139		       a9 00		      LDA	#0
   5141  313b		       8d 59 10 	      STA	PARAMETER
   5142  313e		       a9 58		      LDA	#88
   5143  3140		       8d 59 10 	      STA	PARAMETER
   5144  3143		       a9 01		      LDA	#1
   5145  3145		       8d 5a 10 	      STA	CALLFUNCTION
   5146  3148				   .L0424		;  return
   5147  3148
   5148  3148		       ba		      tsx
   5149  3149		       b5 02		      lda	2,x	; check return address
   5150  314b		       49 51		      eor	#(>*)	; vs. current PCH
   5151  314d		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5152  314f		       f0 03		      beq	*+5	; if equal, do normal return
   5153  3151		       4c e0 df 	      JMP	BS_return
   5154  3154		       60		      RTS
   5155  3155				   .
   5156  3155							; 
   5157  3155
   5158  3155				   .__PFColors
   5159  3155							; __PFColors
   5160  3155
   5161  3155				   .
   5162  3155							; 
   5163  3155
   5164  3155				   .L0425		;  player5x  = LEdge + 5  :  player5y	= 104
   5165  3155
   5166  3155		       a5 e3		      LDA	LEdge
   5167  3157		       18		      CLC
   5168  3158		       69 05		      ADC	#5
   5169  315a		       85 94		      STA	player5x
   5170  315c		       a9 68		      LDA	#104
   5171  315e		       85 9e		      STA	player5y
   5172  3160				   .
   5173  3160							; 
   5174  3160
   5175  3160				   .L0426		;  pfcolors:
   5176  3160
   5177  3160		       a9 08		      LDA	#<PFCOLS
   5178  3162		       8d 50 10 	      STA	DF0LOW
   5179  3165		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5180  3167		       8d 68 10 	      STA	DF0HI
   5181  316a		       a9 18		      LDA	#<playfieldcolorL0426
   5182  316c		       8d 59 10 	      STA	PARAMETER
   5183  316f		       a9 65		      LDA	#((>playfieldcolorL0426) & $0f) | (((>playfieldcolorL0426) / 2) & $70)
   5184  3171		       8d 59 10 	      STA	PARAMETER
   5185  3174		       a9 00		      LDA	#0
   5186  3176		       8d 59 10 	      STA	PARAMETER
   5187  3179		       a9 58		      LDA	#88
   5188  317b		       8d 59 10 	      STA	PARAMETER
   5189  317e		       a9 01		      LDA	#1
   5190  3180		       8d 5a 10 	      STA	CALLFUNCTION
   5191  3183				   .L0427		;  return
   5192  3183
   5193  3183		       ba		      tsx
   5194  3184		       b5 02		      lda	2,x	; check return address
   5195  3186		       49 51		      eor	#(>*)	; vs. current PCH
   5196  3188		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5197  318a		       f0 03		      beq	*+5	; if equal, do normal return
   5198  318c		       4c e0 df 	      JMP	BS_return
   5199  318f		       60		      RTS
   5200  3190				   .__PFColors1
   5201  3190							; __PFColors1
   5202  3190
   5203  3190				   .L0428		;  player5x  = LEdge + 7 :  player5y  = 104
   5204  3190
   5205  3190		       a5 e3		      LDA	LEdge
   5206  3192		       18		      CLC
   5207  3193		       69 07		      ADC	#7
   5208  3195		       85 94		      STA	player5x
   5209  3197		       a9 68		      LDA	#104
   5210  3199		       85 9e		      STA	player5y
   5211  319b				   .
   5212  319b							; 
   5213  319b
   5214  319b				   .L0429		;  pfcolors:
   5215  319b
   5216  319b		       a9 08		      LDA	#<PFCOLS
   5217  319d		       8d 50 10 	      STA	DF0LOW
   5218  31a0		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5219  31a2		       8d 68 10 	      STA	DF0HI
   5220  31a5		       a9 70		      LDA	#<playfieldcolorL0429
   5221  31a7		       8d 59 10 	      STA	PARAMETER
   5222  31aa		       a9 65		      LDA	#((>playfieldcolorL0429) & $0f) | (((>playfieldcolorL0429) / 2) & $70)
   5223  31ac		       8d 59 10 	      STA	PARAMETER
   5224  31af		       a9 00		      LDA	#0
   5225  31b1		       8d 59 10 	      STA	PARAMETER
   5226  31b4		       a9 58		      LDA	#88
   5227  31b6		       8d 59 10 	      STA	PARAMETER
   5228  31b9		       a9 01		      LDA	#1
   5229  31bb		       8d 5a 10 	      STA	CALLFUNCTION
   5230  31be				   .L0430		;  return
   5231  31be
   5232  31be		       ba		      tsx
   5233  31bf		       b5 02		      lda	2,x	; check return address
   5234  31c1		       49 51		      eor	#(>*)	; vs. current PCH
   5235  31c3		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5236  31c5		       f0 03		      beq	*+5	; if equal, do normal return
   5237  31c7		       4c e0 df 	      JMP	BS_return
   5238  31ca		       60		      RTS
   5239  31cb				   .__PFColors2
   5240  31cb							; __PFColors2
   5241  31cb
   5242  31cb				   .L0431		;  player5x  = LEdge +  5 :  player5y	= 104
   5243  31cb
   5244  31cb		       a5 e3		      LDA	LEdge
   5245  31cd		       18		      CLC
   5246  31ce		       69 05		      ADC	#5
   5247  31d0		       85 94		      STA	player5x
   5248  31d2		       a9 68		      LDA	#104
   5249  31d4		       85 9e		      STA	player5y
   5250  31d6				   .
   5251  31d6							; 
   5252  31d6
   5253  31d6				   .L0432		;  pfcolors:
   5254  31d6
   5255  31d6		       a9 08		      LDA	#<PFCOLS
   5256  31d8		       8d 50 10 	      STA	DF0LOW
   5257  31db		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5258  31dd		       8d 68 10 	      STA	DF0HI
   5259  31e0		       a9 c8		      LDA	#<playfieldcolorL0432
   5260  31e2		       8d 59 10 	      STA	PARAMETER
   5261  31e5		       a9 65		      LDA	#((>playfieldcolorL0432) & $0f) | (((>playfieldcolorL0432) / 2) & $70)
   5262  31e7		       8d 59 10 	      STA	PARAMETER
   5263  31ea		       a9 00		      LDA	#0
   5264  31ec		       8d 59 10 	      STA	PARAMETER
   5265  31ef		       a9 58		      LDA	#88
   5266  31f1		       8d 59 10 	      STA	PARAMETER
   5267  31f4		       a9 01		      LDA	#1
   5268  31f6		       8d 5a 10 	      STA	CALLFUNCTION
   5269  31f9				   .L0433		;  return
   5270  31f9
   5271  31f9		       ba		      tsx
   5272  31fa		       b5 02		      lda	2,x	; check return address
   5273  31fc		       49 51		      eor	#(>*)	; vs. current PCH
   5274  31fe		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5275  3200		       f0 03		      beq	*+5	; if equal, do normal return
   5276  3202		       4c e0 df 	      JMP	BS_return
   5277  3205		       60		      RTS
   5278  3206				   .
   5279  3206							; 
   5280  3206
   5281  3206				   .__PFColors3
   5282  3206							; __PFColors3
   5283  3206
   5284  3206				   .L0434		;  NUSIZ5  =  $5
   5285  3206
   5286  3206		       a9 05		      LDA	#$5
   5287  3208		       85 b3		      STA	NUSIZ5
   5288  320a				   .L0435		;  player5x  = LEdge +  5 :  player5y	= 104
   5289  320a
   5290  320a		       a5 e3		      LDA	LEdge
   5291  320c		       18		      CLC
   5292  320d		       69 05		      ADC	#5
   5293  320f		       85 94		      STA	player5x
   5294  3211		       a9 68		      LDA	#104
   5295  3213		       85 9e		      STA	player5y
   5296  3215				   .
   5297  3215							; 
   5298  3215
   5299  3215				   .L0436		;  pfcolors:
   5300  3215
   5301  3215		       a9 08		      LDA	#<PFCOLS
   5302  3217		       8d 50 10 	      STA	DF0LOW
   5303  321a		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5304  321c		       8d 68 10 	      STA	DF0HI
   5305  321f		       a9 20		      LDA	#<playfieldcolorL0436
   5306  3221		       8d 59 10 	      STA	PARAMETER
   5307  3224		       a9 66		      LDA	#((>playfieldcolorL0436) & $0f) | (((>playfieldcolorL0436) / 2) & $70)
   5308  3226		       8d 59 10 	      STA	PARAMETER
   5309  3229		       a9 00		      LDA	#0
   5310  322b		       8d 59 10 	      STA	PARAMETER
   5311  322e		       a9 58		      LDA	#88
   5312  3230		       8d 59 10 	      STA	PARAMETER
   5313  3233		       a9 01		      LDA	#1
   5314  3235		       8d 5a 10 	      STA	CALLFUNCTION
   5315  3238				   .L0437		;  return
   5316  3238
   5317  3238		       ba		      tsx
   5318  3239		       b5 02		      lda	2,x	; check return address
   5319  323b		       49 52		      eor	#(>*)	; vs. current PCH
   5320  323d		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5321  323f		       f0 03		      beq	*+5	; if equal, do normal return
   5322  3241		       4c e0 df 	      JMP	BS_return
   5323  3244		       60		      RTS
   5324  3245				   .
   5325  3245							; 
   5326  3245
   5327  3245				   .__PFColors4
   5328  3245							; __PFColors4
   5329  3245
   5330  3245				   .L0438		;  player5x  = LEdge +  15 :  player5y  = 104
   5331  3245
   5332  3245		       a5 e3		      LDA	LEdge
   5333  3247		       18		      CLC
   5334  3248		       69 0f		      ADC	#15
   5335  324a		       85 94		      STA	player5x
   5336  324c		       a9 68		      LDA	#104
   5337  324e		       85 9e		      STA	player5y
   5338  3250				   .
   5339  3250							; 
   5340  3250
   5341  3250				   .L0439		;  pfcolors:
   5342  3250
   5343  3250		       a9 08		      LDA	#<PFCOLS
   5344  3252		       8d 50 10 	      STA	DF0LOW
   5345  3255		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5346  3257		       8d 68 10 	      STA	DF0HI
   5347  325a		       a9 78		      LDA	#<playfieldcolorL0439
   5348  325c		       8d 59 10 	      STA	PARAMETER
   5349  325f		       a9 66		      LDA	#((>playfieldcolorL0439) & $0f) | (((>playfieldcolorL0439) / 2) & $70)
   5350  3261		       8d 59 10 	      STA	PARAMETER
   5351  3264		       a9 00		      LDA	#0
   5352  3266		       8d 59 10 	      STA	PARAMETER
   5353  3269		       a9 58		      LDA	#88
   5354  326b		       8d 59 10 	      STA	PARAMETER
   5355  326e		       a9 01		      LDA	#1
   5356  3270		       8d 5a 10 	      STA	CALLFUNCTION
   5357  3273				   .L0440		;  return
   5358  3273
   5359  3273		       ba		      tsx
   5360  3274		       b5 02		      lda	2,x	; check return address
   5361  3276		       49 52		      eor	#(>*)	; vs. current PCH
   5362  3278		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5363  327a		       f0 03		      beq	*+5	; if equal, do normal return
   5364  327c		       4c e0 df 	      JMP	BS_return
   5365  327f		       60		      RTS
   5366  3280				   .
   5367  3280							; 
   5368  3280
   5369  3280				   .__PFColors5
   5370  3280							; __PFColors5
   5371  3280
   5372  3280				   .L0441		;  pfcolors:
   5373  3280
   5374  3280		       a9 08		      LDA	#<PFCOLS
   5375  3282		       8d 50 10 	      STA	DF0LOW
   5376  3285		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5377  3287		       8d 68 10 	      STA	DF0HI
   5378  328a		       a9 d0		      LDA	#<playfieldcolorL0441
   5379  328c		       8d 59 10 	      STA	PARAMETER
   5380  328f		       a9 66		      LDA	#((>playfieldcolorL0441) & $0f) | (((>playfieldcolorL0441) / 2) & $70)
   5381  3291		       8d 59 10 	      STA	PARAMETER
   5382  3294		       a9 00		      LDA	#0
   5383  3296		       8d 59 10 	      STA	PARAMETER
   5384  3299		       a9 58		      LDA	#88
   5385  329b		       8d 59 10 	      STA	PARAMETER
   5386  329e		       a9 01		      LDA	#1
   5387  32a0		       8d 5a 10 	      STA	CALLFUNCTION
   5388  32a3				   .L0442		;  return
   5389  32a3
   5390  32a3		       ba		      tsx
   5391  32a4		       b5 02		      lda	2,x	; check return address
   5392  32a6		       49 52		      eor	#(>*)	; vs. current PCH
   5393  32a8		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5394  32aa		       f0 03		      beq	*+5	; if equal, do normal return
   5395  32ac		       4c e0 df 	      JMP	BS_return
   5396  32af		       60		      RTS
   5397  32b0				   .
   5398  32b0							; 
   5399  32b0
   5400  32b0				   .__PFColors6
   5401  32b0							; __PFColors6
   5402  32b0
   5403  32b0				   .L0443		;  NUSIZ5 = $7
   5404  32b0
   5405  32b0		       a9 07		      LDA	#$7
   5406  32b2		       85 b3		      STA	NUSIZ5
   5407  32b4				   .L0444		;  player5x  = LEdge + 7 :  player5y  = 104
   5408  32b4
   5409  32b4		       a5 e3		      LDA	LEdge
   5410  32b6		       18		      CLC
   5411  32b7		       69 07		      ADC	#7
   5412  32b9		       85 94		      STA	player5x
   5413  32bb		       a9 68		      LDA	#104
   5414  32bd		       85 9e		      STA	player5y
   5415  32bf				   .L0445		;  pfcolors:
   5416  32bf
   5417  32bf		       a9 08		      LDA	#<PFCOLS
   5418  32c1		       8d 50 10 	      STA	DF0LOW
   5419  32c4		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5420  32c6		       8d 68 10 	      STA	DF0HI
   5421  32c9		       a9 28		      LDA	#<playfieldcolorL0445
   5422  32cb		       8d 59 10 	      STA	PARAMETER
   5423  32ce		       a9 67		      LDA	#((>playfieldcolorL0445) & $0f) | (((>playfieldcolorL0445) / 2) & $70)
   5424  32d0		       8d 59 10 	      STA	PARAMETER
   5425  32d3		       a9 00		      LDA	#0
   5426  32d5		       8d 59 10 	      STA	PARAMETER
   5427  32d8		       a9 58		      LDA	#88
   5428  32da		       8d 59 10 	      STA	PARAMETER
   5429  32dd		       a9 01		      LDA	#1
   5430  32df		       8d 5a 10 	      STA	CALLFUNCTION
   5431  32e2				   .L0446		;  return
   5432  32e2
   5433  32e2		       ba		      tsx
   5434  32e3		       b5 02		      lda	2,x	; check return address
   5435  32e5		       49 52		      eor	#(>*)	; vs. current PCH
   5436  32e7		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5437  32e9		       f0 03		      beq	*+5	; if equal, do normal return
   5438  32eb		       4c e0 df 	      JMP	BS_return
   5439  32ee		       60		      RTS
   5440  32ef				   .
   5441  32ef							; 
   5442  32ef
   5443  32ef				   .__PFColors7
   5444  32ef							; __PFColors7
   5445  32ef
   5446  32ef				   .L0447		;  pfcolors:
   5447  32ef
   5448  32ef		       a9 08		      LDA	#<PFCOLS
   5449  32f1		       8d 50 10 	      STA	DF0LOW
   5450  32f4		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5451  32f6		       8d 68 10 	      STA	DF0HI
   5452  32f9		       a9 80		      LDA	#<playfieldcolorL0447
   5453  32fb		       8d 59 10 	      STA	PARAMETER
   5454  32fe		       a9 67		      LDA	#((>playfieldcolorL0447) & $0f) | (((>playfieldcolorL0447) / 2) & $70)
   5455  3300		       8d 59 10 	      STA	PARAMETER
   5456  3303		       a9 00		      LDA	#0
   5457  3305		       8d 59 10 	      STA	PARAMETER
   5458  3308		       a9 58		      LDA	#88
   5459  330a		       8d 59 10 	      STA	PARAMETER
   5460  330d		       a9 01		      LDA	#1
   5461  330f		       8d 5a 10 	      STA	CALLFUNCTION
   5462  3312				   .L0448		;  return
   5463  3312
   5464  3312		       ba		      tsx
   5465  3313		       b5 02		      lda	2,x	; check return address
   5466  3315		       49 53		      eor	#(>*)	; vs. current PCH
   5467  3317		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5468  3319		       f0 03		      beq	*+5	; if equal, do normal return
   5469  331b		       4c e0 df 	      JMP	BS_return
   5470  331e		       60		      RTS
   5471  331f				   .
   5472  331f							; 
   5473  331f
   5474  331f				   .__PFColors8
   5475  331f							; __PFColors8
   5476  331f
   5477  331f				   .L0449		;  pfcolors:
   5478  331f
   5479  331f		       a9 08		      LDA	#<PFCOLS
   5480  3321		       8d 50 10 	      STA	DF0LOW
   5481  3324		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5482  3326		       8d 68 10 	      STA	DF0HI
   5483  3329		       a9 d8		      LDA	#<playfieldcolorL0449
   5484  332b		       8d 59 10 	      STA	PARAMETER
   5485  332e		       a9 67		      LDA	#((>playfieldcolorL0449) & $0f) | (((>playfieldcolorL0449) / 2) & $70)
   5486  3330		       8d 59 10 	      STA	PARAMETER
   5487  3333		       a9 00		      LDA	#0
   5488  3335		       8d 59 10 	      STA	PARAMETER
   5489  3338		       a9 58		      LDA	#88
   5490  333a		       8d 59 10 	      STA	PARAMETER
   5491  333d		       a9 01		      LDA	#1
   5492  333f		       8d 5a 10 	      STA	CALLFUNCTION
   5493  3342				   .L0450		;  return
   5494  3342
   5495  3342		       ba		      tsx
   5496  3343		       b5 02		      lda	2,x	; check return address
   5497  3345		       49 53		      eor	#(>*)	; vs. current PCH
   5498  3347		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5499  3349		       f0 03		      beq	*+5	; if equal, do normal return
   5500  334b		       4c e0 df 	      JMP	BS_return
   5501  334e		       60		      RTS
   5502  334f				   .__PFColors9
   5503  334f							; __PFColors9
   5504  334f
   5505  334f				   .L0451		;  pfcolors:
   5506  334f
   5507  334f		       a9 08		      LDA	#<PFCOLS
   5508  3351		       8d 50 10 	      STA	DF0LOW
   5509  3354		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5510  3356		       8d 68 10 	      STA	DF0HI
   5511  3359		       a9 30		      LDA	#<playfieldcolorL0451
   5512  335b		       8d 59 10 	      STA	PARAMETER
   5513  335e		       a9 68		      LDA	#((>playfieldcolorL0451) & $0f) | (((>playfieldcolorL0451) / 2) & $70)
   5514  3360		       8d 59 10 	      STA	PARAMETER
   5515  3363		       a9 00		      LDA	#0
   5516  3365		       8d 59 10 	      STA	PARAMETER
   5517  3368		       a9 58		      LDA	#88
   5518  336a		       8d 59 10 	      STA	PARAMETER
   5519  336d		       a9 01		      LDA	#1
   5520  336f		       8d 5a 10 	      STA	CALLFUNCTION
   5521  3372				   .L0452		;  return
   5522  3372
   5523  3372		       ba		      tsx
   5524  3373		       b5 02		      lda	2,x	; check return address
   5525  3375		       49 53		      eor	#(>*)	; vs. current PCH
   5526  3377		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5527  3379		       f0 03		      beq	*+5	; if equal, do normal return
   5528  337b		       4c e0 df 	      JMP	BS_return
   5529  337e		       60		      RTS
   5530  337f				   .
   5531  337f							; 
   5532  337f
   5533  337f				   .__PFColors10
   5534  337f							; __PFColors10
   5535  337f
   5536  337f				   .L0453		;  pfcolors:
   5537  337f
   5538  337f		       a9 08		      LDA	#<PFCOLS
   5539  3381		       8d 50 10 	      STA	DF0LOW
   5540  3384		       a9 0a		      LDA	#(>PFCOLS) & $0F
   5541  3386		       8d 68 10 	      STA	DF0HI
   5542  3389		       a9 88		      LDA	#<playfieldcolorL0453
   5543  338b		       8d 59 10 	      STA	PARAMETER
   5544  338e		       a9 68		      LDA	#((>playfieldcolorL0453) & $0f) | (((>playfieldcolorL0453) / 2) & $70)
   5545  3390		       8d 59 10 	      STA	PARAMETER
   5546  3393		       a9 00		      LDA	#0
   5547  3395		       8d 59 10 	      STA	PARAMETER
   5548  3398		       a9 58		      LDA	#88
   5549  339a		       8d 59 10 	      STA	PARAMETER
   5550  339d		       a9 01		      LDA	#1
   5551  339f		       8d 5a 10 	      STA	CALLFUNCTION
   5552  33a2				   .L0454		;  return
   5553  33a2
   5554  33a2		       ba		      tsx
   5555  33a3		       b5 02		      lda	2,x	; check return address
   5556  33a5		       49 53		      eor	#(>*)	; vs. current PCH
   5557  33a7		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5558  33a9		       f0 03		      beq	*+5	; if equal, do normal return
   5559  33ab		       4c e0 df 	      JMP	BS_return
   5560  33ae		       60		      RTS
   5561  33af				   .
   5562  33af							; 
   5563  33af
   5564  33af				   .__Health
   5565  33af							; __Health
   5566  33af
   5567  33af				   .
   5568  33af							; 
   5569  33af
   5570  33af				   .L0455		;  gosub __P0Explosion bank5
   5571  33af
   5572  33af		       85 81		      sta	temp7
   5573  33b1		       a9 53		      lda	#>(ret_point23-1)
   5574  33b3		       48		      pha
   5575  33b4		       a9 c6		      lda	#<(ret_point23-1)
   5576  33b6		       48		      pha
   5577  33b7		       a9 90		      lda	#>(.__P0Explosion-1)
   5578  33b9		       48		      pha
   5579  33ba		       a9 84		      lda	#<(.__P0Explosion-1)
   5580  33bc		       48		      pha
   5581  33bd		       a5 81		      lda	temp7
   5582  33bf		       48		      pha
   5583  33c0		       8a		      txa
   5584  33c1		       48		      pha
   5585  33c2		       a2 05		      ldx	#5
   5586  33c4		       4c ee df 	      jmp	BS_jsr
   5587  33c7				   ret_point23
   5588  33c7				   .L0456		;  PlayerHealth  =  PlayerHealth  +  25
   5589  33c7
   5590  33c7		       a5 d5		      LDA	PlayerHealth
   5591  33c9		       18		      CLC
   5592  33ca		       69 19		      ADC	#25
   5593  33cc		       85 d5		      STA	PlayerHealth
   5594  33ce				   .L0457		;  if PlayerHealth  >	80 then PlayerHealth  =  80
   5595  33ce
   5596  33ce		       a9 50		      LDA	#80
   5597  33d0		       c5 d5		      CMP	PlayerHealth
   5598  33d2		       b0 04		      BCS	.skipL0457
   5599  33d4				   .condpart200
   5600  33d4		       a9 50		      LDA	#80
   5601  33d6		       85 d5		      STA	PlayerHealth
   5602  33d8				   .skipL0457
   5603  33d8				   .L0458		;  Househit = Househit - 1
   5604  33d8
   5605  33d8		       c6 e1		      DEC	Househit
   5606  33da				   .L0459		;  if Househit  < 2 then Househit  = 1
   5607  33da
   5608  33da		       a5 e1		      LDA	Househit
   5609  33dc		       c9 02		      CMP	#2
   5610  33de		       b0 04		      BCS	.skipL0459
   5611  33e0				   .condpart201
   5612  33e0		       a9 01		      LDA	#1
   5613  33e2		       85 e1		      STA	Househit
   5614  33e4				   .skipL0459
   5615  33e4				   .L0460		;  player4y = 200
   5616  33e4
   5617  33e4		       a9 c8		      LDA	#200
   5618  33e6		       85 9d		      STA	player4y
   5619  33e8				   .L0461		;  Bit2_EnemyMove{2} = 0
   5620  33e8
   5621  33e8		       a5 ea		      LDA	Bit2_EnemyMove
   5622  33ea		       29 fb		      AND	#251
   5623  33ec		       85 ea		      STA	Bit2_EnemyMove
   5624  33ee				   .L0462		;  HealthDrop	=  0
   5625  33ee
   5626  33ee		       a9 00		      LDA	#0
   5627  33f0		       85 de		      STA	HealthDrop
   5628  33f2				   .L0463		;  Bit1_missleOn{1}  = 0
   5629  33f2
   5630  33f2		       a5 ea		      LDA	Bit1_missleOn
   5631  33f4		       29 fd		      AND	#253
   5632  33f6		       85 ea		      STA	Bit1_missleOn
   5633  33f8				   .L0464		;  missile0x  =  200  :  missile0y  =	200
   5634  33f8
   5635  33f8		       a9 c8		      LDA	#200
   5636  33fa		       85 82		      STA	missile0x
   5637  33fc		       85 bf		      STA	missile0y
   5638  33fe				   .L0465		;  gosub __P0Explosion bank5
   5639  33fe
   5640  33fe		       85 81		      sta	temp7
   5641  3400		       a9 54		      lda	#>(ret_point24-1)
   5642  3402		       48		      pha
   5643  3403		       a9 15		      lda	#<(ret_point24-1)
   5644  3405		       48		      pha
   5645  3406		       a9 90		      lda	#>(.__P0Explosion-1)
   5646  3408		       48		      pha
   5647  3409		       a9 84		      lda	#<(.__P0Explosion-1)
   5648  340b		       48		      pha
   5649  340c		       a5 81		      lda	temp7
   5650  340e		       48		      pha
   5651  340f		       8a		      txa
   5652  3410		       48		      pha
   5653  3411		       a2 05		      ldx	#5
   5654  3413		       4c ee df 	      jmp	BS_jsr
   5655  3416				   ret_point24
   5656  3416				   .L0466		;  return
   5657  3416
   5658  3416		       ba		      tsx
   5659  3417		       b5 02		      lda	2,x	; check return address
   5660  3419		       49 54		      eor	#(>*)	; vs. current PCH
   5661  341b		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5662  341d		       f0 03		      beq	*+5	; if equal, do normal return
   5663  341f		       4c e0 df 	      JMP	BS_return
   5664  3422		       60		      RTS
   5665  3423				   .
   5666  3423							; 
   5667  3423
   5668  3423				   .L0467		;  bank 4
   5669  3423
   5670  3423					      if	ECHO3
      2993 bytes of ROM space left in bank 3
   5671  3423					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
   5672  3423					      endif
   5673  3423		       00 01	   ECHO3      =	1
   5674  3fd4					      ORG	$3FF4-bscode_length
   5675  3fd4					      RORG	$5FF4-bscode_length
   5676  3fd4		       a2 ff	   start_bank3 ldx	#$ff
   5677  3fd6					      ifconst	FASTFETCH	; using DPC+
   5678  3fd6		       8e 58 10 	      stx	FASTFETCH
   5679  3fd9					      endif
   5680  3fd9		       9a		      txs
   5681  3fda				  -	      if	bankswitch == 64
   5682  3fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   5683  3fda					      else
   5684  3fda		       a9 18		      lda	#>(start-1)
   5685  3fdc					      endif
   5686  3fdc		       48		      pha
   5687  3fdd		       a9 e3		      lda	#<(start-1)
   5688  3fdf		       48		      pha
   5689  3fe0		       48		      pha
   5690  3fe1		       8a		      txa
   5691  3fe2		       48		      pha
   5692  3fe3		       ba		      tsx
   5693  3fe4					      if	bankswitch != 64
   5694  3fe4		       b5 04		      lda	4,x	; get high byte of return address
   5695  3fe6		       2a		      rol
   5696  3fe7		       2a		      rol
   5697  3fe8		       2a		      rol
   5698  3fe9		       2a		      rol
   5699  3fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   5700  3fec		       aa		      tax
   5701  3fed		       e8		      inx
   5702  3fee				  -	      else
   5703  3fee				  -	      lda	4,x	; get high byte of return address
   5704  3fee				  -	      tay
   5705  3fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   5706  3fee				  -	      sta	4,x
   5707  3fee				  -	      tya
   5708  3fee				  -	      lsr
   5709  3fee				  -	      lsr
   5710  3fee				  -	      lsr
   5711  3fee				  -	      lsr
   5712  3fee				  -	      tax
   5713  3fee				  -	      inx
   5714  3fee					      endif
   5715  3fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   5716  3ff1		       68		      pla
   5717  3ff2		       aa		      tax
   5718  3ff3		       68		      pla
   5719  3ff4		       60		      rts
   5720  3ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   5721  3ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   5722  3ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   5723  3ff5					      endif
   5724  3ffc					      ORG	$3FFC
   5725  3ffc					      RORG	$5FFC
   5726  3ffc		       d4 5f		      .word.w	(start_bank3 & $ffff)
   5727  3ffe		       d4 5f		      .word.w	(start_bank3 & $ffff)
   5728  4000					      ORG	$4000
   5729  4000					      RORG	$7000
   5730  4000					      repeat	129
   5731  4000		       00		      .byte.b	0
   5730  4000					      repend
   5731  4001		       00		      .byte.b	0
   5730  4001					      repend
   5731  4002		       00		      .byte.b	0
   5730  4002					      repend
   5731  4003		       00		      .byte.b	0
   5730  4003					      repend
   5731  4004		       00		      .byte.b	0
   5730  4004					      repend
   5731  4005		       00		      .byte.b	0
   5730  4005					      repend
   5731  4006		       00		      .byte.b	0
   5730  4006					      repend
   5731  4007		       00		      .byte.b	0
   5730  4007					      repend
   5731  4008		       00		      .byte.b	0
   5730  4008					      repend
   5731  4009		       00		      .byte.b	0
   5730  4009					      repend
   5731  400a		       00		      .byte.b	0
   5730  400a					      repend
   5731  400b		       00		      .byte.b	0
   5730  400b					      repend
   5731  400c		       00		      .byte.b	0
   5730  400c					      repend
   5731  400d		       00		      .byte.b	0
   5730  400d					      repend
   5731  400e		       00		      .byte.b	0
   5730  400e					      repend
   5731  400f		       00		      .byte.b	0
   5730  400f					      repend
   5731  4010		       00		      .byte.b	0
   5730  4010					      repend
   5731  4011		       00		      .byte.b	0
   5730  4011					      repend
   5731  4012		       00		      .byte.b	0
   5730  4012					      repend
   5731  4013		       00		      .byte.b	0
   5730  4013					      repend
   5731  4014		       00		      .byte.b	0
   5730  4014					      repend
   5731  4015		       00		      .byte.b	0
   5730  4015					      repend
   5731  4016		       00		      .byte.b	0
   5730  4016					      repend
   5731  4017		       00		      .byte.b	0
   5730  4017					      repend
   5731  4018		       00		      .byte.b	0
   5730  4018					      repend
   5731  4019		       00		      .byte.b	0
   5730  4019					      repend
   5731  401a		       00		      .byte.b	0
   5730  401a					      repend
   5731  401b		       00		      .byte.b	0
   5730  401b					      repend
   5731  401c		       00		      .byte.b	0
   5730  401c					      repend
   5731  401d		       00		      .byte.b	0
   5730  401d					      repend
   5731  401e		       00		      .byte.b	0
   5730  401e					      repend
   5731  401f		       00		      .byte.b	0
   5730  401f					      repend
   5731  4020		       00		      .byte.b	0
   5730  4020					      repend
   5731  4021		       00		      .byte.b	0
   5730  4021					      repend
   5731  4022		       00		      .byte.b	0
   5730  4022					      repend
   5731  4023		       00		      .byte.b	0
   5730  4023					      repend
   5731  4024		       00		      .byte.b	0
   5730  4024					      repend
   5731  4025		       00		      .byte.b	0
   5730  4025					      repend
   5731  4026		       00		      .byte.b	0
   5730  4026					      repend
   5731  4027		       00		      .byte.b	0
   5730  4027					      repend
   5731  4028		       00		      .byte.b	0
   5730  4028					      repend
   5731  4029		       00		      .byte.b	0
   5730  4029					      repend
   5731  402a		       00		      .byte.b	0
   5730  402a					      repend
   5731  402b		       00		      .byte.b	0
   5730  402b					      repend
   5731  402c		       00		      .byte.b	0
   5730  402c					      repend
   5731  402d		       00		      .byte.b	0
   5730  402d					      repend
   5731  402e		       00		      .byte.b	0
   5730  402e					      repend
   5731  402f		       00		      .byte.b	0
   5730  402f					      repend
   5731  4030		       00		      .byte.b	0
   5730  4030					      repend
   5731  4031		       00		      .byte.b	0
   5730  4031					      repend
   5731  4032		       00		      .byte.b	0
   5730  4032					      repend
   5731  4033		       00		      .byte.b	0
   5730  4033					      repend
   5731  4034		       00		      .byte.b	0
   5730  4034					      repend
   5731  4035		       00		      .byte.b	0
   5730  4035					      repend
   5731  4036		       00		      .byte.b	0
   5730  4036					      repend
   5731  4037		       00		      .byte.b	0
   5730  4037					      repend
   5731  4038		       00		      .byte.b	0
   5730  4038					      repend
   5731  4039		       00		      .byte.b	0
   5730  4039					      repend
   5731  403a		       00		      .byte.b	0
   5730  403a					      repend
   5731  403b		       00		      .byte.b	0
   5730  403b					      repend
   5731  403c		       00		      .byte.b	0
   5730  403c					      repend
   5731  403d		       00		      .byte.b	0
   5730  403d					      repend
   5731  403e		       00		      .byte.b	0
   5730  403e					      repend
   5731  403f		       00		      .byte.b	0
   5730  403f					      repend
   5731  4040		       00		      .byte.b	0
   5730  4040					      repend
   5731  4041		       00		      .byte.b	0
   5730  4041					      repend
   5731  4042		       00		      .byte.b	0
   5730  4042					      repend
   5731  4043		       00		      .byte.b	0
   5730  4043					      repend
   5731  4044		       00		      .byte.b	0
   5730  4044					      repend
   5731  4045		       00		      .byte.b	0
   5730  4045					      repend
   5731  4046		       00		      .byte.b	0
   5730  4046					      repend
   5731  4047		       00		      .byte.b	0
   5730  4047					      repend
   5731  4048		       00		      .byte.b	0
   5730  4048					      repend
   5731  4049		       00		      .byte.b	0
   5730  4049					      repend
   5731  404a		       00		      .byte.b	0
   5730  404a					      repend
   5731  404b		       00		      .byte.b	0
   5730  404b					      repend
   5731  404c		       00		      .byte.b	0
   5730  404c					      repend
   5731  404d		       00		      .byte.b	0
   5730  404d					      repend
   5731  404e		       00		      .byte.b	0
   5730  404e					      repend
   5731  404f		       00		      .byte.b	0
   5730  404f					      repend
   5731  4050		       00		      .byte.b	0
   5730  4050					      repend
   5731  4051		       00		      .byte.b	0
   5730  4051					      repend
   5731  4052		       00		      .byte.b	0
   5730  4052					      repend
   5731  4053		       00		      .byte.b	0
   5730  4053					      repend
   5731  4054		       00		      .byte.b	0
   5730  4054					      repend
   5731  4055		       00		      .byte.b	0
   5730  4055					      repend
   5731  4056		       00		      .byte.b	0
   5730  4056					      repend
   5731  4057		       00		      .byte.b	0
   5730  4057					      repend
   5731  4058		       00		      .byte.b	0
   5730  4058					      repend
   5731  4059		       00		      .byte.b	0
   5730  4059					      repend
   5731  405a		       00		      .byte.b	0
   5730  405a					      repend
   5731  405b		       00		      .byte.b	0
   5730  405b					      repend
   5731  405c		       00		      .byte.b	0
   5730  405c					      repend
   5731  405d		       00		      .byte.b	0
   5730  405d					      repend
   5731  405e		       00		      .byte.b	0
   5730  405e					      repend
   5731  405f		       00		      .byte.b	0
   5730  405f					      repend
   5731  4060		       00		      .byte.b	0
   5730  4060					      repend
   5731  4061		       00		      .byte.b	0
   5730  4061					      repend
   5731  4062		       00		      .byte.b	0
   5730  4062					      repend
   5731  4063		       00		      .byte.b	0
   5730  4063					      repend
   5731  4064		       00		      .byte.b	0
   5730  4064					      repend
   5731  4065		       00		      .byte.b	0
   5730  4065					      repend
   5731  4066		       00		      .byte.b	0
   5730  4066					      repend
   5731  4067		       00		      .byte.b	0
   5730  4067					      repend
   5731  4068		       00		      .byte.b	0
   5730  4068					      repend
   5731  4069		       00		      .byte.b	0
   5730  4069					      repend
   5731  406a		       00		      .byte.b	0
   5730  406a					      repend
   5731  406b		       00		      .byte.b	0
   5730  406b					      repend
   5731  406c		       00		      .byte.b	0
   5730  406c					      repend
   5731  406d		       00		      .byte.b	0
   5730  406d					      repend
   5731  406e		       00		      .byte.b	0
   5730  406e					      repend
   5731  406f		       00		      .byte.b	0
   5730  406f					      repend
   5731  4070		       00		      .byte.b	0
   5730  4070					      repend
   5731  4071		       00		      .byte.b	0
   5730  4071					      repend
   5731  4072		       00		      .byte.b	0
   5730  4072					      repend
   5731  4073		       00		      .byte.b	0
   5730  4073					      repend
   5731  4074		       00		      .byte.b	0
   5730  4074					      repend
   5731  4075		       00		      .byte.b	0
   5730  4075					      repend
   5731  4076		       00		      .byte.b	0
   5730  4076					      repend
   5731  4077		       00		      .byte.b	0
   5730  4077					      repend
   5731  4078		       00		      .byte.b	0
   5730  4078					      repend
   5731  4079		       00		      .byte.b	0
   5730  4079					      repend
   5731  407a		       00		      .byte.b	0
   5730  407a					      repend
   5731  407b		       00		      .byte.b	0
   5730  407b					      repend
   5731  407c		       00		      .byte.b	0
   5730  407c					      repend
   5731  407d		       00		      .byte.b	0
   5730  407d					      repend
   5731  407e		       00		      .byte.b	0
   5730  407e					      repend
   5731  407f		       00		      .byte.b	0
   5730  407f					      repend
   5731  4080		       00		      .byte.b	0
   5732  4081					      repend
   5733  4081				   .L0468		;  temp1 = temp1
   5734  4081
   5735  4081		       a5 cb		      LDA	temp1
   5736  4083		       85 cb		      STA	temp1
   5737  4085				   .
   5738  4085							; 
   5739  4085
   5740  4085				   .__FrameAnimation
   5741  4085							; __FrameAnimation
   5742  4085
   5743  4085				   .__p0Frames
   5744  4085							; __p0Frames
   5745  4085
   5746  4085				   .L0469		;  if joy0fire then goto __p0Fire
   5747  4085
   5748  4085		       24 0c		      bit	INPT4
   5749  4087		       30 03		      BMI	.skipL0469
   5750  4089				   .condpart202
   5751  4089		       4c b3 70 	      jmp	.__p0Fire
   5752  408c
   5753  408c				   .skipL0469
   5754  408c				   .L0470		;  if joy0left then goto __P0BlockLeft
   5755  408c
   5756  408c		       2c 80 02 	      bit	SWCHA
   5757  408f		       70 03		      BVS	.skipL0470
   5758  4091				   .condpart203
   5759  4091		       4c ca 70 	      jmp	.__P0BlockLeft
   5760  4094
   5761  4094				   .skipL0470
   5762  4094				   .L0471		;  if joy0right then goto __P0BlockRigth
   5763  4094
   5764  4094		       2c 80 02 	      bit	SWCHA
   5765  4097		       30 03		      BMI	.skipL0471
   5766  4099				   .condpart204
   5767  4099		       4c e1 70 	      jmp	.__P0BlockRigth
   5768  409c
   5769  409c				   .skipL0471
   5770  409c				   .L0472		;  player0:
   5771  409c
   5772  409c		       a2 e0		      LDX	#<playerL0472_0
   5773  409e		       86 bd		      STX	player0pointerlo
   5774  40a0		       a9 68		      LDA	#((>playerL0472_0) & $0f) | (((>playerL0472_0) / 2) & $70)
   5775  40a2		       85 be		      STA	player0pointerhi
   5776  40a4		       a9 0f		      LDA	#15
   5777  40a6		       85 a5		      STA	player0height
   5778  40a8				   .L0473		;  player0color:
   5779  40a8
   5780  40a8		       a2 ef		      LDX	#<playercolorL0473_0
   5781  40aa		       86 a3		      STX	player0color
   5782  40ac		       a9 68		      LDA	#((>playercolorL0473_0) & $0f) | (((>playercolorL0473_0) / 2) & $70)
   5783  40ae		       85 a4		      STA	player0color+1
   5784  40b0				   .L0474		;  goto __p0Damagecolors
   5785  40b0
   5786  40b0		       4c f5 70 	      jmp	.__p0Damagecolors
   5787  40b3
   5788  40b3				   .
   5789  40b3							; 
   5790  40b3
   5791  40b3				   .__p0Fire
   5792  40b3							; __p0Fire
   5793  40b3
   5794  40b3				   .L0475		;  player0:
   5795  40b3
   5796  40b3		       a2 fe		      LDX	#<playerL0475_0
   5797  40b5		       86 bd		      STX	player0pointerlo
   5798  40b7		       a9 68		      LDA	#((>playerL0475_0) & $0f) | (((>playerL0475_0) / 2) & $70)
   5799  40b9		       85 be		      STA	player0pointerhi
   5800  40bb		       a9 0f		      LDA	#15
   5801  40bd		       85 a5		      STA	player0height
   5802  40bf				   .L0476		;  player0color:
   5803  40bf
   5804  40bf		       a2 0d		      LDX	#<playercolorL0476_0
   5805  40c1		       86 a3		      STX	player0color
   5806  40c3		       a9 69		      LDA	#((>playercolorL0476_0) & $0f) | (((>playercolorL0476_0) / 2) & $70)
   5807  40c5		       85 a4		      STA	player0color+1
   5808  40c7				   .L0477		;  goto __p0Damagecolors
   5809  40c7
   5810  40c7		       4c f5 70 	      jmp	.__p0Damagecolors
   5811  40ca
   5812  40ca				   .__P0BlockLeft
   5813  40ca							; __P0BlockLeft
   5814  40ca
   5815  40ca				   .L0478		;  player0:
   5816  40ca
   5817  40ca		       a2 1c		      LDX	#<playerL0478_0
   5818  40cc		       86 bd		      STX	player0pointerlo
   5819  40ce		       a9 69		      LDA	#((>playerL0478_0) & $0f) | (((>playerL0478_0) / 2) & $70)
   5820  40d0		       85 be		      STA	player0pointerhi
   5821  40d2		       a9 0f		      LDA	#15
   5822  40d4		       85 a5		      STA	player0height
   5823  40d6				   .L0479		;  player0color:
   5824  40d6
   5825  40d6		       a2 2b		      LDX	#<playercolorL0479_0
   5826  40d8		       86 a3		      STX	player0color
   5827  40da		       a9 69		      LDA	#((>playercolorL0479_0) & $0f) | (((>playercolorL0479_0) / 2) & $70)
   5828  40dc		       85 a4		      STA	player0color+1
   5829  40de				   .L0480		;  goto __p0Damagecolors
   5830  40de
   5831  40de		       4c f5 70 	      jmp	.__p0Damagecolors
   5832  40e1
   5833  40e1				   .
   5834  40e1							; 
   5835  40e1
   5836  40e1				   .__P0BlockRigth
   5837  40e1							; __P0BlockRigth
   5838  40e1
   5839  40e1				   .L0481		;  player0:
   5840  40e1
   5841  40e1		       a2 3a		      LDX	#<playerL0481_0
   5842  40e3		       86 bd		      STX	player0pointerlo
   5843  40e5		       a9 69		      LDA	#((>playerL0481_0) & $0f) | (((>playerL0481_0) / 2) & $70)
   5844  40e7		       85 be		      STA	player0pointerhi
   5845  40e9		       a9 0f		      LDA	#15
   5846  40eb		       85 a5		      STA	player0height
   5847  40ed				   .L0482		;  player0color:
   5848  40ed
   5849  40ed		       a2 49		      LDX	#<playercolorL0482_0
   5850  40ef		       86 a3		      STX	player0color
   5851  40f1		       a9 69		      LDA	#((>playercolorL0482_0) & $0f) | (((>playercolorL0482_0) / 2) & $70)
   5852  40f3		       85 a4		      STA	player0color+1
   5853  40f5				   .__p0Damagecolors
   5854  40f5							; __p0Damagecolors
   5855  40f5
   5856  40f5				   .
   5857  40f5							; 
   5858  40f5
   5859  40f5				   .L0483		;  if PlayerDamage  = 1  &&  EnemyHit	<  1 then player0color:
   5860  40f5
   5861  40f5		       a5 dd		      LDA	PlayerDamage
   5862  40f7		       c9 01		      CMP	#1
   5863  40f9		       d0 0e		      BNE	.skipL0483
   5864  40fb				   .condpart205
   5865  40fb		       a5 d9		      LDA	EnemyHit
   5866  40fd		       c9 01		      CMP	#1
   5867  40ff		       b0 08		      BCS	.skip205then
   5868  4101				   .condpart206
   5869  4101		       a2 58		      LDX	#<playercolor206then_0
   5870  4103		       86 a3		      STX	player0color
   5871  4105		       a9 69		      LDA	#((>playercolor206then_0) & $0f) | (((>playercolor206then_0) / 2) & $70)
   5872  4107		       85 a4		      STA	player0color+1
   5873  4109				   .skip205then
   5874  4109				   .skipL0483
   5875  4109				   .
   5876  4109							; 
   5877  4109
   5878  4109				   .L0484		;  if PlayerDamage  = 2 then player0color:
   5879  4109
   5880  4109		       a5 dd		      LDA	PlayerDamage
   5881  410b		       c9 02		      CMP	#2
   5882  410d		       d0 08		      BNE	.skipL0484
   5883  410f				   .condpart207
   5884  410f		       a2 68		      LDX	#<playercolor207then_0
   5885  4111		       86 a3		      STX	player0color
   5886  4113		       a9 69		      LDA	#((>playercolor207then_0) & $0f) | (((>playercolor207then_0) / 2) & $70)
   5887  4115		       85 a4		      STA	player0color+1
   5888  4117				   .skipL0484
   5889  4117				   .
   5890  4117							; 
   5891  4117
   5892  4117				   .L0485		;  if frame  =  10  &&  EnemyHit  <  1 then player2:
   5893  4117
   5894  4117		       a5 d6		      LDA	frame
   5895  4119		       c9 0a		      CMP	#10
   5896  411b		       d0 1e		      BNE	.skipL0485
   5897  411d				   .condpart208
   5898  411d		       a5 d9		      LDA	EnemyHit
   5899  411f		       c9 01		      CMP	#1
   5900  4121		       b0 18		      BCS	.skip208then
   5901  4123				   .condpart209
   5902  4123		       a9 e4		      lda	#<(playerpointers+2)
   5903  4125		       8d 50 10 	      sta	DF0LOW
   5904  4128		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   5905  412a		       8d 68 10 	      sta	DF0HI
   5906  412d		       a2 7a		      LDX	#<player209then_2
   5907  412f		       8e 78 10 	      STX	DF0WRITE
   5908  4132		       a9 69		      LDA	#((>player209then_2) & $0f) | (((>player209then_2) / 2) & $70)
   5909  4134		       8d 78 10 	      STA	DF0WRITE
   5910  4137		       a9 08		      LDA	#8
   5911  4139		       85 a7		      STA	player2height
   5912  413b				   .skip208then
   5913  413b				   .skipL0485
   5914  413b				   .L0486		;  if frame  =  10  &&  EnemyHit  =  2 then player2:
   5915  413b
   5916  413b		       a5 d6		      LDA	frame
   5917  413d		       c9 0a		      CMP	#10
   5918  413f		       d0 1e		      BNE	.skipL0486
   5919  4141				   .condpart210
   5920  4141		       a5 d9		      LDA	EnemyHit
   5921  4143		       c9 02		      CMP	#2
   5922  4145		       d0 18		      BNE	.skip210then
   5923  4147				   .condpart211
   5924  4147		       a9 e4		      lda	#<(playerpointers+2)
   5925  4149		       8d 50 10 	      sta	DF0LOW
   5926  414c		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   5927  414e		       8d 68 10 	      sta	DF0HI
   5928  4151		       a2 82		      LDX	#<player211then_2
   5929  4153		       8e 78 10 	      STX	DF0WRITE
   5930  4156		       a9 69		      LDA	#((>player211then_2) & $0f) | (((>player211then_2) / 2) & $70)
   5931  4158		       8d 78 10 	      STA	DF0WRITE
   5932  415b		       a9 08		      LDA	#8
   5933  415d		       85 a7		      STA	player2height
   5934  415f				   .skip210then
   5935  415f				   .skipL0486
   5936  415f				   .L0487		;  if frame  =  10  &&  EnemyHit  <  1 then player3:
   5937  415f
   5938  415f		       a5 d6		      LDA	frame
   5939  4161		       c9 0a		      CMP	#10
   5940  4163		       d0 1e		      BNE	.skipL0487
   5941  4165				   .condpart212
   5942  4165		       a5 d9		      LDA	EnemyHit
   5943  4167		       c9 01		      CMP	#1
   5944  4169		       b0 18		      BCS	.skip212then
   5945  416b				   .condpart213
   5946  416b		       a9 e6		      lda	#<(playerpointers+4)
   5947  416d		       8d 50 10 	      sta	DF0LOW
   5948  4170		       a9 01		      lda	#(>(playerpointers+4)) & $0F
   5949  4172		       8d 68 10 	      sta	DF0HI
   5950  4175		       a2 8a		      LDX	#<player213then_3
   5951  4177		       8e 78 10 	      STX	DF0WRITE
   5952  417a		       a9 69		      LDA	#((>player213then_3) & $0f) | (((>player213then_3) / 2) & $70)
   5953  417c		       8d 78 10 	      STA	DF0WRITE
   5954  417f		       a9 08		      LDA	#8
   5955  4181		       85 a8		      STA	player3height
   5956  4183				   .skip212then
   5957  4183				   .skipL0487
   5958  4183				   .L0488		;  if frame  =  10  &&  EnemyHit  = 3 then player3:
   5959  4183
   5960  4183		       a5 d6		      LDA	frame
   5961  4185		       c9 0a		      CMP	#10
   5962  4187		       d0 1e		      BNE	.skipL0488
   5963  4189				   .condpart214
   5964  4189		       a5 d9		      LDA	EnemyHit
   5965  418b		       c9 03		      CMP	#3
   5966  418d		       d0 18		      BNE	.skip214then
   5967  418f				   .condpart215
   5968  418f		       a9 e6		      lda	#<(playerpointers+4)
   5969  4191		       8d 50 10 	      sta	DF0LOW
   5970  4194		       a9 01		      lda	#(>(playerpointers+4)) & $0F
   5971  4196		       8d 68 10 	      sta	DF0HI
   5972  4199		       a2 92		      LDX	#<player215then_3
   5973  419b		       8e 78 10 	      STX	DF0WRITE
   5974  419e		       a9 69		      LDA	#((>player215then_3) & $0f) | (((>player215then_3) / 2) & $70)
   5975  41a0		       8d 78 10 	      STA	DF0WRITE
   5976  41a3		       a9 08		      LDA	#8
   5977  41a5		       85 a8		      STA	player3height
   5978  41a7				   .skip214then
   5979  41a7				   .skipL0488
   5980  41a7				   .L0489		;  if frame  =  10  &&  EnemyHit  <  1 then player1:
   5981  41a7
   5982  41a7		       a5 d6		      LDA	frame
   5983  41a9		       c9 0a		      CMP	#10
   5984  41ab		       d0 1e		      BNE	.skipL0489
   5985  41ad				   .condpart216
   5986  41ad		       a5 d9		      LDA	EnemyHit
   5987  41af		       c9 01		      CMP	#1
   5988  41b1		       b0 18		      BCS	.skip216then
   5989  41b3				   .condpart217
   5990  41b3		       a9 e2		      lda	#<(playerpointers+0)
   5991  41b5		       8d 50 10 	      sta	DF0LOW
   5992  41b8		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   5993  41ba		       8d 68 10 	      sta	DF0HI
   5994  41bd		       a2 9a		      LDX	#<player217then_1
   5995  41bf		       8e 78 10 	      STX	DF0WRITE
   5996  41c2		       a9 69		      LDA	#((>player217then_1) & $0f) | (((>player217then_1) / 2) & $70)
   5997  41c4		       8d 78 10 	      STA	DF0WRITE
   5998  41c7		       a9 08		      LDA	#8
   5999  41c9		       85 a6		      STA	player1height
   6000  41cb				   .skip216then
   6001  41cb				   .skipL0489
   6002  41cb				   .L0490		;  if frame  =  10  &&  EnemyHit  =  1 then player1:
   6003  41cb
   6004  41cb		       a5 d6		      LDA	frame
   6005  41cd		       c9 0a		      CMP	#10
   6006  41cf		       d0 1e		      BNE	.skipL0490
   6007  41d1				   .condpart218
   6008  41d1		       a5 d9		      LDA	EnemyHit
   6009  41d3		       c9 01		      CMP	#1
   6010  41d5		       d0 18		      BNE	.skip218then
   6011  41d7				   .condpart219
   6012  41d7		       a9 e2		      lda	#<(playerpointers+0)
   6013  41d9		       8d 50 10 	      sta	DF0LOW
   6014  41dc		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   6015  41de		       8d 68 10 	      sta	DF0HI
   6016  41e1		       a2 a2		      LDX	#<player219then_1
   6017  41e3		       8e 78 10 	      STX	DF0WRITE
   6018  41e6		       a9 69		      LDA	#((>player219then_1) & $0f) | (((>player219then_1) / 2) & $70)
   6019  41e8		       8d 78 10 	      STA	DF0WRITE
   6020  41eb		       a9 08		      LDA	#8
   6021  41ed		       85 a6		      STA	player1height
   6022  41ef				   .skip218then
   6023  41ef				   .skipL0490
   6024  41ef				   .L0491		;  if frame  =  10 then player2color:
   6025  41ef
   6026  41ef		       a5 d6		      LDA	frame
   6027  41f1		       c9 0a		      CMP	#10
   6028  41f3		       d0 14		      BNE	.skipL0491
   6029  41f5				   .condpart220
   6030  41f5		       a9 f6		      lda	#<(playerpointers+20)
   6031  41f7		       8d 50 10 	      sta	DF0LOW
   6032  41fa		       a9 01		      lda	#(>(playerpointers+20)) & $0F
   6033  41fc		       8d 68 10 	      sta	DF0HI
   6034  41ff		       a2 aa		      LDX	#<playercolor220then_2
   6035  4201		       8e 78 10 	      STX	DF0WRITE
   6036  4204		       a9 69		      LDA	#((>playercolor220then_2) & $0f) | (((>playercolor220then_2) / 2) & $70)
   6037  4206		       8d 78 10 	      STA	DF0WRITE
   6038  4209				   .skipL0491
   6039  4209				   .L0492		;  if frame  =  10 then player3color:
   6040  4209
   6041  4209		       a5 d6		      LDA	frame
   6042  420b		       c9 0a		      CMP	#10
   6043  420d		       d0 14		      BNE	.skipL0492
   6044  420f				   .condpart221
   6045  420f		       a9 f8		      lda	#<(playerpointers+22)
   6046  4211		       8d 50 10 	      sta	DF0LOW
   6047  4214		       a9 01		      lda	#(>(playerpointers+22)) & $0F
   6048  4216		       8d 68 10 	      sta	DF0HI
   6049  4219		       a2 b2		      LDX	#<playercolor221then_3
   6050  421b		       8e 78 10 	      STX	DF0WRITE
   6051  421e		       a9 69		      LDA	#((>playercolor221then_3) & $0f) | (((>playercolor221then_3) / 2) & $70)
   6052  4220		       8d 78 10 	      STA	DF0WRITE
   6053  4223				   .skipL0492
   6054  4223				   .L0493		;  if frame  =  10 then player1color:
   6055  4223
   6056  4223		       a5 d6		      LDA	frame
   6057  4225		       c9 0a		      CMP	#10
   6058  4227		       d0 14		      BNE	.skipL0493
   6059  4229				   .condpart222
   6060  4229		       a9 f4		      lda	#<(playerpointers+18)
   6061  422b		       8d 50 10 	      sta	DF0LOW
   6062  422e		       a9 01		      lda	#(>(playerpointers+18)) & $0F
   6063  4230		       8d 68 10 	      sta	DF0HI
   6064  4233		       a2 ba		      LDX	#<playercolor222then_1
   6065  4235		       8e 78 10 	      STX	DF0WRITE
   6066  4238		       a9 69		      LDA	#((>playercolor222then_1) & $0f) | (((>playercolor222then_1) / 2) & $70)
   6067  423a		       8d 78 10 	      STA	DF0WRITE
   6068  423d				   .skipL0493
   6069  423d				   .L0494		;  if frame  =  20  &&  EnemyHit  <  1 then player2:
   6070  423d
   6071  423d		       a5 d6		      LDA	frame
   6072  423f		       c9 14		      CMP	#20
   6073  4241		       d0 1e		      BNE	.skipL0494
   6074  4243				   .condpart223
   6075  4243		       a5 d9		      LDA	EnemyHit
   6076  4245		       c9 01		      CMP	#1
   6077  4247		       b0 18		      BCS	.skip223then
   6078  4249				   .condpart224
   6079  4249		       a9 e4		      lda	#<(playerpointers+2)
   6080  424b		       8d 50 10 	      sta	DF0LOW
   6081  424e		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   6082  4250		       8d 68 10 	      sta	DF0HI
   6083  4253		       a2 c2		      LDX	#<player224then_2
   6084  4255		       8e 78 10 	      STX	DF0WRITE
   6085  4258		       a9 69		      LDA	#((>player224then_2) & $0f) | (((>player224then_2) / 2) & $70)
   6086  425a		       8d 78 10 	      STA	DF0WRITE
   6087  425d		       a9 08		      LDA	#8
   6088  425f		       85 a7		      STA	player2height
   6089  4261				   .skip223then
   6090  4261				   .skipL0494
   6091  4261				   .L0495		;  if frame  =  20  &&  EnemyHit  = 2 then player2:
   6092  4261
   6093  4261		       a5 d6		      LDA	frame
   6094  4263		       c9 14		      CMP	#20
   6095  4265		       d0 1e		      BNE	.skipL0495
   6096  4267				   .condpart225
   6097  4267		       a5 d9		      LDA	EnemyHit
   6098  4269		       c9 02		      CMP	#2
   6099  426b		       d0 18		      BNE	.skip225then
   6100  426d				   .condpart226
   6101  426d		       a9 e4		      lda	#<(playerpointers+2)
   6102  426f		       8d 50 10 	      sta	DF0LOW
   6103  4272		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   6104  4274		       8d 68 10 	      sta	DF0HI
   6105  4277		       a2 ca		      LDX	#<player226then_2
   6106  4279		       8e 78 10 	      STX	DF0WRITE
   6107  427c		       a9 69		      LDA	#((>player226then_2) & $0f) | (((>player226then_2) / 2) & $70)
   6108  427e		       8d 78 10 	      STA	DF0WRITE
   6109  4281		       a9 08		      LDA	#8
   6110  4283		       85 a7		      STA	player2height
   6111  4285				   .skip225then
   6112  4285				   .skipL0495
   6113  4285				   .L0496		;  if frame  =  20  &&  EnemyHit  <  1 then player3:
   6114  4285
   6115  4285		       a5 d6		      LDA	frame
   6116  4287		       c9 14		      CMP	#20
   6117  4289		       d0 1e		      BNE	.skipL0496
   6118  428b				   .condpart227
   6119  428b		       a5 d9		      LDA	EnemyHit
   6120  428d		       c9 01		      CMP	#1
   6121  428f		       b0 18		      BCS	.skip227then
   6122  4291				   .condpart228
   6123  4291		       a9 e6		      lda	#<(playerpointers+4)
   6124  4293		       8d 50 10 	      sta	DF0LOW
   6125  4296		       a9 01		      lda	#(>(playerpointers+4)) & $0F
   6126  4298		       8d 68 10 	      sta	DF0HI
   6127  429b		       a2 d2		      LDX	#<player228then_3
   6128  429d		       8e 78 10 	      STX	DF0WRITE
   6129  42a0		       a9 69		      LDA	#((>player228then_3) & $0f) | (((>player228then_3) / 2) & $70)
   6130  42a2		       8d 78 10 	      STA	DF0WRITE
   6131  42a5		       a9 08		      LDA	#8
   6132  42a7		       85 a8		      STA	player3height
   6133  42a9				   .skip227then
   6134  42a9				   .skipL0496
   6135  42a9				   .L0497		;  if frame  =  20  &&  EnemyHit  = 3 then player3:
   6136  42a9
   6137  42a9		       a5 d6		      LDA	frame
   6138  42ab		       c9 14		      CMP	#20
   6139  42ad		       d0 1e		      BNE	.skipL0497
   6140  42af				   .condpart229
   6141  42af		       a5 d9		      LDA	EnemyHit
   6142  42b1		       c9 03		      CMP	#3
   6143  42b3		       d0 18		      BNE	.skip229then
   6144  42b5				   .condpart230
   6145  42b5		       a9 e6		      lda	#<(playerpointers+4)
   6146  42b7		       8d 50 10 	      sta	DF0LOW
   6147  42ba		       a9 01		      lda	#(>(playerpointers+4)) & $0F
   6148  42bc		       8d 68 10 	      sta	DF0HI
   6149  42bf		       a2 da		      LDX	#<player230then_3
   6150  42c1		       8e 78 10 	      STX	DF0WRITE
   6151  42c4		       a9 69		      LDA	#((>player230then_3) & $0f) | (((>player230then_3) / 2) & $70)
   6152  42c6		       8d 78 10 	      STA	DF0WRITE
   6153  42c9		       a9 08		      LDA	#8
   6154  42cb		       85 a8		      STA	player3height
   6155  42cd				   .skip229then
   6156  42cd				   .skipL0497
   6157  42cd				   .L0498		;  if frame  =  20  &&  EnemyHit  <  1 then player1:
   6158  42cd
   6159  42cd		       a5 d6		      LDA	frame
   6160  42cf		       c9 14		      CMP	#20
   6161  42d1		       d0 1e		      BNE	.skipL0498
   6162  42d3				   .condpart231
   6163  42d3		       a5 d9		      LDA	EnemyHit
   6164  42d5		       c9 01		      CMP	#1
   6165  42d7		       b0 18		      BCS	.skip231then
   6166  42d9				   .condpart232
   6167  42d9		       a9 e2		      lda	#<(playerpointers+0)
   6168  42db		       8d 50 10 	      sta	DF0LOW
   6169  42de		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   6170  42e0		       8d 68 10 	      sta	DF0HI
   6171  42e3		       a2 e2		      LDX	#<player232then_1
   6172  42e5		       8e 78 10 	      STX	DF0WRITE
   6173  42e8		       a9 69		      LDA	#((>player232then_1) & $0f) | (((>player232then_1) / 2) & $70)
   6174  42ea		       8d 78 10 	      STA	DF0WRITE
   6175  42ed		       a9 08		      LDA	#8
   6176  42ef		       85 a6		      STA	player1height
   6177  42f1				   .skip231then
   6178  42f1				   .skipL0498
   6179  42f1				   .L0499		;  if frame  =  20  &&  EnemyHit  =  1 then player1:
   6180  42f1
   6181  42f1		       a5 d6		      LDA	frame
   6182  42f3		       c9 14		      CMP	#20
   6183  42f5		       d0 1e		      BNE	.skipL0499
   6184  42f7				   .condpart233
   6185  42f7		       a5 d9		      LDA	EnemyHit
   6186  42f9		       c9 01		      CMP	#1
   6187  42fb		       d0 18		      BNE	.skip233then
   6188  42fd				   .condpart234
   6189  42fd		       a9 e2		      lda	#<(playerpointers+0)
   6190  42ff		       8d 50 10 	      sta	DF0LOW
   6191  4302		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   6192  4304		       8d 68 10 	      sta	DF0HI
   6193  4307		       a2 ea		      LDX	#<player234then_1
   6194  4309		       8e 78 10 	      STX	DF0WRITE
   6195  430c		       a9 69		      LDA	#((>player234then_1) & $0f) | (((>player234then_1) / 2) & $70)
   6196  430e		       8d 78 10 	      STA	DF0WRITE
   6197  4311		       a9 08		      LDA	#8
   6198  4313		       85 a6		      STA	player1height
   6199  4315				   .skip233then
   6200  4315				   .skipL0499
   6201  4315				   .L0500		;  if frame  =  20 then player2color:
   6202  4315
   6203  4315		       a5 d6		      LDA	frame
   6204  4317		       c9 14		      CMP	#20
   6205  4319		       d0 14		      BNE	.skipL0500
   6206  431b				   .condpart235
   6207  431b		       a9 f6		      lda	#<(playerpointers+20)
   6208  431d		       8d 50 10 	      sta	DF0LOW
   6209  4320		       a9 01		      lda	#(>(playerpointers+20)) & $0F
   6210  4322		       8d 68 10 	      sta	DF0HI
   6211  4325		       a2 f2		      LDX	#<playercolor235then_2
   6212  4327		       8e 78 10 	      STX	DF0WRITE
   6213  432a		       a9 69		      LDA	#((>playercolor235then_2) & $0f) | (((>playercolor235then_2) / 2) & $70)
   6214  432c		       8d 78 10 	      STA	DF0WRITE
   6215  432f				   .skipL0500
   6216  432f				   .L0501		;  if frame  =  20 then player3color:
   6217  432f
   6218  432f		       a5 d6		      LDA	frame
   6219  4331		       c9 14		      CMP	#20
   6220  4333		       d0 14		      BNE	.skipL0501
   6221  4335				   .condpart236
   6222  4335		       a9 f8		      lda	#<(playerpointers+22)
   6223  4337		       8d 50 10 	      sta	DF0LOW
   6224  433a		       a9 01		      lda	#(>(playerpointers+22)) & $0F
   6225  433c		       8d 68 10 	      sta	DF0HI
   6226  433f		       a2 fa		      LDX	#<playercolor236then_3
   6227  4341		       8e 78 10 	      STX	DF0WRITE
   6228  4344		       a9 69		      LDA	#((>playercolor236then_3) & $0f) | (((>playercolor236then_3) / 2) & $70)
   6229  4346		       8d 78 10 	      STA	DF0WRITE
   6230  4349				   .skipL0501
   6231  4349				   .L0502		;  if frame  =  20 then player1color:
   6232  4349
   6233  4349		       a5 d6		      LDA	frame
   6234  434b		       c9 14		      CMP	#20
   6235  434d		       d0 14		      BNE	.skipL0502
   6236  434f				   .condpart237
   6237  434f		       a9 f4		      lda	#<(playerpointers+18)
   6238  4351		       8d 50 10 	      sta	DF0LOW
   6239  4354		       a9 01		      lda	#(>(playerpointers+18)) & $0F
   6240  4356		       8d 68 10 	      sta	DF0HI
   6241  4359		       a2 02		      LDX	#<playercolor237then_1
   6242  435b		       8e 78 10 	      STX	DF0WRITE
   6243  435e		       a9 6a		      LDA	#((>playercolor237then_1) & $0f) | (((>playercolor237then_1) / 2) & $70)
   6244  4360		       8d 78 10 	      STA	DF0WRITE
   6245  4363				   .skipL0502
   6246  4363				   .L0503		;  if frame  =  30  &&  EnemyHit  <  1 then player2:
   6247  4363
   6248  4363		       a5 d6		      LDA	frame
   6249  4365		       c9 1e		      CMP	#30
   6250  4367		       d0 1e		      BNE	.skipL0503
   6251  4369				   .condpart238
   6252  4369		       a5 d9		      LDA	EnemyHit
   6253  436b		       c9 01		      CMP	#1
   6254  436d		       b0 18		      BCS	.skip238then
   6255  436f				   .condpart239
   6256  436f		       a9 e4		      lda	#<(playerpointers+2)
   6257  4371		       8d 50 10 	      sta	DF0LOW
   6258  4374		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   6259  4376		       8d 68 10 	      sta	DF0HI
   6260  4379		       a2 0a		      LDX	#<player239then_2
   6261  437b		       8e 78 10 	      STX	DF0WRITE
   6262  437e		       a9 6a		      LDA	#((>player239then_2) & $0f) | (((>player239then_2) / 2) & $70)
   6263  4380		       8d 78 10 	      STA	DF0WRITE
   6264  4383		       a9 08		      LDA	#8
   6265  4385		       85 a7		      STA	player2height
   6266  4387				   .skip238then
   6267  4387				   .skipL0503
   6268  4387				   .L0504		;  if frame  =  30  &&  EnemyHit  =  2 then player2:
   6269  4387
   6270  4387		       a5 d6		      LDA	frame
   6271  4389		       c9 1e		      CMP	#30
   6272  438b		       d0 1e		      BNE	.skipL0504
   6273  438d				   .condpart240
   6274  438d		       a5 d9		      LDA	EnemyHit
   6275  438f		       c9 02		      CMP	#2
   6276  4391		       d0 18		      BNE	.skip240then
   6277  4393				   .condpart241
   6278  4393		       a9 e4		      lda	#<(playerpointers+2)
   6279  4395		       8d 50 10 	      sta	DF0LOW
   6280  4398		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   6281  439a		       8d 68 10 	      sta	DF0HI
   6282  439d		       a2 12		      LDX	#<player241then_2
   6283  439f		       8e 78 10 	      STX	DF0WRITE
   6284  43a2		       a9 6a		      LDA	#((>player241then_2) & $0f) | (((>player241then_2) / 2) & $70)
   6285  43a4		       8d 78 10 	      STA	DF0WRITE
   6286  43a7		       a9 08		      LDA	#8
   6287  43a9		       85 a7		      STA	player2height
   6288  43ab				   .skip240then
   6289  43ab				   .skipL0504
   6290  43ab				   .L0505		;  if frame  =  30 then player3:
   6291  43ab
   6292  43ab		       a5 d6		      LDA	frame
   6293  43ad		       c9 1e		      CMP	#30
   6294  43af		       d0 18		      BNE	.skipL0505
   6295  43b1				   .condpart242
   6296  43b1		       a9 e6		      lda	#<(playerpointers+4)
   6297  43b3		       8d 50 10 	      sta	DF0LOW
   6298  43b6		       a9 01		      lda	#(>(playerpointers+4)) & $0F
   6299  43b8		       8d 68 10 	      sta	DF0HI
   6300  43bb		       a2 1a		      LDX	#<player242then_3
   6301  43bd		       8e 78 10 	      STX	DF0WRITE
   6302  43c0		       a9 6a		      LDA	#((>player242then_3) & $0f) | (((>player242then_3) / 2) & $70)
   6303  43c2		       8d 78 10 	      STA	DF0WRITE
   6304  43c5		       a9 08		      LDA	#8
   6305  43c7		       85 a8		      STA	player3height
   6306  43c9				   .skipL0505
   6307  43c9				   .L0506		;  if frame  =  30  &&  EnemyHit  <  1 then player1:
   6308  43c9
   6309  43c9		       a5 d6		      LDA	frame
   6310  43cb		       c9 1e		      CMP	#30
   6311  43cd		       d0 1e		      BNE	.skipL0506
   6312  43cf				   .condpart243
   6313  43cf		       a5 d9		      LDA	EnemyHit
   6314  43d1		       c9 01		      CMP	#1
   6315  43d3		       b0 18		      BCS	.skip243then
   6316  43d5				   .condpart244
   6317  43d5		       a9 e2		      lda	#<(playerpointers+0)
   6318  43d7		       8d 50 10 	      sta	DF0LOW
   6319  43da		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   6320  43dc		       8d 68 10 	      sta	DF0HI
   6321  43df		       a2 22		      LDX	#<player244then_1
   6322  43e1		       8e 78 10 	      STX	DF0WRITE
   6323  43e4		       a9 6a		      LDA	#((>player244then_1) & $0f) | (((>player244then_1) / 2) & $70)
   6324  43e6		       8d 78 10 	      STA	DF0WRITE
   6325  43e9		       a9 08		      LDA	#8
   6326  43eb		       85 a6		      STA	player1height
   6327  43ed				   .skip243then
   6328  43ed				   .skipL0506
   6329  43ed				   .L0507		;  if frame  =  30  &&  EnemyHit  =  1 then player1:
   6330  43ed
   6331  43ed		       a5 d6		      LDA	frame
   6332  43ef		       c9 1e		      CMP	#30
   6333  43f1		       d0 1e		      BNE	.skipL0507
   6334  43f3				   .condpart245
   6335  43f3		       a5 d9		      LDA	EnemyHit
   6336  43f5		       c9 01		      CMP	#1
   6337  43f7		       d0 18		      BNE	.skip245then
   6338  43f9				   .condpart246
   6339  43f9		       a9 e2		      lda	#<(playerpointers+0)
   6340  43fb		       8d 50 10 	      sta	DF0LOW
   6341  43fe		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   6342  4400		       8d 68 10 	      sta	DF0HI
   6343  4403		       a2 2a		      LDX	#<player246then_1
   6344  4405		       8e 78 10 	      STX	DF0WRITE
   6345  4408		       a9 6a		      LDA	#((>player246then_1) & $0f) | (((>player246then_1) / 2) & $70)
   6346  440a		       8d 78 10 	      STA	DF0WRITE
   6347  440d		       a9 08		      LDA	#8
   6348  440f		       85 a6		      STA	player1height
   6349  4411				   .skip245then
   6350  4411				   .skipL0507
   6351  4411				   .L0508		;  if frame  =  30 then player2color:
   6352  4411
   6353  4411		       a5 d6		      LDA	frame
   6354  4413		       c9 1e		      CMP	#30
   6355  4415		       d0 14		      BNE	.skipL0508
   6356  4417				   .condpart247
   6357  4417		       a9 f6		      lda	#<(playerpointers+20)
   6358  4419		       8d 50 10 	      sta	DF0LOW
   6359  441c		       a9 01		      lda	#(>(playerpointers+20)) & $0F
   6360  441e		       8d 68 10 	      sta	DF0HI
   6361  4421		       a2 32		      LDX	#<playercolor247then_2
   6362  4423		       8e 78 10 	      STX	DF0WRITE
   6363  4426		       a9 6a		      LDA	#((>playercolor247then_2) & $0f) | (((>playercolor247then_2) / 2) & $70)
   6364  4428		       8d 78 10 	      STA	DF0WRITE
   6365  442b				   .skipL0508
   6366  442b				   .L0509		;  if frame  =  30 then player3color:
   6367  442b
   6368  442b		       a5 d6		      LDA	frame
   6369  442d		       c9 1e		      CMP	#30
   6370  442f		       d0 14		      BNE	.skipL0509
   6371  4431				   .condpart248
   6372  4431		       a9 f8		      lda	#<(playerpointers+22)
   6373  4433		       8d 50 10 	      sta	DF0LOW
   6374  4436		       a9 01		      lda	#(>(playerpointers+22)) & $0F
   6375  4438		       8d 68 10 	      sta	DF0HI
   6376  443b		       a2 3a		      LDX	#<playercolor248then_3
   6377  443d		       8e 78 10 	      STX	DF0WRITE
   6378  4440		       a9 6a		      LDA	#((>playercolor248then_3) & $0f) | (((>playercolor248then_3) / 2) & $70)
   6379  4442		       8d 78 10 	      STA	DF0WRITE
   6380  4445				   .skipL0509
   6381  4445				   .L0510		;  if frame  =  30 then player1color:
   6382  4445
   6383  4445		       a5 d6		      LDA	frame
   6384  4447		       c9 1e		      CMP	#30
   6385  4449		       d0 14		      BNE	.skipL0510
   6386  444b				   .condpart249
   6387  444b		       a9 f4		      lda	#<(playerpointers+18)
   6388  444d		       8d 50 10 	      sta	DF0LOW
   6389  4450		       a9 01		      lda	#(>(playerpointers+18)) & $0F
   6390  4452		       8d 68 10 	      sta	DF0HI
   6391  4455		       a2 42		      LDX	#<playercolor249then_1
   6392  4457		       8e 78 10 	      STX	DF0WRITE
   6393  445a		       a9 6a		      LDA	#((>playercolor249then_1) & $0f) | (((>playercolor249then_1) / 2) & $70)
   6394  445c		       8d 78 10 	      STA	DF0WRITE
   6395  445f				   .skipL0510
   6396  445f				   .__Fire_Animation
   6397  445f							; __Fire_Animation
   6398  445f
   6399  445f				   .L0511		;  if f  =  10 then player5:
   6400  445f
   6401  445f		       a5 d6		      LDA	f
   6402  4461		       c9 0a		      CMP	#10
   6403  4463		       d0 18		      BNE	.skipL0511
   6404  4465				   .condpart250
   6405  4465		       a9 ea		      lda	#<(playerpointers+8)
   6406  4467		       8d 50 10 	      sta	DF0LOW
   6407  446a		       a9 01		      lda	#(>(playerpointers+8)) & $0F
   6408  446c		       8d 68 10 	      sta	DF0HI
   6409  446f		       a2 4a		      LDX	#<player250then_5
   6410  4471		       8e 78 10 	      STX	DF0WRITE
   6411  4474		       a9 6a		      LDA	#((>player250then_5) & $0f) | (((>player250then_5) / 2) & $70)
   6412  4476		       8d 78 10 	      STA	DF0WRITE
   6413  4479		       a9 08		      LDA	#8
   6414  447b		       85 aa		      STA	player5height
   6415  447d				   .skipL0511
   6416  447d				   .
   6417  447d							; 
   6418  447d
   6419  447d				   .L0512		;  if f  =  10 then player5color:
   6420  447d
   6421  447d		       a5 d6		      LDA	f
   6422  447f		       c9 0a		      CMP	#10
   6423  4481		       d0 14		      BNE	.skipL0512
   6424  4483				   .condpart251
   6425  4483		       a9 fc		      lda	#<(playerpointers+26)
   6426  4485		       8d 50 10 	      sta	DF0LOW
   6427  4488		       a9 01		      lda	#(>(playerpointers+26)) & $0F
   6428  448a		       8d 68 10 	      sta	DF0HI
   6429  448d		       a2 52		      LDX	#<playercolor251then_5
   6430  448f		       8e 78 10 	      STX	DF0WRITE
   6431  4492		       a9 6a		      LDA	#((>playercolor251then_5) & $0f) | (((>playercolor251then_5) / 2) & $70)
   6432  4494		       8d 78 10 	      STA	DF0WRITE
   6433  4497				   .skipL0512
   6434  4497				   .L0513		;  if f  =  20 then player5:
   6435  4497
   6436  4497		       a5 d6		      LDA	f
   6437  4499		       c9 14		      CMP	#20
   6438  449b		       d0 18		      BNE	.skipL0513
   6439  449d				   .condpart252
   6440  449d		       a9 ea		      lda	#<(playerpointers+8)
   6441  449f		       8d 50 10 	      sta	DF0LOW
   6442  44a2		       a9 01		      lda	#(>(playerpointers+8)) & $0F
   6443  44a4		       8d 68 10 	      sta	DF0HI
   6444  44a7		       a2 5a		      LDX	#<player252then_5
   6445  44a9		       8e 78 10 	      STX	DF0WRITE
   6446  44ac		       a9 6a		      LDA	#((>player252then_5) & $0f) | (((>player252then_5) / 2) & $70)
   6447  44ae		       8d 78 10 	      STA	DF0WRITE
   6448  44b1		       a9 08		      LDA	#8
   6449  44b3		       85 aa		      STA	player5height
   6450  44b5				   .skipL0513
   6451  44b5				   .L0514		;  if f  =  20 then player5color:
   6452  44b5
   6453  44b5		       a5 d6		      LDA	f
   6454  44b7		       c9 14		      CMP	#20
   6455  44b9		       d0 14		      BNE	.skipL0514
   6456  44bb				   .condpart253
   6457  44bb		       a9 fc		      lda	#<(playerpointers+26)
   6458  44bd		       8d 50 10 	      sta	DF0LOW
   6459  44c0		       a9 01		      lda	#(>(playerpointers+26)) & $0F
   6460  44c2		       8d 68 10 	      sta	DF0HI
   6461  44c5		       a2 62		      LDX	#<playercolor253then_5
   6462  44c7		       8e 78 10 	      STX	DF0WRITE
   6463  44ca		       a9 6a		      LDA	#((>playercolor253then_5) & $0f) | (((>playercolor253then_5) / 2) & $70)
   6464  44cc		       8d 78 10 	      STA	DF0WRITE
   6465  44cf				   .skipL0514
   6466  44cf				   .L0515		;  if f  =  30 then player5:
   6467  44cf
   6468  44cf		       a5 d6		      LDA	f
   6469  44d1		       c9 1e		      CMP	#30
   6470  44d3		       d0 18		      BNE	.skipL0515
   6471  44d5				   .condpart254
   6472  44d5		       a9 ea		      lda	#<(playerpointers+8)
   6473  44d7		       8d 50 10 	      sta	DF0LOW
   6474  44da		       a9 01		      lda	#(>(playerpointers+8)) & $0F
   6475  44dc		       8d 68 10 	      sta	DF0HI
   6476  44df		       a2 6a		      LDX	#<player254then_5
   6477  44e1		       8e 78 10 	      STX	DF0WRITE
   6478  44e4		       a9 6a		      LDA	#((>player254then_5) & $0f) | (((>player254then_5) / 2) & $70)
   6479  44e6		       8d 78 10 	      STA	DF0WRITE
   6480  44e9		       a9 08		      LDA	#8
   6481  44eb		       85 aa		      STA	player5height
   6482  44ed				   .skipL0515
   6483  44ed				   .L0516		;  if f  =  30 then player5color:
   6484  44ed
   6485  44ed		       a5 d6		      LDA	f
   6486  44ef		       c9 1e		      CMP	#30
   6487  44f1		       d0 14		      BNE	.skipL0516
   6488  44f3				   .condpart255
   6489  44f3		       a9 fc		      lda	#<(playerpointers+26)
   6490  44f5		       8d 50 10 	      sta	DF0LOW
   6491  44f8		       a9 01		      lda	#(>(playerpointers+26)) & $0F
   6492  44fa		       8d 68 10 	      sta	DF0HI
   6493  44fd		       a2 72		      LDX	#<playercolor255then_5
   6494  44ff		       8e 78 10 	      STX	DF0WRITE
   6495  4502		       a9 6a		      LDA	#((>playercolor255then_5) & $0f) | (((>playercolor255then_5) / 2) & $70)
   6496  4504		       8d 78 10 	      STA	DF0WRITE
   6497  4507				   .skipL0516
   6498  4507				   .L0517		;  if frame  >  0 then player4:
   6499  4507
   6500  4507		       a9 00		      LDA	#0
   6501  4509		       c5 d6		      CMP	frame
   6502  450b		       b0 18		      BCS	.skipL0517
   6503  450d				   .condpart256
   6504  450d		       a9 e8		      lda	#<(playerpointers+6)
   6505  450f		       8d 50 10 	      sta	DF0LOW
   6506  4512		       a9 01		      lda	#(>(playerpointers+6)) & $0F
   6507  4514		       8d 68 10 	      sta	DF0HI
   6508  4517		       a2 7a		      LDX	#<player256then_4
   6509  4519		       8e 78 10 	      STX	DF0WRITE
   6510  451c		       a9 6a		      LDA	#((>player256then_4) & $0f) | (((>player256then_4) / 2) & $70)
   6511  451e		       8d 78 10 	      STA	DF0WRITE
   6512  4521		       a9 09		      LDA	#9
   6513  4523		       85 a9		      STA	player4height
   6514  4525				   .skipL0517
   6515  4525				   .L0518		;  if frame  > 0 then player4color:
   6516  4525
   6517  4525		       a9 00		      LDA	#0
   6518  4527		       c5 d6		      CMP	frame
   6519  4529		       b0 14		      BCS	.skipL0518
   6520  452b				   .condpart257
   6521  452b		       a9 fa		      lda	#<(playerpointers+24)
   6522  452d		       8d 50 10 	      sta	DF0LOW
   6523  4530		       a9 01		      lda	#(>(playerpointers+24)) & $0F
   6524  4532		       8d 68 10 	      sta	DF0HI
   6525  4535		       a2 83		      LDX	#<playercolor257then_4
   6526  4537		       8e 78 10 	      STX	DF0WRITE
   6527  453a		       a9 6a		      LDA	#((>playercolor257then_4) & $0f) | (((>playercolor257then_4) / 2) & $70)
   6528  453c		       8d 78 10 	      STA	DF0WRITE
   6529  453f				   .skipL0518
   6530  453f				   .L0519		;  if frame  >=  30  &&  EnemyHit  = 1 then player1y = 200  :	EnemyHit  = 0
   6531  453f
   6532  453f		       a5 d6		      LDA	frame
   6533  4541		       c9 1e		      CMP	#30
   6534  4543		       90 0e		      BCC	.skipL0519
   6535  4545				   .condpart258
   6536  4545		       a5 d9		      LDA	EnemyHit
   6537  4547		       c9 01		      CMP	#1
   6538  4549		       d0 08		      BNE	.skip258then
   6539  454b				   .condpart259
   6540  454b		       a9 c8		      LDA	#200
   6541  454d		       85 9a		      STA	player1y
   6542  454f		       a9 00		      LDA	#0
   6543  4551		       85 d9		      STA	EnemyHit
   6544  4553				   .skip258then
   6545  4553				   .skipL0519
   6546  4553				   .L0520		;  if frame  >=  30  &&  EnemyHit  = 2 then player2y = 200  :	EnemyHit  = 0
   6547  4553
   6548  4553		       a5 d6		      LDA	frame
   6549  4555		       c9 1e		      CMP	#30
   6550  4557		       90 0e		      BCC	.skipL0520
   6551  4559				   .condpart260
   6552  4559		       a5 d9		      LDA	EnemyHit
   6553  455b		       c9 02		      CMP	#2
   6554  455d		       d0 08		      BNE	.skip260then
   6555  455f				   .condpart261
   6556  455f		       a9 c8		      LDA	#200
   6557  4561		       85 9b		      STA	player2y
   6558  4563		       a9 00		      LDA	#0
   6559  4565		       85 d9		      STA	EnemyHit
   6560  4567				   .skip260then
   6561  4567				   .skipL0520
   6562  4567				   .L0521		;  if frame  >=  30  &&  EnemyHit  = 3 then player3y = 200  :	EnemyHit  = 0
   6563  4567
   6564  4567		       a5 d6		      LDA	frame
   6565  4569		       c9 1e		      CMP	#30
   6566  456b		       90 0e		      BCC	.skipL0521
   6567  456d				   .condpart262
   6568  456d		       a5 d9		      LDA	EnemyHit
   6569  456f		       c9 03		      CMP	#3
   6570  4571		       d0 08		      BNE	.skip262then
   6571  4573				   .condpart263
   6572  4573		       a9 c8		      LDA	#200
   6573  4575		       85 9c		      STA	player3y
   6574  4577		       a9 00		      LDA	#0
   6575  4579		       85 d9		      STA	EnemyHit
   6576  457b				   .skip262then
   6577  457b				   .skipL0521
   6578  457b				   .L0522		;  if frame  >= 30 then frame	= 0  :	PlayerDamage = 0
   6579  457b
   6580  457b		       a5 d6		      LDA	frame
   6581  457d		       c9 1e		      CMP	#30
   6582  457f		       90 06		      BCC	.skipL0522
   6583  4581				   .condpart264
   6584  4581		       a9 00		      LDA	#0
   6585  4583		       85 d6		      STA	frame
   6586  4585		       85 dd		      STA	PlayerDamage
   6587  4587				   .skipL0522
   6588  4587				   .L0523		;  if joy0right then REFP0  =	0
   6589  4587
   6590  4587		       2c 80 02 	      bit	SWCHA
   6591  458a		       30 04		      BMI	.skipL0523
   6592  458c				   .condpart265
   6593  458c		       a9 00		      LDA	#0
   6594  458e		       85 0b		      STA	REFP0
   6595  4590				   .skipL0523
   6596  4590				   .L0524		;  if joy0left then REFP0  =  8
   6597  4590
   6598  4590		       2c 80 02 	      bit	SWCHA
   6599  4593		       70 04		      BVS	.skipL0524
   6600  4595				   .condpart266
   6601  4595		       a9 08		      LDA	#8
   6602  4597		       85 0b		      STA	REFP0
   6603  4599				   .skipL0524
   6604  4599				   .L0525		;  return
   6605  4599
   6606  4599		       ba		      tsx
   6607  459a		       b5 02		      lda	2,x	; check return address
   6608  459c		       49 75		      eor	#(>*)	; vs. current PCH
   6609  459e		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   6610  45a0		       f0 03		      beq	*+5	; if equal, do normal return
   6611  45a2		       4c e0 df 	      JMP	BS_return
   6612  45a5		       60		      RTS
   6613  45a6				   .
   6614  45a6							; 
   6615  45a6
   6616  45a6				   .__GameOver
   6617  45a6							; __GameOver
   6618  45a6
   6619  45a6				   .L0526		;  Bit4_gameover{4}  =  1
   6620  45a6
   6621  45a6		       a5 ea		      LDA	Bit4_gameover
   6622  45a8		       09 10		      ORA	#16
   6623  45aa		       85 ea		      STA	Bit4_gameover
   6624  45ac				   .L0527		;  missile0y  = 200 :	missile1y = 200
   6625  45ac
   6626  45ac		       a9 c8		      LDA	#200
   6627  45ae		       85 bf		      STA	missile0y
   6628  45b0		       85 c0		      STA	missile1y
   6629  45b2				   .L0528		;  player0y  = 200 :  player1y = 200 :  player2y = 200 :  player3y = 200 :  player4y = 200 :  player5y = 200 :  player6y = 200 :  player7y  = 200
   6630  45b2
   6631  45b2		       a9 c8		      LDA	#200
   6632  45b4		       85 99		      STA	player0y
   6633  45b6		       85 9a		      STA	player1y
   6634  45b8		       85 9b		      STA	player2y
   6635  45ba		       85 9c		      STA	player3y
   6636  45bc		       85 9d		      STA	player4y
   6637  45be		       85 9e		      STA	player5y
   6638  45c0		       85 9f		      STA	player6y
   6639  45c2		       85 a0		      STA	player7y
   6640  45c4				   .L0529		;  if Bit4_gameover{4} then if !Ch0_Sound then Ch0_Sound  =  1  :  Ch0_Duration  =  30
   6641  45c4
   6642  45c4		       a5 ea		      LDA	Bit4_gameover
   6643  45c6		       29 10		      AND	#16
   6644  45c8		       f0 0c		      BEQ	.skipL0529
   6645  45ca				   .condpart267
   6646  45ca		       a5 e7		      LDA	Ch0_Sound
   6647  45cc		       d0 08		      BNE	.skip267then
   6648  45ce				   .condpart268
   6649  45ce		       a9 01		      LDA	#1
   6650  45d0		       85 e7		      STA	Ch0_Sound
   6651  45d2		       a9 1e		      LDA	#30
   6652  45d4		       85 e8		      STA	Ch0_Duration
   6653  45d6				   .skip267then
   6654  45d6				   .skipL0529
   6655  45d6				   .L0530		;  if !Ch0_Sound then goto __End__Skip_Ch_0
   6656  45d6
   6657  45d6		       a5 e7		      LDA	Ch0_Sound
   6658  45d8		       d0 03		      BNE	.skipL0530
   6659  45da				   .condpart269
   6660  45da		       4c 1d 76 	      jmp	.__End__Skip_Ch_0
   6661  45dd
   6662  45dd				   .skipL0530
   6663  45dd				   .L0531		;  Ch0_Duration  =  Ch0_Duration  -  1
   6664  45dd
   6665  45dd		       c6 e8		      DEC	Ch0_Duration
   6666  45df				   .L0532		;  if !Ch0_Duration then goto __End__Clear_Ch_0
   6667  45df
   6668  45df		       a5 e8		      LDA	Ch0_Duration
   6669  45e1		       d0 03		      BNE	.skipL0532
   6670  45e3				   .condpart270
   6671  45e3		       4c 13 76 	      jmp	.__End__Clear_Ch_0
   6672  45e6
   6673  45e6				   .skipL0532
   6674  45e6				   .L0533		;  if Ch0_Sound  <>  1 then goto __End__Skip_Ch0_Sound_001
   6675  45e6
   6676  45e6		       a5 e7		      LDA	Ch0_Sound
   6677  45e8		       c9 01		      CMP	#1
   6678  45ea		       f0 03		      BEQ	.skipL0533
   6679  45ec				   .condpart271
   6680  45ec		       4c 10 76 	      jmp	.__End__Skip_Ch0_Sound_001
   6681  45ef
   6682  45ef				   .skipL0533
   6683  45ef				   .L0534		;  AUDC0  =  6  :  AUDV0  =  2  :  AUDF0  =  12
   6684  45ef
   6685  45ef		       a9 06		      LDA	#6
   6686  45f1		       85 15		      STA	AUDC0
   6687  45f3		       a9 02		      LDA	#2
   6688  45f5		       85 19		      STA	AUDV0
   6689  45f7		       a9 0c		      LDA	#12
   6690  45f9		       85 17		      STA	AUDF0
   6691  45fb				   .L0535		;  if Ch0_Duration  <	15 then AUDC0  =  6  :	AUDV0  =  1  :	AUDF0  =  6
   6692  45fb
   6693  45fb		       a5 e8		      LDA	Ch0_Duration
   6694  45fd		       c9 0f		      CMP	#15
   6695  45ff		       b0 0c		      BCS	.skipL0535
   6696  4601				   .condpart272
   6697  4601		       a9 06		      LDA	#6
   6698  4603		       85 15		      STA	AUDC0
   6699  4605		       a9 01		      LDA	#1
   6700  4607		       85 19		      STA	AUDV0
   6701  4609		       a9 06		      LDA	#6
   6702  460b		       85 17		      STA	AUDF0
   6703  460d				   .skipL0535
   6704  460d				   .L0536		;  goto __End__Skip_Ch_0
   6705  460d
   6706  460d		       4c 1d 76 	      jmp	.__End__Skip_Ch_0
   6707  4610
   6708  4610				   .__End__Skip_Ch0_Sound_001
   6709  4610							; __End__Skip_Ch0_Sound_001
   6710  4610
   6711  4610				   .L0537		;  goto __End__Skip_Ch_0
   6712  4610
   6713  4610		       4c 1d 76 	      jmp	.__End__Skip_Ch_0
   6714  4613
   6715  4613				   .__End__Clear_Ch_0
   6716  4613							; __End__Clear_Ch_0
   6717  4613
   6718  4613				   .L0538		;  Ch0_Sound  =  0  :	AUDV0  =  0 :  AUDC0 = 0 :  AUDF0  = 0
   6719  4613
   6720  4613		       a9 00		      LDA	#0
   6721  4615		       85 e7		      STA	Ch0_Sound
   6722  4617		       85 19		      STA	AUDV0
   6723  4619		       85 15		      STA	AUDC0
   6724  461b		       85 17		      STA	AUDF0
   6725  461d				   .
   6726  461d							; 
   6727  461d
   6728  461d				   .__End__Skip_Ch_0
   6729  461d							; __End__Skip_Ch_0
   6730  461d
   6731  461d				   .L0539		;  playfield:
   6732  461d
   6733  461d		       a0 58		      ldy	#88
   6734  461f		       a9 8c		      LDA	#<PF_data3
   6735  4621		       a2 6a		      LDX	#((>PF_data3) & $0f) | (((>PF_data3) / 2) & $70)
   6736  4623		       85 81		      sta	temp7
   6737  4625		       a9 76		      lda	#>(ret_point25-1)
   6738  4627		       48		      pha
   6739  4628		       a9 3a		      lda	#<(ret_point25-1)
   6740  462a		       48		      pha
   6741  462b		       a9 1e		      lda	#>(pfsetup-1)
   6742  462d		       48		      pha
   6743  462e		       a9 8c		      lda	#<(pfsetup-1)
   6744  4630		       48		      pha
   6745  4631		       a5 81		      lda	temp7
   6746  4633		       48		      pha
   6747  4634		       8a		      txa
   6748  4635		       48		      pha
   6749  4636		       a2 01		      ldx	#1
   6750  4638		       4c ee df 	      jmp	BS_jsr
   6751  463b				   ret_point25
   6752  463b				   .
   6753  463b							; 
   6754  463b
   6755  463b				   .
   6756  463b							; 
   6757  463b
   6758  463b				   .L0540		;  pfcolors:
   6759  463b
   6760  463b		       a9 08		      LDA	#<PFCOLS
   6761  463d		       8d 50 10 	      STA	DF0LOW
   6762  4640		       a9 0a		      LDA	#(>PFCOLS) & $0F
   6763  4642		       8d 68 10 	      STA	DF0HI
   6764  4645		       a9 ec		      LDA	#<playfieldcolorL0540
   6765  4647		       8d 59 10 	      STA	PARAMETER
   6766  464a		       a9 6b		      LDA	#((>playfieldcolorL0540) & $0f) | (((>playfieldcolorL0540) / 2) & $70)
   6767  464c		       8d 59 10 	      STA	PARAMETER
   6768  464f		       a9 00		      LDA	#0
   6769  4651		       8d 59 10 	      STA	PARAMETER
   6770  4654		       a9 58		      LDA	#88
   6771  4656		       8d 59 10 	      STA	PARAMETER
   6772  4659		       a9 01		      LDA	#1
   6773  465b		       8d 5a 10 	      STA	CALLFUNCTION
   6774  465e				   .
   6775  465e							; 
   6776  465e
   6777  465e				   .L0541		;  bkcolors:
   6778  465e
   6779  465e		       a9 a5		      LDA	#<BKCOLS
   6780  4660		       8d 50 10 	      STA	DF0LOW
   6781  4663		       a9 0b		      LDA	#(>BKCOLS) & $0F
   6782  4665		       8d 68 10 	      STA	DF0HI
   6783  4668		       a9 44		      LDA	#<backgroundcolorL0541
   6784  466a		       8d 59 10 	      STA	PARAMETER
   6785  466d		       a9 6c		      LDA	#((>backgroundcolorL0541) & $0f) | (((>backgroundcolorL0541) / 2) & $70)
   6786  466f		       8d 59 10 	      STA	PARAMETER
   6787  4672		       a9 00		      LDA	#0
   6788  4674		       8d 59 10 	      STA	PARAMETER
   6789  4677		       a9 58		      LDA	#88
   6790  4679		       8d 59 10 	      STA	PARAMETER
   6791  467c		       a9 01		      LDA	#1
   6792  467e		       8d 5a 10 	      STA	CALLFUNCTION
   6793  4681				   .L0542		;  if joy0fire  ||  switchreset then goto __Gamestart
   6794  4681
   6795  4681		       24 0c		      bit	INPT4
   6796  4683		       30 03		      BMI	.skipL0542
   6797  4685				   .condpart273
   6798  4685		       4c 8f 76 	      jmp	.condpart274
   6799  4688				   .skipL0542
   6800  4688		       a9 01		      lda	#1
   6801  468a		       2c 82 02 	      bit	SWCHB
   6802  468d		       d0 03		      BNE	.skip82OR
   6803  468f				   .condpart274
   6804  468f		       4c 5c 31 	      jmp	.__Gamestart
   6805  4692
   6806  4692				   .skip82OR
   6807  4692				   .L0543		;  return
   6808  4692
   6809  4692		       ba		      tsx
   6810  4693		       b5 02		      lda	2,x	; check return address
   6811  4695		       49 76		      eor	#(>*)	; vs. current PCH
   6812  4697		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   6813  4699		       f0 03		      beq	*+5	; if equal, do normal return
   6814  469b		       4c e0 df 	      JMP	BS_return
   6815  469e		       60		      RTS
   6816  469f				   .
   6817  469f							; 
   6818  469f
   6819  469f				   .L0544		;  bank 5
   6820  469f
   6821  469f					      if	ECHO4
      2357 bytes of ROM space left in bank 4
   6822  469f					      echo	"    ",[(start_bank4 - *)]d , "bytes of ROM space left in bank 4")
   6823  469f					      endif
   6824  469f		       00 01	   ECHO4      =	1
   6825  4fd4					      ORG	$4FF4-bscode_length
   6826  4fd4					      RORG	$7FF4-bscode_length
   6827  4fd4		       a2 ff	   start_bank4 ldx	#$ff
   6828  4fd6					      ifconst	FASTFETCH	; using DPC+
   6829  4fd6		       8e 58 10 	      stx	FASTFETCH
   6830  4fd9					      endif
   6831  4fd9		       9a		      txs
   6832  4fda				  -	      if	bankswitch == 64
   6833  4fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   6834  4fda					      else
   6835  4fda		       a9 18		      lda	#>(start-1)
   6836  4fdc					      endif
   6837  4fdc		       48		      pha
   6838  4fdd		       a9 e3		      lda	#<(start-1)
   6839  4fdf		       48		      pha
   6840  4fe0		       48		      pha
   6841  4fe1		       8a		      txa
   6842  4fe2		       48		      pha
   6843  4fe3		       ba		      tsx
   6844  4fe4					      if	bankswitch != 64
   6845  4fe4		       b5 04		      lda	4,x	; get high byte of return address
   6846  4fe6		       2a		      rol
   6847  4fe7		       2a		      rol
   6848  4fe8		       2a		      rol
   6849  4fe9		       2a		      rol
   6850  4fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   6851  4fec		       aa		      tax
   6852  4fed		       e8		      inx
   6853  4fee				  -	      else
   6854  4fee				  -	      lda	4,x	; get high byte of return address
   6855  4fee				  -	      tay
   6856  4fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   6857  4fee				  -	      sta	4,x
   6858  4fee				  -	      tya
   6859  4fee				  -	      lsr
   6860  4fee				  -	      lsr
   6861  4fee				  -	      lsr
   6862  4fee				  -	      lsr
   6863  4fee				  -	      tax
   6864  4fee				  -	      inx
   6865  4fee					      endif
   6866  4fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   6867  4ff1		       68		      pla
   6868  4ff2		       aa		      tax
   6869  4ff3		       68		      pla
   6870  4ff4		       60		      rts
   6871  4ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   6872  4ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   6873  4ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   6874  4ff5					      endif
   6875  4ffc					      ORG	$4FFC
   6876  4ffc					      RORG	$7FFC
   6877  4ffc		       d4 7f		      .word.w	(start_bank4 & $ffff)
   6878  4ffe		       d4 7f		      .word.w	(start_bank4 & $ffff)
   6879  5000					      ORG	$5000
   6880  5000					      RORG	$9000
   6881  5000					      repeat	129
   6882  5000		       00		      .byte.b	0
   6881  5000					      repend
   6882  5001		       00		      .byte.b	0
   6881  5001					      repend
   6882  5002		       00		      .byte.b	0
   6881  5002					      repend
   6882  5003		       00		      .byte.b	0
   6881  5003					      repend
   6882  5004		       00		      .byte.b	0
   6881  5004					      repend
   6882  5005		       00		      .byte.b	0
   6881  5005					      repend
   6882  5006		       00		      .byte.b	0
   6881  5006					      repend
   6882  5007		       00		      .byte.b	0
   6881  5007					      repend
   6882  5008		       00		      .byte.b	0
   6881  5008					      repend
   6882  5009		       00		      .byte.b	0
   6881  5009					      repend
   6882  500a		       00		      .byte.b	0
   6881  500a					      repend
   6882  500b		       00		      .byte.b	0
   6881  500b					      repend
   6882  500c		       00		      .byte.b	0
   6881  500c					      repend
   6882  500d		       00		      .byte.b	0
   6881  500d					      repend
   6882  500e		       00		      .byte.b	0
   6881  500e					      repend
   6882  500f		       00		      .byte.b	0
   6881  500f					      repend
   6882  5010		       00		      .byte.b	0
   6881  5010					      repend
   6882  5011		       00		      .byte.b	0
   6881  5011					      repend
   6882  5012		       00		      .byte.b	0
   6881  5012					      repend
   6882  5013		       00		      .byte.b	0
   6881  5013					      repend
   6882  5014		       00		      .byte.b	0
   6881  5014					      repend
   6882  5015		       00		      .byte.b	0
   6881  5015					      repend
   6882  5016		       00		      .byte.b	0
   6881  5016					      repend
   6882  5017		       00		      .byte.b	0
   6881  5017					      repend
   6882  5018		       00		      .byte.b	0
   6881  5018					      repend
   6882  5019		       00		      .byte.b	0
   6881  5019					      repend
   6882  501a		       00		      .byte.b	0
   6881  501a					      repend
   6882  501b		       00		      .byte.b	0
   6881  501b					      repend
   6882  501c		       00		      .byte.b	0
   6881  501c					      repend
   6882  501d		       00		      .byte.b	0
   6881  501d					      repend
   6882  501e		       00		      .byte.b	0
   6881  501e					      repend
   6882  501f		       00		      .byte.b	0
   6881  501f					      repend
   6882  5020		       00		      .byte.b	0
   6881  5020					      repend
   6882  5021		       00		      .byte.b	0
   6881  5021					      repend
   6882  5022		       00		      .byte.b	0
   6881  5022					      repend
   6882  5023		       00		      .byte.b	0
   6881  5023					      repend
   6882  5024		       00		      .byte.b	0
   6881  5024					      repend
   6882  5025		       00		      .byte.b	0
   6881  5025					      repend
   6882  5026		       00		      .byte.b	0
   6881  5026					      repend
   6882  5027		       00		      .byte.b	0
   6881  5027					      repend
   6882  5028		       00		      .byte.b	0
   6881  5028					      repend
   6882  5029		       00		      .byte.b	0
   6881  5029					      repend
   6882  502a		       00		      .byte.b	0
   6881  502a					      repend
   6882  502b		       00		      .byte.b	0
   6881  502b					      repend
   6882  502c		       00		      .byte.b	0
   6881  502c					      repend
   6882  502d		       00		      .byte.b	0
   6881  502d					      repend
   6882  502e		       00		      .byte.b	0
   6881  502e					      repend
   6882  502f		       00		      .byte.b	0
   6881  502f					      repend
   6882  5030		       00		      .byte.b	0
   6881  5030					      repend
   6882  5031		       00		      .byte.b	0
   6881  5031					      repend
   6882  5032		       00		      .byte.b	0
   6881  5032					      repend
   6882  5033		       00		      .byte.b	0
   6881  5033					      repend
   6882  5034		       00		      .byte.b	0
   6881  5034					      repend
   6882  5035		       00		      .byte.b	0
   6881  5035					      repend
   6882  5036		       00		      .byte.b	0
   6881  5036					      repend
   6882  5037		       00		      .byte.b	0
   6881  5037					      repend
   6882  5038		       00		      .byte.b	0
   6881  5038					      repend
   6882  5039		       00		      .byte.b	0
   6881  5039					      repend
   6882  503a		       00		      .byte.b	0
   6881  503a					      repend
   6882  503b		       00		      .byte.b	0
   6881  503b					      repend
   6882  503c		       00		      .byte.b	0
   6881  503c					      repend
   6882  503d		       00		      .byte.b	0
   6881  503d					      repend
   6882  503e		       00		      .byte.b	0
   6881  503e					      repend
   6882  503f		       00		      .byte.b	0
   6881  503f					      repend
   6882  5040		       00		      .byte.b	0
   6881  5040					      repend
   6882  5041		       00		      .byte.b	0
   6881  5041					      repend
   6882  5042		       00		      .byte.b	0
   6881  5042					      repend
   6882  5043		       00		      .byte.b	0
   6881  5043					      repend
   6882  5044		       00		      .byte.b	0
   6881  5044					      repend
   6882  5045		       00		      .byte.b	0
   6881  5045					      repend
   6882  5046		       00		      .byte.b	0
   6881  5046					      repend
   6882  5047		       00		      .byte.b	0
   6881  5047					      repend
   6882  5048		       00		      .byte.b	0
   6881  5048					      repend
   6882  5049		       00		      .byte.b	0
   6881  5049					      repend
   6882  504a		       00		      .byte.b	0
   6881  504a					      repend
   6882  504b		       00		      .byte.b	0
   6881  504b					      repend
   6882  504c		       00		      .byte.b	0
   6881  504c					      repend
   6882  504d		       00		      .byte.b	0
   6881  504d					      repend
   6882  504e		       00		      .byte.b	0
   6881  504e					      repend
   6882  504f		       00		      .byte.b	0
   6881  504f					      repend
   6882  5050		       00		      .byte.b	0
   6881  5050					      repend
   6882  5051		       00		      .byte.b	0
   6881  5051					      repend
   6882  5052		       00		      .byte.b	0
   6881  5052					      repend
   6882  5053		       00		      .byte.b	0
   6881  5053					      repend
   6882  5054		       00		      .byte.b	0
   6881  5054					      repend
   6882  5055		       00		      .byte.b	0
   6881  5055					      repend
   6882  5056		       00		      .byte.b	0
   6881  5056					      repend
   6882  5057		       00		      .byte.b	0
   6881  5057					      repend
   6882  5058		       00		      .byte.b	0
   6881  5058					      repend
   6882  5059		       00		      .byte.b	0
   6881  5059					      repend
   6882  505a		       00		      .byte.b	0
   6881  505a					      repend
   6882  505b		       00		      .byte.b	0
   6881  505b					      repend
   6882  505c		       00		      .byte.b	0
   6881  505c					      repend
   6882  505d		       00		      .byte.b	0
   6881  505d					      repend
   6882  505e		       00		      .byte.b	0
   6881  505e					      repend
   6882  505f		       00		      .byte.b	0
   6881  505f					      repend
   6882  5060		       00		      .byte.b	0
   6881  5060					      repend
   6882  5061		       00		      .byte.b	0
   6881  5061					      repend
   6882  5062		       00		      .byte.b	0
   6881  5062					      repend
   6882  5063		       00		      .byte.b	0
   6881  5063					      repend
   6882  5064		       00		      .byte.b	0
   6881  5064					      repend
   6882  5065		       00		      .byte.b	0
   6881  5065					      repend
   6882  5066		       00		      .byte.b	0
   6881  5066					      repend
   6882  5067		       00		      .byte.b	0
   6881  5067					      repend
   6882  5068		       00		      .byte.b	0
   6881  5068					      repend
   6882  5069		       00		      .byte.b	0
   6881  5069					      repend
   6882  506a		       00		      .byte.b	0
   6881  506a					      repend
   6882  506b		       00		      .byte.b	0
   6881  506b					      repend
   6882  506c		       00		      .byte.b	0
   6881  506c					      repend
   6882  506d		       00		      .byte.b	0
   6881  506d					      repend
   6882  506e		       00		      .byte.b	0
   6881  506e					      repend
   6882  506f		       00		      .byte.b	0
   6881  506f					      repend
   6882  5070		       00		      .byte.b	0
   6881  5070					      repend
   6882  5071		       00		      .byte.b	0
   6881  5071					      repend
   6882  5072		       00		      .byte.b	0
   6881  5072					      repend
   6882  5073		       00		      .byte.b	0
   6881  5073					      repend
   6882  5074		       00		      .byte.b	0
   6881  5074					      repend
   6882  5075		       00		      .byte.b	0
   6881  5075					      repend
   6882  5076		       00		      .byte.b	0
   6881  5076					      repend
   6882  5077		       00		      .byte.b	0
   6881  5077					      repend
   6882  5078		       00		      .byte.b	0
   6881  5078					      repend
   6882  5079		       00		      .byte.b	0
   6881  5079					      repend
   6882  507a		       00		      .byte.b	0
   6881  507a					      repend
   6882  507b		       00		      .byte.b	0
   6881  507b					      repend
   6882  507c		       00		      .byte.b	0
   6881  507c					      repend
   6882  507d		       00		      .byte.b	0
   6881  507d					      repend
   6882  507e		       00		      .byte.b	0
   6881  507e					      repend
   6882  507f		       00		      .byte.b	0
   6881  507f					      repend
   6882  5080		       00		      .byte.b	0
   6883  5081					      repend
   6884  5081				   .L0545		;  temp1 = temp1
   6885  5081
   6886  5081		       a5 cb		      LDA	temp1
   6887  5083		       85 cb		      STA	temp1
   6888  5085				   .__P0Explosion
   6889  5085							; __P0Explosion
   6890  5085
   6891  5085				   .L0546		;  if Bit3_ShootorNot{3}  &&  !Ch1_Sound then Ch1_Sound  =  1	:  Ch1_Duration  =  25
   6892  5085
   6893  5085		       a5 ea		      LDA	Bit3_ShootorNot
   6894  5087		       29 08		      AND	#8
   6895  5089		       f0 0c		      BEQ	.skipL0546
   6896  508b				   .condpart275
   6897  508b		       a5 da		      LDA	Ch1_Sound
   6898  508d		       d0 08		      BNE	.skip275then
   6899  508f				   .condpart276
   6900  508f		       a9 01		      LDA	#1
   6901  5091		       85 da		      STA	Ch1_Sound
   6902  5093		       a9 19		      LDA	#25
   6903  5095		       85 db		      STA	Ch1_Duration
   6904  5097				   .skip275then
   6905  5097				   .skipL0546
   6906  5097				   .L0547		;  if !Ch1_Sound then goto __P0Exp_Skip_Ch_1
   6907  5097
   6908  5097		       a5 da		      LDA	Ch1_Sound
   6909  5099		       d0 03		      BNE	.skipL0547
   6910  509b				   .condpart277
   6911  509b		       4c e6 90 	      jmp	.__P0Exp_Skip_Ch_1
   6912  509e
   6913  509e				   .skipL0547
   6914  509e				   .L0548		;  Ch1_Duration  =  Ch1_Duration  -  1
   6915  509e
   6916  509e		       c6 db		      DEC	Ch1_Duration
   6917  50a0				   .L0549		;  if !Ch1_Duration then goto __P0Exp_Clear_Ch_1
   6918  50a0
   6919  50a0		       a5 db		      LDA	Ch1_Duration
   6920  50a2		       d0 03		      BNE	.skipL0549
   6921  50a4				   .condpart278
   6922  50a4		       4c e6 90 	      jmp	.__P0Exp_Clear_Ch_1
   6923  50a7
   6924  50a7				   .skipL0549
   6925  50a7				   .L0550		;  if Ch1_Sound  <>  1 then goto __P0Exp_Skip_Ch0_Sound_001
   6926  50a7
   6927  50a7		       a5 da		      LDA	Ch1_Sound
   6928  50a9		       c9 01		      CMP	#1
   6929  50ab		       f0 03		      BEQ	.skipL0550
   6930  50ad				   .condpart279
   6931  50ad		       4c e3 90 	      jmp	.__P0Exp_Skip_Ch0_Sound_001
   6932  50b0
   6933  50b0				   .skipL0550
   6934  50b0				   .
   6935  50b0							; 
   6936  50b0
   6937  50b0				   .L0551		;  AUDC1  =  9  :  AUDV1  =  6  :  AUDF1  =  14
   6938  50b0
   6939  50b0		       a9 09		      LDA	#9
   6940  50b2		       85 16		      STA	AUDC1
   6941  50b4		       a9 06		      LDA	#6
   6942  50b6		       85 1a		      STA	AUDV1
   6943  50b8		       a9 0e		      LDA	#14
   6944  50ba		       85 18		      STA	AUDF1
   6945  50bc				   .L0552		;  if Ch1_Duration  <	15 then AUDC1  =  9  :	AUDV1  =  4  :	AUDF1  =  24
   6946  50bc
   6947  50bc		       a5 db		      LDA	Ch1_Duration
   6948  50be		       c9 0f		      CMP	#15
   6949  50c0		       b0 0c		      BCS	.skipL0552
   6950  50c2				   .condpart280
   6951  50c2		       a9 09		      LDA	#9
   6952  50c4		       85 16		      STA	AUDC1
   6953  50c6		       a9 04		      LDA	#4
   6954  50c8		       85 1a		      STA	AUDV1
   6955  50ca		       a9 18		      LDA	#24
   6956  50cc		       85 18		      STA	AUDF1
   6957  50ce				   .skipL0552
   6958  50ce				   .L0553		;  if Ch1_Duration  <	5 then AUDC1  =  9  :  AUDV1  =  1  :  AUDF1  =  16
   6959  50ce
   6960  50ce		       a5 db		      LDA	Ch1_Duration
   6961  50d0		       c9 05		      CMP	#5
   6962  50d2		       b0 0c		      BCS	.skipL0553
   6963  50d4				   .condpart281
   6964  50d4		       a9 09		      LDA	#9
   6965  50d6		       85 16		      STA	AUDC1
   6966  50d8		       a9 01		      LDA	#1
   6967  50da		       85 1a		      STA	AUDV1
   6968  50dc		       a9 10		      LDA	#16
   6969  50de		       85 18		      STA	AUDF1
   6970  50e0				   .skipL0553
   6971  50e0				   .
   6972  50e0							; 
   6973  50e0
   6974  50e0				   .L0554		;  goto __P0Exp_Skip_Ch_1
   6975  50e0
   6976  50e0		       4c e6 90 	      jmp	.__P0Exp_Skip_Ch_1
   6977  50e3
   6978  50e3				   .__P0Exp_Skip_Ch0_Sound_001
   6979  50e3							; __P0Exp_Skip_Ch0_Sound_001
   6980  50e3
   6981  50e3				   .L0555		;  goto __P0Exp_Skip_Ch_1
   6982  50e3
   6983  50e3		       4c e6 90 	      jmp	.__P0Exp_Skip_Ch_1
   6984  50e6
   6985  50e6				   .__P0Exp_Clear_Ch_1
   6986  50e6							; __P0Exp_Clear_Ch_1
   6987  50e6
   6988  50e6				   .
   6989  50e6							; 
   6990  50e6
   6991  50e6				   .__P0Exp_Skip_Ch_1
   6992  50e6							; __P0Exp_Skip_Ch_1
   6993  50e6
   6994  50e6				   .
   6995  50e6							; 
   6996  50e6
   6997  50e6				   .L0556		;  return
   6998  50e6
   6999  50e6		       ba		      tsx
   7000  50e7		       b5 02		      lda	2,x	; check return address
   7001  50e9		       49 90		      eor	#(>*)	; vs. current PCH
   7002  50eb		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   7003  50ed		       f0 03		      beq	*+5	; if equal, do normal return
   7004  50ef		       4c e0 df 	      JMP	BS_return
   7005  50f2		       60		      RTS
   7006  50f3				   .
   7007  50f3							; 
   7008  50f3
   7009  50f3				   .L0557		;  bank 6
   7010  50f3
   7011  50f3					      if	ECHO5
      3809 bytes of ROM space left in bank 5
   7012  50f3					      echo	"    ",[(start_bank5 - *)]d , "bytes of ROM space left in bank 5")
   7013  50f3					      endif
   7014  50f3		       00 01	   ECHO5      =	1
   7015  5fd4					      ORG	$5FF4-bscode_length
   7016  5fd4					      RORG	$9FF4-bscode_length
   7017  5fd4		       a2 ff	   start_bank5 ldx	#$ff
   7018  5fd6					      ifconst	FASTFETCH	; using DPC+
   7019  5fd6		       8e 58 10 	      stx	FASTFETCH
   7020  5fd9					      endif
   7021  5fd9		       9a		      txs
   7022  5fda				  -	      if	bankswitch == 64
   7023  5fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   7024  5fda					      else
   7025  5fda		       a9 18		      lda	#>(start-1)
   7026  5fdc					      endif
   7027  5fdc		       48		      pha
   7028  5fdd		       a9 e3		      lda	#<(start-1)
   7029  5fdf		       48		      pha
   7030  5fe0		       48		      pha
   7031  5fe1		       8a		      txa
   7032  5fe2		       48		      pha
   7033  5fe3		       ba		      tsx
   7034  5fe4					      if	bankswitch != 64
   7035  5fe4		       b5 04		      lda	4,x	; get high byte of return address
   7036  5fe6		       2a		      rol
   7037  5fe7		       2a		      rol
   7038  5fe8		       2a		      rol
   7039  5fe9		       2a		      rol
   7040  5fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   7041  5fec		       aa		      tax
   7042  5fed		       e8		      inx
   7043  5fee				  -	      else
   7044  5fee				  -	      lda	4,x	; get high byte of return address
   7045  5fee				  -	      tay
   7046  5fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   7047  5fee				  -	      sta	4,x
   7048  5fee				  -	      tya
   7049  5fee				  -	      lsr
   7050  5fee				  -	      lsr
   7051  5fee				  -	      lsr
   7052  5fee				  -	      lsr
   7053  5fee				  -	      tax
   7054  5fee				  -	      inx
   7055  5fee					      endif
   7056  5fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   7057  5ff1		       68		      pla
   7058  5ff2		       aa		      tax
   7059  5ff3		       68		      pla
   7060  5ff4		       60		      rts
   7061  5ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   7062  5ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   7063  5ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   7064  5ff5					      endif
   7065  5ffc					      ORG	$5FFC
   7066  5ffc					      RORG	$9FFC
   7067  5ffc		       d4 9f		      .word.w	(start_bank5 & $ffff)
   7068  5ffe		       d4 9f		      .word.w	(start_bank5 & $ffff)
   7069  6000					      ORG	$6000
   7070  6000					      RORG	$B000
   7071  6000					      repeat	129
   7072  6000		       00		      .byte.b	0
   7071  6000					      repend
   7072  6001		       00		      .byte.b	0
   7071  6001					      repend
   7072  6002		       00		      .byte.b	0
   7071  6002					      repend
   7072  6003		       00		      .byte.b	0
   7071  6003					      repend
   7072  6004		       00		      .byte.b	0
   7071  6004					      repend
   7072  6005		       00		      .byte.b	0
   7071  6005					      repend
   7072  6006		       00		      .byte.b	0
   7071  6006					      repend
   7072  6007		       00		      .byte.b	0
   7071  6007					      repend
   7072  6008		       00		      .byte.b	0
   7071  6008					      repend
   7072  6009		       00		      .byte.b	0
   7071  6009					      repend
   7072  600a		       00		      .byte.b	0
   7071  600a					      repend
   7072  600b		       00		      .byte.b	0
   7071  600b					      repend
   7072  600c		       00		      .byte.b	0
   7071  600c					      repend
   7072  600d		       00		      .byte.b	0
   7071  600d					      repend
   7072  600e		       00		      .byte.b	0
   7071  600e					      repend
   7072  600f		       00		      .byte.b	0
   7071  600f					      repend
   7072  6010		       00		      .byte.b	0
   7071  6010					      repend
   7072  6011		       00		      .byte.b	0
   7071  6011					      repend
   7072  6012		       00		      .byte.b	0
   7071  6012					      repend
   7072  6013		       00		      .byte.b	0
   7071  6013					      repend
   7072  6014		       00		      .byte.b	0
   7071  6014					      repend
   7072  6015		       00		      .byte.b	0
   7071  6015					      repend
   7072  6016		       00		      .byte.b	0
   7071  6016					      repend
   7072  6017		       00		      .byte.b	0
   7071  6017					      repend
   7072  6018		       00		      .byte.b	0
   7071  6018					      repend
   7072  6019		       00		      .byte.b	0
   7071  6019					      repend
   7072  601a		       00		      .byte.b	0
   7071  601a					      repend
   7072  601b		       00		      .byte.b	0
   7071  601b					      repend
   7072  601c		       00		      .byte.b	0
   7071  601c					      repend
   7072  601d		       00		      .byte.b	0
   7071  601d					      repend
   7072  601e		       00		      .byte.b	0
   7071  601e					      repend
   7072  601f		       00		      .byte.b	0
   7071  601f					      repend
   7072  6020		       00		      .byte.b	0
   7071  6020					      repend
   7072  6021		       00		      .byte.b	0
   7071  6021					      repend
   7072  6022		       00		      .byte.b	0
   7071  6022					      repend
   7072  6023		       00		      .byte.b	0
   7071  6023					      repend
   7072  6024		       00		      .byte.b	0
   7071  6024					      repend
   7072  6025		       00		      .byte.b	0
   7071  6025					      repend
   7072  6026		       00		      .byte.b	0
   7071  6026					      repend
   7072  6027		       00		      .byte.b	0
   7071  6027					      repend
   7072  6028		       00		      .byte.b	0
   7071  6028					      repend
   7072  6029		       00		      .byte.b	0
   7071  6029					      repend
   7072  602a		       00		      .byte.b	0
   7071  602a					      repend
   7072  602b		       00		      .byte.b	0
   7071  602b					      repend
   7072  602c		       00		      .byte.b	0
   7071  602c					      repend
   7072  602d		       00		      .byte.b	0
   7071  602d					      repend
   7072  602e		       00		      .byte.b	0
   7071  602e					      repend
   7072  602f		       00		      .byte.b	0
   7071  602f					      repend
   7072  6030		       00		      .byte.b	0
   7071  6030					      repend
   7072  6031		       00		      .byte.b	0
   7071  6031					      repend
   7072  6032		       00		      .byte.b	0
   7071  6032					      repend
   7072  6033		       00		      .byte.b	0
   7071  6033					      repend
   7072  6034		       00		      .byte.b	0
   7071  6034					      repend
   7072  6035		       00		      .byte.b	0
   7071  6035					      repend
   7072  6036		       00		      .byte.b	0
   7071  6036					      repend
   7072  6037		       00		      .byte.b	0
   7071  6037					      repend
   7072  6038		       00		      .byte.b	0
   7071  6038					      repend
   7072  6039		       00		      .byte.b	0
   7071  6039					      repend
   7072  603a		       00		      .byte.b	0
   7071  603a					      repend
   7072  603b		       00		      .byte.b	0
   7071  603b					      repend
   7072  603c		       00		      .byte.b	0
   7071  603c					      repend
   7072  603d		       00		      .byte.b	0
   7071  603d					      repend
   7072  603e		       00		      .byte.b	0
   7071  603e					      repend
   7072  603f		       00		      .byte.b	0
   7071  603f					      repend
   7072  6040		       00		      .byte.b	0
   7071  6040					      repend
   7072  6041		       00		      .byte.b	0
   7071  6041					      repend
   7072  6042		       00		      .byte.b	0
   7071  6042					      repend
   7072  6043		       00		      .byte.b	0
   7071  6043					      repend
   7072  6044		       00		      .byte.b	0
   7071  6044					      repend
   7072  6045		       00		      .byte.b	0
   7071  6045					      repend
   7072  6046		       00		      .byte.b	0
   7071  6046					      repend
   7072  6047		       00		      .byte.b	0
   7071  6047					      repend
   7072  6048		       00		      .byte.b	0
   7071  6048					      repend
   7072  6049		       00		      .byte.b	0
   7071  6049					      repend
   7072  604a		       00		      .byte.b	0
   7071  604a					      repend
   7072  604b		       00		      .byte.b	0
   7071  604b					      repend
   7072  604c		       00		      .byte.b	0
   7071  604c					      repend
   7072  604d		       00		      .byte.b	0
   7071  604d					      repend
   7072  604e		       00		      .byte.b	0
   7071  604e					      repend
   7072  604f		       00		      .byte.b	0
   7071  604f					      repend
   7072  6050		       00		      .byte.b	0
   7071  6050					      repend
   7072  6051		       00		      .byte.b	0
   7071  6051					      repend
   7072  6052		       00		      .byte.b	0
   7071  6052					      repend
   7072  6053		       00		      .byte.b	0
   7071  6053					      repend
   7072  6054		       00		      .byte.b	0
   7071  6054					      repend
   7072  6055		       00		      .byte.b	0
   7071  6055					      repend
   7072  6056		       00		      .byte.b	0
   7071  6056					      repend
   7072  6057		       00		      .byte.b	0
   7071  6057					      repend
   7072  6058		       00		      .byte.b	0
   7071  6058					      repend
   7072  6059		       00		      .byte.b	0
   7071  6059					      repend
   7072  605a		       00		      .byte.b	0
   7071  605a					      repend
   7072  605b		       00		      .byte.b	0
   7071  605b					      repend
   7072  605c		       00		      .byte.b	0
   7071  605c					      repend
   7072  605d		       00		      .byte.b	0
   7071  605d					      repend
   7072  605e		       00		      .byte.b	0
   7071  605e					      repend
   7072  605f		       00		      .byte.b	0
   7071  605f					      repend
   7072  6060		       00		      .byte.b	0
   7071  6060					      repend
   7072  6061		       00		      .byte.b	0
   7071  6061					      repend
   7072  6062		       00		      .byte.b	0
   7071  6062					      repend
   7072  6063		       00		      .byte.b	0
   7071  6063					      repend
   7072  6064		       00		      .byte.b	0
   7071  6064					      repend
   7072  6065		       00		      .byte.b	0
   7071  6065					      repend
   7072  6066		       00		      .byte.b	0
   7071  6066					      repend
   7072  6067		       00		      .byte.b	0
   7071  6067					      repend
   7072  6068		       00		      .byte.b	0
   7071  6068					      repend
   7072  6069		       00		      .byte.b	0
   7071  6069					      repend
   7072  606a		       00		      .byte.b	0
   7071  606a					      repend
   7072  606b		       00		      .byte.b	0
   7071  606b					      repend
   7072  606c		       00		      .byte.b	0
   7071  606c					      repend
   7072  606d		       00		      .byte.b	0
   7071  606d					      repend
   7072  606e		       00		      .byte.b	0
   7071  606e					      repend
   7072  606f		       00		      .byte.b	0
   7071  606f					      repend
   7072  6070		       00		      .byte.b	0
   7071  6070					      repend
   7072  6071		       00		      .byte.b	0
   7071  6071					      repend
   7072  6072		       00		      .byte.b	0
   7071  6072					      repend
   7072  6073		       00		      .byte.b	0
   7071  6073					      repend
   7072  6074		       00		      .byte.b	0
   7071  6074					      repend
   7072  6075		       00		      .byte.b	0
   7071  6075					      repend
   7072  6076		       00		      .byte.b	0
   7071  6076					      repend
   7072  6077		       00		      .byte.b	0
   7071  6077					      repend
   7072  6078		       00		      .byte.b	0
   7071  6078					      repend
   7072  6079		       00		      .byte.b	0
   7071  6079					      repend
   7072  607a		       00		      .byte.b	0
   7071  607a					      repend
   7072  607b		       00		      .byte.b	0
   7071  607b					      repend
   7072  607c		       00		      .byte.b	0
   7071  607c					      repend
   7072  607d		       00		      .byte.b	0
   7071  607d					      repend
   7072  607e		       00		      .byte.b	0
   7071  607e					      repend
   7072  607f		       00		      .byte.b	0
   7071  607f					      repend
   7072  6080		       00		      .byte.b	0
   7073  6081					      repend
   7074  6081				   .L0558		;  temp1 = temp1
   7075  6081
   7076  6081		       a5 cb		      LDA	temp1
   7077  6083		       85 cb		      STA	temp1
   7078  6085				   .
   7079  6085							; 
   7080  6085
   7081  6085				   .__Titlesceen
   7082  6085							; __Titlesceen
   7083  6085
   7084  6085				   .L0559		;  drop = 0
   7085  6085
   7086  6085		       a9 00		      LDA	#0
   7087  6087		       85 d1		      STA	drop
   7088  6089				   .L0560		;  asm
   7089  6089
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 4
      0  6089					      include	"titlescreen/asm/titlescreen.asm"
      1  6089
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 4
      0  6089					      include	"titlescreen/asm/layoutmacros.asm"
      1  6089
      2  6089							; the macro's used in the "titlescreen_layout.asm" file
      3  6089
      4  6089					      MAC	draw_96x2_1
      5  6089				   mk_96x2_1_on =	1
      6  6089					      jsr	draw_bmp_96x2_1
      7  6089					      ENDM
      8  6089
      9  6089					      MAC	draw_96x2_2
     10  6089				   mk_96x2_2_on =	1
     11  6089					      jsr	draw_bmp_96x2_2
     12  6089					      ENDM
     13  6089
     14  6089					      MAC	draw_96x2_3
     15  6089				   mk_96x2_3_on =	1
     16  6089					      jsr	draw_bmp_96x2_3
     17  6089					      ENDM
     18  6089
     19  6089					      MAC	draw_96x2_4
     20  6089				   mk_96x2_4_on =	1
     21  6089					      jsr	draw_bmp_96x2_4
     22  6089					      ENDM
     23  6089
     24  6089					      MAC	draw_96x2_5
     25  6089				   mk_96x2_5_on =	1
     26  6089					      jsr	draw_bmp_96x2_5
     27  6089					      ENDM
     28  6089
     29  6089					      MAC	draw_96x2_6
     30  6089				   mk_96x2_6_on =	1
     31  6089					      jsr	draw_bmp_96x2_6
     32  6089					      ENDM
     33  6089
     34  6089					      MAC	draw_96x2_7
     35  6089				   mk_96x2_7_on =	1
     36  6089					      jsr	draw_bmp_96x2_7
     37  6089					      ENDM
     38  6089
     39  6089					      MAC	draw_96x2_8
     40  6089				   mk_96x2_8_on =	1
     41  6089					      jsr	draw_bmp_96x2_8
     42  6089					      ENDM
     43  6089
     44  6089					      MAC	draw_48x1_1
     45  6089				   mk_48x1_X_on =	1
     46  6089				   mk_48x1_1_on =	1
     47  6089					      jsr	draw_bmp_48x1_1
     48  6089					      ENDM
     49  6089
     50  6089					      MAC	draw_48x1_2
     51  6089				   mk_48x1_X_on =	1
     52  6089				   mk_48x1_2_on =	1
     53  6089					      jsr	draw_bmp_48x1_2
     54  6089					      ENDM
     55  6089
     56  6089					      MAC	draw_48x1_3
     57  6089				   mk_48x1_X_on =	1
     58  6089				   mk_48x1_3_on =	1
     59  6089					      jsr	draw_bmp_48x1_3
     60  6089					      ENDM
     61  6089
     62  6089					      MAC	draw_48x1_4
     63  6089				   mk_48x1_X_on =	1
     64  6089				   mk_48x1_4_on =	1
     65  6089					      jsr	draw_bmp_48x1_4
     66  6089					      ENDM
     67  6089
     68  6089					      MAC	draw_48x1_5
     69  6089				   mk_48x1_X_on =	1
     70  6089				   mk_48x1_5_on =	1
     71  6089					      jsr	draw_bmp_48x1_5
     72  6089					      ENDM
     73  6089
     74  6089					      MAC	draw_48x1_6
     75  6089				   mk_48x1_X_on =	1
     76  6089				   mk_48x1_6_on =	1
     77  6089					      jsr	draw_bmp_48x1_6
     78  6089					      ENDM
     79  6089
     80  6089					      MAC	draw_48x1_7
     81  6089				   mk_48x1_X_on =	1
     82  6089				   mk_48x1_7_on =	1
     83  6089					      jsr	draw_bmp_48x1_7
     84  6089					      ENDM
     85  6089
     86  6089					      MAC	draw_48x1_8
     87  6089				   mk_48x1_X_on =	1
     88  6089				   mk_48x1_8_on =	1
     89  6089					      jsr	draw_bmp_48x1_8
     90  6089					      ENDM
     91  6089
     92  6089
     93  6089					      MAC	draw_48x2_1
     94  6089				   mk_48x2_X_on =	1
     95  6089				   mk_48x2_1_on =	1
     96  6089					      jsr	draw_bmp_48x2_1
     97  6089					      ENDM
     98  6089
     99  6089					      MAC	draw_48x2_2
    100  6089				   mk_48x2_X_on =	1
    101  6089				   mk_48x2_2_on =	1
    102  6089					      jsr	draw_bmp_48x2_2
    103  6089					      ENDM
    104  6089
    105  6089					      MAC	draw_48x2_3
    106  6089				   mk_48x2_X_on =	1
    107  6089				   mk_48x2_3_on =	1
    108  6089					      jsr	draw_bmp_48x2_3
    109  6089					      ENDM
    110  6089
    111  6089					      MAC	draw_48x2_4
    112  6089				   mk_48x2_X_on =	1
    113  6089				   mk_48x2_4_on =	1
    114  6089					      jsr	draw_bmp_48x2_4
    115  6089					      ENDM
    116  6089
    117  6089					      MAC	draw_48x2_5
    118  6089				   mk_48x2_X_on =	1
    119  6089				   mk_48x2_5_on =	1
    120  6089					      jsr	draw_bmp_48x2_5
    121  6089					      ENDM
    122  6089
    123  6089					      MAC	draw_48x2_6
    124  6089				   mk_48x2_X_on =	1
    125  6089				   mk_48x2_6_on =	1
    126  6089					      jsr	draw_bmp_48x2_6
    127  6089					      ENDM
    128  6089
    129  6089					      MAC	draw_48x2_7
    130  6089				   mk_48x2_X_on =	1
    131  6089				   mk_48x2_7_on =	1
    132  6089					      jsr	draw_bmp_48x2_7
    133  6089					      ENDM
    134  6089
    135  6089					      MAC	draw_48x2_8
    136  6089				   mk_48x2_X_on =	1
    137  6089				   mk_48x2_8_on =	1
    138  6089					      jsr	draw_bmp_48x2_8
    139  6089					      ENDM
    140  6089
    141  6089					      MAC	draw_player
    142  6089				   mk_player_on =	1
    143  6089					      jsr	draw_player_display
    144  6089					      ENDM
    145  6089
    146  6089					      MAC	draw_score
    147  6089				   mk_score_on =	1
    148  6089				   mk_48x1_X_on =	1
    149  6089					      jsr	draw_score_display
    150  6089					      ENDM
    151  6089
    152  6089					      MAC	draw_gameselect
    153  6089				   mk_gameselect_on =	1
    154  6089				   mk_48x1_X_on =	1
    155  6089					      jsr	draw_gameselect_display
    156  6089					      ENDM
    157  6089
    158  6089					      MAC	draw_space
    159  6089					      ldy	#{1}
    160  6089				   .loop
    161  6089					      sta	WSYNC
    162  6089					      dey
    163  6089					      bne	.loop
    164  6089					      ENDM
    165  6089
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/asm/dpcfix.asm LEVEL 3 PASS 4
      0  6089					      include	"titlescreen/asm/dpcfix.asm"
      1  6089							; reassign variables that DPC+ doesn't have
      2  6089
      3  6089				  -	      ifnconst	aux2
      4  6089				  -aux2       =	player2x
      5  6089					      endif
      6  6089				  -	      ifnconst	aux4
      7  6089				  -aux4       =	player4x
      8  6089					      endif
      9  6089				  -	      ifnconst	aux5
     10  6089				  -aux5       =	player5x
     11  6089					      endif
     12  6089				  -	      ifnconst	aux6
     13  6089				  -aux6       =	player6x
     14  6089					      endif
     15  6089
     16  6089				  -	      ifnconst	player0pointer
     17  6089				  -player0pointer =	player2y
     18  6089					      endif
     19  6089				  -	      ifnconst	player1pointer
     20  6089				  -player1pointer =	player2height	; to player3height
     21  6089					      endif
     22  6089				  -	      ifnconst	player1color
     23  6089				  -player1color =	player4height	; to player5height
     24  6089					      endif
     25  6089				  -	      ifnconst	scorepointers
     26  6089				  -scorepointers =	player6height	; to NUSIZ8
     27  6089					      endif
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 4
      0  6089					      include	"titlescreen/titlescreen_layout.asm"
      1  6089
      2  6089							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  6089							; in the order they were listed.
      4  6089							;
      5  6089							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  6089							; it won't use any rom space.
      7  6089
      8  6089					      MAC	titlescreenlayout
      9  6089					      draw_96x2_1
     10  6089							; draw_96x2_2
     11  6089							; draw_96x2_3
     12  6089							; draw_48x1_1
     13  6089							; draw_48x1_2
     14  6089							; draw_48x1_3
     15  6089							; draw_48x2_1
     16  6089							; draw_48x2_2
     17  6089							; draw_48x2_3
     18  6089							; draw_player
     19  6089							; draw_gameselect
     20  6089							; draw_space 2
     21  6089							; draw_score
     22  6089					      ENDM
     23  6089
     24  6089							; minikernel choices are:
     25  6089							;
     26  6089							; draw_48x1_1, draw_48x1_2, draw_48x1_3
     27  6089							;	The first, second, and third 48-wide single-line bitmap minikernels
     28  6089							;
     29  6089							; draw_48x2_1, draw_48x2_2, draw_48x2_3
     30  6089							;	The first, second, and third 48-wide double-line bitmap minikernels
     31  6089							;
     32  6089							; draw_96x2_1, draw_96x2_2, draw_96x2_3
     33  6089							;	The first, second, and third 96-wide double-line bitmap minikernels
     34  6089							;
     35  6089							; draw_gameselect
     36  6089							;	The game selection display minikernel
     37  6089							;
     38  6089							; draw_score
     39  6089							;	A minikernel that draws the score
     40  6089							;
     41  6089							; draw_space 10
     42  6089							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      5  6089
      6  6089				   .titledrawscreen
      7  6089				   title_eat_overscan
      8  6089							;bB runs in overscan. Wait for the overscan to run out...
      9  6089		       18		      clc
     10  608a		       ad 84 02 	      lda	INTIM
     11  608d		       30 fa		      bmi	title_eat_overscan
     12  608f		       4c 92 b0 	      jmp	title_do_vertical_sync
     13  6092
     14  6092				   title_do_vertical_sync
     15  6092		       a9 02		      lda	#2
     16  6094		       85 02		      sta	WSYNC	;one line with VSYNC
     17  6096		       85 00		      sta	VSYNC	;enable VSYNC
     18  6098		       85 02		      sta	WSYNC	;one line with VSYNC
     19  609a		       85 02		      sta	WSYNC	;one line with VSYNC
     20  609c		       a9 00		      lda	#0
     21  609e		       85 02		      sta	WSYNC	;one line with VSYNC
     22  60a0		       85 00		      sta	VSYNC	;turn off VSYNC
     23  60a2
     24  60a2							;lda #42+128
     25  60a2				  -	      ifnconst	vblank_time
     26  60a2				  -	      lda	#42+128
     27  60a2					      else
     28  60a2		       a9 ab		      lda	#vblank_time+128
     29  60a4					      endif
     30  60a4
     31  60a4		       8d 96 02 	      sta	TIM64T
     32  60a7
     33  60a7		       00 82	   titleframe =	missile0x
     34  60a7		       e6 82		      inc	titleframe	; increment the frame counter
     35  60a9
     36  60a9				  -	      ifconst	.title_vblank
     37  60a9				  -	      jsr	.title_vblank
     38  60a9					      endif
     39  60a9
     40  60a9				   title_vblank_loop
     41  60a9		       ad 84 02 	      lda	INTIM
     42  60ac		       30 fb		      bmi	title_vblank_loop
     43  60ae		       a9 00		      lda	#0
     44  60b0		       85 02		      sta	WSYNC
     45  60b2		       85 01		      sta	VBLANK
     46  60b4		       85 1d		      sta	ENAM0
     47  60b6		       85 1f		      sta	ENABL
     48  60b8
     49  60b8				   title_playfield
     50  60b8
     51  60b8							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     52  60b8
     53  60b8		       a9 e6		      lda	#230
     54  60ba		       8d 96 02 	      sta	TIM64T
     55  60bd
     56  60bd		       a9 01		      lda	#1
     57  60bf		       85 0a		      sta	CTRLPF
     58  60c1		       18		      clc
     59  60c2
     60  60c2		       a9 00		      lda	#0
     61  60c4		       85 0b		      sta	REFP0
     62  60c6		       85 0c		      sta	REFP1
     63  60c8		       85 02		      sta	WSYNC
     64  60ca		       ad fd b0 	      lda	titlescreencolor
     65  60cd		       85 09		      sta	COLUBK
     66  60cf
      0  60cf					      titlescreenlayout
      0  60cf					      draw_96x2_1
      1  60cf		       00 01	   mk_96x2_1_on =	1
      2  60cf		       20 fe b0 	      jsr	draw_bmp_96x2_1
      2  60d2
      3  60d2
      4  60d2
      5  60d2
      6  60d2
      7  60d2
      8  60d2
      9  60d2
     10  60d2
     11  60d2
     12  60d2
     13  60d2
     68  60d2
     69  60d2		       4c 71 b2 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     70  60d5
------- FILE titlescreen/asm/position48.asm LEVEL 3 PASS 4
      0  60d5					      include	"titlescreen/asm/position48.asm"
      1  60d5
      2  60d5				   position48
      3  60d5
      4  60d5							;postion P0 and P1
      5  60d5
      6  60d5		       85 02		      sta	WSYNC
      7  60d7
      8  60d7		       a9 90		      lda	#$90	;2
      9  60d9		       85 20		      sta	HMP0	;3
     10  60db		       a9 a0		      lda	#$A0	;2
     11  60dd		       85 21		      sta	HMP1	;3
     12  60df
     13  60df		       e6 cb		      inc	temp1
     14  60e1		       c6 cb		      dec	temp1
     15  60e3		       e6 cb		      inc	temp1
     16  60e5		       c6 cb		      dec	temp1
     17  60e7		       e6 cb		      inc	temp1
      0  60e9					      sleep	2
      1  60e9				   .CYCLES    SET	2
      2  60e9
      3  60e9				  -	      IF	.CYCLES < 2
      4  60e9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  60e9				  -	      ERR
      6  60e9					      ENDIF
      7  60e9
      8  60e9				  -	      IF	.CYCLES & 1
      9  60e9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  60e9				  -	      nop	0
     11  60e9				  -	      ELSE
     12  60e9				  -	      bit	VSYNC
     13  60e9				  -	      ENDIF
     14  60e9				  -.CYCLES    SET	.CYCLES - 3
     15  60e9					      ENDIF
     16  60e9
     17  60e9					      REPEAT	.CYCLES / 2
     18  60e9		       ea		      nop
     19  60ea					      REPEND
     19  60ea		       85 10		      sta	RESP0	;  +3
     20  60ec		       85 11		      sta	RESP1	;  +3
     21  60ee		       c6 cb		      dec	temp1	;  +5
     22  60f0		       e6 cb		      inc	temp1	;  +5
     23  60f2		       c6 cb		      dec	temp1	;  +5
     24  60f4		       e6 cb		      inc	temp1	;  +5
     25  60f6		       c6 cb		      dec	temp1	;  +5
      0  60f8					      sleep	3
      1  60f8				   .CYCLES    SET	3
      2  60f8
      3  60f8				  -	      IF	.CYCLES < 2
      4  60f8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  60f8				  -	      ERR
      6  60f8					      ENDIF
      7  60f8
      8  60f8					      IF	.CYCLES & 1
      9  60f8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  60f8		       04 00		      nop	0
     11  60fa				  -	      ELSE
     12  60fa				  -	      bit	VSYNC
     13  60fa					      ENDIF
     14  60fa				   .CYCLES    SET	.CYCLES - 3
     15  60fa					      ENDIF
     16  60fa
     17  60fa				  -	      REPEAT	.CYCLES / 2
     18  60fa				  -	      nop
     19  60fa					      REPEND
     27  60fa		       85 2a		      sta	HMOVE	; +76
     28  60fc		       60		      RTS
     29  60fd
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 4
      0  60fd					      include	"titlescreen/titlescreen_color.asm"
      1  60fd							; This is where the titlescreen background color gets set.
      2  60fd							; You can also do a "dim titlescreencolor=[letter]" in bB
      3  60fd							; if you want to change the color on the fly.
      4  60fd
      5  60fd				  -	      ifnconst	titlescreencolor
      6  60fd				  -titlescreencolor
      7  60fd					      endif
      8  60fd		       00		      .byte.b	$00
      9  60fe
------- FILE titlescreen/asm/titlescreen.asm
     73  60fe
     74  60fe				  -	      ifconst	mk_48x1_1_on
     75  60fe				  -	      include	"titlescreen/asm/48x1_1_kernel.asm"
     76  60fe					      endif		;mk_48x1_1_on
     77  60fe
     78  60fe				  -	      ifconst	mk_48x1_2_on
     79  60fe				  -	      include	"titlescreen/asm/48x1_2_kernel.asm"
     80  60fe					      endif		;mk_48x1_2_on
     81  60fe
     82  60fe				  -	      ifconst	mk_48x1_3_on
     83  60fe				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  60fe					      endif		;mk_48x1_3_on
     85  60fe
     86  60fe				  -	      ifconst	mk_48x1_4_on
     87  60fe				  -	      include	"titlescreen/asm/48x1_4_kernel.asm"
     88  60fe					      endif		;mk_48x1_4_on
     89  60fe
     90  60fe				  -	      ifconst	mk_48x1_5_on
     91  60fe				  -	      include	"titlescreen/asm/48x1_5_kernel.asm"
     92  60fe					      endif		;mk_48x1_5_on
     93  60fe
     94  60fe				  -	      ifconst	mk_48x1_6_on
     95  60fe				  -	      include	"titlescreen/asm/48x1_6_kernel.asm"
     96  60fe					      endif		;mk_48x1_6_on
     97  60fe
     98  60fe				  -	      ifconst	mk_48x1_7_on
     99  60fe				  -	      include	"titlescreen/asm/48x1_7_kernel.asm"
    100  60fe					      endif		;mk_48x1_7_on
    101  60fe
    102  60fe				  -	      ifconst	mk_48x1_8_on
    103  60fe				  -	      include	"titlescreen/asm/48x1_8_kernel.asm"
    104  60fe					      endif		;mk_48x1_8_on
    105  60fe
    106  60fe				  -	      ifconst	mk_48x2_1_on
    107  60fe				  -	      include	"titlescreen/asm/48x2_1_kernel.asm"
    108  60fe					      endif		;mk_48x2_1_on
    109  60fe
    110  60fe				  -	      ifconst	mk_48x2_2_on
    111  60fe				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
    112  60fe					      endif		;mk_48x2_2_on
    113  60fe
    114  60fe				  -	      ifconst	mk_48x2_3_on
    115  60fe				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
    116  60fe					      endif		;mk_48x2_3_on
    117  60fe
    118  60fe				  -	      ifconst	mk_48x2_4_on
    119  60fe				  -	      include	"titlescreen/asm/48x2_4_kernel.asm"
    120  60fe					      endif		;mk_48x2_4_on
    121  60fe
    122  60fe				  -	      ifconst	mk_48x2_5_on
    123  60fe				  -	      include	"titlescreen/asm/48x2_5_kernel.asm"
    124  60fe					      endif		;mk_48x2_5_on
    125  60fe
    126  60fe				  -	      ifconst	mk_48x2_6_on
    127  60fe				  -	      include	"titlescreen/asm/48x2_6_kernel.asm"
    128  60fe					      endif		;mk_48x2_6_on
    129  60fe
    130  60fe				  -	      ifconst	mk_48x2_7_on
    131  60fe				  -	      include	"titlescreen/asm/48x2_7_kernel.asm"
    132  60fe					      endif		;mk_48x2_7_on
    133  60fe
    134  60fe				  -	      ifconst	mk_48x2_8_on
    135  60fe				  -	      include	"titlescreen/asm/48x2_8_kernel.asm"
    136  60fe					      endif		;mk_48x2_8_on
    137  60fe
    138  60fe				  -	      ifconst	mk_48x1_X_on
    139  60fe				  -	      include	"titlescreen/asm/48x1_X_kernel.asm"
    140  60fe					      endif		;mk_48x1_X_on
    141  60fe
    142  60fe				  -	      ifconst	mk_48x2_X_on
    143  60fe				  -	      include	"titlescreen/asm/48x2_X_kernel.asm"
    144  60fe					      endif		;mk_48x2_X_on
    145  60fe
    146  60fe
    147  60fe					      ifconst	mk_96x2_1_on
------- FILE titlescreen/asm/96x2_1_kernel.asm LEVEL 3 PASS 4
      0  60fe					      include	"titlescreen/asm/96x2_1_kernel.asm"
      1  60fe				   draw_bmp_96x2_1
      2  60fe
      3  60fe				  -	      ifconst	bmp_96x2_1_index
      4  60fe				  -	      lda	#(bmp_96x2_1_height-1)
      5  60fe				  -	      sec
      6  60fe				  -	      sbc	bmp_96x2_1_index
      7  60fe				  -	      tay
      8  60fe				  -	      sbc	#bmp_96x2_1_window
      9  60fe				  -	      sta	temp1
     10  60fe					      else
     11  60fe		       a0 54		      ldy	#(bmp_96x2_1_window-1)
     12  6100		       a9 ff		      lda	#255
     13  6102		       85 cb		      sta	temp1
     14  6104					      endif
     15  6104
     16  6104		       a9 03		      lda	#3
     17  6106		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  6108		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  610a		       a9 00		      lda	#0
     20  610c
     21  610c		       b9 96 b2 	      lda	bmp_96x2_1_colors,y	;4
     22  610f				  -	      ifconst	bmp_96x2_1_fade
     23  610f				  -	      and	bmp_96x2_1_fade
     24  610f					      endif
     25  610f		       85 06		      sta	COLUP0	;3
     26  6111		       85 07		      sta	COLUP1	;3
     27  6113		       85 2b		      sta	HMCLR	;3
     28  6115
     29  6115		       a5 82		      lda	titleframe
     30  6117		       29 01		      and	#1
     31  6119		       f0 03		      beq	jmp_pf96x2_1_frame0
     32  611b		       4c c5 b1 	      jmp	pf96x2_1_frame1
     33  611e				   jmp_pf96x2_1_frame0
     34  611e		       4c 21 b1 	      jmp	pf96x2_1_frame0
     35  6121
     36  6121				   pf96x2_1_frame0
     37  6121							;postion P0 and P1
     38  6121		       85 02		      sta	WSYNC
     39  6123		       a9 e0		      lda	#%11100000
     40  6125		       85 20		      sta	HMP0
     41  6127		       a9 10		      lda	#%00010000
     42  6129		       85 21		      sta	HMP1
     43  612b		       85 02		      sta	WSYNC
      0  612d					      sleep	28
      1  612d				   .CYCLES    SET	28
      2  612d
      3  612d				  -	      IF	.CYCLES < 2
      4  612d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  612d				  -	      ERR
      6  612d					      ENDIF
      7  612d
      8  612d				  -	      IF	.CYCLES & 1
      9  612d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  612d				  -	      nop	0
     11  612d				  -	      ELSE
     12  612d				  -	      bit	VSYNC
     13  612d				  -	      ENDIF
     14  612d				  -.CYCLES    SET	.CYCLES - 3
     15  612d					      ENDIF
     16  612d
     17  612d					      REPEAT	.CYCLES / 2
     18  612d		       ea		      nop
     17  612d					      REPEND
     18  612e		       ea		      nop
     17  612e					      REPEND
     18  612f		       ea		      nop
     17  612f					      REPEND
     18  6130		       ea		      nop
     17  6130					      REPEND
     18  6131		       ea		      nop
     17  6131					      REPEND
     18  6132		       ea		      nop
     17  6132					      REPEND
     18  6133		       ea		      nop
     17  6133					      REPEND
     18  6134		       ea		      nop
     17  6134					      REPEND
     18  6135		       ea		      nop
     17  6135					      REPEND
     18  6136		       ea		      nop
     17  6136					      REPEND
     18  6137		       ea		      nop
     17  6137					      REPEND
     18  6138		       ea		      nop
     17  6138					      REPEND
     18  6139		       ea		      nop
     17  6139					      REPEND
     18  613a		       ea		      nop
     19  613b					      REPEND
     45  613b		       85 10		      sta	RESP0
      0  613d					      sleep	14
      1  613d				   .CYCLES    SET	14
      2  613d
      3  613d				  -	      IF	.CYCLES < 2
      4  613d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  613d				  -	      ERR
      6  613d					      ENDIF
      7  613d
      8  613d				  -	      IF	.CYCLES & 1
      9  613d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  613d				  -	      nop	0
     11  613d				  -	      ELSE
     12  613d				  -	      bit	VSYNC
     13  613d				  -	      ENDIF
     14  613d				  -.CYCLES    SET	.CYCLES - 3
     15  613d					      ENDIF
     16  613d
     17  613d					      REPEAT	.CYCLES / 2
     18  613d		       ea		      nop
     17  613d					      REPEND
     18  613e		       ea		      nop
     17  613e					      REPEND
     18  613f		       ea		      nop
     17  613f					      REPEND
     18  6140		       ea		      nop
     17  6140					      REPEND
     18  6141		       ea		      nop
     17  6141					      REPEND
     18  6142		       ea		      nop
     17  6142					      REPEND
     18  6143		       ea		      nop
     19  6144					      REPEND
     47  6144		       85 11		      sta	RESP1
     48  6146		       85 02		      sta	WSYNC
     49  6148		       85 2a		      sta	HMOVE
     50  614a
     51  614a		       85 02		      sta	WSYNC
     52  614c		       85 2b		      sta	HMCLR
     53  614e		       85 02		      sta	WSYNC
     54  6150
      0  6150					      sleep	4
      1  6150				   .CYCLES    SET	4
      2  6150
      3  6150				  -	      IF	.CYCLES < 2
      4  6150				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6150				  -	      ERR
      6  6150					      ENDIF
      7  6150
      8  6150				  -	      IF	.CYCLES & 1
      9  6150				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6150				  -	      nop	0
     11  6150				  -	      ELSE
     12  6150				  -	      bit	VSYNC
     13  6150				  -	      ENDIF
     14  6150				  -.CYCLES    SET	.CYCLES - 3
     15  6150					      ENDIF
     16  6150
     17  6150					      REPEAT	.CYCLES / 2
     18  6150		       ea		      nop
     17  6150					      REPEND
     18  6151		       ea		      nop
     19  6152					      REPEND
     56  6152		       4c 55 b1 	      jmp	pfline_96x2_1_frame0
     57  6155							;align so our branch doesn't unexpectedly cross a page...
     58  6155				  -	      if	>. != >[.+$70]
     59  6155				  -	      align	256
     60  6155					      endif
     61  6155
     62  6155				   pfline_96x2_1_frame0
     63  6155		       a9 80		      lda	#$80	;2
     64  6157		       85 20		      sta	HMP0	;3
     65  6159		       85 21		      sta	HMP1	;3
     66  615b
     67  615b		       b9 00 b5 	      lda	bmp_96x2_1_06,y	;4
     68  615e		       85 1c		      sta	GRP1	;3
     69  6160
     70  6160		       b9 00 b3 	      lda	bmp_96x2_1_00,y
     71  6163		       85 1b		      sta	GRP0
     72  6165		       b9 aa b3 	      lda	bmp_96x2_1_02,y
     73  6168		       85 1b		      sta	GRP0
     74  616a		       b9 55 b4 	      lda	bmp_96x2_1_04,y
     75  616d		       85 1b		      sta	GRP0
     76  616f
      0  616f					      sleep	2
      1  616f				   .CYCLES    SET	2
      2  616f
      3  616f				  -	      IF	.CYCLES < 2
      4  616f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  616f				  -	      ERR
      6  616f					      ENDIF
      7  616f
      8  616f				  -	      IF	.CYCLES & 1
      9  616f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  616f				  -	      nop	0
     11  616f				  -	      ELSE
     12  616f				  -	      bit	VSYNC
     13  616f				  -	      ENDIF
     14  616f				  -.CYCLES    SET	.CYCLES - 3
     15  616f					      ENDIF
     16  616f
     17  616f					      REPEAT	.CYCLES / 2
     18  616f		       ea		      nop
     19  6170					      REPEND
     78  6170
     79  6170		       b9 aa b5 	      lda	bmp_96x2_1_08,y
     80  6173		       85 1c		      sta	GRP1
     81  6175		       b9 55 b6 	      lda	bmp_96x2_1_10,y
     82  6178		       85 1c		      sta	GRP1
     83  617a
     84  617a		       b9 55 b3 	      lda	bmp_96x2_1_01,y
     85  617d		       85 1b		      sta	GRP0
     86  617f
      0  617f					      sleep	8
      1  617f				   .CYCLES    SET	8
      2  617f
      3  617f				  -	      IF	.CYCLES < 2
      4  617f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  617f				  -	      ERR
      6  617f					      ENDIF
      7  617f
      8  617f				  -	      IF	.CYCLES & 1
      9  617f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  617f				  -	      nop	0
     11  617f				  -	      ELSE
     12  617f				  -	      bit	VSYNC
     13  617f				  -	      ENDIF
     14  617f				  -.CYCLES    SET	.CYCLES - 3
     15  617f					      ENDIF
     16  617f
     17  617f					      REPEAT	.CYCLES / 2
     18  617f		       ea		      nop
     17  617f					      REPEND
     18  6180		       ea		      nop
     17  6180					      REPEND
     18  6181		       ea		      nop
     17  6181					      REPEND
     18  6182		       ea		      nop
     19  6183					      REPEND
     88  6183
     89  6183							;sta WSYNC	;=0
     90  6183		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  6185
     92  6185		       b9 95 b2 	      lda	bmp_96x2_1_colors-1,y	;4 - get the title color early and store it for later
     93  6188				  -	      ifconst	bmp_96x2_1_fade
     94  6188				  -	      and	bmp_96x2_1_fade
     95  6188					      else
      0  6188					      sleep	3
      1  6188				   .CYCLES    SET	3
      2  6188
      3  6188				  -	      IF	.CYCLES < 2
      4  6188				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6188				  -	      ERR
      6  6188					      ENDIF
      7  6188
      8  6188					      IF	.CYCLES & 1
      9  6188					      IFNCONST	NO_ILLEGAL_OPCODES
     10  6188		       04 00		      nop	0
     11  618a				  -	      ELSE
     12  618a				  -	      bit	VSYNC
     13  618a					      ENDIF
     14  618a				   .CYCLES    SET	.CYCLES - 3
     15  618a					      ENDIF
     16  618a
     17  618a				  -	      REPEAT	.CYCLES / 2
     18  618a				  -	      nop
     19  618a					      REPEND
     97  618a					      endif
     98  618a		       aa		      tax
     99  618b
    100  618b		       a9 00		      lda	#0	;2
    101  618d		       85 20		      sta	HMP0	;3
    102  618f		       85 21		      sta	HMP1	;3
    103  6191
      0  6191					      sleep	7
      1  6191				   .CYCLES    SET	7
      2  6191
      3  6191				  -	      IF	.CYCLES < 2
      4  6191				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6191				  -	      ERR
      6  6191					      ENDIF
      7  6191
      8  6191					      IF	.CYCLES & 1
      9  6191					      IFNCONST	NO_ILLEGAL_OPCODES
     10  6191		       04 00		      nop	0
     11  6193				  -	      ELSE
     12  6193				  -	      bit	VSYNC
     13  6193					      ENDIF
     14  6193				   .CYCLES    SET	.CYCLES - 3
     15  6193					      ENDIF
     16  6193
     17  6193					      REPEAT	.CYCLES / 2
     18  6193		       ea		      nop
     17  6193					      REPEND
     18  6194		       ea		      nop
     19  6195					      REPEND
    105  6195
    106  6195		       b9 55 b5 	      lda	bmp_96x2_1_07,y
    107  6198		       85 1c		      sta	GRP1
    108  619a
    109  619a		       b9 00 b4 	      lda	bmp_96x2_1_03,y	;5
    110  619d		       85 1b		      sta	GRP0	;3 =  8
    111  619f		       b9 aa b4 	      lda	bmp_96x2_1_05,y	;5
    112  61a2		       85 1b		      sta	GRP0	;3 =  8
    113  61a4
      0  61a4					      sleep	2
      1  61a4				   .CYCLES    SET	2
      2  61a4
      3  61a4				  -	      IF	.CYCLES < 2
      4  61a4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  61a4				  -	      ERR
      6  61a4					      ENDIF
      7  61a4
      8  61a4				  -	      IF	.CYCLES & 1
      9  61a4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  61a4				  -	      nop	0
     11  61a4				  -	      ELSE
     12  61a4				  -	      bit	VSYNC
     13  61a4				  -	      ENDIF
     14  61a4				  -.CYCLES    SET	.CYCLES - 3
     15  61a4					      ENDIF
     16  61a4
     17  61a4					      REPEAT	.CYCLES / 2
     18  61a4		       ea		      nop
     19  61a5					      REPEND
    115  61a5
    116  61a5		       b9 00 b6 	      lda	bmp_96x2_1_09,y	;5
    117  61a8		       85 1c		      sta	GRP1	;3 =  8
    118  61aa		       b9 aa b6 	      lda	bmp_96x2_1_11,y	;5
    119  61ad		       85 1c		      sta	GRP1	;3 =  8
    120  61af
      0  61af					      sleep	2
      1  61af				   .CYCLES    SET	2
      2  61af
      3  61af				  -	      IF	.CYCLES < 2
      4  61af				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  61af				  -	      ERR
      6  61af					      ENDIF
      7  61af
      8  61af				  -	      IF	.CYCLES & 1
      9  61af				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  61af				  -	      nop	0
     11  61af				  -	      ELSE
     12  61af				  -	      bit	VSYNC
     13  61af				  -	      ENDIF
     14  61af				  -.CYCLES    SET	.CYCLES - 3
     15  61af					      ENDIF
     16  61af
     17  61af					      REPEAT	.CYCLES / 2
     18  61af		       ea		      nop
     19  61b0					      REPEND
    122  61b0		       86 07		      stx	COLUP1
    123  61b2		       86 06		      stx	COLUP0
    124  61b4
    125  61b4		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  61b6					      sleep	2
      1  61b6				   .CYCLES    SET	2
      2  61b6
      3  61b6				  -	      IF	.CYCLES < 2
      4  61b6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  61b6				  -	      ERR
      6  61b6					      ENDIF
      7  61b6
      8  61b6				  -	      IF	.CYCLES & 1
      9  61b6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  61b6				  -	      nop	0
     11  61b6				  -	      ELSE
     12  61b6				  -	      bit	VSYNC
     13  61b6				  -	      ENDIF
     14  61b6				  -.CYCLES    SET	.CYCLES - 3
     15  61b6					      ENDIF
     16  61b6
     17  61b6					      REPEAT	.CYCLES / 2
     18  61b6		       ea		      nop
     19  61b7					      REPEND
    127  61b7		       88		      dey
    128  61b8
    129  61b8		       c4 cb		      cpy	temp1	;3
    130  61ba		       d0 99		      bne	pfline_96x2_1_frame0	;2/3
    131  61bc
    132  61bc				   pf96x2_1_0codeend
    133  61bc							;echo "critical code #1 in 96x2_1 is ",(pf96x2_1_0codeend-pfline_96x2_1_frame0), " bytes long."
    134  61bc
    135  61bc		       a9 00		      lda	#0
    136  61be		       85 1b		      sta	GRP0
    137  61c0		       85 1c		      sta	GRP1
    138  61c2		       4c 6e b2 	      jmp	pfdone_96x2_1
    139  61c5
    140  61c5
    141  61c5				   pf96x2_1_frame1
    142  61c5
    143  61c5							;postion P0 and P1
    144  61c5		       85 02		      sta	WSYNC
    145  61c7		       a9 20		      lda	#%00100000
    146  61c9		       85 20		      sta	HMP0
    147  61cb		       a9 00		      lda	#0
    148  61cd		       a9 f0		      lda	#%11110000
    149  61cf		       85 21		      sta	HMP1
    150  61d1		       85 02		      sta	WSYNC
      0  61d3					      sleep	32
      1  61d3				   .CYCLES    SET	32
      2  61d3
      3  61d3				  -	      IF	.CYCLES < 2
      4  61d3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  61d3				  -	      ERR
      6  61d3					      ENDIF
      7  61d3
      8  61d3				  -	      IF	.CYCLES & 1
      9  61d3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  61d3				  -	      nop	0
     11  61d3				  -	      ELSE
     12  61d3				  -	      bit	VSYNC
     13  61d3				  -	      ENDIF
     14  61d3				  -.CYCLES    SET	.CYCLES - 3
     15  61d3					      ENDIF
     16  61d3
     17  61d3					      REPEAT	.CYCLES / 2
     18  61d3		       ea		      nop
     17  61d3					      REPEND
     18  61d4		       ea		      nop
     17  61d4					      REPEND
     18  61d5		       ea		      nop
     17  61d5					      REPEND
     18  61d6		       ea		      nop
     17  61d6					      REPEND
     18  61d7		       ea		      nop
     17  61d7					      REPEND
     18  61d8		       ea		      nop
     17  61d8					      REPEND
     18  61d9		       ea		      nop
     17  61d9					      REPEND
     18  61da		       ea		      nop
     17  61da					      REPEND
     18  61db		       ea		      nop
     17  61db					      REPEND
     18  61dc		       ea		      nop
     17  61dc					      REPEND
     18  61dd		       ea		      nop
     17  61dd					      REPEND
     18  61de		       ea		      nop
     17  61de					      REPEND
     18  61df		       ea		      nop
     17  61df					      REPEND
     18  61e0		       ea		      nop
     17  61e0					      REPEND
     18  61e1		       ea		      nop
     17  61e1					      REPEND
     18  61e2		       ea		      nop
     19  61e3					      REPEND
    152  61e3		       85 10		      sta	RESP0
      0  61e5					      sleep	12
      1  61e5				   .CYCLES    SET	12
      2  61e5
      3  61e5				  -	      IF	.CYCLES < 2
      4  61e5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  61e5				  -	      ERR
      6  61e5					      ENDIF
      7  61e5
      8  61e5				  -	      IF	.CYCLES & 1
      9  61e5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  61e5				  -	      nop	0
     11  61e5				  -	      ELSE
     12  61e5				  -	      bit	VSYNC
     13  61e5				  -	      ENDIF
     14  61e5				  -.CYCLES    SET	.CYCLES - 3
     15  61e5					      ENDIF
     16  61e5
     17  61e5					      REPEAT	.CYCLES / 2
     18  61e5		       ea		      nop
     17  61e5					      REPEND
     18  61e6		       ea		      nop
     17  61e6					      REPEND
     18  61e7		       ea		      nop
     17  61e7					      REPEND
     18  61e8		       ea		      nop
     17  61e8					      REPEND
     18  61e9		       ea		      nop
     17  61e9					      REPEND
     18  61ea		       ea		      nop
     19  61eb					      REPEND
    154  61eb		       85 11		      sta	RESP1
    155  61ed		       85 02		      sta	WSYNC
    156  61ef		       85 2a		      sta	HMOVE
    157  61f1
    158  61f1		       85 02		      sta	WSYNC
    159  61f3		       85 2b		      sta	HMCLR
    160  61f5
    161  61f5
    162  61f5
    163  61f5		       85 02		      sta	WSYNC
      0  61f7					      sleep	3
      1  61f7				   .CYCLES    SET	3
      2  61f7
      3  61f7				  -	      IF	.CYCLES < 2
      4  61f7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  61f7				  -	      ERR
      6  61f7					      ENDIF
      7  61f7
      8  61f7					      IF	.CYCLES & 1
      9  61f7					      IFNCONST	NO_ILLEGAL_OPCODES
     10  61f7		       04 00		      nop	0
     11  61f9				  -	      ELSE
     12  61f9				  -	      bit	VSYNC
     13  61f9					      ENDIF
     14  61f9				   .CYCLES    SET	.CYCLES - 3
     15  61f9					      ENDIF
     16  61f9
     17  61f9				  -	      REPEAT	.CYCLES / 2
     18  61f9				  -	      nop
     19  61f9					      REPEND
    165  61f9		       4c 00 b2 	      jmp	pfline_96x2_1_frame1
    166  61fc
    167  61fc							;align so our branch doesn't unexpectedly cross a page...
    168  61fc					      if	>. != >[.+$70]
    169  6200		       00 00 00 00	      align	256
    170  6200					      endif
    171  6200
    172  6200				   pfline_96x2_1_frame1
    173  6200
    174  6200		       85 2a		      sta	HMOVE
    175  6202
    176  6202		       b9 55 b5 	      lda	bmp_96x2_1_07,y	;4
    177  6205		       85 1c		      sta	GRP1	;3
    178  6207
    179  6207		       a9 00		      lda	#$0	;2
    180  6209		       85 20		      sta	HMP0	;3
    181  620b		       85 21		      sta	HMP1	;3
    182  620d
    183  620d		       b9 55 b3 	      lda	bmp_96x2_1_01,y
    184  6210		       8d 1b 00 	      sta.w	GRP0
    185  6213		       b9 00 b4 	      lda	bmp_96x2_1_03,y
    186  6216		       85 1b		      sta	GRP0
    187  6218		       b9 aa b4 	      lda	bmp_96x2_1_05,y
    188  621b		       85 1b		      sta	GRP0
    189  621d
      0  621d					      sleep	2
      1  621d				   .CYCLES    SET	2
      2  621d
      3  621d				  -	      IF	.CYCLES < 2
      4  621d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  621d				  -	      ERR
      6  621d					      ENDIF
      7  621d
      8  621d				  -	      IF	.CYCLES & 1
      9  621d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  621d				  -	      nop	0
     11  621d				  -	      ELSE
     12  621d				  -	      bit	VSYNC
     13  621d				  -	      ENDIF
     14  621d				  -.CYCLES    SET	.CYCLES - 3
     15  621d					      ENDIF
     16  621d
     17  621d					      REPEAT	.CYCLES / 2
     18  621d		       ea		      nop
     19  621e					      REPEND
    191  621e
    192  621e		       b9 00 b6 	      lda	bmp_96x2_1_09,y
    193  6221		       85 1c		      sta	GRP1
    194  6223		       b9 aa b6 	      lda	bmp_96x2_1_11,y
    195  6226		       85 1c		      sta	GRP1
    196  6228
    197  6228		       b9 00 b3 	      lda	bmp_96x2_1_00,y
    198  622b		       85 1b		      sta	GRP0
    199  622d
    200  622d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    201  6230
    202  6230							;sta WSYNC	;=0 -----------------------------------------
    203  6230
    204  6230		       b9 00 b5 	      lda	bmp_96x2_1_06,y
    205  6233		       85 1c		      sta	GRP1
    206  6235
      0  6235					      sleep	8
      1  6235				   .CYCLES    SET	8
      2  6235
      3  6235				  -	      IF	.CYCLES < 2
      4  6235				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  6235				  -	      ERR
      6  6235					      ENDIF
      7  6235
      8  6235				  -	      IF	.CYCLES & 1
      9  6235				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  6235				  -	      nop	0
     11  6235				  -	      ELSE
     12  6235				  -	      bit	VSYNC
     13  6235				  -	      ENDIF
     14  6235				  -.CYCLES    SET	.CYCLES - 3
     15  6235					      ENDIF
     16  6235
     17  6235					      REPEAT	.CYCLES / 2
     18  6235		       ea		      nop
     17  6235					      REPEND
     18  6236		       ea		      nop
     17  6236					      REPEND
     18  6237		       ea		      nop
     17  6237					      REPEND
     18  6238		       ea		      nop
     19  6239					      REPEND
    208  6239
    209  6239		       b9 95 b2 	      lda	bmp_96x2_1_colors-1,y	;get the title color early and store it for later
    210  623c		       aa		      tax		;2
    211  623d
      0  623d					      sleep	3
      1  623d				   .CYCLES    SET	3
      2  623d
      3  623d				  -	      IF	.CYCLES < 2
      4  623d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  623d				  -	      ERR
      6  623d					      ENDIF
      7  623d
      8  623d					      IF	.CYCLES & 1
      9  623d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  623d		       04 00		      nop	0
     11  623f				  -	      ELSE
     12  623f				  -	      bit	VSYNC
     13  623f					      ENDIF
     14  623f				   .CYCLES    SET	.CYCLES - 3
     15  623f					      ENDIF
     16  623f
     17  623f				  -	      REPEAT	.CYCLES / 2
     18  623f				  -	      nop
     19  623f					      REPEND
    213  623f
    214  623f		       a9 80		      lda	#$80	;2
    215  6241		       85 20		      sta	HMP0	;3
    216  6243		       85 21		      sta	HMP1	;3
    217  6245
    218  6245
    219  6245		       b9 aa b3 	      lda	bmp_96x2_1_02,y	;5
    220  6248		       85 1b		      sta	GRP0	;3 =  8
    221  624a
    222  624a		       b9 55 b4 	      lda	bmp_96x2_1_04,y	;5
    223  624d		       85 1b		      sta	GRP0	;3 =  8
    224  624f
      0  624f					      sleep	2
      1  624f				   .CYCLES    SET	2
      2  624f
      3  624f				  -	      IF	.CYCLES < 2
      4  624f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  624f				  -	      ERR
      6  624f					      ENDIF
      7  624f
      8  624f				  -	      IF	.CYCLES & 1
      9  624f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  624f				  -	      nop	0
     11  624f				  -	      ELSE
     12  624f				  -	      bit	VSYNC
     13  624f				  -	      ENDIF
     14  624f				  -.CYCLES    SET	.CYCLES - 3
     15  624f					      ENDIF
     16  624f
     17  624f					      REPEAT	.CYCLES / 2
     18  624f		       ea		      nop
     19  6250					      REPEND
    226  6250
    227  6250		       b9 aa b5 	      lda	bmp_96x2_1_08,y	;5
    228  6253		       85 1c		      sta	GRP1	;3 =  8
    229  6255
    230  6255		       b9 55 b6 	      lda	bmp_96x2_1_10,y	;5
    231  6258		       85 1c		      sta	GRP1	;3 =  8
    232  625a
      0  625a					      sleep	4
      1  625a				   .CYCLES    SET	4
      2  625a
      3  625a				  -	      IF	.CYCLES < 2
      4  625a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  625a				  -	      ERR
      6  625a					      ENDIF
      7  625a
      8  625a				  -	      IF	.CYCLES & 1
      9  625a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  625a				  -	      nop	0
     11  625a				  -	      ELSE
     12  625a				  -	      bit	VSYNC
     13  625a				  -	      ENDIF
     14  625a				  -.CYCLES    SET	.CYCLES - 3
     15  625a					      ENDIF
     16  625a
     17  625a					      REPEAT	.CYCLES / 2
     18  625a		       ea		      nop
     17  625a					      REPEND
     18  625b		       ea		      nop
     19  625c					      REPEND
    234  625c
    235  625c		       88		      dey
    236  625d
    237  625d		       8a		      txa
    238  625e				  -	      ifconst	bmp_96x2_1_fade
    239  625e				  -	      and	bmp_96x2_1_fade
    240  625e					      else
      0  625e					      sleep	3
      1  625e				   .CYCLES    SET	3
      2  625e
      3  625e				  -	      IF	.CYCLES < 2
      4  625e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  625e				  -	      ERR
      6  625e					      ENDIF
      7  625e
      8  625e					      IF	.CYCLES & 1
      9  625e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  625e		       04 00		      nop	0
     11  6260				  -	      ELSE
     12  6260				  -	      bit	VSYNC
     13  6260					      ENDIF
     14  6260				   .CYCLES    SET	.CYCLES - 3
     15  6260					      ENDIF
     16  6260
     17  6260				  -	      REPEAT	.CYCLES / 2
     18  6260				  -	      nop
     19  6260					      REPEND
    242  6260					      endif
    243  6260		       85 07		      sta	COLUP1	;3
    244  6262		       85 06		      sta	COLUP0	;3
    245  6264
    246  6264		       c4 cb		      cpy	temp1	;2
    247  6266		       d0 98		      bne	pfline_96x2_1_frame1	;2/3
    248  6268
    249  6268				   pf96x2_1_1codeend
    250  6268							;echo "critical code #2 in 96x2_1 is ",(pf96x2_1_1codeend-pfline_96x2_1_frame1), " bytes long."
    251  6268
    252  6268		       a9 00		      lda	#0
    253  626a		       85 1b		      sta	GRP0
    254  626c		       85 1c		      sta	GRP1
    255  626e
    256  626e				   pfdone_96x2_1
    257  626e		       85 02		      sta	WSYNC	; debug
    258  6270
    259  6270		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    149  6271					      endif		;mk_96x2_1_on
    150  6271
    151  6271				  -	      ifconst	mk_96x2_2_on
    152  6271				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    153  6271					      endif		;mk_96x2_2_on
    154  6271
    155  6271				  -	      ifconst	mk_96x2_3_on
    156  6271				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    157  6271					      endif		;mk_96x2_3_on
    158  6271
    159  6271				  -	      ifconst	mk_96x2_4_on
    160  6271				  -	      include	"titlescreen/asm/96x2_4_kernel.asm"
    161  6271					      endif		;mk_96x2_4_on
    162  6271
    163  6271				  -	      ifconst	mk_96x2_5_on
    164  6271				  -	      include	"titlescreen/asm/96x2_5_kernel.asm"
    165  6271					      endif		;mk_96x2_5_on
    166  6271
    167  6271				  -	      ifconst	mk_96x2_6_on
    168  6271				  -	      include	"titlescreen/asm/96x2_6_kernel.asm"
    169  6271					      endif		;mk_96x2_6_on
    170  6271
    171  6271				  -	      ifconst	mk_96x2_7_on
    172  6271				  -	      include	"titlescreen/asm/96x2_7_kernel.asm"
    173  6271					      endif		;mk_96x2_7_on
    174  6271
    175  6271				  -	      ifconst	mk_96x2_8_on
    176  6271				  -	      include	"titlescreen/asm/96x2_8_kernel.asm"
    177  6271					      endif		;mk_96x2_8_on
    178  6271
    179  6271				  -	      ifconst	mk_score_on
    180  6271				  -	      include	"titlescreen/asm/score_kernel.asm"
    181  6271					      endif		;mk_score_on
    182  6271
    183  6271				  -	      ifconst	mk_gameselect_on
    184  6271				  -	      include	"titlescreen/asm/gameselect_kernel.asm"
    185  6271					      endif		;mk_gameselect_on
    186  6271
    187  6271				   PFWAIT
    188  6271		       ad 84 02 	      lda	INTIM
    189  6274		       d0 fb		      bne	PFWAIT
    190  6276		       85 02		      sta	WSYNC
    191  6278
    192  6278				   OVERSCAN
    193  6278				  -	      ifnconst	overscan_time
    194  6278				  -	      lda	#34+128
    195  6278					      else
    196  6278		       a9 a0		      lda	#overscan_time+128-5
    197  627a					      endif
    198  627a		       8d 96 02 	      sta	TIM64T
    199  627d
    200  627d							;fix height variables we borrowed, so DPC doesn't crash on drawscreen...
    201  627d					      ifconst	player9height
    202  627d		       a0 08		      ldy	#8
    203  627f		       a9 00		      lda	#0
    204  6281		       85 a5		      sta	player0height
    205  6283				   .playerheightfixloop
    206  6283		       99 a6 00 	      sta	player1height,y
    207  6286					      ifconst	_NUSIZ1
    208  6286		       99 af 00 	      sta	_NUSIZ1,y
    209  6289					      endif
    210  6289		       88		      dey
    211  628a		       10 f7		      bpl	.playerheightfixloop
    212  628c					      endif
    213  628c
    214  628c		       a9 c2		      lda	#%11000010
    215  628e		       85 02		      sta	WSYNC
    216  6290		       85 01		      sta	VBLANK
      0  6292					      RETURN
      1  6292				  -	      ifnconst	bankswitch
      2  6292				  -	      rts
      3  6292					      else
      4  6292		       4c e0 df 	      jmp	BS_return
      5  6295					      endif
    218  6295
    219  6295				  -	      ifconst	mk_48x1_1_on
    220  6295				  -	      include	"titlescreen/48x1_1_image.asm"
    221  6295					      endif
    222  6295				  -	      ifconst	mk_48x1_2_on
    223  6295				  -	      include	"titlescreen/48x1_2_image.asm"
    224  6295					      endif
    225  6295				  -	      ifconst	mk_48x1_3_on
    226  6295				  -	      include	"titlescreen/48x1_3_image.asm"
    227  6295					      endif
    228  6295				  -	      ifconst	mk_48x1_4_on
    229  6295				  -	      include	"titlescreen/48x1_4_image.asm"
    230  6295					      endif
    231  6295				  -	      ifconst	mk_48x1_5_on
    232  6295				  -	      include	"titlescreen/48x1_5_image.asm"
    233  6295					      endif
    234  6295				  -	      ifconst	mk_48x1_6_on
    235  6295				  -	      include	"titlescreen/48x1_6_image.asm"
    236  6295					      endif
    237  6295				  -	      ifconst	mk_48x1_7_on
    238  6295				  -	      include	"titlescreen/48x1_7_image.asm"
    239  6295					      endif
    240  6295				  -	      ifconst	mk_48x1_8_on
    241  6295				  -	      include	"titlescreen/48x1_8_image.asm"
    242  6295					      endif
    243  6295
    244  6295
    245  6295				  -	      ifconst	mk_48x2_1_on
    246  6295				  -	      include	"titlescreen/48x2_1_image.asm"
    247  6295					      endif
    248  6295				  -	      ifconst	mk_48x2_2_on
    249  6295				  -	      include	"titlescreen/48x2_2_image.asm"
    250  6295					      endif
    251  6295				  -	      ifconst	mk_48x2_3_on
    252  6295				  -	      include	"titlescreen/48x2_3_image.asm"
    253  6295					      endif
    254  6295				  -	      ifconst	mk_48x2_4_on
    255  6295				  -	      include	"titlescreen/48x2_4_image.asm"
    256  6295					      endif
    257  6295				  -	      ifconst	mk_48x2_5_on
    258  6295				  -	      include	"titlescreen/48x2_5_image.asm"
    259  6295					      endif
    260  6295				  -	      ifconst	mk_48x2_6_on
    261  6295				  -	      include	"titlescreen/48x2_6_image.asm"
    262  6295					      endif
    263  6295				  -	      ifconst	mk_48x2_7_on
    264  6295				  -	      include	"titlescreen/48x2_7_image.asm"
    265  6295					      endif
    266  6295
    267  6295				  -	      ifconst	mk_48x2_8_on
    268  6295				  -	      include	"titlescreen/48x2_8_image.asm"
    269  6295					      endif
    270  6295
    271  6295
    272  6295					      ifconst	mk_96x2_1_on
------- FILE titlescreen/96x2_1_image.asm LEVEL 3 PASS 4
      0  6295					      include	"titlescreen/96x2_1_image.asm"
      1  6295
      2  6295
      3  6295							;*** The height of the displayed data...
      4  6295		       00 55	   bmp_96x2_1_window =	85
      5  6295
      6  6295							;*** The height of the bitmap data. This can be larger than
      7  6295							;*** the displayed data height, if you're scrolling or animating
      8  6295							;*** the data...
      9  6295		       00 55	   bmp_96x2_1_height =	85
     10  6295
     11  6295
     12  6295				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     13  6295				  -	      align	256
     14  6295					      endif
     15  6295		       00		      BYTE.b	$00	; leave this here!
     16  6296
     17  6296
     18  6296							;*** The color of each line in the bitmap, in reverse order...
     19  6296				   bmp_96x2_1_colors
     20  6296		       46		      .byte.b	$46
     21  6297		       46		      .byte.b	$46
     22  6298		       46		      .byte.b	$46
     23  6299		       46		      .byte.b	$46
     24  629a		       46		      .byte.b	$46
     25  629b		       46		      .byte.b	$46
     26  629c		       46		      .byte.b	$46
     27  629d		       46		      .byte.b	$46
     28  629e		       46		      .byte.b	$46
     29  629f		       46		      .byte.b	$46
     30  62a0		       46		      .byte.b	$46
     31  62a1		       0e		      .byte.b	$0E
     32  62a2		       0e		      .byte.b	$0E
     33  62a3		       0e		      .byte.b	$0E
     34  62a4		       0e		      .byte.b	$0E
     35  62a5		       0e		      .byte.b	$0E
     36  62a6		       0e		      .byte.b	$0E
     37  62a7		       0e		      .byte.b	$0E
     38  62a8		       0e		      .byte.b	$0E
     39  62a9		       0e		      .byte.b	$0E
     40  62aa		       0e		      .byte.b	$0E
     41  62ab		       0e		      .byte.b	$0E
     42  62ac		       0e		      .byte.b	$0E
     43  62ad		       c8		      .byte.b	$C8
     44  62ae		       c8		      .byte.b	$C8
     45  62af		       c8		      .byte.b	$C8
     46  62b0		       c8		      .byte.b	$C8
     47  62b1		       c8		      .byte.b	$C8
     48  62b2		       c8		      .byte.b	$C8
     49  62b3		       c8		      .byte.b	$C8
     50  62b4		       c8		      .byte.b	$C8
     51  62b5		       c8		      .byte.b	$C8
     52  62b6		       c8		      .byte.b	$C8
     53  62b7		       c8		      .byte.b	$C8
     54  62b8		       c8		      .byte.b	$C8
     55  62b9		       c8		      .byte.b	$C8
     56  62ba		       c8		      .byte.b	$C8
     57  62bb		       c8		      .byte.b	$C8
     58  62bc		       c8		      .byte.b	$C8
     59  62bd		       c8		      .byte.b	$C8
     60  62be		       c8		      .byte.b	$C8
     61  62bf		       c8		      .byte.b	$C8
     62  62c0		       c8		      .byte.b	$C8
     63  62c1		       c8		      .byte.b	$C8
     64  62c2		       c8		      .byte.b	$C8
     65  62c3		       c8		      .byte.b	$C8
     66  62c4		       c8		      .byte.b	$C8
     67  62c5		       c8		      .byte.b	$C8
     68  62c6		       c8		      .byte.b	$C8
     69  62c7		       c8		      .byte.b	$C8
     70  62c8		       c8		      .byte.b	$C8
     71  62c9		       c8		      .byte.b	$C8
     72  62ca		       c8		      .byte.b	$C8
     73  62cb		       c8		      .byte.b	$C8
     74  62cc		       c8		      .byte.b	$C8
     75  62cd		       c8		      .byte.b	$C8
     76  62ce		       c8		      .byte.b	$C8
     77  62cf		       c8		      .byte.b	$C8
     78  62d0		       c8		      .byte.b	$C8
     79  62d1		       c4		      .byte.b	$C4
     80  62d2		       c4		      .byte.b	$C4
     81  62d3		       c4		      .byte.b	$C4
     82  62d4		       c4		      .byte.b	$C4
     83  62d5		       c4		      .byte.b	$C4
     84  62d6		       0e		      .byte.b	$0E
     85  62d7		       0e		      .byte.b	$0E
     86  62d8		       0e		      .byte.b	$0E
     87  62d9		       0e		      .byte.b	$0E
     88  62da		       0e		      .byte.b	$0E
     89  62db		       0e		      .byte.b	$0E
     90  62dc		       0e		      .byte.b	$0E
     91  62dd		       0e		      .byte.b	$0E
     92  62de		       0e		      .byte.b	$0E
     93  62df		       0e		      .byte.b	$0E
     94  62e0		       0e		      .byte.b	$0E
     95  62e1		       0e		      .byte.b	$0E
     96  62e2		       0e		      .byte.b	$0E
     97  62e3		       0e		      .byte.b	$0E
     98  62e4		       0e		      .byte.b	$0E
     99  62e5		       0e		      .byte.b	$0E
    100  62e6		       0e		      .byte.b	$0E
    101  62e7		       0e		      .byte.b	$0E
    102  62e8		       0e		      .byte.b	$0E
    103  62e9		       0e		      .byte.b	$0E
    104  62ea		       00		      .byte.b	$00
    105  62eb
    106  62eb
    107  62eb					      if	>. != >[.+(bmp_96x2_1_height)]
    108  6300		       00 00 00 00*	      align	256
    109  6300					      endif
    110  6300
    111  6300
    112  6300				   bmp_96x2_1_00
    113  6300							; *** replace this block with your bimap_00 data block...
    114  6300		       00		      BYTE.b	%00000000
    115  6301		       00		      BYTE.b	%00000000
    116  6302		       00		      BYTE.b	%00000000
    117  6303		       00		      BYTE.b	%00000000
    118  6304		       00		      BYTE.b	%00000000
    119  6305		       00		      BYTE.b	%00000000
    120  6306		       00		      BYTE.b	%00000000
    121  6307		       00		      BYTE.b	%00000000
    122  6308		       00		      BYTE.b	%00000000
    123  6309		       00		      BYTE.b	%00000000
    124  630a		       00		      BYTE.b	%00000000
    125  630b		       00		      BYTE.b	%00000000
    126  630c		       00		      BYTE.b	%00000000
    127  630d		       00		      BYTE.b	%00000000
    128  630e		       00		      BYTE.b	%00000000
    129  630f		       00		      BYTE.b	%00000000
    130  6310		       02		      BYTE.b	%00000010
    131  6311		       02		      BYTE.b	%00000010
    132  6312		       03		      BYTE.b	%00000011
    133  6313		       03		      BYTE.b	%00000011
    134  6314		       02		      BYTE.b	%00000010
    135  6315		       03		      BYTE.b	%00000011
    136  6316		       00		      BYTE.b	%00000000
    137  6317		       00		      BYTE.b	%00000000
    138  6318		       00		      BYTE.b	%00000000
    139  6319		       00		      BYTE.b	%00000000
    140  631a		       00		      BYTE.b	%00000000
    141  631b		       00		      BYTE.b	%00000000
    142  631c		       00		      BYTE.b	%00000000
    143  631d		       00		      BYTE.b	%00000000
    144  631e		       00		      BYTE.b	%00000000
    145  631f		       00		      BYTE.b	%00000000
    146  6320		       00		      BYTE.b	%00000000
    147  6321		       00		      BYTE.b	%00000000
    148  6322		       00		      BYTE.b	%00000000
    149  6323		       00		      BYTE.b	%00000000
    150  6324		       00		      BYTE.b	%00000000
    151  6325		       00		      BYTE.b	%00000000
    152  6326		       00		      BYTE.b	%00000000
    153  6327		       00		      BYTE.b	%00000000
    154  6328		       00		      BYTE.b	%00000000
    155  6329		       00		      BYTE.b	%00000000
    156  632a		       00		      BYTE.b	%00000000
    157  632b		       00		      BYTE.b	%00000000
    158  632c		       00		      BYTE.b	%00000000
    159  632d		       00		      BYTE.b	%00000000
    160  632e		       00		      BYTE.b	%00000000
    161  632f		       00		      BYTE.b	%00000000
    162  6330		       00		      BYTE.b	%00000000
    163  6331		       00		      BYTE.b	%00000000
    164  6332		       00		      BYTE.b	%00000000
    165  6333		       00		      BYTE.b	%00000000
    166  6334		       00		      BYTE.b	%00000000
    167  6335		       00		      BYTE.b	%00000000
    168  6336		       00		      BYTE.b	%00000000
    169  6337		       00		      BYTE.b	%00000000
    170  6338		       00		      BYTE.b	%00000000
    171  6339		       00		      BYTE.b	%00000000
    172  633a		       00		      BYTE.b	%00000000
    173  633b		       00		      BYTE.b	%00000000
    174  633c		       00		      BYTE.b	%00000000
    175  633d		       00		      BYTE.b	%00000000
    176  633e		       00		      BYTE.b	%00000000
    177  633f		       00		      BYTE.b	%00000000
    178  6340		       1f		      BYTE.b	%00011111
    179  6341		       1f		      BYTE.b	%00011111
    180  6342		       10		      BYTE.b	%00010000
    181  6343		       10		      BYTE.b	%00010000
    182  6344		       10		      BYTE.b	%00010000
    183  6345		       10		      BYTE.b	%00010000
    184  6346		       10		      BYTE.b	%00010000
    185  6347		       1f		      BYTE.b	%00011111
    186  6348		       1f		      BYTE.b	%00011111
    187  6349		       10		      BYTE.b	%00010000
    188  634a		       10		      BYTE.b	%00010000
    189  634b		       10		      BYTE.b	%00010000
    190  634c		       10		      BYTE.b	%00010000
    191  634d		       1f		      BYTE.b	%00011111
    192  634e		       1f		      BYTE.b	%00011111
    193  634f		       00		      BYTE.b	%00000000
    194  6350		       00		      BYTE.b	%00000000
    195  6351		       00		      BYTE.b	%00000000
    196  6352		       00		      BYTE.b	%00000000
    197  6353		       00		      BYTE.b	%00000000
    198  6354		       00		      BYTE.b	%00000000
    199  6355
    200  6355
    201  6355
    202  6355				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    203  6355				  -	      align	256
    204  6355					      endif
    205  6355
    206  6355
    207  6355				   bmp_96x2_1_01
    208  6355							; *** replace this block with your bimap_01 data block...
    209  6355		       00		      BYTE.b	%00000000
    210  6356		       00		      BYTE.b	%00000000
    211  6357		       00		      BYTE.b	%00000000
    212  6358		       88		      BYTE.b	%10001000
    213  6359		       88		      BYTE.b	%10001000
    214  635a		       78		      BYTE.b	%01111000
    215  635b		       50		      BYTE.b	%01010000
    216  635c		       50		      BYTE.b	%01010000
    217  635d		       30		      BYTE.b	%00110000
    218  635e		       30		      BYTE.b	%00110000
    219  635f		       00		      BYTE.b	%00000000
    220  6360		       00		      BYTE.b	%00000000
    221  6361		       00		      BYTE.b	%00000000
    222  6362		       00		      BYTE.b	%00000000
    223  6363		       00		      BYTE.b	%00000000
    224  6364		       0e		      BYTE.b	%00001110
    225  6365		       04		      BYTE.b	%00000100
    226  6366		       04		      BYTE.b	%00000100
    227  6367		       84		      BYTE.b	%10000100
    228  6368		       84		      BYTE.b	%10000100
    229  6369		       04		      BYTE.b	%00000100
    230  636a		       84		      BYTE.b	%10000100
    231  636b		       00		      BYTE.b	%00000000
    232  636c		       00		      BYTE.b	%00000000
    233  636d		       00		      BYTE.b	%00000000
    234  636e		       00		      BYTE.b	%00000000
    235  636f		       00		      BYTE.b	%00000000
    236  6370		       00		      BYTE.b	%00000000
    237  6371		       00		      BYTE.b	%00000000
    238  6372		       01		      BYTE.b	%00000001
    239  6373		       03		      BYTE.b	%00000011
    240  6374		       03		      BYTE.b	%00000011
    241  6375		       07		      BYTE.b	%00000111
    242  6376		       07		      BYTE.b	%00000111
    243  6377		       07		      BYTE.b	%00000111
    244  6378		       07		      BYTE.b	%00000111
    245  6379		       07		      BYTE.b	%00000111
    246  637a		       0f		      BYTE.b	%00001111
    247  637b		       07		      BYTE.b	%00000111
    248  637c		       07		      BYTE.b	%00000111
    249  637d		       07		      BYTE.b	%00000111
    250  637e		       07		      BYTE.b	%00000111
    251  637f		       03		      BYTE.b	%00000011
    252  6380		       03		      BYTE.b	%00000011
    253  6381		       03		      BYTE.b	%00000011
    254  6382		       01		      BYTE.b	%00000001
    255  6383		       00		      BYTE.b	%00000000
    256  6384		       00		      BYTE.b	%00000000
    257  6385		       00		      BYTE.b	%00000000
    258  6386		       00		      BYTE.b	%00000000
    259  6387		       00		      BYTE.b	%00000000
    260  6388		       00		      BYTE.b	%00000000
    261  6389		       00		      BYTE.b	%00000000
    262  638a		       00		      BYTE.b	%00000000
    263  638b		       00		      BYTE.b	%00000000
    264  638c		       00		      BYTE.b	%00000000
    265  638d		       00		      BYTE.b	%00000000
    266  638e		       00		      BYTE.b	%00000000
    267  638f		       00		      BYTE.b	%00000000
    268  6390		       00		      BYTE.b	%00000000
    269  6391		       00		      BYTE.b	%00000000
    270  6392		       00		      BYTE.b	%00000000
    271  6393		       00		      BYTE.b	%00000000
    272  6394		       00		      BYTE.b	%00000000
    273  6395		       00		      BYTE.b	%00000000
    274  6396		       c0		      BYTE.b	%11000000
    275  6397		       c0		      BYTE.b	%11000000
    276  6398		       60		      BYTE.b	%01100000
    277  6399		       60		      BYTE.b	%01100000
    278  639a		       60		      BYTE.b	%01100000
    279  639b		       e0		      BYTE.b	%11100000
    280  639c		       c0		      BYTE.b	%11000000
    281  639d		       80		      BYTE.b	%10000000
    282  639e		       c0		      BYTE.b	%11000000
    283  639f		       c0		      BYTE.b	%11000000
    284  63a0		       c0		      BYTE.b	%11000000
    285  63a1		       c0		      BYTE.b	%11000000
    286  63a2		       c0		      BYTE.b	%11000000
    287  63a3		       00		      BYTE.b	%00000000
    288  63a4		       00		      BYTE.b	%00000000
    289  63a5		       00		      BYTE.b	%00000000
    290  63a6		       00		      BYTE.b	%00000000
    291  63a7		       00		      BYTE.b	%00000000
    292  63a8		       00		      BYTE.b	%00000000
    293  63a9		       00		      BYTE.b	%00000000
    294  63aa
    295  63aa
    296  63aa
    297  63aa				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    298  63aa				  -	      align	256
    299  63aa					      endif
    300  63aa
    301  63aa
    302  63aa				   bmp_96x2_1_02
    303  63aa							; *** replace this block with your bimap_02 data block...
    304  63aa		       00		      BYTE.b	%00000000
    305  63ab		       00		      BYTE.b	%00000000
    306  63ac		       00		      BYTE.b	%00000000
    307  63ad		       71		      BYTE.b	%01110001
    308  63ae		       81		      BYTE.b	%10000001
    309  63af		       81		      BYTE.b	%10000001
    310  63b0		       81		      BYTE.b	%10000001
    311  63b1		       81		      BYTE.b	%10000001
    312  63b2		       81		      BYTE.b	%10000001
    313  63b3		       81		      BYTE.b	%10000001
    314  63b4		       00		      BYTE.b	%00000000
    315  63b5		       00		      BYTE.b	%00000000
    316  63b6		       00		      BYTE.b	%00000000
    317  63b7		       00		      BYTE.b	%00000000
    318  63b8		       00		      BYTE.b	%00000000
    319  63b9		       22		      BYTE.b	%00100010
    320  63ba		       24		      BYTE.b	%00100100
    321  63bb		       28		      BYTE.b	%00101000
    322  63bc		       38		      BYTE.b	%00111000
    323  63bd		       24		      BYTE.b	%00100100
    324  63be		       24		      BYTE.b	%00100100
    325  63bf		       3c		      BYTE.b	%00111100
    326  63c0		       00		      BYTE.b	%00000000
    327  63c1		       01		      BYTE.b	%00000001
    328  63c2		       0f		      BYTE.b	%00001111
    329  63c3		       1f		      BYTE.b	%00011111
    330  63c4		       7f		      BYTE.b	%01111111
    331  63c5		       ff		      BYTE.b	%11111111
    332  63c6		       ff		      BYTE.b	%11111111
    333  63c7		       ff		      BYTE.b	%11111111
    334  63c8		       ff		      BYTE.b	%11111111
    335  63c9		       ff		      BYTE.b	%11111111
    336  63ca		       ff		      BYTE.b	%11111111
    337  63cb		       ff		      BYTE.b	%11111111
    338  63cc		       ff		      BYTE.b	%11111111
    339  63cd		       ff		      BYTE.b	%11111111
    340  63ce		       ff		      BYTE.b	%11111111
    341  63cf		       ff		      BYTE.b	%11111111
    342  63d0		       ff		      BYTE.b	%11111111
    343  63d1		       ff		      BYTE.b	%11111111
    344  63d2		       ff		      BYTE.b	%11111111
    345  63d3		       ff		      BYTE.b	%11111111
    346  63d4		       ff		      BYTE.b	%11111111
    347  63d5		       ff		      BYTE.b	%11111111
    348  63d6		       ff		      BYTE.b	%11111111
    349  63d7		       ff		      BYTE.b	%11111111
    350  63d8		       ff		      BYTE.b	%11111111
    351  63d9		       ff		      BYTE.b	%11111111
    352  63da		       3f		      BYTE.b	%00111111
    353  63db		       1f		      BYTE.b	%00011111
    354  63dc		       0f		      BYTE.b	%00001111
    355  63dd		       00		      BYTE.b	%00000000
    356  63de		       00		      BYTE.b	%00000000
    357  63df		       00		      BYTE.b	%00000000
    358  63e0		       00		      BYTE.b	%00000000
    359  63e1		       00		      BYTE.b	%00000000
    360  63e2		       00		      BYTE.b	%00000000
    361  63e3		       00		      BYTE.b	%00000000
    362  63e4		       00		      BYTE.b	%00000000
    363  63e5		       00		      BYTE.b	%00000000
    364  63e6		       00		      BYTE.b	%00000000
    365  63e7		       00		      BYTE.b	%00000000
    366  63e8		       00		      BYTE.b	%00000000
    367  63e9		       00		      BYTE.b	%00000000
    368  63ea		       20		      BYTE.b	%00100000
    369  63eb		       60		      BYTE.b	%01100000
    370  63ec		       61		      BYTE.b	%01100001
    371  63ed		       63		      BYTE.b	%01100011
    372  63ee		       63		      BYTE.b	%01100011
    373  63ef		       66		      BYTE.b	%01100110
    374  63f0		       7e		      BYTE.b	%01111110
    375  63f1		       7f		      BYTE.b	%01111111
    376  63f2		       63		      BYTE.b	%01100011
    377  63f3		       61		      BYTE.b	%01100001
    378  63f4		       61		      BYTE.b	%01100001
    379  63f5		       61		      BYTE.b	%01100001
    380  63f6		       63		      BYTE.b	%01100011
    381  63f7		       7f		      BYTE.b	%01111111
    382  63f8		       3e		      BYTE.b	%00111110
    383  63f9		       00		      BYTE.b	%00000000
    384  63fa		       00		      BYTE.b	%00000000
    385  63fb		       00		      BYTE.b	%00000000
    386  63fc		       00		      BYTE.b	%00000000
    387  63fd		       00		      BYTE.b	%00000000
    388  63fe		       00		      BYTE.b	%00000000
    389  63ff
    390  63ff
    391  63ff
    392  63ff					      if	>. != >[.+(bmp_96x2_1_height)]
    393  6400		       00		      align	256
    394  6400					      endif
    395  6400
    396  6400
    397  6400				   bmp_96x2_1_03
    398  6400							; *** replace this block with your bimap_03 data block...
    399  6400		       00		      BYTE.b	%00000000
    400  6401		       00		      BYTE.b	%00000000
    401  6402		       00		      BYTE.b	%00000000
    402  6403		       87		      BYTE.b	%10000111
    403  6404		       04		      BYTE.b	%00000100
    404  6405		       04		      BYTE.b	%00000100
    405  6406		       04		      BYTE.b	%00000100
    406  6407		       07		      BYTE.b	%00000111
    407  6408		       04		      BYTE.b	%00000100
    408  6409		       87		      BYTE.b	%10000111
    409  640a		       00		      BYTE.b	%00000000
    410  640b		       00		      BYTE.b	%00000000
    411  640c		       00		      BYTE.b	%00000000
    412  640d		       00		      BYTE.b	%00000000
    413  640e		       00		      BYTE.b	%00000000
    414  640f		       3c		      BYTE.b	%00111100
    415  6410		       20		      BYTE.b	%00100000
    416  6411		       20		      BYTE.b	%00100000
    417  6412		       38		      BYTE.b	%00111000
    418  6413		       38		      BYTE.b	%00111000
    419  6414		       20		      BYTE.b	%00100000
    420  6415		       38		      BYTE.b	%00111000
    421  6416		       00		      BYTE.b	%00000000
    422  6417		       c0		      BYTE.b	%11000000
    423  6418		       f8		      BYTE.b	%11111000
    424  6419		       fc		      BYTE.b	%11111100
    425  641a		       ff		      BYTE.b	%11111111
    426  641b		       ff		      BYTE.b	%11111111
    427  641c		       ff		      BYTE.b	%11111111
    428  641d		       ff		      BYTE.b	%11111111
    429  641e		       ff		      BYTE.b	%11111111
    430  641f		       ff		      BYTE.b	%11111111
    431  6420		       ff		      BYTE.b	%11111111
    432  6421		       ff		      BYTE.b	%11111111
    433  6422		       ff		      BYTE.b	%11111111
    434  6423		       ff		      BYTE.b	%11111111
    435  6424		       ff		      BYTE.b	%11111111
    436  6425		       ff		      BYTE.b	%11111111
    437  6426		       ff		      BYTE.b	%11111111
    438  6427		       ff		      BYTE.b	%11111111
    439  6428		       ff		      BYTE.b	%11111111
    440  6429		       ff		      BYTE.b	%11111111
    441  642a		       ff		      BYTE.b	%11111111
    442  642b		       ff		      BYTE.b	%11111111
    443  642c		       ff		      BYTE.b	%11111111
    444  642d		       ff		      BYTE.b	%11111111
    445  642e		       ff		      BYTE.b	%11111111
    446  642f		       ff		      BYTE.b	%11111111
    447  6430		       fe		      BYTE.b	%11111110
    448  6431		       fc		      BYTE.b	%11111100
    449  6432		       f8		      BYTE.b	%11111000
    450  6433		       00		      BYTE.b	%00000000
    451  6434		       00		      BYTE.b	%00000000
    452  6435		       00		      BYTE.b	%00000000
    453  6436		       00		      BYTE.b	%00000000
    454  6437		       00		      BYTE.b	%00000000
    455  6438		       00		      BYTE.b	%00000000
    456  6439		       00		      BYTE.b	%00000000
    457  643a		       00		      BYTE.b	%00000000
    458  643b		       00		      BYTE.b	%00000000
    459  643c		       00		      BYTE.b	%00000000
    460  643d		       00		      BYTE.b	%00000000
    461  643e		       00		      BYTE.b	%00000000
    462  643f		       00		      BYTE.b	%00000000
    463  6440		       40		      BYTE.b	%01000000
    464  6441		       c0		      BYTE.b	%11000000
    465  6442		       80		      BYTE.b	%10000000
    466  6443		       80		      BYTE.b	%10000000
    467  6444		       00		      BYTE.b	%00000000
    468  6445		       00		      BYTE.b	%00000000
    469  6446		       00		      BYTE.b	%00000000
    470  6447		       00		      BYTE.b	%00000000
    471  6448		       80		      BYTE.b	%10000000
    472  6449		       80		      BYTE.b	%10000000
    473  644a		       80		      BYTE.b	%10000000
    474  644b		       80		      BYTE.b	%10000000
    475  644c		       80		      BYTE.b	%10000000
    476  644d		       00		      BYTE.b	%00000000
    477  644e		       00		      BYTE.b	%00000000
    478  644f		       00		      BYTE.b	%00000000
    479  6450		       00		      BYTE.b	%00000000
    480  6451		       00		      BYTE.b	%00000000
    481  6452		       00		      BYTE.b	%00000000
    482  6453		       00		      BYTE.b	%00000000
    483  6454		       00		      BYTE.b	%00000000
    484  6455
    485  6455
    486  6455
    487  6455				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    488  6455				  -	      align	256
    489  6455					      endif
    490  6455
    491  6455
    492  6455				   bmp_96x2_1_04
    493  6455							; *** replace this block with your bimap_04 data block...
    494  6455		       00		      BYTE.b	%00000000
    495  6456		       00		      BYTE.b	%00000000
    496  6457		       00		      BYTE.b	%00000000
    497  6458		       09		      BYTE.b	%00001001
    498  6459		       09		      BYTE.b	%00001001
    499  645a		       0b		      BYTE.b	%00001011
    500  645b		       0b		      BYTE.b	%00001011
    501  645c		       0d		      BYTE.b	%00001101
    502  645d		       0d		      BYTE.b	%00001101
    503  645e		       0d		      BYTE.b	%00001101
    504  645f		       00		      BYTE.b	%00000000
    505  6460		       00		      BYTE.b	%00000000
    506  6461		       00		      BYTE.b	%00000000
    507  6462		       00		      BYTE.b	%00000000
    508  6463		       00		      BYTE.b	%00000000
    509  6464		       00		      BYTE.b	%00000000
    510  6465		       01		      BYTE.b	%00000001
    511  6466		       01		      BYTE.b	%00000001
    512  6467		       01		      BYTE.b	%00000001
    513  6468		       01		      BYTE.b	%00000001
    514  6469		       01		      BYTE.b	%00000001
    515  646a		       03		      BYTE.b	%00000011
    516  646b		       00		      BYTE.b	%00000000
    517  646c		       00		      BYTE.b	%00000000
    518  646d		       00		      BYTE.b	%00000000
    519  646e		       00		      BYTE.b	%00000000
    520  646f		       00		      BYTE.b	%00000000
    521  6470		       80		      BYTE.b	%10000000
    522  6471		       80		      BYTE.b	%10000000
    523  6472		       c0		      BYTE.b	%11000000
    524  6473		       e0		      BYTE.b	%11100000
    525  6474		       e0		      BYTE.b	%11100000
    526  6475		       f0		      BYTE.b	%11110000
    527  6476		       f0		      BYTE.b	%11110000
    528  6477		       f0		      BYTE.b	%11110000
    529  6478		       f8		      BYTE.b	%11111000
    530  6479		       ff		      BYTE.b	%11111111
    531  647a		       ff		      BYTE.b	%11111111
    532  647b		       f8		      BYTE.b	%11111000
    533  647c		       f0		      BYTE.b	%11110000
    534  647d		       f0		      BYTE.b	%11110000
    535  647e		       f0		      BYTE.b	%11110000
    536  647f		       e0		      BYTE.b	%11100000
    537  6480		       e0		      BYTE.b	%11100000
    538  6481		       e0		      BYTE.b	%11100000
    539  6482		       e0		      BYTE.b	%11100000
    540  6483		       f0		      BYTE.b	%11110000
    541  6484		       9c		      BYTE.b	%10011100
    542  6485		       07		      BYTE.b	%00000111
    543  6486		       01		      BYTE.b	%00000001
    544  6487		       00		      BYTE.b	%00000000
    545  6488		       00		      BYTE.b	%00000000
    546  6489		       00		      BYTE.b	%00000000
    547  648a		       00		      BYTE.b	%00000000
    548  648b		       00		      BYTE.b	%00000000
    549  648c		       00		      BYTE.b	%00000000
    550  648d		       00		      BYTE.b	%00000000
    551  648e		       00		      BYTE.b	%00000000
    552  648f		       00		      BYTE.b	%00000000
    553  6490		       00		      BYTE.b	%00000000
    554  6491		       00		      BYTE.b	%00000000
    555  6492		       00		      BYTE.b	%00000000
    556  6493		       00		      BYTE.b	%00000000
    557  6494		       00		      BYTE.b	%00000000
    558  6495		       80		      BYTE.b	%10000000
    559  6496		       81		      BYTE.b	%10000001
    560  6497		       c1		      BYTE.b	%11000001
    561  6498		       c1		      BYTE.b	%11000001
    562  6499		       7f		      BYTE.b	%01111111
    563  649a		       7f		      BYTE.b	%01111111
    564  649b		       63		      BYTE.b	%01100011
    565  649c		       63		      BYTE.b	%01100011
    566  649d		       26		      BYTE.b	%00100110
    567  649e		       36		      BYTE.b	%00110110
    568  649f		       36		      BYTE.b	%00110110
    569  64a0		       1c		      BYTE.b	%00011100
    570  64a1		       1c		      BYTE.b	%00011100
    571  64a2		       1c		      BYTE.b	%00011100
    572  64a3		       08		      BYTE.b	%00001000
    573  64a4		       00		      BYTE.b	%00000000
    574  64a5		       00		      BYTE.b	%00000000
    575  64a6		       00		      BYTE.b	%00000000
    576  64a7		       00		      BYTE.b	%00000000
    577  64a8		       00		      BYTE.b	%00000000
    578  64a9		       00		      BYTE.b	%00000000
    579  64aa
    580  64aa
    581  64aa
    582  64aa				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    583  64aa				  -	      align	256
    584  64aa					      endif
    585  64aa
    586  64aa
    587  64aa				   bmp_96x2_1_05
    588  64aa							; *** replace this block with your bimap_05 data block...
    589  64aa		       00		      BYTE.b	%00000000
    590  64ab		       00		      BYTE.b	%00000000
    591  64ac		       00		      BYTE.b	%00000000
    592  64ad		       02		      BYTE.b	%00000010
    593  64ae		       02		      BYTE.b	%00000010
    594  64af		       03		      BYTE.b	%00000011
    595  64b0		       01		      BYTE.b	%00000001
    596  64b1		       01		      BYTE.b	%00000001
    597  64b2		       01		      BYTE.b	%00000001
    598  64b3		       00		      BYTE.b	%00000000
    599  64b4		       00		      BYTE.b	%00000000
    600  64b5		       00		      BYTE.b	%00000000
    601  64b6		       00		      BYTE.b	%00000000
    602  64b7		       00		      BYTE.b	%00000000
    603  64b8		       00		      BYTE.b	%00000000
    604  64b9		       03		      BYTE.b	%00000011
    605  64ba		       02		      BYTE.b	%00000010
    606  64bb		       04		      BYTE.b	%00000100
    607  64bc		       04		      BYTE.b	%00000100
    608  64bd		       04		      BYTE.b	%00000100
    609  64be		       04		      BYTE.b	%00000100
    610  64bf		       c3		      BYTE.b	%11000011
    611  64c0		       00		      BYTE.b	%00000000
    612  64c1		       00		      BYTE.b	%00000000
    613  64c2		       00		      BYTE.b	%00000000
    614  64c3		       00		      BYTE.b	%00000000
    615  64c4		       00		      BYTE.b	%00000000
    616  64c5		       00		      BYTE.b	%00000000
    617  64c6		       00		      BYTE.b	%00000000
    618  64c7		       00		      BYTE.b	%00000000
    619  64c8		       00		      BYTE.b	%00000000
    620  64c9		       00		      BYTE.b	%00000000
    621  64ca		       00		      BYTE.b	%00000000
    622  64cb		       00		      BYTE.b	%00000000
    623  64cc		       00		      BYTE.b	%00000000
    624  64cd		       00		      BYTE.b	%00000000
    625  64ce		       ff		      BYTE.b	%11111111
    626  64cf		       ff		      BYTE.b	%11111111
    627  64d0		       00		      BYTE.b	%00000000
    628  64d1		       00		      BYTE.b	%00000000
    629  64d2		       00		      BYTE.b	%00000000
    630  64d3		       00		      BYTE.b	%00000000
    631  64d4		       00		      BYTE.b	%00000000
    632  64d5		       00		      BYTE.b	%00000000
    633  64d6		       00		      BYTE.b	%00000000
    634  64d7		       00		      BYTE.b	%00000000
    635  64d8		       00		      BYTE.b	%00000000
    636  64d9		       00		      BYTE.b	%00000000
    637  64da		       0f		      BYTE.b	%00001111
    638  64db		       d9		      BYTE.b	%11011001
    639  64dc		       70		      BYTE.b	%01110000
    640  64dd		       20		      BYTE.b	%00100000
    641  64de		       20		      BYTE.b	%00100000
    642  64df		       20		      BYTE.b	%00100000
    643  64e0		       20		      BYTE.b	%00100000
    644  64e1		       10		      BYTE.b	%00010000
    645  64e2		       1f		      BYTE.b	%00011111
    646  64e3		       06		      BYTE.b	%00000110
    647  64e4		       00		      BYTE.b	%00000000
    648  64e5		       00		      BYTE.b	%00000000
    649  64e6		       00		      BYTE.b	%00000000
    650  64e7		       00		      BYTE.b	%00000000
    651  64e8		       00		      BYTE.b	%00000000
    652  64e9		       00		      BYTE.b	%00000000
    653  64ea		       80		      BYTE.b	%10000000
    654  64eb		       80		      BYTE.b	%10000000
    655  64ec		       80		      BYTE.b	%10000000
    656  64ed		       80		      BYTE.b	%10000000
    657  64ee		       00		      BYTE.b	%00000000
    658  64ef		       00		      BYTE.b	%00000000
    659  64f0		       00		      BYTE.b	%00000000
    660  64f1		       00		      BYTE.b	%00000000
    661  64f2		       00		      BYTE.b	%00000000
    662  64f3		       00		      BYTE.b	%00000000
    663  64f4		       00		      BYTE.b	%00000000
    664  64f5		       01		      BYTE.b	%00000001
    665  64f6		       01		      BYTE.b	%00000001
    666  64f7		       01		      BYTE.b	%00000001
    667  64f8		       01		      BYTE.b	%00000001
    668  64f9		       00		      BYTE.b	%00000000
    669  64fa		       00		      BYTE.b	%00000000
    670  64fb		       00		      BYTE.b	%00000000
    671  64fc		       00		      BYTE.b	%00000000
    672  64fd		       00		      BYTE.b	%00000000
    673  64fe		       00		      BYTE.b	%00000000
    674  64ff
    675  64ff
    676  64ff
    677  64ff					      if	>. != >[.+(bmp_96x2_1_height)]
    678  6500		       00		      align	256
    679  6500					      endif
    680  6500
    681  6500
    682  6500				   bmp_96x2_1_06
    683  6500							; *** replace this block with your bimap_06 data block...
    684  6500		       00		      BYTE.b	%00000000
    685  6501		       00		      BYTE.b	%00000000
    686  6502		       00		      BYTE.b	%00000000
    687  6503		       20		      BYTE.b	%00100000
    688  6504		       21		      BYTE.b	%00100001
    689  6505		       c1		      BYTE.b	%11000001
    690  6506		       41		      BYTE.b	%01000001
    691  6507		       41		      BYTE.b	%01000001
    692  6508		       c1		      BYTE.b	%11000001
    693  6509		       83		      BYTE.b	%10000011
    694  650a		       00		      BYTE.b	%00000000
    695  650b		       00		      BYTE.b	%00000000
    696  650c		       00		      BYTE.b	%00000000
    697  650d		       00		      BYTE.b	%00000000
    698  650e		       00		      BYTE.b	%00000000
    699  650f		       80		      BYTE.b	%10000000
    700  6510		       40		      BYTE.b	%01000000
    701  6511		       40		      BYTE.b	%01000000
    702  6512		       60		      BYTE.b	%01100000
    703  6513		       60		      BYTE.b	%01100000
    704  6514		       40		      BYTE.b	%01000000
    705  6515		       c0		      BYTE.b	%11000000
    706  6516		       00		      BYTE.b	%00000000
    707  6517		       00		      BYTE.b	%00000000
    708  6518		       00		      BYTE.b	%00000000
    709  6519		       00		      BYTE.b	%00000000
    710  651a		       00		      BYTE.b	%00000000
    711  651b		       00		      BYTE.b	%00000000
    712  651c		       00		      BYTE.b	%00000000
    713  651d		       00		      BYTE.b	%00000000
    714  651e		       00		      BYTE.b	%00000000
    715  651f		       00		      BYTE.b	%00000000
    716  6520		       00		      BYTE.b	%00000000
    717  6521		       01		      BYTE.b	%00000001
    718  6522		       01		      BYTE.b	%00000001
    719  6523		       01		      BYTE.b	%00000001
    720  6524		       ff		      BYTE.b	%11111111
    721  6525		       ff		      BYTE.b	%11111111
    722  6526		       01		      BYTE.b	%00000001
    723  6527		       01		      BYTE.b	%00000001
    724  6528		       01		      BYTE.b	%00000001
    725  6529		       00		      BYTE.b	%00000000
    726  652a		       00		      BYTE.b	%00000000
    727  652b		       00		      BYTE.b	%00000000
    728  652c		       00		      BYTE.b	%00000000
    729  652d		       00		      BYTE.b	%00000000
    730  652e		       00		      BYTE.b	%00000000
    731  652f		       00		      BYTE.b	%00000000
    732  6530		       00		      BYTE.b	%00000000
    733  6531		       80		      BYTE.b	%10000000
    734  6532		       c0		      BYTE.b	%11000000
    735  6533		       40		      BYTE.b	%01000000
    736  6534		       40		      BYTE.b	%01000000
    737  6535		       40		      BYTE.b	%01000000
    738  6536		       40		      BYTE.b	%01000000
    739  6537		       80		      BYTE.b	%10000000
    740  6538		       80		      BYTE.b	%10000000
    741  6539		       00		      BYTE.b	%00000000
    742  653a		       00		      BYTE.b	%00000000
    743  653b		       00		      BYTE.b	%00000000
    744  653c		       00		      BYTE.b	%00000000
    745  653d		       00		      BYTE.b	%00000000
    746  653e		       00		      BYTE.b	%00000000
    747  653f		       00		      BYTE.b	%00000000
    748  6540		       20		      BYTE.b	%00100000
    749  6541		       70		      BYTE.b	%01110000
    750  6542		       70		      BYTE.b	%01110000
    751  6543		       70		      BYTE.b	%01110000
    752  6544		       79		      BYTE.b	%01111001
    753  6545		       59		      BYTE.b	%01011001
    754  6546		       d9		      BYTE.b	%11011001
    755  6547		       c9		      BYTE.b	%11001001
    756  6548		       c9		      BYTE.b	%11001001
    757  6549		       cf		      BYTE.b	%11001111
    758  654a		       8f		      BYTE.b	%10001111
    759  654b		       8f		      BYTE.b	%10001111
    760  654c		       86		      BYTE.b	%10000110
    761  654d		       86		      BYTE.b	%10000110
    762  654e		       06		      BYTE.b	%00000110
    763  654f		       00		      BYTE.b	%00000000
    764  6550		       00		      BYTE.b	%00000000
    765  6551		       00		      BYTE.b	%00000000
    766  6552		       00		      BYTE.b	%00000000
    767  6553		       00		      BYTE.b	%00000000
    768  6554		       00		      BYTE.b	%00000000
    769  6555
    770  6555
    771  6555
    772  6555				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    773  6555				  -	      align	256
    774  6555					      endif
    775  6555
    776  6555
    777  6555				   bmp_96x2_1_07
    778  6555							; *** replace this block with your bimap_07 data block...
    779  6555		       00		      BYTE.b	%00000000
    780  6556		       00		      BYTE.b	%00000000
    781  6557		       00		      BYTE.b	%00000000
    782  6558		       01		      BYTE.b	%00000001
    783  6559		       01		      BYTE.b	%00000001
    784  655a		       01		      BYTE.b	%00000001
    785  655b		       01		      BYTE.b	%00000001
    786  655c		       01		      BYTE.b	%00000001
    787  655d		       01		      BYTE.b	%00000001
    788  655e		       c7		      BYTE.b	%11000111
    789  655f		       00		      BYTE.b	%00000000
    790  6560		       00		      BYTE.b	%00000000
    791  6561		       00		      BYTE.b	%00000000
    792  6562		       00		      BYTE.b	%00000000
    793  6563		       00		      BYTE.b	%00000000
    794  6564		       1c		      BYTE.b	%00011100
    795  6565		       02		      BYTE.b	%00000010
    796  6566		       02		      BYTE.b	%00000010
    797  6567		       0c		      BYTE.b	%00001100
    798  6568		       10		      BYTE.b	%00010000
    799  6569		       10		      BYTE.b	%00010000
    800  656a		       1e		      BYTE.b	%00011110
    801  656b		       00		      BYTE.b	%00000000
    802  656c		       00		      BYTE.b	%00000000
    803  656d		       00		      BYTE.b	%00000000
    804  656e		       00		      BYTE.b	%00000000
    805  656f		       02		      BYTE.b	%00000010
    806  6570		       0f		      BYTE.b	%00001111
    807  6571		       3f		      BYTE.b	%00111111
    808  6572		       7f		      BYTE.b	%01111111
    809  6573		       7f		      BYTE.b	%01111111
    810  6574		       ff		      BYTE.b	%11111111
    811  6575		       ff		      BYTE.b	%11111111
    812  6576		       ff		      BYTE.b	%11111111
    813  6577		       ff		      BYTE.b	%11111111
    814  6578		       ff		      BYTE.b	%11111111
    815  6579		       ff		      BYTE.b	%11111111
    816  657a		       ff		      BYTE.b	%11111111
    817  657b		       ff		      BYTE.b	%11111111
    818  657c		       ff		      BYTE.b	%11111111
    819  657d		       ff		      BYTE.b	%11111111
    820  657e		       ff		      BYTE.b	%11111111
    821  657f		       ff		      BYTE.b	%11111111
    822  6580		       7f		      BYTE.b	%01111111
    823  6581		       3f		      BYTE.b	%00111111
    824  6582		       3f		      BYTE.b	%00111111
    825  6583		       0f		      BYTE.b	%00001111
    826  6584		       02		      BYTE.b	%00000010
    827  6585		       00		      BYTE.b	%00000000
    828  6586		       00		      BYTE.b	%00000000
    829  6587		       00		      BYTE.b	%00000000
    830  6588		       00		      BYTE.b	%00000000
    831  6589		       00		      BYTE.b	%00000000
    832  658a		       00		      BYTE.b	%00000000
    833  658b		       00		      BYTE.b	%00000000
    834  658c		       00		      BYTE.b	%00000000
    835  658d		       00		      BYTE.b	%00000000
    836  658e		       00		      BYTE.b	%00000000
    837  658f		       00		      BYTE.b	%00000000
    838  6590		       00		      BYTE.b	%00000000
    839  6591		       00		      BYTE.b	%00000000
    840  6592		       00		      BYTE.b	%00000000
    841  6593		       00		      BYTE.b	%00000000
    842  6594		       00		      BYTE.b	%00000000
    843  6595		       40		      BYTE.b	%01000000
    844  6596		       e0		      BYTE.b	%11100000
    845  6597		       e0		      BYTE.b	%11100000
    846  6598		       e0		      BYTE.b	%11100000
    847  6599		       e0		      BYTE.b	%11100000
    848  659a		       a0		      BYTE.b	%10100000
    849  659b		       b0		      BYTE.b	%10110000
    850  659c		       30		      BYTE.b	%00110000
    851  659d		       30		      BYTE.b	%00110000
    852  659e		       10		      BYTE.b	%00010000
    853  659f		       10		      BYTE.b	%00010000
    854  65a0		       18		      BYTE.b	%00011000
    855  65a1		       18		      BYTE.b	%00011000
    856  65a2		       18		      BYTE.b	%00011000
    857  65a3		       08		      BYTE.b	%00001000
    858  65a4		       00		      BYTE.b	%00000000
    859  65a5		       00		      BYTE.b	%00000000
    860  65a6		       00		      BYTE.b	%00000000
    861  65a7		       00		      BYTE.b	%00000000
    862  65a8		       00		      BYTE.b	%00000000
    863  65a9		       00		      BYTE.b	%00000000
    864  65aa
    865  65aa
    866  65aa
    867  65aa				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    868  65aa				  -	      align	256
    869  65aa					      endif
    870  65aa
    871  65aa
    872  65aa				   bmp_96x2_1_08
    873  65aa							; *** replace this block with your bimap_08 data block...
    874  65aa		       00		      BYTE.b	%00000000
    875  65ab		       00		      BYTE.b	%00000000
    876  65ac		       00		      BYTE.b	%00000000
    877  65ad		       08		      BYTE.b	%00001000
    878  65ae		       08		      BYTE.b	%00001000
    879  65af		       07		      BYTE.b	%00000111
    880  65b0		       05		      BYTE.b	%00000101
    881  65b1		       05		      BYTE.b	%00000101
    882  65b2		       07		      BYTE.b	%00000111
    883  65b3		       82		      BYTE.b	%10000010
    884  65b4		       00		      BYTE.b	%00000000
    885  65b5		       00		      BYTE.b	%00000000
    886  65b6		       00		      BYTE.b	%00000000
    887  65b7		       00		      BYTE.b	%00000000
    888  65b8		       00		      BYTE.b	%00000000
    889  65b9		       00		      BYTE.b	%00000000
    890  65ba		       18		      BYTE.b	%00011000
    891  65bb		       18		      BYTE.b	%00011000
    892  65bc		       18		      BYTE.b	%00011000
    893  65bd		       18		      BYTE.b	%00011000
    894  65be		       18		      BYTE.b	%00011000
    895  65bf		       3c		      BYTE.b	%00111100
    896  65c0		       00		      BYTE.b	%00000000
    897  65c1		       00		      BYTE.b	%00000000
    898  65c2		       00		      BYTE.b	%00000000
    899  65c3		       00		      BYTE.b	%00000000
    900  65c4		       c0		      BYTE.b	%11000000
    901  65c5		       f0		      BYTE.b	%11110000
    902  65c6		       f8		      BYTE.b	%11111000
    903  65c7		       fc		      BYTE.b	%11111100
    904  65c8		       fe		      BYTE.b	%11111110
    905  65c9		       fe		      BYTE.b	%11111110
    906  65ca		       ff		      BYTE.b	%11111111
    907  65cb		       ff		      BYTE.b	%11111111
    908  65cc		       ff		      BYTE.b	%11111111
    909  65cd		       ff		      BYTE.b	%11111111
    910  65ce		       ff		      BYTE.b	%11111111
    911  65cf		       ff		      BYTE.b	%11111111
    912  65d0		       ff		      BYTE.b	%11111111
    913  65d1		       ff		      BYTE.b	%11111111
    914  65d2		       ff		      BYTE.b	%11111111
    915  65d3		       ff		      BYTE.b	%11111111
    916  65d4		       fe		      BYTE.b	%11111110
    917  65d5		       fe		      BYTE.b	%11111110
    918  65d6		       fc		      BYTE.b	%11111100
    919  65d7		       f8		      BYTE.b	%11111000
    920  65d8		       f0		      BYTE.b	%11110000
    921  65d9		       00		      BYTE.b	%00000000
    922  65da		       00		      BYTE.b	%00000000
    923  65db		       00		      BYTE.b	%00000000
    924  65dc		       00		      BYTE.b	%00000000
    925  65dd		       00		      BYTE.b	%00000000
    926  65de		       00		      BYTE.b	%00000000
    927  65df		       00		      BYTE.b	%00000000
    928  65e0		       00		      BYTE.b	%00000000
    929  65e1		       00		      BYTE.b	%00000000
    930  65e2		       00		      BYTE.b	%00000000
    931  65e3		       00		      BYTE.b	%00000000
    932  65e4		       00		      BYTE.b	%00000000
    933  65e5		       00		      BYTE.b	%00000000
    934  65e6		       00		      BYTE.b	%00000000
    935  65e7		       00		      BYTE.b	%00000000
    936  65e8		       00		      BYTE.b	%00000000
    937  65e9		       00		      BYTE.b	%00000000
    938  65ea		       0f		      BYTE.b	%00001111
    939  65eb		       0f		      BYTE.b	%00001111
    940  65ec		       08		      BYTE.b	%00001000
    941  65ed		       08		      BYTE.b	%00001000
    942  65ee		       08		      BYTE.b	%00001000
    943  65ef		       08		      BYTE.b	%00001000
    944  65f0		       08		      BYTE.b	%00001000
    945  65f1		       08		      BYTE.b	%00001000
    946  65f2		       08		      BYTE.b	%00001000
    947  65f3		       08		      BYTE.b	%00001000
    948  65f4		       08		      BYTE.b	%00001000
    949  65f5		       08		      BYTE.b	%00001000
    950  65f6		       08		      BYTE.b	%00001000
    951  65f7		       0f		      BYTE.b	%00001111
    952  65f8		       0f		      BYTE.b	%00001111
    953  65f9		       00		      BYTE.b	%00000000
    954  65fa		       00		      BYTE.b	%00000000
    955  65fb		       00		      BYTE.b	%00000000
    956  65fc		       00		      BYTE.b	%00000000
    957  65fd		       00		      BYTE.b	%00000000
    958  65fe		       00		      BYTE.b	%00000000
    959  65ff
    960  65ff
    961  65ff
    962  65ff					      if	>. != >[.+(bmp_96x2_1_height)]
    963  6600		       00		      align	256
    964  6600					      endif
    965  6600
    966  6600
    967  6600				   bmp_96x2_1_09
    968  6600							; *** replace this block with your bimap_09 data block...
    969  6600		       00		      BYTE.b	%00000000
    970  6601		       00		      BYTE.b	%00000000
    971  6602		       00		      BYTE.b	%00000000
    972  6603		       87		      BYTE.b	%10000111
    973  6604		       8c		      BYTE.b	%10001100
    974  6605		       88		      BYTE.b	%10001000
    975  6606		       08		      BYTE.b	%00001000
    976  6607		       08		      BYTE.b	%00001000
    977  6608		       08		      BYTE.b	%00001000
    978  6609		       07		      BYTE.b	%00000111
    979  660a		       00		      BYTE.b	%00000000
    980  660b		       00		      BYTE.b	%00000000
    981  660c		       00		      BYTE.b	%00000000
    982  660d		       00		      BYTE.b	%00000000
    983  660e		       00		      BYTE.b	%00000000
    984  660f		       44		      BYTE.b	%01000100
    985  6610		       44		      BYTE.b	%01000100
    986  6611		       78		      BYTE.b	%01111000
    987  6612		       28		      BYTE.b	%00101000
    988  6613		       28		      BYTE.b	%00101000
    989  6614		       38		      BYTE.b	%00111000
    990  6615		       10		      BYTE.b	%00010000
    991  6616		       00		      BYTE.b	%00000000
    992  6617		       00		      BYTE.b	%00000000
    993  6618		       00		      BYTE.b	%00000000
    994  6619		       00		      BYTE.b	%00000000
    995  661a		       00		      BYTE.b	%00000000
    996  661b		       00		      BYTE.b	%00000000
    997  661c		       00		      BYTE.b	%00000000
    998  661d		       00		      BYTE.b	%00000000
    999  661e		       00		      BYTE.b	%00000000
   1000  661f		       00		      BYTE.b	%00000000
   1001  6620		       00		      BYTE.b	%00000000
   1002  6621		       00		      BYTE.b	%00000000
   1003  6622		       00		      BYTE.b	%00000000
   1004  6623		       80		      BYTE.b	%10000000
   1005  6624		       80		      BYTE.b	%10000000
   1006  6625		       80		      BYTE.b	%10000000
   1007  6626		       80		      BYTE.b	%10000000
   1008  6627		       00		      BYTE.b	%00000000
   1009  6628		       00		      BYTE.b	%00000000
   1010  6629		       00		      BYTE.b	%00000000
   1011  662a		       00		      BYTE.b	%00000000
   1012  662b		       00		      BYTE.b	%00000000
   1013  662c		       00		      BYTE.b	%00000000
   1014  662d		       00		      BYTE.b	%00000000
   1015  662e		       00		      BYTE.b	%00000000
   1016  662f		       00		      BYTE.b	%00000000
   1017  6630		       00		      BYTE.b	%00000000
   1018  6631		       00		      BYTE.b	%00000000
   1019  6632		       00		      BYTE.b	%00000000
   1020  6633		       00		      BYTE.b	%00000000
   1021  6634		       00		      BYTE.b	%00000000
   1022  6635		       00		      BYTE.b	%00000000
   1023  6636		       00		      BYTE.b	%00000000
   1024  6637		       00		      BYTE.b	%00000000
   1025  6638		       00		      BYTE.b	%00000000
   1026  6639		       00		      BYTE.b	%00000000
   1027  663a		       00		      BYTE.b	%00000000
   1028  663b		       00		      BYTE.b	%00000000
   1029  663c		       00		      BYTE.b	%00000000
   1030  663d		       00		      BYTE.b	%00000000
   1031  663e		       00		      BYTE.b	%00000000
   1032  663f		       00		      BYTE.b	%00000000
   1033  6640		       80		      BYTE.b	%10000000
   1034  6641		       e0		      BYTE.b	%11100000
   1035  6642		       70		      BYTE.b	%01110000
   1036  6643		       30		      BYTE.b	%00110000
   1037  6644		       18		      BYTE.b	%00011000
   1038  6645		       18		      BYTE.b	%00011000
   1039  6646		       18		      BYTE.b	%00011000
   1040  6647		       18		      BYTE.b	%00011000
   1041  6648		       18		      BYTE.b	%00011000
   1042  6649		       18		      BYTE.b	%00011000
   1043  664a		       18		      BYTE.b	%00011000
   1044  664b		       30		      BYTE.b	%00110000
   1045  664c		       70		      BYTE.b	%01110000
   1046  664d		       e0		      BYTE.b	%11100000
   1047  664e		       80		      BYTE.b	%10000000
   1048  664f		       00		      BYTE.b	%00000000
   1049  6650		       00		      BYTE.b	%00000000
   1050  6651		       00		      BYTE.b	%00000000
   1051  6652		       00		      BYTE.b	%00000000
   1052  6653		       00		      BYTE.b	%00000000
   1053  6654		       00		      BYTE.b	%00000000
   1054  6655
   1055  6655
   1056  6655
   1057  6655				  -	      if	>. != >[.+(bmp_96x2_1_height)]
   1058  6655				  -	      align	256
   1059  6655					      endif
   1060  6655
   1061  6655
   1062  6655				   bmp_96x2_1_10
   1063  6655							; *** replace this block with your bimap_10 data block...
   1064  6655		       00		      BYTE.b	%00000000
   1065  6656		       00		      BYTE.b	%00000000
   1066  6657		       00		      BYTE.b	%00000000
   1067  6658		       01		      BYTE.b	%00000001
   1068  6659		       8a		      BYTE.b	%10001010
   1069  665a		       0a		      BYTE.b	%00001010
   1070  665b		       0c		      BYTE.b	%00001100
   1071  665c		       0c		      BYTE.b	%00001100
   1072  665d		       0e		      BYTE.b	%00001110
   1073  665e		       8a		      BYTE.b	%10001010
   1074  665f		       00		      BYTE.b	%00000000
   1075  6660		       00		      BYTE.b	%00000000
   1076  6661		       00		      BYTE.b	%00000000
   1077  6662		       00		      BYTE.b	%00000000
   1078  6663		       00		      BYTE.b	%00000000
   1079  6664		       48		      BYTE.b	%01001000
   1080  6665		       48		      BYTE.b	%01001000
   1081  6666		       50		      BYTE.b	%01010000
   1082  6667		       70		      BYTE.b	%01110000
   1083  6668		       48		      BYTE.b	%01001000
   1084  6669		       48		      BYTE.b	%01001000
   1085  666a		       78		      BYTE.b	%01111000
   1086  666b		       00		      BYTE.b	%00000000
   1087  666c		       00		      BYTE.b	%00000000
   1088  666d		       00		      BYTE.b	%00000000
   1089  666e		       00		      BYTE.b	%00000000
   1090  666f		       00		      BYTE.b	%00000000
   1091  6670		       00		      BYTE.b	%00000000
   1092  6671		       00		      BYTE.b	%00000000
   1093  6672		       00		      BYTE.b	%00000000
   1094  6673		       00		      BYTE.b	%00000000
   1095  6674		       00		      BYTE.b	%00000000
   1096  6675		       00		      BYTE.b	%00000000
   1097  6676		       00		      BYTE.b	%00000000
   1098  6677		       00		      BYTE.b	%00000000
   1099  6678		       00		      BYTE.b	%00000000
   1100  6679		       00		      BYTE.b	%00000000
   1101  667a		       00		      BYTE.b	%00000000
   1102  667b		       00		      BYTE.b	%00000000
   1103  667c		       00		      BYTE.b	%00000000
   1104  667d		       00		      BYTE.b	%00000000
   1105  667e		       00		      BYTE.b	%00000000
   1106  667f		       00		      BYTE.b	%00000000
   1107  6680		       00		      BYTE.b	%00000000
   1108  6681		       00		      BYTE.b	%00000000
   1109  6682		       00		      BYTE.b	%00000000
   1110  6683		       00		      BYTE.b	%00000000
   1111  6684		       00		      BYTE.b	%00000000
   1112  6685		       00		      BYTE.b	%00000000
   1113  6686		       00		      BYTE.b	%00000000
   1114  6687		       00		      BYTE.b	%00000000
   1115  6688		       00		      BYTE.b	%00000000
   1116  6689		       00		      BYTE.b	%00000000
   1117  668a		       00		      BYTE.b	%00000000
   1118  668b		       00		      BYTE.b	%00000000
   1119  668c		       00		      BYTE.b	%00000000
   1120  668d		       00		      BYTE.b	%00000000
   1121  668e		       00		      BYTE.b	%00000000
   1122  668f		       00		      BYTE.b	%00000000
   1123  6690		       00		      BYTE.b	%00000000
   1124  6691		       00		      BYTE.b	%00000000
   1125  6692		       00		      BYTE.b	%00000000
   1126  6693		       00		      BYTE.b	%00000000
   1127  6694		       00		      BYTE.b	%00000000
   1128  6695		       01		      BYTE.b	%00000001
   1129  6696		       01		      BYTE.b	%00000001
   1130  6697		       01		      BYTE.b	%00000001
   1131  6698		       01		      BYTE.b	%00000001
   1132  6699		       01		      BYTE.b	%00000001
   1133  669a		       01		      BYTE.b	%00000001
   1134  669b		       01		      BYTE.b	%00000001
   1135  669c		       03		      BYTE.b	%00000011
   1136  669d		       03		      BYTE.b	%00000011
   1137  669e		       06		      BYTE.b	%00000110
   1138  669f		       06		      BYTE.b	%00000110
   1139  66a0		       0c		      BYTE.b	%00001100
   1140  66a1		       0c		      BYTE.b	%00001100
   1141  66a2		       18		      BYTE.b	%00011000
   1142  66a3		       18		      BYTE.b	%00011000
   1143  66a4		       00		      BYTE.b	%00000000
   1144  66a5		       00		      BYTE.b	%00000000
   1145  66a6		       00		      BYTE.b	%00000000
   1146  66a7		       00		      BYTE.b	%00000000
   1147  66a8		       00		      BYTE.b	%00000000
   1148  66a9		       00		      BYTE.b	%00000000
   1149  66aa
   1150  66aa
   1151  66aa
   1152  66aa				  -	      if	>. != >[.+(bmp_96x2_1_height)]
   1153  66aa				  -	      align	256
   1154  66aa					      endif
   1155  66aa
   1156  66aa
   1157  66aa				   bmp_96x2_1_11
   1158  66aa							; *** replace this block with your bimap_11 data block...
   1159  66aa		       00		      BYTE.b	%00000000
   1160  66ab		       00		      BYTE.b	%00000000
   1161  66ac		       00		      BYTE.b	%00000000
   1162  66ad		       00		      BYTE.b	%00000000
   1163  66ae		       00		      BYTE.b	%00000000
   1164  66af		       00		      BYTE.b	%00000000
   1165  66b0		       00		      BYTE.b	%00000000
   1166  66b1		       00		      BYTE.b	%00000000
   1167  66b2		       00		      BYTE.b	%00000000
   1168  66b3		       00		      BYTE.b	%00000000
   1169  66b4		       00		      BYTE.b	%00000000
   1170  66b5		       00		      BYTE.b	%00000000
   1171  66b6		       00		      BYTE.b	%00000000
   1172  66b7		       00		      BYTE.b	%00000000
   1173  66b8		       00		      BYTE.b	%00000000
   1174  66b9		       20		      BYTE.b	%00100000
   1175  66ba		       20		      BYTE.b	%00100000
   1176  66bb		       20		      BYTE.b	%00100000
   1177  66bc		       20		      BYTE.b	%00100000
   1178  66bd		       20		      BYTE.b	%00100000
   1179  66be		       20		      BYTE.b	%00100000
   1180  66bf		       f8		      BYTE.b	%11111000
   1181  66c0		       00		      BYTE.b	%00000000
   1182  66c1		       00		      BYTE.b	%00000000
   1183  66c2		       00		      BYTE.b	%00000000
   1184  66c3		       00		      BYTE.b	%00000000
   1185  66c4		       00		      BYTE.b	%00000000
   1186  66c5		       00		      BYTE.b	%00000000
   1187  66c6		       00		      BYTE.b	%00000000
   1188  66c7		       00		      BYTE.b	%00000000
   1189  66c8		       00		      BYTE.b	%00000000
   1190  66c9		       00		      BYTE.b	%00000000
   1191  66ca		       00		      BYTE.b	%00000000
   1192  66cb		       00		      BYTE.b	%00000000
   1193  66cc		       00		      BYTE.b	%00000000
   1194  66cd		       00		      BYTE.b	%00000000
   1195  66ce		       00		      BYTE.b	%00000000
   1196  66cf		       00		      BYTE.b	%00000000
   1197  66d0		       00		      BYTE.b	%00000000
   1198  66d1		       00		      BYTE.b	%00000000
   1199  66d2		       00		      BYTE.b	%00000000
   1200  66d3		       00		      BYTE.b	%00000000
   1201  66d4		       00		      BYTE.b	%00000000
   1202  66d5		       00		      BYTE.b	%00000000
   1203  66d6		       00		      BYTE.b	%00000000
   1204  66d7		       00		      BYTE.b	%00000000
   1205  66d8		       00		      BYTE.b	%00000000
   1206  66d9		       00		      BYTE.b	%00000000
   1207  66da		       00		      BYTE.b	%00000000
   1208  66db		       00		      BYTE.b	%00000000
   1209  66dc		       00		      BYTE.b	%00000000
   1210  66dd		       00		      BYTE.b	%00000000
   1211  66de		       00		      BYTE.b	%00000000
   1212  66df		       00		      BYTE.b	%00000000
   1213  66e0		       00		      BYTE.b	%00000000
   1214  66e1		       00		      BYTE.b	%00000000
   1215  66e2		       00		      BYTE.b	%00000000
   1216  66e3		       00		      BYTE.b	%00000000
   1217  66e4		       00		      BYTE.b	%00000000
   1218  66e5		       00		      BYTE.b	%00000000
   1219  66e6		       00		      BYTE.b	%00000000
   1220  66e7		       00		      BYTE.b	%00000000
   1221  66e8		       00		      BYTE.b	%00000000
   1222  66e9		       00		      BYTE.b	%00000000
   1223  66ea		       00		      BYTE.b	%00000000
   1224  66eb		       80		      BYTE.b	%10000000
   1225  66ec		       80		      BYTE.b	%10000000
   1226  66ed		       80		      BYTE.b	%10000000
   1227  66ee		       80		      BYTE.b	%10000000
   1228  66ef		       80		      BYTE.b	%10000000
   1229  66f0		       80		      BYTE.b	%10000000
   1230  66f1		       80		      BYTE.b	%10000000
   1231  66f2		       80		      BYTE.b	%10000000
   1232  66f3		       c0		      BYTE.b	%11000000
   1233  66f4		       40		      BYTE.b	%01000000
   1234  66f5		       60		      BYTE.b	%01100000
   1235  66f6		       30		      BYTE.b	%00110000
   1236  66f7		       30		      BYTE.b	%00110000
   1237  66f8		       10		      BYTE.b	%00010000
   1238  66f9		       00		      BYTE.b	%00000000
   1239  66fa		       00		      BYTE.b	%00000000
   1240  66fb		       00		      BYTE.b	%00000000
   1241  66fc		       00		      BYTE.b	%00000000
   1242  66fd		       00		      BYTE.b	%00000000
   1243  66fe		       00		      BYTE.b	%00000000
   1244  66ff
   1245  66ff
   1246  66ff
------- FILE titlescreen/asm/titlescreen.asm
    274  66ff					      endif
    275  66ff				  -	      ifconst	mk_96x2_2_on
    276  66ff				  -	      include	"titlescreen/96x2_2_image.asm"
    277  66ff					      endif
    278  66ff				  -	      ifconst	mk_96x2_3_on
    279  66ff				  -	      include	"titlescreen/96x2_3_image.asm"
    280  66ff					      endif
    281  66ff				  -	      ifconst	mk_96x2_4_on
    282  66ff				  -	      include	"titlescreen/96x2_4_image.asm"
    283  66ff					      endif
    284  66ff				  -	      ifconst	mk_96x2_5_on
    285  66ff				  -	      include	"titlescreen/96x2_5_image.asm"
    286  66ff					      endif
    287  66ff				  -	      ifconst	mk_96x2_6_on
    288  66ff				  -	      include	"titlescreen/96x2_6_image.asm"
    289  66ff					      endif
    290  66ff				  -	      ifconst	mk_96x2_7_on
    291  66ff				  -	      include	"titlescreen/96x2_7_image.asm"
    292  66ff					      endif
    293  66ff				  -	      ifconst	mk_96x2_8_on
    294  66ff				  -	      include	"titlescreen/96x2_8_image.asm"
    295  66ff					      endif
    296  66ff
    297  66ff				  -	      ifconst	mk_player_on
    298  66ff				  -	      include	"titlescreen/player_image.asm"
    299  66ff					      endif
    300  66ff
    301  66ff				  -	      ifconst	mk_score_on
    302  66ff				  -	      include	"titlescreen/score_image.asm"
    303  66ff					      endif
    304  66ff
    305  66ff				  -	      ifconst	mk_gameselect_on
    306  66ff				  -	      include	"titlescreen/gameselect_image.asm"
    307  66ff					      endif
    308  66ff
    309  66ff				  -	      ifconst	mk_player_on
    310  66ff				  -	      include	"titlescreen/asm/player_kernel.asm"
    311  66ff					      endif		;mk_player_on
    312  66ff
    313  66ff
------- FILE c:\Users\tazrog\Documents\Atari\BrawdyBAS\brawdy.bas.asm
   7091  66ff
   7092  66ff				   .return
   7093  66ff							; return
   7094  66ff
   7095  66ff				   .
   7096  66ff							; 
   7097  66ff
   7098  66ff					      if	ECHO6
      2261 bytes of ROM space left in bank 6
   7099  66ff					      echo	"    ",[(start_bank6 - *)]d , "bytes of ROM space left in bank 6")
   7100  66ff					      endif
   7101  66ff		       00 01	   ECHO6      =	1
   7102  6fd4					      ORG	$6FF4-bscode_length
   7103  6fd4					      RORG	$BFF4-bscode_length
   7104  6fd4		       a2 ff	   start_bank6 ldx	#$ff
   7105  6fd6					      ifconst	FASTFETCH	; using DPC+
   7106  6fd6		       8e 58 10 	      stx	FASTFETCH
   7107  6fd9					      endif
   7108  6fd9		       9a		      txs
   7109  6fda				  -	      if	bankswitch == 64
   7110  6fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   7111  6fda					      else
   7112  6fda		       a9 18		      lda	#>(start-1)
   7113  6fdc					      endif
   7114  6fdc		       48		      pha
   7115  6fdd		       a9 e3		      lda	#<(start-1)
   7116  6fdf		       48		      pha
   7117  6fe0		       48		      pha
   7118  6fe1		       8a		      txa
   7119  6fe2		       48		      pha
   7120  6fe3		       ba		      tsx
   7121  6fe4					      if	bankswitch != 64
   7122  6fe4		       b5 04		      lda	4,x	; get high byte of return address
   7123  6fe6		       2a		      rol
   7124  6fe7		       2a		      rol
   7125  6fe8		       2a		      rol
   7126  6fe9		       2a		      rol
   7127  6fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   7128  6fec		       aa		      tax
   7129  6fed		       e8		      inx
   7130  6fee				  -	      else
   7131  6fee				  -	      lda	4,x	; get high byte of return address
   7132  6fee				  -	      tay
   7133  6fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   7134  6fee				  -	      sta	4,x
   7135  6fee				  -	      tya
   7136  6fee				  -	      lsr
   7137  6fee				  -	      lsr
   7138  6fee				  -	      lsr
   7139  6fee				  -	      lsr
   7140  6fee				  -	      tax
   7141  6fee				  -	      inx
   7142  6fee					      endif
   7143  6fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   7144  6ff1		       68		      pla
   7145  6ff2		       aa		      tax
   7146  6ff3		       68		      pla
   7147  6ff4		       60		      rts
   7148  6ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   7149  6ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   7150  6ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   7151  6ff5					      endif
   7152  6ffc					      ORG	$6FFC
   7153  6ffc					      RORG	$BFFC
   7154  6ffc		       d4 bf		      .word.w	(start_bank6 & $ffff)
   7155  6ffe		       d4 bf		      .word.w	(start_bank6 & $ffff)
   7156  7000					      ORG	$7000
   7157  7000					      RORG	$D000
   7158  7000					      repeat	129
   7159  7000		       00		      .byte.b	0
   7158  7000					      repend
   7159  7001		       00		      .byte.b	0
   7158  7001					      repend
   7159  7002		       00		      .byte.b	0
   7158  7002					      repend
   7159  7003		       00		      .byte.b	0
   7158  7003					      repend
   7159  7004		       00		      .byte.b	0
   7158  7004					      repend
   7159  7005		       00		      .byte.b	0
   7158  7005					      repend
   7159  7006		       00		      .byte.b	0
   7158  7006					      repend
   7159  7007		       00		      .byte.b	0
   7158  7007					      repend
   7159  7008		       00		      .byte.b	0
   7158  7008					      repend
   7159  7009		       00		      .byte.b	0
   7158  7009					      repend
   7159  700a		       00		      .byte.b	0
   7158  700a					      repend
   7159  700b		       00		      .byte.b	0
   7158  700b					      repend
   7159  700c		       00		      .byte.b	0
   7158  700c					      repend
   7159  700d		       00		      .byte.b	0
   7158  700d					      repend
   7159  700e		       00		      .byte.b	0
   7158  700e					      repend
   7159  700f		       00		      .byte.b	0
   7158  700f					      repend
   7159  7010		       00		      .byte.b	0
   7158  7010					      repend
   7159  7011		       00		      .byte.b	0
   7158  7011					      repend
   7159  7012		       00		      .byte.b	0
   7158  7012					      repend
   7159  7013		       00		      .byte.b	0
   7158  7013					      repend
   7159  7014		       00		      .byte.b	0
   7158  7014					      repend
   7159  7015		       00		      .byte.b	0
   7158  7015					      repend
   7159  7016		       00		      .byte.b	0
   7158  7016					      repend
   7159  7017		       00		      .byte.b	0
   7158  7017					      repend
   7159  7018		       00		      .byte.b	0
   7158  7018					      repend
   7159  7019		       00		      .byte.b	0
   7158  7019					      repend
   7159  701a		       00		      .byte.b	0
   7158  701a					      repend
   7159  701b		       00		      .byte.b	0
   7158  701b					      repend
   7159  701c		       00		      .byte.b	0
   7158  701c					      repend
   7159  701d		       00		      .byte.b	0
   7158  701d					      repend
   7159  701e		       00		      .byte.b	0
   7158  701e					      repend
   7159  701f		       00		      .byte.b	0
   7158  701f					      repend
   7159  7020		       00		      .byte.b	0
   7158  7020					      repend
   7159  7021		       00		      .byte.b	0
   7158  7021					      repend
   7159  7022		       00		      .byte.b	0
   7158  7022					      repend
   7159  7023		       00		      .byte.b	0
   7158  7023					      repend
   7159  7024		       00		      .byte.b	0
   7158  7024					      repend
   7159  7025		       00		      .byte.b	0
   7158  7025					      repend
   7159  7026		       00		      .byte.b	0
   7158  7026					      repend
   7159  7027		       00		      .byte.b	0
   7158  7027					      repend
   7159  7028		       00		      .byte.b	0
   7158  7028					      repend
   7159  7029		       00		      .byte.b	0
   7158  7029					      repend
   7159  702a		       00		      .byte.b	0
   7158  702a					      repend
   7159  702b		       00		      .byte.b	0
   7158  702b					      repend
   7159  702c		       00		      .byte.b	0
   7158  702c					      repend
   7159  702d		       00		      .byte.b	0
   7158  702d					      repend
   7159  702e		       00		      .byte.b	0
   7158  702e					      repend
   7159  702f		       00		      .byte.b	0
   7158  702f					      repend
   7159  7030		       00		      .byte.b	0
   7158  7030					      repend
   7159  7031		       00		      .byte.b	0
   7158  7031					      repend
   7159  7032		       00		      .byte.b	0
   7158  7032					      repend
   7159  7033		       00		      .byte.b	0
   7158  7033					      repend
   7159  7034		       00		      .byte.b	0
   7158  7034					      repend
   7159  7035		       00		      .byte.b	0
   7158  7035					      repend
   7159  7036		       00		      .byte.b	0
   7158  7036					      repend
   7159  7037		       00		      .byte.b	0
   7158  7037					      repend
   7159  7038		       00		      .byte.b	0
   7158  7038					      repend
   7159  7039		       00		      .byte.b	0
   7158  7039					      repend
   7159  703a		       00		      .byte.b	0
   7158  703a					      repend
   7159  703b		       00		      .byte.b	0
   7158  703b					      repend
   7159  703c		       00		      .byte.b	0
   7158  703c					      repend
   7159  703d		       00		      .byte.b	0
   7158  703d					      repend
   7159  703e		       00		      .byte.b	0
   7158  703e					      repend
   7159  703f		       00		      .byte.b	0
   7158  703f					      repend
   7159  7040		       00		      .byte.b	0
   7158  7040					      repend
   7159  7041		       00		      .byte.b	0
   7158  7041					      repend
   7159  7042		       00		      .byte.b	0
   7158  7042					      repend
   7159  7043		       00		      .byte.b	0
   7158  7043					      repend
   7159  7044		       00		      .byte.b	0
   7158  7044					      repend
   7159  7045		       00		      .byte.b	0
   7158  7045					      repend
   7159  7046		       00		      .byte.b	0
   7158  7046					      repend
   7159  7047		       00		      .byte.b	0
   7158  7047					      repend
   7159  7048		       00		      .byte.b	0
   7158  7048					      repend
   7159  7049		       00		      .byte.b	0
   7158  7049					      repend
   7159  704a		       00		      .byte.b	0
   7158  704a					      repend
   7159  704b		       00		      .byte.b	0
   7158  704b					      repend
   7159  704c		       00		      .byte.b	0
   7158  704c					      repend
   7159  704d		       00		      .byte.b	0
   7158  704d					      repend
   7159  704e		       00		      .byte.b	0
   7158  704e					      repend
   7159  704f		       00		      .byte.b	0
   7158  704f					      repend
   7159  7050		       00		      .byte.b	0
   7158  7050					      repend
   7159  7051		       00		      .byte.b	0
   7158  7051					      repend
   7159  7052		       00		      .byte.b	0
   7158  7052					      repend
   7159  7053		       00		      .byte.b	0
   7158  7053					      repend
   7159  7054		       00		      .byte.b	0
   7158  7054					      repend
   7159  7055		       00		      .byte.b	0
   7158  7055					      repend
   7159  7056		       00		      .byte.b	0
   7158  7056					      repend
   7159  7057		       00		      .byte.b	0
   7158  7057					      repend
   7159  7058		       00		      .byte.b	0
   7158  7058					      repend
   7159  7059		       00		      .byte.b	0
   7158  7059					      repend
   7159  705a		       00		      .byte.b	0
   7158  705a					      repend
   7159  705b		       00		      .byte.b	0
   7158  705b					      repend
   7159  705c		       00		      .byte.b	0
   7158  705c					      repend
   7159  705d		       00		      .byte.b	0
   7158  705d					      repend
   7159  705e		       00		      .byte.b	0
   7158  705e					      repend
   7159  705f		       00		      .byte.b	0
   7158  705f					      repend
   7159  7060		       00		      .byte.b	0
   7158  7060					      repend
   7159  7061		       00		      .byte.b	0
   7158  7061					      repend
   7159  7062		       00		      .byte.b	0
   7158  7062					      repend
   7159  7063		       00		      .byte.b	0
   7158  7063					      repend
   7159  7064		       00		      .byte.b	0
   7158  7064					      repend
   7159  7065		       00		      .byte.b	0
   7158  7065					      repend
   7159  7066		       00		      .byte.b	0
   7158  7066					      repend
   7159  7067		       00		      .byte.b	0
   7158  7067					      repend
   7159  7068		       00		      .byte.b	0
   7158  7068					      repend
   7159  7069		       00		      .byte.b	0
   7158  7069					      repend
   7159  706a		       00		      .byte.b	0
   7158  706a					      repend
   7159  706b		       00		      .byte.b	0
   7158  706b					      repend
   7159  706c		       00		      .byte.b	0
   7158  706c					      repend
   7159  706d		       00		      .byte.b	0
   7158  706d					      repend
   7159  706e		       00		      .byte.b	0
   7158  706e					      repend
   7159  706f		       00		      .byte.b	0
   7158  706f					      repend
   7159  7070		       00		      .byte.b	0
   7158  7070					      repend
   7159  7071		       00		      .byte.b	0
   7158  7071					      repend
   7159  7072		       00		      .byte.b	0
   7158  7072					      repend
   7159  7073		       00		      .byte.b	0
   7158  7073					      repend
   7159  7074		       00		      .byte.b	0
   7158  7074					      repend
   7159  7075		       00		      .byte.b	0
   7158  7075					      repend
   7159  7076		       00		      .byte.b	0
   7158  7076					      repend
   7159  7077		       00		      .byte.b	0
   7158  7077					      repend
   7159  7078		       00		      .byte.b	0
   7158  7078					      repend
   7159  7079		       00		      .byte.b	0
   7158  7079					      repend
   7159  707a		       00		      .byte.b	0
   7158  707a					      repend
   7159  707b		       00		      .byte.b	0
   7158  707b					      repend
   7159  707c		       00		      .byte.b	0
   7158  707c					      repend
   7159  707d		       00		      .byte.b	0
   7158  707d					      repend
   7159  707e		       00		      .byte.b	0
   7158  707e					      repend
   7159  707f		       00		      .byte.b	0
   7158  707f					      repend
   7159  7080		       00		      .byte.b	0
   7160  7081					      repend
   7161  7081							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7162  7081
   7163  7081							;----------------------------------------
   7164  7081							; Display Data
   7165  7081							;----------------------------------------
   7166  7081							; The Display Data bank is copied into RAM when DPC+ initializes the cartridge.
   7167  7081							; This allows us to manipulate the data during run-time, but have a known
   7168  7081							; starting state when the Atari is first turned on.
   7169  7081							;
   7170  7081							; Unlike normal Atari VCS/2600 sprite definitions, the sprite data in the
   7171  7081							; Display Data bank is stored right-side-up.
   7172  7081							;
   7173  7081							;----------------------------------------
   7174  7081
   7175  7081				   Zeros32
   7176  7081		       00 84	   SOUND_OFF  =	(* & $1fff)/32
   7177  7081				   DisplayDataDigitBlank
   7178  7081		       00		      .byte.b	0	;--
   7179  7082		       00		      .byte.b	0	;--
   7180  7083		       00		      .byte.b	0	;--
   7181  7084		       00		      .byte.b	0	;--
   7182  7085		       00		      .byte.b	0	;--
   7183  7086		       00		      .byte.b	0	;--
   7184  7087		       00		      .byte.b	0	;--
   7185  7088		       00		      .byte.b	0	;--
   7186  7089
   7187  7089							;	align 32
   7188  7089							;Zeros32:
   7189  7089							;SOUND_OFF = (* & $1fff)/32
   7190  7089							;	.byte 0,0,0,0,0,0,0,0
   7191  7089		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   7192  7091		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   7193  7099		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   7194  70a1
   7195  70a1		       00 85	   SINE_WAVE  =	(* & $1fff)/32
   7196  70a1		       03 03 03 04*	      .byte.b	3,3,3,4,4,5,5,5
   7197  70a9		       05 05 05 05*	      .byte.b	5,5,5,5,4,4,3,3
   7198  70b1		       03 02 02 01*	      .byte.b	3,2,2,1,1,0,0,0
   7199  70b9		       00 00 00 00*	      .byte.b	0,0,0,0,1,1,2,2
   7200  70c1
   7201  70e0		       00 00 00 00*	      align	32
   7202  70e0		       00 87	   TRIANGLE_WAVE =	(* & $1fff)/32
   7203  70e0		       00 00 01 01*	      .byte.b	0,0,1,1,1,2,2,2
   7204  70e8		       03 03 03 04*	      .byte.b	3,3,3,4,4,4,5,5
   7205  70f0		       05 05 04 04*	      .byte.b	5,5,4,4,4,3,3,3
   7206  70f8		       02 02 02 01*	      .byte.b	2,2,2,1,1,1,0,0
   7207  7100
   7208  7100					      align	32
   7209  7100		       00 88	   SAWTOOTH_WAVE =	(* & $1fff)/32
   7210  7100		       00 00 00 00*	      .byte.b	0,0,0,0,1,1,1,1
   7211  7108		       01 01 02 02*	      .byte.b	1,1,2,2,2,2,2,2
   7212  7110		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,4,4
   7213  7118		       04 04 04 04*	      .byte.b	4,4,4,4,5,5,5,5
   7214  7120
   7215  7120					      align	32
   7216  7120		       00 89	   SQUARE_WAVE_VOL5 =	(* & $1fff)/32
   7217  7120		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   7218  7128		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   7219  7130		       05 05 05 05*	      .byte.b	5,5,5,5,5,5,5,5
   7220  7138		       05 05 05 05*	      .byte.b	5,5,5,5,5,5,5,5
   7221  7140
   7222  7140					      align	32
   7223  7140		       00 8a	   SQUARE_WAVE_VOL4 =	(* & $1fff)/32
   7224  7140		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   7225  7148		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   7226  7150		       04 04 04 04*	      .byte.b	4,4,4,4,4,4,4,4
   7227  7158		       04 04 04 04*	      .byte.b	4,4,4,4,4,4,4,4
   7228  7160
   7229  7160					      align	32
   7230  7160		       00 8b	   SQUARE_WAVE_VOL3 =	(* & $1fff)/32
   7231  7160		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   7232  7168		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   7233  7170		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,3,3
   7234  7178		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,3,3
   7235  7180
   7236  7180					      align	32
   7237  7180		       00 8c	   NOISE_WAVE =	(* & $1fff)/32
   7238  7180		       07 01 09 0a*	      .byte.b	7, 1, 9,10, 2, 8, 8,14
   7239  7188		       03 0d 08 05*	      .byte.b	3,13, 8, 5,12, 2, 3, 7
   7240  7190		       07 01 08 04*	      .byte.b	7, 1, 8, 4,15, 1,13, 5
   7241  7198		       08 05 0b 06*	      .byte.b	8, 5,11, 6, 8, 7, 9, 2
   7242  71a0
   7243  71a0							; low and high byte of address table (for ROMdata array in C)
   7244  71a0		       57		      .byte.b	<fetcher_address_table
   7245  71a1		       0d		      .byte.b	((>fetcher_address_table) & $0f) | (((>fetcher_address_table) / 2) & $70)
   7246  71a2		       00		      .byte.b	0
   7247  71a3		       00		      .byte.b	0
   7248  71a4				   FETCHER_BEGIN
   7249  71a4		       10		      .byte.b	16
   7250  71a5		       10		      .byte.b	16
   7251  71a6		       10		      .byte.b	16
   7252  71a7		       10		      .byte.b	16	; to zero-fill on boot
   7253  71a8							;bB.asm
   7254  71a8							; bB.asm file is split here
   7255  71a8				   backgroundcolorL0412
   7256  71a8		       08		      .byte.b	_08
   7257  71a9		       06		      .byte.b	_06
   7258  71aa		       08		      .byte.b	_08
   7259  71ab		       08		      .byte.b	_08
   7260  71ac		       06		      .byte.b	_06
   7261  71ad		       08		      .byte.b	_08
   7262  71ae		       06		      .byte.b	_06
   7263  71af		       08		      .byte.b	_08
   7264  71b0		       06		      .byte.b	_06
   7265  71b1		       06		      .byte.b	_06
   7266  71b2		       08		      .byte.b	_08
   7267  71b3		       08		      .byte.b	_08
   7268  71b4		       06		      .byte.b	_06
   7269  71b5		       06		      .byte.b	_06
   7270  71b6		       06		      .byte.b	_06
   7271  71b7		       06		      .byte.b	_06
   7272  71b8		       06		      .byte.b	_06
   7273  71b9		       06		      .byte.b	_06
   7274  71ba		       06		      .byte.b	_06
   7275  71bb		       06		      .byte.b	_06
   7276  71bc		       06		      .byte.b	_06
   7277  71bd		       06		      .byte.b	_06
   7278  71be		       06		      .byte.b	_06
   7279  71bf		       06		      .byte.b	_06
   7280  71c0		       06		      .byte.b	_06
   7281  71c1		       06		      .byte.b	_06
   7282  71c2		       06		      .byte.b	_06
   7283  71c3		       06		      .byte.b	_06
   7284  71c4		       06		      .byte.b	_06
   7285  71c5		       06		      .byte.b	_06
   7286  71c6		       06		      .byte.b	_06
   7287  71c7		       06		      .byte.b	_06
   7288  71c8		       06		      .byte.b	_06
   7289  71c9		       06		      .byte.b	_06
   7290  71ca		       06		      .byte.b	_06
   7291  71cb		       06		      .byte.b	_06
   7292  71cc		       06		      .byte.b	_06
   7293  71cd		       06		      .byte.b	_06
   7294  71ce		       06		      .byte.b	_06
   7295  71cf		       06		      .byte.b	_06
   7296  71d0		       06		      .byte.b	_06
   7297  71d1		       06		      .byte.b	_06
   7298  71d2		       06		      .byte.b	_06
   7299  71d3		       06		      .byte.b	_06
   7300  71d4		       06		      .byte.b	_06
   7301  71d5		       06		      .byte.b	_06
   7302  71d6		       06		      .byte.b	_06
   7303  71d7		       06		      .byte.b	_06
   7304  71d8		       06		      .byte.b	_06
   7305  71d9		       06		      .byte.b	_06
   7306  71da		       06		      .byte.b	_06
   7307  71db		       06		      .byte.b	_06
   7308  71dc		       06		      .byte.b	_06
   7309  71dd		       06		      .byte.b	_06
   7310  71de		       06		      .byte.b	_06
   7311  71df		       06		      .byte.b	_06
   7312  71e0		       06		      .byte.b	_06
   7313  71e1		       06		      .byte.b	_06
   7314  71e2		       06		      .byte.b	_06
   7315  71e3		       06		      .byte.b	_06
   7316  71e4		       06		      .byte.b	_06
   7317  71e5		       06		      .byte.b	_06
   7318  71e6		       06		      .byte.b	_06
   7319  71e7		       06		      .byte.b	_06
   7320  71e8		       06		      .byte.b	_06
   7321  71e9		       06		      .byte.b	_06
   7322  71ea		       06		      .byte.b	_06
   7323  71eb		       06		      .byte.b	_06
   7324  71ec		       06		      .byte.b	_06
   7325  71ed		       06		      .byte.b	_06
   7326  71ee		       06		      .byte.b	_06
   7327  71ef		       06		      .byte.b	_06
   7328  71f0		       06		      .byte.b	_06
   7329  71f1		       06		      .byte.b	_06
   7330  71f2		       06		      .byte.b	_06
   7331  71f3		       06		      .byte.b	_06
   7332  71f4		       06		      .byte.b	_06
   7333  71f5		       06		      .byte.b	_06
   7334  71f6		       06		      .byte.b	_06
   7335  71f7		       06		      .byte.b	_06
   7336  71f8		       06		      .byte.b	_06
   7337  71f9		       06		      .byte.b	_06
   7338  71fa		       06		      .byte.b	_06
   7339  71fb		       06		      .byte.b	_06
   7340  71fc		       06		      .byte.b	_06
   7341  71fd		       06		      .byte.b	_06
   7342  71fe		       c6		      .byte.b	_C6
   7343  71ff		       c6		      .byte.b	_C6
   7344  7200				   PF_data1
   7345  7200		       00		      .byte.b	%00000000
   7346  7201		       00		      .byte.b	%00000000
   7347  7202		       00		      .byte.b	%00000000
   7348  7203		       00		      .byte.b	%00000000
   7349  7204		       00		      .byte.b	%00000000
   7350  7205		       00		      .byte.b	%00000000
   7351  7206		       00		      .byte.b	%00000000
   7352  7207		       00		      .byte.b	%00000000
   7353  7208		       00		      .byte.b	%00000000
   7354  7209		       00		      .byte.b	%00000000
   7355  720a		       00		      .byte.b	%00000000
   7356  720b		       00		      .byte.b	%00000000
   7357  720c		       00		      .byte.b	%00000000
   7358  720d		       00		      .byte.b	%00000000
   7359  720e		       00		      .byte.b	%00000000
   7360  720f		       00		      .byte.b	%00000000
   7361  7210		       00		      .byte.b	%00000000
   7362  7211		       00		      .byte.b	%00000000
   7363  7212		       00		      .byte.b	%00000000
   7364  7213		       00		      .byte.b	%00000000
   7365  7214		       00		      .byte.b	%00000000
   7366  7215		       00		      .byte.b	%00000000
   7367  7216		       00		      .byte.b	%00000000
   7368  7217		       00		      .byte.b	%00000000
   7369  7218		       00		      .byte.b	%00000000
   7370  7219		       00		      .byte.b	%00000000
   7371  721a		       00		      .byte.b	%00000000
   7372  721b		       00		      .byte.b	%00000000
   7373  721c		       00		      .byte.b	%00000000
   7374  721d		       00		      .byte.b	%00000000
   7375  721e		       00		      .byte.b	%00000000
   7376  721f		       00		      .byte.b	%00000000
   7377  7220		       00		      .byte.b	%00000000
   7378  7221		       00		      .byte.b	%00000000
   7379  7222		       00		      .byte.b	%00000000
   7380  7223		       00		      .byte.b	%00000000
   7381  7224		       00		      .byte.b	%00000000
   7382  7225		       00		      .byte.b	%00000000
   7383  7226		       00		      .byte.b	%00000000
   7384  7227		       00		      .byte.b	%00000000
   7385  7228		       00		      .byte.b	%00000000
   7386  7229		       00		      .byte.b	%00000000
   7387  722a		       00		      .byte.b	%00000000
   7388  722b		       00		      .byte.b	%00000000
   7389  722c		       00		      .byte.b	%00000000
   7390  722d		       00		      .byte.b	%00000000
   7391  722e		       00		      .byte.b	%00000000
   7392  722f		       00		      .byte.b	%00000000
   7393  7230		       00		      .byte.b	%00000000
   7394  7231		       00		      .byte.b	%00000000
   7395  7232		       00		      .byte.b	%00000000
   7396  7233		       00		      .byte.b	%00000000
   7397  7234		       00		      .byte.b	%00000000
   7398  7235		       00		      .byte.b	%00000000
   7399  7236		       00		      .byte.b	%00000000
   7400  7237		       00		      .byte.b	%00000000
   7401  7238		       00		      .byte.b	%00000000
   7402  7239		       00		      .byte.b	%00000000
   7403  723a		       00		      .byte.b	%00000000
   7404  723b		       00		      .byte.b	%00000000
   7405  723c		       00		      .byte.b	%00000000
   7406  723d		       00		      .byte.b	%00000000
   7407  723e		       00		      .byte.b	%00000000
   7408  723f		       00		      .byte.b	%00000000
   7409  7240		       00		      .byte.b	%00000000
   7410  7241		       00		      .byte.b	%00000000
   7411  7242		       00		      .byte.b	%00000000
   7412  7243		       00		      .byte.b	%00000000
   7413  7244		       00		      .byte.b	%00000000
   7414  7245		       00		      .byte.b	%00000000
   7415  7246		       00		      .byte.b	%00000000
   7416  7247		       00		      .byte.b	%00000000
   7417  7248		       00		      .byte.b	%00000000
   7418  7249		       00		      .byte.b	%00000000
   7419  724a		       00		      .byte.b	%00000000
   7420  724b		       00		      .byte.b	%00000000
   7421  724c		       00		      .byte.b	%00000000
   7422  724d		       00		      .byte.b	%00000000
   7423  724e		       00		      .byte.b	%00000000
   7424  724f		       00		      .byte.b	%00000000
   7425  7250		       00		      .byte.b	%00000000
   7426  7251		       00		      .byte.b	%00000000
   7427  7252		       00		      .byte.b	%00000000
   7428  7253		       00		      .byte.b	%00000000
   7429  7254		       00		      .byte.b	%00000000
   7430  7255		       00		      .byte.b	%00000000
   7431  7256		       00		      .byte.b	%00000000
   7432  7257		       00		      .byte.b	%00000000
   7433  7258		       00		      .byte.b	%00000000
   7434  7259		       00		      .byte.b	%00000000
   7435  725a		       00		      .byte.b	%00000000
   7436  725b		       00		      .byte.b	%00000000
   7437  725c		       00		      .byte.b	%00000000
   7438  725d		       00		      .byte.b	%00000000
   7439  725e		       00		      .byte.b	%00000000
   7440  725f		       00		      .byte.b	%00000000
   7441  7260		       00		      .byte.b	%00000000
   7442  7261		       00		      .byte.b	%00000000
   7443  7262		       00		      .byte.b	%00000000
   7444  7263		       00		      .byte.b	%00000000
   7445  7264		       00		      .byte.b	%00000000
   7446  7265		       00		      .byte.b	%00000000
   7447  7266		       00		      .byte.b	%00000000
   7448  7267		       00		      .byte.b	%00000000
   7449  7268		       00		      .byte.b	%00000000
   7450  7269		       00		      .byte.b	%00000000
   7451  726a		       00		      .byte.b	%00000000
   7452  726b		       00		      .byte.b	%00000000
   7453  726c		       00		      .byte.b	%00000000
   7454  726d		       00		      .byte.b	%00000000
   7455  726e		       00		      .byte.b	%00000000
   7456  726f		       00		      .byte.b	%00000000
   7457  7270		       00		      .byte.b	%00000000
   7458  7271		       00		      .byte.b	%00000000
   7459  7272		       00		      .byte.b	%00000000
   7460  7273		       00		      .byte.b	%00000000
   7461  7274		       00		      .byte.b	%00000000
   7462  7275		       00		      .byte.b	%00000000
   7463  7276		       00		      .byte.b	%00000000
   7464  7277		       00		      .byte.b	%00000000
   7465  7278		       00		      .byte.b	%00000000
   7466  7279		       00		      .byte.b	%00000000
   7467  727a		       00		      .byte.b	%00000000
   7468  727b		       00		      .byte.b	%00000000
   7469  727c		       00		      .byte.b	%00000000
   7470  727d		       00		      .byte.b	%00000000
   7471  727e		       00		      .byte.b	%00000000
   7472  727f		       00		      .byte.b	%00000000
   7473  7280		       00		      .byte.b	%00000000
   7474  7281		       00		      .byte.b	%00000000
   7475  7282		       00		      .byte.b	%00000000
   7476  7283		       00		      .byte.b	%00000000
   7477  7284		       00		      .byte.b	%00000000
   7478  7285		       00		      .byte.b	%00000000
   7479  7286		       00		      .byte.b	%00000000
   7480  7287		       00		      .byte.b	%00000000
   7481  7288		       00		      .byte.b	%00000000
   7482  7289		       00		      .byte.b	%00000000
   7483  728a		       00		      .byte.b	%00000000
   7484  728b		       00		      .byte.b	%00000000
   7485  728c		       00		      .byte.b	%00000000
   7486  728d		       00		      .byte.b	%00000000
   7487  728e		       00		      .byte.b	%00000000
   7488  728f		       00		      .byte.b	%00000000
   7489  7290		       00		      .byte.b	%00000000
   7490  7291		       00		      .byte.b	%00000000
   7491  7292		       00		      .byte.b	%00000000
   7492  7293		       00		      .byte.b	%00000000
   7493  7294		       00		      .byte.b	%00000000
   7494  7295		       00		      .byte.b	%00000000
   7495  7296		       00		      .byte.b	%00000000
   7496  7297		       00		      .byte.b	%00000000
   7497  7298		       00		      .byte.b	%00000000
   7498  7299		       00		      .byte.b	%00000000
   7499  729a		       00		      .byte.b	%00000000
   7500  729b		       00		      .byte.b	%00000000
   7501  729c		       00		      .byte.b	%00000000
   7502  729d		       00		      .byte.b	%00000000
   7503  729e		       00		      .byte.b	%00000000
   7504  729f		       00		      .byte.b	%00000000
   7505  72a0		       00		      .byte.b	%00000000
   7506  72a1		       00		      .byte.b	%00000000
   7507  72a2		       00		      .byte.b	%00000000
   7508  72a3		       00		      .byte.b	%00000000
   7509  72a4		       00		      .byte.b	%00000000
   7510  72a5		       00		      .byte.b	%00000000
   7511  72a6		       00		      .byte.b	%00000000
   7512  72a7		       00		      .byte.b	%00000000
   7513  72a8		       00		      .byte.b	%00000000
   7514  72a9		       00		      .byte.b	%00000000
   7515  72aa		       00		      .byte.b	%00000000
   7516  72ab		       00		      .byte.b	%00000000
   7517  72ac		       00		      .byte.b	%00000000
   7518  72ad		       00		      .byte.b	%00000000
   7519  72ae		       00		      .byte.b	%00000000
   7520  72af		       00		      .byte.b	%00000000
   7521  72b0		       00		      .byte.b	%00000000
   7522  72b1		       00		      .byte.b	%00000000
   7523  72b2		       00		      .byte.b	%00000000
   7524  72b3		       00		      .byte.b	%00000000
   7525  72b4		       00		      .byte.b	%00000000
   7526  72b5		       00		      .byte.b	%00000000
   7527  72b6		       00		      .byte.b	%00000000
   7528  72b7		       00		      .byte.b	%00000000
   7529  72b8		       00		      .byte.b	%00000000
   7530  72b9		       00		      .byte.b	%00000000
   7531  72ba		       00		      .byte.b	%00000000
   7532  72bb		       00		      .byte.b	%00000000
   7533  72bc		       00		      .byte.b	%00000000
   7534  72bd		       00		      .byte.b	%00000000
   7535  72be		       00		      .byte.b	%00000000
   7536  72bf		       00		      .byte.b	%00000000
   7537  72c0		       00		      .byte.b	%00000000
   7538  72c1		       00		      .byte.b	%00000000
   7539  72c2		       00		      .byte.b	%00000000
   7540  72c3		       00		      .byte.b	%00000000
   7541  72c4		       00		      .byte.b	%00000000
   7542  72c5		       00		      .byte.b	%00000000
   7543  72c6		       00		      .byte.b	%00000000
   7544  72c7		       00		      .byte.b	%00000000
   7545  72c8		       00		      .byte.b	%00000000
   7546  72c9		       00		      .byte.b	%00000000
   7547  72ca		       00		      .byte.b	%00000000
   7548  72cb		       00		      .byte.b	%00000000
   7549  72cc		       00		      .byte.b	%00000000
   7550  72cd		       00		      .byte.b	%00000000
   7551  72ce		       00		      .byte.b	%00000000
   7552  72cf		       00		      .byte.b	%00000000
   7553  72d0		       00		      .byte.b	%00000000
   7554  72d1		       00		      .byte.b	%00000000
   7555  72d2		       00		      .byte.b	%00000000
   7556  72d3		       00		      .byte.b	%00000000
   7557  72d4		       00		      .byte.b	%00000000
   7558  72d5		       00		      .byte.b	%00000000
   7559  72d6		       00		      .byte.b	%00000000
   7560  72d7		       00		      .byte.b	%00000000
   7561  72d8		       00		      .byte.b	%00000000
   7562  72d9		       00		      .byte.b	%00000000
   7563  72da		       00		      .byte.b	%00000000
   7564  72db		       00		      .byte.b	%00000000
   7565  72dc		       00		      .byte.b	%00000000
   7566  72dd		       00		      .byte.b	%00000000
   7567  72de		       00		      .byte.b	%00000000
   7568  72df		       00		      .byte.b	%00000000
   7569  72e0		       00		      .byte.b	%00000000
   7570  72e1		       00		      .byte.b	%00000000
   7571  72e2		       00		      .byte.b	%00000000
   7572  72e3		       00		      .byte.b	%00000000
   7573  72e4		       00		      .byte.b	%00000000
   7574  72e5		       00		      .byte.b	%00000000
   7575  72e6		       00		      .byte.b	%00000000
   7576  72e7		       00		      .byte.b	%00000000
   7577  72e8		       07		      .byte.b	%00000111
   7578  72e9		       0f		      .byte.b	%00001111
   7579  72ea		       0f		      .byte.b	%00001111
   7580  72eb		       0f		      .byte.b	%00001111
   7581  72ec		       0f		      .byte.b	%00001111
   7582  72ed		       0f		      .byte.b	%00001111
   7583  72ee		       0f		      .byte.b	%00001111
   7584  72ef		       0f		      .byte.b	%00001111
   7585  72f0		       0f		      .byte.b	%00001111
   7586  72f1		       0f		      .byte.b	%00001111
   7587  72f2		       09		      .byte.b	%00001001
   7588  72f3		       09		      .byte.b	%00001001
   7589  72f4		       09		      .byte.b	%00001001
   7590  72f5		       09		      .byte.b	%00001001
   7591  72f6		       09		      .byte.b	%00001001
   7592  72f7		       09		      .byte.b	%00001001
   7593  72f8		       09		      .byte.b	%00001001
   7594  72f9		       09		      .byte.b	%00001001
   7595  72fa		       09		      .byte.b	%00001001
   7596  72fb		       0f		      .byte.b	%00001111
   7597  72fc		       09		      .byte.b	%00001001
   7598  72fd		       09		      .byte.b	%00001001
   7599  72fe		       09		      .byte.b	%00001001
   7600  72ff		       09		      .byte.b	%00001001
   7601  7300		       09		      .byte.b	%00001001
   7602  7301		       09		      .byte.b	%00001001
   7603  7302		       09		      .byte.b	%00001001
   7604  7303		       09		      .byte.b	%00001001
   7605  7304		       0f		      .byte.b	%00001111
   7606  7305		       0f		      .byte.b	%00001111
   7607  7306		       0f		      .byte.b	%00001111
   7608  7307		       00		      .byte.b	%00000000
   7609  7308		       00		      .byte.b	%00000000
   7610  7309		       00		      .byte.b	%00000000
   7611  730a		       00		      .byte.b	%00000000
   7612  730b		       00		      .byte.b	%00000000
   7613  730c		       00		      .byte.b	%00000000
   7614  730d		       00		      .byte.b	%00000000
   7615  730e		       00		      .byte.b	%00000000
   7616  730f		       00		      .byte.b	%00000000
   7617  7310		       00		      .byte.b	%00000000
   7618  7311		       00		      .byte.b	%00000000
   7619  7312		       00		      .byte.b	%00000000
   7620  7313		       00		      .byte.b	%00000000
   7621  7314		       00		      .byte.b	%00000000
   7622  7315		       00		      .byte.b	%00000000
   7623  7316		       00		      .byte.b	%00000000
   7624  7317		       00		      .byte.b	%00000000
   7625  7318		       00		      .byte.b	%00000000
   7626  7319		       00		      .byte.b	%00000000
   7627  731a		       00		      .byte.b	%00000000
   7628  731b		       00		      .byte.b	%00000000
   7629  731c		       00		      .byte.b	%00000000
   7630  731d		       00		      .byte.b	%00000000
   7631  731e		       00		      .byte.b	%00000000
   7632  731f		       00		      .byte.b	%00000000
   7633  7320		       00		      .byte.b	%00000000
   7634  7321		       00		      .byte.b	%00000000
   7635  7322		       00		      .byte.b	%00000000
   7636  7323		       00		      .byte.b	%00000000
   7637  7324		       00		      .byte.b	%00000000
   7638  7325		       00		      .byte.b	%00000000
   7639  7326		       00		      .byte.b	%00000000
   7640  7327		       00		      .byte.b	%00000000
   7641  7328		       00		      .byte.b	%00000000
   7642  7329		       00		      .byte.b	%00000000
   7643  732a		       00		      .byte.b	%00000000
   7644  732b		       00		      .byte.b	%00000000
   7645  732c		       00		      .byte.b	%00000000
   7646  732d		       00		      .byte.b	%00000000
   7647  732e		       00		      .byte.b	%00000000
   7648  732f		       00		      .byte.b	%00000000
   7649  7330		       00		      .byte.b	%00000000
   7650  7331		       00		      .byte.b	%00000000
   7651  7332		       00		      .byte.b	%00000000
   7652  7333		       00		      .byte.b	%00000000
   7653  7334		       00		      .byte.b	%00000000
   7654  7335		       00		      .byte.b	%00000000
   7655  7336		       00		      .byte.b	%00000000
   7656  7337		       00		      .byte.b	%00000000
   7657  7338		       00		      .byte.b	%00000000
   7658  7339		       00		      .byte.b	%00000000
   7659  733a		       00		      .byte.b	%00000000
   7660  733b		       00		      .byte.b	%00000000
   7661  733c		       00		      .byte.b	%00000000
   7662  733d		       00		      .byte.b	%00000000
   7663  733e		       00		      .byte.b	%00000000
   7664  733f		       00		      .byte.b	%00000000
   7665  7340		       0f		      .byte.b	%00001111
   7666  7341		       1f		      .byte.b	%00011111
   7667  7342		       1f		      .byte.b	%00011111
   7668  7343		       1f		      .byte.b	%00011111
   7669  7344		       1f		      .byte.b	%00011111
   7670  7345		       1f		      .byte.b	%00011111
   7671  7346		       1f		      .byte.b	%00011111
   7672  7347		       1f		      .byte.b	%00011111
   7673  7348		       1f		      .byte.b	%00011111
   7674  7349		       1f		      .byte.b	%00011111
   7675  734a		       13		      .byte.b	%00010011
   7676  734b		       13		      .byte.b	%00010011
   7677  734c		       13		      .byte.b	%00010011
   7678  734d		       13		      .byte.b	%00010011
   7679  734e		       13		      .byte.b	%00010011
   7680  734f		       13		      .byte.b	%00010011
   7681  7350		       13		      .byte.b	%00010011
   7682  7351		       13		      .byte.b	%00010011
   7683  7352		       13		      .byte.b	%00010011
   7684  7353		       1f		      .byte.b	%00011111
   7685  7354		       13		      .byte.b	%00010011
   7686  7355		       13		      .byte.b	%00010011
   7687  7356		       13		      .byte.b	%00010011
   7688  7357		       13		      .byte.b	%00010011
   7689  7358		       13		      .byte.b	%00010011
   7690  7359		       13		      .byte.b	%00010011
   7691  735a		       13		      .byte.b	%00010011
   7692  735b		       13		      .byte.b	%00010011
   7693  735c		       1f		      .byte.b	%00011111
   7694  735d		       1f		      .byte.b	%00011111
   7695  735e		       1f		      .byte.b	%00011111
   7696  735f		       00		      .byte.b	%00000000
   7697  7360				   PF_data2
   7698  7360		       00		      .byte.b	%00000000
   7699  7361		       00		      .byte.b	%00000000
   7700  7362		       00		      .byte.b	%00000000
   7701  7363		       00		      .byte.b	%00000000
   7702  7364		       00		      .byte.b	%00000000
   7703  7365		       00		      .byte.b	%00000000
   7704  7366		       00		      .byte.b	%00000000
   7705  7367		       00		      .byte.b	%00000000
   7706  7368		       00		      .byte.b	%00000000
   7707  7369		       00		      .byte.b	%00000000
   7708  736a		       00		      .byte.b	%00000000
   7709  736b		       00		      .byte.b	%00000000
   7710  736c		       00		      .byte.b	%00000000
   7711  736d		       00		      .byte.b	%00000000
   7712  736e		       00		      .byte.b	%00000000
   7713  736f		       00		      .byte.b	%00000000
   7714  7370		       00		      .byte.b	%00000000
   7715  7371		       00		      .byte.b	%00000000
   7716  7372		       00		      .byte.b	%00000000
   7717  7373		       00		      .byte.b	%00000000
   7718  7374		       00		      .byte.b	%00000000
   7719  7375		       00		      .byte.b	%00000000
   7720  7376		       00		      .byte.b	%00000000
   7721  7377		       00		      .byte.b	%00000000
   7722  7378		       00		      .byte.b	%00000000
   7723  7379		       00		      .byte.b	%00000000
   7724  737a		       00		      .byte.b	%00000000
   7725  737b		       00		      .byte.b	%00000000
   7726  737c		       00		      .byte.b	%00000000
   7727  737d		       00		      .byte.b	%00000000
   7728  737e		       00		      .byte.b	%00000000
   7729  737f		       00		      .byte.b	%00000000
   7730  7380		       00		      .byte.b	%00000000
   7731  7381		       00		      .byte.b	%00000000
   7732  7382		       00		      .byte.b	%00000000
   7733  7383		       00		      .byte.b	%00000000
   7734  7384		       00		      .byte.b	%00000000
   7735  7385		       00		      .byte.b	%00000000
   7736  7386		       00		      .byte.b	%00000000
   7737  7387		       00		      .byte.b	%00000000
   7738  7388		       00		      .byte.b	%00000000
   7739  7389		       00		      .byte.b	%00000000
   7740  738a		       00		      .byte.b	%00000000
   7741  738b		       00		      .byte.b	%00000000
   7742  738c		       00		      .byte.b	%00000000
   7743  738d		       00		      .byte.b	%00000000
   7744  738e		       00		      .byte.b	%00000000
   7745  738f		       00		      .byte.b	%00000000
   7746  7390		       00		      .byte.b	%00000000
   7747  7391		       00		      .byte.b	%00000000
   7748  7392		       00		      .byte.b	%00000000
   7749  7393		       00		      .byte.b	%00000000
   7750  7394		       00		      .byte.b	%00000000
   7751  7395		       00		      .byte.b	%00000000
   7752  7396		       00		      .byte.b	%00000000
   7753  7397		       00		      .byte.b	%00000000
   7754  7398		       3e		      .byte.b	%00111110
   7755  7399		       3e		      .byte.b	%00111110
   7756  739a		       3e		      .byte.b	%00111110
   7757  739b		       3e		      .byte.b	%00111110
   7758  739c		       3e		      .byte.b	%00111110
   7759  739d		       3e		      .byte.b	%00111110
   7760  739e		       3e		      .byte.b	%00111110
   7761  739f		       3e		      .byte.b	%00111110
   7762  73a0		       3e		      .byte.b	%00111110
   7763  73a1		       3e		      .byte.b	%00111110
   7764  73a2		       22		      .byte.b	%00100010
   7765  73a3		       22		      .byte.b	%00100010
   7766  73a4		       22		      .byte.b	%00100010
   7767  73a5		       22		      .byte.b	%00100010
   7768  73a6		       23		      .byte.b	%00100011
   7769  73a7		       23		      .byte.b	%00100011
   7770  73a8		       23		      .byte.b	%00100011
   7771  73a9		       23		      .byte.b	%00100011
   7772  73aa		       3f		      .byte.b	%00111111
   7773  73ab		       23		      .byte.b	%00100011
   7774  73ac		       23		      .byte.b	%00100011
   7775  73ad		       23		      .byte.b	%00100011
   7776  73ae		       23		      .byte.b	%00100011
   7777  73af		       23		      .byte.b	%00100011
   7778  73b0		       23		      .byte.b	%00100011
   7779  73b1		       23		      .byte.b	%00100011
   7780  73b2		       3f		      .byte.b	%00111111
   7781  73b3		       3f		      .byte.b	%00111111
   7782  73b4		       3f		      .byte.b	%00111111
   7783  73b5		       3f		      .byte.b	%00111111
   7784  73b6		       3f		      .byte.b	%00111111
   7785  73b7		       00		      .byte.b	%00000000
   7786  73b8		       00		      .byte.b	%00000000
   7787  73b9		       00		      .byte.b	%00000000
   7788  73ba		       00		      .byte.b	%00000000
   7789  73bb		       00		      .byte.b	%00000000
   7790  73bc		       00		      .byte.b	%00000000
   7791  73bd		       00		      .byte.b	%00000000
   7792  73be		       00		      .byte.b	%00000000
   7793  73bf		       00		      .byte.b	%00000000
   7794  73c0		       00		      .byte.b	%00000000
   7795  73c1		       00		      .byte.b	%00000000
   7796  73c2		       00		      .byte.b	%00000000
   7797  73c3		       00		      .byte.b	%00000000
   7798  73c4		       00		      .byte.b	%00000000
   7799  73c5		       00		      .byte.b	%00000000
   7800  73c6		       00		      .byte.b	%00000000
   7801  73c7		       00		      .byte.b	%00000000
   7802  73c8		       00		      .byte.b	%00000000
   7803  73c9		       00		      .byte.b	%00000000
   7804  73ca		       00		      .byte.b	%00000000
   7805  73cb		       00		      .byte.b	%00000000
   7806  73cc		       00		      .byte.b	%00000000
   7807  73cd		       00		      .byte.b	%00000000
   7808  73ce		       00		      .byte.b	%00000000
   7809  73cf		       00		      .byte.b	%00000000
   7810  73d0		       00		      .byte.b	%00000000
   7811  73d1		       00		      .byte.b	%00000000
   7812  73d2		       00		      .byte.b	%00000000
   7813  73d3		       00		      .byte.b	%00000000
   7814  73d4		       00		      .byte.b	%00000000
   7815  73d5		       00		      .byte.b	%00000000
   7816  73d6		       00		      .byte.b	%00000000
   7817  73d7		       00		      .byte.b	%00000000
   7818  73d8		       00		      .byte.b	%00000000
   7819  73d9		       00		      .byte.b	%00000000
   7820  73da		       00		      .byte.b	%00000000
   7821  73db		       00		      .byte.b	%00000000
   7822  73dc		       00		      .byte.b	%00000000
   7823  73dd		       00		      .byte.b	%00000000
   7824  73de		       00		      .byte.b	%00000000
   7825  73df		       00		      .byte.b	%00000000
   7826  73e0		       00		      .byte.b	%00000000
   7827  73e1		       00		      .byte.b	%00000000
   7828  73e2		       00		      .byte.b	%00000000
   7829  73e3		       00		      .byte.b	%00000000
   7830  73e4		       00		      .byte.b	%00000000
   7831  73e5		       00		      .byte.b	%00000000
   7832  73e6		       00		      .byte.b	%00000000
   7833  73e7		       00		      .byte.b	%00000000
   7834  73e8		       00		      .byte.b	%00000000
   7835  73e9		       00		      .byte.b	%00000000
   7836  73ea		       00		      .byte.b	%00000000
   7837  73eb		       00		      .byte.b	%00000000
   7838  73ec		       00		      .byte.b	%00000000
   7839  73ed		       00		      .byte.b	%00000000
   7840  73ee		       00		      .byte.b	%00000000
   7841  73ef		       00		      .byte.b	%00000000
   7842  73f0		       1f		      .byte.b	%00011111
   7843  73f1		       1f		      .byte.b	%00011111
   7844  73f2		       1f		      .byte.b	%00011111
   7845  73f3		       1f		      .byte.b	%00011111
   7846  73f4		       1f		      .byte.b	%00011111
   7847  73f5		       1f		      .byte.b	%00011111
   7848  73f6		       1f		      .byte.b	%00011111
   7849  73f7		       1f		      .byte.b	%00011111
   7850  73f8		       1f		      .byte.b	%00011111
   7851  73f9		       1f		      .byte.b	%00011111
   7852  73fa		       11		      .byte.b	%00010001
   7853  73fb		       11		      .byte.b	%00010001
   7854  73fc		       11		      .byte.b	%00010001
   7855  73fd		       11		      .byte.b	%00010001
   7856  73fe		       11		      .byte.b	%00010001
   7857  73ff		       11		      .byte.b	%00010001
   7858  7400		       11		      .byte.b	%00010001
   7859  7401		       11		      .byte.b	%00010001
   7860  7402		       1f		      .byte.b	%00011111
   7861  7403		       11		      .byte.b	%00010001
   7862  7404		       11		      .byte.b	%00010001
   7863  7405		       11		      .byte.b	%00010001
   7864  7406		       11		      .byte.b	%00010001
   7865  7407		       11		      .byte.b	%00010001
   7866  7408		       11		      .byte.b	%00010001
   7867  7409		       11		      .byte.b	%00010001
   7868  740a		       1f		      .byte.b	%00011111
   7869  740b		       1f		      .byte.b	%00011111
   7870  740c		       1f		      .byte.b	%00011111
   7871  740d		       1f		      .byte.b	%00011111
   7872  740e		       1f		      .byte.b	%00011111
   7873  740f		       00		      .byte.b	%00000000
   7874  7410		       00		      .byte.b	%00000000
   7875  7411		       00		      .byte.b	%00000000
   7876  7412		       00		      .byte.b	%00000000
   7877  7413		       00		      .byte.b	%00000000
   7878  7414		       00		      .byte.b	%00000000
   7879  7415		       00		      .byte.b	%00000000
   7880  7416		       00		      .byte.b	%00000000
   7881  7417		       00		      .byte.b	%00000000
   7882  7418		       00		      .byte.b	%00000000
   7883  7419		       00		      .byte.b	%00000000
   7884  741a		       00		      .byte.b	%00000000
   7885  741b		       00		      .byte.b	%00000000
   7886  741c		       00		      .byte.b	%00000000
   7887  741d		       00		      .byte.b	%00000000
   7888  741e		       00		      .byte.b	%00000000
   7889  741f		       00		      .byte.b	%00000000
   7890  7420		       00		      .byte.b	%00000000
   7891  7421		       00		      .byte.b	%00000000
   7892  7422		       00		      .byte.b	%00000000
   7893  7423		       00		      .byte.b	%00000000
   7894  7424		       00		      .byte.b	%00000000
   7895  7425		       00		      .byte.b	%00000000
   7896  7426		       00		      .byte.b	%00000000
   7897  7427		       00		      .byte.b	%00000000
   7898  7428		       00		      .byte.b	%00000000
   7899  7429		       00		      .byte.b	%00000000
   7900  742a		       00		      .byte.b	%00000000
   7901  742b		       00		      .byte.b	%00000000
   7902  742c		       00		      .byte.b	%00000000
   7903  742d		       00		      .byte.b	%00000000
   7904  742e		       00		      .byte.b	%00000000
   7905  742f		       00		      .byte.b	%00000000
   7906  7430		       00		      .byte.b	%00000000
   7907  7431		       00		      .byte.b	%00000000
   7908  7432		       00		      .byte.b	%00000000
   7909  7433		       00		      .byte.b	%00000000
   7910  7434		       00		      .byte.b	%00000000
   7911  7435		       00		      .byte.b	%00000000
   7912  7436		       00		      .byte.b	%00000000
   7913  7437		       00		      .byte.b	%00000000
   7914  7438		       00		      .byte.b	%00000000
   7915  7439		       00		      .byte.b	%00000000
   7916  743a		       00		      .byte.b	%00000000
   7917  743b		       00		      .byte.b	%00000000
   7918  743c		       00		      .byte.b	%00000000
   7919  743d		       00		      .byte.b	%00000000
   7920  743e		       00		      .byte.b	%00000000
   7921  743f		       00		      .byte.b	%00000000
   7922  7440		       00		      .byte.b	%00000000
   7923  7441		       00		      .byte.b	%00000000
   7924  7442		       00		      .byte.b	%00000000
   7925  7443		       00		      .byte.b	%00000000
   7926  7444		       00		      .byte.b	%00000000
   7927  7445		       00		      .byte.b	%00000000
   7928  7446		       00		      .byte.b	%00000000
   7929  7447		       00		      .byte.b	%00000000
   7930  7448		       00		      .byte.b	%00000000
   7931  7449		       00		      .byte.b	%00000000
   7932  744a		       00		      .byte.b	%00000000
   7933  744b		       00		      .byte.b	%00000000
   7934  744c		       00		      .byte.b	%00000000
   7935  744d		       00		      .byte.b	%00000000
   7936  744e		       00		      .byte.b	%00000000
   7937  744f		       00		      .byte.b	%00000000
   7938  7450		       00		      .byte.b	%00000000
   7939  7451		       00		      .byte.b	%00000000
   7940  7452		       00		      .byte.b	%00000000
   7941  7453		       00		      .byte.b	%00000000
   7942  7454		       00		      .byte.b	%00000000
   7943  7455		       00		      .byte.b	%00000000
   7944  7456		       00		      .byte.b	%00000000
   7945  7457		       00		      .byte.b	%00000000
   7946  7458		       00		      .byte.b	%00000000
   7947  7459		       00		      .byte.b	%00000000
   7948  745a		       00		      .byte.b	%00000000
   7949  745b		       00		      .byte.b	%00000000
   7950  745c		       00		      .byte.b	%00000000
   7951  745d		       00		      .byte.b	%00000000
   7952  745e		       00		      .byte.b	%00000000
   7953  745f		       00		      .byte.b	%00000000
   7954  7460		       00		      .byte.b	%00000000
   7955  7461		       00		      .byte.b	%00000000
   7956  7462		       00		      .byte.b	%00000000
   7957  7463		       00		      .byte.b	%00000000
   7958  7464		       00		      .byte.b	%00000000
   7959  7465		       00		      .byte.b	%00000000
   7960  7466		       00		      .byte.b	%00000000
   7961  7467		       00		      .byte.b	%00000000
   7962  7468		       00		      .byte.b	%00000000
   7963  7469		       00		      .byte.b	%00000000
   7964  746a		       00		      .byte.b	%00000000
   7965  746b		       00		      .byte.b	%00000000
   7966  746c		       00		      .byte.b	%00000000
   7967  746d		       00		      .byte.b	%00000000
   7968  746e		       00		      .byte.b	%00000000
   7969  746f		       00		      .byte.b	%00000000
   7970  7470		       00		      .byte.b	%00000000
   7971  7471		       00		      .byte.b	%00000000
   7972  7472		       00		      .byte.b	%00000000
   7973  7473		       00		      .byte.b	%00000000
   7974  7474		       00		      .byte.b	%00000000
   7975  7475		       00		      .byte.b	%00000000
   7976  7476		       00		      .byte.b	%00000000
   7977  7477		       00		      .byte.b	%00000000
   7978  7478		       00		      .byte.b	%00000000
   7979  7479		       00		      .byte.b	%00000000
   7980  747a		       00		      .byte.b	%00000000
   7981  747b		       00		      .byte.b	%00000000
   7982  747c		       00		      .byte.b	%00000000
   7983  747d		       00		      .byte.b	%00000000
   7984  747e		       00		      .byte.b	%00000000
   7985  747f		       00		      .byte.b	%00000000
   7986  7480		       00		      .byte.b	%00000000
   7987  7481		       00		      .byte.b	%00000000
   7988  7482		       00		      .byte.b	%00000000
   7989  7483		       00		      .byte.b	%00000000
   7990  7484		       00		      .byte.b	%00000000
   7991  7485		       00		      .byte.b	%00000000
   7992  7486		       00		      .byte.b	%00000000
   7993  7487		       00		      .byte.b	%00000000
   7994  7488		       00		      .byte.b	%00000000
   7995  7489		       00		      .byte.b	%00000000
   7996  748a		       00		      .byte.b	%00000000
   7997  748b		       00		      .byte.b	%00000000
   7998  748c		       00		      .byte.b	%00000000
   7999  748d		       00		      .byte.b	%00000000
   8000  748e		       00		      .byte.b	%00000000
   8001  748f		       00		      .byte.b	%00000000
   8002  7490		       00		      .byte.b	%00000000
   8003  7491		       00		      .byte.b	%00000000
   8004  7492		       00		      .byte.b	%00000000
   8005  7493		       00		      .byte.b	%00000000
   8006  7494		       00		      .byte.b	%00000000
   8007  7495		       00		      .byte.b	%00000000
   8008  7496		       00		      .byte.b	%00000000
   8009  7497		       00		      .byte.b	%00000000
   8010  7498		       00		      .byte.b	%00000000
   8011  7499		       00		      .byte.b	%00000000
   8012  749a		       00		      .byte.b	%00000000
   8013  749b		       00		      .byte.b	%00000000
   8014  749c		       00		      .byte.b	%00000000
   8015  749d		       00		      .byte.b	%00000000
   8016  749e		       00		      .byte.b	%00000000
   8017  749f		       00		      .byte.b	%00000000
   8018  74a0		       00		      .byte.b	%00000000
   8019  74a1		       00		      .byte.b	%00000000
   8020  74a2		       00		      .byte.b	%00000000
   8021  74a3		       00		      .byte.b	%00000000
   8022  74a4		       00		      .byte.b	%00000000
   8023  74a5		       00		      .byte.b	%00000000
   8024  74a6		       00		      .byte.b	%00000000
   8025  74a7		       00		      .byte.b	%00000000
   8026  74a8		       00		      .byte.b	%00000000
   8027  74a9		       00		      .byte.b	%00000000
   8028  74aa		       00		      .byte.b	%00000000
   8029  74ab		       00		      .byte.b	%00000000
   8030  74ac		       00		      .byte.b	%00000000
   8031  74ad		       00		      .byte.b	%00000000
   8032  74ae		       00		      .byte.b	%00000000
   8033  74af		       00		      .byte.b	%00000000
   8034  74b0		       00		      .byte.b	%00000000
   8035  74b1		       00		      .byte.b	%00000000
   8036  74b2		       00		      .byte.b	%00000000
   8037  74b3		       00		      .byte.b	%00000000
   8038  74b4		       00		      .byte.b	%00000000
   8039  74b5		       00		      .byte.b	%00000000
   8040  74b6		       00		      .byte.b	%00000000
   8041  74b7		       00		      .byte.b	%00000000
   8042  74b8		       00		      .byte.b	%00000000
   8043  74b9		       00		      .byte.b	%00000000
   8044  74ba		       00		      .byte.b	%00000000
   8045  74bb		       00		      .byte.b	%00000000
   8046  74bc		       00		      .byte.b	%00000000
   8047  74bd		       00		      .byte.b	%00000000
   8048  74be		       00		      .byte.b	%00000000
   8049  74bf		       00		      .byte.b	%00000000
   8050  74c0				   playfieldcolorL0423
   8051  74c0		       c2		      .byte.b	_C2
   8052  74c1		       c2		      .byte.b	_C2
   8053  74c2		       00		      .byte.b	_00
   8054  74c3		       00		      .byte.b	_00
   8055  74c4		       00		      .byte.b	_00
   8056  74c5		       00		      .byte.b	_00
   8057  74c6		       00		      .byte.b	_00
   8058  74c7		       00		      .byte.b	_00
   8059  74c8		       00		      .byte.b	_00
   8060  74c9		       00		      .byte.b	_00
   8061  74ca		       00		      .byte.b	_00
   8062  74cb		       00		      .byte.b	_00
   8063  74cc		       00		      .byte.b	_00
   8064  74cd		       00		      .byte.b	_00
   8065  74ce		       00		      .byte.b	_00
   8066  74cf		       00		      .byte.b	_00
   8067  74d0		       00		      .byte.b	_00
   8068  74d1		       00		      .byte.b	_00
   8069  74d2		       00		      .byte.b	_00
   8070  74d3		       00		      .byte.b	_00
   8071  74d4		       00		      .byte.b	_00
   8072  74d5		       00		      .byte.b	_00
   8073  74d6		       00		      .byte.b	_00
   8074  74d7		       00		      .byte.b	_00
   8075  74d8		       00		      .byte.b	_00
   8076  74d9		       00		      .byte.b	_00
   8077  74da		       00		      .byte.b	_00
   8078  74db		       00		      .byte.b	_00
   8079  74dc		       00		      .byte.b	_00
   8080  74dd		       00		      .byte.b	_00
   8081  74de		       00		      .byte.b	_00
   8082  74df		       00		      .byte.b	_00
   8083  74e0		       00		      .byte.b	_00
   8084  74e1		       00		      .byte.b	_00
   8085  74e2		       00		      .byte.b	_00
   8086  74e3		       00		      .byte.b	_00
   8087  74e4		       00		      .byte.b	_00
   8088  74e5		       00		      .byte.b	_00
   8089  74e6		       00		      .byte.b	_00
   8090  74e7		       00		      .byte.b	_00
   8091  74e8		       00		      .byte.b	_00
   8092  74e9		       00		      .byte.b	_00
   8093  74ea		       00		      .byte.b	_00
   8094  74eb		       00		      .byte.b	_00
   8095  74ec		       00		      .byte.b	_00
   8096  74ed		       00		      .byte.b	_00
   8097  74ee		       00		      .byte.b	_00
   8098  74ef		       00		      .byte.b	_00
   8099  74f0		       00		      .byte.b	_00
   8100  74f1		       00		      .byte.b	_00
   8101  74f2		       00		      .byte.b	_00
   8102  74f3		       00		      .byte.b	_00
   8103  74f4		       00		      .byte.b	_00
   8104  74f5		       00		      .byte.b	_00
   8105  74f6		       00		      .byte.b	_00
   8106  74f7		       00		      .byte.b	_00
   8107  74f8		       00		      .byte.b	_00
   8108  74f9		       00		      .byte.b	_00
   8109  74fa		       00		      .byte.b	_00
   8110  74fb		       00		      .byte.b	_00
   8111  74fc		       00		      .byte.b	_00
   8112  74fd		       f2		      .byte.b	_F2
   8113  74fe		       f2		      .byte.b	_F2
   8114  74ff		       f2		      .byte.b	_F2
   8115  7500		       f2		      .byte.b	_F2
   8116  7501		       f2		      .byte.b	_F2
   8117  7502		       f2		      .byte.b	_F2
   8118  7503		       f2		      .byte.b	_F2
   8119  7504		       f2		      .byte.b	_F2
   8120  7505		       f2		      .byte.b	_F2
   8121  7506		       f2		      .byte.b	_F2
   8122  7507		       f2		      .byte.b	_F2
   8123  7508		       f2		      .byte.b	_F2
   8124  7509		       f2		      .byte.b	_F2
   8125  750a		       f2		      .byte.b	_F2
   8126  750b		       f2		      .byte.b	_F2
   8127  750c		       f2		      .byte.b	_F2
   8128  750d		       f2		      .byte.b	_F2
   8129  750e		       f2		      .byte.b	_F2
   8130  750f		       f2		      .byte.b	_F2
   8131  7510		       f2		      .byte.b	_F2
   8132  7511		       f2		      .byte.b	_F2
   8133  7512		       f2		      .byte.b	_F2
   8134  7513		       f2		      .byte.b	_F2
   8135  7514		       f2		      .byte.b	_F2
   8136  7515		       f2		      .byte.b	_F2
   8137  7516		       00		      .byte.b	_00
   8138  7517		       00		      .byte.b	_00
   8139  7518				   playfieldcolorL0426
   8140  7518		       c2		      .byte.b	_C2
   8141  7519		       c2		      .byte.b	_C2
   8142  751a		       00		      .byte.b	_00
   8143  751b		       00		      .byte.b	_00
   8144  751c		       00		      .byte.b	_00
   8145  751d		       00		      .byte.b	_00
   8146  751e		       00		      .byte.b	_00
   8147  751f		       00		      .byte.b	_00
   8148  7520		       00		      .byte.b	_00
   8149  7521		       00		      .byte.b	_00
   8150  7522		       00		      .byte.b	_00
   8151  7523		       00		      .byte.b	_00
   8152  7524		       00		      .byte.b	_00
   8153  7525		       00		      .byte.b	_00
   8154  7526		       00		      .byte.b	_00
   8155  7527		       00		      .byte.b	_00
   8156  7528		       00		      .byte.b	_00
   8157  7529		       00		      .byte.b	_00
   8158  752a		       00		      .byte.b	_00
   8159  752b		       00		      .byte.b	_00
   8160  752c		       00		      .byte.b	_00
   8161  752d		       00		      .byte.b	_00
   8162  752e		       00		      .byte.b	_00
   8163  752f		       00		      .byte.b	_00
   8164  7530		       00		      .byte.b	_00
   8165  7531		       00		      .byte.b	_00
   8166  7532		       00		      .byte.b	_00
   8167  7533		       00		      .byte.b	_00
   8168  7534		       00		      .byte.b	_00
   8169  7535		       00		      .byte.b	_00
   8170  7536		       00		      .byte.b	_00
   8171  7537		       00		      .byte.b	_00
   8172  7538		       00		      .byte.b	_00
   8173  7539		       00		      .byte.b	_00
   8174  753a		       00		      .byte.b	_00
   8175  753b		       00		      .byte.b	_00
   8176  753c		       00		      .byte.b	_00
   8177  753d		       00		      .byte.b	_00
   8178  753e		       00		      .byte.b	_00
   8179  753f		       00		      .byte.b	_00
   8180  7540		       00		      .byte.b	_00
   8181  7541		       00		      .byte.b	_00
   8182  7542		       00		      .byte.b	_00
   8183  7543		       00		      .byte.b	_00
   8184  7544		       00		      .byte.b	_00
   8185  7545		       00		      .byte.b	_00
   8186  7546		       00		      .byte.b	_00
   8187  7547		       00		      .byte.b	_00
   8188  7548		       00		      .byte.b	_00
   8189  7549		       00		      .byte.b	_00
   8190  754a		       00		      .byte.b	_00
   8191  754b		       00		      .byte.b	_00
   8192  754c		       00		      .byte.b	_00
   8193  754d		       00		      .byte.b	_00
   8194  754e		       00		      .byte.b	_00
   8195  754f		       34		      .byte.b	_34
   8196  7550		       34		      .byte.b	_34
   8197  7551		       34		      .byte.b	_34
   8198  7552		       00		      .byte.b	_00
   8199  7553		       00		      .byte.b	_00
   8200  7554		       00		      .byte.b	_00
   8201  7555		       f2		      .byte.b	_F2
   8202  7556		       f2		      .byte.b	_F2
   8203  7557		       f2		      .byte.b	_F2
   8204  7558		       f2		      .byte.b	_F2
   8205  7559		       f2		      .byte.b	_F2
   8206  755a		       f2		      .byte.b	_F2
   8207  755b		       f2		      .byte.b	_F2
   8208  755c		       f2		      .byte.b	_F2
   8209  755d		       f2		      .byte.b	_F2
   8210  755e		       f2		      .byte.b	_F2
   8211  755f		       f2		      .byte.b	_F2
   8212  7560		       f2		      .byte.b	_F2
   8213  7561		       f2		      .byte.b	_F2
   8214  7562		       f2		      .byte.b	_F2
   8215  7563		       f2		      .byte.b	_F2
   8216  7564		       f2		      .byte.b	_F2
   8217  7565		       f2		      .byte.b	_F2
   8218  7566		       f2		      .byte.b	_F2
   8219  7567		       f2		      .byte.b	_F2
   8220  7568		       f2		      .byte.b	_F2
   8221  7569		       f2		      .byte.b	_F2
   8222  756a		       f2		      .byte.b	_F2
   8223  756b		       f2		      .byte.b	_F2
   8224  756c		       f2		      .byte.b	_F2
   8225  756d		       f2		      .byte.b	_F2
   8226  756e		       00		      .byte.b	_00
   8227  756f		       00		      .byte.b	_00
   8228  7570				   playfieldcolorL0429
   8229  7570		       c2		      .byte.b	_C2
   8230  7571		       c2		      .byte.b	_C2
   8231  7572		       00		      .byte.b	_00
   8232  7573		       00		      .byte.b	_00
   8233  7574		       00		      .byte.b	_00
   8234  7575		       00		      .byte.b	_00
   8235  7576		       00		      .byte.b	_00
   8236  7577		       00		      .byte.b	_00
   8237  7578		       00		      .byte.b	_00
   8238  7579		       00		      .byte.b	_00
   8239  757a		       00		      .byte.b	_00
   8240  757b		       00		      .byte.b	_00
   8241  757c		       00		      .byte.b	_00
   8242  757d		       00		      .byte.b	_00
   8243  757e		       00		      .byte.b	_00
   8244  757f		       00		      .byte.b	_00
   8245  7580		       00		      .byte.b	_00
   8246  7581		       00		      .byte.b	_00
   8247  7582		       00		      .byte.b	_00
   8248  7583		       00		      .byte.b	_00
   8249  7584		       00		      .byte.b	_00
   8250  7585		       00		      .byte.b	_00
   8251  7586		       00		      .byte.b	_00
   8252  7587		       00		      .byte.b	_00
   8253  7588		       00		      .byte.b	_00
   8254  7589		       00		      .byte.b	_00
   8255  758a		       00		      .byte.b	_00
   8256  758b		       00		      .byte.b	_00
   8257  758c		       00		      .byte.b	_00
   8258  758d		       00		      .byte.b	_00
   8259  758e		       00		      .byte.b	_00
   8260  758f		       00		      .byte.b	_00
   8261  7590		       00		      .byte.b	_00
   8262  7591		       00		      .byte.b	_00
   8263  7592		       00		      .byte.b	_00
   8264  7593		       00		      .byte.b	_00
   8265  7594		       00		      .byte.b	_00
   8266  7595		       00		      .byte.b	_00
   8267  7596		       00		      .byte.b	_00
   8268  7597		       00		      .byte.b	_00
   8269  7598		       00		      .byte.b	_00
   8270  7599		       00		      .byte.b	_00
   8271  759a		       00		      .byte.b	_00
   8272  759b		       00		      .byte.b	_00
   8273  759c		       00		      .byte.b	_00
   8274  759d		       00		      .byte.b	_00
   8275  759e		       00		      .byte.b	_00
   8276  759f		       00		      .byte.b	_00
   8277  75a0		       00		      .byte.b	_00
   8278  75a1		       00		      .byte.b	_00
   8279  75a2		       00		      .byte.b	_00
   8280  75a3		       00		      .byte.b	_00
   8281  75a4		       00		      .byte.b	_00
   8282  75a5		       00		      .byte.b	_00
   8283  75a6		       00		      .byte.b	_00
   8284  75a7		       34		      .byte.b	_34
   8285  75a8		       34		      .byte.b	_34
   8286  75a9		       34		      .byte.b	_34
   8287  75aa		       34		      .byte.b	_34
   8288  75ab		       34		      .byte.b	_34
   8289  75ac		       34		      .byte.b	_34
   8290  75ad		       f2		      .byte.b	_F2
   8291  75ae		       f2		      .byte.b	_F2
   8292  75af		       f2		      .byte.b	_F2
   8293  75b0		       f2		      .byte.b	_F2
   8294  75b1		       f2		      .byte.b	_F2
   8295  75b2		       f2		      .byte.b	_F2
   8296  75b3		       f2		      .byte.b	_F2
   8297  75b4		       f2		      .byte.b	_F2
   8298  75b5		       f2		      .byte.b	_F2
   8299  75b6		       f2		      .byte.b	_F2
   8300  75b7		       f2		      .byte.b	_F2
   8301  75b8		       f2		      .byte.b	_F2
   8302  75b9		       f2		      .byte.b	_F2
   8303  75ba		       f2		      .byte.b	_F2
   8304  75bb		       f2		      .byte.b	_F2
   8305  75bc		       f2		      .byte.b	_F2
   8306  75bd		       f2		      .byte.b	_F2
   8307  75be		       f2		      .byte.b	_F2
   8308  75bf		       f2		      .byte.b	_F2
   8309  75c0		       f2		      .byte.b	_F2
   8310  75c1		       f2		      .byte.b	_F2
   8311  75c2		       f2		      .byte.b	_F2
   8312  75c3		       f2		      .byte.b	_F2
   8313  75c4		       f2		      .byte.b	_F2
   8314  75c5		       f2		      .byte.b	_F2
   8315  75c6		       00		      .byte.b	_00
   8316  75c7		       00		      .byte.b	_00
   8317  75c8				   playfieldcolorL0432
   8318  75c8		       c2		      .byte.b	_C2
   8319  75c9		       c2		      .byte.b	_C2
   8320  75ca		       00		      .byte.b	_00
   8321  75cb		       00		      .byte.b	_00
   8322  75cc		       00		      .byte.b	_00
   8323  75cd		       00		      .byte.b	_00
   8324  75ce		       00		      .byte.b	_00
   8325  75cf		       00		      .byte.b	_00
   8326  75d0		       00		      .byte.b	_00
   8327  75d1		       00		      .byte.b	_00
   8328  75d2		       00		      .byte.b	_00
   8329  75d3		       00		      .byte.b	_00
   8330  75d4		       00		      .byte.b	_00
   8331  75d5		       00		      .byte.b	_00
   8332  75d6		       00		      .byte.b	_00
   8333  75d7		       00		      .byte.b	_00
   8334  75d8		       00		      .byte.b	_00
   8335  75d9		       00		      .byte.b	_00
   8336  75da		       00		      .byte.b	_00
   8337  75db		       00		      .byte.b	_00
   8338  75dc		       00		      .byte.b	_00
   8339  75dd		       00		      .byte.b	_00
   8340  75de		       00		      .byte.b	_00
   8341  75df		       00		      .byte.b	_00
   8342  75e0		       00		      .byte.b	_00
   8343  75e1		       00		      .byte.b	_00
   8344  75e2		       00		      .byte.b	_00
   8345  75e3		       00		      .byte.b	_00
   8346  75e4		       00		      .byte.b	_00
   8347  75e5		       00		      .byte.b	_00
   8348  75e6		       00		      .byte.b	_00
   8349  75e7		       00		      .byte.b	_00
   8350  75e8		       00		      .byte.b	_00
   8351  75e9		       00		      .byte.b	_00
   8352  75ea		       00		      .byte.b	_00
   8353  75eb		       00		      .byte.b	_00
   8354  75ec		       00		      .byte.b	_00
   8355  75ed		       00		      .byte.b	_00
   8356  75ee		       00		      .byte.b	_00
   8357  75ef		       00		      .byte.b	_00
   8358  75f0		       00		      .byte.b	_00
   8359  75f1		       00		      .byte.b	_00
   8360  75f2		       00		      .byte.b	_00
   8361  75f3		       00		      .byte.b	_00
   8362  75f4		       00		      .byte.b	_00
   8363  75f5		       00		      .byte.b	_00
   8364  75f6		       00		      .byte.b	_00
   8365  75f7		       00		      .byte.b	_00
   8366  75f8		       00		      .byte.b	_00
   8367  75f9		       00		      .byte.b	_00
   8368  75fa		       00		      .byte.b	_00
   8369  75fb		       00		      .byte.b	_00
   8370  75fc		       00		      .byte.b	_00
   8371  75fd		       00		      .byte.b	_00
   8372  75fe		       00		      .byte.b	_00
   8373  75ff		       34		      .byte.b	_34
   8374  7600		       34		      .byte.b	_34
   8375  7601		       34		      .byte.b	_34
   8376  7602		       34		      .byte.b	_34
   8377  7603		       34		      .byte.b	_34
   8378  7604		       34		      .byte.b	_34
   8379  7605		       34		      .byte.b	_34
   8380  7606		       34		      .byte.b	_34
   8381  7607		       34		      .byte.b	_34
   8382  7608		       f2		      .byte.b	_F2
   8383  7609		       f2		      .byte.b	_F2
   8384  760a		       f2		      .byte.b	_F2
   8385  760b		       f2		      .byte.b	_F2
   8386  760c		       f2		      .byte.b	_F2
   8387  760d		       f2		      .byte.b	_F2
   8388  760e		       f2		      .byte.b	_F2
   8389  760f		       f2		      .byte.b	_F2
   8390  7610		       f2		      .byte.b	_F2
   8391  7611		       f2		      .byte.b	_F2
   8392  7612		       f2		      .byte.b	_F2
   8393  7613		       f2		      .byte.b	_F2
   8394  7614		       f2		      .byte.b	_F2
   8395  7615		       f2		      .byte.b	_F2
   8396  7616		       f2		      .byte.b	_F2
   8397  7617		       f2		      .byte.b	_F2
   8398  7618		       f2		      .byte.b	_F2
   8399  7619		       f2		      .byte.b	_F2
   8400  761a		       f2		      .byte.b	_F2
   8401  761b		       f2		      .byte.b	_F2
   8402  761c		       f2		      .byte.b	_F2
   8403  761d		       f2		      .byte.b	_F2
   8404  761e		       00		      .byte.b	_00
   8405  761f		       00		      .byte.b	_00
   8406  7620				   playfieldcolorL0436
   8407  7620		       c2		      .byte.b	_C2
   8408  7621		       c2		      .byte.b	_C2
   8409  7622		       00		      .byte.b	_00
   8410  7623		       00		      .byte.b	_00
   8411  7624		       00		      .byte.b	_00
   8412  7625		       00		      .byte.b	_00
   8413  7626		       00		      .byte.b	_00
   8414  7627		       00		      .byte.b	_00
   8415  7628		       00		      .byte.b	_00
   8416  7629		       00		      .byte.b	_00
   8417  762a		       00		      .byte.b	_00
   8418  762b		       00		      .byte.b	_00
   8419  762c		       00		      .byte.b	_00
   8420  762d		       00		      .byte.b	_00
   8421  762e		       00		      .byte.b	_00
   8422  762f		       00		      .byte.b	_00
   8423  7630		       00		      .byte.b	_00
   8424  7631		       00		      .byte.b	_00
   8425  7632		       00		      .byte.b	_00
   8426  7633		       00		      .byte.b	_00
   8427  7634		       00		      .byte.b	_00
   8428  7635		       00		      .byte.b	_00
   8429  7636		       00		      .byte.b	_00
   8430  7637		       00		      .byte.b	_00
   8431  7638		       00		      .byte.b	_00
   8432  7639		       00		      .byte.b	_00
   8433  763a		       00		      .byte.b	_00
   8434  763b		       00		      .byte.b	_00
   8435  763c		       00		      .byte.b	_00
   8436  763d		       00		      .byte.b	_00
   8437  763e		       00		      .byte.b	_00
   8438  763f		       00		      .byte.b	_00
   8439  7640		       00		      .byte.b	_00
   8440  7641		       00		      .byte.b	_00
   8441  7642		       00		      .byte.b	_00
   8442  7643		       00		      .byte.b	_00
   8443  7644		       00		      .byte.b	_00
   8444  7645		       00		      .byte.b	_00
   8445  7646		       00		      .byte.b	_00
   8446  7647		       00		      .byte.b	_00
   8447  7648		       00		      .byte.b	_00
   8448  7649		       00		      .byte.b	_00
   8449  764a		       00		      .byte.b	_00
   8450  764b		       00		      .byte.b	_00
   8451  764c		       00		      .byte.b	_00
   8452  764d		       00		      .byte.b	_00
   8453  764e		       00		      .byte.b	_00
   8454  764f		       00		      .byte.b	_00
   8455  7650		       00		      .byte.b	_00
   8456  7651		       00		      .byte.b	_00
   8457  7652		       00		      .byte.b	_00
   8458  7653		       00		      .byte.b	_00
   8459  7654		       00		      .byte.b	_00
   8460  7655		       00		      .byte.b	_00
   8461  7656		       00		      .byte.b	_00
   8462  7657		       34		      .byte.b	_34
   8463  7658		       34		      .byte.b	_34
   8464  7659		       34		      .byte.b	_34
   8465  765a		       34		      .byte.b	_34
   8466  765b		       34		      .byte.b	_34
   8467  765c		       34		      .byte.b	_34
   8468  765d		       34		      .byte.b	_34
   8469  765e		       34		      .byte.b	_34
   8470  765f		       34		      .byte.b	_34
   8471  7660		       34		      .byte.b	_34
   8472  7661		       34		      .byte.b	_34
   8473  7662		       34		      .byte.b	_34
   8474  7663		       f2		      .byte.b	_F2
   8475  7664		       f2		      .byte.b	_F2
   8476  7665		       f2		      .byte.b	_F2
   8477  7666		       f2		      .byte.b	_F2
   8478  7667		       f2		      .byte.b	_F2
   8479  7668		       f2		      .byte.b	_F2
   8480  7669		       f2		      .byte.b	_F2
   8481  766a		       f2		      .byte.b	_F2
   8482  766b		       f2		      .byte.b	_F2
   8483  766c		       f2		      .byte.b	_F2
   8484  766d		       f2		      .byte.b	_F2
   8485  766e		       f2		      .byte.b	_F2
   8486  766f		       f2		      .byte.b	_F2
   8487  7670		       f2		      .byte.b	_F2
   8488  7671		       f2		      .byte.b	_F2
   8489  7672		       f2		      .byte.b	_F2
   8490  7673		       f2		      .byte.b	_F2
   8491  7674		       f2		      .byte.b	_F2
   8492  7675		       f2		      .byte.b	_F2
   8493  7676		       00		      .byte.b	_00
   8494  7677		       00		      .byte.b	_00
   8495  7678				   playfieldcolorL0439
   8496  7678		       c2		      .byte.b	_C2
   8497  7679		       c2		      .byte.b	_C2
   8498  767a		       00		      .byte.b	_00
   8499  767b		       00		      .byte.b	_00
   8500  767c		       00		      .byte.b	_00
   8501  767d		       00		      .byte.b	_00
   8502  767e		       00		      .byte.b	_00
   8503  767f		       00		      .byte.b	_00
   8504  7680		       00		      .byte.b	_00
   8505  7681		       00		      .byte.b	_00
   8506  7682		       00		      .byte.b	_00
   8507  7683		       00		      .byte.b	_00
   8508  7684		       00		      .byte.b	_00
   8509  7685		       00		      .byte.b	_00
   8510  7686		       00		      .byte.b	_00
   8511  7687		       00		      .byte.b	_00
   8512  7688		       00		      .byte.b	_00
   8513  7689		       00		      .byte.b	_00
   8514  768a		       00		      .byte.b	_00
   8515  768b		       00		      .byte.b	_00
   8516  768c		       00		      .byte.b	_00
   8517  768d		       00		      .byte.b	_00
   8518  768e		       00		      .byte.b	_00
   8519  768f		       00		      .byte.b	_00
   8520  7690		       00		      .byte.b	_00
   8521  7691		       00		      .byte.b	_00
   8522  7692		       00		      .byte.b	_00
   8523  7693		       00		      .byte.b	_00
   8524  7694		       00		      .byte.b	_00
   8525  7695		       00		      .byte.b	_00
   8526  7696		       00		      .byte.b	_00
   8527  7697		       00		      .byte.b	_00
   8528  7698		       00		      .byte.b	_00
   8529  7699		       00		      .byte.b	_00
   8530  769a		       00		      .byte.b	_00
   8531  769b		       00		      .byte.b	_00
   8532  769c		       00		      .byte.b	_00
   8533  769d		       00		      .byte.b	_00
   8534  769e		       00		      .byte.b	_00
   8535  769f		       00		      .byte.b	_00
   8536  76a0		       00		      .byte.b	_00
   8537  76a1		       00		      .byte.b	_00
   8538  76a2		       00		      .byte.b	_00
   8539  76a3		       00		      .byte.b	_00
   8540  76a4		       00		      .byte.b	_00
   8541  76a5		       00		      .byte.b	_00
   8542  76a6		       00		      .byte.b	_00
   8543  76a7		       00		      .byte.b	_00
   8544  76a8		       00		      .byte.b	_00
   8545  76a9		       00		      .byte.b	_00
   8546  76aa		       00		      .byte.b	_00
   8547  76ab		       00		      .byte.b	_00
   8548  76ac		       00		      .byte.b	_00
   8549  76ad		       00		      .byte.b	_00
   8550  76ae		       00		      .byte.b	_00
   8551  76af		       34		      .byte.b	_34
   8552  76b0		       34		      .byte.b	_34
   8553  76b1		       34		      .byte.b	_34
   8554  76b2		       34		      .byte.b	_34
   8555  76b3		       34		      .byte.b	_34
   8556  76b4		       34		      .byte.b	_34
   8557  76b5		       34		      .byte.b	_34
   8558  76b6		       34		      .byte.b	_34
   8559  76b7		       34		      .byte.b	_34
   8560  76b8		       34		      .byte.b	_34
   8561  76b9		       34		      .byte.b	_34
   8562  76ba		       34		      .byte.b	_34
   8563  76bb		       34		      .byte.b	_34
   8564  76bc		       34		      .byte.b	_34
   8565  76bd		       34		      .byte.b	_34
   8566  76be		       f2		      .byte.b	_F2
   8567  76bf		       f2		      .byte.b	_F2
   8568  76c0		       f2		      .byte.b	_F2
   8569  76c1		       f2		      .byte.b	_F2
   8570  76c2		       f2		      .byte.b	_F2
   8571  76c3		       f2		      .byte.b	_F2
   8572  76c4		       f2		      .byte.b	_F2
   8573  76c5		       f2		      .byte.b	_F2
   8574  76c6		       f2		      .byte.b	_F2
   8575  76c7		       f2		      .byte.b	_F2
   8576  76c8		       f2		      .byte.b	_F2
   8577  76c9		       f2		      .byte.b	_F2
   8578  76ca		       f2		      .byte.b	_F2
   8579  76cb		       f2		      .byte.b	_F2
   8580  76cc		       f2		      .byte.b	_F2
   8581  76cd		       f2		      .byte.b	_F2
   8582  76ce		       00		      .byte.b	_00
   8583  76cf		       00		      .byte.b	_00
   8584  76d0				   playfieldcolorL0441
   8585  76d0		       c2		      .byte.b	_C2
   8586  76d1		       c2		      .byte.b	_C2
   8587  76d2		       00		      .byte.b	_00
   8588  76d3		       00		      .byte.b	_00
   8589  76d4		       00		      .byte.b	_00
   8590  76d5		       00		      .byte.b	_00
   8591  76d6		       00		      .byte.b	_00
   8592  76d7		       00		      .byte.b	_00
   8593  76d8		       00		      .byte.b	_00
   8594  76d9		       00		      .byte.b	_00
   8595  76da		       00		      .byte.b	_00
   8596  76db		       00		      .byte.b	_00
   8597  76dc		       00		      .byte.b	_00
   8598  76dd		       00		      .byte.b	_00
   8599  76de		       00		      .byte.b	_00
   8600  76df		       00		      .byte.b	_00
   8601  76e0		       00		      .byte.b	_00
   8602  76e1		       00		      .byte.b	_00
   8603  76e2		       00		      .byte.b	_00
   8604  76e3		       00		      .byte.b	_00
   8605  76e4		       00		      .byte.b	_00
   8606  76e5		       00		      .byte.b	_00
   8607  76e6		       00		      .byte.b	_00
   8608  76e7		       00		      .byte.b	_00
   8609  76e8		       00		      .byte.b	_00
   8610  76e9		       00		      .byte.b	_00
   8611  76ea		       00		      .byte.b	_00
   8612  76eb		       00		      .byte.b	_00
   8613  76ec		       00		      .byte.b	_00
   8614  76ed		       00		      .byte.b	_00
   8615  76ee		       00		      .byte.b	_00
   8616  76ef		       00		      .byte.b	_00
   8617  76f0		       00		      .byte.b	_00
   8618  76f1		       00		      .byte.b	_00
   8619  76f2		       00		      .byte.b	_00
   8620  76f3		       00		      .byte.b	_00
   8621  76f4		       00		      .byte.b	_00
   8622  76f5		       00		      .byte.b	_00
   8623  76f6		       00		      .byte.b	_00
   8624  76f7		       00		      .byte.b	_00
   8625  76f8		       00		      .byte.b	_00
   8626  76f9		       00		      .byte.b	_00
   8627  76fa		       00		      .byte.b	_00
   8628  76fb		       00		      .byte.b	_00
   8629  76fc		       00		      .byte.b	_00
   8630  76fd		       00		      .byte.b	_00
   8631  76fe		       00		      .byte.b	_00
   8632  76ff		       00		      .byte.b	_00
   8633  7700		       00		      .byte.b	_00
   8634  7701		       00		      .byte.b	_00
   8635  7702		       00		      .byte.b	_00
   8636  7703		       00		      .byte.b	_00
   8637  7704		       00		      .byte.b	_00
   8638  7705		       00		      .byte.b	_00
   8639  7706		       00		      .byte.b	_00
   8640  7707		       34		      .byte.b	_34
   8641  7708		       34		      .byte.b	_34
   8642  7709		       34		      .byte.b	_34
   8643  770a		       34		      .byte.b	_34
   8644  770b		       34		      .byte.b	_34
   8645  770c		       34		      .byte.b	_34
   8646  770d		       34		      .byte.b	_34
   8647  770e		       34		      .byte.b	_34
   8648  770f		       34		      .byte.b	_34
   8649  7710		       34		      .byte.b	_34
   8650  7711		       34		      .byte.b	_34
   8651  7712		       34		      .byte.b	_34
   8652  7713		       34		      .byte.b	_34
   8653  7714		       34		      .byte.b	_34
   8654  7715		       34		      .byte.b	_34
   8655  7716		       34		      .byte.b	_34
   8656  7717		       34		      .byte.b	_34
   8657  7718		       34		      .byte.b	_34
   8658  7719		       f2		      .byte.b	_F2
   8659  771a		       f2		      .byte.b	_F2
   8660  771b		       f2		      .byte.b	_F2
   8661  771c		       f2		      .byte.b	_F2
   8662  771d		       f2		      .byte.b	_F2
   8663  771e		       f2		      .byte.b	_F2
   8664  771f		       f2		      .byte.b	_F2
   8665  7720		       f2		      .byte.b	_F2
   8666  7721		       f2		      .byte.b	_F2
   8667  7722		       f2		      .byte.b	_F2
   8668  7723		       f2		      .byte.b	_F2
   8669  7724		       f2		      .byte.b	_F2
   8670  7725		       f2		      .byte.b	_F2
   8671  7726		       00		      .byte.b	_00
   8672  7727		       00		      .byte.b	_00
   8673  7728				   playfieldcolorL0445
   8674  7728		       c2		      .byte.b	_C2
   8675  7729		       c2		      .byte.b	_C2
   8676  772a		       00		      .byte.b	_00
   8677  772b		       00		      .byte.b	_00
   8678  772c		       00		      .byte.b	_00
   8679  772d		       00		      .byte.b	_00
   8680  772e		       00		      .byte.b	_00
   8681  772f		       00		      .byte.b	_00
   8682  7730		       00		      .byte.b	_00
   8683  7731		       00		      .byte.b	_00
   8684  7732		       00		      .byte.b	_00
   8685  7733		       00		      .byte.b	_00
   8686  7734		       00		      .byte.b	_00
   8687  7735		       00		      .byte.b	_00
   8688  7736		       00		      .byte.b	_00
   8689  7737		       00		      .byte.b	_00
   8690  7738		       00		      .byte.b	_00
   8691  7739		       00		      .byte.b	_00
   8692  773a		       00		      .byte.b	_00
   8693  773b		       00		      .byte.b	_00
   8694  773c		       00		      .byte.b	_00
   8695  773d		       00		      .byte.b	_00
   8696  773e		       00		      .byte.b	_00
   8697  773f		       00		      .byte.b	_00
   8698  7740		       00		      .byte.b	_00
   8699  7741		       00		      .byte.b	_00
   8700  7742		       00		      .byte.b	_00
   8701  7743		       00		      .byte.b	_00
   8702  7744		       00		      .byte.b	_00
   8703  7745		       00		      .byte.b	_00
   8704  7746		       00		      .byte.b	_00
   8705  7747		       00		      .byte.b	_00
   8706  7748		       00		      .byte.b	_00
   8707  7749		       00		      .byte.b	_00
   8708  774a		       00		      .byte.b	_00
   8709  774b		       00		      .byte.b	_00
   8710  774c		       00		      .byte.b	_00
   8711  774d		       00		      .byte.b	_00
   8712  774e		       00		      .byte.b	_00
   8713  774f		       00		      .byte.b	_00
   8714  7750		       00		      .byte.b	_00
   8715  7751		       00		      .byte.b	_00
   8716  7752		       00		      .byte.b	_00
   8717  7753		       00		      .byte.b	_00
   8718  7754		       00		      .byte.b	_00
   8719  7755		       00		      .byte.b	_00
   8720  7756		       00		      .byte.b	_00
   8721  7757		       00		      .byte.b	_00
   8722  7758		       00		      .byte.b	_00
   8723  7759		       00		      .byte.b	_00
   8724  775a		       00		      .byte.b	_00
   8725  775b		       00		      .byte.b	_00
   8726  775c		       00		      .byte.b	_00
   8727  775d		       00		      .byte.b	_00
   8728  775e		       00		      .byte.b	_00
   8729  775f		       40		      .byte.b	_40
   8730  7760		       40		      .byte.b	_40
   8731  7761		       40		      .byte.b	_40
   8732  7762		       40		      .byte.b	_40
   8733  7763		       40		      .byte.b	_40
   8734  7764		       40		      .byte.b	_40
   8735  7765		       40		      .byte.b	_40
   8736  7766		       40		      .byte.b	_40
   8737  7767		       40		      .byte.b	_40
   8738  7768		       40		      .byte.b	_40
   8739  7769		       40		      .byte.b	_40
   8740  776a		       40		      .byte.b	_40
   8741  776b		       40		      .byte.b	_40
   8742  776c		       40		      .byte.b	_40
   8743  776d		       40		      .byte.b	_40
   8744  776e		       40		      .byte.b	_40
   8745  776f		       40		      .byte.b	_40
   8746  7770		       40		      .byte.b	_40
   8747  7771		       40		      .byte.b	_40
   8748  7772		       40		      .byte.b	_40
   8749  7773		       40		      .byte.b	_40
   8750  7774		       f2		      .byte.b	_F2
   8751  7775		       f2		      .byte.b	_F2
   8752  7776		       f2		      .byte.b	_F2
   8753  7777		       f2		      .byte.b	_F2
   8754  7778		       f2		      .byte.b	_F2
   8755  7779		       f2		      .byte.b	_F2
   8756  777a		       f2		      .byte.b	_F2
   8757  777b		       f2		      .byte.b	_F2
   8758  777c		       f2		      .byte.b	_F2
   8759  777d		       f2		      .byte.b	_F2
   8760  777e		       00		      .byte.b	_00
   8761  777f		       00		      .byte.b	_00
   8762  7780				   playfieldcolorL0447
   8763  7780		       c2		      .byte.b	_C2
   8764  7781		       c2		      .byte.b	_C2
   8765  7782		       00		      .byte.b	_00
   8766  7783		       00		      .byte.b	_00
   8767  7784		       00		      .byte.b	_00
   8768  7785		       00		      .byte.b	_00
   8769  7786		       00		      .byte.b	_00
   8770  7787		       00		      .byte.b	_00
   8771  7788		       00		      .byte.b	_00
   8772  7789		       00		      .byte.b	_00
   8773  778a		       00		      .byte.b	_00
   8774  778b		       00		      .byte.b	_00
   8775  778c		       00		      .byte.b	_00
   8776  778d		       00		      .byte.b	_00
   8777  778e		       00		      .byte.b	_00
   8778  778f		       00		      .byte.b	_00
   8779  7790		       00		      .byte.b	_00
   8780  7791		       00		      .byte.b	_00
   8781  7792		       00		      .byte.b	_00
   8782  7793		       00		      .byte.b	_00
   8783  7794		       00		      .byte.b	_00
   8784  7795		       00		      .byte.b	_00
   8785  7796		       00		      .byte.b	_00
   8786  7797		       00		      .byte.b	_00
   8787  7798		       00		      .byte.b	_00
   8788  7799		       00		      .byte.b	_00
   8789  779a		       00		      .byte.b	_00
   8790  779b		       00		      .byte.b	_00
   8791  779c		       00		      .byte.b	_00
   8792  779d		       00		      .byte.b	_00
   8793  779e		       00		      .byte.b	_00
   8794  779f		       00		      .byte.b	_00
   8795  77a0		       00		      .byte.b	_00
   8796  77a1		       00		      .byte.b	_00
   8797  77a2		       00		      .byte.b	_00
   8798  77a3		       00		      .byte.b	_00
   8799  77a4		       00		      .byte.b	_00
   8800  77a5		       00		      .byte.b	_00
   8801  77a6		       00		      .byte.b	_00
   8802  77a7		       00		      .byte.b	_00
   8803  77a8		       00		      .byte.b	_00
   8804  77a9		       00		      .byte.b	_00
   8805  77aa		       00		      .byte.b	_00
   8806  77ab		       00		      .byte.b	_00
   8807  77ac		       00		      .byte.b	_00
   8808  77ad		       00		      .byte.b	_00
   8809  77ae		       00		      .byte.b	_00
   8810  77af		       00		      .byte.b	_00
   8811  77b0		       00		      .byte.b	_00
   8812  77b1		       00		      .byte.b	_00
   8813  77b2		       00		      .byte.b	_00
   8814  77b3		       00		      .byte.b	_00
   8815  77b4		       00		      .byte.b	_00
   8816  77b5		       00		      .byte.b	_00
   8817  77b6		       00		      .byte.b	_00
   8818  77b7		       40		      .byte.b	_40
   8819  77b8		       40		      .byte.b	_40
   8820  77b9		       40		      .byte.b	_40
   8821  77ba		       40		      .byte.b	_40
   8822  77bb		       40		      .byte.b	_40
   8823  77bc		       40		      .byte.b	_40
   8824  77bd		       40		      .byte.b	_40
   8825  77be		       40		      .byte.b	_40
   8826  77bf		       40		      .byte.b	_40
   8827  77c0		       40		      .byte.b	_40
   8828  77c1		       40		      .byte.b	_40
   8829  77c2		       40		      .byte.b	_40
   8830  77c3		       40		      .byte.b	_40
   8831  77c4		       40		      .byte.b	_40
   8832  77c5		       40		      .byte.b	_40
   8833  77c6		       40		      .byte.b	_40
   8834  77c7		       40		      .byte.b	_40
   8835  77c8		       40		      .byte.b	_40
   8836  77c9		       40		      .byte.b	_40
   8837  77ca		       40		      .byte.b	_40
   8838  77cb		       40		      .byte.b	_40
   8839  77cc		       40		      .byte.b	_40
   8840  77cd		       40		      .byte.b	_40
   8841  77ce		       40		      .byte.b	_40
   8842  77cf		       f2		      .byte.b	_F2
   8843  77d0		       f2		      .byte.b	_F2
   8844  77d1		       f2		      .byte.b	_F2
   8845  77d2		       f2		      .byte.b	_F2
   8846  77d3		       f2		      .byte.b	_F2
   8847  77d4		       f2		      .byte.b	_F2
   8848  77d5		       f2		      .byte.b	_F2
   8849  77d6		       00		      .byte.b	_00
   8850  77d7		       00		      .byte.b	_00
   8851  77d8				   playfieldcolorL0449
   8852  77d8		       c2		      .byte.b	_C2
   8853  77d9		       c2		      .byte.b	_C2
   8854  77da		       00		      .byte.b	_00
   8855  77db		       00		      .byte.b	_00
   8856  77dc		       00		      .byte.b	_00
   8857  77dd		       00		      .byte.b	_00
   8858  77de		       00		      .byte.b	_00
   8859  77df		       00		      .byte.b	_00
   8860  77e0		       00		      .byte.b	_00
   8861  77e1		       00		      .byte.b	_00
   8862  77e2		       00		      .byte.b	_00
   8863  77e3		       00		      .byte.b	_00
   8864  77e4		       00		      .byte.b	_00
   8865  77e5		       00		      .byte.b	_00
   8866  77e6		       00		      .byte.b	_00
   8867  77e7		       00		      .byte.b	_00
   8868  77e8		       00		      .byte.b	_00
   8869  77e9		       00		      .byte.b	_00
   8870  77ea		       00		      .byte.b	_00
   8871  77eb		       00		      .byte.b	_00
   8872  77ec		       00		      .byte.b	_00
   8873  77ed		       00		      .byte.b	_00
   8874  77ee		       00		      .byte.b	_00
   8875  77ef		       00		      .byte.b	_00
   8876  77f0		       00		      .byte.b	_00
   8877  77f1		       00		      .byte.b	_00
   8878  77f2		       00		      .byte.b	_00
   8879  77f3		       00		      .byte.b	_00
   8880  77f4		       00		      .byte.b	_00
   8881  77f5		       00		      .byte.b	_00
   8882  77f6		       00		      .byte.b	_00
   8883  77f7		       00		      .byte.b	_00
   8884  77f8		       00		      .byte.b	_00
   8885  77f9		       00		      .byte.b	_00
   8886  77fa		       00		      .byte.b	_00
   8887  77fb		       00		      .byte.b	_00
   8888  77fc		       00		      .byte.b	_00
   8889  77fd		       00		      .byte.b	_00
   8890  77fe		       00		      .byte.b	_00
   8891  77ff		       00		      .byte.b	_00
   8892  7800		       00		      .byte.b	_00
   8893  7801		       00		      .byte.b	_00
   8894  7802		       00		      .byte.b	_00
   8895  7803		       00		      .byte.b	_00
   8896  7804		       00		      .byte.b	_00
   8897  7805		       00		      .byte.b	_00
   8898  7806		       00		      .byte.b	_00
   8899  7807		       00		      .byte.b	_00
   8900  7808		       00		      .byte.b	_00
   8901  7809		       00		      .byte.b	_00
   8902  780a		       00		      .byte.b	_00
   8903  780b		       00		      .byte.b	_00
   8904  780c		       00		      .byte.b	_00
   8905  780d		       00		      .byte.b	_00
   8906  780e		       00		      .byte.b	_00
   8907  780f		       40		      .byte.b	_40
   8908  7810		       40		      .byte.b	_40
   8909  7811		       40		      .byte.b	_40
   8910  7812		       40		      .byte.b	_40
   8911  7813		       40		      .byte.b	_40
   8912  7814		       40		      .byte.b	_40
   8913  7815		       40		      .byte.b	_40
   8914  7816		       40		      .byte.b	_40
   8915  7817		       40		      .byte.b	_40
   8916  7818		       40		      .byte.b	_40
   8917  7819		       40		      .byte.b	_40
   8918  781a		       40		      .byte.b	_40
   8919  781b		       40		      .byte.b	_40
   8920  781c		       40		      .byte.b	_40
   8921  781d		       40		      .byte.b	_40
   8922  781e		       40		      .byte.b	_40
   8923  781f		       40		      .byte.b	_40
   8924  7820		       40		      .byte.b	_40
   8925  7821		       40		      .byte.b	_40
   8926  7822		       40		      .byte.b	_40
   8927  7823		       40		      .byte.b	_40
   8928  7824		       40		      .byte.b	_40
   8929  7825		       40		      .byte.b	_40
   8930  7826		       40		      .byte.b	_40
   8931  7827		       f2		      .byte.b	_F2
   8932  7828		       f2		      .byte.b	_F2
   8933  7829		       f2		      .byte.b	_F2
   8934  782a		       f2		      .byte.b	_F2
   8935  782b		       f2		      .byte.b	_F2
   8936  782c		       f2		      .byte.b	_F2
   8937  782d		       f2		      .byte.b	_F2
   8938  782e		       00		      .byte.b	_00
   8939  782f		       00		      .byte.b	_00
   8940  7830				   playfieldcolorL0451
   8941  7830		       c2		      .byte.b	_C2
   8942  7831		       c2		      .byte.b	_C2
   8943  7832		       00		      .byte.b	_00
   8944  7833		       00		      .byte.b	_00
   8945  7834		       00		      .byte.b	_00
   8946  7835		       00		      .byte.b	_00
   8947  7836		       00		      .byte.b	_00
   8948  7837		       00		      .byte.b	_00
   8949  7838		       00		      .byte.b	_00
   8950  7839		       00		      .byte.b	_00
   8951  783a		       00		      .byte.b	_00
   8952  783b		       00		      .byte.b	_00
   8953  783c		       00		      .byte.b	_00
   8954  783d		       00		      .byte.b	_00
   8955  783e		       00		      .byte.b	_00
   8956  783f		       00		      .byte.b	_00
   8957  7840		       00		      .byte.b	_00
   8958  7841		       00		      .byte.b	_00
   8959  7842		       00		      .byte.b	_00
   8960  7843		       00		      .byte.b	_00
   8961  7844		       00		      .byte.b	_00
   8962  7845		       00		      .byte.b	_00
   8963  7846		       00		      .byte.b	_00
   8964  7847		       00		      .byte.b	_00
   8965  7848		       00		      .byte.b	_00
   8966  7849		       00		      .byte.b	_00
   8967  784a		       00		      .byte.b	_00
   8968  784b		       00		      .byte.b	_00
   8969  784c		       00		      .byte.b	_00
   8970  784d		       00		      .byte.b	_00
   8971  784e		       00		      .byte.b	_00
   8972  784f		       00		      .byte.b	_00
   8973  7850		       00		      .byte.b	_00
   8974  7851		       00		      .byte.b	_00
   8975  7852		       00		      .byte.b	_00
   8976  7853		       00		      .byte.b	_00
   8977  7854		       00		      .byte.b	_00
   8978  7855		       00		      .byte.b	_00
   8979  7856		       00		      .byte.b	_00
   8980  7857		       00		      .byte.b	_00
   8981  7858		       00		      .byte.b	_00
   8982  7859		       00		      .byte.b	_00
   8983  785a		       00		      .byte.b	_00
   8984  785b		       00		      .byte.b	_00
   8985  785c		       00		      .byte.b	_00
   8986  785d		       00		      .byte.b	_00
   8987  785e		       00		      .byte.b	_00
   8988  785f		       00		      .byte.b	_00
   8989  7860		       00		      .byte.b	_00
   8990  7861		       00		      .byte.b	_00
   8991  7862		       00		      .byte.b	_00
   8992  7863		       00		      .byte.b	_00
   8993  7864		       00		      .byte.b	_00
   8994  7865		       00		      .byte.b	_00
   8995  7866		       00		      .byte.b	_00
   8996  7867		       40		      .byte.b	_40
   8997  7868		       40		      .byte.b	_40
   8998  7869		       40		      .byte.b	_40
   8999  786a		       40		      .byte.b	_40
   9000  786b		       40		      .byte.b	_40
   9001  786c		       40		      .byte.b	_40
   9002  786d		       40		      .byte.b	_40
   9003  786e		       40		      .byte.b	_40
   9004  786f		       40		      .byte.b	_40
   9005  7870		       40		      .byte.b	_40
   9006  7871		       40		      .byte.b	_40
   9007  7872		       40		      .byte.b	_40
   9008  7873		       40		      .byte.b	_40
   9009  7874		       40		      .byte.b	_40
   9010  7875		       40		      .byte.b	_40
   9011  7876		       40		      .byte.b	_40
   9012  7877		       40		      .byte.b	_40
   9013  7878		       40		      .byte.b	_40
   9014  7879		       40		      .byte.b	_40
   9015  787a		       40		      .byte.b	_40
   9016  787b		       40		      .byte.b	_40
   9017  787c		       40		      .byte.b	_40
   9018  787d		       40		      .byte.b	_40
   9019  787e		       40		      .byte.b	_40
   9020  787f		       40		      .byte.b	_40
   9021  7880		       40		      .byte.b	_40
   9022  7881		       40		      .byte.b	_40
   9023  7882		       40		      .byte.b	_40
   9024  7883		       f2		      .byte.b	_F2
   9025  7884		       f2		      .byte.b	_F2
   9026  7885		       f2		      .byte.b	_F2
   9027  7886		       00		      .byte.b	_00
   9028  7887		       00		      .byte.b	_00
   9029  7888				   playfieldcolorL0453
   9030  7888		       c2		      .byte.b	_C2
   9031  7889		       c2		      .byte.b	_C2
   9032  788a		       00		      .byte.b	_00
   9033  788b		       00		      .byte.b	_00
   9034  788c		       00		      .byte.b	_00
   9035  788d		       00		      .byte.b	_00
   9036  788e		       00		      .byte.b	_00
   9037  788f		       00		      .byte.b	_00
   9038  7890		       00		      .byte.b	_00
   9039  7891		       00		      .byte.b	_00
   9040  7892		       00		      .byte.b	_00
   9041  7893		       00		      .byte.b	_00
   9042  7894		       00		      .byte.b	_00
   9043  7895		       00		      .byte.b	_00
   9044  7896		       00		      .byte.b	_00
   9045  7897		       00		      .byte.b	_00
   9046  7898		       00		      .byte.b	_00
   9047  7899		       00		      .byte.b	_00
   9048  789a		       00		      .byte.b	_00
   9049  789b		       00		      .byte.b	_00
   9050  789c		       00		      .byte.b	_00
   9051  789d		       00		      .byte.b	_00
   9052  789e		       00		      .byte.b	_00
   9053  789f		       00		      .byte.b	_00
   9054  78a0		       00		      .byte.b	_00
   9055  78a1		       00		      .byte.b	_00
   9056  78a2		       00		      .byte.b	_00
   9057  78a3		       00		      .byte.b	_00
   9058  78a4		       00		      .byte.b	_00
   9059  78a5		       00		      .byte.b	_00
   9060  78a6		       00		      .byte.b	_00
   9061  78a7		       00		      .byte.b	_00
   9062  78a8		       00		      .byte.b	_00
   9063  78a9		       00		      .byte.b	_00
   9064  78aa		       00		      .byte.b	_00
   9065  78ab		       00		      .byte.b	_00
   9066  78ac		       00		      .byte.b	_00
   9067  78ad		       00		      .byte.b	_00
   9068  78ae		       00		      .byte.b	_00
   9069  78af		       00		      .byte.b	_00
   9070  78b0		       00		      .byte.b	_00
   9071  78b1		       00		      .byte.b	_00
   9072  78b2		       00		      .byte.b	_00
   9073  78b3		       00		      .byte.b	_00
   9074  78b4		       00		      .byte.b	_00
   9075  78b5		       00		      .byte.b	_00
   9076  78b6		       00		      .byte.b	_00
   9077  78b7		       00		      .byte.b	_00
   9078  78b8		       00		      .byte.b	_00
   9079  78b9		       00		      .byte.b	_00
   9080  78ba		       00		      .byte.b	_00
   9081  78bb		       00		      .byte.b	_00
   9082  78bc		       00		      .byte.b	_00
   9083  78bd		       00		      .byte.b	_00
   9084  78be		       00		      .byte.b	_00
   9085  78bf		       40		      .byte.b	_40
   9086  78c0		       40		      .byte.b	_40
   9087  78c1		       40		      .byte.b	_40
   9088  78c2		       40		      .byte.b	_40
   9089  78c3		       40		      .byte.b	_40
   9090  78c4		       40		      .byte.b	_40
   9091  78c5		       40		      .byte.b	_40
   9092  78c6		       40		      .byte.b	_40
   9093  78c7		       40		      .byte.b	_40
   9094  78c8		       40		      .byte.b	_40
   9095  78c9		       40		      .byte.b	_40
   9096  78ca		       40		      .byte.b	_40
   9097  78cb		       40		      .byte.b	_40
   9098  78cc		       40		      .byte.b	_40
   9099  78cd		       40		      .byte.b	_40
   9100  78ce		       40		      .byte.b	_40
   9101  78cf		       40		      .byte.b	_40
   9102  78d0		       40		      .byte.b	_40
   9103  78d1		       40		      .byte.b	_40
   9104  78d2		       40		      .byte.b	_40
   9105  78d3		       40		      .byte.b	_40
   9106  78d4		       40		      .byte.b	_40
   9107  78d5		       40		      .byte.b	_40
   9108  78d6		       40		      .byte.b	_40
   9109  78d7		       40		      .byte.b	_40
   9110  78d8		       40		      .byte.b	_40
   9111  78d9		       40		      .byte.b	_40
   9112  78da		       40		      .byte.b	_40
   9113  78db		       40		      .byte.b	_40
   9114  78dc		       40		      .byte.b	_40
   9115  78dd		       40		      .byte.b	_40
   9116  78de		       00		      .byte.b	_00
   9117  78df		       00		      .byte.b	_00
   9118  78e0				   playerL0472_0
   9119  78e0		       00		      .byte.b	%00000000
   9120  78e1		       42		      .byte.b	%01000010
   9121  78e2		       42		      .byte.b	%01000010
   9122  78e3		       5a		      .byte.b	%01011010
   9123  78e4		       7e		      .byte.b	%01111110
   9124  78e5		       24		      .byte.b	%00100100
   9125  78e6		       18		      .byte.b	%00011000
   9126  78e7		       18		      .byte.b	%00011000
   9127  78e8		       3c		      .byte.b	%00111100
   9128  78e9		       5a		      .byte.b	%01011010
   9129  78ea		       18		      .byte.b	%00011000
   9130  78eb		       18		      .byte.b	%00011000
   9131  78ec		       18		      .byte.b	%00011000
   9132  78ed		       3c		      .byte.b	%00111100
   9133  78ee		       24		      .byte.b	%00100100
   9134  78ef				   playercolorL0473_0
   9135  78ef		       00		      .byte.b	$00	;
   9136  78f0		       00		      .byte.b	$00	;
   9137  78f1		       00		      .byte.b	$00	;
   9138  78f2		       00		      .byte.b	$00	;
   9139  78f3		       00		      .byte.b	$00	;
   9140  78f4		       0e		      .byte.b	$0E	;
   9141  78f5		       70		      .byte.b	$70	;
   9142  78f6		       70		      .byte.b	$70	;
   9143  78f7		       70		      .byte.b	$70	;
   9144  78f8		       94		      .byte.b	$94	;
   9145  78f9		       70		      .byte.b	$70	;
   9146  78fa		       70		      .byte.b	$70	;
   9147  78fb		       70		      .byte.b	$70	;
   9148  78fc		       70		      .byte.b	$70	;
   9149  78fd		       40		      .byte.b	$40	;
   9150  78fe				   playerL0475_0
   9151  78fe		       18		      .byte.b	%00011000
   9152  78ff		       bd		      .byte.b	%10111101
   9153  7900		       99		      .byte.b	%10011001
   9154  7901		       5a		      .byte.b	%01011010
   9155  7902		       7e		      .byte.b	%01111110
   9156  7903		       24		      .byte.b	%00100100
   9157  7904		       18		      .byte.b	%00011000
   9158  7905		       18		      .byte.b	%00011000
   9159  7906		       3c		      .byte.b	%00111100
   9160  7907		       5a		      .byte.b	%01011010
   9161  7908		       18		      .byte.b	%00011000
   9162  7909		       18		      .byte.b	%00011000
   9163  790a		       18		      .byte.b	%00011000
   9164  790b		       3c		      .byte.b	%00111100
   9165  790c		       24		      .byte.b	%00100100
   9166  790d				   playercolorL0476_0
   9167  790d		       40		      .byte.b	$40	;
   9168  790e		       40		      .byte.b	$40	;
   9169  790f		       40		      .byte.b	$40	;
   9170  7910		       40		      .byte.b	$40	;
   9171  7911		       40		      .byte.b	$40	;
   9172  7912		       f6		      .byte.b	$F6	;
   9173  7913		       70		      .byte.b	$70	;
   9174  7914		       70		      .byte.b	$70	;
   9175  7915		       70		      .byte.b	$70	;
   9176  7916		       94		      .byte.b	$94	;
   9177  7917		       70		      .byte.b	$70	;
   9178  7918		       70		      .byte.b	$70	;
   9179  7919		       70		      .byte.b	$70	;
   9180  791a		       70		      .byte.b	$70	;
   9181  791b		       00		      .byte.b	$00	;
   9182  791c				   playerL0478_0
   9183  791c		       00		      .byte.b	%00000000
   9184  791d		       42		      .byte.b	%01000010
   9185  791e		       42		      .byte.b	%01000010
   9186  791f		       5a		      .byte.b	%01011010
   9187  7920		       7e		      .byte.b	%01111110
   9188  7921		       24		      .byte.b	%00100100
   9189  7922		       18		      .byte.b	%00011000
   9190  7923		       19		      .byte.b	%00011001
   9191  7924		       3d		      .byte.b	%00111101
   9192  7925		       5b		      .byte.b	%01011011
   9193  7926		       19		      .byte.b	%00011001
   9194  7927		       19		      .byte.b	%00011001
   9195  7928		       19		      .byte.b	%00011001
   9196  7929		       3c		      .byte.b	%00111100
   9197  792a		       24		      .byte.b	%00100100
   9198  792b				   playercolorL0479_0
   9199  792b		       00		      .byte.b	$00	;
   9200  792c		       00		      .byte.b	$00	;
   9201  792d		       00		      .byte.b	$00	;
   9202  792e		       00		      .byte.b	$00	;
   9203  792f		       00		      .byte.b	$00	;
   9204  7930		       70		      .byte.b	$70	;
   9205  7931		       70		      .byte.b	$70	;
   9206  7932		       40		      .byte.b	$40	;
   9207  7933		       40		      .byte.b	$40	;
   9208  7934		       40		      .byte.b	$40	;
   9209  7935		       40		      .byte.b	$40	;
   9210  7936		       40		      .byte.b	$40	;
   9211  7937		       40		      .byte.b	$40	;
   9212  7938		       70		      .byte.b	$70	;
   9213  7939		       c6		      .byte.b	$C6	;
   9214  793a				   playerL0481_0
   9215  793a		       00		      .byte.b	%00000000
   9216  793b		       42		      .byte.b	%01000010
   9217  793c		       42		      .byte.b	%01000010
   9218  793d		       5a		      .byte.b	%01011010
   9219  793e		       7e		      .byte.b	%01111110
   9220  793f		       24		      .byte.b	%00100100
   9221  7940		       18		      .byte.b	%00011000
   9222  7941		       19		      .byte.b	%00011001
   9223  7942		       3d		      .byte.b	%00111101
   9224  7943		       5b		      .byte.b	%01011011
   9225  7944		       19		      .byte.b	%00011001
   9226  7945		       19		      .byte.b	%00011001
   9227  7946		       19		      .byte.b	%00011001
   9228  7947		       3c		      .byte.b	%00111100
   9229  7948		       24		      .byte.b	%00100100
   9230  7949				   playercolorL0482_0
   9231  7949		       00		      .byte.b	$00	;
   9232  794a		       00		      .byte.b	$00	;
   9233  794b		       00		      .byte.b	$00	;
   9234  794c		       00		      .byte.b	$00	;
   9235  794d		       00		      .byte.b	$00	;
   9236  794e		       70		      .byte.b	$70	;
   9237  794f		       70		      .byte.b	$70	;
   9238  7950		       40		      .byte.b	$40	;
   9239  7951		       40		      .byte.b	$40	;
   9240  7952		       40		      .byte.b	$40	;
   9241  7953		       40		      .byte.b	$40	;
   9242  7954		       40		      .byte.b	$40	;
   9243  7955		       40		      .byte.b	$40	;
   9244  7956		       70		      .byte.b	$70	;
   9245  7957		       c5		      .byte.b	$C5	;
   9246  7958				   playercolor206then_0
   9247  7958		       1c		      .byte.b	$1C	;
   9248  7959		       1c		      .byte.b	$1C	;
   9249  795a		       1c		      .byte.b	$1C	;
   9250  795b		       1c		      .byte.b	$1C	;
   9251  795c		       1c		      .byte.b	$1C	;
   9252  795d		       1c		      .byte.b	$1C	;
   9253  795e		       1c		      .byte.b	$1C	;
   9254  795f		       1c		      .byte.b	$1C	;
   9255  7960		       1c		      .byte.b	$1C	;
   9256  7961		       1c		      .byte.b	$1C	;
   9257  7962		       1c		      .byte.b	$1C	;  
   9258  7963		       1c		      .byte.b	$1C	;
   9259  7964		       1c		      .byte.b	$1C	;
   9260  7965		       1c		      .byte.b	$1C	;
   9261  7966		       1c		      .byte.b	$1C	;
   9262  7967		       1c		      .byte.b	$1C
   9263  7968				   playercolor207then_0
   9264  7968		       cc		      .byte.b	$CC	;
   9265  7969		       cc		      .byte.b	$CC	;
   9266  796a		       cc		      .byte.b	$CC	;
   9267  796b		       cc		      .byte.b	$CC	;
   9268  796c		       cc		      .byte.b	$CC	;
   9269  796d		       cc		      .byte.b	$CC	;
   9270  796e		       cc		      .byte.b	$CC	;
   9271  796f		       cc		      .byte.b	$CC	;
   9272  7970		       cc		      .byte.b	$CC	;
   9273  7971		       cc		      .byte.b	$CC	;
   9274  7972		       cc		      .byte.b	$CC	;  
   9275  7973		       cc		      .byte.b	$CC	;
   9276  7974		       cc		      .byte.b	$CC	;
   9277  7975		       cc		      .byte.b	$CC	;
   9278  7976		       cc		      .byte.b	$CC	;
   9279  7977		       cc		      .byte.b	$CC
   9280  7978		       cc		      .byte.b	$CC	;
   9281  7979		       cc		      .byte.b	$CC
   9282  797a				   player209then_2
   9283  797a		       81		      .byte.b	%10000001
   9284  797b		       42		      .byte.b	%01000010
   9285  797c		       5a		      .byte.b	%01011010
   9286  797d		       5a		      .byte.b	%01011010
   9287  797e		       24		      .byte.b	%00100100
   9288  797f		       99		      .byte.b	%10011001
   9289  7980		       5a		      .byte.b	%01011010
   9290  7981		       24		      .byte.b	%00100100
   9291  7982				   player211then_2
   9292  7982		       00		      .byte.b	%00000000
   9293  7983		       40		      .byte.b	%01000000
   9294  7984		       00		      .byte.b	%00000000
   9295  7985		       30		      .byte.b	%00110000
   9296  7986		       14		      .byte.b	%00010100
   9297  7987		       00		      .byte.b	%00000000
   9298  7988		       48		      .byte.b	%01001000
   9299  7989		       00		      .byte.b	%00000000
   9300  798a				   player213then_3
   9301  798a		       18		      .byte.b	%00011000
   9302  798b		       7e		      .byte.b	%01111110
   9303  798c		       5a		      .byte.b	%01011010
   9304  798d		       db		      .byte.b	%11011011
   9305  798e		       ff		      .byte.b	%11111111
   9306  798f		       3c		      .byte.b	%00111100
   9307  7990		       18		      .byte.b	%00011000
   9308  7991		       00		      .byte.b	%00000000
   9309  7992				   player215then_3
   9310  7992		       00		      .byte.b	%00000000
   9311  7993		       40		      .byte.b	%01000000
   9312  7994		       00		      .byte.b	%00000000
   9313  7995		       30		      .byte.b	%00110000
   9314  7996		       14		      .byte.b	%00010100
   9315  7997		       00		      .byte.b	%00000000
   9316  7998		       48		      .byte.b	%01001000
   9317  7999		       00		      .byte.b	%00000000
   9318  799a				   player217then_1
   9319  799a		       81		      .byte.b	%10000001
   9320  799b		       42		      .byte.b	%01000010
   9321  799c		       5a		      .byte.b	%01011010
   9322  799d		       5a		      .byte.b	%01011010
   9323  799e		       24		      .byte.b	%00100100
   9324  799f		       99		      .byte.b	%10011001
   9325  79a0		       5a		      .byte.b	%01011010
   9326  79a1		       24		      .byte.b	%00100100
   9327  79a2				   player219then_1
   9328  79a2		       00		      .byte.b	%00000000
   9329  79a3		       40		      .byte.b	%01000000
   9330  79a4		       00		      .byte.b	%00000000
   9331  79a5		       30		      .byte.b	%00110000
   9332  79a6		       14		      .byte.b	%00010100
   9333  79a7		       00		      .byte.b	%00000000
   9334  79a8		       48		      .byte.b	%01001000
   9335  79a9		       00		      .byte.b	%00000000
   9336  79aa				   playercolor220then_2
   9337  79aa		       b4		      .byte.b	$B4	;
   9338  79ab		       d0		      .byte.b	$D0	;
   9339  79ac		       d0		      .byte.b	$D0	;
   9340  79ad		       d0		      .byte.b	$D0	;
   9341  79ae		       d0		      .byte.b	$D0	;
   9342  79af		       d0		      .byte.b	$D0	;
   9343  79b0		       c2		      .byte.b	$C2	;
   9344  79b1		       c6		      .byte.b	$C6	;
   9345  79b2				   playercolor221then_3
   9346  79b2		       30		      .byte.b	$30	;
   9347  79b3		       e0		      .byte.b	$E0	;
   9348  79b4		       b2		      .byte.b	$B2	;
   9349  79b5		       c4		      .byte.b	$C4	;
   9350  79b6		       b0		      .byte.b	$B0	;
   9351  79b7		       70		      .byte.b	$70	;
   9352  79b8		       1e		      .byte.b	$1E	;
   9353  79b9		       0e		      .byte.b	$0E	;
   9354  79ba				   playercolor222then_1
   9355  79ba		       30		      .byte.b	$30	;
   9356  79bb		       44		      .byte.b	$44	;
   9357  79bc		       b2		      .byte.b	$B2	;
   9358  79bd		       c4		      .byte.b	$C4	;
   9359  79be		       42		      .byte.b	$42	;
   9360  79bf		       c0		      .byte.b	$C0	;
   9361  79c0		       30		      .byte.b	$30	;
   9362  79c1		       0e		      .byte.b	$0E	;
   9363  79c2				   player224then_2
   9364  79c2		       42		      .byte.b	%01000010
   9365  79c3		       42		      .byte.b	%01000010
   9366  79c4		       5a		      .byte.b	%01011010
   9367  79c5		       5a		      .byte.b	%01011010
   9368  79c6		       24		      .byte.b	%00100100
   9369  79c7		       18		      .byte.b	%00011000
   9370  79c8		       db		      .byte.b	%11011011
   9371  79c9		       24		      .byte.b	%00100100
   9372  79ca				   player226then_2
   9373  79ca		       04		      .byte.b	%00000100
   9374  79cb		       40		      .byte.b	%01000000
   9375  79cc		       01		      .byte.b	%00000001
   9376  79cd		       00		      .byte.b	%00000000
   9377  79ce		       02		      .byte.b	%00000010
   9378  79cf		       80		      .byte.b	%10000000
   9379  79d0		       02		      .byte.b	%00000010
   9380  79d1		       20		      .byte.b	%00100000
   9381  79d2				   player228then_3
   9382  79d2		       00		      .byte.b	%00000000
   9383  79d3		       7e		      .byte.b	%01111110
   9384  79d4		       5a		      .byte.b	%01011010
   9385  79d5		       db		      .byte.b	%11011011
   9386  79d6		       ff		      .byte.b	%11111111
   9387  79d7		       3c		      .byte.b	%00111100
   9388  79d8		       18		      .byte.b	%00011000
   9389  79d9		       00		      .byte.b	%00000000
   9390  79da				   player230then_3
   9391  79da		       04		      .byte.b	%00000100
   9392  79db		       40		      .byte.b	%01000000
   9393  79dc		       01		      .byte.b	%00000001
   9394  79dd		       00		      .byte.b	%00000000
   9395  79de		       02		      .byte.b	%00000010
   9396  79df		       80		      .byte.b	%10000000
   9397  79e0		       02		      .byte.b	%00000010
   9398  79e1		       20		      .byte.b	%00100000
   9399  79e2				   player232then_1
   9400  79e2		       42		      .byte.b	%01000010
   9401  79e3		       42		      .byte.b	%01000010
   9402  79e4		       5a		      .byte.b	%01011010
   9403  79e5		       5a		      .byte.b	%01011010
   9404  79e6		       24		      .byte.b	%00100100
   9405  79e7		       18		      .byte.b	%00011000
   9406  79e8		       db		      .byte.b	%11011011
   9407  79e9		       24		      .byte.b	%00100100
   9408  79ea				   player234then_1
   9409  79ea		       04		      .byte.b	%00000100
   9410  79eb		       40		      .byte.b	%01000000
   9411  79ec		       01		      .byte.b	%00000001
   9412  79ed		       00		      .byte.b	%00000000
   9413  79ee		       02		      .byte.b	%00000010
   9414  79ef		       80		      .byte.b	%10000000
   9415  79f0		       02		      .byte.b	%00000010
   9416  79f1		       20		      .byte.b	%00100000
   9417  79f2				   playercolor235then_2
   9418  79f2		       b4		      .byte.b	$B4	;
   9419  79f3		       d0		      .byte.b	$D0	;
   9420  79f4		       d0		      .byte.b	$D0	;
   9421  79f5		       d0		      .byte.b	$D0	;
   9422  79f6		       d0		      .byte.b	$D0	;
   9423  79f7		       d0		      .byte.b	$D0	;
   9424  79f8		       c2		      .byte.b	$C2	;
   9425  79f9		       c4		      .byte.b	$C4	;
   9426  79fa				   playercolor236then_3
   9427  79fa		       30		      .byte.b	$30	;
   9428  79fb		       e0		      .byte.b	$E0	;
   9429  79fc		       b2		      .byte.b	$B2	;
   9430  79fd		       c4		      .byte.b	$C4	;
   9431  79fe		       b0		      .byte.b	$B0	;
   9432  79ff		       70		      .byte.b	$70	;
   9433  7a00		       1e		      .byte.b	$1E	;
   9434  7a01		       0e		      .byte.b	$0E	;
   9435  7a02				   playercolor237then_1
   9436  7a02		       30		      .byte.b	$30	;
   9437  7a03		       44		      .byte.b	$44	;
   9438  7a04		       b2		      .byte.b	$B2	;
   9439  7a05		       c4		      .byte.b	$C4	;
   9440  7a06		       42		      .byte.b	$42	;
   9441  7a07		       c0		      .byte.b	$C0	;
   9442  7a08		       30		      .byte.b	$30	;
   9443  7a09		       0e		      .byte.b	$0E	;
   9444  7a0a				   player239then_2
   9445  7a0a		       24		      .byte.b	%00100100
   9446  7a0b		       42		      .byte.b	%01000010
   9447  7a0c		       5a		      .byte.b	%01011010
   9448  7a0d		       5a		      .byte.b	%01011010
   9449  7a0e		       24		      .byte.b	%00100100
   9450  7a0f		       99		      .byte.b	%10011001
   9451  7a10		       5a		      .byte.b	%01011010
   9452  7a11		       24		      .byte.b	%00100100
   9453  7a12				   player241then_2
   9454  7a12		       08		      .byte.b	%00001000
   9455  7a13		       00		      .byte.b	%00000000
   9456  7a14		       00		      .byte.b	%00000000
   9457  7a15		       00		      .byte.b	%00000000
   9458  7a16		       80		      .byte.b	%10000000
   9459  7a17		       00		      .byte.b	%00000000
   9460  7a18		       00		      .byte.b	%00000000
   9461  7a19		       21		      .byte.b	%00100001
   9462  7a1a				   player242then_3
   9463  7a1a		       18		      .byte.b	%00011000
   9464  7a1b		       7e		      .byte.b	%01111110
   9465  7a1c		       7e		      .byte.b	%01111110
   9466  7a1d		       ff		      .byte.b	%11111111
   9467  7a1e		       ff		      .byte.b	%11111111
   9468  7a1f		       3c		      .byte.b	%00111100
   9469  7a20		       18		      .byte.b	%00011000
   9470  7a21		       00		      .byte.b	%00000000
   9471  7a22				   player244then_1
   9472  7a22		       24		      .byte.b	%00100100
   9473  7a23		       42		      .byte.b	%01000010
   9474  7a24		       5a		      .byte.b	%01011010
   9475  7a25		       5a		      .byte.b	%01011010
   9476  7a26		       24		      .byte.b	%00100100
   9477  7a27		       99		      .byte.b	%10011001
   9478  7a28		       5a		      .byte.b	%01011010
   9479  7a29		       24		      .byte.b	%00100100
   9480  7a2a				   player246then_1
   9481  7a2a		       08		      .byte.b	%00001000
   9482  7a2b		       00		      .byte.b	%00000000
   9483  7a2c		       00		      .byte.b	%00000000
   9484  7a2d		       00		      .byte.b	%00000000
   9485  7a2e		       80		      .byte.b	%10000000
   9486  7a2f		       00		      .byte.b	%00000000
   9487  7a30		       00		      .byte.b	%00000000
   9488  7a31		       21		      .byte.b	%00100001
   9489  7a32				   playercolor247then_2
   9490  7a32		       b4		      .byte.b	$B4	;
   9491  7a33		       d0		      .byte.b	$D0	;
   9492  7a34		       d0		      .byte.b	$D0	;
   9493  7a35		       d0		      .byte.b	$D0	;
   9494  7a36		       d0		      .byte.b	$D0	;
   9495  7a37		       d0		      .byte.b	$D0	;
   9496  7a38		       c2		      .byte.b	$C2	;
   9497  7a39		       c6		      .byte.b	$C6	;
   9498  7a3a				   playercolor248then_3
   9499  7a3a		       16		      .byte.b	$16	;
   9500  7a3b		       e0		      .byte.b	$E0	;
   9501  7a3c		       b2		      .byte.b	$B2	;
   9502  7a3d		       c4		      .byte.b	$C4	;
   9503  7a3e		       b0		      .byte.b	$B0	;
   9504  7a3f		       70		      .byte.b	$70	;
   9505  7a40		       30		      .byte.b	$30	;
   9506  7a41		       0e		      .byte.b	$0E	;
   9507  7a42				   playercolor249then_1
   9508  7a42		       30		      .byte.b	$30	;
   9509  7a43		       44		      .byte.b	$44	;
   9510  7a44		       b2		      .byte.b	$B2	;
   9511  7a45		       c4		      .byte.b	$C4	;
   9512  7a46		       42		      .byte.b	$42	;
   9513  7a47		       c0		      .byte.b	$C0	;
   9514  7a48		       30		      .byte.b	$30	;
   9515  7a49		       0e		      .byte.b	$0E	;
   9516  7a4a				   player250then_5
   9517  7a4a		       09		      .byte.b	%00001001
   9518  7a4b		       04		      .byte.b	%00000100
   9519  7a4c		       08		      .byte.b	%00001000
   9520  7a4d		       0c		      .byte.b	%00001100
   9521  7a4e		       1c		      .byte.b	%00011100
   9522  7a4f		       1c		      .byte.b	%00011100
   9523  7a50		       1c		      .byte.b	%00011100
   9524  7a51		       18		      .byte.b	%00011000
   9525  7a52				   playercolor251then_5
   9526  7a52		       0e		      .byte.b	$0E	;
   9527  7a53		       06		      .byte.b	$06	;
   9528  7a54		       40		      .byte.b	$40	;
   9529  7a55		       32		      .byte.b	$32	;
   9530  7a56		       40		      .byte.b	$40	;
   9531  7a57		       34		      .byte.b	$34	;
   9532  7a58		       42		      .byte.b	$42	;
   9533  7a59		       40		      .byte.b	$40	;
   9534  7a5a				   player252then_5
   9535  7a5a		       02		      .byte.b	%00000010
   9536  7a5b		       05		      .byte.b	%00000101
   9537  7a5c		       0c		      .byte.b	%00001100
   9538  7a5d		       0e		      .byte.b	%00001110
   9539  7a5e		       0e		      .byte.b	%00001110
   9540  7a5f		       0c		      .byte.b	%00001100
   9541  7a60		       1c		      .byte.b	%00011100
   9542  7a61		       18		      .byte.b	%00011000
   9543  7a62				   playercolor253then_5
   9544  7a62		       0e		      .byte.b	$0E	;
   9545  7a63		       06		      .byte.b	$06	;
   9546  7a64		       40		      .byte.b	$40	;
   9547  7a65		       32		      .byte.b	$32	;
   9548  7a66		       40		      .byte.b	$40	;
   9549  7a67		       34		      .byte.b	$34	;
   9550  7a68		       42		      .byte.b	$42	;
   9551  7a69		       40		      .byte.b	$40	;
   9552  7a6a				   player254then_5
   9553  7a6a		       05		      .byte.b	%00000101
   9554  7a6b		       08		      .byte.b	%00001000
   9555  7a6c		       06		      .byte.b	%00000110
   9556  7a6d		       0c		      .byte.b	%00001100
   9557  7a6e		       0e		      .byte.b	%00001110
   9558  7a6f		       1c		      .byte.b	%00011100
   9559  7a70		       18		      .byte.b	%00011000
   9560  7a71		       18		      .byte.b	%00011000
   9561  7a72				   playercolor255then_5
   9562  7a72		       0e		      .byte.b	$0E	;
   9563  7a73		       06		      .byte.b	$06	;
   9564  7a74		       40		      .byte.b	$40	;
   9565  7a75		       32		      .byte.b	$32	;
   9566  7a76		       40		      .byte.b	$40	;
   9567  7a77		       34		      .byte.b	$34	;
   9568  7a78		       42		      .byte.b	$42	;
   9569  7a79		       40		      .byte.b	$40	;
   9570  7a7a				   player256then_4
   9571  7a7a		       fe		      .byte.b	%11111110
   9572  7a7b		       82		      .byte.b	%10000010
   9573  7a7c		       92		      .byte.b	%10010010
   9574  7a7d		       92		      .byte.b	%10010010
   9575  7a7e		       ba		      .byte.b	%10111010
   9576  7a7f		       92		      .byte.b	%10010010
   9577  7a80		       92		      .byte.b	%10010010
   9578  7a81		       82		      .byte.b	%10000010
   9579  7a82		       fe		      .byte.b	%11111110
   9580  7a83				   playercolor257then_4
   9581  7a83		       30		      .byte.b	$30	;
   9582  7a84		       30		      .byte.b	$30	;
   9583  7a85		       30		      .byte.b	$30	;
   9584  7a86		       30		      .byte.b	$30	;
   9585  7a87		       30		      .byte.b	$30	;
   9586  7a88		       30		      .byte.b	$30	;
   9587  7a89		       30		      .byte.b	$30	;
   9588  7a8a		       40		      .byte.b	$40	;
   9589  7a8b		       40		      .byte.b	$40	;
   9590  7a8c				   PF_data3
   9591  7a8c		       00		      .byte.b	%00000000
   9592  7a8d		       00		      .byte.b	%00000000
   9593  7a8e		       00		      .byte.b	%00000000
   9594  7a8f		       00		      .byte.b	%00000000
   9595  7a90		       00		      .byte.b	%00000000
   9596  7a91		       00		      .byte.b	%00000000
   9597  7a92		       00		      .byte.b	%00000000
   9598  7a93		       00		      .byte.b	%00000000
   9599  7a94		       00		      .byte.b	%00000000
   9600  7a95		       00		      .byte.b	%00000000
   9601  7a96		       00		      .byte.b	%00000000
   9602  7a97		       00		      .byte.b	%00000000
   9603  7a98		       00		      .byte.b	%00000000
   9604  7a99		       1e		      .byte.b	%00011110
   9605  7a9a		       1e		      .byte.b	%00011110
   9606  7a9b		       02		      .byte.b	%00000010
   9607  7a9c		       02		      .byte.b	%00000010
   9608  7a9d		       02		      .byte.b	%00000010
   9609  7a9e		       02		      .byte.b	%00000010
   9610  7a9f		       02		      .byte.b	%00000010
   9611  7aa0		       02		      .byte.b	%00000010
   9612  7aa1		       02		      .byte.b	%00000010
   9613  7aa2		       02		      .byte.b	%00000010
   9614  7aa3		       0e		      .byte.b	%00001110
   9615  7aa4		       0e		      .byte.b	%00001110
   9616  7aa5		       02		      .byte.b	%00000010
   9617  7aa6		       02		      .byte.b	%00000010
   9618  7aa7		       02		      .byte.b	%00000010
   9619  7aa8		       02		      .byte.b	%00000010
   9620  7aa9		       02		      .byte.b	%00000010
   9621  7aaa		       02		      .byte.b	%00000010
   9622  7aab		       02		      .byte.b	%00000010
   9623  7aac		       02		      .byte.b	%00000010
   9624  7aad		       02		      .byte.b	%00000010
   9625  7aae		       02		      .byte.b	%00000010
   9626  7aaf		       1e		      .byte.b	%00011110
   9627  7ab0		       1e		      .byte.b	%00011110
   9628  7ab1		       00		      .byte.b	%00000000
   9629  7ab2		       00		      .byte.b	%00000000
   9630  7ab3		       00		      .byte.b	%00000000
   9631  7ab4		       00		      .byte.b	%00000000
   9632  7ab5		       00		      .byte.b	%00000000
   9633  7ab6		       00		      .byte.b	%00000000
   9634  7ab7		       00		      .byte.b	%00000000
   9635  7ab8		       00		      .byte.b	%00000000
   9636  7ab9		       00		      .byte.b	%00000000
   9637  7aba		       1e		      .byte.b	%00011110
   9638  7abb		       1e		      .byte.b	%00011110
   9639  7abc		       12		      .byte.b	%00010010
   9640  7abd		       12		      .byte.b	%00010010
   9641  7abe		       12		      .byte.b	%00010010
   9642  7abf		       12		      .byte.b	%00010010
   9643  7ac0		       12		      .byte.b	%00010010
   9644  7ac1		       12		      .byte.b	%00010010
   9645  7ac2		       12		      .byte.b	%00010010
   9646  7ac3		       1e		      .byte.b	%00011110
   9647  7ac4		       0e		      .byte.b	%00001110
   9648  7ac5		       0e		      .byte.b	%00001110
   9649  7ac6		       0a		      .byte.b	%00001010
   9650  7ac7		       0a		      .byte.b	%00001010
   9651  7ac8		       0a		      .byte.b	%00001010
   9652  7ac9		       0a		      .byte.b	%00001010
   9653  7aca		       1a		      .byte.b	%00011010
   9654  7acb		       12		      .byte.b	%00010010
   9655  7acc		       12		      .byte.b	%00010010
   9656  7acd		       12		      .byte.b	%00010010
   9657  7ace		       12		      .byte.b	%00010010
   9658  7acf		       12		      .byte.b	%00010010
   9659  7ad0		       12		      .byte.b	%00010010
   9660  7ad1		       12		      .byte.b	%00010010
   9661  7ad2		       00		      .byte.b	%00000000
   9662  7ad3		       00		      .byte.b	%00000000
   9663  7ad4		       00		      .byte.b	%00000000
   9664  7ad5		       00		      .byte.b	%00000000
   9665  7ad6		       00		      .byte.b	%00000000
   9666  7ad7		       00		      .byte.b	%00000000
   9667  7ad8		       00		      .byte.b	%00000000
   9668  7ad9		       00		      .byte.b	%00000000
   9669  7ada		       00		      .byte.b	%00000000
   9670  7adb		       00		      .byte.b	%00000000
   9671  7adc		       00		      .byte.b	%00000000
   9672  7add		       00		      .byte.b	%00000000
   9673  7ade		       00		      .byte.b	%00000000
   9674  7adf		       00		      .byte.b	%00000000
   9675  7ae0		       00		      .byte.b	%00000000
   9676  7ae1		       00		      .byte.b	%00000000
   9677  7ae2		       00		      .byte.b	%00000000
   9678  7ae3		       00		      .byte.b	%00000000
   9679  7ae4		       00		      .byte.b	%00000000
   9680  7ae5		       00		      .byte.b	%00000000
   9681  7ae6		       00		      .byte.b	%00000000
   9682  7ae7		       00		      .byte.b	%00000000
   9683  7ae8		       00		      .byte.b	%00000000
   9684  7ae9		       00		      .byte.b	%00000000
   9685  7aea		       00		      .byte.b	%00000000
   9686  7aeb		       00		      .byte.b	%00000000
   9687  7aec		       00		      .byte.b	%00000000
   9688  7aed		       00		      .byte.b	%00000000
   9689  7aee		       00		      .byte.b	%00000000
   9690  7aef		       00		      .byte.b	%00000000
   9691  7af0		       00		      .byte.b	%00000000
   9692  7af1		       1b		      .byte.b	%00011011
   9693  7af2		       1f		      .byte.b	%00011111
   9694  7af3		       15		      .byte.b	%00010101
   9695  7af4		       15		      .byte.b	%00010101
   9696  7af5		       15		      .byte.b	%00010101
   9697  7af6		       15		      .byte.b	%00010101
   9698  7af7		       95		      .byte.b	%10010101
   9699  7af8		       95		      .byte.b	%10010101
   9700  7af9		       95		      .byte.b	%10010101
   9701  7afa		       95		      .byte.b	%10010101
   9702  7afb		       91		      .byte.b	%10010001
   9703  7afc		       91		      .byte.b	%10010001
   9704  7afd		       91		      .byte.b	%10010001
   9705  7afe		       91		      .byte.b	%10010001
   9706  7aff		       91		      .byte.b	%10010001
   9707  7b00		       91		      .byte.b	%10010001
   9708  7b01		       91		      .byte.b	%10010001
   9709  7b02		       91		      .byte.b	%10010001
   9710  7b03		       91		      .byte.b	%10010001
   9711  7b04		       91		      .byte.b	%10010001
   9712  7b05		       91		      .byte.b	%10010001
   9713  7b06		       91		      .byte.b	%10010001
   9714  7b07		       91		      .byte.b	%10010001
   9715  7b08		       91		      .byte.b	%10010001
   9716  7b09		       00		      .byte.b	%00000000
   9717  7b0a		       00		      .byte.b	%00000000
   9718  7b0b		       00		      .byte.b	%00000000
   9719  7b0c		       00		      .byte.b	%00000000
   9720  7b0d		       00		      .byte.b	%00000000
   9721  7b0e		       00		      .byte.b	%00000000
   9722  7b0f		       00		      .byte.b	%00000000
   9723  7b10		       00		      .byte.b	%00000000
   9724  7b11		       00		      .byte.b	%00000000
   9725  7b12		       1e		      .byte.b	%00011110
   9726  7b13		       1e		      .byte.b	%00011110
   9727  7b14		       10		      .byte.b	%00010000
   9728  7b15		       10		      .byte.b	%00010000
   9729  7b16		       10		      .byte.b	%00010000
   9730  7b17		       10		      .byte.b	%00010000
   9731  7b18		       10		      .byte.b	%00010000
   9732  7b19		       10		      .byte.b	%00010000
   9733  7b1a		       10		      .byte.b	%00010000
   9734  7b1b		       10		      .byte.b	%00010000
   9735  7b1c		       1c		      .byte.b	%00011100
   9736  7b1d		       1c		      .byte.b	%00011100
   9737  7b1e		       10		      .byte.b	%00010000
   9738  7b1f		       10		      .byte.b	%00010000
   9739  7b20		       10		      .byte.b	%00010000
   9740  7b21		       10		      .byte.b	%00010000
   9741  7b22		       10		      .byte.b	%00010000
   9742  7b23		       10		      .byte.b	%00010000
   9743  7b24		       10		      .byte.b	%00010000
   9744  7b25		       10		      .byte.b	%00010000
   9745  7b26		       10		      .byte.b	%00010000
   9746  7b27		       10		      .byte.b	%00010000
   9747  7b28		       1e		      .byte.b	%00011110
   9748  7b29		       1e		      .byte.b	%00011110
   9749  7b2a		       00		      .byte.b	%00000000
   9750  7b2b		       00		      .byte.b	%00000000
   9751  7b2c		       00		      .byte.b	%00000000
   9752  7b2d		       00		      .byte.b	%00000000
   9753  7b2e		       00		      .byte.b	%00000000
   9754  7b2f		       00		      .byte.b	%00000000
   9755  7b30		       00		      .byte.b	%00000000
   9756  7b31		       00		      .byte.b	%00000000
   9757  7b32		       00		      .byte.b	%00000000
   9758  7b33		       00		      .byte.b	%00000000
   9759  7b34		       00		      .byte.b	%00000000
   9760  7b35		       00		      .byte.b	%00000000
   9761  7b36		       00		      .byte.b	%00000000
   9762  7b37		       00		      .byte.b	%00000000
   9763  7b38		       00		      .byte.b	%00000000
   9764  7b39		       00		      .byte.b	%00000000
   9765  7b3a		       00		      .byte.b	%00000000
   9766  7b3b		       00		      .byte.b	%00000000
   9767  7b3c		       00		      .byte.b	%00000000
   9768  7b3d		       00		      .byte.b	%00000000
   9769  7b3e		       00		      .byte.b	%00000000
   9770  7b3f		       00		      .byte.b	%00000000
   9771  7b40		       00		      .byte.b	%00000000
   9772  7b41		       00		      .byte.b	%00000000
   9773  7b42		       00		      .byte.b	%00000000
   9774  7b43		       00		      .byte.b	%00000000
   9775  7b44		       00		      .byte.b	%00000000
   9776  7b45		       00		      .byte.b	%00000000
   9777  7b46		       00		      .byte.b	%00000000
   9778  7b47		       00		      .byte.b	%00000000
   9779  7b48		       00		      .byte.b	%00000000
   9780  7b49		       f1		      .byte.b	%11110001
   9781  7b4a		       f1		      .byte.b	%11110001
   9782  7b4b		       90		      .byte.b	%10010000
   9783  7b4c		       90		      .byte.b	%10010000
   9784  7b4d		       90		      .byte.b	%10010000
   9785  7b4e		       90		      .byte.b	%10010000
   9786  7b4f		       90		      .byte.b	%10010000
   9787  7b50		       08		      .byte.b	%00001000
   9788  7b51		       08		      .byte.b	%00001000
   9789  7b52		       08		      .byte.b	%00001000
   9790  7b53		       08		      .byte.b	%00001000
   9791  7b54		       08		      .byte.b	%00001000
   9792  7b55		       08		      .byte.b	%00001000
   9793  7b56		       08		      .byte.b	%00001000
   9794  7b57		       f9		      .byte.b	%11111001
   9795  7b58		       09		      .byte.b	%00001001
   9796  7b59		       09		      .byte.b	%00001001
   9797  7b5a		       09		      .byte.b	%00001001
   9798  7b5b		       09		      .byte.b	%00001001
   9799  7b5c		       09		      .byte.b	%00001001
   9800  7b5d		       09		      .byte.b	%00001001
   9801  7b5e		       09		      .byte.b	%00001001
   9802  7b5f		       09		      .byte.b	%00001001
   9803  7b60		       09		      .byte.b	%00001001
   9804  7b61		       00		      .byte.b	%00000000
   9805  7b62		       00		      .byte.b	%00000000
   9806  7b63		       00		      .byte.b	%00000000
   9807  7b64		       00		      .byte.b	%00000000
   9808  7b65		       00		      .byte.b	%00000000
   9809  7b66		       00		      .byte.b	%00000000
   9810  7b67		       00		      .byte.b	%00000000
   9811  7b68		       00		      .byte.b	%00000000
   9812  7b69		       89		      .byte.b	%10001001
   9813  7b6a		       89		      .byte.b	%10001001
   9814  7b6b		       89		      .byte.b	%10001001
   9815  7b6c		       89		      .byte.b	%10001001
   9816  7b6d		       89		      .byte.b	%10001001
   9817  7b6e		       89		      .byte.b	%10001001
   9818  7b6f		       89		      .byte.b	%10001001
   9819  7b70		       d1		      .byte.b	%11010001
   9820  7b71		       51		      .byte.b	%01010001
   9821  7b72		       51		      .byte.b	%01010001
   9822  7b73		       51		      .byte.b	%01010001
   9823  7b74		       51		      .byte.b	%01010001
   9824  7b75		       51		      .byte.b	%01010001
   9825  7b76		       51		      .byte.b	%01010001
   9826  7b77		       51		      .byte.b	%01010001
   9827  7b78		       51		      .byte.b	%01010001
   9828  7b79		       51		      .byte.b	%01010001
   9829  7b7a		       51		      .byte.b	%01010001
   9830  7b7b		       71		      .byte.b	%01110001
   9831  7b7c		       71		      .byte.b	%01110001
   9832  7b7d		       21		      .byte.b	%00100001
   9833  7b7e		       21		      .byte.b	%00100001
   9834  7b7f		       21		      .byte.b	%00100001
   9835  7b80		       21		      .byte.b	%00100001
   9836  7b81		       21		      .byte.b	%00100001
   9837  7b82		       00		      .byte.b	%00000000
   9838  7b83		       00		      .byte.b	%00000000
   9839  7b84		       00		      .byte.b	%00000000
   9840  7b85		       00		      .byte.b	%00000000
   9841  7b86		       00		      .byte.b	%00000000
   9842  7b87		       00		      .byte.b	%00000000
   9843  7b88		       00		      .byte.b	%00000000
   9844  7b89		       00		      .byte.b	%00000000
   9845  7b8a		       00		      .byte.b	%00000000
   9846  7b8b		       00		      .byte.b	%00000000
   9847  7b8c		       00		      .byte.b	%00000000
   9848  7b8d		       00		      .byte.b	%00000000
   9849  7b8e		       00		      .byte.b	%00000000
   9850  7b8f		       00		      .byte.b	%00000000
   9851  7b90		       00		      .byte.b	%00000000
   9852  7b91		       00		      .byte.b	%00000000
   9853  7b92		       00		      .byte.b	%00000000
   9854  7b93		       00		      .byte.b	%00000000
   9855  7b94		       00		      .byte.b	%00000000
   9856  7b95		       00		      .byte.b	%00000000
   9857  7b96		       00		      .byte.b	%00000000
   9858  7b97		       00		      .byte.b	%00000000
   9859  7b98		       00		      .byte.b	%00000000
   9860  7b99		       00		      .byte.b	%00000000
   9861  7b9a		       00		      .byte.b	%00000000
   9862  7b9b		       00		      .byte.b	%00000000
   9863  7b9c		       00		      .byte.b	%00000000
   9864  7b9d		       00		      .byte.b	%00000000
   9865  7b9e		       00		      .byte.b	%00000000
   9866  7b9f		       00		      .byte.b	%00000000
   9867  7ba0		       00		      .byte.b	%00000000
   9868  7ba1		       0f		      .byte.b	%00001111
   9869  7ba2		       0f		      .byte.b	%00001111
   9870  7ba3		       08		      .byte.b	%00001000
   9871  7ba4		       08		      .byte.b	%00001000
   9872  7ba5		       08		      .byte.b	%00001000
   9873  7ba6		       08		      .byte.b	%00001000
   9874  7ba7		       08		      .byte.b	%00001000
   9875  7ba8		       08		      .byte.b	%00001000
   9876  7ba9		       08		      .byte.b	%00001000
   9877  7baa		       08		      .byte.b	%00001000
   9878  7bab		       08		      .byte.b	%00001000
   9879  7bac		       08		      .byte.b	%00001000
   9880  7bad		       08		      .byte.b	%00001000
   9881  7bae		       08		      .byte.b	%00001000
   9882  7baf		       0b		      .byte.b	%00001011
   9883  7bb0		       0b		      .byte.b	%00001011
   9884  7bb1		       08		      .byte.b	%00001000
   9885  7bb2		       08		      .byte.b	%00001000
   9886  7bb3		       08		      .byte.b	%00001000
   9887  7bb4		       08		      .byte.b	%00001000
   9888  7bb5		       08		      .byte.b	%00001000
   9889  7bb6		       08		      .byte.b	%00001000
   9890  7bb7		       0f		      .byte.b	%00001111
   9891  7bb8		       0f		      .byte.b	%00001111
   9892  7bb9		       00		      .byte.b	%00000000
   9893  7bba		       00		      .byte.b	%00000000
   9894  7bbb		       00		      .byte.b	%00000000
   9895  7bbc		       00		      .byte.b	%00000000
   9896  7bbd		       00		      .byte.b	%00000000
   9897  7bbe		       00		      .byte.b	%00000000
   9898  7bbf		       00		      .byte.b	%00000000
   9899  7bc0		       00		      .byte.b	%00000000
   9900  7bc1		       0f		      .byte.b	%00001111
   9901  7bc2		       0f		      .byte.b	%00001111
   9902  7bc3		       08		      .byte.b	%00001000
   9903  7bc4		       08		      .byte.b	%00001000
   9904  7bc5		       08		      .byte.b	%00001000
   9905  7bc6		       08		      .byte.b	%00001000
   9906  7bc7		       08		      .byte.b	%00001000
   9907  7bc8		       08		      .byte.b	%00001000
   9908  7bc9		       08		      .byte.b	%00001000
   9909  7bca		       08		      .byte.b	%00001000
   9910  7bcb		       08		      .byte.b	%00001000
   9911  7bcc		       08		      .byte.b	%00001000
   9912  7bcd		       08		      .byte.b	%00001000
   9913  7bce		       08		      .byte.b	%00001000
   9914  7bcf		       08		      .byte.b	%00001000
   9915  7bd0		       08		      .byte.b	%00001000
   9916  7bd1		       08		      .byte.b	%00001000
   9917  7bd2		       08		      .byte.b	%00001000
   9918  7bd3		       08		      .byte.b	%00001000
   9919  7bd4		       08		      .byte.b	%00001000
   9920  7bd5		       08		      .byte.b	%00001000
   9921  7bd6		       08		      .byte.b	%00001000
   9922  7bd7		       08		      .byte.b	%00001000
   9923  7bd8		       0f		      .byte.b	%00001111
   9924  7bd9		       0f		      .byte.b	%00001111
   9925  7bda		       00		      .byte.b	%00000000
   9926  7bdb		       00		      .byte.b	%00000000
   9927  7bdc		       00		      .byte.b	%00000000
   9928  7bdd		       00		      .byte.b	%00000000
   9929  7bde		       00		      .byte.b	%00000000
   9930  7bdf		       00		      .byte.b	%00000000
   9931  7be0		       00		      .byte.b	%00000000
   9932  7be1		       00		      .byte.b	%00000000
   9933  7be2		       00		      .byte.b	%00000000
   9934  7be3		       00		      .byte.b	%00000000
   9935  7be4		       00		      .byte.b	%00000000
   9936  7be5		       00		      .byte.b	%00000000
   9937  7be6		       00		      .byte.b	%00000000
   9938  7be7		       00		      .byte.b	%00000000
   9939  7be8		       00		      .byte.b	%00000000
   9940  7be9		       00		      .byte.b	%00000000
   9941  7bea		       00		      .byte.b	%00000000
   9942  7beb		       00		      .byte.b	%00000000
   9943  7bec				   playfieldcolorL0540
   9944  7bec		       00		      .byte.b	_00
   9945  7bed		       00		      .byte.b	_00
   9946  7bee		       00		      .byte.b	_00
   9947  7bef		       00		      .byte.b	_00
   9948  7bf0		       00		      .byte.b	_00
   9949  7bf1		       00		      .byte.b	_00
   9950  7bf2		       00		      .byte.b	_00
   9951  7bf3		       00		      .byte.b	_00
   9952  7bf4		       00		      .byte.b	_00
   9953  7bf5		       00		      .byte.b	_00
   9954  7bf6		       00		      .byte.b	_00
   9955  7bf7		       00		      .byte.b	_00
   9956  7bf8		       00		      .byte.b	_00
   9957  7bf9		       00		      .byte.b	_00
   9958  7bfa		       00		      .byte.b	_00
   9959  7bfb		       00		      .byte.b	_00
   9960  7bfc		       00		      .byte.b	_00
   9961  7bfd		       00		      .byte.b	_00
   9962  7bfe		       00		      .byte.b	_00
   9963  7bff		       00		      .byte.b	_00
   9964  7c00		       00		      .byte.b	_00
   9965  7c01		       00		      .byte.b	_00
   9966  7c02		       00		      .byte.b	_00
   9967  7c03		       00		      .byte.b	_00
   9968  7c04		       00		      .byte.b	_00
   9969  7c05		       00		      .byte.b	_00
   9970  7c06		       00		      .byte.b	_00
   9971  7c07		       00		      .byte.b	_00
   9972  7c08		       00		      .byte.b	_00
   9973  7c09		       00		      .byte.b	_00
   9974  7c0a		       00		      .byte.b	_00
   9975  7c0b		       00		      .byte.b	_00
   9976  7c0c		       00		      .byte.b	_00
   9977  7c0d		       00		      .byte.b	_00
   9978  7c0e		       00		      .byte.b	_00
   9979  7c0f		       00		      .byte.b	_00
   9980  7c10		       00		      .byte.b	_00
   9981  7c11		       00		      .byte.b	_00
   9982  7c12		       00		      .byte.b	_00
   9983  7c13		       00		      .byte.b	_00
   9984  7c14		       00		      .byte.b	_00
   9985  7c15		       00		      .byte.b	_00
   9986  7c16		       00		      .byte.b	_00
   9987  7c17		       00		      .byte.b	_00
   9988  7c18		       00		      .byte.b	_00
   9989  7c19		       00		      .byte.b	_00
   9990  7c1a		       00		      .byte.b	_00
   9991  7c1b		       00		      .byte.b	_00
   9992  7c1c		       00		      .byte.b	_00
   9993  7c1d		       00		      .byte.b	_00
   9994  7c1e		       00		      .byte.b	_00
   9995  7c1f		       00		      .byte.b	_00
   9996  7c20		       00		      .byte.b	_00
   9997  7c21		       00		      .byte.b	_00
   9998  7c22		       00		      .byte.b	_00
   9999  7c23		       00		      .byte.b	_00
  10000  7c24		       00		      .byte.b	_00
  10001  7c25		       00		      .byte.b	_00
  10002  7c26		       00		      .byte.b	_00
  10003  7c27		       00		      .byte.b	_00
  10004  7c28		       00		      .byte.b	_00
  10005  7c29		       00		      .byte.b	_00
  10006  7c2a		       00		      .byte.b	_00
  10007  7c2b		       00		      .byte.b	_00
  10008  7c2c		       00		      .byte.b	_00
  10009  7c2d		       00		      .byte.b	_00
  10010  7c2e		       00		      .byte.b	_00
  10011  7c2f		       00		      .byte.b	_00
  10012  7c30		       00		      .byte.b	_00
  10013  7c31		       00		      .byte.b	_00
  10014  7c32		       00		      .byte.b	_00
  10015  7c33		       00		      .byte.b	_00
  10016  7c34		       00		      .byte.b	_00
  10017  7c35		       00		      .byte.b	_00
  10018  7c36		       00		      .byte.b	_00
  10019  7c37		       00		      .byte.b	_00
  10020  7c38		       00		      .byte.b	_00
  10021  7c39		       00		      .byte.b	_00
  10022  7c3a		       00		      .byte.b	_00
  10023  7c3b		       00		      .byte.b	_00
  10024  7c3c		       00		      .byte.b	_00
  10025  7c3d		       00		      .byte.b	_00
  10026  7c3e		       00		      .byte.b	_00
  10027  7c3f		       00		      .byte.b	_00
  10028  7c40		       00		      .byte.b	_00
  10029  7c41		       00		      .byte.b	_00
  10030  7c42		       00		      .byte.b	_00
  10031  7c43		       00		      .byte.b	_00
  10032  7c44				   backgroundcolorL0541
  10033  7c44		       0e		      .byte.b	_0E
  10034  7c45		       42		      .byte.b	_42
  10035  7c46		       42		      .byte.b	_42
  10036  7c47		       42		      .byte.b	_42
  10037  7c48		       42		      .byte.b	_42
  10038  7c49		       42		      .byte.b	_42
  10039  7c4a		       42		      .byte.b	_42
  10040  7c4b		       42		      .byte.b	_42
  10041  7c4c		       42		      .byte.b	_42
  10042  7c4d		       42		      .byte.b	_42
  10043  7c4e		       42		      .byte.b	_42
  10044  7c4f		       42		      .byte.b	_42
  10045  7c50		       42		      .byte.b	_42
  10046  7c51		       42		      .byte.b	_42
  10047  7c52		       42		      .byte.b	_42
  10048  7c53		       42		      .byte.b	_42
  10049  7c54		       42		      .byte.b	_42
  10050  7c55		       42		      .byte.b	_42
  10051  7c56		       42		      .byte.b	_42
  10052  7c57		       42		      .byte.b	_42
  10053  7c58		       42		      .byte.b	_42
  10054  7c59		       42		      .byte.b	_42
  10055  7c5a		       42		      .byte.b	_42
  10056  7c5b		       42		      .byte.b	_42
  10057  7c5c		       42		      .byte.b	_42
  10058  7c5d		       42		      .byte.b	_42
  10059  7c5e		       42		      .byte.b	_42
  10060  7c5f		       42		      .byte.b	_42
  10061  7c60		       42		      .byte.b	_42
  10062  7c61		       42		      .byte.b	_42
  10063  7c62		       42		      .byte.b	_42
  10064  7c63		       42		      .byte.b	_42
  10065  7c64		       42		      .byte.b	_42
  10066  7c65		       42		      .byte.b	_42
  10067  7c66		       42		      .byte.b	_42
  10068  7c67		       42		      .byte.b	_42
  10069  7c68		       42		      .byte.b	_42
  10070  7c69		       42		      .byte.b	_42
  10071  7c6a		       42		      .byte.b	_42
  10072  7c6b		       42		      .byte.b	_42
  10073  7c6c		       42		      .byte.b	_42
  10074  7c6d		       42		      .byte.b	_42
  10075  7c6e		       42		      .byte.b	_42
  10076  7c6f		       42		      .byte.b	_42
  10077  7c70		       42		      .byte.b	_42
  10078  7c71		       42		      .byte.b	_42
  10079  7c72		       42		      .byte.b	_42
  10080  7c73		       42		      .byte.b	_42
  10081  7c74		       42		      .byte.b	_42
  10082  7c75		       42		      .byte.b	_42
  10083  7c76		       42		      .byte.b	_42
  10084  7c77		       42		      .byte.b	_42
  10085  7c78		       42		      .byte.b	_42
  10086  7c79		       42		      .byte.b	_42
  10087  7c7a		       42		      .byte.b	_42
  10088  7c7b		       42		      .byte.b	_42
  10089  7c7c		       42		      .byte.b	_42
  10090  7c7d		       42		      .byte.b	_42
  10091  7c7e		       42		      .byte.b	_42
  10092  7c7f		       42		      .byte.b	_42
  10093  7c80		       42		      .byte.b	_42
  10094  7c81		       42		      .byte.b	_42
  10095  7c82		       42		      .byte.b	_42
  10096  7c83		       42		      .byte.b	_42
  10097  7c84		       42		      .byte.b	_42
  10098  7c85		       42		      .byte.b	_42
  10099  7c86		       42		      .byte.b	_42
  10100  7c87		       42		      .byte.b	_42
  10101  7c88		       42		      .byte.b	_42
  10102  7c89		       42		      .byte.b	_42
  10103  7c8a		       42		      .byte.b	_42
  10104  7c8b		       42		      .byte.b	_42
  10105  7c8c		       42		      .byte.b	_42
  10106  7c8d		       42		      .byte.b	_42
  10107  7c8e		       42		      .byte.b	_42
  10108  7c8f		       42		      .byte.b	_42
  10109  7c90		       42		      .byte.b	_42
  10110  7c91		       42		      .byte.b	_42
  10111  7c92		       42		      .byte.b	_42
  10112  7c93		       42		      .byte.b	_42
  10113  7c94		       42		      .byte.b	_42
  10114  7c95		       42		      .byte.b	_42
  10115  7c96		       42		      .byte.b	_42
  10116  7c97		       42		      .byte.b	_42
  10117  7c98		       42		      .byte.b	_42
  10118  7c99		       42		      .byte.b	_42
  10119  7c9a		       42		      .byte.b	_42
  10120  7c9b		       42		      .byte.b	_42
  10121  7c9c					      if	ECHOFIRST
      824 bytes of ROM space left in graphics bank
  10122  7c9c					      echo	"    ",[(DPC_graphics_end - *)]d , "bytes of ROM space left in graphics bank")
  10123  7c9c					      endif
  10124  7c9c		       00 01	   ECHOFIRST  =	1
  10125  7c9c
  10126  7c9c
  10127  7c9c							; Provided under the CC0 license. See the included LICENSE.txt for details.
  10128  7c9c
  10129  7fd4					      ORG	$7FF4-bscode_length
  10130  7fd4					      RORG	$DFF4-bscode_length
  10131  7fd4				   DPC_graphics_end
  10132  7fd4
  10133  7fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
  10134  7fd4
  10135  7fd4							; every bank has this stuff at the same place
  10136  7fd4							; this code can switch to/from any bank at any entry point
  10137  7fd4							; and can preserve register values
  10138  7fd4							; note: lines not starting with a space are not placed in all banks
  10139  7fd4							;
  10140  7fd4							; line below tells the compiler how long this is - do not remove
  10141  7fd4							;size=32
  10142  7fd4
  10143  7fd4				   begin_bscode
  10144  7fd4		       a2 ff		      ldx	#$ff
  10145  7fd6					      ifconst	FASTFETCH	; using DPC+
  10146  7fd6		       8e 58 10 	      stx	FASTFETCH
  10147  7fd9					      endif
  10148  7fd9		       9a		      txs
  10149  7fda				  -	      if	bankswitch == 64
  10150  7fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  10151  7fda					      else
  10152  7fda		       a9 18		      lda	#>(start-1)
  10153  7fdc					      endif
  10154  7fdc		       48		      pha
  10155  7fdd		       a9 e3		      lda	#<(start-1)
  10156  7fdf		       48		      pha
  10157  7fe0
  10158  7fe0				   BS_return
  10159  7fe0		       48		      pha
  10160  7fe1		       8a		      txa
  10161  7fe2		       48		      pha
  10162  7fe3		       ba		      tsx
  10163  7fe4
  10164  7fe4					      if	bankswitch != 64
  10165  7fe4		       b5 04		      lda	4,x	; get high byte of return address
  10166  7fe6
  10167  7fe6		       2a		      rol
  10168  7fe7		       2a		      rol
  10169  7fe8		       2a		      rol
  10170  7fe9		       2a		      rol
  10171  7fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  10172  7fec		       aa		      tax
  10173  7fed		       e8		      inx
  10174  7fee				  -	      else
  10175  7fee				  -	      lda	4,x	; get high byte of return address
  10176  7fee				  -	      tay
  10177  7fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  10178  7fee				  -	      sta	4,x
  10179  7fee				  -	      tya
  10180  7fee				  -	      lsr
  10181  7fee				  -	      lsr
  10182  7fee				  -	      lsr
  10183  7fee				  -	      lsr
  10184  7fee				  -	      tax
  10185  7fee				  -	      inx
  10186  7fee					      endif
  10187  7fee
  10188  7fee				   BS_jsr
  10189  7fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
  10190  7ff1		       68		      pla
  10191  7ff2		       aa		      tax
  10192  7ff3		       68		      pla
  10193  7ff4		       60		      rts
  10194  7ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  10195  7ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  10196  7ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  10197  7ff5					      endif
  10198  7ff5							; Provided under the CC0 license. See the included LICENSE.txt for details.
  10199  7ff5
  10200  8000					      org	$8000
  10201  8000					      rorg	$1000
  10202  8000							; Provided under the CC0 license. See the included LICENSE.txt for details.
  10203  8000
  10204  8000							; 1K Frequency Table.
  10205  8000							; Fred Quimby, Darrell Spice Jr, Chris Walton 2010
  10206  8000							;
  10207  8000							; The 1K Frequency Table can contain up to 256 frequency values
  10208  8000							;
  10209  8000							; Table entries are defined as 2^32*freq/20000
  10210  8000							;
  10211  8000							; If User ARM code is being used, then the last 512 bytes of the frequency
  10212  8000							; table will no longer be available, reducing the number of frequencies you can
  10213  8000							; use to 128.
  10214  8000
  10215  8000							; piano key frequencies (s = sharp)
  10216  8000
  10217  8000				   .freq_table_start
  10218  8000
  10219  8000		       00 00 00 00	      DC.L	0
  10220  8000		       00 01	   A0	      =	(* & $3ff)/4
  10221  8004		       ac 1c 5a 00	      DC.L	5905580
  10222  8008
  10223  8008		       00 02	   A0s	      =	(* & $3ff)/4
  10224  8008		       68 78 5f 00	      DC.L	6256744
  10225  800c
  10226  800c		       00 03	   B0	      =	(* & $3ff)/4
  10227  800c		       b5 25 65 00	      DC.L	6628789
  10228  8010
  10229  8010		       00 04	   C1	      =	(* & $3ff)/4
  10230  8010		       6e 29 6b 00	      DC.L	7022958
  10231  8014
  10232  8014		       00 05	   C1s	      =	(* & $3ff)/4
  10233  8014		       b5 88 71 00	      DC.L	7440565
  10234  8018
  10235  8018		       00 06	   D1	      =	(* & $3ff)/4
  10236  8018		       fc 48 78 00	      DC.L	7883004
  10237  801c
  10238  801c		       00 07	   D1s	      =	(* & $3ff)/4
  10239  801c		       07 70 7f 00	      DC.L	8351751
  10240  8020
  10241  8020		       00 08	   E1	      =	(* & $3ff)/4
  10242  8020		       f4 03 87 00	      DC.L	8848372
  10243  8024
  10244  8024		       00 09	   F1	      =	(* & $3ff)/4
  10245  8024		       3c 0b 8f 00	      DC.L	9374524
  10246  8028
  10247  8028		       00 0a	   F1s	      =	(* & $3ff)/4
  10248  8028		       ba 8c 97 00	      DC.L	9931962
  10249  802c
  10250  802c		       00 0b	   G1	      =	(* & $3ff)/4
  10251  802c		       b3 8f a0 00	      DC.L	10522547
  10252  8030
  10253  8030		       00 0c	   G1s	      =	(* & $3ff)/4
  10254  8030		       db 1b aa 00	      DC.L	11148251
  10255  8034
  10256  8034		       00 0d	   A1	      =	(* & $3ff)/4
  10257  8034		       58 39 b4 00	      DC.L	11811160
  10258  8038
  10259  8038		       00 0e	   A1s	      =	(* & $3ff)/4
  10260  8038		       d0 f0 be 00	      DC.L	12513488
  10261  803c
  10262  803c		       00 0f	   B1	      =	(* & $3ff)/4
  10263  803c		       6b 4b ca 00	      DC.L	13257579
  10264  8040
  10265  8040		       00 10	   C2	      =	(* & $3ff)/4
  10266  8040		       dc 52 d6 00	      DC.L	14045916
  10267  8044
  10268  8044		       00 11	   C2s	      =	(* & $3ff)/4
  10269  8044		       69 11 e3 00	      DC.L	14881129
  10270  8048
  10271  8048		       00 12	   D2	      =	(* & $3ff)/4
  10272  8048		       f7 91 f0 00	      DC.L	15766007
  10273  804c
  10274  804c		       00 13	   D2s	      =	(* & $3ff)/4
  10275  804c		       0f e0 fe 00	      DC.L	16703503
  10276  8050
  10277  8050		       00 14	   E2	      =	(* & $3ff)/4
  10278  8050		       e9 07 0e 01	      DC.L	17696745
  10279  8054
  10280  8054		       00 15	   F2	      =	(* & $3ff)/4
  10281  8054		       78 16 1e 01	      DC.L	18749048
  10282  8058
  10283  8058		       00 16	   F2s	      =	(* & $3ff)/4
  10284  8058		       74 19 2f 01	      DC.L	19863924
  10285  805c
  10286  805c		       00 17	   G2	      =	(* & $3ff)/4
  10287  805c		       67 1f 41 01	      DC.L	21045095
  10288  8060
  10289  8060		       00 18	   G2s	      =	(* & $3ff)/4
  10290  8060		       b5 37 54 01	      DC.L	22296501
  10291  8064
  10292  8064		       00 19	   A2	      =	(* & $3ff)/4
  10293  8064		       b0 72 68 01	      DC.L	23622320
  10294  8068
  10295  8068		       00 1a	   A2s	      =	(* & $3ff)/4
  10296  8068		       a0 e1 7d 01	      DC.L	25026976
  10297  806c
  10298  806c		       00 1b	   B2	      =	(* & $3ff)/4
  10299  806c		       d6 96 94 01	      DC.L	26515158
  10300  8070
  10301  8070		       00 1c	   C3	      =	(* & $3ff)/4
  10302  8070		       b7 a5 ac 01	      DC.L	28091831
  10303  8074
  10304  8074		       00 1d	   C3s	      =	(* & $3ff)/4
  10305  8074		       d2 22 c6 01	      DC.L	29762258
  10306  8078
  10307  8078		       00 1e	   D3	      =	(* & $3ff)/4
  10308  8078		       ee 23 e1 01	      DC.L	31532014
  10309  807c
  10310  807c		       00 1f	   D3s	      =	(* & $3ff)/4
  10311  807c		       1d c0 fd 01	      DC.L	33407005
  10312  8080
  10313  8080		       00 20	   E3	      =	(* & $3ff)/4
  10314  8080		       d1 0f 1c 02	      DC.L	35393489
  10315  8084
  10316  8084		       00 21	   F3	      =	(* & $3ff)/4
  10317  8084		       f0 2c 3c 02	      DC.L	37498096
  10318  8088
  10319  8088		       00 22	   F3s	      =	(* & $3ff)/4
  10320  8088		       e9 32 5e 02	      DC.L	39727849
  10321  808c
  10322  808c		       00 23	   G3	      =	(* & $3ff)/4
  10323  808c		       cd 3e 82 02	      DC.L	42090189
  10324  8090
  10325  8090		       00 24	   G3s	      =	(* & $3ff)/4
  10326  8090		       6a 6f a8 02	      DC.L	44593002
  10327  8094
  10328  8094		       00 25	   A3	      =	(* & $3ff)/4
  10329  8094		       60 e5 d0 02	      DC.L	47244640
  10330  8098
  10331  8098		       00 26	   A3s	      =	(* & $3ff)/4
  10332  8098		       41 c3 fb 02	      DC.L	50053953
  10333  809c
  10334  809c		       00 27	   B3	      =	(* & $3ff)/4
  10335  809c		       ac 2d 29 03	      DC.L	53030316
  10336  80a0
  10337  80a0		       00 28	   C4	      =	(* & $3ff)/4
  10338  80a0		       6e 4b 59 03	      DC.L	56183662
  10339  80a4
  10340  80a4		       00 29	   C4s	      =	(* & $3ff)/4
  10341  80a4		       a5 45 8c 03	      DC.L	59524517
  10342  80a8
  10343  80a8		       00 2a	   D4	      =	(* & $3ff)/4
  10344  80a8		       dd 47 c2 03	      DC.L	63064029
  10345  80ac
  10346  80ac		       00 2b	   D4s	      =	(* & $3ff)/4
  10347  80ac		       3b 80 fb 03	      DC.L	66814011
  10348  80b0
  10349  80b0		       00 2c	   E4	      =	(* & $3ff)/4
  10350  80b0		       a3 1f 38 04	      DC.L	70786979
  10351  80b4
  10352  80b4		       00 2d	   F4	      =	(* & $3ff)/4
  10353  80b4		       e0 59 78 04	      DC.L	74996192
  10354  80b8
  10355  80b8		       00 2e	   F4s	      =	(* & $3ff)/4
  10356  80b8		       d1 65 bc 04	      DC.L	79455697
  10357  80bc
  10358  80bc		       00 2f	   G4	      =	(* & $3ff)/4
  10359  80bc		       9b 7d 04 05	      DC.L	84180379
  10360  80c0
  10361  80c0		       00 30	   G4s	      =	(* & $3ff)/4
  10362  80c0		       d5 de 50 05	      DC.L	89186005
  10363  80c4
  10364  80c4		       00 31	   A4	      =	(* & $3ff)/4
  10365  80c4		       c1 ca a1 05	      DC.L	94489281
  10366  80c8
  10367  80c8		       00 32	   A4s	      =	(* & $3ff)/4
  10368  80c8		       82 86 f7 05	      DC.L	100107906
  10369  80cc
  10370  80cc		       00 33	   B4	      =	(* & $3ff)/4
  10371  80cc		       57 5b 52 06	      DC.L	106060631
  10372  80d0
  10373  80d0		       00 34	   C5	      =	(* & $3ff)/4
  10374  80d0		       dd 96 b2 06	      DC.L	112367325
  10375  80d4
  10376  80d4		       00 35	   C5s	      =	(* & $3ff)/4
  10377  80d4		       4a 8b 18 07	      DC.L	119049034
  10378  80d8
  10379  80d8		       00 36	   D5	      =	(* & $3ff)/4
  10380  80d8		       b9 8f 84 07	      DC.L	126128057
  10381  80dc
  10382  80dc		       00 37	   D5s	      =	(* & $3ff)/4
  10383  80dc		       76 00 f7 07	      DC.L	133628022
  10384  80e0
  10385  80e0		       00 38	   E5	      =	(* & $3ff)/4
  10386  80e0		       46 3f 70 08	      DC.L	141573958
  10387  80e4
  10388  80e4		       00 39	   F5	      =	(* & $3ff)/4
  10389  80e4		       bf b3 f0 08	      DC.L	149992383
  10390  80e8
  10391  80e8		       00 3a	   F5s	      =	(* & $3ff)/4
  10392  80e8		       a3 cb 78 09	      DC.L	158911395
  10393  80ec
  10394  80ec		       00 3b	   G5	      =	(* & $3ff)/4
  10395  80ec		       36 fb 08 0a	      DC.L	168360758
  10396  80f0
  10397  80f0		       00 3c	   G5s	      =	(* & $3ff)/4
  10398  80f0		       a9 bd a1 0a	      DC.L	178372009
  10399  80f4
  10400  80f4		       00 3d	   A5	      =	(* & $3ff)/4
  10401  80f4		       81 95 43 0b	      DC.L	188978561
  10402  80f8
  10403  80f8		       00 3e	   A5s	      =	(* & $3ff)/4
  10404  80f8		       03 0d ef 0b	      DC.L	200215811
  10405  80fc
  10406  80fc		       00 3f	   B5	      =	(* & $3ff)/4
  10407  80fc		       af b6 a4 0c	      DC.L	212121263
  10408  8100
  10409  8100		       00 40	   C6	      =	(* & $3ff)/4
  10410  8100		       b9 2d 65 0d	      DC.L	224734649
  10411  8104
  10412  8104		       00 41	   C6s	      =	(* & $3ff)/4
  10413  8104		       93 16 31 0e	      DC.L	238098067
  10414  8108
  10415  8108		       00 42	   D6	      =	(* & $3ff)/4
  10416  8108		       73 1f 09 0f	      DC.L	252256115
  10417  810c
  10418  810c		       00 43	   D6s	      =	(* & $3ff)/4
  10419  810c		       ec 00 ee 0f	      DC.L	267256044
  10420  8110
  10421  8110		       00 44	   E6	      =	(* & $3ff)/4
  10422  8110		       8b 7e e0 10	      DC.L	283147915
  10423  8114
  10424  8114		       00 45	   F6	      =	(* & $3ff)/4
  10425  8114		       7f 67 e1 11	      DC.L	299984767
  10426  8118
  10427  8118		       00 46	   F6s	      =	(* & $3ff)/4
  10428  8118		       45 97 f1 12	      DC.L	317822789
  10429  811c
  10430  811c		       00 47	   G6	      =	(* & $3ff)/4
  10431  811c		       6c f6 11 14	      DC.L	336721516
  10432  8120
  10433  8120		       00 48	   G6s	      =	(* & $3ff)/4
  10434  8120		       53 7b 43 15	      DC.L	356744019
  10435  8124
  10436  8124		       00 49	   A6	      =	(* & $3ff)/4
  10437  8124		       02 2b 87 16	      DC.L	377957122
  10438  8128
  10439  8128		       00 4a	   A6s	      =	(* & $3ff)/4
  10440  8128		       06 1a de 17	      DC.L	400431622
  10441  812c
  10442  812c		       00 4b	   B6	      =	(* & $3ff)/4
  10443  812c		       5d 6d 49 19	      DC.L	424242525
  10444  8130
  10445  8130		       00 4c	   C7	      =	(* & $3ff)/4
  10446  8130		       73 5b ca 1a	      DC.L	449469299
  10447  8134
  10448  8134		       00 4d	   C7s	      =	(* & $3ff)/4
  10449  8134		       26 2d 62 1c	      DC.L	476196134
  10450  8138
  10451  8138		       00 4e	   D7	      =	(* & $3ff)/4
  10452  8138		       e6 3e 12 1e	      DC.L	504512230
  10453  813c
  10454  813c		       00 4f	   D7s	      =	(* & $3ff)/4
  10455  813c		       d8 01 dc 1f	      DC.L	534512088
  10456  8140
  10457  8140		       00 50	   E7	      =	(* & $3ff)/4
  10458  8140		       17 fd c0 21	      DC.L	566295831
  10459  8144
  10460  8144		       00 51	   F7	      =	(* & $3ff)/4
  10461  8144		       fd ce c2 23	      DC.L	599969533
  10462  8148
  10463  8148		       00 52	   F7s	      =	(* & $3ff)/4
  10464  8148		       8a 2e e3 25	      DC.L	635645578
  10465  814c
  10466  814c		       00 53	   G7	      =	(* & $3ff)/4
  10467  814c		       d7 ec 23 28	      DC.L	673443031
  10468  8150
  10469  8150		       00 54	   G7s	      =	(* & $3ff)/4
  10470  8150		       a6 f6 86 2a	      DC.L	713488038
  10471  8154
  10472  8154		       00 55	   A7	      =	(* & $3ff)/4
  10473  8154		       04 56 0e 2d	      DC.L	755914244
  10474  8158
  10475  8158		       00 56	   A7s	      =	(* & $3ff)/4
  10476  8158		       0c 34 bc 2f	      DC.L	800863244
  10477  815c
  10478  815c		       00 57	   B7	      =	(* & $3ff)/4
  10479  815c		       bb da 92 32	      DC.L	848485051
  10480  8160
  10481  8160		       00 58	   C8	      =	(* & $3ff)/4
  10482  8160		       e5 b6 94 35	      DC.L	898938597
  10483  8164
  10484  8164							;values for 89-255 may go here 
  10485  8164
  10486  8164					      if	(* <= $1400)
  10487  8164		       00 00 00 00*	      ds	($1400-*)	; pad out remaining space in frequency table
  10488  8400				  -	      else
  10489  8400				  -	      echo	"FATAL ERROR - Frequency table exceeds 1K"
  10490  8400				  -	      err
  10491  8400					      endif
